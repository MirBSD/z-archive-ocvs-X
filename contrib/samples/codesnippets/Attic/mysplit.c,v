head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2004.10.05.10.34.57;	author tg;	state dead;
branches;
next	1.4;

1.4
date	2004.08.06.23.05.31;	author tg;	state Stab;
branches;
next	1.3;

1.3
date	2004.08.06.23.01.56;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.22.22.25.39;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.18.11.08.03;	author tg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@major reorganisation of the contrib/ structure
easier directory paths; code/ for MirSoftware
XXX still a bit uneasy about gfdl-docs, but a
XXX solution will come with the new gcc I think
@
text
@/* $MirBSD: contrib/samples/codesnippets/mysplit.c,v 1.4 2004/08/06 23:05:31 tg Stab $
 *-
 * Copyright (c) 2004
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publically perform, modi-
 * fy, merge, distribute, sell, give away or sublicence, provided the
 * above copyright notices, these terms and the disclaimer are retai-
 * ned in all redistributions, or reproduced in accompanying documen-
 * tation or other materials provided with binary redistributions.
 *
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of covered work, even if advised of the possibility of such damage.
 */

#include <sys/param.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <regex.h>
#include <err.h>

#ifdef	DEBUG
#define	D(x, ...)	fprintf(stderr, "deb: " x "\n", __VA_ARGS__);
#else
#define	D(x, ...)
#endif

#define	FNAM	"split.%016llX"	/* file name template */
#define	FNAMLEN	128	/* max. file name length */
#define	BUFLEN	2048	/* check in N byte chunks (fragsiz) */
#define	CHKLEN	80	/* check first N bytes */
 /* regex to check for */
#define	CHKEXP	"[A-Za-z0-9_ \n\t-]{5,}[\t\n -~]{6,}[A-Za-z0-9_ \n\t-]{5,}"

char fnbuf[FNAMLEN], fdbuf[BUFLEN];

int
main(int argc, char *argv[])
{
	int64_t num = 0;
	int ifd, fd = 0, rt;
	size_t b;
	regex_t re;
	regmatch_t pmatch;

	if (argc > 1) {
		if ((ifd = open(argv[1], O_RDONLY, 0)) == -1)
			err(1, "open input");
	} else
		ifd = 0;
	D("ifd = %d", ifd);

	if ((rt = regcomp(&re, CHKEXP, REG_EXTENDED | REG_NOSUB))) {
		regerror(rt, &re, fdbuf, BUFLEN);
		regfree(&re);
		fprintf(stderr, "error %d in RE: %s\n", rt, fdbuf);
		return 1;
	}
	pmatch.rm_so = 0;
	pmatch.rm_eo = CHKLEN;

	while ((b = read(ifd, fdbuf, BUFLEN))) {
		rt = regexec(&re, fdbuf, 0, &pmatch,
		    REG_NOTBOL | REG_NOTEOL | REG_STARTEND);
		D("b = %d; rt = %d (%s)", b, rt, (rt == REG_NOMATCH) ?
		    "no match" : ((rt == 0) ? "match" : "error"));
		if (rt == REG_NOMATCH)
			continue;
		if (rt) {
			regerror(rt, &re, fdbuf, BUFLEN);
			regfree(&re);
			fprintf(stderr, "error in RE on %s: %s\n",
			    fnbuf, fdbuf);
			return 1;
		}
		if (!fd) {
			snprintf(fnbuf, FNAMLEN, FNAM, num++);
			if ((fd = open(fnbuf, O_WRONLY | O_CREAT | O_EXCL,
			    0400)) == -1)
				err(1, "open");
			D("opened %s to fd %d", fnbuf, fd);
		}
		while ((b) && (!fdbuf[b - 1]))
			--b;
		if ((size_t)write(fd, fdbuf, b) != b) {
			fprintf(stderr, "warning: could not write"
			    " %d bytes to file %s", b, fnbuf);
		}
		if ((b != BUFLEN) ||
		    !(fdbuf[BUFLEN - 1]) || !(fdbuf[BUFLEN - 2])) {
			D("closing, b=%d, fdbuf=%02X%02X", b,
			    fdbuf[BUFLEN - 2], fdbuf[BUFLEN - 1]);
			if (close(fd))
				fprintf(stderr, "warning: close on %s", fnbuf);
			fd = 0;
		} else {
			D("looping over, b=%d, fdbuf=%02X%02X", b,
			    fdbuf[BUFLEN - 2], fdbuf[BUFLEN - 1]);
		}
	}
	if (fd)
		close(fd);
	regfree(&re);
	return 0;
}
@


1.4
log
@with -c0, it looks like this...
@
text
@d1 1
a1 1
/* $MirBSD: contrib/samples/codesnippets/mysplit.c,v 1.3 2004/08/06 23:01:56 tg Exp $
@


1.3
log
@indent

-Tsize_t
@
text
@d1 1
a1 1
/* $MirBSD: contrib/samples/codesnippets/mysplit.c,v 1.2 2004/07/22 22:25:39 tg Exp $
d36 3
a38 3
#define	FNAMLEN	128		/* max. file name length */
#define	BUFLEN	2048		/* check in N byte chunks (fragsiz) */
#define	CHKLEN	80		/* check first N bytes */
@


1.2
log
@warnings clean; use frag not block size (as described on -discuss@@)
@
text
@d1 1
a1 1
/* $MirBSD: contrib/samples/codesnippets/mysplit.c,v 1.1 2004/07/18 11:08:03 tg Exp $
d32 1
a32 1
#define	D(x, ...)	/* */
d35 5
a39 4
#define	FNAM	"split.%016llX"		/* file name template */
#define	FNAMLEN	128			/* max. file name length */
#define	BUFLEN	2048			/* check in N byte chunks (fragsiz) */
#define	CHKLEN	80			/* check first N bytes */
a40 1
					/* regex to check for */
d56 2
a57 1
	} else	ifd = 0;
d73 1
a73 1
		    "no match" : ( (rt == 0) ? "match" : "error"));
d96 2
a97 2
		if ( (b != BUFLEN) ||
		    !(fdbuf[BUFLEN - 1]) || !(fdbuf[BUFLEN - 2]) ) {
@


1.1
log
@Yesterday, I worked for about 10 hours at httpd.

Finally, I got a useful state, added RCS IDs to about
every changed file, and wanted to do a last test-compile
before committing.
I thought "rm -rf /usr/obj/usr.sbin/httpd" and tabcompleted
"rm -rf /usr/src/usr.sbin/httpd" instead.

With "The Sleuthkit", after 2-3 hours of looking around and
trying to frag my HDD using fsdb (hint: it doesn't work,
the inodes _are_ zeroed out after rm), I was able to save
the unused blocks of the filesystem (by 16 KiB chunks) to
another filesystem - the only one large enough I had lying
around was an USB HDD; I only have USB 1.1 at my laptop...

Anyway, after about 5 hours, I felt it took forever (had
only 2/3 copied), so I started to look around what split(1)
can do. I was disappointed - there is a hard upper bound
to the number of files.
So I coded my own split, and thought, "why not just do the
check for ascii and overlapping files you were going to do
with ksh and manually in the programme?", read regcomp(3)
several times, drank a good mug of hot cacao and RTFM again.

Well, after 6 hours (and a night of sleep) I've now got
33915 more-or-less text files to look after, and still
4 hours to go (I wouldn't even think I could re-do the
whole thing at all, left alone faster).


Note: if I hadn't _thought_ after hitting the return key,
      but immediately powered off my box, I think softupdates
      would have saved me. So much.
@
text
@d1 1
a1 1
/* $MirBSD: src/share/misc/licence.template,v 1.11 2004/05/28 15:34:01 tg Rel $
d37 1
a37 1
#define	BUFLEN	16384			/* check in N byte chunks */
d53 4
a56 2
	if ((ifd = open(argv[1], O_RDONLY, 0)) == -1)
		err(1, "open input");
d91 1
a91 1
		if (write(fd, fdbuf, b) != b) {
@

