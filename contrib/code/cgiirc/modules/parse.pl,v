head	1.4;
access;
symbols
	cgiirc-0_5_4:1.1.3.1 tg:1.1.3;
locks; strict;
comment	@# @;


1.4
date	2004.11.02.08.50.47;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.27.11.30.30;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.27.11.02.22;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.27.10.56.50;	author tg;	state Exp;
branches
	1.1.3.1;
next	;

1.1.3.1
date	2004.10.27.10.56.50;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@umlauts, lousy ones
@
text
@# $MirBSD: contrib/code/cgiirc/modules/parse.pl,v 1.3 2004/10/27 11:30:30 tg Exp $
#
# Copyright (c) 2004 Thorsten Glaser.
# This file is licenced under the GNU GPL, Version 2.

#### Parsing Functions

## Reads a config file from the filename passed to it, returns a reference to
## a hash containing the name=value pairs in the file.
sub parse_config {
   my %config;
   open(CONFIG, "<$_[0]") or error("Opening config file '$_[0]': $!");
   while(<CONFIG>) {
	  s/(\015\012|\012)$//; # Be forgiving for poor windows users
      next if /^\s*[#;]/; # Comments
      next if !/=/;

      my($key,$value) = split(/\s*=\s*/, $_, 2);
      $config{$key} = defined $value ? $value : '';
   }
   close(CONFIG);
   return \%config;
}

## Parses a CGI input, returns a hash reference to the value within it.
## The clever regexp bit is from cgi-lib.pl
## This now also removes certain characters that might not be a good idea.
sub parse_query {
   my($query, $allow) = @@_;
   return {} unless defined $query and length $query;

   return {
	  map {
	     s/\+/ /g;
	     my($key, $val) = split(/=/,$_,2);
        $val = "" unless defined $val;

	     $key =~ s/%([A-Fa-f0-9]{2})/pack("c",hex($1))/ge;
        $key =~ s/[\r\n\0\001]//g;
	     $val =~ s/%u([A-Fa-f0-9]{4})/pack("U",hex($1))/ge;
	     $val =~ s/%([A-Fa-f0-9]{2})/pack("U",hex("00".$1))/ge;
        if(defined $allow and $allow) {
           $val =~ s/[\0\001]//g;
        }else{
           $val =~ s/[\r\n\0\001]//g;
        }

	     $key => $val; # Return a hash element to map.
      } split(/[&;]/, $query)
   };
}

sub parse_cookie {
   if(exists $ENV{HTTP_COOKIE} && $ENV{HTTP_COOKIE} =~ /cgiircauth/) {
	  for(split /;/, $ENV{HTTP_COOKIE}) {
		 s/^\s+//;
		 my($name,$value) = split(/=/,$_,2);
		 return $value if $name eq "cgiircauth";
	  }
   }
   return 0;
}

sub parse_interface_cookie {
   my %tmp = ( );
   if(exists $ENV{HTTP_COOKIE} && $ENV{HTTP_COOKIE} =~ /cgiirc/) {
      for(split /;/, $ENV{HTTP_COOKIE}) {
         s/^\s+//;
         my($name,$value) = split(/=/,$_,2);
         next if $name =~ /[^a-z]/i;
         next unless $name =~ s/^cgiirc//;
         next if $name eq 'auth';
         $tmp{$name} = $value;
      }
   }
   return \%tmp;
}

sub escape_html {
   my($html) = @@_;
   $html =~ s/&/&amp;/g;
   $html =~ s/>/&gt;/g;
   $html =~ s/</&lt;/g;
   $html =~ s/"/&quot;/g;
   return $html;
}

1;
@


1.3
log
@MirOSify; update; nuke leftovers
@
text
@d1 1
a1 1
# $MirBSD$
d41 1
a41 1
	     $val =~ s/%([A-Fa-f0-9]{2})/pack("c",hex($1))/ge;
@


1.2
log
@utf-8 patches, (c) by me
@
text
@d1 4
a4 1
# (c) 2004 Thorsten Glaser
@


1.1
log
@Initial revision
@
text
@d1 2
d37 1
@


1.1.3.1
log
@upstream cgi::irc 0.5.4 from sf
@
text
@@
