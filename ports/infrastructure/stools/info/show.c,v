head	1.6;
access;
symbols
	cvs-200408271520:1.1.3.1 tg:1.1.3;
locks; strict;
comment	@ * @;


1.6
date	2005.03.12.19.23.55;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.12.17.20.34;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.28.18.05.09;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.12.21.35.07;	author bsiegert;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.10.16.46.20;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.27.15.27.01;	author tg;	state Exp;
branches
	1.1.3.1;
next	;

1.1.3.1
date	2004.08.27.15.27.01;	author tg;	state Stab;
branches;
next	;


desc
@@


1.6
log
@now all of stools build with
 -Wall -Wextra -Wunused -Wdeclaration-after-statement -Wundef
 --Wendif-labels -Wshadow -Wpointer-arith -Wbad-function-cast
 --Wcast-qual -Wcast-align -Wwrite-strings -Wstrict-prototypes
 --Wold-style-definition -Wmissing-prototypes -Wmissing-declarations
 --Wmissing-noreturn -Wmissing-format-attribute -Wredundant-decls
 --Wno-unreachable-code -Winline -pedantic -std=c99

didn't look at octools yet, since I don't have XCode(R)
@
text
@/* $MirBSD: ports/infrastructure/stools/info/show.c,v 1.5 2005/03/12 17:20:34 tg Exp $ */
/* $OpenBSD: show.c,v 1.13 2003/08/21 20:24:56 espie Exp $ */

/*
 * FreeBSD install - a package for the installation and maintainance
 * of non-core utilities.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Jordan K. Hubbard
 * 23 Aug 1993
 *
 * Various display routines for the info module.
 */

#include <err.h>

#include "lib.h"
#include "info.h"

__RCSID("$MirBSD: ports/infrastructure/stools/info/show.c,v 1.5 2005/03/12 17:20:34 tg Exp $");

/* structure to define entries for the "show table" */
typedef struct show_t {
	pl_ent_t	sh_type;	/* type of entry */
	const char	*sh_quiet;	/* message when quiet */
	const char	*sh_verbose;	/* message when verbose */
} show_t;

/* the entries in this table must be ordered the same as pl_ent_t constants */
static show_t	showv[] = {
	{	PLIST_FILE,	"%s",		"File: %s" },
	{	PLIST_CWD,	"@@cwd %s",	"\tCWD to: %s" },
	{	PLIST_CMD,	"@@exec %s",	"\tEXEC '%s'" },
	{	PLIST_CHMOD,	"@@chmod %s",	"\tCHMOD to %s" },
	{	PLIST_CHOWN,	"@@chown %s",	"\tCHOWN to %s" },
	{	PLIST_CHGRP,	"@@chgrp %s",	"\tCHGRP to %s" },
	{	PLIST_COMMENT,	"@@comment %s",	"\tComment: %s" },
	{	PLIST_ARCH,	"@@arch %s",	"\tComment: @@arch %s" },
	{	PLIST_IGNORE,	NULL,	NULL },
	{	PLIST_NAME,	"@@name %s",	"\tPackage name: %s" },
	{	PLIST_UNEXEC,	"@@unexec %s",	"\tUNEXEC '%s'" },
	{	PLIST_SRC,	"@@srcdir: %s",	"\tSRCDIR to: %s" },
	{	PLIST_DISPLAY,	"@@display %s",	"\tInstall message file: %s" },
	{	PLIST_PKGDEP,	"@@pkgdep %s",	"\tPackage depends on: %s" },
	{	PLIST_MTREE,	"@@mtree %s",	"\tPackage mtree file: %s" },
	{	PLIST_DIR_RM,	"@@dirrm %s",	"\tDeinstall directory remove: %s" },
	{	PLIST_OPTION,	"@@option %s",	"\tPackage has option: %s" },
	{	PLIST_PKGCFL,	"@@pkgcfl %s",	"\tPackage conflicts with: %s" },
	{	PLIST_EXTRA,	"@@extra %s",	"\tExtra files: %s" },
	{	PLIST_EXTRAUNEXEC,
				"@@extraunexec %s",
						"\tExtra UNEXEC: %s" },
	{	PLIST_SAMPLE,	"@@sample %s",	"\tInstall configuration file: %s" },
	{	PLIST_LIB,	"@@lib %s",	"\tShared library: %s" },
	{	PLIST_SHELL,	"@@shell %s",	"\tShell: %s" },
	{	-1,		NULL,		 NULL }
};

void
show_file(const char *title, const char *fname)
{
	FILE *fp;
	char line[1024];
	int n;

	if (!Quiet) {
		printf("%s%s", InfoPrefix, title);
	}
	if ((fp = fopen(fname, "r")) == NULL) {
		printf("ERROR: show_file: Can't open '%s' for reading!\n", fname);
	} else {
		while ((n = fread(line, 1, 1024, fp)) != 0) {
			fwrite(line, 1, n, stdout);
		}
		(void) fclose(fp);
	}
	printf("\n");	/* just in case */
}

void
show_index(const char *title, const char *fname)
{
	FILE *fp;
	char line[MAXINDEXSIZE+2];

	strlcpy(line, "???\n", sizeof(line));

	if (!Quiet) {
		printf("%s%-18s ", InfoPrefix, title);
	}
	if ((fp = fopen(fname, "r")) == NULL) {
		pwarnx("show_file (%s): can't open '%s' for reading", title, fname);
	}
	else {
		if (fgets(line, MAXINDEXSIZE+1, fp)) {
			int  line_length = strlen(line);

			if (line[line_length-1] != '\n') {
				line[line_length] = '\n';
				line[line_length+1] = 0;
			}
		}
		(void) fclose(fp);
	}
        (void) fputs(line, stdout);
}

/* Show a packing list item type.  If type is PLIST_SHOW_ALL, show all */
void
show_plist(const char *title, package_t *plist, pl_ent_t type)
{
    plist_t *p;
    bool ign;
    show_t *showr;

    if (!Quiet) {
	printf("%s%s", InfoPrefix, title);
    }
    for (ign = false, p = plist->head; p ; p = p->next) {
	if (p->type == type || type == PLIST_SHOW_ALL) {
		for (showr = showv; (showr->sh_type != p->type) && (showr->sh_type != -1); showr++);
		switch(p->type) {
		case PLIST_FILE:
			printf(Quiet ? showr->sh_quiet : showr->sh_verbose, p->name);
			if (ign) {
				if (!Quiet) {
					printf(" (ignored)");
				}
				ign = false;
			}
			break;
		case PLIST_CHMOD:
		case PLIST_CHOWN:
		case PLIST_CHGRP:
			printf(Quiet ? showr->sh_quiet : showr->sh_verbose,
				p->name ? p->name : "(clear default)");
			break;
		case PLIST_IGNORE:
			ign = true;
			break;
		case PLIST_CWD:
		case PLIST_CMD:
		case PLIST_SRC:
		case PLIST_UNEXEC:
		case PLIST_COMMENT:
		case PLIST_NAME:
		case PLIST_DISPLAY:
		case PLIST_PKGDEP:
		case PLIST_MTREE:
		case PLIST_DIR_RM:
		case PLIST_OPTION:
		case PLIST_PKGCFL:
		case PLIST_EXTRA:
		case PLIST_EXTRAUNEXEC:
		case PLIST_SAMPLE:
			printf(Quiet ? showr->sh_quiet : showr->sh_verbose, p->name);
			break;
		default:
			pwarnx("unknown command type %d (%s)", p->type, p->name);
		}
		(void) fputc('\n', stdout);
	}
    }
}

/* Show all files in the packing list (except ignored ones) */
void
show_files(const char *title, package_t *plist)
{
	plist_t	*p;
	bool	ign;
	const char *dir = ".";

	if (!Quiet) {
		printf("%s%s", InfoPrefix, title);
	}
	for (ign = false, p = plist->head; p ; p = p->next) {
		switch(p->type) {
		case PLIST_FILE:
			if (!ign) {
				printf("%s/%s\n", dir, p->name);
			}
			ign = false;
			break;
		case PLIST_CWD:
			dir = p->name;
			break;
		case PLIST_IGNORE:
			ign = true;
			break;
		default:
			break;
		}
	}
}
@


1.5
log
@* Boolean/TRUE/FALSE -> bool/true/false
* SUCCESS/FAIL -> 0/-1
* no /usr/tmp (it violates hier(7))
@
text
@d1 1
a1 1
/* $MirBSD: ports/infrastructure/stools/info/show.c,v 1.4 2005/02/28 18:05:09 tg Exp $ */
d28 1
a28 1
__RCSID("$MirBSD: ports/infrastructure/stools/info/show.c,v 1.4 2005/02/28 18:05:09 tg Exp $");
d33 2
a34 2
	char		*sh_quiet;	/* message when quiet */
	char		*sh_verbose;	/* message when verbose */
d68 1
a68 1
show_file(char *title, char *fname)
d89 1
a89 1
show_index(char *title, char *fname)
d118 1
a118 1
show_plist(char *title, package_t *plist, pl_ent_t type)
d176 1
a176 1
show_files(char *title, package_t *plist)
d180 1
a180 1
	char	*dir = ".";
@


1.4
log
@don't cast NULL
@
text
@d1 1
a1 1
/* $MirBSD: ports/infrastructure/stools/info/show.c,v 1.3 2004/10/12 21:35:07 bsiegert Exp $ */
d28 1
a28 1
__RCSID("$MirBSD: ports/infrastructure/stools/info/show.c,v 1.3 2004/10/12 21:35:07 bsiegert Exp $");
d121 1
a121 1
    Boolean ign;
d127 1
a127 1
    for (ign = FALSE, p = plist->head; p ; p = p->next) {
d137 1
a137 1
				ign = FALSE;
d147 1
a147 1
			ign = TRUE;
d179 1
a179 1
	Boolean	ign;
d185 1
a185 1
	for (ign = FALSE, p = plist->head; p ; p = p->next) {
d191 1
a191 1
			ign = FALSE;
d197 1
a197 1
			ign = TRUE;
@


1.3
log
@Implement @@lib, @@shell, and @@endfake.

@@endfake is thrown away at pkg_create(1) time.
@@lib and @@shell are treated like normal files.
@
text
@d1 1
a1 1
/* $MirBSD: ports/infrastructure/stools/info/show.c,v 1.2 2004/10/10 16:46:20 tg Exp $ */
d28 1
a28 1
__RCSID("$MirBSD: ports/infrastructure/stools/info/show.c,v 1.2 2004/10/10 16:46:20 tg Exp $");
d77 1
a77 1
	if ((fp = fopen(fname, "r")) == (FILE *) NULL) {
d99 1
a99 1
	if ((fp = fopen(fname, "r")) == (FILE *) NULL) {
@


1.2
log
@* sync pkg tools with what's currently in src/
  idea by bsiegert@@
* -Wall -Werror only ifndef PORTABLE
  (so it's still in for native development)
* let setup.sh define PORTABLE
@
text
@d1 1
a1 1
/* $MirBSD: src/usr.sbin/pkg_install/info/show.c,v 1.5 2004/09/20 16:39:33 tg Exp $ */
d28 1
a28 1
__RCSID("$MirBSD: src/usr.sbin/pkg_install/info/show.c,v 1.5 2004/09/20 16:39:33 tg Exp $");
d62 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $MirBSD: src/usr.sbin/pkg_install/info/show.c,v 1.4 2004/07/21 10:24:35 tg Exp $ */
d28 1
a28 1
__RCSID("$MirBSD: src/usr.sbin/pkg_install/info/show.c,v 1.4 2004/07/21 10:24:35 tg Exp $");
d61 1
d120 1
d127 1
d130 1
a130 1
			printf(Quiet ? showv[p->type].sh_quiet : showv[p->type].sh_verbose, p->name);
d141 1
a141 1
			printf(Quiet ? showv[p->type].sh_quiet : showv[p->type].sh_verbose,
d161 2
a162 1
			printf(Quiet ? showv[p->type].sh_quiet : showv[p->type].sh_verbose, p->name);
@


1.1.3.1
log
@src/usr.sbin/pkg_install comes into ports/infrastructure
@
text
@@
