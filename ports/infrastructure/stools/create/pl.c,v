head	1.20;
access;
symbols
	cvs-200408271520:1.1.3.1 tg:1.1.3;
locks; strict;
comment	@ * @;


1.20
date	2005.03.12.19.02.20;	author tg;	state Exp;
branches;
next	1.19;

1.19
date	2005.03.12.18.40.25;	author tg;	state Exp;
branches;
next	1.18;

1.18
date	2005.03.12.17.20.34;	author tg;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.10.21.10.03;	author tg;	state Exp;
branches;
next	1.16;

1.16
date	2005.03.06.21.53.41;	author bsiegert;	state Exp;
branches;
next	1.15;

1.15
date	2005.03.06.16.43.11;	author bsiegert;	state Exp;
branches;
next	1.14;

1.14
date	2005.03.02.22.17.48;	author tg;	state Exp;
branches;
next	1.13;

1.13
date	2005.02.28.21.10.34;	author tg;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.28.18.05.09;	author tg;	state Exp;
branches;
next	1.11;

1.11
date	2005.02.06.23.48.33;	author bsiegert;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.12.21.06.37;	author bsiegert;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.21.19.06.06;	author bsiegert;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.16.20.44.19;	author tg;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.15.21.33.47;	author bsiegert;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.15.19.01.12;	author bsiegert;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.12.14.45.28;	author bsiegert;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.12.21.24.04;	author bsiegert;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.12.21.35.06;	author bsiegert;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.10.16.46.18;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.27.15.27.01;	author tg;	state Exp;
branches
	1.1.3.1;
next	;

1.1.3.1
date	2004.08.27.15.27.01;	author tg;	state Stab;
branches;
next	;


desc
@@


1.20
log
@now less warnings: lib, add, create
@
text
@/**	$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.19 2005/03/12 18:40:25 tg Exp $ */
/*	$OpenBSD: pl.c,v 1.11 2003/08/15 00:03:22 espie Exp $	*/

/*
 * FreeBSD install - a package for the installation and maintainance
 * of non-core utilities.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Jordan K. Hubbard
 * 18 July 1993
 *
 * Routines for dealing with the packing list.
 */

#include "lib.h"
#include "create.h"
#include <errno.h>
#include <err.h>
#include <fcntl.h>
#include <glob.h>
#include <md5.h>
#include <unistd.h>

__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.19 2005/03/12 18:40:25 tg Exp $");

int IsDylib = 0;

/* library name conversion for darwin */
static void
convert_dylib(package_t *pkg, plist_t *p, char *cwd)
{
	char *tmp, pattern[FILENAME_MAX];
	size_t len;

	if (!pkg || !p)
		return;
	tmp = strstr(p->name, ".so");
	if (!tmp) {
		return;
	}
	*tmp = '\0';
	snprintf(pattern, sizeof(pattern), "%s.[0-9]*.dylib", p->name);
	add_plist_glob(pkg, p, strconcat(BaseDir, cwd), pattern);

	len = strlen(p->name) + 7;	/* .dylib\0 */
	tmp = realloc(p->name, len);
	if (!tmp) {
		pwarn("dylib realloc failed");
		return;
	}
	strlcat(tmp, ".dylib", len);
	p->name = tmp;
	p->type = PLIST_FILE;
}

/* Check a list for files that require preconversion */
void
check_list(char *home, package_t *pkg)
{
	plist_t	*tmp;
	plist_t	*p;
	char	*cwd = home;
	char	*there = NULL;
	char	*cp;
	char	name[FILENAME_MAX];
	char	buf[LegibleChecksumLen];
	int     len;
	int	use_ldconfig = 0;

	for (p = pkg->head ; p ; p = p->next) {
		switch (p->type) {
		case PLIST_OPTION:
			if (!strcmp(p->name, "dylib")) {
				IsDylib = true;
				printf("Dylib support enabled\n");
			}
			break;
		case PLIST_CWD:
			cwd = p->name;
			break;
		case PLIST_IGNORE:
			p = p->next;
			break;
		case PLIST_SRC:
			there = p->name;
			break;
		case PLIST_COMMENT:
			if (p->name != NULL &&
			    strcmp(p->name, "no checksum") == 0)
				p = p->next;
			break;
		case PLIST_ENDFAKE:
			p = p->prev;
			delete_plist(pkg, false, PLIST_ENDFAKE, NULL);
			break;
		case PLIST_INFO:
			p->type = PLIST_FILE;
			/* search for other chapter files */
			memset(name, 0, sizeof(name));
			snprintf(name, sizeof(name), "%s-*", p->name);
			add_plist_glob(pkg, p, strconcat(BaseDir, cwd), name);
			add_plist_at(pkg, p, PLIST_CMD, strconcat(
			    "install-info --info-dir=%D/info %D/", p->name));
			add_plist_at(pkg, p->next, PLIST_UNEXEC, strconcat(
			    "install-info --delete --info-dir=%D/info %D/", p->name));
			p = p->prev;
			break;
		case PLIST_MAN:
			p->type = PLIST_FILE;
			p = p->prev;
			break;
		case PLIST_LIB:
			if (IsDylib) {
				convert_dylib(pkg, p, cwd);
				goto libdone;
			}
			if (!use_ldconfig)
				goto libdone;
			/* we use the goto because of the 80c limit here */
			if (!find_plist(pkg, PLIST_UNEXEC, "ldconfig -R"))
				add_plist(pkg, PLIST_UNEXEC, "ldconfig -R");
			cp = strconcat("ldconfig -m %D/", dirname(p->name));
			if (!find_plist(pkg, PLIST_CMD, cp)) {
				plist_t *q;
				for (q = p; q->next && q->next->type != PLIST_CWD;
					q = q->next);
				add_plist_at(pkg, q, PLIST_CMD, strdup(cp));
			}
		libdone:
			/* FALLTHROUGH */
		case PLIST_SHELL:
		case PLIST_FILE:
			len = strlen(p->name);
			tmp = NULL;
			if (p->name[len - 1] != '/') {   /* not a dir/ entry */
				if (IsDylib && !strncmp(p->name, "lib", 3))
					convert_dylib(pkg, p, cwd);
				if (BaseDir)
					(void) snprintf(name, sizeof(name),
					    "%s/%s/%s", BaseDir, there ? there : cwd,
					    p->name);
				else
					(void) snprintf(name, sizeof(name),
					    "%s/%s", there ? there : cwd, p->name);
				if ((cp = MD5File(name, buf)) != NULL)
					add_plist_at(pkg, p, PLIST_COMMENT, strconcat("MD5:", cp));
			}
			break;
		case PLIST_LDCACHE:
			if (p->name && (p->name[0] == '1'))
				use_ldconfig = 1;
			else
				use_ldconfig = 0;
			break;
		default:
			break;
		}
	}
}

static int
trylink(const char *from, const char *to)
{
	char	*cp;

	if (link(from, to) == 0) {
		return 0;
	}
	if (errno == ENOENT) {
		/* try making the container directory */
		if ((cp = strrchr(to, '/')) != NULL) {
			vsystem("mkdir -p %.*s", (size_t)(cp - to), to);
		}
		return link(from, to);
	}
	return -1;
}

#define STARTSTRING "mirports_tar cf -"
#define TOOBIG(str) strlen(str) + 6 + strlen(home) + where_count > maxargs
#define PUSHOUT() /* push out string */					\
	if (where_count > sizeof(STARTSTRING)-1) {			\
		    strlcat(where_args, "|mirports_tar xpf -", maxargs); \
		    if (system(where_args)) {				\
			cleanup(0);					\
			errx(2, "can't invoke tar pipeline");		\
		    }							\
		    memset(where_args, 0, maxargs);			\
 		    last_chdir = NULL;					\
		    strlcpy(where_args, STARTSTRING, maxargs);		\
		    where_count = sizeof(STARTSTRING)-1;		\
	}

/*
 * Copy unmarked files in packing list to playpen - marked files
 * have already been copied in an earlier pass through the list.
 */
void
copy_plist(char *home, package_t *plist)
{
    plist_t *p = plist->head;
    char *where = home;
    char *there = NULL;
    char *where_args;
    const char *mythere, *last_chdir, *root = "/";
    size_t maxargs, where_count = 0, add_count;
    struct stat stb;
    dev_t curdir;

    maxargs = sysconf(_SC_ARG_MAX);
    maxargs -= 64;			/* some slop for the tar cmd text,
					   and sh -c */
    where_args = malloc(maxargs);
    if (!where_args) {
	cleanup(0);
	errx(2, "can't get argument list space");
    }

    memset(where_args, 0, maxargs);
    strlcpy(where_args, STARTSTRING, maxargs);
    where_count = sizeof(STARTSTRING)-1;
    last_chdir = 0;

    if (stat(".", &stb) == 0)
	curdir = stb.st_dev;
    else
	curdir = (dev_t) -1;		/* It's ok if this is a valid dev_t;
					   this is just a hint for an
					   optimization. */

    while (p) {
	if (p->type == PLIST_CWD)
	    where = p->name;
	else if (p->type == PLIST_SRC)
	    there = p->name;
	else if (p->type == PLIST_IGNORE)
	    p = p->next;
	else if (p->type == PLIST_FILE && !p->marked) {
	    char fn[FILENAME_MAX];


	    /* First, look for it in the "home" dir */
	    (void) snprintf(fn, sizeof(fn), "%s/%s", home, p->name);
	    if (fexists(fn)) {
		if (lstat(fn, &stb) == 0 && stb.st_dev == curdir &&
		    S_ISREG(stb.st_mode)) {
		    /* if we can link it to the playpen, that avoids a copy
		       and saves time. */
		    if (p->name[0] != '/') {
			/* don't link abspn stuff--it doesn't come from
			   local dir! */
			if (trylink(fn, p->name) == 0) {
			    p = p->next;
			    continue;
			}
		    }
		}
		if (TOOBIG(fn)) {
		    PUSHOUT();
		}
		if (p->name[0] == '/') {
		    add_count = snprintf(&where_args[where_count],
					 maxargs - where_count,
					 " %s %s",
					 last_chdir == root ? "" : "-C /",
					 p->name);
		    last_chdir = root;
		} else {
		    add_count = snprintf(&where_args[where_count],
					 maxargs - where_count,
					 " %s%s %s",
					 last_chdir == home ? "" : "-C ",
					 last_chdir == home ? "" : home,
					 p->name);
		    last_chdir = home;
		}
		if (add_count > maxargs - where_count) {
		    cleanup(0);
		    errx(2, "oops, miscounted strings!");
		}
		where_count += add_count;
	    }
	    /*
	     * Otherwise, try along the actual extraction path..
	     */
	    else {
		if (p->name[0] == '/')
		    mythere = root;
		else mythere = there;
		(void) snprintf(fn, sizeof(fn), "%s/%s", mythere ? mythere : where, p->name);
		if (lstat(fn, &stb) == 0 && stb.st_dev == curdir &&
		    S_ISREG(stb.st_mode)) {
		    /* if we can link it to the playpen, that avoids a copy
		       and saves time. */
		    if (trylink(fn, p->name) == 0) {
			p = p->next;
			continue;
		    }
		}
		if (TOOBIG(p->name)) {
		    PUSHOUT();
		}
		if (last_chdir == (mythere ? mythere : where))
		    add_count = snprintf(&where_args[where_count],
					 maxargs - where_count,
					 " %s", p->name);
		else
		    add_count = snprintf(&where_args[where_count],
					 maxargs - where_count,
					 " -C %s %s",
					 mythere ? mythere : where,
					 p->name);
		if (add_count > maxargs - where_count) {
		    cleanup(0);
		    errx(2, "oops, miscounted strings!");
		}
		where_count += add_count;
		last_chdir = (mythere ? mythere : where);
	    }
	}
	p = p->next;
    }
    PUSHOUT();
    free(where_args);
}
@


1.19
log
@some cleanup:
* more const
* less redundant decls
* no shadowing variables with wider scope
* declare functions or static them

goal: to pass
  -Wall -Wextra -Wunused -Wdeclaration-after-statement -Wundef
  -Wendif-labels -Wshadow -Wpointer-arith -Wbad-function-cast
  -Wcast-qual -Wcast-align -Wwrite-strings -Wstrict-prototypes
  -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations
  -Wmissing-noreturn -Wmissing-format-attribute -Wredundant-decls
  -Wno-unreachable-code -Winline -pedantic -std=c99

end goal:
  -Wreachable-code -Wconversion

the former is broken in my very gcc 3.4.4 snapshot,
and the latter is broken for all <stdbool.h> types
due to integer promotion rules

thanks to waldi (the mirbsd.de sponsor) for helping with C a bit
@
text
@d1 1
a1 1
/**	$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.18 2005/03/12 17:20:34 tg Exp $ */
d32 1
a32 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.18 2005/03/12 17:20:34 tg Exp $");
d37 1
a37 1
void
d211 3
a213 2
    char *there = NULL, *mythere;
    char *where_args, *last_chdir, *root = "/";
@


1.18
log
@* Boolean/TRUE/FALSE -> bool/true/false
* SUCCESS/FAIL -> 0/-1
* no /usr/tmp (it violates hier(7))
@
text
@d1 1
a1 1
/**	$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.17 2005/03/10 21:10:03 tg Exp $ */
d32 1
a32 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.17 2005/03/10 21:10:03 tg Exp $");
d213 1
a213 1
    int maxargs, where_count = 0, add_count;
@


1.17
log
@someone broke MirPorts -HEAD for quite a while

hm, should've noticed this earlier
@
text
@d1 1
a1 1
/**	$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.16 2005/03/06 21:53:41 bsiegert Exp $ */
d32 1
a32 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.16 2005/03/06 21:53:41 bsiegert Exp $");
d82 1
a82 1
				IsDylib = TRUE;
d102 1
a102 1
			delete_plist(pkg, FALSE, PLIST_ENDFAKE, NULL);
@


1.16
log
@Add dylib support for Mac OS X.

Mac OS users, please test this. To test:

# Do a "env SHELL=/bin/mksh mmake setup" in /usr/mirports (assuming you have
  already installed MirPorts)
# Install a library without a PFRAG.dylib file and a dependent package
# Test if the library is there and the dependent package works
@
text
@d1 1
a1 1
/**	$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.15 2005/03/06 16:43:11 bsiegert Exp $ */
d32 1
a32 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.15 2005/03/06 16:43:11 bsiegert Exp $");
a75 1
	int	i;
@


1.15
log
@Replace the @@dylib token in PLISTs with @@option dylib. Also document this
in pkg_create(1).

agreed tg@@
@
text
@d1 1
a1 1
/**	$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.14 2005/03/02 22:17:48 tg Exp $ */
d32 1
a32 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.14 2005/03/02 22:17:48 tg Exp $");
d36 28
a69 1
	glob_t	pglob;
a76 1
	int	fd;
a107 1
			memset(&pglob, 0, sizeof(pglob));
d110 1
a110 9
			fd = open(".", O_RDONLY, 0);
			chdir(strconcat(BaseDir, cwd));
			glob(name, 0, NULL, &pglob);
			fchdir(fd);
			close(fd);
			for (i = 0; i < pglob.gl_pathc; i++)
				add_plist_at(pkg, p, PLIST_FILE,
				    strdup(pglob.gl_pathv[i]));
			globfree(&pglob);
d122 4
a125 2
			if (IsDylib)
				errx(2, "ask bsiegert@@ to add special @@lib support for dylibs");
d145 2
@


1.14
log
@experimental lib*.dylib support using PFRAG.dylib,
including an untested perl hack (I don't know perl
and still got to do this, aww) to create them

I wonder why I have to do this - on a PC notebook!
@
text
@d1 1
a1 1
/**	$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.13 2005/02/28 21:10:34 tg Exp $ */
d32 1
a32 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.13 2005/02/28 21:10:34 tg Exp $");
d55 5
a59 2
		case PLIST_DYLIB:
			IsDylib = !0;
@


1.13
log
@use mirports_tar better
@
text
@d1 1
a1 1
/**	$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.12 2005/02/28 18:05:09 tg Exp $ */
d32 3
a34 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.12 2005/02/28 18:05:09 tg Exp $");
d55 3
d102 2
@


1.12
log
@don't cast NULL
@
text
@d1 1
a1 1
/**	$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.11 2005/02/06 23:48:33 bsiegert Exp $ */
d32 1
a32 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.11 2005/02/06 23:48:33 bsiegert Exp $");
d157 1
a157 1
#define STARTSTRING "tar cf -"
d161 1
a161 1
		    strlcat(where_args, "|tar xpf -", maxargs);		\
@


1.11
log
@Implement @@sample dir/ and @@extra dir/. Have @@sample apply permissions
correctly.

This fixes two "show-stoppers", so @@sample should work without any worries
now. Still missing: some minor implementation details and the corresponding
documentation. I'm going to bed now.
@
text
@d1 1
a1 1
/**	$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.10 2005/01/12 21:06:37 bsiegert Exp $ */
d32 1
a32 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.10 2005/01/12 21:06:37 bsiegert Exp $");
d149 1
a149 1
		if ((cp = strrchr(to, '/')) != (char *) NULL) {
@


1.10
log
@Bugfix: Insert the ldconfig command before the next @@cwd command if there
is any.

Do not try to install cups-1.1.23 without this fix.
@
text
@d1 1
a1 1
/**	$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.9 2004/12/21 19:06:06 bsiegert Exp $ */
d32 1
a32 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.9 2004/12/21 19:06:06 bsiegert Exp $");
a125 4
			break;
		case PLIST_SAMPLE:
			if (p->name && p->name[strlen(p->name) - 1] == '/')
				p->type = PLIST_EXTRA;
@


1.9
log
@Refactor dir/ handling.

This means that directory entries in PLISTs are not replaced by @@exec mkdir
and @@dirrm at pkg_create time, but instead they are kept in the final package.
No real functional changes, but packages created using these new tools are not
compatible with older versions.

This was needed to implement @@sample dir/ (which should come next).

ok tg@@
@
text
@d1 1
a1 1
/**	$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.8 2004/12/16 20:44:19 tg Exp $ */
d32 1
a32 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.8 2004/12/16 20:44:19 tg Exp $");
d103 6
a108 2
			if (!find_plist(pkg, PLIST_CMD, cp))
				add_plist(pkg, PLIST_CMD, strdup(cp));
d126 4
@


1.8
log
@add a new plist item:
	@@ldcache 0
	@@ldcache 1

only during @@ldcache 1 sessions, @@lib automatically
adds the exec/unexec ldconfig calls.

not tested, but since @@lib is not used anywhere, I
commit it anyway, so Benny has got less work

the <bsd.port.mk> logic is correct, and a simple port
still installs with the new tools.
@
text
@d1 1
a1 1
/**	$MirBSD$ */
d32 1
a32 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.7 2004/12/15 21:33:47 bsiegert Exp $");
a39 1
	plist_t *q;
d111 1
a111 14
			if (p->name[len - 1] == '/')    /* directory/ entry */
			{
				p->name[--len] = '\0';
				/* install the @@dirrm on top of the others */
				if ((q = find_plist(pkg, PLIST_DIR_RM, NULL)))
					q = q->prev;
				else
					q = pkg->tail;
				(void) strlcpy(name, p->name, FILENAME_MAX);
				free(p->name);
				p->name = copy_string(strconcat("mkdir -p %D/", name));
				p->type = PLIST_CMD;
				add_plist_at(pkg, q, PLIST_DIR_RM, name);
			} else {
@


1.7
log
@Oops, don't free() a pointer on the heap.

Seriously, the string functions in libinstall are scary.
@
text
@d1 1
d32 1
a32 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.6 2004/12/15 19:01:12 bsiegert Exp $");
d50 1
d98 3
d106 1
d136 6
@


1.6
log
@A big one, finally: @@lib now automatically adds

@@unexec ldconfig -R
@@exec ldconfig -m %D/lib (or similar)

if they are not yet there. OpenBSD also does this. This means:

 a) If you use @@lib to mark your libs (as you should from now on), you do
    not need DYNLIBDIR and friends any more.
 b) @@lib is considered safe for use in MirPorts now.

This also solves the biggest showstopper for the next OpenBSD import.
@
text
@d31 1
a31 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.5 2004/12/12 14:45:28 bsiegert Exp $");
d100 1
a100 3
				add_plist(pkg, PLIST_CMD, cp);
			else
				free(cp);
@


1.5
log
@Add support for @@man.

pkg_create just changes them to a normal file entry.
@
text
@d31 1
a31 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.4 2004/11/12 21:24:04 bsiegert Exp $");
d96 7
a102 1
			
@


1.4
log
@Change find_plist() to accept a string to search for.
@
text
@d31 1
a31 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.3 2004/10/12 21:35:06 bsiegert Exp $");
d89 4
@


1.3
log
@Implement @@lib, @@shell, and @@endfake.

@@endfake is thrown away at pkg_create(1) time.
@@lib and @@shell are treated like normal files.
@
text
@d31 1
a31 1
__RCSID("$MirBSD: ports/infrastructure/stools/create/pl.c,v 1.2 2004/10/10 16:46:18 tg Exp $");
d89 4
a93 1
		case PLIST_LIB:
d102 1
a102 1
				if ((q = find_plist(pkg, PLIST_DIR_RM)))
@


1.2
log
@* sync pkg tools with what's currently in src/
  idea by bsiegert@@
* -Wall -Werror only ifndef PORTABLE
  (so it's still in for native development)
* let setup.sh define PORTABLE
@
text
@d31 1
a31 1
__RCSID("$MirBSD: src/usr.sbin/pkg_install/create/pl.c,v 1.6 2004/09/22 11:55:39 bsiegert Exp $");
d66 4
d90 2
@


1.1
log
@Initial revision
@
text
@d26 2
d29 1
d31 1
a31 1
__RCSID("$MirBSD: src/usr.sbin/pkg_install/create/pl.c,v 1.5 2004/08/05 21:17:08 bsiegert Exp $");
d40 1
d47 2
d68 13
@


1.1.3.1
log
@src/usr.sbin/pkg_install comes into ports/infrastructure
@
text
@@
