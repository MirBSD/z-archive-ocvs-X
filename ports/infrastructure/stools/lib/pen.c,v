head	1.4;
access;
symbols
	cvs-200408271520:1.1.3.1 tg:1.1.3;
locks; strict;
comment	@ * @;


1.4
date	2005.03.12.18.40.25;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.12.17.20.35;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.10.16.46.21;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.27.15.27.01;	author tg;	state Exp;
branches
	1.1.3.1;
next	;

1.1.3.1
date	2004.08.27.15.27.01;	author tg;	state Stab;
branches;
next	;


desc
@@


1.4
log
@some cleanup:
* more const
* less redundant decls
* no shadowing variables with wider scope
* declare functions or static them

goal: to pass
  -Wall -Wextra -Wunused -Wdeclaration-after-statement -Wundef
  -Wendif-labels -Wshadow -Wpointer-arith -Wbad-function-cast
  -Wcast-qual -Wcast-align -Wwrite-strings -Wstrict-prototypes
  -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations
  -Wmissing-noreturn -Wmissing-format-attribute -Wredundant-decls
  -Wno-unreachable-code -Winline -pedantic -std=c99

end goal:
  -Wreachable-code -Wconversion

the former is broken in my very gcc 3.4.4 snapshot,
and the latter is broken for all <stdbool.h> types
due to integer promotion rules

thanks to waldi (the mirbsd.de sponsor) for helping with C a bit
@
text
@/*	$OpenBSD: pen.c,v 1.13 2003/07/04 17:31:19 avsm Exp $	*/

/*
 * FreeBSD install - a package for the installation and maintainance
 * of non-core utilities.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Jordan K. Hubbard
 * 18 July 1993
 *
 * Routines for managing the "play pen".
 */

#include <err.h>
#include "lib.h"
#include <sys/signal.h>
#include <sys/param.h>
#include <sys/mount.h>
#include <errno.h>

__RCSID("$MirBSD: ports/infrastructure/stools/lib/pen.c,v 1.3 2005/03/12 17:20:35 tg Exp $");

/* For keeping track of where we are */
static char Current[FILENAME_MAX];
static char Previous[FILENAME_MAX];

/* Backup Current and Previous into temp. strings that are later
 * restored & freed by restore_dirs
 * This is to make nested calls to makeplaypen/leave_playpen work
 */
void
save_dirs(char **c, char **p)
{
    if ((*c = strdup(Current))  == NULL)
	err(2, NULL);
    if ((*p = strdup(Previous)) == NULL)
	err(2, NULL);
}

/* Restore Current and Previous from temp strings that were created
 * by safe_dirs.
 * This is to make nested calls to makeplaypen/leave_playpen work
 */
void
restore_dirs(char *c, char *p)
{
    strlcpy(Current, c, sizeof(Current));  free(c);
    strlcpy(Previous, p, sizeof(Previous)); free(p);
}

char *
where_playpen(void)
{
    return Current;
}

/* Find a good place to play. */
static char *
find_play_pen(char *pen, size_t pensize, size_t sz)
{
    char *cp;
    struct stat sb;

    if (pen[0] && stat(pen, &sb) != -1 && (min_free(pen) >= sz))
	return pen;
    else if ((cp = getenv("PKG_TMPDIR")) != NULL && stat(cp, &sb) != -1 && (min_free(cp) >= sz))
	(void) snprintf(pen, pensize, "%s/instmp.XXXXXXXXXX", cp);
    else if ((cp = getenv("TMPDIR")) != NULL && stat(cp, &sb) != -1 && (min_free(cp) >= sz))
	(void) snprintf(pen, pensize, "%s/instmp.XXXXXXXXXX", cp);
    else if (stat("/var/tmp", &sb) != -1 && min_free("/var/tmp") >= sz)
	strlcpy(pen, "/var/tmp/instmp.XXXXXXXXXX", pensize);
    else if (stat("/tmp", &sb) != -1 && min_free("/tmp") >= sz)
	strlcpy(pen, "/tmp/instmp.XXXXXXXXXX", pensize);
    else {
	cleanup(0);
	errx(2,
"can't find enough temporary space to extract the files, please set your\n"
"PKG_TMPDIR environment variable to a location with at least %lu bytes\n"
"free", (u_long)sz);
	return NULL;
    }
    return pen;
}

/*
 * Make a temporary directory to play in and chdir() to it, returning
 * pathname of previous working directory.
 */
char *
make_playpen(char *pen, size_t pensize, size_t sz)
{
    if (!find_play_pen(pen, pensize, sz))
	return NULL;

    if (!mkdtemp(pen)) {
	cleanup(0);
	errx(2, "can't mkdtemp '%s'", pen);
    }
    if (Verbose) {
	if (sz)
	    fprintf(stderr, "Requested space: %lu bytes, free space: %lld bytes in %s\n", (u_long)sz, (long long)min_free(pen), pen);
    }
    if (min_free(pen) < sz) {
	rmdir(pen);
	cleanup(0);
	errx(2, "not enough free space to create '%s'.\n"
	     "Please set your PKG_TMPDIR environment variable to a location\n"
	     "with more space and\ntry the command again", pen);
    }
    if (Current[0])
	strlcpy(Previous, Current, sizeof(Previous));
    else if (!getcwd(Previous, FILENAME_MAX)) {
	cleanup(0);
	err(1, "fatal error during execution: getcwd");
    }
    if (chdir(pen) == -1) {
	cleanup(0);
	errx(2, "can't chdir to '%s'", pen);
    }
    strlcpy(Current, pen, sizeof(Current));
    return Previous;
}

/* Convenience routine for getting out of playpen */
void
leave_playpen(char *save)
{
    int save_errno = errno;
    void (*oldsig)(int);

    /* XXX big signal race! */
    /* Don't interrupt while we're cleaning up */
    oldsig = signal(SIGINT, SIG_IGN);
    if (Previous[0] && chdir(Previous) == -1) {
	cleanup(0);	/* XXX */
	warnx("can't chdir back to '%s'", Previous);
	_exit(2);
    } else if (Current[0] && strcmp(Current, Previous)) {
        if (strcmp(Current,"/")==0) {
            fprintf(stderr,"PANIC: About to rm -rf / (not doing so, aborting)\n");
            abort();	/* XXX is abort safe? */
        }
	if (vsystem("rm -rf %s", Current))
	    pwarnx("couldn't remove temporary dir '%s'", Current);
	strlcpy(Current, Previous, sizeof(Current));	/* XXX */
    }
    if (save)
	strlcpy(Previous, save, sizeof(Previous));		/* XXX */
    else
	Previous[0] = '\0';
    signal(SIGINT, oldsig);
    errno = save_errno;
}

off_t
min_free(const char *tmpdir)
{
    struct statfs buf;

    if (statfs(tmpdir, &buf) != 0) {
	warn("statfs");
	return -1;
    }
    return (off_t)buf.f_bavail * (off_t)buf.f_bsize;
}
@


1.3
log
@* Boolean/TRUE/FALSE -> bool/true/false
* SUCCESS/FAIL -> 0/-1
* no /usr/tmp (it violates hier(7))
@
text
@d29 1
a29 1
__RCSID("$MirBSD: ports/infrastructure/stools/lib/pen.c,v 1.2 2004/10/10 16:46:21 tg Exp $");
d109 1
a109 1
	    fprintf(stderr, "Requested space: %lu bytes, free space: %qd bytes in %s\n", (u_long)sz, (long long)min_free(pen), pen);
d164 1
a164 1
min_free(char *tmpdir)
@


1.2
log
@* sync pkg tools with what's currently in src/
  idea by bsiegert@@
* -Wall -Werror only ifndef PORTABLE
  (so it's still in for native development)
* let setup.sh define PORTABLE
@
text
@d29 1
a29 1
__RCSID("$MirBSD: src/usr.sbin/pkg_install/lib/pen.c,v 1.5 2004/07/21 10:24:36 tg Stab $");
d72 1
a72 1
    if (pen[0] && stat(pen, &sb) != FAIL && (min_free(pen) >= sz))
d74 1
a74 1
    else if ((cp = getenv("PKG_TMPDIR")) != NULL && stat(cp, &sb) != FAIL && (min_free(cp) >= sz))
d76 1
a76 1
    else if ((cp = getenv("TMPDIR")) != NULL && stat(cp, &sb) != FAIL && (min_free(cp) >= sz))
d78 1
a78 1
    else if (stat("/var/tmp", &sb) != FAIL && min_free("/var/tmp") >= sz)
d80 1
a80 1
    else if (stat("/tmp", &sb) != FAIL && min_free("/tmp") >= sz)
a81 2
    else if ((stat("/usr/tmp", &sb) == SUCCESS || mkdir("/usr/tmp", 01777) == SUCCESS) && min_free("/usr/tmp") >= sz)
	strlcpy(pen, "/usr/tmp/instmp.XXXXXXXXXX", pensize);
d124 1
a124 1
    if (chdir(pen) == FAIL) {
d142 1
a142 1
    if (Previous[0] && chdir(Previous) == FAIL) {
@


1.1
log
@Initial revision
@
text
@d29 1
a29 1
__RCSID("$MirBSD: src/usr.sbin/pkg_install/lib/pen.c,v 1.5 2004/07/21 10:24:36 tg Exp $");
@


1.1.3.1
log
@src/usr.sbin/pkg_install comes into ports/infrastructure
@
text
@@
