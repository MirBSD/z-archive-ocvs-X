head	1.1;
branch	1.1.1;
access;
symbols
	cvs-200405281530:1.1.1.3
	cvs-200402211630:1.1.1.3
	cvs-200401261625:1.1.1.3
	cvs-200401162142:1.1.1.3
	cvs-200301141450:1.1.1.3
	cvs-200312021610:1.1.1.3
	cvs-200311151930:1.1.1.3
	cvs-200310311830:1.1.1.3
	cvs-200310021000:1.1.1.2
	cvs-200309281111:1.1.1.2
	cvs-200309171515:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	ctm-3258:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.19.49.22;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.49.22;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.17.12.50.58;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.10.31.19.14.00;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 *	tcpblast - test and estimate TCP thruput
 *
 *	Daniel Karrenberg   <dfk@@nic.eu.net>
 */

#include <sys/types.h>
#include <machine/endian.h>
#include <sys/socket.h>
#include <sys/file.h>
#include <sys/time.h>

#include <netinet/in.h>

#include <netdb.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#define BLKSIZE 1024

struct	sockaddr_in sock_in;
struct	servent *sp;
struct	hostent *host;

long starts, startms, stops, stopms, expms;
struct timeval ti; 
struct timezone tiz;

char 	greet[BLKSIZE] = "Hi!";
int 	nblocks;
int	f;

int main(argc, argv)
int argc; char **argv;
{
	register int i;

	if (argc!=3)
	{
		fprintf(stderr, "usage: tcpblast destination nblocks\n");
		fprintf(stderr, "blocksize: %d bytes\n", BLKSIZE);
		exit(1);
	}

	nblocks = atoi(argv[2]);
	if (nblocks<=1 || nblocks>=10000)
	{
		fprintf(stderr, "tcpblast: 1 < nblocks < 10000 \n");
		exit(1);
	}

	bzero((char *)&sock_in, sizeof (sock_in));
	sock_in.sin_family = AF_INET;
	f = socket(AF_INET, SOCK_STREAM, 0);
	if (f < 0) {
		perror("tcpblast: socket");
		exit(3);
	}
	if (bind(f, (struct sockaddr*) &sock_in, sizeof (sock_in)) < 0) {
		perror("tcpblast: bind");
		exit(1);
	}

	host = gethostbyname(argv[1]);
	if (host) {
		sock_in.sin_family = host->h_addrtype;
		bcopy(host->h_addr, &sock_in.sin_addr, host->h_length);
	} else {
		sock_in.sin_family = AF_INET;
		sock_in.sin_addr.s_addr = inet_addr(argv[1]);
		if (sock_in.sin_addr.s_addr == -1) {
			fprintf(stderr, "tcpblast: %s unknown host\n", argv[1]);
			exit(1);
		}
	}
	sock_in.sin_port = htons(9);

	if (connect(f, (struct sockaddr*) &sock_in, sizeof(sock_in)) <0)
	{
		perror("tcpblast connect:");
		exit(1);
	}

	if (gettimeofday(&ti, &tiz) < 0)
	{
		perror("tcpblast time:");
		exit(1);
	}
	starts =  ti.tv_sec;
	startms = ti.tv_usec / 1000L;


	for (i=0; i<nblocks; i++)
	{
		if (write(f, greet, BLKSIZE) != BLKSIZE)
			perror("tcpblast send:");
		write(1, ".", 1);
	}

	if (gettimeofday(&ti, &tiz) < 0)
	{
		perror("tcpblast time:");
		exit(1);
	}
	stops =  ti.tv_sec;
	stopms = ti.tv_usec / 1000L;

	expms = (stops-starts)*1000 + (stopms-startms);
	printf("\n%d KB in %ld msec", nblocks, expms);
	printf("  =  %.1f kbit/s", (double) (nblocks*BLKSIZE) / expms * 8000.0);
	printf("  =  %.1f kByte/s", (double) (nblocks*BLKSIZE) / expms * 1000);
	printf("  =  %.1f MByte/s\n", (double) (nblocks*BLKSIZE) / (double)(expms*1024.0));
return(0);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD CVS repository (checked out) of roughly 12:00 UTC today,
retrieved from the canadian anoncvs server (due to CTM unavailability)
@
text
@d4 1
a4 7
 *	Daniel Karrenberg   <daniel@@karrenberg.net>
 *
 *	I released tcpblast into the public domain, so it is OK to
 *	redistribute it.  I am also fine with attaching the same public
 *      license	that is used for OpenBSD itself.  Your choice.
 *
 *	Daniel
a19 2
#include <err.h>
#include <errno.h>
a37 3
	struct addrinfo hints, *res, *res0;
	char *cause = NULL;
	int ch, error;
d40 5
a44 13
	memset(&hints, 0, sizeof(hints));
	hints.ai_family = PF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;

	while ((ch = getopt(argc, argv, "46")) != -1) {
		switch (ch) {
		case '4':
			hints.ai_family = PF_INET;
			break;
		case '6':
			hints.ai_family = PF_INET6;
			break;
		}
d46 5
a50 6
	argc -= optind;
	argv += optind;
	if (argc != 2) {
		fprintf(stderr,
			"usage: tcpblast [-4] [-6] destination nblkocks\n"
			"blocksize: %d bytes %d\n", BLKSIZE, argc);
d54 9
a62 3
	nblocks = atoi(argv[1]);
	if (nblocks<=1 || nblocks>=10000) {
		fprintf(stderr, "tcpblast: 1 < nblocks <= 10000 \n");
d66 10
a75 11
	error = getaddrinfo(argv[0], "discard", &hints, &res0);
	if (error)
		errx(1, "%s", gai_strerror(error));
	f = -1;
	cause = "no addresses";
	errno = EADDRNOTAVAIL;
	for (res = res0; res; res = res->ai_next) {
		f = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
		if (f < 0) {
			cause = "socket";
			continue;
a76 7
		if (connect(f, res->ai_addr, res->ai_addrlen) < 0) {
			cause = "connect";
			close(f);
			f = -1;
			continue;
		}
		break;
d78 7
a84 3
	if (f < 0)
		err(1, cause);
	freeaddrinfo(res);
d111 3
a113 3
	printf("\n%d %d-byte blocks in %ld msec.\n", nblocks, BLKSIZE, expms);
	printf("Throughput  =  %.1f kbit/s", (double) (nblocks*BLKSIZE) / expms * 8.0);
	printf("  =  %.1f kByte/s", (double) (nblocks*BLKSIZE) / expms);
@


1.1.1.3
log
@Import OpenBSD ports tree into MirPorts Framework
@
text
@d76 1
a76 1
		fprintf(stderr, "tcpblast: 1 < nblocks < 10000 \n");
@


