head	1.2;
access;
symbols
	cvs-200401261625:1.1.1.1
	cvs-200401162142:1.1.1.1
	cvs-200301141450:1.1.1.1
	cvs-200312021610:1.1.1.1
	cvs-200311151930:1.1.1.1
	cvs-200310311830:1.1.1.1
	cvs-200310021000:1.1.1.1
	cvs-200309281111:1.1.1.1
	cvs-200309171515:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2004.02.24.19.00.56;	author bsiegert;	state dead;
branches;
next	1.1;

1.1
date	2003.05.21.18.21.08;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.21.18.21.08;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge education/, emulators/, games/, and graphics/
@
text
@$OpenBSD: patch-cmsmtrx_c,v 1.1 2003/05/12 04:15:58 brad Exp $

This patch fixes assumptions made in different parts of the code
regarding the sizeof long and int. The original code appears to
use them interchangeably, even though it expects them to be 32-bit
wide.

--- cmsmtrx.c.orig	Tue Dec 31 11:32:40 2002
+++ cmsmtrx.c	Tue Dec 31 11:34:42 2002
@@@@ -738,9 +738,9 @@@@ void MAT3fromFix(LPMAT3 r, LPWMAT3 v)
 
 void VEC3scaleAndCut(LPWVEC3 r, LPVEC3 v, double d)
 {
-        r -> n[VX] = (int) floor(v -> n[VX] * d + .5);
-        r -> n[VY] = (int) floor(v -> n[VY] * d + .5);
-        r -> n[VZ] = (int) floor(v -> n[VZ] * d + .5);
+        r -> n[VX] = (icInt32Number) floor(v -> n[VX] * d + .5);
+        r -> n[VY] = (icInt32Number) floor(v -> n[VY] * d + .5);
+        r -> n[VZ] = (icInt32Number) floor(v -> n[VZ] * d + .5);
 }
 
 void MAT3scaleAndCut(LPWMAT3 r, LPMAT3 v, double d)
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD-current ports tree
@
text
@@
