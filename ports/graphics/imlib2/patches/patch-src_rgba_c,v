head	1.2;
access;
symbols
	cvs-200405281530:1.1.1.1 openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2004.07.24.19.13.28;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2004.05.28.16.27.12;	author bsiegert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.28.16.27.12;	author bsiegert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* convert to autoconf (2.13)
* convert to mirlibtool
* make it use libltdl-port
* fix LDFLAGS for modules etc.
* remove dependencies on builtin libltdl

yea, that sucks, but hey, even the PLIST is still unchanged :)
@
text
@$MirBSD$
$OpenBSD: patch-src_rgba_c,v 1.1.1.1 2004/04/18 02:01:25 jolan Exp $
--- src/rgba.c.orig	Sun Jul 13 01:21:01 2003
+++ src/rgba.c	Sat Jul 24 18:39:51 2004
@@@@ -2856,7 +2856,7 @@@@ __imlib_RGBA_to_RGB565_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -2926,7 +2926,7 @@@@ __imlib_RGBA_to_RGB565_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -2998,7 +2998,7 @@@@ __imlib_RGBA_to_BGR565_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -3068,7 +3068,7 @@@@ __imlib_RGBA_to_BGR565_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -3140,7 +3140,7 @@@@ __imlib_RGBA_to_RGB555_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -3210,7 +3210,7 @@@@ __imlib_RGBA_to_RGB555_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -3282,7 +3282,7 @@@@ __imlib_RGBA_to_BGR555_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -3352,7 +3352,7 @@@@ __imlib_RGBA_to_BGR555_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -3423,7 +3423,7 @@@@ __imlib_RGBA_to_RGB332_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3467,7 +3467,7 @@@@ __imlib_RGBA_to_RGB332_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB332(src, dest);
                }
@@@@ -3520,7 +3520,7 @@@@ __imlib_RGBA_to_RGB332_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3565,7 +3565,7 @@@@ __imlib_RGBA_to_RGB332_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB332_DITHER(src, dest);
                }
@@@@ -3599,7 +3599,7 @@@@ __imlib_RGBA_to_RGB666_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3643,7 +3643,7 @@@@ __imlib_RGBA_to_RGB666_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB666(src, dest);
                }
@@@@ -3696,7 +3696,7 @@@@ __imlib_RGBA_to_RGB666_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3741,7 +3741,7 @@@@ __imlib_RGBA_to_RGB666_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB666_DITHER(src, dest);
                }
@@@@ -3775,7 +3775,7 @@@@ __imlib_RGBA_to_RGB232_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3819,7 +3819,7 @@@@ __imlib_RGBA_to_RGB232_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB232(src, dest);
                }
@@@@ -3872,7 +3872,7 @@@@ __imlib_RGBA_to_RGB232_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3917,7 +3917,7 @@@@ __imlib_RGBA_to_RGB232_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB232_DITHER(src, dest);
                }
@@@@ -3951,7 +3951,7 @@@@ __imlib_RGBA_to_RGB222_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3995,7 +3995,7 @@@@ __imlib_RGBA_to_RGB222_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB222(src, dest);
                }
@@@@ -4048,7 +4048,7 @@@@ __imlib_RGBA_to_RGB222_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4093,7 +4093,7 @@@@ __imlib_RGBA_to_RGB222_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB222_DITHER(src, dest);
                }
@@@@ -4127,7 +4127,7 @@@@ __imlib_RGBA_to_RGB221_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4171,7 +4171,7 @@@@ __imlib_RGBA_to_RGB221_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB221(src, dest);
                }
@@@@ -4224,7 +4224,7 @@@@ __imlib_RGBA_to_RGB221_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4269,7 +4269,7 @@@@ __imlib_RGBA_to_RGB221_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB221_DITHER(src, dest);
                }
@@@@ -4303,7 +4303,7 @@@@ __imlib_RGBA_to_RGB121_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4347,7 +4347,7 @@@@ __imlib_RGBA_to_RGB121_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB121(src, dest);
                }
@@@@ -4400,7 +4400,7 @@@@ __imlib_RGBA_to_RGB121_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4445,7 +4445,7 @@@@ __imlib_RGBA_to_RGB121_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB121_DITHER(src, dest);
                }
@@@@ -4479,7 +4479,7 @@@@ __imlib_RGBA_to_RGB111_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4523,7 +4523,7 @@@@ __imlib_RGBA_to_RGB111_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB111(src, dest);
                }
@@@@ -4576,7 +4576,7 @@@@ __imlib_RGBA_to_RGB111_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4621,7 +4621,7 @@@@ __imlib_RGBA_to_RGB111_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB111_DITHER(src, dest);
                }
@


1.1
log
@Initial revision
@
text
@d1 1
d3 3
a5 3
--- src/rgba.c.orig	Sat Jan 24 02:08:45 2004
+++ src/rgba.c	Sat Jan 24 02:12:02 2004
@@@@ -2856,7 +2856,7 @@@@
d14 1
a14 1
@@@@ -2926,7 +2926,7 @@@@
d23 1
a23 1
@@@@ -2998,7 +2998,7 @@@@
d32 1
a32 1
@@@@ -3068,7 +3068,7 @@@@
d41 1
a41 1
@@@@ -3140,7 +3140,7 @@@@
d50 1
a50 1
@@@@ -3210,7 +3210,7 @@@@
d59 1
a59 1
@@@@ -3282,7 +3282,7 @@@@
d68 1
a68 1
@@@@ -3352,7 +3352,7 @@@@
d77 1
a77 1
@@@@ -3423,7 +3423,7 @@@@
d86 1
a86 1
@@@@ -3467,7 +3467,7 @@@@
d95 1
a95 1
@@@@ -3520,7 +3520,7 @@@@
d104 1
a104 1
@@@@ -3565,7 +3565,7 @@@@
d113 1
a113 1
@@@@ -3599,7 +3599,7 @@@@
d122 1
a122 1
@@@@ -3643,7 +3643,7 @@@@
d131 1
a131 1
@@@@ -3696,7 +3696,7 @@@@
d140 1
a140 1
@@@@ -3741,7 +3741,7 @@@@
d149 1
a149 1
@@@@ -3775,7 +3775,7 @@@@
d158 1
a158 1
@@@@ -3819,7 +3819,7 @@@@
d167 1
a167 1
@@@@ -3872,7 +3872,7 @@@@
d176 1
a176 1
@@@@ -3917,7 +3917,7 @@@@
d185 1
a185 1
@@@@ -3951,7 +3951,7 @@@@
d194 1
a194 1
@@@@ -3995,7 +3995,7 @@@@
d203 1
a203 1
@@@@ -4048,7 +4048,7 @@@@
d212 1
a212 1
@@@@ -4093,7 +4093,7 @@@@
d221 1
a221 1
@@@@ -4127,7 +4127,7 @@@@
d230 1
a230 1
@@@@ -4171,7 +4171,7 @@@@
d239 1
a239 1
@@@@ -4224,7 +4224,7 @@@@
d248 1
a248 1
@@@@ -4269,7 +4269,7 @@@@
d257 1
a257 1
@@@@ -4303,7 +4303,7 @@@@
d266 1
a266 1
@@@@ -4347,7 +4347,7 @@@@
d275 1
a275 1
@@@@ -4400,7 +4400,7 @@@@
d284 1
a284 1
@@@@ -4445,7 +4445,7 @@@@
d293 1
a293 1
@@@@ -4479,7 +4479,7 @@@@
d302 1
a302 1
@@@@ -4523,7 +4523,7 @@@@
d311 1
a311 1
@@@@ -4576,7 +4576,7 @@@@
d320 1
a320 1
@@@@ -4621,7 +4621,7 @@@@
@


1.1.1.1
log
@Import OpenBSD ports tree checked out from anoncvs.ca.openbsd.org at
2004-05-28 15:30 UTC.

Lots of SECURITY fixes, at least:

 * databases/mysql: tmpfile issue
 * www/squid: acl bypass
 * games/xonix: privilege escalation
 * archivers/lha: buffer overflow
 * mail/exim: buffer overflows
 * net/rsync: path checking issue
 * net/icecast: buffer overflow
 * www/opera
@
text
@@
