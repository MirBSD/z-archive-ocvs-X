head	1.1;
branch	1.1.1;
access;
symbols
	cvs-200405281530:1.1.1.1
	cvs-200402211630:1.1.1.1
	cvs-200401261625:1.1.1.1
	cvs-200401162142:1.1.1.1
	cvs-200301141450:1.1.1.1
	cvs-200312021610:1.1.1.1
	cvs-200311151930:1.1.1.1
	cvs-200310311830:1.1.1.1
	cvs-200310021000:1.1.1.1
	cvs-200309281111:1.1.1.1
	cvs-200309171515:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	ctm-3258:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.19.51.13;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.51.13;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@$OpenBSD: patch-sound_cc,v 1.2 2002/09/08 07:43:52 mark Exp $
--- sound.cc.orig	Wed Jun  7 22:41:06 2000
+++ sound.cc	Sun Sep  8 00:38:45 2002
@@@@ -34,16 +34,22 @@@@
 #include <fcntl.h>
 #include <unistd.h>
 #include <signal.h>
-#ifndef __FreeBSD__
-#include <linux/soundcard.h>
-#include <linux/cdrom.h>
-//#include <linux/ucdrom.h>
-#else
+#ifdef __OpenBSD__
+#include <soundcard.h>
+#include <sys/cdio.h>
+#define CDROM_LEADOUT 0xAA
+#define CD_FRAMES 75 /* frames per second */
+#define CDROM_DATA_TRACK 0x4
+#elif __FreeBSD__
 #include <machine/soundcard.h>
 #include <sys/cdio.h>
 #define CDROM_LEADOUT 0xAA
 #define CD_FRAMES 75 /* frames per second */
 #define CDROM_DATA_TRACK 0x4
+#else
+#include <linux/soundcard.h>
+#include <linux/cdrom.h>
+//#include <linux/ucdrom.h>
 #endif
 #include <time.h>
 
@@@@ -87,7 +93,7 @@@@ void getTrackInfo(void) {
   trackFrame = 0;
   trackCount  = 0;
 
-#ifndef __FreeBSD__
+#if defined(__linux__)
   cdrom_tochdr cdTochdr;
   if (-1 == ioctl(cdDevice, CDROMREADTOCHDR, &cdTochdr))
 #else
@@@@ -95,7 +101,7 @@@@ void getTrackInfo(void) {
   if (-1 == ioctl(cdDevice, CDIOREADTOCHEADER, (char *)&cdTochdr))
 #endif
      return;
-#ifndef __FreeBSD__
+#if defined(__linux__)
   trackCount = cdTochdr.cdth_trk1;
 #else
   trackCount = cdTochdr.ending_track - cdTochdr.starting_track + 1;
@@@@ -104,7 +110,7 @@@@ void getTrackInfo(void) {
   int i;
   trackFrame = new int[trackCount+1];
   for(i=trackCount;i>=0;i--) {
-#ifndef __FreeBSD__
+#if defined(__linux__)
     cdrom_tocentry cdTocentry;
     cdTocentry.cdte_format = CDROM_MSF;
     cdTocentry.cdte_track  = (i == trackCount ? CDROM_LEADOUT : i+1);
@@@@ -120,7 +126,7 @@@@ void getTrackInfo(void) {
     //Bug fix: thanks to Ben Gertzfield  (9/7/98)
     //Leadout track is sometimes reported as data.
     //Added check for this.
-#ifndef __FreeBSD__
+#if defined(__linux__)
     if (-1 == ioctl(cdDevice, CDROMREADTOCENTRY, & cdTocentry) ||
         (i != trackCount && (cdTocentry.cdte_ctrl & CDROM_DATA_TRACK)))
       trackFrame[i] = (i==trackCount?0:trackFrame[i+1]);
@@@@ -153,7 +159,7 @@@@ int cdGetTrackFrame(int track) {
 }
 
 void cdPlay(int frame, int endFrame) {
-#ifndef __FreeBSD__
+#if defined(__linux__)
   cdrom_msf msf;
 #else
   struct ioc_play_msf msf;
@@@@ -168,7 +174,7 @@@@ void cdPlay(int frame, int endFrame) {
   // (Sybren Stuvel)
   cdStop();
   
-#ifndef __FreeBSD__
+#if defined(__linux__)
   msf.cdmsf_min0 = frame / (60*CD_FRAMES);
   msf.cdmsf_sec0 = frame / CD_FRAMES % 60;
   msf.cdmsf_frame0 = frame % CD_FRAMES;
@@@@ -181,7 +187,7 @@@@ void cdPlay(int frame, int endFrame) {
   //Bug fix: thanks to Martin Mitchell
   //An out by one error that affects some CD players. 
   //Have to use endFrame-1 rather than endFrame (9/7/98)
-#ifndef __FreeBSD__
+#if defined(__linux__)
   msf.cdmsf_min1 = (endFrame-1) / (60*CD_FRAMES);
   msf.cdmsf_sec1 = (endFrame-1) / CD_FRAMES % 60;
   msf.cdmsf_frame1 = (endFrame-1) % CD_FRAMES;
@@@@ -195,7 +201,7 @@@@ void cdPlay(int frame, int endFrame) {
 }
 
 void cdGetStatus(int &track, int &frames, SymbolID &state) {
-#ifndef __FreeBSD__
+#if defined(__linux__)
   cdrom_subchnl subchnl;
   subchnl.cdsc_format = CDROM_MSF;
   if (-1 == ioctl(cdDevice, CDROMSUBCHNL, &subchnl)) {
@@@@ -215,7 +221,7 @@@@ void cdGetStatus(int &track, int &frames
     state = (state == Open ? Open : NoCD); /* ? */
     return;
   }
-#ifndef __FreeBSD__
+#if defined(__linux__)
   track = subchnl.cdsc_trk;
   frames  = subchnl.cdsc_reladdr.msf.minute*60*CD_FRAMES+
             subchnl.cdsc_reladdr.msf.second*CD_FRAMES+
@@@@ -228,7 +234,7 @@@@ void cdGetStatus(int &track, int &frames
 #endif
   
   SymbolID oldState = state;
-#ifndef __FreeBSD__
+#if defined(__linux__)
   switch(subchnl.cdsc_audiostatus) {
     case CDROM_AUDIO_PAUSED    : state = Pause; break;
     case CDROM_AUDIO_PLAY      : state = Play; break;
@@@@ -259,38 +265,38 @@@@ void cdGetStatus(int &track, int &frames
 
 void cdStop(void) {
   //attemptNoDie(ioctl(cdDevice, CDROMSTOP),"stopping CD");
-#ifndef __FreeBSD__
+#if defined(__linux__)
   ioctl(cdDevice, CDROMSTOP);
-#else
-  ioctl(cdDevice, CDIOCSTOP);
+#elif defined(__OpenBSD__) || defined(__FreeBSD__)
+  ioctl(cdDevice, CDIOCSTOP, NULL);
 #endif
 }
 void cdPause(void) {
-#ifndef __FreeBSD__
+#if defined(__linux__)
   attemptNoDie(ioctl(cdDevice, CDROMPAUSE),"pausing CD",true);
-#else
-  attemptNoDie(ioctl(cdDevice, CDIOCPAUSE),"pausing CD",true);
+#elif defined(__OpenBSD__) || defined(__FreeBSD__)
+  attemptNoDie(ioctl(cdDevice, CDIOCPAUSE, NULL),"pausing CD",true);
 #endif
 }
 void cdResume(void) {
-#ifndef __FreeBSD__
+#if defined(__linux__)
   attemptNoDie(ioctl(cdDevice, CDROMRESUME),"resuming CD",true);
-#else
-  attemptNoDie(ioctl(cdDevice, CDIOCRESUME),"resuming CD",true);
+#elif defined(__OpenBSD__) || defined(__FreeBSD__)
+  attemptNoDie(ioctl(cdDevice, CDIOCRESUME, NULL),"resuming CD",true);
 #endif
 }
 void cdEject(void) {
-#ifndef __FreeBSD__
+#if defined(__linux__)
   attemptNoDie(ioctl(cdDevice, CDROMEJECT),"ejecting CD",true);
-#else
-  attemptNoDie(ioctl(cdDevice, CDIOCEJECT),"ejecting CD",true);
+#elif defined(__OpenBSD__) || defined(__FreeBSD__)
+  attemptNoDie(ioctl(cdDevice, CDIOCEJECT, NULL),"ejecting CD",true);
 #endif
 }
 void cdCloseTray(void) {
-#ifndef __FreeBSD__
+#if defined(__linux__)
   attemptNoDie(ioctl(cdDevice, CDROMCLOSETRAY),"ejecting CD",true);
-#else
-  attemptNoDie(ioctl(cdDevice, CDIOCCLOSE),"ejecting CD",true);
+#elif defined(__OpenBSD__) || defined(__FreeBSD__)
+  attemptNoDie(ioctl(cdDevice, CDIOCCLOSE, NULL),"ejecting CD",true);
 #endif
 }
 
@@@@ -379,7 +385,7 @@@@ void openSound(SoundSource source, int i
   
     int format, stereo, fragment, fqc;
   
-#ifdef __FreeBSD__
+#if defined(__FreeBSD__) || defined(__OpenBSD__)
     attempt(device = open(dspName,O_WRONLY),"opening dsp device",true);
     format = SOUNDFORMAT;
     attempt(ioctl(device,SNDCTL_DSP_SETFMT,&format),"setting format",true);
@@@@ -408,7 +414,7 @@@@ void openSound(SoundSource source, int i
     //Was 0x00010000 + m; 
   
     attemptNoDie(ioctl(device,SNDCTL_DSP_SETFRAGMENT,&fragment),"setting fragment",true);
-#ifndef __FreeBSD__
+#if !defined(__FreeBSD__) || !defined(__OpenBSD__)
     attempt(ioctl(device,SNDCTL_DSP_SETFMT,&format),"setting format",true);
     if (format != SOUNDFORMAT) error("setting format (2)");
 #endif
@@@@ -422,8 +428,12 @@@@ void openSound(SoundSource source, int i
       close(0);
     }
   }
-     
-  data = new short[NumSamples*2];  
+#if defined(__FreeBSD__) || defined(__OpenBSD__)
+	data = new u_short[NumSamples*2];
+#else
+  data = new short[NumSamples*2];
+#endif
+
   memset((char*)data,0,NumSamples*4);
 }
 
@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
