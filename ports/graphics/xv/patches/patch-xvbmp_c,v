head	1.1;
branch	1.1.1;
access;
symbols
	cvs-200405281530:1.1.1.1
	cvs-200402211630:1.1.1.1
	cvs-200401261625:1.1.1.1
	cvs-200401162142:1.1.1.1
	cvs-200301141450:1.1.1.1
	cvs-200312021610:1.1.1.1
	cvs-200311151930:1.1.1.1
	cvs-200310311830:1.1.1.1
	cvs-200310021000:1.1.1.1
	cvs-200309281111:1.1.1.1
	cvs-200309171515:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	ctm-3258:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.19.51.19;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.51.19;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@$OpenBSD: patch-xvbmp_c,v 1.1 2001/03/13 20:27:56 espie Exp $
--- xvbmp.c.orig	Tue Mar 13 18:30:52 2001
+++ xvbmp.c	Tue Mar 13 19:10:46 2001
@@@@ -18,7 +18,6 @@@@
 
    not being able to malloc is a Fatal Error.  The program is aborted. */
 
-
 #define BI_RGB  0
 #define BI_RLE8 1
 #define BI_RLE4 2
@@@@ -32,6 +31,7 @@@@ static long filesize;
 static int   loadBMP1   PARM((FILE *, byte *, u_int, u_int));
 static int   loadBMP4   PARM((FILE *, byte *, u_int, u_int, u_int));
 static int   loadBMP8   PARM((FILE *, byte *, u_int, u_int, u_int));
+static int   loadBMP16  PARM((FILE *, byte *, u_int, u_int));
 static int   loadBMP24  PARM((FILE *, byte *, u_int, u_int, u_int));
 static u_int getshort   PARM((FILE *));
 static u_int getint     PARM((FILE *));
@@@@ -128,7 +128,7 @@@@ int LoadBMP(fname, pinfo)
 
   /* error checking */
   if ((biBitCount!=1 && biBitCount!=4 && biBitCount!=8 && 
-       biBitCount!=24 && biBitCount!=32) || 
+       biBitCount!= 16 && biBitCount!=24 && biBitCount!=32) || 
       biPlanes!=1 || biCompression>BI_RLE4) {
 
     sprintf(buf,"Bogus BMP File!  (bitCount=%d, Planes=%d, Compression=%d)",
@@@@ -138,7 +138,7 @@@@ int LoadBMP(fname, pinfo)
     goto ERROR;
   }
 
-  if (((biBitCount==1 || biBitCount==24 || biBitCount==32)
+  if (((biBitCount==1 || biBitCount== 16 || biBitCount==24 || biBitCount==32)
        && biCompression != BI_RGB) ||
       (biBitCount==4 && biCompression==BI_RLE8) ||
       (biBitCount==8 && biCompression==BI_RLE4)) {
@@@@ -161,7 +161,7 @@@@ int LoadBMP(fname, pinfo)
   }
 
   /* load up colormap, if any */
-  if (biBitCount!=24 && biBitCount!=32) {
+  if (biBitCount!=16 && biBitCount!=24 && biBitCount!=32) {
     int i, cmaplen;
 
     cmaplen = (biClrUsed) ? biClrUsed : 1 << biBitCount;
@@@@ -199,7 +199,7 @@@@ int LoadBMP(fname, pinfo)
 
   /* create pic8 or pic24 */
 
-  if (biBitCount==24 || biBitCount==32) {
+  if (biBitCount== 16 || biBitCount==24 || biBitCount==32) {
     pic24 = (byte *) calloc((size_t) biWidth * biHeight * 3, (size_t) 1);
     if (!pic24) return (bmpError(bname, "couldn't malloc 'pic24'"));
   }
@@@@ -216,6 +216,7 @@@@ int LoadBMP(fname, pinfo)
 					  biCompression);
   else if (biBitCount == 8) rv = loadBMP8(fp,pic8,biWidth,biHeight, 
 					  biCompression);
+  else if (biBitCount == 16) rv = loadBMP16(fp,pic24,biWidth,biHeight);
   else                      rv = loadBMP24(fp,pic24,biWidth,biHeight,
 					   biBitCount);
 
@@@@ -225,7 +226,7 @@@@ int LoadBMP(fname, pinfo)
   fclose(fp);
 
 
-  if (biBitCount == 24 || biBitCount == 32) {
+  if (biBitCount == 16 || biBitCount == 24 || biBitCount == 32) {
     pinfo->pic  = pic24;
     pinfo->type = PIC24;
   }
@@@@ -458,6 +459,43 @@@@ static int loadBMP8(fp, pic8, w, h, comp
 }  
 
 
+/*******************************************/
+static int loadBMP16(fp, pic24, w, h)
+     FILE *fp;
+     byte *pic24;
+     u_int  w,h;
+{
+  int   i,j,padb,rv;
+  byte *pp;
+
+  rv = 0;
+
+  padb = (4 - ((w*2) % 4)) & 0x03;  /* # of pad bytes to read at EOscanline */
+
+  for (i=h-1; i>=0; i--) {
+    pp = pic24 + (i * w * 3);
+    if ((i&0x3f)==0) WaitCursor();
+    
+    for (j=0; j<w; j++) {
+      byte byte1 = getc(fp);
+      byte byte2 = getc(fp);
+
+      /* 1 bit pad, 5 bits red, 5 bits green, 5 bits blue */
+
+      pp[0] = (byte2 & 0x7c) << 1; 
+      pp[1] = ((byte2 & 0x03) << 6) | ((byte1 & 0xe0) >> 2);	/* green */
+      pp[2] = (byte1 & 0x1f) << 3;   /* blue */
+      pp += 3;
+    }
+
+    for (j=0; j<padb; j++) getc(fp);
+
+    rv = (FERROR(fp));
+    if (rv) break;
+  }
+
+  return rv;
+}  
 
 /*******************************************/
 static int loadBMP24(fp, pic24, w, h, bits)
@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
