head	1.1;
branch	1.1.1;
access;
symbols
	cvs-200405281530:1.1.1.1
	cvs-200402211630:1.1.1.1
	cvs-200401261625:1.1.1.1
	cvs-200401162142:1.1.1.1
	cvs-200301141450:1.1.1.1
	cvs-200312021610:1.1.1.1
	cvs-200311151930:1.1.1.1
	cvs-200310311830:1.1.1.1
	cvs-200310021000:1.1.1.1
	cvs-200309281111:1.1.1.1
	cvs-200309171515:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	ctm-3258:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.19.54.50;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.54.50;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
	Copyright (C) 1994,1995	Edward Der-Hua Liu, Hsin-Chu, Taiwan
*/

#include <stdio.h>
#include <stdarg.h>
#include <sys/types.h>
#include <X11/Xlib.h>
#include <X11/Xatom.h>
#include "state.h"
#include "protocol.h"

/*static void p_err(char *fmt,...)
{
  va_list args;
  
  va_start(args, fmt);
  fprintf(stderr,"%s:", "cli_xcin:");
  vfprintf(stderr, fmt, args);
  va_end(args);
  fprintf(stderr,"\n");
  exit(-1);
} 
*/


static Atom xcin_atom=0;
static Window xcin_win=None;
static InmdState inmdstate;
#define ENDIAN_TEST() (*(int *)"\x11\x22\x33\x44"==0x11223344)
char my_endian;

static int connect_xcin(Display *display)
{
/*Window twin;*/
xcin_atom=XInternAtom(display, XCIN_ATOM,False);
my_endian=ENDIAN_TEST();  /* if == 11223344, it is big-endian */

xcin_win=XGetSelectionOwner(display,xcin_atom);
return xcin_win;
}

void send_FocusIn(Display *display, Window window)
{
	XClientMessageEvent event;
	/*XEvent erreve;*/
	char *tmp=event.data.b;

	if (connect_xcin(display)==None) return;
/* Ensure xcin exists, or the process will be hanged */
	event.type=ClientMessage;
	event.window=window;
	event.message_type=xcin_atom;
	event.format=8;
	
	tmp[0]=tmp[1]=tmp[2]=0xff;
	tmp[3]=CLI_FOCUS_IN;
	memcpy(&tmp[4],&inmdstate, sizeof(inmdstate));
	XSendEvent(display, xcin_win, False, 0, (XEvent *)&event);
}

void send_FocusOut(Display *display, Window window)
{
	XClientMessageEvent event;
/*	XEvent erreve; */
	char *tmp=event.data.b;

	if (connect_xcin(display)==None) return;
/* Ensure xcin exists, or the process will be hanged */
	event.type=ClientMessage;
	event.window=window;
	event.message_type=xcin_atom;
	event.format=8;
	
	tmp[0]=tmp[1]=tmp[2]=0xff;
	tmp[3]=CLI_FOCUS_OUT;
	memcpy(&tmp[4],&inmdstate, sizeof(inmdstate));
	XSendEvent(display, xcin_win, False, 0, (XEvent *)&event);
}

static void big_little(char *i)
{
char t;
t=*i; *i=*(i+3); *(i+3)=t;
t=*(i+1); *(i+1)=*(i+2); *(i+2)=t;
}
static int read_keys(Display *display, char *buf)
{
	Atom actual_type;
	int actual_format/*,i*/;
	u_long nitems,bytes_after;
	char *ttt, *cp;
	XCIN_RES res;
	int ofs;
 
	cp=(char *)&res;
	ofs=0;
	do { 
	if (XGetWindowProperty(display,xcin_win,xcin_atom,
		ofs/4,(sizeof(XCIN_RES)+3)/4,
		True, AnyPropertyType, &actual_type,&actual_format,
		&nitems,&bytes_after,(unsigned char **)&ttt) != Success)
			puts("err property");
		memcpy((char *)(&res)+(ofs & ~0x3), ttt, nitems);
		XFree(ttt);
		ofs=(ofs & ~0x3) + nitems;
	} while ((!nitems && !ofs) || bytes_after>0);
	if (my_endian) {
		big_little((char *)&res.len);
		big_little((char *)&res.status);
	}
	memcpy(buf,res.tkey, res.len);
	inmdstate=res.inmdstate;
	buf[res.len]=0;
 
	return  res.status;
}

#include <X11/Xutil.h>

static XComposeStatus compose_status = {NULL, 0};

int send_key(Display *display, Window win, XKeyEvent *eve, char *buf)
{
XClientMessageEvent event;
/*XEvent erreve;*/
char *tmp=event.data.b;
u_char tttt[8];
/*KeySym keysym;*/
int count;

if (xcin_win==None && connect_xcin(display)==None)
	return K_REJECT;
if ((xcin_win=XGetSelectionOwner(display,xcin_atom))==None)
	return K_REJECT;

event.type=ClientMessage;
event.window=win;
event.message_type=xcin_atom;
event.format=32;
count = XLookupString (eve, tttt, sizeof(tmp), (KeySym *)tmp, &compose_status);
memcpy(&tmp[4],&eve->state,4);
XSendEvent(display, xcin_win, False, 0, (XEvent *)&event);
XSync(display,False);
return (read_keys(display, buf));
}
@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
