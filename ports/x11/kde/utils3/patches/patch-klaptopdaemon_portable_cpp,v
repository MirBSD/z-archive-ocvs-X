head	1.1;
branch	1.1.1;
access;
symbols
	cvs-200405281530:1.1.1.3
	cvs-200402211630:1.1.1.3
	cvs-200401261625:1.1.1.2
	cvs-200401162142:1.1.1.2
	cvs-200301141450:1.1.1.2
	cvs-200312021610:1.1.1.1
	cvs-200311151930:1.1.1.1
	cvs-200310311830:1.1.1.1
	cvs-200310021000:1.1.1.1
	cvs-200309281111:1.1.1.1
	cvs-200309171515:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	ctm-3258:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.19.55.25;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.55.25;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.01.14.16.05.26;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.02.21.17.11.47;	author bsiegert;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@$OpenBSD: patch-klaptopdaemon_portable_cpp,v 1.2 2003/03/17 21:00:59 ian Exp $
--- klaptopdaemon/portable.cpp.orig	Fri Jan  3 00:07:53 2003
+++ klaptopdaemon/portable.cpp	Wed Feb 26 18:19:51 2003
@@@@ -40,6 +40,7 @@@@
 //	Linux 		(#if __linux__)
 //	FreeBSD		(#elif __FreeBSD__)
 //	NetBSD		(#elif __NetBSD_APM__)
+//	OpenBSD		(#elif __OpenBSD__)
 //	generic nothing	(#else)
 //
 //
@@@@ -1327,6 +1328,248 @@@@ int laptop_portable::poll_activity()
 {
        return(1);
 }
+
+#elif	(__OpenBSD__ && (__i386__ || __powerpc__))
+	/* This tries to get OpenBSD i386 and MacPPC, but will 
+	 * cause some grumpies on other PPC-based arches.
+	 */
+
+/*
+ * OpenBSD support for klaptopdaemon by Ian Darwin
+ * based on my KDE2 "kapm" program; some error handling
+ * patterned on the FreeBSD code above.
+ *
+ * Note that you must NOT run apmd because this code uses the
+ * APM control device directly; maybe a later version
+ * will talk to apmd instead.
+ */
+
+#include <errno.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <err.h>
+#include <sys/types.h>
+#include <sys/ioctl.h>
+#include <machine/apmvar.h>
+
+#define _PATH_APM_NORMAL        "/dev/apm"
+#define _PATH_APM_CTLDEV        "/dev/apmctl"
+
+static struct apm_power_info bsdAPM;
+
+//
+//	returns 1 if we support power management
+//
+int
+laptop_portable::has_power_management()
+{
+	int fdd = open(_PATH_APM_NORMAL, O_RDONLY),
+		fdc = open(_PATH_APM_CTLDEV, O_RDWR);
+	if (fdd == -1) {
+		perror(_PATH_APM_NORMAL);	// debug only
+	} 
+	if (fdc == -1) {
+		perror(_PATH_APM_CTLDEV);	// debug only
+	} 
+	close(fdd);
+	close(fdc);
+	return fdd != -1 && fdc != -1;
+}
+//
+//	returns 1 if the BIOS returns time left in battery rather than % of full
+//	This version always uses % as IMHO it is more reliable than time.
+int laptop_portable::has_battery_time()
+{
+	return false;
+}
+
+//	returns 1 if we can perform a change-to-suspend-mode operation for the user
+//	(has_power_management() has already returned 1)
+//
+int laptop_portable::has_suspend()
+{
+	int fd = open(_PATH_APM_CTLDEV, O_RDWR);
+	close(fd);
+	return fd != -1;
+}
+
+//	returns 1 if we can perform a change-to-standby-mode operation for the user
+//	(has_power_management() has already returned 1)
+//
+int laptop_portable::has_standby()
+{
+	int fd = open(_PATH_APM_CTLDEV, O_RDWR);
+	close(fd);
+	return fd != -1;
+}
+
+//	returns 1 if we can perform a change-to-hibernate-mode for a user
+//      (has_power_management() has already returned 1)
+//		[hibernate is the save-to-disk mode -- not supported by linux]
+//
+int laptop_portable::has_hibernation()
+{
+	return false;
+}
+
+//
+//	explain what user needs to do if has_power_management() returned 0
+//	to get any software they lack
+//
+KActiveLabel *laptop_portable::no_power_management_explanation(QWidget *parent)
+{
+	int fdd, fdc;
+	KActiveLabel* explain = NULL;
+
+	if ((fdd = open(_PATH_APM_NORMAL, O_RDONLY)) == -1) {
+		switch (errno) {
+		case ENOENT:
+			explain = new KActiveLabel(i18n("There is no " _PATH_APM_NORMAL 
+			" file on this system. Use MAKEDEV or mknod to create one."), parent);
+			break;
+		case EPERM:
+			explain = new KActiveLabel(i18n("Your system has support for apm, but "
+			"you don't have permission to access it.  Check permissions on "
+			 _PATH_APM_NORMAL), parent);
+			break;
+		case ENXIO:
+			explain = new KActiveLabel(i18n("Your kernel lacks support for Advanced Power Managment."), parent);
+			break;
+		default:
+			explain = new KActiveLabel(i18n("There was an unknown error opening "
+			_PATH_APM_NORMAL), parent);
+			break;
+		}
+	}
+	if (explain != NULL)
+		goto out;
+
+	if ((fdc = open(_PATH_APM_CTLDEV, O_RDONLY)) == -1)
+	switch(errno) {
+	case EPERM:
+			explain = new KActiveLabel(i18n("Your system has support for apm, but "
+			"you don't have permission to access it. Check permissions " 
+			"on " _PATH_APM_CTLDEV), parent);
+			break;
+	case EBUSY:
+		explain = new KActiveLabel(i18n("Your system has APM but you cannot open the "
+		"control device " _PATH_APM_CTLDEV " as it is in use "
+		"(possibly by apmd?)"), parent);
+		break;
+	default:
+		explain = new KActiveLabel(i18n("Other error opening "
+			"APM control device " _PATH_APM_CTLDEV), parent);
+		break;
+	}
+out:
+	close(fdd);
+	close(fdc);
+	if (explain == NULL)
+		explain = new KActiveLabel(i18n("Not sure why APM is not functioning??"), parent);
+	explain->setMinimumSize(explain->sizeHint());
+	return(explain);
+}
+
+//
+//	explain to the user what they need to do to get suspend/resume to work from user mode
+//
+QLabel *laptop_portable::how_to_do_suspend_resume(QWidget *parent)
+{
+	QLabel* note = new QLabel(i18n(" "), parent);
+
+	note->setMinimumSize(note->sizeHint());
+	return(note);
+}
+
+//	pcmcia support - this will be replaced by better - pcmcia support being worked on by
+//	others
+//
+QLabel *laptop_portable::pcmcia_info(int x, QWidget *parent)
+{
+	if (x == 0)
+		return(new QLabel(i18n("No PCMCIA controller detected"), parent));
+	else
+		return 0;
+}
+
+//	puts the system into standby mode
+//
+void laptop_portable::invoke_standby()
+{
+	int fd = open(_PATH_APM_CTLDEV, O_RDWR);
+
+	if (ioctl(fd, APM_IOC_STANDBY) != 0) {
+		perror("APM_IOC_STANDBY");
+		close(fd);
+	} 
+	close(fd);
+}
+
+//	puts the system into suspend mode
+//
+void laptop_portable::invoke_suspend()
+{
+	int fd = open(_PATH_APM_CTLDEV, O_RDWR);
+
+	if (ioctl(fd, APM_IOC_SUSPEND) != 0) {
+		perror("APM_IOC_SUSPEND");
+		close(fd);
+	}
+	close(fd);
+}
+
+//	puts the system into hibernate mode
+//
+void laptop_portable::invoke_hibernation()
+{
+	// ???
+}
+
+
+//	return current battery state
+//
+struct power_result laptop_portable::poll_battery_state()
+{
+	int fd;
+	static struct power_result p;
+
+	p.powered = 0;
+	p.percentage = 0;
+	p.time = 0;
+	if ((fd = open(_PATH_APM_CTLDEV, O_RDWR)) == -1)
+		return(p);
+	if (ioctl(fd, APM_IOC_GETPOWER, &bsdAPM) != 0) {
+		close(fd);
+		return p;
+	}
+	p.powered =    bsdAPM.ac_state == APM_AC_ON;
+	p.percentage = bsdAPM.battery_life;
+	p.time =       bsdAPM.minutes_left;
+	close(fd);
+
+	return p;
+}
+
+//
+//	returns true if any mouse or kdb activity has been detected
+//	
+
+int laptop_portable::poll_activity()
+{
+	return(1);
+}
+
+//
+//	adds extra widgets to the battery panel
+//
+void
+laptop_portable::extra_config(QWidget *parent, KConfig *config, QVBoxLayout *layout)
+{
+}
+
+
+
 #else
 
 /*
@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Now we can update MirPorts from OpenBSD ports tree again,
that we have fixed pkg_install tools accordingly in both
stable and current, and that these tools are compatible.

Consider MirPorts locked until next commit of ports/INDEX,v
@
text
@d1 3
a3 3
$OpenBSD: patch-klaptopdaemon_portable_cpp,v 1.3 2003/12/07 20:19:15 espie Exp $
--- klaptopdaemon/portable.cpp.orig	2003-05-07 13:49:02.000000000 +0200
+++ klaptopdaemon/portable.cpp	2003-12-04 21:42:04.000000000 +0100
d12 1
a12 1
@@@@ -1336,6 +1337,248 @@@@ int laptop_portable::poll_activity()
@


1.1.1.3
log
@Import OpenBSD ports again. This will give us lots of new toys :).
@
text
@d1 3
a3 3
$OpenBSD: patch-klaptopdaemon_portable_cpp,v 1.4 2004/02/02 10:53:21 espie Exp $
--- klaptopdaemon/portable.cpp.orig	2003-11-30 10:50:47.000000000 +0100
+++ klaptopdaemon/portable.cpp	2004-02-02 11:38:29.000000000 +0100
d12 3
a14 2
@@@@ -2772,6 +2773,283 @@@@ laptop_portable::get_battery_status(int 
 	values.append(s);
d16 1
a16 2
 
+ 
d240 9
a254 25
+ 
+ 
+void
+laptop_portable::apm_set_mask(bool, bool)
+{
+}
+
+void
+laptop_portable::software_suspend_set_mask(bool)
+{
+}
+
+bool
+laptop_portable::get_system_performance(bool, int&current, QStringList&s, bool*&)
+{
+	current = 0;
+	s.clear();
+	return(0);	// if no profiles are available
+}
+
+int
+laptop_portable::has_brightness()
+{
+	return(0);
+}
a255 18
+bool
+laptop_portable::has_button(laptop_portable::LaptopButton)
+{
+	return(0);
+}
+
+bool
+laptop_portable::get_system_throttling(bool, int&current, QStringList&s, bool*&)
+{
+	current = 0;
+	s.clear();
+	return(0);
+}
+
+void
+laptop_portable::acpi_set_mask(bool, bool, bool, bool, bool)
+{
+}
a257 1
+ 
@


