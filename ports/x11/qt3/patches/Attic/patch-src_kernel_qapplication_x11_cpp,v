head	1.2;
access;
symbols
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.04.10.20.09.54;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.19.55.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.55.34;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@clean up the cvs import mess

nb, this doesnt mean the tree builds.
its bed time
@
text
@$OpenBSD: patch-src_kernel_qapplication_x11_cpp,v 1.1 2003/01/19 17:36:51 espie Exp $
--- src/kernel/qapplication_x11.cpp.orig	Mon Dec  9 10:40:39 2002
+++ src/kernel/qapplication_x11.cpp	Sun Jan 19 16:07:04 2003
@@@@ -360,8 +360,8 @@@@ static bool qt_x11EventFilter( XEvent* e
 #if !defined(QT_NO_XIM)
 XIM		qt_xim			= 0;
 XIMStyle	qt_xim_style		= 0;
-// static XIMStyle	xim_preferred_style	= XIMPreeditPosition | XIMStatusNothing;
-static XIMStyle	xim_preferred_style	= XIMPreeditCallbacks | XIMStatusNothing;
+static XIMStyle xim_default_style      = XIMPreeditCallbacks | XIMStatusNothing;
+static XIMStyle        xim_preferred_style     = 0;
 #endif
 
 static int composingKeycode=0;
@@@@ -988,6 +988,32 @@@@ bool QApplication::x11_apply_settings()
     qt_use_rtl_extensions =
     	settings.readBoolEntry("/qt/useRtlExtensions", FALSE);
 
+#ifndef QT_NO_XFTFREETYPE
+    // defined in qfont_x11.cpp
+    extern bool qt_has_xft;
+    extern bool qt_use_antialiasing;
+
+    qt_has_xft = FALSE;
+    qt_use_antialiasing = FALSE;
+    if (qt_use_xrender &&
+       XftInit(0) && XftInitFtLibrary()) {
+       qt_has_xft = settings.readBoolEntry( "/qt/enableXft", TRUE );
+       qt_use_antialiasing = settings.readBoolEntry( "/qt/useXft", TRUE );
+    }
+#endif // QT_NO_XFTFREETYPE
+
+    QString ximInputStyle =
+       settings.readEntry( "/qt/XIMInputStyle",
+                           QObject::trUtf8( "On The Spot" ) ).lower();
+    if ( ximInputStyle == "on the spot" )
+       xim_preferred_style = XIMPreeditCallbacks | XIMStatusNothing;
+    else if ( ximInputStyle == "over the spot" )
+       xim_preferred_style = XIMPreeditPosition | XIMStatusNothing;
+    else if ( ximInputStyle == "off the spot" )
+       xim_preferred_style = XIMPreeditArea | XIMStatusArea;
+    else if ( ximInputStyle == "root" )
+       xim_preferred_style = XIMPreeditNothing | XIMStatusNothing;
+
     if (update_timestamp) {
 	QBuffer stamp;
 	QDataStream s(stamp.buffer(), IO_WriteOnly);
@@@@ -1452,25 +1478,7 @@@@ void qt_init_internal( int *argcptr, cha
 	p = strrchr( argv[0], '/' );
 	appName = p ? p + 1 : argv[0];
 
-	// Read global settings file
-#if !defined(QT_NO_XIM)
-	if ( QApplication::desktopSettingsAware() ) {
-	    QString ximInputStyle =
-		QSettings().readEntry( "/qt/XIMInputStyle",
-				       QObject::trUtf8( "On The Spot" ) ).lower();
-	    if ( ximInputStyle == "on the spot" )
-		xim_preferred_style = XIMPreeditCallbacks | XIMStatusNothing;
-	    else if ( ximInputStyle == "over the spot" )
-		xim_preferred_style = XIMPreeditPosition | XIMStatusNothing;
-	    else if ( ximInputStyle == "off the spot" )
-		xim_preferred_style = XIMPreeditArea | XIMStatusArea;
-	    else if ( ximInputStyle == "root" )
-		xim_preferred_style = XIMPreeditNothing | XIMStatusNothing;
-	}
-#endif
-
 	// Get command line params
-
 	j = 1;
 	for ( int i=1; i<argc; i++ ) {
 	    if ( argv[i] && *argv[i] != '-' ) {
@@@@ -1974,8 +1982,28 @@@@ void qt_init_internal( int *argcptr, cha
     setlocale( LC_NUMERIC, "C" );	// make sprintf()/scanf() work
 
     if ( qt_is_gui_used ) {
+       qt_set_input_encoding();
+
+       // be smart about the size of the default font. most X servers have helvetica
+       // 12 point available at 2 resolutions:
+       //     75dpi (12 pixels) and 100dpi (17 pixels).
+       // At 95 DPI, a 12 point font should be 16 pixels tall - in which case a 17
+       // pixel font is a closer match than a 12 pixel font
+       int ptsz =
+           (int) ( ( ( QPaintDevice::x11AppDpiY() >= 95 ? 17. : 12. ) *
+                     72. / (float) QPaintDevice::x11AppDpiY() ) + 0.5 );
+
+       if ( !qt_app_has_font ) {
+           QFont f( "Helvetica", ptsz );
+           QApplication::setFont( f );
+       }
+
+       qt_set_x11_resources( appFont, appFGCol, appBGCol, appBTNCol);
 
 #ifndef QT_NO_XIM
+       if ( ! xim_preferred_style ) // no configured input style, use the default
+           xim_preferred_style = xim_default_style;
+
 	qt_xim = 0;
 	QString ximServerName(ximServer);
 	if (ximServer)
@@@@ -2001,24 +2029,6 @@@@ void qt_init_internal( int *argcptr, cha
 #endif // USE_X11R6_XIM
 #endif // QT_NO_XIM
 
-	qt_set_input_encoding();
-
-	// be smart about the size of the default font. most X servers have helvetica
-	// 12 point available at 2 resolutions:
-	//     75dpi (12 pixels) and 100dpi (17 pixels).
-	// At 95 DPI, a 12 point font should be 16 pixels tall - in which case a 17
-	// pixel font is a closer match than a 12 pixel font
-	int ptsz =
-	    (int) ( ( ( QPaintDevice::x11AppDpiY() >= 95 ? 17. : 12. ) *
-		      72. / (float) QPaintDevice::x11AppDpiY() ) + 0.5 );
-
-	if ( !qt_app_has_font ) {
-	    QFont f( "Helvetica", ptsz );
-	    QApplication::setFont( f );
-	}
-
-	qt_set_x11_resources( appFont, appFGCol, appBGCol, appBTNCol);
-
 #if defined (QT_TABLET_SUPPORT)
 	int ndev,
 	    i,
@@@@ -2573,7 +2583,7 @@@@ void QApplication::setMainWidget( QWidge
   QApplication cursor stack
  *****************************************************************************/
 
-extern void qt_x11_enforce_cursor( QWidget * w, bool unset );
+extern void qt_x11_enforce_cursor( QWidget * w );
 
 typedef QPtrList<QCursor> QCursorList;
 
@@@@ -2638,7 +2648,8 @@@@ void QApplication::setOverrideCursor( co
     QWidgetIntDictIt it( *((QWidgetIntDict*)QWidget::mapper) );
     register QWidget *w;
     while ( (w=it.current()) ) {		// for all widgets that have
-	qt_x11_enforce_cursor( w, FALSE );
+	if ( w->testWState( WState_OwnCursor ) )
+	    qt_x11_enforce_cursor( w );
 	++it;
     }
     XFlush( appDpy );				// make X execute it NOW
@@@@ -2665,7 +2676,8 @@@@ void QApplication::restoreOverrideCursor
 	QWidgetIntDictIt it( *((QWidgetIntDict*)QWidget::mapper) );
 	register QWidget *w;
 	while ( (w=it.current()) ) {		// set back to original cursors
-	    qt_x11_enforce_cursor( w, FALSE );
+	    if ( w->testWState( WState_OwnCursor ) )
+		qt_x11_enforce_cursor( w );
 	    ++it;
 	}
 	XFlush( appDpy );
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
