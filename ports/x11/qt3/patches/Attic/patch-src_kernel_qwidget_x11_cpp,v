head	1.2;
access;
symbols
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.04.10.20.09.54;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.19.55.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.55.34;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@clean up the cvs import mess

nb, this doesnt mean the tree builds.
its bed time
@
text
@$OpenBSD: patch-src_kernel_qwidget_x11_cpp,v 1.3 2003/01/19 17:36:51 espie Exp $
--- src/kernel/qwidget_x11.cpp.orig	Mon Dec  9 10:40:44 2002
+++ src/kernel/qwidget_x11.cpp	Sun Jan 19 16:00:29 2003
@@@@ -164,22 +164,21 @@@@ Window qt_XCreateSimpleWindow( const QWi
 void qt_XDestroyWindow( const QWidget *destroyer,
 			Display *display, Window window );
 
-Q_EXPORT void qt_x11_enforce_cursor( QWidget * w, bool unset )
+Q_EXPORT void qt_x11_enforce_cursor( QWidget * w )
 {
-    QCursor * oc = QApplication::overrideCursor();
-    if ( oc ) {
-	XDefineCursor( w->x11Display(), w->winId(), oc->handle() );
-    } else if ( unset ) {
-	XDefineCursor( w->x11Display(), w->winId(), None );
-    } else if ( w->isEnabled() ) {
-	XDefineCursor( w->x11Display(), w->winId(), w->cursor().handle() );
-    } else {
-	QWidget *parent = w->parentWidget();
-	while ( parent && !parent->isEnabled() )
-		parent = parent->parentWidget();
-	if ( parent ) {
-	    XDefineCursor( w->x11Display(), w->winId(), parent->cursor().handle() );
+    if ( w->testWState( Qt::WState_OwnCursor ) ) {
+	QCursor * oc = QApplication::overrideCursor();
+	if ( oc ) {
+	    XDefineCursor( w->x11Display(), w->winId(), oc->handle() );
+	} else if ( w->isEnabled() ) {
+	    XDefineCursor( w->x11Display(), w->winId(), w->cursor().handle() );
+	} else {
+	    // enforce the windows behavior of clearing the cursor on
+	    // disabled widgets
+	    XDefineCursor( w->x11Display(), w->winId(), None );
 	}
+    } else {
+	XDefineCursor( w->x11Display(), w->winId(), None );
     }
 }
 
@@@@ -554,7 +553,7 @@@@ void QWidget::create( WId window, bool i
 	setWState( WState_Visible );
     } else if ( topLevel ) {			// set X cursor
 	if ( initializeWindow )
-	    qt_x11_enforce_cursor( this, FALSE );
+	    qt_x11_enforce_cursor( this );
 	setWState( WState_OwnCursor );
     }
 
@@@@ -915,7 +914,7 @@@@ void QWidget::setCursor( const QCursor &
 	extra->curs = new QCursor(cursor);
     }
     setWState( WState_OwnCursor );
-    qt_x11_enforce_cursor( this, FALSE );
+    qt_x11_enforce_cursor( this );
     XFlush( x11Display() );
 }
 
@@@@ -927,7 +926,7 @@@@ void QWidget::unsetCursor()
 	    extra->curs = 0;
 	}
 	clearWState( WState_OwnCursor );
-	qt_x11_enforce_cursor( this, TRUE );
+	qt_x11_enforce_cursor( this );
 	XFlush( x11Display() );
     }
 }
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
