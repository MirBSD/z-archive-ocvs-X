head	1.1;
branch	1.1.1;
access;
symbols
	cvs-200405281530:1.1.1.1
	cvs-200402211630:1.1.1.1
	cvs-200401261625:1.1.1.1
	cvs-200401162142:1.1.1.1
	cvs-200301141450:1.1.1.1
	cvs-200312021610:1.1.1.1
	cvs-200311151930:1.1.1.1
	cvs-200310311830:1.1.1.1
	cvs-200310021000:1.1.1.1
	cvs-200309281111:1.1.1.1
	cvs-200309171515:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	ctm-3258:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.19.49.11;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.49.11;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@$OpenBSD: patch-fast_snprintf_c,v 1.1 2002/08/10 01:14:04 naddy Exp $
--- fast_snprintf.c.orig	Fri Aug  2 22:15:44 2002
+++ fast_snprintf.c	Tue Mar  6 00:49:52 2001
@@@@ -0,0 +1,235 @@@@
+/* Copyright (C) 2000-1 drscholl@@users.sourceforge.net
+   This is free software distributed under the terms of the
+   GNU Public License.  See the file COPYING for details.
+
+   fast_snprintf.c,v 1.12 2001/03/06 06:49:52 drscholl Exp */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <stdarg.h>
+#include <assert.h>
+#include <sys/types.h>
+#include <sys/time.h>
+#include <stdio.h>
+
+#define DIGIT(n,ui) \
+	if(ui>=(n)) { *out++ = '0' + (ui / (n)) % 10; if (--outsize == 0) break; }
+
+void fast_vsnprintf (char *out, size_t outsize, const char *fmt, va_list ap);
+void fast_snprintf (char *out, size_t outsize, const char *fmt, ...);
+
+void
+fast_vsnprintf (char *out, size_t outsize, const char *fmt, va_list ap)
+{
+    unsigned int ui;
+    unsigned short us;
+    int i, len;
+    char   *s;
+    char    c;
+
+    if (outsize == 0)
+	return;
+
+    outsize--;
+
+    while (*fmt && outsize > 0)
+    {
+	if ((c = *fmt++) != '%')
+	{
+	    *out++ = c;
+	    outsize--;
+	}
+	else
+	{
+	    c = *fmt++;
+	    if (c == 's')
+	    {
+		s = va_arg (ap, char *);
+
+		if (s == NULL)
+		{
+		    if (outsize < 6)
+			break;
+		    strcpy (out, "{null}");
+		    out+=6;
+		    outsize-=6;
+		}
+		else
+		    while (*s && outsize > 0)
+		    {
+			*out++ = *s++;
+			outsize--;
+		    }
+	    }
+	    else if (c == 'd')
+	    {
+		i = va_arg (ap, int);
+
+		if (i == 0)
+		{
+		    /* zero occurs often, so optimize for it */
+		    *out++ = '0';
+		    outsize--;
+		}
+		else
+		{
+		    /* optimized for small ints */
+		    if (i < 0)
+		    {
+			/* handle negative numbers */
+			*out++ = '-';
+			if (--outsize == 0)
+			    break;
+			i *= -1;
+		    }
+		    DIGIT (100000000, i);
+		    DIGIT (10000000, i);
+		    DIGIT (1000000, i);
+		    DIGIT (100000, i);
+		    DIGIT (10000, i);
+		    DIGIT (1000, i);
+		    DIGIT (100, i);
+		    DIGIT (10, i);
+		    *out++ = '0' + i % 10;
+		    outsize--;
+		}
+	    }
+	    else if (c == 'h' && *fmt == 'u')
+	    {
+		fmt++;
+		/* have to promote short to int */
+		us = (unsigned short) va_arg (ap, unsigned int);
+
+		DIGIT (10000, us);
+		DIGIT (1000, us);
+		DIGIT (100, us);
+		DIGIT (10, us);
+		*out++ = '0' + us % 10;
+		outsize--;
+	    }
+	    /* %u .  assume 10 digit number. this is typically used
+	     * to either print a time_t or an ip address.
+	     */
+	    else if (c == 'u')
+	    {
+		ui = va_arg (ap, unsigned int);
+
+#if 1
+		/* this appears to be faster than the other way.  my guess
+		 * is that the store of the leading 0's takes much longer
+		 * than doing ten if() evaluations.  The performance is only
+		 * slightly better, and solves the problem of those ugly
+		 * leading zeros
+		 */
+		DIGIT (1000000000, ui);
+		DIGIT (100000000, ui);
+		DIGIT (10000000, ui);
+		DIGIT (1000000, ui);
+		DIGIT (100000, ui);
+		DIGIT (10000, ui);
+		DIGIT (1000, ui);
+		DIGIT (100, ui);
+		DIGIT (10, ui);
+		*out++ = '0' + ui % 10;
+		outsize--;
+#else
+		if (outsize < 10)
+		    break;
+		*out++ = '0' + (ui / 1000000000) % 10;
+		*out++ = '0' + (ui / 100000000) % 10;
+		*out++ = '0' + (ui / 10000000) % 10;
+		*out++ = '0' + (ui / 1000000) % 10;
+		*out++ = '0' + (ui / 100000) % 10;
+		*out++ = '0' + (ui / 10000) % 10;
+		*out++ = '0' + (ui / 1000) % 10;
+		*out++ = '0' + (ui / 100) % 10;
+		*out++ = '0' + (ui / 10) % 10;
+		*out++ = '0' + ui % 10;
+		outsize -= 10;
+#endif
+	    }
+	    else if (c == 'c')
+	    {
+		/* va_arg only takes fully promoted types, so we need
+		 * a cast here
+		 */
+		c = (char) va_arg (ap, int);
+
+		*out++ = c;
+		outsize--;
+	    }
+	    /* %f is typically used to print an integer larger than a %u */
+	    else if (c == 'f')
+	    {
+		double f = va_arg (ap, double);
+
+		snprintf (out, outsize, "%.0f", f);
+		len = strlen (out);
+		out += len;
+		outsize -= len;
+	    }
+	    else
+		assert (0);	/* not supported */
+	}
+    }
+    *out = 0;
+}
+
+void
+fast_snprintf (char *out, size_t outsize, const char *fmt, ...)
+{
+    va_list ap;
+
+    va_start (ap, fmt);
+    fast_vsnprintf (out, outsize, fmt, ap);
+    va_end (ap);
+}
+
+#if TEST
+
+#if 1
+#define FUNC fast_snprintf
+#else
+#define FUNC snprintf
+#endif
+
+int
+main (int argc, char **argv)
+{
+    char    buf[1024];
+    char   *fmt1 = "The %s brown %s jumped %s the %s dogs.";
+    char   *fmt2 = "%d %d %d %d";
+    char   *fmt3 = "blah blah blah";
+    char *fmt4 = "%u %hu";
+    char *fmt5 = "%d";
+    char *fmt6 = "%u %u %u %u";
+    int     i;
+    struct timeval s, e;
+    char small[16];
+
+    memset(small,0xff,sizeof(small));
+    fast_snprintf(small,sizeof(small)-1,"this is a very long string");
+    memset(small,0xff,sizeof(small));
+    fast_snprintf(small,sizeof(small)-1,"this is a ver%d", 123456);
+    memset(small,0xff,sizeof(small));
+    fast_snprintf(small,sizeof(small)-1,"this is a ver%s", "blah blah blah");
+
+    gettimeofday (&s, 0);
+    for (i = 0; i < 10000; i++)
+    {
+	//FUNC (buf, sizeof (buf), fmt1, "quick", "fox", "over", "lazy");
+	//FUNC (buf, sizeof (buf), fmt2, 1, 11, 111, 1111);
+	//FUNC (buf, sizeof (buf), fmt3);
+	//FUNC (buf, sizeof (buf), fmt4, 0x7fffffff, 0xffff);
+	//FUNC (buf, sizeof (buf), fmt5, -10134);
+	FUNC(buf,sizeof(buf),fmt6,0x7fffffff,0x0fffffff,0x00ffffff,0x000fffff);
+	puts(buf);
+    }
+    gettimeofday (&e, 0);
+
+    printf ("%d\n",
+	    (e.tv_sec - s.tv_sec) * 1000000 + (e.tv_usec - s.tv_usec));
+}
+#endif
@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
