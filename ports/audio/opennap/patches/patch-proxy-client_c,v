head	1.1;
branch	1.1.1;
access;
symbols
	cvs-200405281530:1.1.1.1
	cvs-200402211630:1.1.1.1
	cvs-200401261625:1.1.1.1
	cvs-200401162142:1.1.1.1
	cvs-200301141450:1.1.1.1
	cvs-200312021610:1.1.1.1
	cvs-200311151930:1.1.1.1
	cvs-200310311830:1.1.1.1
	cvs-200310021000:1.1.1.1
	cvs-200309281111:1.1.1.1
	cvs-200309171515:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	ctm-3258:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.19.49.11;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.49.11;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@$OpenBSD: patch-proxy-client_c,v 1.1 2002/08/10 01:14:04 naddy Exp $
--- proxy-client.c.orig	Fri Aug  2 22:15:44 2002
+++ proxy-client.c	Tue Mar  6 00:49:53 2001
@@@@ -0,0 +1,179 @@@@
+/* Copyright (C) 2000-1 drscholl@@users.sourceforge.net
+   This is free software distributed under the terms of the
+   GNU Public License.  See the file COPYING for details.
+
+   proxy-client.c,v 1.3 2001/03/06 06:49:53 drscholl Exp */
+
+/* a simple proxy server to spy on the traffic between clients.  this
+   is a lot easier than using tcpdump.  */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <arpa/inet.h>
+#include <errno.h>
+
+unsigned char buf[2048];
+
+int
+pass_message (const char *id, int s, int d)
+{
+    int     len;
+    int     i;
+
+    len = read (s, buf, sizeof (buf));
+    if (len <= 0)
+    {
+	if (len == -1)
+	    printf ("%s: %s\n", id, strerror (errno));
+	else
+	    printf ("%s: EOF\n", id);
+	return -1;
+    }
+    buf[len] = 0;
+
+    for (i = 0; i < len; i++)
+	if (buf[i] == '\r')
+	    buf[i] = 'M';
+
+    printf ("%s: len=%d, data=%s\n", id, len, buf);
+
+    write (d, buf, len);
+
+    return 0;
+}
+
+static void
+usage (void)
+{
+    puts ("usage: spyserv [ -s client ] [ -p clientport ] [ -l localport ]");
+    exit (0);
+}
+
+int
+main (int argc, char **argv)
+{
+    int     s;
+    int     c;
+    int     r;
+    int     localport = 6699;
+    size_t  sinsize;
+    struct sockaddr_in sin;
+    fd_set  fds;
+    char   *host = "192.168.0.101";
+    int     port = 6699;
+
+    while ((r = getopt (argc, argv, "hs:p:l:")) != EOF)
+    {
+	switch (r)
+	{
+	case 'l':
+	    localport = atoi (optarg);
+	    break;
+	case 's':
+	    host = optarg;
+	    break;
+	case 'p':
+	    port = atoi (optarg);
+	    break;
+	default:
+	    usage ();
+	}
+    }
+
+    /* accept connection from client */
+    s = socket (PF_INET, SOCK_STREAM, IPPROTO_TCP);
+    if (s < 0)
+    {
+	perror ("socket");
+	exit (1);
+    }
+    c = 1;
+    if (setsockopt (s, SOL_SOCKET, SO_REUSEADDR, &c, sizeof (c)) != 0)
+    {
+	perror ("setsockopt");
+	exit (1);
+    }
+    memset (&sin, 0, sizeof (sin));
+    sin.sin_port = htons (localport);
+    sin.sin_family = AF_INET;
+    sin.sin_addr.s_addr = INADDR_ANY;
+    if (bind (s, &sin, sizeof (sin)) < 0)
+    {
+	perror ("bind");
+	exit (1);
+    }
+    if (listen (s, 1) < 0)
+    {
+	perror ("listen");
+	exit (1);
+    }
+
+    for (;;)
+    {
+	puts ("waiting for connection");
+	sinsize = sizeof (sin);
+	c = accept (s, &sin, &sinsize);
+	if (c < 0)
+	{
+	    perror ("accept");
+	    exit (1);
+	}
+	puts ("got incoming connection");
+
+	/* make connection to server */
+	printf ("connecting to client...");
+	fflush (stdout);
+	r = socket (PF_INET, SOCK_STREAM, IPPROTO_TCP);
+	if (r < 0)
+	{
+	    perror ("socket");
+	    exit (1);
+	}
+	memset (&sin, 0, sizeof (sin));
+	sin.sin_port = htons (port);
+	sin.sin_family = AF_INET;
+	sin.sin_addr.s_addr = inet_addr (host);
+	if (connect (r, &sin, sizeof (sin)) < 0)
+	{
+	    perror ("connect");
+	    exit (1);
+	}
+	puts ("connected");
+
+	for (;;)
+	{
+	    FD_ZERO (&fds);
+	    FD_SET (r, &fds);
+	    FD_SET (c, &fds);
+	    puts ("Waiting for input");
+	    if (select (((r > c) ? r : c) + 1, &fds, 0, 0, 0) < 0)
+	    {
+		perror ("select");
+		break;
+	    }
+	    if (FD_ISSET (c, &fds))
+	    {
+		if (pass_message ("remote", c, r) != 0)
+		    break;
+	    }
+	    if (FD_ISSET (r, &fds))
+	    {
+		if (pass_message ("local", r, c) != 0)
+		    break;
+	    }
+	}
+
+	close (r);
+	close (c);
+    }
+    close (s);
+
+    exit (0);
+}
@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
