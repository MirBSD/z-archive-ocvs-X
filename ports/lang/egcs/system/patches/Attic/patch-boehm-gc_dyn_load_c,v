head	1.5;
branch	1.1.1;
access;
symbols
	ctm-3389:1.1.1.1
	openbsd:1.1.1
	MIRBSD_5:1.4
	MIRBSD_4:1.1;
locks; strict;
comment	@# @;


1.5
date	2003.08.31.20.52.56;	author tg;	state dead;
branches;
next	1.4;

1.4
date	2003.05.15.19.10.56;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.15.18.57.41;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.15.18.56.29;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.23.15.03.46;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.07.06.13.28.37;	author tg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge import of OpenBSD source, ports and XF4 tree.

While here,
o clean up differences where possible
o whitespace cleanup
o ifdef ./. if defined()
o '...' ./. "..."
o echo foo > bar ./. echo foo >bar
o `...` ./. $(...) ./. $$(...)
o `...' ./. '...'
o modernize "our" tree, e.g. WWW in ports
o fix some typos and brainos introduced when renaming OpenBSD to MirBSD
o use hardware 80387 by default
o migrate Apache 1.3.28 OpenBSD ./. MirBSD ./. KAME
o work around as many CVS bugs as possible (add back/delete files, ...)

Synchronize stuff, ready for ongoing changes.
@
text
@$MirBSD: patch-boehm-gc_dyn_load_c,v 1.4 2003/05/15 19:10:56 tg Exp $
$OpenBSD: patch-boehm-gc_dyn_load_c,v 1.1 2002/06/09 00:35:38 espie Exp $
--- boehm-gc/dyn_load.c.orig	Tue Mar  4 06:38:08 2003
+++ boehm-gc/dyn_load.c	Thu May 15 18:08:35 2003
@@@@ -57,7 +57,9 @@@@
     !defined(HPUX) && !(defined(LINUX) && defined(__ELF__)) && \
     !defined(RS6000) && !defined(SCO_ELF) && \
     !(defined(FREEBSD) && defined(__ELF__)) && \
-    !(defined(NETBSD) && defined(__ELF__)) && !defined(HURD)
+    !(defined(NETBSD) && defined(__ELF__)) && \
+    !(defined(OPENBSD)) && \
+    !defined(HURD)
  --> We only know how to find data segments of dynamic libraries for the
  --> above.  Additional SVR4 variants might not be too
  --> hard to add.
@@@@ -81,7 +83,9 @@@@
 
 #if defined(LINUX) && defined(__ELF__) || defined(SCO_ELF) || \
     (defined(FREEBSD) && defined(__ELF__)) || \
-    (defined(NETBSD) && defined(__ELF__)) || defined(HURD)
+    (defined(NETBSD) && defined(__ELF__)) || \
+    (defined(OPENBSD) && defined(__ELF__) || \
+    defined(HURD)
 #   include <stddef.h>
 #   include <elf.h>
 #   include <link.h>
@@@@ -263,9 +267,86 @@@@ void GC_register_dynamic_libraries()
 # endif /* !USE_PROC ... */
 # endif /* SUNOS */
 
+#if defined(OPENBSD) && !defined(__ELF__)
+
+#include <link.h>
+
+#ifdef LINT
+    struct _dynamic _DYNAMIC;
+#endif
+
+static struct so_map *
+GC_FirstDLOpenedLinkMap()
+{
+    extern struct _dynamic _DYNAMIC;
+
+    if( &_DYNAMIC == 0) {
+        return(0);
+    }
+    return(_DYNAMIC.d_un.d_dst->sdt_loaded);
+}
+
+
+#if 0
+/* Return the address of the ld.so allocated common symbol	*/
+/* with the least address, or 0 if none.			*/
+static ptr_t GC_first_common()
+{
+    ptr_t result = 0;
+    extern struct _dynamic _DYNAMIC;
+    struct rtc_symb * curr_symbol;
+    
+    if( &_DYNAMIC == 0) {
+        return(0);
+    }
+    curr_symbol = _DYNAMIC.ldd -> ldd_cp;
+    for (; curr_symbol != 0; curr_symbol = curr_symbol -> rtc_next) {
+        if (result == 0
+            || (ptr_t)(curr_symbol -> rtc_sp -> n_value) < result) {
+            result = (ptr_t)(curr_symbol -> rtc_sp -> n_value);
+        }
+    }
+    return(result);
+}
+#endif
+
+void GC_register_dynamic_libraries()
+{
+  struct so_map *lm = GC_FirstDLOpenedLinkMap();
+  
+
+  for (lm = GC_FirstDLOpenedLinkMap();
+       lm != (struct so_map *) 0;  lm = lm->som_next)
+    {
+	struct exec *e;
+	 
+        e = (struct exec *) lm->som_addr;
+        GC_add_roots_inner(
+      		    ((char *) (N_DATOFF(*e) + lm->som_addr)),
+		    ((char *) (N_BSSADDR(*e) + e->a_bss + lm->lm_addr)),
+		    TRUE);
+    }
+#if 0
+      {
+      	static ptr_t common_start = 0;
+      	ptr_t common_end;
+      	extern ptr_t GC_find_limit();
+      	
+      	if (common_start == 0) common_start = GC_first_common();
+      	if (common_start != 0) {
+      	    common_end = GC_find_limit(common_start, TRUE);
+      	    GC_add_roots_inner((char *)common_start, (char *)common_end, TRUE);
+      	}
+      }
+#endif
+}
+#endif
+
 #if defined(LINUX) && defined(__ELF__) || defined(SCO_ELF) || \
     (defined(FREEBSD) && defined(__ELF__)) || \
-    (defined(NETBSD) && defined(__ELF__)) || defined(HURD)
+    (defined(NETBSD) && defined(__ELF__)) || \
+    (defined(OPENBSD) && defined(__ELF__)) || \
+    defined(HURD)
 
 
 #ifdef USE_PROC_FOR_LIBRARIES
@


1.4
log
@upgrade to gcc 3.3
integrate propolice support again (the one from gcc 3.2.2...)

notes:
 - not tested
 - i'd feel safer if someone knowledgeable would check
   gcc/config/i386/openbsd{,elf}.h RIGHT NOW!
@
text
@d1 1
a1 1
$MirBSD: patch-boehm-gc_dyn_load_c,v 1.3 2003/05/15 18:57:41 tg Exp $
@


1.3
log
@second round... hold your breath
cvs hates me
@
text
@d1 2
a2 1
$MirBSD$
@


1.2
log
@first round of gcc update, hold your breath
@
text
@d1 3
a3 3
$OpenBSD: patch-boehm-gc_dyn_load_c,v 1.1 2002/06/09 00:35:38 espie Exp $
--- boehm-gc/dyn_load.c.orig	Mon Jun  3 21:27:26 2002
+++ boehm-gc/dyn_load.c	Mon Jun  3 21:37:23 2002
@


1.1
log
@import gcc-3.2.2-propolice -system
This is a variant of GNU gcc 3.2 with integrated
propolice support, adaptions for i386-ELF and can
be used as system compiler.
@
text
@@


1.1.1.1
log
@Import OpenBSD ports tree
@
text
@a0 1
$MirBSD: patch-boehm-gc_dyn_load_c,v 1.4 2003/05/15 19:10:56 tg Exp $
d2 2
a3 2
--- boehm-gc/dyn_load.c.orig	Tue Mar  4 06:38:08 2003
+++ boehm-gc/dyn_load.c	Thu May 15 18:08:35 2003
@


