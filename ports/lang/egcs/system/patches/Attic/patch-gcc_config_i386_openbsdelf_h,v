head	1.6;
branch	1.1.1;
access;
symbols
	ctm-3389:1.1.1.1
	openbsd:1.1.1
	MIRBSD_5:1.5;
locks; strict;
comment	@# @;


1.6
date	2003.08.31.20.53.00;	author tg;	state dead;
branches;
next	1.5;

1.5
date	2003.05.15.19.25.20;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.15.19.10.56;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.15.18.57.41;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.15.18.56.29;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.05.07.19.55.33;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.07.06.13.28.39;	author tg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge import of OpenBSD source, ports and XF4 tree.

While here,
o clean up differences where possible
o whitespace cleanup
o ifdef ./. if defined()
o '...' ./. "..."
o echo foo > bar ./. echo foo >bar
o `...` ./. $(...) ./. $$(...)
o `...' ./. '...'
o modernize "our" tree, e.g. WWW in ports
o fix some typos and brainos introduced when renaming OpenBSD to MirBSD
o use hardware 80387 by default
o migrate Apache 1.3.28 OpenBSD ./. MirBSD ./. KAME
o work around as many CVS bugs as possible (add back/delete files, ...)

Synchronize stuff, ready for ongoing changes.
@
text
@$MirBSD: patch-gcc_config_i386_openbsdelf_h,v 1.5 2003/05/15 19:25:20 tg Exp $
from OpenBSD: /cvs/src/gnu/egcs/gcc/config/i386/openbsdelf.h,v  revision 1.1
 date: 2003/04/17 03:46:22;  author: drahn;  state: Exp;
from $OpenBSD: patch-gcc_config_i386_openbsd_h,v 1.6 2002/09/14 10:14:51 espie Exp $
from OpenBSD: /cvs/src/gnu/egcs/gcc/config/i386/openbsd.h,v  revision 1.2
 date: 2001/09/05 08:22:36;  author: espie;  state: Exp;  lines: +1 -1
--- gcc/config/i386/openbsdelf.h.orig	Thu May 15 19:21:32 2003
+++ gcc/config/i386/openbsdelf.h	Thu May 15 19:24:32 2003
@@@@ -0,0 +1,262 @@@@
+/* Configuration for an OpenBSD i386 target.
+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.
+   Copyright (c) 2002, 2003 Thorsten Glaser <x86@@ePost.de>
+
+This file is part of GNU CC.
+
+GNU CC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; version 2.
+
+GNU CC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU CC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+/* Get generic OpenBSD definitions.  */
+#include <openbsd.h>
+
+/* This gets defined in tm.h->linux.h->svr4.h, and keeps us from using
+   libraries compiled with the native cc, so undef it. */
+#undef NO_DOLLAR_IN_LABEL
+
+/* Override the default comment-starter of "/".  */
+#undef ASM_COMMENT_START
+#define ASM_COMMENT_START "#"
+
+
+#ifndef	WANT_TARGET_MIRBSD
+/* This goes away when the math-emulator is fixed */
+#undef TARGET_SUBTARGET_DEFAULT
+#define TARGET_SUBTARGET_DEFAULT \
+  (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_NO_FANCY_MATH_387)
+#endif	/* The MirBSD system does not provide a math emulator. */
+
+/* Run-time target specifications */
+#ifdef	WANT_TARGET_MIRBSD
+#define TARGET_OS_CPP_BUILTINS()		\
+  do						\
+    {						\
+	builtin_define ("__unix__");		\
+	builtin_define ("__ELF__");		\
+	builtin_define ("__OpenBSD__");		\
+	builtin_define ("__MirBSD__");		\
+	builtin_assert ("system=unix");		\
+	builtin_assert ("system=bsd");		\
+	builtin_assert ("system=OpenBSD");	\
+	builtin_assert ("system=MirBSD");	\
+    }						\
+  while (0)
+#define TARGET_VERSION fprintf (stderr, " (OpenBSD-mirabile/i386 ELF)");
+#else
+#define TARGET_OS_CPP_BUILTINS()		\
+  do						\
+    {						\
+	builtin_define ("__unix__");		\
+	builtin_define ("__ELF__");		\
+	builtin_define ("__OpenBSD__");		\
+	builtin_assert ("system=unix");		\
+	builtin_assert ("system=bsd");		\
+	builtin_assert ("system=OpenBSD");	\
+    }						\
+  while (0)
+#define TARGET_VERSION fprintf (stderr, " (OpenBSD/i386 ELF)");
+#endif
+
+/* As an elf system, we need crtbegin/crtend stuff.  */
+#undef STARTFILE_SPEC
+#define STARTFILE_SPEC "\
+	%{!shared: %{pg:gcrt0%O%s} %{!pg:%{p:gcrt0%O%s} %{!p:crt0%O%s}} \
+	crtbegin%O%s} %{shared:crtbeginS%O%s}"
+#undef ENDFILE_SPEC
+#define ENDFILE_SPEC "%{!shared:crtend%O%s} %{shared:crtendS%O%s}"
+
+/* Layout of source language data types.  */
+
+/* This must agree with <machine/ansi.h> */
+#undef SIZE_TYPE
+#define SIZE_TYPE "unsigned int"
+
+#undef PTRDIFF_TYPE
+#define PTRDIFF_TYPE "int"
+
+#undef WCHAR_TYPE
+#define WCHAR_TYPE "int"
+
+#undef WCHAR_UNSIGNED
+#define WCHAR_UNSIGNED 0
+
+#undef WCHAR_TYPE_SIZE
+#define WCHAR_TYPE_SIZE BITS_PER_WORD
+
+/* Assembler format: overall framework.  */
+
+#undef ASM_APP_ON
+#define ASM_APP_ON "#APP\n"
+
+#undef ASM_APP_OFF
+#define ASM_APP_OFF "#NO_APP\n"
+
+#undef SET_ASM_OP
+#define SET_ASM_OP	"\t.set\t"
+
+/* The following macros were originally stolen from i386v4.h.
+   These have to be defined to get PIC code correct.  */
+
+/* Assembler format: dispatch tables.  */
+
+/* How to output an element of a case-vector that is relative.
+   This is only used for PIC code.  See comments by the `casesi' insn in
+   i386.md for an explanation of the expression this outputs.  */
+#undef ASM_OUTPUT_ADDR_DIFF_ELT
+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \
+  fprintf (FILE, "\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\n", LPREFIX, VALUE)
+
+/* Use stabs instead of DWARF debug format.  */
+#undef PREFERRED_DEBUGGING_TYPE
+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG
+
+/* Copy this from the svr4 specifications... */
+/* Define the register numbers to be used in Dwarf debugging information.
+   The SVR4 reference port C compiler uses the following register numbers
+   in its Dwarf output code:
+	0 for %eax (gnu regno = 0)
+	1 for %ecx (gnu regno = 2)
+	2 for %edx (gnu regno = 1)
+	3 for %ebx (gnu regno = 3)
+	4 for %esp (gnu regno = 7)
+	5 for %ebp (gnu regno = 6)
+	6 for %esi (gnu regno = 4)
+	7 for %edi (gnu regno = 5)
+   The following three DWARF register numbers are never generated by
+   the SVR4 C compiler or by the GNU compilers, but SDB on x86/svr4
+   believes these numbers have these meanings.
+	8  for %eip    (no gnu equivalent)
+	9  for %eflags (no gnu equivalent)
+	10 for %trapno (no gnu equivalent)
+   It is not at all clear how we should number the FP stack registers
+   for the x86 architecture.  If the version of SDB on x86/svr4 were
+   a bit less brain dead with respect to floating-point then we would
+   have a precedent to follow with respect to DWARF register numbers
+   for x86 FP registers, but the SDB on x86/svr4 is so completely
+   broken with respect to FP registers that it is hardly worth thinking
+   of it as something to strive for compatibility with.
+   The version of x86/svr4 SDB I have at the moment does (partially)
+   seem to believe that DWARF register number 11 is associated with
+   the x86 register %st(0), but that's about all.  Higher DWARF
+   register numbers don't seem to be associated with anything in
+   particular, and even for DWARF regno 11, SDB only seems to under-
+   stand that it should say that a variable lives in %st(0) (when
+   asked via an `=' command) if we said it was in DWARF regno 11,
+   but SDB still prints garbage when asked for the value of the
+   variable in question (via a `/' command).
+   (Also note that the labels SDB prints for various FP stack regs
+   when doing an `x' command are all wrong.)
+   Note that these problems generally don't affect the native SVR4
+   C compiler because it doesn't allow the use of -O with -g and
+   because when it is *not* optimizing, it allocates a memory
+   location for each floating-point variable, and the memory
+   location is what gets described in the DWARF AT_location
+   attribute for the variable in question.
+   Regardless of the severe mental illness of the x86/svr4 SDB, we
+   do something sensible here and we use the following DWARF
+   register numbers.  Note that these are all stack-top-relative
+   numbers.
+	11 for %st(0) (gnu regno = 8)
+	12 for %st(1) (gnu regno = 9)
+	13 for %st(2) (gnu regno = 10)
+	14 for %st(3) (gnu regno = 11)
+	15 for %st(4) (gnu regno = 12)
+	16 for %st(5) (gnu regno = 13)
+	17 for %st(6) (gnu regno = 14)
+	18 for %st(7) (gnu regno = 15)
+*/
+#undef DBX_REGISTER_NUMBER
+#define DBX_REGISTER_NUMBER(n) \
+((n) == 0 ? 0 \
+ : (n) == 1 ? 2 \
+ : (n) == 2 ? 1 \
+ : (n) == 3 ? 3 \
+ : (n) == 4 ? 6 \
+ : (n) == 5 ? 7 \
+ : (n) == 6 ? 5 \
+ : (n) == 7 ? 4 \
+ : ((n) >= FIRST_STACK_REG && (n) <= LAST_STACK_REG) ? (n)+3 \
+ : (-1))
+
+/* Assembler format: sections.  */
+
+/* Indicate when jump tables go in the text section.  This is
+   necessary when compiling PIC code.  */
+#undef JUMP_TABLES_IN_TEXT_SECTION
+#define JUMP_TABLES_IN_TEXT_SECTION  (flag_pic)
+
+/* Stack & calling: aggregate returns.  */
+
+/* Don't default to pcc-struct-return, because gcc is the only compiler, and
+   we want to retain compatibility with older gcc versions.  */
+#undef DEFAULT_PCC_STRUCT_RETURN
+#define DEFAULT_PCC_STRUCT_RETURN 0
+
+/* Assembler format: alignment output.  */
+
+/* A C statement to output to the stdio stream FILE an assembler
+   command to advance the location counter to a multiple of 1<<LOG
+   bytes if it is within MAX_SKIP bytes.
+
+   This is used to align code labels according to Intel recommendations.  */
+
+#ifdef HAVE_GAS_MAX_SKIP_P2ALIGN
+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE, LOG, MAX_SKIP)			\
+  if ((LOG) != 0) {							\
+    if ((MAX_SKIP) == 0) fprintf ((FILE), "\t.p2align %d\n", (LOG));	\
+    else fprintf ((FILE), "\t.p2align %d,,%d\n", (LOG), (MAX_SKIP));	\
+  }
+#endif
+
+/* We always use gas here, so we don't worry about ECOFF assembler
+   problems.  */
+#undef TARGET_GAS
+#define TARGET_GAS	1
+
+/* Stack & calling: profiling.  */
+
+/* OpenBSD's profiler recovers all information from the stack pointer.
+   The icky part is not here, but in machine/profile.h.  */
+#undef FUNCTION_PROFILER
+#define FUNCTION_PROFILER(FILE, LABELNO)  \
+  fputs (flag_pic ? "\tcall mcount@@PLT\n": "\tcall mcount\n", FILE);
+
+/* Assembler format: exception region output.  */
+
+/* All configurations that don't use elf must be explicit about not using
+   dwarf unwind information. egcs doesn't try too hard to check internal
+   configuration files...  */
+#undef DWARF2_UNWIND_INFO
+#define DWARF2_UNWIND_INFO 0
+
+#undef ASM_PREFERRED_EH_DATA_FORMAT
+
+/* Note that we pick up ASM_OUTPUT_MAX_SKIP_ALIGN from i386/gas.h */
+
+/* Note that we pick up ASM_OUTPUT_MI_THUNK from unix.h.  */
+
+#undef ASM_COMMENT_START
+#define ASM_COMMENT_START ";#"
+
+/* OpenBSD gas currently does not support quad, so do not use it.  */
+#undef ASM_QUAD
+
+#undef LINK_SPEC
+#define LINK_SPEC \
+  "%{!shared:%{!nostdlib:%{!r*:%{!e*:-e __start}}}} \
+   %{shared:-shared} %{R*} \
+   %{static:-Bstatic} \
+   %{!static:-Bdynamic} \
+   %{assert*} \
+   %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.so}"
@


1.5
log
@nuke warning
@
text
@d1 1
a1 1
$MirBSD: patch-gcc_config_i386_openbsdelf_h,v 1.4 2003/05/15 19:10:56 tg Exp $
@


1.4
log
@upgrade to gcc 3.3
integrate propolice support again (the one from gcc 3.2.2...)

notes:
 - not tested
 - i'd feel safer if someone knowledgeable would check
   gcc/config/i386/openbsd{,elf}.h RIGHT NOW!
@
text
@d1 1
a1 1
$MirBSD: patch-gcc_config_i386_openbsdelf_h,v 1.3 2003/05/15 18:57:41 tg Exp $
d7 3
a9 3
--- gcc/config/i386/openbsdelf.h.orig	Thu May 15 18:08:38 2003
+++ gcc/config/i386/openbsdelf.h	Thu May 15 19:08:13 2003
@@@@ -0,0 +1,261 @@@@
d205 1
@


1.3
log
@second round... hold your breath
cvs hates me
@
text
@d1 6
a6 1
$MirBSD$
d8 2
a9 2
+++ gcc/config/i386/openbsdelf.h	Thu May 15 18:41:59 2003
@@@@ -0,0 +1,259 @@@@
d64 1
d77 1
@


1.2
log
@first round of gcc update, hold your breath
@
text
@d1 4
a4 6
$MirBSD: patch-gcc_config_i386_openbsdelf_h,v 1.1 2003/05/07 19:55:33 tg Exp $
from OpenBSD: /cvs/src/gnu/egcs/gcc/config/i386/openbsdelf.h,v  revision 1.1
 date: 2003/04/17 03:46:22;  author: drahn;  state: Exp;
--- gcc/config/i386/openbsdelf.h.orig	Wed May  7 19:20:37 2003
+++ gcc/config/i386/openbsdelf.h	Wed May  7 19:38:36 2003
@@@@ -0,0 +1,228 @@@@
d46 13
a58 2
+#define CPP_PREDEFINES "-D__unix__ -D__ELF__ -D__OpenBSD__ \
+ -D__MirBSD__ -Asystem=unix -Asystem=bsd -Asystem=OpenBSD -Asystem=MirBSD"
d60 11
a70 2
+#define CPP_PREDEFINES "-D__unix__ -D__ELF__ -D__OpenBSD__ \
+ -Asystem=unix -Asystem=bsd -Asystem=OpenBSD"
d209 6
d216 4
a219 4
+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE,LOG,MAX_SKIP) \
+  if ((LOG) != 0) {\
+    if ((MAX_SKIP) == 0) fprintf ((FILE), "\t.p2align %d\n", (LOG)); \
+    else fprintf ((FILE), "\t.p2align %d,,%d\n", (LOG), (MAX_SKIP)); \
d222 5
@


1.1
log
@sync with gcc changes in the base system
- option to compile to OpenBSD/a.out target
  (preliminary, needs a change in config.gcc)
- MirBSD target is a compile-time option
@
text
@d1 1
a1 1
$MirBSD$
@


1.1.1.1
log
@Import OpenBSD ports tree
@
text
@d1 1
a1 1
$MirBSD: patch-gcc_config_i386_openbsdelf_h,v 1.5 2003/05/15 19:25:20 tg Exp $
d4 3
a6 6
from $OpenBSD: patch-gcc_config_i386_openbsd_h,v 1.6 2002/09/14 10:14:51 espie Exp $
from OpenBSD: /cvs/src/gnu/egcs/gcc/config/i386/openbsd.h,v  revision 1.2
 date: 2001/09/05 08:22:36;  author: espie;  state: Exp;  lines: +1 -1
--- gcc/config/i386/openbsdelf.h.orig	Thu May 15 19:21:32 2003
+++ gcc/config/i386/openbsdelf.h	Thu May 15 19:24:32 2003
@@@@ -0,0 +1,262 @@@@
d48 2
a49 14
+#define TARGET_OS_CPP_BUILTINS()		\
+  do						\
+    {						\
+	builtin_define ("__unix__");		\
+	builtin_define ("__ELF__");		\
+	builtin_define ("__OpenBSD__");		\
+	builtin_define ("__MirBSD__");		\
+	builtin_assert ("system=unix");		\
+	builtin_assert ("system=bsd");		\
+	builtin_assert ("system=OpenBSD");	\
+	builtin_assert ("system=MirBSD");	\
+    }						\
+  while (0)
+#define TARGET_VERSION fprintf (stderr, " (OpenBSD-mirabile/i386 ELF)");
d51 2
a52 12
+#define TARGET_OS_CPP_BUILTINS()		\
+  do						\
+    {						\
+	builtin_define ("__unix__");		\
+	builtin_define ("__ELF__");		\
+	builtin_define ("__OpenBSD__");		\
+	builtin_assert ("system=unix");		\
+	builtin_assert ("system=bsd");		\
+	builtin_assert ("system=OpenBSD");	\
+    }						\
+  while (0)
+#define TARGET_VERSION fprintf (stderr, " (OpenBSD/i386 ELF)");
a179 1
+#undef JUMP_TABLES_IN_TEXT_SECTION
a190 6
+/* A C statement to output to the stdio stream FILE an assembler
+   command to advance the location counter to a multiple of 1<<LOG
+   bytes if it is within MAX_SKIP bytes.
+
+   This is used to align code labels according to Intel recommendations.  */
+
d192 4
a195 4
+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE, LOG, MAX_SKIP)			\
+  if ((LOG) != 0) {							\
+    if ((MAX_SKIP) == 0) fprintf ((FILE), "\t.p2align %d\n", (LOG));	\
+    else fprintf ((FILE), "\t.p2align %d,,%d\n", (LOG), (MAX_SKIP));	\
a197 5
+
+/* We always use gas here, so we don't worry about ECOFF assembler
+   problems.  */
+#undef TARGET_GAS
+#define TARGET_GAS	1
@


