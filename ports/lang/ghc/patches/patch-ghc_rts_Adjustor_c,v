head	1.1;
branch	1.1.1;
access;
symbols
	cvs-200405281530:1.1.1.5
	cvs-200402211630:1.1.1.4
	cvs-200401261625:1.1.1.4
	cvs-200401162142:1.1.1.4
	cvs-200301141450:1.1.1.4
	cvs-200312021610:1.1.1.3
	cvs-200311151930:1.1.1.3
	cvs-200310311830:1.1.1.3
	cvs-200310021000:1.1.1.3
	cvs-200309281111:1.1.1.3
	cvs-200309171515:1.1.1.3
	cvs-200308302005:1.1.1.2
	cvs-200308221505:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3449:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.07.26.13.41.24;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.07.26.13.41.24;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.17.13.21.28;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.09.17.16.03.35;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.01.14.15.42.42;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.28.16.29.19;	author bsiegert;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@Ok. This is the magical "adjustor thunk". The entry point into
Haskell land from C land. Problem is that it (1) uses dynamically
generated code stored on the heap, as well as (2) a nasty little hack
that invovles exec'ing some code in .data. 

Solved (1) by using a StablePtr, avoiding malloc memory
altogether for the adjustor thunk itself.

Solved (2) by writing an assembly function to do the code they
were too lazy to put into a .s file in the first place.

--- ghc/rts/Adjustor.c.orig	Wed Mar 26 04:58:47 2003
+++ ghc/rts/Adjustor.c	Thu Jul 10 21:25:30 2003
@@@@ -65,10 +65,10 @@@@
    For this to work we make the assumption that bytes in .data
    are considered executable.
 */
-static unsigned char __obscure_ccall_ret_code [] = 
-  { 0x83, 0xc4, 0x04 /* addl $0x4, %esp */
-  , 0xc3             /* ret */
-  };
+
+/* from obscure_ccall.s */
+extern void __obscure_ccall_ret_code(void);
+
 #endif
 
 #if defined(alpha_TARGET_ARCH)
@@@@ -77,13 +77,14 @@@@
 #endif
 
 #if defined(ia64_TARGET_ARCH)
-#include "Storage.h"
-
 /* Layout of a function descriptor */
 typedef struct _IA64FunDesc {
     StgWord64 ip;
     StgWord64 gp;
 } IA64FunDesc;
+#endif
+
+#include "Storage.h"
 
 static void *
 stgAllocStable(size_t size_in_bytes, StgStablePtr *stable)
@@@@ -105,7 +106,6 @@@@
   /* and return a ptr to the goods inside the array */
   return(BYTE_ARR_CTS(arr));
 }
-#endif
 
 void*
 createAdjustor(int cconv, StgStablePtr hptr, StgFunPtr wptr)
@@@@ -128,20 +128,22 @@@@
      <c>: 	ff e0             jmp    %eax        	   # and jump to it.
 		# the callee cleans up the stack
     */
-    if ((adjustor = stgMallocBytes(14, "createAdjustor")) != NULL) {
-	unsigned char *const adj_code = (unsigned char *)adjustor;
-	adj_code[0x00] = (unsigned char)0x58;  /* popl %eax  */
-
-	adj_code[0x01] = (unsigned char)0x68;  /* pushl hptr (which is a dword immediate ) */
-	*((StgStablePtr*)(adj_code + 0x02)) = (StgStablePtr)hptr;
-
-	adj_code[0x06] = (unsigned char)0x50; /* pushl %eax */
+    {
+        StgStablePtr stable;
+        unsigned char *const adj_code;
 
-	adj_code[0x07] = (unsigned char)0xb8; /* movl  $wptr, %eax */
-	*((StgFunPtr*)(adj_code + 0x08)) = (StgFunPtr)wptr;
+        adjustor = stgAllocStable(18,&stable);
+	adj_code = (unsigned char *)adjustor;
 
-	adj_code[0x0c] = (unsigned char)0xff; /* jmp %eax */
-	adj_code[0x0d] = (unsigned char)0xe0;
+	adj_code[0] = (unsigned char)0x58;  /* popl %eax  */
+	adj_code[1] = (unsigned char)0x68;  /* pushl hptr (which is a dword immediate ) */
+	*((StgStablePtr*)(adj_code+2)) = (StgStablePtr)hptr;
+	adj_code[6] = (unsigned char)0x50; /* pushl %eax */
+	adj_code[7] = (unsigned char)0xb8; /* movl  $wptr, %eax */
+	*((StgFunPtr*)(adj_code+8)) = (StgFunPtr)wptr;
+	adj_code[12] = (unsigned char)0xff; /* jmp %eax */
+	adj_code[13] = (unsigned char)0xe0;
+	*((StgStablePtr*)(adj_code+14)) = (StgStablePtr)stable;
     }
 #endif
     break;
@@@@ -172,20 +174,22 @@@@
     That's (thankfully) the case here with the restricted set of 
     return types that we support.
   */
-    if ((adjustor = stgMallocBytes(17, "createAdjustor")) != NULL) {
-	unsigned char *const adj_code = (unsigned char *)adjustor;
-
-	adj_code[0x00] = (unsigned char)0x68;  /* pushl hptr (which is a dword immediate ) */
-	*((StgStablePtr*)(adj_code+0x01)) = (StgStablePtr)hptr;
-
-	adj_code[0x05] = (unsigned char)0xb8;  /* movl  $wptr, %eax */
-	*((StgFunPtr*)(adj_code + 0x06)) = (StgFunPtr)wptr;
-
-	adj_code[0x0a] = (unsigned char)0x68;  /* pushl __obscure_ccall_ret_code */
-	*((StgFunPtr*)(adj_code + 0x0b)) = (StgFunPtr)__obscure_ccall_ret_code;
-
-	adj_code[0x0f] = (unsigned char)0xff; /* jmp *%eax */
-	adj_code[0x10] = (unsigned char)0xe0; 
+   { 
+        StgStablePtr stable;
+        unsigned char *const adj_code;
+
+        adjustor = stgAllocStable(21, &stable);
+	adj_code = (unsigned char *)adjustor;
+
+	adj_code[0] = (unsigned char)0x68;  /* pushl hptr (which is a dword immediate ) */
+	*((StgStablePtr*)(adj_code+1)) = (StgStablePtr)hptr;
+	adj_code[5] = (unsigned char)0xb8;  /* movl  $wptr, %eax */
+	*((StgFunPtr*)(adj_code+6)) = (StgFunPtr)wptr;
+	adj_code[10] = (unsigned char)0x68;  /* pushl __obscure_ccall_ret_code */
+	*((StgFunPtr*)(adj_code+11)) = (StgFunPtr)__obscure_ccall_ret_code;
+	adj_code[15] = (unsigned char)0xff; /* jmp *%eax */
+	adj_code[16] = (unsigned char)0xe0; 
+	*((StgStablePtr*)(adj_code+17)) = (StgStablePtr)stable;
     }
 #elif defined(sparc_TARGET_ARCH)
   /* Magic constant computed by inspecting the code length of the following
@@@@ -476,12 +480,16 @@@@
    return;
  }
 
- /* Free the stable pointer first..*/
+ /* Free the internal stable pointer first..*/
  if (*(unsigned char*)ptr == 0x68) { /* Aha, a ccall adjustor! */
-    freeStablePtr(*((StgStablePtr*)((unsigned char*)ptr + 0x01)));
+    freeStablePtr( *((StgStablePtr*)((unsigned char*)ptr +  1)) );
+    freeStablePtr( *((StgStablePtr*)((unsigned char*)ptr + 17)) );
  } else {
-    freeStablePtr(*((StgStablePtr*)((unsigned char*)ptr + 0x02)));
+    freeStablePtr( *((StgStablePtr*)((unsigned char*)ptr +  2)) );
+    freeStablePtr( *((StgStablePtr*)((unsigned char*)ptr + 14)) );
  }    
+ return;
+
 #elif defined(sparc_TARGET_ARCH)
  if ( *(unsigned long*)ptr != 0x9C23A008UL ) {
    fprintf(stderr, "freeHaskellFunctionPtr: not for me, guv! %p\n", ptr);
@


1.1.1.1
log
@Import latest OpenBSD ports, XFree and source in sync
@
text
@@


1.1.1.2
log
@Import OpenBSD CVS repository (checked out) of roughly 12:00 UTC today,
retrieved from the canadian anoncvs server (due to CTM unavailability)
@
text
@a0 1
$OpenBSD: patch-ghc_rts_Adjustor_c,v 1.2 2003/08/01 14:03:40 avsm Exp $
@


1.1.1.3
log
@Import OpenBSD 3.4-current ports tree.
@
text
@d1 1
a1 1
$OpenBSD: patch-ghc_rts_Adjustor_c,v 1.3 2003/09/01 20:32:14 espie Exp $
d11 1
a11 2
were too lazy to put into a .s file in the first place. See
obscure_ccall.s
@


1.1.1.4
log
@Now we can update MirPorts from OpenBSD ports tree again,
that we have fixed pkg_install tools accordingly in both
stable and current, and that these tools are compatible.

Consider MirPorts locked until next commit of ports/INDEX,v
@
text
@d1 1
a1 1
$OpenBSD: patch-ghc_rts_Adjustor_c,v 1.4 2004/01/08 20:33:23 avsm Exp $
d10 3
a12 2
Solved (2) by writing the assembly to do the code they
were too lazy to put into asm in the first place.
d14 3
a16 3
--- ghc/rts/Adjustor.c.orig	Sat Oct 18 12:04:10 2003
+++ ghc/rts/Adjustor.c	Sat Oct 18 12:04:08 2003
@@@@ -65,10 +65,11 @@@@
d24 4
a27 5
+static void __obscure_ccall_ret_code(void) 
+{ 
+	asm("addl $0x4, %esp");
+	asm("ret");
+}
d31 1
a31 1
@@@@ -77,7 +78,6 @@@@
d36 1
a36 1
 
d39 1
a39 1
@@@@ -85,6 +85,10 @@@@
a41 1
 
d45 1
a45 1
+
d48 1
a48 2
 {
@@@@ -105,7 +109,6 @@@@
d56 1
a56 1
@@@@ -128,8 +131,13 @@@@
d62 6
d69 6
a74 4
+	StgStablePtr stable;
+	unsigned char *adj_code;
+
+	adjustor = stgAllocStable(18, &stable);
a75 2
+
 	adj_code[0x00] = (unsigned char)0x58;  /* popl %eax  */
d77 11
a87 7
 	adj_code[0x01] = (unsigned char)0x68;  /* pushl hptr (which is a dword immediate ) */
@@@@ -142,6 +150,8 @@@@
 
 	adj_code[0x0c] = (unsigned char)0xff; /* jmp %eax */
 	adj_code[0x0d] = (unsigned char)0xe0;
+
+	*((StgStablePtr*)(adj_code + 0x0e)) = (StgStablePtr)stable;
d91 1
a91 1
@@@@ -172,9 +182,13 @@@@
d97 17
a113 5
+    {
+	StgStablePtr stable;
+	unsigned char *adj_code;
 
+	adjustor = stgAllocStable(21, &stable);
d116 9
a124 9
 	adj_code[0x00] = (unsigned char)0x68;  /* pushl hptr (which is a dword immediate ) */
 	*((StgStablePtr*)(adj_code+0x01)) = (StgStablePtr)hptr;
 
@@@@ -186,6 +200,8 @@@@
 
 	adj_code[0x0f] = (unsigned char)0xff; /* jmp *%eax */
 	adj_code[0x10] = (unsigned char)0xe0; 
+
+	*((StgStablePtr*)(adj_code+0x11)) = (StgStablePtr)stable;
d128 1
a128 25
@@@@ -217,9 +233,13 @@@@
      similarly, and local variables should be accessed via %fp, not %sp. In a
      nutshell: This should work! (Famous last words! :-)
   */
-    if ((adjustor = stgMallocBytes(4*(11+1), "createAdjustor")) != NULL) {
-        unsigned long *const adj_code = (unsigned long *)adjustor;
+    {
+	StgStablePtr stable;
+	unsigned long *adj_code;
 
+	adjustor = stgAllocStable(4*(11+2), &stable);
+	adj_code = (unsigned long *)adjustor;
+
         adj_code[ 0]  = 0x9C23A008UL;   /* sub   %sp, 8, %sp         */
         adj_code[ 1]  = 0xDA23A060UL;   /* st    %o5, [%sp + 96]     */
         adj_code[ 2]  = 0xD823A05CUL;   /* st    %o4, [%sp + 92]     */
@@@@ -237,6 +257,7 @@@@
         adj_code[10] |= ((unsigned long)hptr) & 0x000003FFUL;
 
         adj_code[11]  = (unsigned long)hptr;
+	adj_code[12]  = (unsigned long)stable;
 
         /* flush cache */
         asm("flush %0" : : "r" (adj_code     ));
@@@@ -476,12 +497,15 @@@@
d135 3
a137 2
     freeStablePtr(*((StgStablePtr*)((unsigned char*)ptr + 0x01)));
+    freeStablePtr(*((StgStablePtr*)((unsigned char*)ptr + 0x11)));
d139 3
a141 2
     freeStablePtr(*((StgStablePtr*)((unsigned char*)ptr + 0x02)));
+    freeStablePtr(*((StgStablePtr*)((unsigned char*)ptr + 0x0e)));
d144 1
a146 9
    fprintf(stderr, "freeHaskellFunctionPtr: not for me, guv! %p\n", ptr);
@@@@ -490,6 +514,8 @@@@
 
  /* Free the stable pointer first..*/
  freeStablePtr(*((StgStablePtr*)((unsigned long*)ptr + 11)));
+ freeStablePtr(*((StgStablePtr*)((unsigned long*)ptr + 12)));
+ return;
 #elif defined(alpha_TARGET_ARCH)
  if ( *(StgWord64*)ptr != 0xa77b0018a61b0010L ) {
@


1.1.1.5
log
@Import OpenBSD ports tree checked out from anoncvs.ca.openbsd.org at
2004-05-28 15:30 UTC.

Lots of SECURITY fixes, at least:

 * databases/mysql: tmpfile issue
 * www/squid: acl bypass
 * games/xonix: privilege escalation
 * archivers/lha: buffer overflow
 * mail/exim: buffer overflows
 * net/rsync: path checking issue
 * net/icecast: buffer overflow
 * www/opera
@
text
@d1 1
a1 1
$OpenBSD: patch-ghc_rts_Adjustor_c,v 1.5 2004/04/26 23:48:50 dons Exp $
@


