head	1.2;
access;
symbols
	cvs-200405281530:1.1.1.2
	cvs-200402211630:1.1.1.2
	cvs-200401261625:1.1.1.2
	cvs-200401162142:1.1.1.2
	cvs-200301141450:1.1.1.2
	cvs-200312021610:1.1.1.1
	cvs-200311151930:1.1.1.1
	cvs-200310311830:1.1.1.1
	cvs-200310021000:1.1.1.1
	cvs-200309281111:1.1.1.1
	cvs-200309171515:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	ctm-3258:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2004.10.07.17.51.58;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.19.51.56;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.51.56;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.01.14.15.44.54;	author tg;	state Stab;
branches;
next	;


desc
@@


1.2
log
@move ports/mail/* and ports/news/* to ports/mailnews/*
@
text
@--- poppassd.c.orig	Mon Jun  5 02:32:38 2000
+++ poppassd.c	Mon Jun  5 02:32:38 2000
@@@@ -13,11 +13,11 @@@@
  * 
  * Doesn't actually change any passwords itself.  It simply listens for
  * incoming requests, gathers the required information (user name, old
- * password, new password) and executes /bin/passwd, talking to it over
+ * password, new password) and executes /usr/bin/passwd, talking to it over
  * a pseudo-terminal pair.  The advantage of this is that we don't need
  * to have any knowledge of either the password file format (which may
  * include dbx files that need to be rebuilt) or of any file locking
- * protocol /bin/passwd and cohorts may use (and which isn't documented).
+ * protocol /usr/bin/passwd and cohorts may use (and which isn't documented).
  *
  * The current version has been tested at NU under SunOS release 4.1.2 
  * and 4.1.3, and under HP-UX 8.02 and 9.01. We have tested the server 
@@@@ -29,7 +29,7 @@@@
  * Note that unencrypted passwords are transmitted over the network.  If
  * this bothers you, think hard about whether you want to implement the
  * password changing feature.  On the other hand, it's no worse than what
- * happens when you run /bin/passwd while connected via telnet or rlogin.
+ * happens when you run /usr/bin/passwd while connected via telnet or rlogin.
  * Well, maybe it is, since the use of a dedicated port makes it slightly
  * easier for a network snooper to snarf passwords off the wire.
  *
@@@@ -47,7 +47,7 @@@@
  * (which talks to /bin/password) is directly descended from Smith's
  * version, with changes for SunOS and HP-UX by Norstad (with help from
  * sample code in "Advanced Programming in the UNIX Environment"
- * by W. Richard Stevens). The code to report /bin/passwd error messages
+ * by W. Richard Stevens). The code to report /usr/bin/passwd error messages
  * back to the client in the final 500 response, and a new version of the
  * code to find the next free pty, is by Norstad.
  *        
@@@@ -145,8 +145,9 @@@@
 static char *P1[] =
    {"Old password:",
     "Changing password for *.\nOld password:",
+    "Changing local password for *.\nOld password:",
     "Changing password for * on *.\nOld password:",
-    "Changing NIS password for * on *.\nOld password:",
+    "Changing NIS password for * on *.\nOld Password: ",
     "Changing password for *\n*'s Old password:",
     ""};
 
@@@@ -165,7 +166,9 @@@@ static char *P3[] =
     
 static char *P4[] =
    {"\n",
+    "\npasswd: rebuilding the database...\npasswd: done\n",
     "NIS entry changed on *\n",
+    "\n\nNIS password has been changed on *.\n",
     ""};
 
 
@@@@ -186,11 +189,7 @@@@ char *argv[];
      
      *user = *oldpass = *newpass = 0;
      
-     if (openlog ("poppassd", LOG_PID, LOG_LOCAL2) < 0)
-     {
-	  WriteToClient ("500 Can't open syslog.");
-	       exit (1);
-     }
+     openlog("poppassd", LOG_PID, LOG_LOCAL2);
      
      WriteToClient ("200 poppassd v%s hello, who are you?", VERSION);
      ReadFromClient (line);
@@@@ -218,6 +217,7 @@@@ char *argv[];
 
      if (chkPass (user, oldpass, pw) == FAILURE)
      {
+	  syslog(LOG_ERR, "Incorrect password from %s", user);
 	  WriteToClient ("500 Old password is incorrect.");
 	  exit(1);
      }
@@@@ -264,28 +264,28 @@@@ char *argv[];
 
 	  if ((wpid = waitpid (pid, &wstat, 0)) < 0)
 	  {
-	       syslog (LOG_ERR, "wait for /bin/passwd child failed: %m");
+	       syslog (LOG_ERR, "wait for /usr/bin/passwd child failed: %m");
 	       WriteToClient ("500 Server error (wait failed), get help!");
 	       exit (1);
 	  }
 
 	  if (pid != wpid)
 	  {
-	       syslog (LOG_ERR, "wrong child (/bin/passwd waited for!");
+	       syslog (LOG_ERR, "wrong child (/usr/bin/passwd) waited for!");
 	       WriteToClient ("500 Server error (wrong child), get help!");
 	       exit (1);
 	  }
 
 	  if (WIFEXITED (wstat) == 0)
 	  {
-	       syslog (LOG_ERR, "child (/bin/passwd) killed?");
+	       syslog (LOG_ERR, "child (/usr/bin/passwd) killed?");
 	       WriteToClient ("500 Server error (funny wstat), get help!");
 	       exit (1);
 	  }
 
 	  if (WEXITSTATUS (wstat) != 0)
 	  {
-	       syslog (LOG_ERR, "child (/bin/passwd) exited abnormally");
+	       syslog (LOG_ERR, "child (/usr/bin/passwd) exited abnormally");
 	       WriteToClient ("500 Server error (abnormal exit), get help!");
 	       exit (1);
 	  }
@@@@ -304,17 +304,19 @@@@ char *argv[];
      }
      else      /* Child */
      {
-	  /*
-	   * Become the user trying who's password is being changed.  We're
-	   * about to exec /bin/passwd with is setuid root anyway, but this
-	   * way it looks to the child completely like it's being run by
-	   * the normal user, which makes it do its own password verification
-	   * before doing any thing.  In theory, we've already verified the
-	   * password, but this extra level of checking doesn't hurt.  Besides,
-	   * the way I do it here, if somebody manages to change somebody
-	   * else's password, you can complain to your vendor about security
-	   * holes, not to me!
-	   */
+          /* Start new session - gets rid of controlling terminal. */
+   
+          if (setsid() < 0) {
+               syslog(LOG_ERR, "setsid failed: %m");
+               return(0);
+	  }
+
+	  /* Set login name */
+
+	  if (setlogin(user) < 0) {
+	       syslog(LOG_ERR, "setlogin failed: %m");
+	       return(0);
+          }
 	  setuid (pw->pw_uid);
 	  setgid (pw->pw_gid);
 	  dochild (master, slavedev, user);
@@@@ -324,7 +326,7 @@@@ char *argv[];
 /*
  * dochild
  *
- * Do child stuff - set up slave pty and execl /bin/passwd.
+ * Do child stuff - set up slave pty and execl /usr/bin/passwd.
  *
  * Code adapted from "Advanced Programming in the UNIX Environment"
  * by W. Richard Stevens.
@@@@ -338,13 +340,6 @@@@ char *slavedev, *user;
    int slave;
    struct termios stermios;
 
-   /* Start new session - gets rid of controlling terminal. */
-   
-   if (setsid() < 0) {
-      syslog(LOG_ERR, "setsid failed: %m");
-      return(0);
-   }
-
    /* Open slave pty and acquire as new controlling terminal. */
 
    if ((slave = open(slavedev, O_RDWR)) < 0) {
@@@@ -387,10 +382,10 @@@@ char *slavedev, *user;
       return(0);
    }
 
-   /* Fork /bin/passwd. */
+   /* Fork /usr/bin/passwd. */
 
-   if (execl("/bin/passwd", "passwd", user, (char*)0) < 0) {
-      syslog(LOG_ERR, "can't exec /bin/passwd: %m");
+   if (execl("/usr/bin/passwd", "passwd", user, (char*)0) < 0) {
+      syslog(LOG_ERR, "can't exec /usr/bin/passwd: %m");
       return(0);
    }
 }
@@@@ -408,15 +403,20 @@@@ char *slavedev, *user;
  *
  * Modified by Norstad to remove assumptions about number of pty's allocated
  * on this UNIX box.
+ *
+ * Modified by Stephen Melvin to allocate local space for static character
+ * array, rather than local space to pointer to constant string, which is
+ * not kosher and was crashing FreeBSD 1.1.5.1.
  */
 findpty (slave)
 char **slave;
 {
    int master;
-   static char *line = "/dev/ptyXX";
+   static char line[11];
    DIR *dirp;
    struct dirent *dp;
 
+   strcpy(line,"/dev/ptyXX");
    dirp = opendir("/dev");
    while ((dp = readdir(dirp)) != NULL) {
       if (strncmp(dp->d_name, "pty", 3) == 0 && strlen(dp->d_name) == 5) {
@@@@ -485,9 +485,11 @@@@ char *user, *oldpass, *newpass, *emess;
      }
 
      writestring(master, pswd);
-
+     sleep(2);
      if (!expect(master, P4, buf)) return FAILURE;
 
+     close(master);
+
      return SUCCESS;
 }
 
@@@@ -566,6 +568,7 @@@@ char *buf;
 	}
 	n += m;
 	buf[n] = 0;
+/* syslog(LOG_ERR, "read from child: %s",buf); */
 	initialSegment = 0;
         for (s = expected; **s != 0; s++) {
            result = match(buf, *s);
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Now we can update MirPorts from OpenBSD ports tree again,
that we have fixed pkg_install tools accordingly in both
stable and current, and that these tools are compatible.

Consider MirPorts locked until next commit of ports/INDEX,v
@
text
@d1 2
a2 2
--- poppassd.c.orig	2004-01-05 04:15:51.000000000 +0100
+++ poppassd.c	2004-01-05 04:16:07.000000000 +0100
a34 9
@@@@ -125,7 +125,7 @@@@
 #include <ctype.h>
 #include <strings.h>
 #include <errno.h>
-#include <varargs.h>
+#include <stdarg.h>
 #include <pwd.h>
 #include <string.h>
 #include <termios.h>
d46 1
a46 1
@@@@ -165,9 +166,12 @@@@ static char *P3[] =
a54 1
+void WriteToClient(char *fmt, ...);
d56 1
a56 3
 main (argc, argv)
 int argc;
@@@@ -186,11 +190,7 @@@@ char *argv[];
d69 1
a69 1
@@@@ -218,6 +218,7 @@@@ char *argv[];
d77 1
a77 1
@@@@ -264,28 +265,28 @@@@ char *argv[];
d110 1
a110 1
@@@@ -304,17 +305,19 @@@@ char *argv[];
d141 1
a141 1
@@@@ -324,7 +327,7 @@@@ char *argv[];
d150 1
a150 1
@@@@ -338,13 +341,6 @@@@ char *slavedev, *user;
d164 1
a164 1
@@@@ -387,10 +383,10 @@@@ char *slavedev, *user;
d178 1
a178 1
@@@@ -408,15 +404,20 @@@@ char *slavedev, *user;
d200 1
a200 1
@@@@ -485,9 +486,11 @@@@ char *user, *oldpass, *newpass, *emess;
d213 1
a213 1
@@@@ -566,6 +569,7 @@@@ char *buf;
a220 17
@@@@ -630,13 +634,12 @@@@ char *buf;
    }
 }
 
-WriteToClient (fmt, va_alist)
-char *fmt;
-va_dcl
+void
+WriteToClient (char *fmt, ...)
 {
 	va_list ap;
 	
-	va_start (ap);
+	va_start (ap, fmt);
 	vfprintf (stdout, fmt, ap);
 	fputs ("\r\n", stdout );
 	fflush (stdout);
@

