head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2005.02.27.03.48.39;	author tyler;	state Exp;
branches;
next	;


desc
@@


1.1
log
@More cleanup of this crappy strcpy() and strcat() nonsense
They've been around for a while, when will people start using them?
@
text
@$MirBSD$
--- figlet.c.orig	Sun Feb 27 03:41:02 2005
+++ figlet.c	Sun Feb 27 03:47:08 2005
@@@@ -663,16 +663,16 @@@@ char *controlname;
     *(namelen+MYSTRLEN(controlname)+CSUFFIXLEN+2));
   controlfile = NULL;
   if (!hasdirsep(controlname)) {
-    strcpy(controlpath,fontdirname);
+    strlcpy(controlpath,fontdirname, sizeof(controlpath));
     controlpath[namelen] = DIRSEP;
     controlpath[namelen+1] = '\0';
-    strcat(controlpath,controlname);
-    strcat(controlpath,CONTROLFILESUFFIX);
+    strlcat(controlpath,controlname, sizeof(controlpath));
+    strlcat(controlpath,CONTROLFILESUFFIX, sizeof(controlpath));
     controlfile = Zopen(controlpath,"rb");
     }
   if (controlfile==NULL) {
-    strcpy(controlpath,controlname);
-    strcat(controlpath,CONTROLFILESUFFIX);
+    strlcpy(controlpath,controlname, sizeof(controlpath));
+    strlcat(controlpath,CONTROLFILESUFFIX, sizeof(controlpath));
     controlfile = Zopen(controlpath,"rb");
     if (controlfile==NULL) {
       fprintf(stderr,"%s: %s: Unable to open control file\n",myname,
@@@@ -857,7 +857,7 @@@@ void getparams()
   fontdirname = DEFAULTFONTDIR;
   firstfont = 1;
   fontname = (char*)myalloc(sizeof(char)*(MYSTRLEN(DEFAULTFONTFILE)+1));
-  strcpy(fontname,DEFAULTFONTFILE); /* Some systems don't have strdup() */
+  strlcpy(fontname,DEFAULTFONTFILE, sizeof(fontname)); /* Some systems don't have strdup() */
   if (suffixcmp(fontname,FONTFILESUFFIX)) {
     fontname[MYSTRLEN(fontname)-FSUFFIXLEN]='\0';
     }
@@@@ -1088,7 +1088,7 @@@@ int maxlen;
       }
     line[k+1] = '\0';
     fcharlist->thechar[row] = (char*)myalloc(sizeof(char)*(k+2));
-    strcpy(fcharlist->thechar[row],line);
+    strlcpy(fcharlist->thechar[row],line, sizeof(fcharlist->thechar[row]));
     }
 }
 
@@@@ -1118,16 +1118,16 @@@@ void readfont()
     *(namelen+MYSTRLEN(fontname)+FSUFFIXLEN+2));
   fontfile = NULL;
   if (!hasdirsep(fontname)) {
-    strcpy(fontpath,fontdirname);
+    strlcpy(fontpath,fontdirname, sizeof(fontpath));
     fontpath[namelen] = DIRSEP;
     fontpath[namelen+1] = '\0';
-    strcat(fontpath,fontname);
-    strcat(fontpath,FONTFILESUFFIX);
+    strlcat(fontpath,fontname, sizeof(fontpath));
+    strlcat(fontpath,FONTFILESUFFIX, sizeof(fontpath));
     fontfile = Zopen(fontpath,"rb");
     }
   if (fontfile==NULL) {
-    strcpy(fontpath,fontname);
-    strcat(fontpath,FONTFILESUFFIX);
+    strlcpy(fontpath,fontname, sizeof(fontpath));
+    strlcat(fontpath,FONTFILESUFFIX, sizeof(fontpath));
     fontfile = Zopen(fontpath,"rb");
     if (fontfile==NULL) {
       fprintf(stderr,"%s: %s: Unable to open font file\n",myname,fontpath);
@@@@ -1434,20 +1434,20 @@@@ inchr c;
   templine = (char*)myalloc(sizeof(char)*(outlinelenlimit+1));
   for (row=0;row<charheight;row++) {
     if (right2left) {
-      strcpy(templine,currchar[row]);
+      strlcpy(templine,currchar[row], sizeof(templine));
       for (k=0;k<smushamount;k++) {
         templine[currcharwidth-smushamount+k] =
           smushem(templine[currcharwidth-smushamount+k],outputline[row][k]);
         }
-      strcat(templine,outputline[row]+smushamount);
-      strcpy(outputline[row],templine);
+      strlcat(templine,outputline[row]+smushamount, sizeof(templine));
+      strlcpy(outputline[row],templine, sizeof(outputline[row]));
       }
     else {
       for (k=0;k<smushamount;k++) {
         outputline[row][outlinelen-smushamount+k] =
           smushem(outputline[row][outlinelen-smushamount+k],currchar[row][k]);
         }
-      strcat(outputline[row],currchar[row]+smushamount);
+      strlcat(outputline[row],currchar[row]+smushamount, sizeof(outputline[row]));
       }
     }
   free(templine);
@
