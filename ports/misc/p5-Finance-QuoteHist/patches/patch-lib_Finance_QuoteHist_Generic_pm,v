head	1.1;
branch	1.1.1;
access;
symbols
	cvs-200405281530:1.1.1.2
	cvs-200402211630:1.1.1.2
	cvs-200401261625:1.1.1.2
	cvs-200401162142:1.1.1.2
	cvs-200301141450:1.1.1.2
	cvs-200312021610:1.1.1.2
	cvs-200311151930:1.1.1.2
	cvs-200310311830:1.1.1.2
	cvs-200310021000:1.1.1.2
	cvs-200309281111:1.1.1.2
	cvs-200309171515:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	ctm-3258:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.04.14.15.25.49;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.04.14.15.25.49;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.09.28.12.02.09;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@$OpenBSD: patch-lib_Finance_QuoteHist_Generic_pm,v 1.1.1.1 2003/04/13 19:31:33 sturm Exp $
--- lib/Finance/QuoteHist/Generic.pm.orig	Thu Mar 27 14:41:49 2003
+++ lib/Finance/QuoteHist/Generic.pm	Thu Mar 27 14:42:35 2003
@@@@ -24,6 +24,7 @@@@ my @@Scalar_Flags = qw(
 		      ratio_precision
 		      attempts
 		      reverse
+		      reverse_fetch
 		      adjusted
 		      has_non_adjusted
                       env_proxy
@@@@ -298,7 +299,13 @@@@ sub target_get {
   my(@@rows, %empty_fetch, %saw_good_rows);
 
   foreach my $s ($self->symbols) {
-    foreach ($self->$urlmaker($s)) {
+    my @@urllist;
+    if ($self->{reverse_fetch}) {
+      @@urllist = reverse ($self->$urlmaker($s));
+    } else {
+      @@urllist = ($self->$urlmaker($s));
+    }
+    foreach (@@urllist) {
       if ($empty_fetch{$s}) {
 	print STDERR ref $self,
 	   " passing on $s ($target) for now, empty fetch\n"
@@@@ -1190,6 +1197,24 @@@@ of your rows is important you might want
 flag. If the overall order is not that important, then ignore this
 flag. Typically, site-specific sub classes of this module will take
 care of setting this appropriately. The default is 0.
+
+=item reverse_fetch
+
+(The default value is 0.)
+
+If true, Twe fetch each batch of rows in the reverse order to that
+provided by C<quote_urls()>.
+
+Note that the order of rows within blocks is not affected,
+so you might get orders like 7,8,9, 4,5,6, 1,2,3.
+
+Background: I was trying to use Finance::QuoteHist to 'backfill'
+data for current ASX symbols from 1990 to today. When I asked for a
+start date too early the Yahoo server returned a header with no data
+blocks. After more than C<attempts> failures the fetch was aborted.
+By requesting the blocks in the reverse order I get all the data.
+I assume this would not work for any symbols without quotes within
+the most recent requested block (ie defunct symbols).
 
 =item attempts
 
@


1.1.1.1
log
@Import OpenBSD ports tree as of CTM delta 3200,
this time with:
| tg@@n1:/usr/OBSD/ports $ cvs -qd /lcvs import -I ! -I CVS ports openbsd-ports ctm-3200 

This is necessary because of CVS shortcomings. The repository has been
manually prepared this time.

This is the last import to the ports tree before the release of
MirBSD#4 unless security issues appear.
@
text
@@


1.1.1.2
log
@Merge OpenBSD ports tree from comstyle into MirPorts
@
text
@d1 3
a3 3
$OpenBSD: patch-lib_Finance_QuoteHist_Generic_pm,v 1.2 2003/09/23 18:38:04 sturm Exp $
--- lib/Finance/QuoteHist/Generic.pm.orig	2003-01-16 17:38:20.000000000 +1100
+++ lib/Finance/QuoteHist/Generic.pm	2003-09-02 01:34:03.000000000 +1000
d27 2
a28 23
@@@@ -551,7 +558,9 @@@@ sub rows {
 
   # Prep the rows
   foreach (@@$rows) {
+    next if (!defined($_));
     foreach (@@$_) {
+      next if (!defined($_));
       # Zap leading and trailing white space
       s/^\s+//;
       s/\s+$//;
@@@@ -709,6 +718,11 @@@@ sub non_quote_row {
   my @@non_quotes;
   foreach (0 .. $#$row) {
     next if $_ == $dcol;
+    # Rows which have undefined fields
+    # (Yahoo include "date,dividend" in with the quotes)
+    if (!defined($row->[$_])) {
+      return $row;
+    }
     next if $row->[$_] =~ /^\s*$/;
     if ($row->[$_] !~ /^\s*\$*[\d\.,]+\s*$/) {
       return $row;
@@@@ -1191,6 +1205,24 @@@@ flag. If the overall order is not that i
d31 1
a31 1
 
d36 1
a36 1
+If true, we fetch each batch of rows in the reverse order to that
d49 1
a49 1
+
a51 1
 Sets how persistently the module tries to retrieve the quotes. There
@

