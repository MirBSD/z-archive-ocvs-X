head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2004.09.11.18.29.34;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2004.06.29.20.08.57;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2004.06.29.20.05.25;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@joe-2.8 dies, without prejudice
joe-3.1 with my patches has proven more stable with not much more bloat,
and the utf-8 support (in uxterm) rocks. joe-2.8 also didn't work on the
timet64 arches, whereas it 'should' be possible to build joe-3.1 for the
other OSses (DOS maybe, Interix definitively).
@
text
@$MirBSD: ports/editors/joe/modern/patches/patch-utf8_c,v 1.2 2004/06/29 20:08:57 tg Stab $
--- utf8.c.orig	2004-05-05 20:24:01.000000000 +0000
+++ utf8.c	2004-06-29 20:08:26.000000000 +0000
@@@@ -16,6 +16,11 @@@@
 #include <stdlib.h>
 #endif
 
+#ifdef __OpenBSD__
+/* OpenBSD, MirOS and ekkoBSD do not have locale support */
+#undef HAVE_SETLOCALE
+#endif
+
 #if defined(HAVE_LOCALE_H) && defined(HAVE_SETLOCALE)
 #	include <locale.h>
 #       include <langinfo.h>
@@@@ -156,7 +161,7 @@@@ int utf8_decode_string(unsigned char *s)
 {
 	struct utf8_sm sm;
 	int x;
-	int c;
+	int c = 0;
 	utf8_init(&sm);
 	for(x=0;s[x];++x)
 		c = utf8_decode(&sm,s[x]);
@@@@ -191,7 +196,7 @@@@ int utf8_decode_fwrd(unsigned char **p,i
 
 unsigned char *codeset;	/* Codeset of terminal */
 
-unsigned char *non_utf8_codeset;
+unsigned char *non_utf8_codeset = US "ascii";
 			/* Codeset of local language non-UTF-8 */
 
 struct charmap *locale_map;
@@@@ -199,10 +204,9 @@@@ struct charmap *locale_map;
 
 void joe_locale()
 {
-#ifdef HAVE_SETLOCALE
 	unsigned char *s, *t;
 
-	int x;
+	/* int x; */
 
 	s=(unsigned char *)getenv("LC_ALL");
 	if (!s) {
@@@@ -212,6 +216,7 @@@@ void joe_locale()
 		}
 	}
 
+#ifdef HAVE_SETLOCALE
 	if (s)
 		s=(unsigned char *)strdup((char *)s);
 	else
@@@@ -227,9 +232,35 @@@@ void joe_locale()
 	codeset = (unsigned char *)strdup(nl_langinfo(CODESET));
 
 	locale_map = find_charmap(codeset);
+#else
+	if (s == NULL) {
+		locale_map = NULL;
+	} else {
+		if ((t = strrchr(s, '.')) != NULL)
+			locale_map = find_charmap(++t);
+		if (locale_map == NULL)
+			locale_map = find_charmap(s);
+	}
+#endif
 	if (!locale_map)
 		locale_map = find_charmap(US "ascii");
 
+	/* For files, the default map should be:
+	 * > the result of nl_langinfo
+	 *   -> on systems which have it only
+	 * > ascii
+	 *   -> for technical reasons
+	 * > iso-8859-1
+	 *   -> to unify. Well, cp437. Well, windows-1252. You see?
+	 * > utf-8
+	 *   -> because that is what the user expects.
+	 *
+	 * We are going with the dumb way and are setting the
+	 * default file encoding to utf-8 as well if we are run
+	 * in an uxterm on a non-locale-aware operating system
+	 * such as MirOS; users should be careful as to avoid
+	 * sending utf-8 in accident instead of iso-8859-1.
+	 */
 	fdefault.charmap = locale_map;
 	pdefault.charmap = locale_map;
 
@@@@ -246,12 +277,6 @@@@ void joe_locale()
 	to_utf = iconv_open("UTF-8", (char *)non_utf8_codeset);
 	from_utf = iconv_open((char *)non_utf8_codeset, "UTF-8");
 #endif
-
-#else
-	locale_map = find_charmap("ascii");
-	fdefault.charmap = locale_map;
-	pdefault.charmap = locale_map;
-#endif
 }
 
 void to_utf8(struct charmap *map,unsigned char *s,int c)
@


1.2
log
@add better reasoning

benz, if I should ever write changelog messages in utf-8, beat me to hell ;)
@
text
@d1 1
a1 1
$MirBSD: ports/editors/joe/modern/patches/patch-utf8_c,v 1.1 2004/06/29 20:05:25 tg Exp $
@


1.1
log
@* fix -Werror -Wall build
* add support for utf-8 display and multiple (even non-utf8) character
  sets on yours truly non-8bit-aware operating system
* bump patchlevel

I'm going to feed these back, yes...
@
text
@d1 1
a1 1
$MirBSD$
d3 1
a3 1
+++ utf8.c	2004-06-29 19:54:44.000000000 +0000
d54 1
a54 1
@@@@ -227,6 +232,16 @@@@ void joe_locale()
d71 20
a90 1
@@@@ -246,12 +261,6 @@@@ void joe_locale()
@

