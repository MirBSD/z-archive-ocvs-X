head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2004.09.11.18.29.31;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2004.06.29.20.05.25;	author tg;	state Stab;
branches;
next	;


desc
@@


1.2
log
@joe-2.8 dies, without prejudice
joe-3.1 with my patches has proven more stable with not much more bloat,
and the utf-8 support (in uxterm) rocks. joe-2.8 also didn't work on the
timet64 arches, whereas it 'should' be possible to build joe-3.1 for the
other OSses (DOS maybe, Interix definitively).
@
text
@$MirBSD: ports/editors/joe/modern/patches/patch-tty_c,v 1.1 2004/06/29 20:05:25 tg Stab $
--- tty.c.orig	2004-05-28 18:38:21.000000000 +0000
+++ tty.c	2004-06-29 19:34:26.000000000 +0000
@@@@ -12,11 +12,9 @@@@
 #ifdef HAVE_SYS_STAT_H
 #include <sys/stat.h>
 #endif
-#ifdef GWINSZ_IN_SYS_IOCTL
 #ifdef HAVE_SYS_IOCTL_H
 #include <sys/ioctl.h>
 #endif
-#endif
 #include <stdio.h>
 #ifdef HAVE_FCNTL_H
 #include <fcntl.h>
@@@@ -28,12 +26,6 @@@@
 #include <sys/param.h>
 #endif
 
-#ifdef HAVE_OPENPTY
-#ifdef HAVE_PTY_H
-#include <pty.h>
-#endif
-#endif
-
 #include <errno.h>
 #include <string.h>
 #include <stdlib.h>
@@@@ -41,8 +33,6 @@@@
 
 int idleout = 1;
 
-#include "config.h"
-
 /* We use the defines in sys/ioctl to determine what type
  * tty interface the system uses and what type of system
  * we actually have.
@@@@ -59,6 +49,15 @@@@ int idleout = 1;
 #  endif
 #endif
 
+#ifdef HAVE_OPENPTY
+#ifdef HAVE_PTY_H
+#include <pty.h>
+#endif
+#ifdef HAVE_UTIL_H
+#include <util.h>
+#endif
+#endif
+
 #ifdef HAVE_SETITIMER
 #ifdef HAVE_SYS_TIME_H
 #include <sys/time.h>
@@@@ -91,6 +90,7 @@@@ int idleout = 1;
 
 #include "main.h"
 #include "path.h"
+#include "scrn.h"
 #include "tty.h"
 #include "utils.h"
 
@@@@ -850,11 +850,10 @@@@ static unsigned char *getpty(int *ptyfd)
 #else
 #ifdef HAVE_OPENPTY
 
-/* BSD function, present in libc5 and glibc2 */
+/* BSD function, present in libc5 and glibc2, and the BSDs */
 
 static unsigned char *getpty(int *ptyfd)
 {
-	int fdm;
 	static unsigned char name[32];
 	int ttyfd;
 
@@@@ -900,23 +899,23 @@@@ static unsigned char *getpty(int *ptyfd)
 
 	if (ptys)
 		for (fd = 0; ptys[fd]; ++fd) {
-			strcpy((char *)ttyname, (char *)ptydir);
-			strcat((char *)ttyname, (char  *)(ptys[fd]));
+			strlcpy((char *)ttyname, (char *)ptydir, 32);
+			strlcat((char *)ttyname, (char  *)(ptys[fd]), 32);
 			if ((*ptyfd = open((char *)ttyname, O_RDWR)) >= 0) {
 				ptys[fd][0] = 't';
-				strcpy((char *)ttyname, (char *)ttydir);
-				strcat((char *)ttyname, (char *)(ptys[fd]));
+				strlcpy((char *)ttyname, (char *)ttydir, 32);
+				strlcat((char *)ttyname, (char *)(ptys[fd]), 32);
 				ptys[fd][0] = 'p';
 				x = open((char *)ttyname, O_RDWR);
 				if (x >= 0) {
 					close(x);
 					close(*ptyfd);
-					strcpy((char *)ttyname, (char *)ptydir);
-					strcat((char *)ttyname, (char *)(ptys[fd]));
+					strlcpy((char *)ttyname, (char *)ptydir, 32);
+					strlcat((char *)ttyname, (char *)(ptys[fd]), 32);
 					*ptyfd = open((char *)ttyname, O_RDWR);
 					ptys[fd][0] = 't';
-					strcpy((char *)ttyname, (char *)ttydir);
-					strcat((char *)ttyname, (char *)(ptys[fd]));
+					strlcpy((char *)ttyname, (char *)ttydir, 32);
+					strlcat((char *)ttyname, (char *)(ptys[fd]), 32);
 					ptys[fd][0] = 'p';
 					return ttyname;
 				} else
@


1.1
log
@* fix -Werror -Wall build
* add support for utf-8 display and multiple (even non-utf8) character
  sets on yours truly non-8bit-aware operating system
* bump patchlevel

I'm going to feed these back, yes...
@
text
@d1 1
a1 1
$MirBSD$
@

