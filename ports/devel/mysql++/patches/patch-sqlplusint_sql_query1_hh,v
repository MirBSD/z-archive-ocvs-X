head	1.1;
branch	1.1.1;
access;
symbols
	cvs-200405281530:1.1.1.2
	cvs-200402211630:1.1.1.2
	cvs-200401261625:1.1.1.2
	cvs-200401162142:1.1.1.2
	cvs-200301141450:1.1.1.2
	cvs-200312021610:1.1.1.1
	cvs-200311151930:1.1.1.1
	cvs-200310311830:1.1.1.1
	cvs-200310021000:1.1.1.1
	cvs-200309281111:1.1.1.1
	cvs-200309171515:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308221505:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	ctm-3258:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.19.50.05;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.50.05;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.01.14.15.33.18;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@$OpenBSD: patch-sqlplusint_sql_query1_hh,v 1.1 2002/08/10 20:07:02 wilfried Exp $
--- sqlplusint/sql_query1.hh.orig	Sat May 19 18:44:48 2001
+++ sqlplusint/sql_query1.hh	Fri Aug  9 16:10:07 2002
@@@@ -112,7 +112,7 @@@@ class SQLQuery : public strstream { 
 private:
   char* preview_char();
 protected:
-  bool    Success;
+  bool    Success_;
   char*   errmsg;
   vector<SQLParseElement> parsed;
   vector<string>          parsed_names;
@@@@ -122,7 +122,7 @@@@ protected:
   void     proc(parms &p);
 
 public:
-  SQLQuery(): Success(false), errmsg(NULL), def(this) {parsed.empty(); parsed_names.empty(); parsed_nums.empty();} //:
+  SQLQuery(): Success_(false), errmsg(NULL), def(this) {parsed.empty(); parsed_names.empty(); parsed_nums.empty();} //:
   SQLQuery(const SQLQuery &q); //:
   SQLQuery& operator = (const SQLQuery &q); //:
 
@@@@ -131,7 +131,7 @@@@ public:
   void     parse();  
 
   string   error () const {return errmsg;}
-  bool     success() const {return Success;}
+  bool     success() const {return Success_;}
 
   operator bool () {return success();}
   bool operator !    () {return !success();}
@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Now we can update MirPorts from OpenBSD ports tree again,
that we have fixed pkg_install tools accordingly in both
stable and current, and that these tools are compatible.

Consider MirPorts locked until next commit of ports/INDEX,v
@
text
@d1 4
a4 55
$OpenBSD: patch-sqlplusint_sql_query1_hh,v 1.2 2004/01/06 11:16:53 wilfried Exp $
--- sqlplusint/sql_query1.hh.orig	2001-05-19 18:44:48.000000000 +0200
+++ sqlplusint/sql_query1.hh	2004-01-04 23:50:11.000000000 +0100
@@@@ -1,7 +1,7 @@@@
 #ifndef __sql_query_1_hh
 #define __sql_query_1_hh
 
-#include <strstream.h>
+#include <sstream>
 #include <vector>
 #include <map>
 #include "define_short"
@@@@ -16,8 +16,8 @@@@ class SQLQuery;
 
 //: This class holds the parameter values for filling template queries. 
 // It is a subclass of a vector of *SQLStrings*.
-class SQLQueryParms : public vector<SQLString> {
-  friend Query;
+class SQLQueryParms : public std::vector<SQLString> {
+  friend class Query;
 private:
   typedef const SQLString&      ss;
   SQLQuery                 *parent;
@@@@ -28,10 +28,10 @@@@ public:
   void               clear() {erase(begin(),end());} //: Clears the list
   SQLString &operator [] (size_type n) {
     if (n >= size()) insert(end(),(n+1) - size(), "");
-    return vector<SQLString>::operator [] (n);
+    return std::vector<SQLString>::operator [] (n);
   } //: Access element number n
   const SQLString &operator [] (size_type n) const 
-    {return vector<SQLString>::operator [] (n);}     
+    {return std::vector<SQLString>::operator [] (n);}     
   //: Access element number n
   SQLString &operator [] (const char *str); 
   //: Access the value of the element with a key of str.
@@@@ -81,8 +81,8 @@@@ public:
 enum query_reset {DONT_RESET, RESET_QUERY};
 
 struct SQLParseElement {
-  SQLParseElement(string b, char o, char n) : before(b),option(o),num(n) {}
-  string before;
+  SQLParseElement(std::string b, char o, char n) : before(b),option(o),num(n) {}
+  std::string before;
   char   option;
   char   num;
 };
@@@@ -107,22 +107,22 @@@@ struct SQLParseElement {
 // your query before you try to use any of the *SQLQuery* specific
 // methods except for *error()* and *success()*.
 
-class SQLQuery : public strstream { 
-  friend SQLQueryParms; 
+class SQLQuery : public std::stringstream { 
+  friend class SQLQueryParms; 
d11 3
a13 8
-  vector<SQLParseElement> parsed;
-  vector<string>          parsed_names;
-  map<string,int>         parsed_nums;
+  std::vector<SQLParseElement> parsed;
+  std::vector<std::string>     parsed_names;
+  std::map<std::string,int>    parsed_nums;
   typedef  const SQLString&  ss;
   typedef  SQLQueryParms  parms;
d22 1
a22 2
@@@@ -130,8 +130,8 @@@@ public:
 
d25 1
a25 1
-  string   error () const {return errmsg;}
a26 1
+  std::string   error () const {return errmsg;}
a30 17
@@@@ -167,6 +167,7 @@@@ public:
 
   template <class T> SQLQuery& update(const T &o, const T &n) {
     reset();
+    enum sql_cmp_type {sql_use_compare};
     *this << "UPDATE " << o.table() << " SET " << n.equal_list() 
           << " WHERE " << o.equal_list(" AND ", sql_use_compare);
     return *this;
@@@@ -184,7 +185,7 @@@@ public:
     return *this;
   } //:
 
-  mysql_query_define_const1(string,str)
+  mysql_query_define_const1(std::string,str)
 };  
 
 #endif
@

