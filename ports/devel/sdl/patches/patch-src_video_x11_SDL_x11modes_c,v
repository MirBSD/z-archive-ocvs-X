head	1.2;
access;
symbols
	cvs-200405281530:1.1.1.3
	cvs-200402211630:1.1.1.3
	cvs-200401261625:1.1.1.3
	cvs-200401162142:1.1.1.3
	cvs-200301141450:1.1.1.3
	cvs-200312021610:1.1.1.3
	cvs-200311151930:1.1.1.3
	cvs-200310311830:1.1.1.3
	cvs-200310021000:1.1.1.3
	cvs-200309281111:1.1.1.2
	cvs-200309171515:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308221505:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3449:1.1.1.2
	cvs-200307191610:1.1.1.2
	ctm-3416:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291800:1.1.1.2
	ctm-3369:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.2
	ctm-3258:1.1.1.2
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2004.08.26.20.20.57;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2003.03.22.19.50.16;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.50.16;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.06.14.24.26;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.10.02.10.41.05;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to 1.2.7, build c++ free
@
text
@$MirBSD$
$OpenBSD: patch-src_video_x11_SDL_x11modes_c,v 1.3 2003/09/29 05:41:37 pvalchev Exp $
--- src/video/x11/SDL_x11modes.c.orig	Wed Feb 18 17:21:47 2004
+++ src/video/x11/SDL_x11modes.c	Thu Aug 26 19:41:20 2004
@@@@ -44,6 +44,8 @@@@ static char rcsid =
 #endif 
 
 #define MAX(a, b)        (a > b ? a : b)
+#define V_INTERLACE      0x010
+#define V_DBLSCAN        0x020
 
 #ifdef XFREE86_VM
 Bool SDL_NAME(XF86VidModeGetModeInfo)(Display *dpy, int scr, SDL_NAME(XF86VidModeModeInfo) *info)
@@@@ -91,6 +93,82 @@@@ static int cmpmodes(const void *va, cons
 }
 #endif
 
+#ifdef XFREE86_VM
+static int get_vidmode_filter(SDL_NAME(XF86VidModeModeInfo) **modes, int nmodes, char **bitmap)
+{
+    int i, result = 0;
+    int use_all_modes, use_specific_mode;
+    const char *variable;
+    char *temp;
+
+    if (!nmodes)
+        return 0;
+
+    temp = (char *)malloc((nmodes)*sizeof(char));
+    if (!temp)
+        return 0;
+
+    for ( i = 0; i < nmodes; ++i )
+        temp[i] = 0;
+
+    variable = getenv("SDL_VIDEO_X11_USE_ALL_MODES");
+    use_all_modes = variable ? atoi(variable) : 0;
+    variable = getenv("SDL_VIDEO_X11_USE_SPECIFIC_MODE");
+    use_specific_mode = variable ? atoi(variable) : 0;
+
+    qsort(modes, nmodes, sizeof *modes, cmpmodes);
+
+    if ( use_all_modes ) {
+        for ( i = 0; i < nmodes; ++i )
+            temp[i] = 1;
+        result  = 1;
+/*    } else if ( use_specific_mode ) { ... */
+    } else {
+        int previous_refresh, current_refresh;
+        SDL_NAME(XF86VidModeModeInfo) *previous, *current;
+
+        previous = modes[0];
+        previous_refresh = (int)(previous->dotclock * 1000.0 /
+          (previous->htotal * previous->vtotal));
+        if ( previous->flags & V_INTERLACE ) previous_refresh *= 2;
+        else if ( previous->flags & V_DBLSCAN ) previous_refresh /= 2;
+
+        temp[0] = 1;
+        for ( i = 1; i < nmodes; ++i ) {
+            current = modes[i];
+            current_refresh = (int)(current->dotclock * 1000.0 /
+              (current->htotal * current->vtotal));
+            if ( current->flags & V_INTERLACE ) current_refresh *= 2;
+            else if ( current->flags & V_DBLSCAN ) current_refresh /= 2;
+
+            /* Compare this mode to the previous one */
+            if ( current->hdisplay == previous->hdisplay &&
+                 current->vdisplay == previous->vdisplay ) {
+#ifdef XFREE86_DEBUG
+		printf("Comparing %dx%d at %d Hz and %d Hz\n",
+			current->hdisplay, current->vdisplay,
+			current_refresh, previous_refresh);
+#endif
+                if ( current_refresh > previous_refresh ) {
+                    temp[i-1] = 0;
+                    temp[i]   = 1;
+                }
+                else
+                    temp[i] = 0;
+            }
+            else
+                temp[i] = 1;
+
+            previous = current;
+            previous_refresh = current_refresh;
+        }
+        result = 1;
+    }
+    *bitmap = temp;
+    return result;
+}
+#endif
+
 static void get_real_resolution(_THIS, int* w, int* h);
 
 static void set_best_resolution(_THIS, int width, int height)
@@@@ -102,9 +180,11 @@@@ static void set_best_resolution(_THIS, i
         int i;
         int best_width = 0, best_height = 0;
         int nmodes;
+	char *bitmap;
 
         if ( SDL_NAME(XF86VidModeGetModeLine)(SDL_Display, SDL_Screen, &i, &mode) &&
-             SDL_NAME(XF86VidModeGetAllModeLines)(SDL_Display,SDL_Screen,&nmodes,&modes)){
+             SDL_NAME(XF86VidModeGetAllModeLines)(SDL_Display,SDL_Screen,&nmodes,&modes) &&
+	     get_vidmode_filter(modes, nmodes, &bitmap) ){
 #ifdef XFREE86_DEBUG
             printf("Available modes (unsorted):\n");
             for ( i = 0; i < nmodes; ++i ) {
@@@@ -116,14 +196,16 @@@@ static void set_best_resolution(_THIS, i
 #endif
             for ( i = 0; i < nmodes ; i++ ) {
                 if ( (modes[i]->hdisplay == width) &&
-                     (modes[i]->vdisplay == height) )
+                     (modes[i]->vdisplay == height) &&
+		     (bitmap[i] == 1) )
                     goto match;
             }
             qsort(modes, nmodes, sizeof *modes, cmpmodes);
             for ( i = nmodes-1; i > 0 ; i-- ) {
 		if ( ! best_width ) {
                     if ( (modes[i]->hdisplay >= width) &&
-                         (modes[i]->vdisplay >= height) ) {
+                         (modes[i]->vdisplay >= height) &&
+			 (bitmap[i] == 1) ) {
                         best_width = modes[i]->hdisplay;
                         best_height = modes[i]->vdisplay;
                     }
@@@@ -141,6 +223,7 @@@@ static void set_best_resolution(_THIS, i
                 SDL_NAME(XF86VidModeSwitchToMode)(SDL_Display, SDL_Screen, modes[i]);
             }
             XFree(modes);
+            if (bitmap) free(bitmap);
         }
     }
 #endif /* XFREE86_VM */
@@@@ -288,6 +371,7 @@@@ int X11_GetVideoModes(_THIS)
     int vm_major, vm_minor;
     int nmodes;
     SDL_NAME(XF86VidModeModeInfo) **modes;
+    char *bitmap = (char*)0;
 #endif
 #ifdef HAVE_XIGXME
     int xme_major, xme_minor;
@@@@ -349,7 +433,8 @@@@ int X11_GetVideoModes(_THIS)
         }
     }
     if ( ! buggy_X11 &&
-         SDL_NAME(XF86VidModeGetAllModeLines)(SDL_Display, SDL_Screen,&nmodes,&modes) ) {
+         SDL_NAME(XF86VidModeGetAllModeLines)(SDL_Display, SDL_Screen,&nmodes,&modes)  &&
+         get_vidmode_filter(modes, nmodes, &bitmap) ) {
 
 #ifdef XFREE86_DEBUG
         printf("Available modes: (sorted)\n");
@@@@ -368,6 +453,9 @@@@ int X11_GetVideoModes(_THIS)
             for ( i=0; i<nmodes; ++i ) {
                 int w, h;
 
+                /* Exclude those vidmodes that have been filtered out */
+                if (!bitmap[i]) continue;
+
                 /* Check to see if we should add the screen size (Xinerama) */
                 w = modes[i]->hdisplay;
                 h = modes[i]->vdisplay;
@@@@ -400,6 +488,7 @@@@ int X11_GetVideoModes(_THIS)
             SDL_modelist[n] = NULL;
         }
         XFree(modes);
+        if (bitmap) free(bitmap);
 
         use_vidmode = vm_major * 100 + vm_minor;
         save_mode(this);
@


1.1
log
@Initial revision
@
text
@d1 133
a133 5
$OpenBSD: patch-src_video_x11_SDL_x11modes_c,v 1.1 2003/03/02 02:57:16 wcobb Exp $
--- src/video/x11/SDL_x11modes.c.orig	Sat Mar  1 16:47:38 2003
+++ src/video/x11/SDL_x11modes.c	Sat Mar  1 16:47:54 2003
@@@@ -304,8 +304,8 @@@@ int X11_GetVideoModes(_THIS)
             fclose(metro_fp);
d136 6
a141 5
-#if defined(__alpha__) || defined(__powerpc__)
-    /* The alpha and PPC XFree86 servers are also buggy */
+#if defined(__alpha__) || defined(__powerpc__) || defined(__sparc64__)
+    /* The alpha, sparc64 and PPC XFree86 servers are also buggy */
     buggy_X11 = 1;
d143 30
a172 1
     /* Enumerate the available fullscreen modes */
@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD ports CVS as of roughly 12:00-14:00 UTC today,
which should be equivalent to CTM delta 3258.
@
text
@d1 4
a4 144
$OpenBSD: patch-src_video_x11_SDL_x11modes_c,v 1.2 2003/04/22 00:16:53 wcobb Exp $
--- src/video/x11/SDL_x11modes.c.orig	Sun Sep 29 21:35:25 2002
+++ src/video/x11/SDL_x11modes.c	Mon Apr 21 20:37:47 2003
@@@@ -44,6 +44,8 @@@@ static char rcsid =
 #endif 
 
 #define MAX(a, b)        (a > b ? a : b)
+#define V_INTERLACE      0x010
+#define V_DBLSCAN        0x020
 
 #ifdef XFREE86_VM
 Bool SDL_NAME(XF86VidModeGetModeInfo)(Display *dpy, int scr, SDL_NAME(XF86VidModeModeInfo) *info)
@@@@ -91,6 +93,82 @@@@ static int cmpmodes(const void *va, cons
 }
 #endif
 
+#ifdef XFREE86_VM
+static int get_vidmode_filter(SDL_NAME(XF86VidModeModeInfo) **modes, int nmodes, char **bitmap)
+{
+    int i, result = 0;
+    int use_all_modes, use_specific_mode;
+    const char *variable;
+    char *temp;
+
+    if (!nmodes)
+        return 0;
+
+    temp = (char *)malloc((nmodes)*sizeof(char));
+    if (!temp)
+        return 0;
+
+    for ( i = 0; i < nmodes; ++i )
+        temp[i] = 0;
+
+    variable = getenv("SDL_VIDEO_X11_USE_ALL_MODES");
+    use_all_modes = variable ? atoi(variable) : 0;
+    variable = getenv("SDL_VIDEO_X11_USE_SPECIFIC_MODE");
+    use_specific_mode = variable ? atoi(variable) : 0;
+
+    qsort(modes, nmodes, sizeof *modes, cmpmodes);
+
+    if ( use_all_modes ) {
+        for ( i = 0; i < nmodes; ++i )
+            temp[i] = 1;
+        result  = 1;
+/*    } else if ( use_specific_mode ) { ... */
+    } else {
+        int previous_refresh, current_refresh;
+        SDL_NAME(XF86VidModeModeInfo) *previous, *current;
+
+        previous = modes[0];
+        previous_refresh = (int)(previous->dotclock * 1000.0 /
+          (previous->htotal * previous->vtotal));
+        if ( previous->flags & V_INTERLACE ) previous_refresh *= 2;
+        else if ( previous->flags & V_DBLSCAN ) previous_refresh /= 2;
+
+        temp[0] = 1;
+        for ( i = 1; i < nmodes; ++i ) {
+            current = modes[i];
+            current_refresh = (int)(current->dotclock * 1000.0 /
+              (current->htotal * current->vtotal));
+            if ( current->flags & V_INTERLACE ) current_refresh *= 2;
+            else if ( current->flags & V_DBLSCAN ) current_refresh /= 2;
+
+            /* Compare this mode to the previous one */
+            if ( current->hdisplay == previous->hdisplay &&
+                 current->vdisplay == previous->vdisplay ) {
+#ifdef XFREE86_DEBUG
+		printf("Comparing %dx%d at %d Hz and %d Hz\n",
+			current->hdisplay, current->vdisplay,
+			current_refresh, previous_refresh);
+#endif
+                if ( current_refresh > previous_refresh ) {
+                    temp[i-1] = 0;
+                    temp[i]   = 1;
+                }
+                else
+                    temp[i] = 0;
+            }
+            else
+                temp[i] = 1;
+
+            previous = current;
+            previous_refresh = current_refresh;
+        }
+        result = 1;
+    }
+    *bitmap = temp;
+    return result;
+}
+#endif
+
 static void get_real_resolution(_THIS, int* w, int* h);
 
 static void set_best_resolution(_THIS, int width, int height)
@@@@ -101,10 +179,11 @@@@ static void set_best_resolution(_THIS, i
         SDL_NAME(XF86VidModeModeInfo) **modes;
         int i;
         int nmodes;
+        char *bitmap;
 
         if ( SDL_NAME(XF86VidModeGetModeLine)(SDL_Display, SDL_Screen, &i, &mode) &&
-             SDL_NAME(XF86VidModeGetAllModeLines)(SDL_Display,SDL_Screen,&nmodes,&modes)){
-            qsort(modes, nmodes, sizeof *modes, cmpmodes);
+             SDL_NAME(XF86VidModeGetAllModeLines)(SDL_Display,SDL_Screen,&nmodes,&modes) &&
+             get_vidmode_filter(modes, nmodes, &bitmap) ) {
 #ifdef XFREE86_DEBUG
             printf("Available modes:\n");
             for ( i = 0; i < nmodes; ++i ) {
@@@@ -113,15 +192,24 @@@@ static void set_best_resolution(_THIS, i
             }
 #endif
             for ( i = nmodes-1; i > 0 ; --i ) {
+                if ( (modes[i]->hdisplay == width) &&
+                     (modes[i]->vdisplay == height) &&
+                     (bitmap[i] == 1) )
+                    goto match;
+            }
+            for ( i = nmodes-1; i > 0 ; --i ) {
                 if ( (modes[i]->hdisplay >= width) &&
-                     (modes[i]->vdisplay >= height) )
+                     (modes[i]->vdisplay >= height) &&
+                     (bitmap[i] == 1) )
                     break;
             }
+       match:
             if ( (modes[i]->hdisplay != mode.hdisplay) ||
                  (modes[i]->vdisplay != mode.vdisplay) ) {
                 SDL_NAME(XF86VidModeSwitchToMode)(SDL_Display, SDL_Screen, modes[i]);
             }
             XFree(modes);
+            if (bitmap) free(bitmap);
         }
     }
 #endif /* XFREE86_VM */
@@@@ -269,6 +357,7 @@@@ int X11_GetVideoModes(_THIS)
     int vm_major, vm_minor;
     int nmodes;
     SDL_NAME(XF86VidModeModeInfo) **modes;
+    char *bitmap = (char*)0;
 #endif
 #ifdef HAVE_XIGXME
     int xme_major, xme_minor;
@@@@ -304,8 +393,8 @@@@ int X11_GetVideoModes(_THIS)
a14 29
@@@@ -330,15 +419,18 @@@@ int X11_GetVideoModes(_THIS)
         }
     }
     if ( ! buggy_X11 &&
-         SDL_NAME(XF86VidModeGetAllModeLines)(SDL_Display, SDL_Screen,&nmodes,&modes) ) {
+         SDL_NAME(XF86VidModeGetAllModeLines)(SDL_Display, SDL_Screen,&nmodes,&modes) &&
+         get_vidmode_filter(modes, nmodes, &bitmap) ) {
 
-        qsort(modes, nmodes, sizeof *modes, cmpmodes);
         SDL_modelist = (SDL_Rect **)malloc((nmodes+2)*sizeof(SDL_Rect *));
         if ( SDL_modelist ) {
             n = 0;
             for ( i=0; i<nmodes; ++i ) {
                 int w, h;
 
+                /* Exclude those vidmodes that have been filtered out */
+                if (!bitmap[i]) continue;
+
                 /* Check to see if we should add the screen size (Xinerama) */
                 w = modes[i]->hdisplay;
                 h = modes[i]->vdisplay;
@@@@ -371,6 +463,7 @@@@ int X11_GetVideoModes(_THIS)
             SDL_modelist[n] = NULL;
         }
         XFree(modes);
+        if (bitmap) free(bitmap);
 
         use_vidmode = vm_major * 100 + vm_minor;
         save_mode(this);
@


1.1.1.3
log
@OpenBSD-current ports tree; with a few security fixes too.
@
text
@d1 3
a3 3
$OpenBSD: patch-src_video_x11_SDL_x11modes_c,v 1.3 2003/09/29 05:41:37 pvalchev Exp $
--- src/video/x11/SDL_x11modes.c.orig	2003-08-30 21:13:12.000000000 +0200
+++ src/video/x11/SDL_x11modes.c	2003-09-21 14:51:18.000000000 +0200
d96 2
a97 1
@@@@ -102,9 +180,11 @@@@ static void set_best_resolution(_THIS, i
a98 1
         int best_width = 0, best_height = 0;
d100 1
a100 1
+	char *bitmap;
d104 1
d106 1
a106 1
+	     get_vidmode_filter(modes, nmodes, &bitmap) ){
d108 1
a108 1
             printf("Available modes (unsorted):\n");
d110 2
a111 1
@@@@ -116,14 +196,16 @@@@ static void set_best_resolution(_THIS, i
d113 2
a114 3
             for ( i = 0; i < nmodes ; i++ ) {
                 if ( (modes[i]->hdisplay == width) &&
-                     (modes[i]->vdisplay == height) )
d116 9
a124 2
+		     (bitmap[i] == 1) )
                     goto match;
d126 3
a128 11
             qsort(modes, nmodes, sizeof *modes, cmpmodes);
             for ( i = nmodes-1; i >= 0 ; i-- ) {
 		if ( ! best_width ) {
                     if ( (modes[i]->hdisplay >= width) &&
-                         (modes[i]->vdisplay >= height) ) {
+                         (modes[i]->vdisplay >= height) &&
+			 (bitmap[i] == 1) ) {
                         best_width = modes[i]->hdisplay;
                         best_height = modes[i]->vdisplay;
                     }
@@@@ -141,6 +223,7 @@@@ static void set_best_resolution(_THIS, i
d136 1
a136 1
@@@@ -288,6 +371,7 @@@@ int X11_GetVideoModes(_THIS)
d144 12
a155 1
@@@@ -349,7 +433,8 @@@@ int X11_GetVideoModes(_THIS)
d160 1
a160 1
+         SDL_NAME(XF86VidModeGetAllModeLines)(SDL_Display, SDL_Screen,&nmodes,&modes)  &&
d163 4
a166 3
 #ifdef XFREE86_DEBUG
         printf("Available modes: (sorted)\n");
@@@@ -368,6 +453,9 @@@@ int X11_GetVideoModes(_THIS)
d176 1
a176 1
@@@@ -400,6 +488,7 @@@@ int X11_GetVideoModes(_THIS)
@


