head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2005.02.27.05.09.22;	author tyler;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Importing distcc 2.18.3 into the ports, oops on the import statement, it's
early ;)
@
text
@$MirBSD$
--- src/util.c.orig	Sun Feb 27 04:52:10 2005
+++ src/util.c	Sun Feb 27 04:55:22 2005
@@@@ -145,7 +145,7 @@@@ char *dcc_gethostname(void)
 
     if (!myname[0]) {
         if (gethostname(myname, sizeof myname - 1) == -1)
-            strcpy(myname, "UNKNOWN");
+            strlcpy(myname, "UNKNOWN", sizeof(myname));
     }
 
     return myname;
@@@@ -255,9 +255,9 @@@@ int dcc_trim_path(const char *compiler_n
             len = strlen(p);
             n = p + len;
         }
-        strncpy(buf, p, len);
+        strlcpy(buf, p, len);
 
-        sprintf(buf + len, "/%s", compiler_name);
+        snprintf(buf + len, sizeof(buf + len), "/%s", compiler_name);
         if (lstat(buf, &sb) == -1)
             continue;           /* ENOENT, EACCESS, etc */
         if (!S_ISLNK(sb.st_mode))
@@@@ -333,13 +333,13 @@@@ char *dcc_abspath(const char *path, int 
         rs_log_error("path overflowed in dcc_abspath()");
         exit(EXIT_OUT_OF_MEMORY);
     }
-    strncpy(buf + len, path, path_len);
+    strlcpy(buf + len, path, path_len);
     buf[len + path_len] = '\0';
     for (p = buf+len-(len > 0); (p = strstr(p, "/../")) != NULL; p = slash) {
 	*p = '\0';
 	if (!(slash = strrchr(buf, '/')))
 	    slash = p;
-	strcpy(slash, p+3);
+	strlcpy(slash, p+3, sizeof(slash));
     }
     return buf;
 }
@@@@ -363,11 +363,11 @@@@ int dcc_dup_part(const char **psrc, char
     if (len == 0) {
         *pdst = NULL;
     } else {    
-        if (!(*pdst = malloc(len + 1))) {
+        if (!(*pdst = malloc( (unsigned)len + 1))) {
             rs_log_error("failed to allocate string duplicate: %d", (int) len);
             return EXIT_OUT_OF_MEMORY;
         }
-        strncpy(*pdst, *psrc, len);
+        strlcpy(*pdst, *psrc, len);
         (*pdst)[len] = '\0';
         (*psrc) += len;
     }
@
