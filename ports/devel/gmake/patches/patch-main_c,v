head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2005.02.27.00.02.43;	author tyler;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Update gmake to use snprintf, strlcat, and strlcpy
dirty dirty fsf code

take a shower stallman
@
text
@$MirBSD$
--- main.c.orig	Sat Aug 10 01:26:55 2002
+++ main.c	Sat Feb 26 23:30:20 2005
@@@@ -627,14 +627,14 @@@@ handle_runtime_exceptions( struct _EXCEP
 
   if (! ISDB (DB_VERBOSE))
     {
-      sprintf(errmsg,
+      snprintf(errmsg, sizeof(errmsg), 
               _("%s: Interrupt/Exception caught (code = 0x%x, addr = 0x%x)\n"),
               prg, exrec->ExceptionCode, exrec->ExceptionAddress);
       fprintf(stderr, errmsg);
       exit(255);
     }
 
-  sprintf(errmsg,
+  snprintf(errmsg, sizeof(errmsg), 
           _("\nUnhandled exception filter called from program %s\nExceptionCode = %x\nExceptionFlags = %x\nExceptionAddress = %x\n"),
           prg, exrec->ExceptionCode, exrec->ExceptionFlags,
           exrec->ExceptionAddress);
@@@@ -706,7 +706,7 @@@@ find_and_set_default_shell(char *token)
     sh_found = 1;
   } else if (file_exists_p(search_token)) {
     /* search token path was found */
-    sprintf(sh_path, "%s", search_token);
+    snprintf(sh_path, sizeof(sh_path), "%s", search_token);
     default_shell = xstrdup(w32ify(sh_path,0));
     DB (DB_VERBOSE,
         (_("find_and_set_shell setting default_shell = %s\n"), default_shell));
@@@@ -728,7 +728,7 @@@@ find_and_set_default_shell(char *token)
         *ep = '\0';
 
         if (dir_file_exists_p(p, search_token)) {
-          sprintf(sh_path, "%s/%s", p, search_token);
+          snprintf(sh_path, sizeof(sh_path), "%s/%s", p, search_token);
           default_shell = xstrdup(w32ify(sh_path,0));
           sh_found = 1;
           *ep = PATH_SEPARATOR_CHAR;
@@@@ -745,7 +745,7 @@@@ find_and_set_default_shell(char *token)
 
       /* be sure to check last element of Path */
       if (p && *p && dir_file_exists_p(p, search_token)) {
-          sprintf(sh_path, "%s/%s", p, search_token);
+          snprintf(sh_path, sizeof(sh_path), "%s/%s", p, search_token);
           default_shell = xstrdup(w32ify(sh_path,0));
           sh_found = 1;
       }
@@@@ -798,7 +798,7 @@@@ open_tmpfile(name, template)
 # define TEMPLATE_LEN   L_tmpnam
 #endif
   *name = xmalloc (TEMPLATE_LEN + 1);
-  strcpy (*name, template);
+  strlcpy (*name, template, sizeof(*name));
 
 #if defined HAVE_MKSTEMP && defined HAVE_FDOPEN
   /* It's safest to use mkstemp(), if we can.  */
@@@@ -1343,19 +1343,19 @@@@ int main (int argc, char ** argv)
 
             template = (char *) alloca (strlen (tmpdir)
                                         + sizeof (DEFAULT_TMPFILE) + 1);
-	    strcpy (template, tmpdir);
+	    strlcpy (template, tmpdir, sizeof(template));
 
 #ifdef HAVE_DOS_PATHS
 	    if (strchr ("/\\", template[strlen (template) - 1]) == NULL)
-	      strcat (template, "/");
+	      strlcat (template, "/", sizeof(template));
 #else
 # ifndef VMS
 	    if (template[strlen (template) - 1] != '/')
-	      strcat (template, "/");
+	      strlcat (template, "/", sizeof(template));
 # endif /* !VMS */
 #endif /* !HAVE_DOS_PATHS */
 
-	    strcat (template, DEFAULT_TMPFILE);
+	    strlcat (template, DEFAULT_TMPFILE, sizeof(template));
 	    outfile = open_tmpfile (&stdin_nm, template);
 	    if (outfile == 0)
 	      pfatal_with_name (_("fopen (temporary file)"));
@@@@ -1575,7 +1575,8 @@@@ int main (int argc, char ** argv)
       jobserver_fds->list = (char **) xmalloc (sizeof (char *));
       jobserver_fds->list[0] = xmalloc ((sizeof ("1024")*2)+1);
 
-      sprintf (jobserver_fds->list[0], "%d,%d", job_fds[0], job_fds[1]);
+      snprintf (jobserver_fds->list[0], sizeof(jobserver_fds->list[0]),
+	 "%d,%d", job_fds[0], job_fds[1]);
       jobserver_fds->idx = 1;
       jobserver_fds->max = 1;
     }
@@@@ -1854,7 +1855,7 @@@@ int main (int argc, char ** argv)
 		char *sgi_loses;
 		sgi_loses = (char *) alloca (40);
 		*p = sgi_loses;
-		sprintf (*p, "%s=%u", MAKELEVEL_NAME, makelevel);
+		snprintf (*p, sizeof(*p), "%s=%u", MAKELEVEL_NAME, makelevel);
 		break;
 	      }
 #else /* AMIGA */
@@@@ -1866,7 +1867,7 @@@@ int main (int argc, char ** argv)
 
 	    if (len != -1)
 	    {
-	    sprintf (buffer, "%u", makelevel);
+	    snprintf (buffer, sizeof(buffer), "%u", makelevel);
 	      SetVar (MAKELEVEL_NAME, buffer, -1, GVF_GLOBAL_ONLY);
 	    }
 	  }
@@@@ -2477,7 +2478,7 @@@@ define_makeflags (all, makefile)
 	      else
 		{
 		  char *buf = (char *) alloca (30);
-		  sprintf (buf, "%u", *(unsigned int *) cs->value_ptr);
+		  snprintf (buf, sizeof(buf), "%u", *(unsigned int *) cs->value_ptr);
 		  ADD_FLAG (buf, strlen (buf));
 		}
 	    }
@@@@ -2498,7 +2499,7 @@@@ define_makeflags (all, makefile)
 	      else
 		{
 		  char *buf = (char *) alloca (100);
-		  sprintf (buf, "%g", *(double *) cs->value_ptr);
+		  snprintf (buf, sizeof(buf), "%g", *(double *) cs->value_ptr);
 		  ADD_FLAG (buf, strlen (buf));
 		}
 	    }
@@@@ -2546,7 +2547,7 @@@@ define_makeflags (all, makefile)
               *p++ = '-';
             }
 	  *p++ = '-';
-	  strcpy (p, flags->cs->long_name);
+	  strlcpy (p, flags->cs->long_name, sizeof(p));
 	  p += strlen (p);
 	}
       if (flags->arg != 0)
@
