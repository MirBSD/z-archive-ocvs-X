head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2005.02.27.00.02.43;	author tyler;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Update gmake to use snprintf, strlcat, and strlcpy
dirty dirty fsf code

take a shower stallman
@
text
@$MirBSD$
--- function.c.orig	Sat Feb 26 23:03:52 2005
+++ function.c	Sat Feb 26 23:07:49 2005
@@@@ -709,7 +709,7 @@@@ func_words (o, argv, funcname)
   while (find_next_token (&word_iterator, (unsigned int *) 0) != 0)
     ++i;
 
-  sprintf (buf, "%d", i);
+  snprintf (buf, sizeof(buf), "%d", i);
   o = variable_buffer_output (o, buf, strlen (buf));
 
 
@@@@ -1122,12 +1122,12 @@@@ func_error (o, argv, funcname)
 
   for (argvp=argv; argvp[1] != 0; ++argvp)
     {
-      strcpy (p, *argvp);
+      strlcpy (p, *argvp, sizeof(p));
       p += strlen (*argvp);
       *(p++) = ',';
       *(p++) = ' ';
     }
-  strcpy (p, *argvp);
+  strlcpy (p, *argvp, sizeof(p));
 
   if (*funcname == 'e')
     fatal (reading_file, "%s", msg);
@@@@ -1447,7 +1447,7 @@@@ msdos_openpipe (int* pipedes, int *pidp,
       char buf[PATH_MAX + 7];
       /* This makes sure $SHELL value is used by $(shell), even
 	 though the target environment is not passed to it.  */
-      sprintf (buf, "SHELL=%s", sh->value);
+      snprintf (buf, sizeof(buf), "SHELL=%s", sh->value);
       putenv (buf);
     }
 
@@@@ -1532,7 +1532,7 @@@@ func_shell (o, argv, funcname)
   if (reading_file != 0)
     {
       error_prefix = (char *) alloca (strlen (reading_file->filenm)+11+4);
-      sprintf (error_prefix,
+      snprintf (error_prefix, sizeof(error_prefix), 
 	       "%s:%lu: ", reading_file->filenm, reading_file->lineno);
     }
   else
@@@@ -1698,7 +1698,7 @@@@ func_shell (char *o, char **argv, const 
      Ideally we would use main.c:open_tmpfile(), but this uses a special
      Open(), not fopen(), and I'm not familiar enough with the code to mess
      with it.  */
-  strcpy (tmp_output, "t:MakeshXXXXXXXX");
+  strlcpy (tmp_output, "t:MakeshXXXXXXXX", sizeof(tmp_output));
   mktemp (tmp_output);
   child_stdout = Open (tmp_output, MODE_NEWFILE);
 
@@@@ -1710,7 +1710,7 @@@@ func_shell (char *o, char **argv, const 
 
   for (aptr=command_argv; *aptr; aptr++)
     {
-      strcpy (ptr, *aptr);
+      strlcpy (ptr, *aptr, sizeof(ptr));
       ptr += strlen (ptr) + 1;
       *ptr ++ = ' ';
       *ptr = 0;
@@@@ -2047,7 +2047,7 @@@@ func_call (o, argv, funcname)
     {
       char num[11];
 
-      sprintf (num, "%d", i);
+      snprintf (num, sizeof(num), "%d", i);
       define_variable (num, strlen (num), *argv, o_automatic, 0);
     }
 
@
