head	1.1;
branch	1.1.1;
access;
symbols
	cvs-200405281530:1.1.1.1
	cvs-200402211630:1.1.1.1
	cvs-200401261625:1.1.1.1
	cvs-200401162142:1.1.1.1
	cvs-200301141450:1.1.1.1
	cvs-200312021610:1.1.1.1
	cvs-200311151930:1.1.1.1
	cvs-200310311830:1.1.1.1
	cvs-200310021000:1.1.1.1
	cvs-200309281111:1.1.1.1
	cvs-200309171515:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	ctm-3258:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.19.53.59;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.53.59;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@$OpenBSD: patch-regexp_c,v 1.1 2002/02/23 23:45:18 pvalchev Exp $
--- regexp.c.orig	Thu Feb 24 10:55:47 1994
+++ regexp.c	Sat Feb 23 16:38:21 2002
@@@@ -17,22 +17,14 @@@@
 /*	without prior permission from Harris Corporation. 		*/
 /************************************************************************/
 
+#include	<sys/types.h>
 #include	<stdio.h>
 #include	<string.h>
 
 #include	"manifest.h"
 #include	"contool.h"
 
-PRIVATE	regexp_error();
-
-#define		INIT			register char *expbuf = ep, *sp = instring;
-#define		GETC()			(*sp++)
-#define		PEEKC()			(*sp)
-#define		UNGETC(c)		(--sp)
-#define		RETURN(p)		{memcpy(sp = (char *) malloc(p - expbuf), expbuf, p - expbuf); return(sp);}
-#define		ERROR(val)		{regexp_error(val, instring); return(NULL);}
-
-#include	<regexp.h>
+#include	<regex.h>
 
 PRIVATE	char	error_message[512];
 
@@@@ -49,37 +41,10 @@@@ char	*str;
 	p = str + strlen(str) - 1;
 	if (p >= str && *p == '\n')
 	   *p = '\0';
-	circf = circ;
-	result = step(str, exp);
+	result = regexec((regex_t*)exp, str, 0, NULL, 0);
 	if (p >= str && *p == '\0')
 	   *p = '\n';
-	return(result);
-}
-
-/************************************************************************/
-PRIVATE	regexp_error(val, string)
-
-int	val;
-char	*string;
-
-{	char	*msg;
-
-	switch (val) {
-	   case 11 : msg = "range endpoint too large";
-	   case 16 : msg = "bad number";
-	   case 25 : msg = "\"\\digit\" out of range";
-	   case 36 : msg = "illegal or missing delimiter";
-	   case 41 : msg = "no remembered search string";
-	   case 42 : msg = "\\(\\) imbalance";
-	   case 43 : msg = "too many \\(";
-	   case 44 : msg = "more than 2 numbers given in \\{\\}";
-	   case 45 : msg = "} expected after \\";
-	   case 46 : msg = "first number exceeds second in \\{\\}";
-	   case 49 : msg = "[] imbalance";
-	   case 50 : msg = "regular expression overflow";
-	   default : msg = "regular expression error";
-	   }
-	sprintf(error_message, "%s in %s", msg, string);
+	return(!result);
 }
 
 /************************************************************************/
@@@@ -109,34 +74,40 @@@@ Filter	*filter;
 char	*start;
 char	*stop;
 
-{	char	rbuf[1024], *sre, *ere;
-	int	sc, ec;
+{
 
-	sre = ere = NULL;
+	int	errcod;
+	regex_t	*sre, *ere;
+
+	sre = (regex_t*) malloc(sizeof(regex_t));
+	ere = (regex_t*) malloc(sizeof(regex_t));
 	if (start) {
-	   if ((sre = compile(fix_control_chars(start), rbuf, rbuf+1024, '\0')) == NULL)
+	   if (errcod = regcomp(sre, fix_control_chars(start), REG_NOSUB)) {
+              regerror(errcod, sre, error_message, 512);
+              strcat(error_message, " in ");
+              strcat(error_message,fix_control_chars(start));
 	      return(error_message);
-	   sc = circf;
+	      }
 	   }
 	if (stop) {
-	   if ((ere = compile(fix_control_chars(stop), rbuf, rbuf+1024, '\0')) == NULL) {
-	      cond_free(sre);
+	   if (errcod = regcomp(ere, fix_control_chars(stop), REG_NOSUB)) {
+              regerror(errcod, ere, error_message, 512);
+              strcat(error_message," in ");
+              strcat(error_message,fix_control_chars(stop));
 	      return(error_message);
 	      }
-	   ec = circf;
 	   }
 	if (filter) {
 	   filter->start = start;
 	   filter->stop = stop;
-	   filter->start_re = sre;
-	   filter->stop_re = ere;
-	   filter->start_circf = sc;
-	   filter->stop_circf = ec;
+	   filter->start_re = (char *) sre;
+	   filter->stop_re = (char *) ere;
 	   }
 	else {
+	   regfree(sre);
+	   regfree(ere);
 	   cond_free(sre);
-	   if (ere)
-	      cond_free(ere);
+	   cond_free(ere);
 	   }
 	return(NULL);
 }
@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
