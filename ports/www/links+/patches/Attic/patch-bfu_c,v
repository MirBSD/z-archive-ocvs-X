head	1.2;
access;
symbols
	cvs-200311151930:1.1.1.1
	cvs-200310311830:1.1.1.1
	cvs-200310021000:1.1.1.1
	cvs-200309281111:1.1.1.1
	cvs-200309171515:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	ctm-3258:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.12.03.19.32.52;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.19.54.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.54.34;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge import of OpenBSD ports tree into MirPorts,
except for xawtv and gnome
@
text
@$OpenBSD: patch-bfu_c,v 1.1 2002/12/11 08:07:17 fgsch Exp $
--- bfu.c.orig	Sat Oct 12 15:46:23 2002
+++ bfu.c	Sat Nov 30 21:51:38 2002
@@@@ -786,11 +786,18 @@@@ void display_dlg_item(struct dialog_data
 			}
 			break;
 		case D_FIELD:
+		case D_FIELD_PASS:
 			if (di->vpos + di->l <= di->cpos) di->vpos = di->cpos - di->l + 1;
 			if (di->vpos > di->cpos) di->vpos = di->cpos;
 			if (di->vpos < 0) di->vpos = 0;
 			fill_area(term, di->x, di->y, di->l, 1, COLOR_DIALOG_FIELD);
-			print_text(term, di->x, di->y, strlen(di->cdata + di->vpos) <= di->l ? strlen(di->cdata + di->vpos) : di->l, di->cdata + di->vpos, COLOR_DIALOG_FIELD_TEXT);
+                        if (di->item->type == D_FIELD) {
+                            print_text(term, di->x, di->y, strlen(di->cdata + di->vpos) <= di->l ? strlen(di->cdata + di->vpos) : di->l, di->cdata + di->vpos, COLOR_DIALOG_FIELD_TEXT);
+                        } else {
+                            fill_area(term, di->x, di->y,
+                                      strlen(di->cdata + di->vpos) <= di->l ? strlen(di->cdata + di->vpos) : di->l, 1,
+                                      COLOR_DIALOG_FIELD_TEXT | '*');
+                        }
 			if (sel) {
 				set_cursor(term, di->x + di->cpos - di->vpos, di->y, di->x + di->cpos - di->vpos, di->y);
 				set_window_ptr(dlg->win, di->x, di->y);
@@@@ -817,7 +824,7 @@@@ void display_dlg_item(struct dialog_data
 		switch (di->item->type) {
 			int p, pp;
 			struct style *st;
-			unsigned char *text, *text2, *text3;
+			unsigned char *text, *text2, *text3, *text_pass;
 			struct rect r;
 			case D_CHECKBOX:
 				p = di->x;
@@@@ -845,8 +852,11 @@@@ void display_dlg_item(struct dialog_data
 				if (dlg->s) exclude_from_set(&dlg->s, di->x, di->y, p, di->y + G_BFU_FONT_SIZE);
 				break;
 			case D_FIELD:
+			case D_FIELD_PASS:
 				if (!(text = memacpy(di->cdata, di->cpos))) break;
-				if (*(text2 = text3 = di->cdata + di->cpos)) {
+                                text_pass=mem_alloc(di->cpos+1);
+                                for(pp=0;pp<di->cpos;pp++) text_pass[pp]='*';text_pass[pp]='\0';
+                                if (*(text2 = text3 = di->cdata + di->cpos)) {
 					GET_UTF_8(text3, p);
 					text2 = memacpy(text2, text3 - text2);
 				} else {
@@@@ -866,9 +876,16 @@@@ void display_dlg_item(struct dialog_data
 				if (dlg->s) exclude_from_set(&dlg->s, di->x, di->y, di->x + di->l, di->y + G_BFU_FONT_SIZE);
 				restrict_clip_area(dev, &r, di->x, di->y, di->x + di->l, di->y + G_BFU_FONT_SIZE);
 				p = di->x - di->vpos;
-				g_print_text(drv, dev, p, di->y, bfu_style_wb_mono, text, &p);
-				g_print_text(drv, dev, p, di->y, sel ? bfu_style_wb_mono_u : bfu_style_wb_mono, text2, &p);
+                                if (di->item->type == D_FIELD) {
+                                    g_print_text(drv, dev, p, di->y, bfu_style_wb_mono, text, &p);
+                                } else {
+                                    g_print_text(drv, dev, p, di->y, bfu_style_wb_mono, text_pass, &p);
+                                }
+                                mem_free(text_pass);
+                                g_print_text(drv, dev, p, di->y, sel ? bfu_style_wb_mono_u : bfu_style_wb_mono, text2, &p);
 				g_print_text(drv, dev, p, di->y, bfu_style_wb_mono, text3, &p);
+
+
 				drv->fill_area(dev, p, di->y, di->x + di->l, di->y + G_BFU_FONT_SIZE, bfu_fg_color);
 				drv->set_clip_area(dev, &r);
 				mem_free(text);
@@@@ -963,6 +980,7 @@@@ int dlg_mouse(struct dialog_data *dlg, s
 			if ((ev->b & BM_ACT) == B_UP) dlg_select_item(dlg, di);
 			return 1;
 		case D_FIELD:
+		case D_FIELD_PASS:
 			if (gf_val(ev->y != di->y, ev->y < di->y || ev->y >= di->y + G_BFU_FONT_SIZE) || ev->x < di->x || ev->x >= di->x + di->l) return 0;
 			if (!F) {
 				if ((di->cpos = di->vpos + ev->x - di->x) > strlen(di->cdata)) di->cpos = strlen(di->cdata);
@@@@ -1103,7 +1121,7 @@@@ void dialog_func(struct window *win, str
 				} 
 				init_list(di->history);
 				di->cur_hist = (struct history_item *)&di->history;
-				if (di->item->type == D_FIELD) {
+                               if (di->item->type == D_FIELD || di->item->type == D_FIELD_PASS) {
 					if (di->item->history) {
 						struct history_item *j;
 						/*int l = di->item->dlen;*/
@@@@ -1130,7 +1148,7 @@@@ void dialog_func(struct window *win, str
 			break;
 		case EV_KBD:
 			di = &dlg->items[dlg->selected];
-			if (di->item->type == D_FIELD) {
+                        if (di->item->type == D_FIELD || di->item->type == D_FIELD_PASS) {
 				if (ev->x == KBD_UP && (void *)di->cur_hist->prev != &di->history) {
 					di->cur_hist = di->cur_hist->prev;
 					dlg_set_history(di);
@@@@ -1353,7 +1371,7 @@@@ int check_dialog(struct dialog_data *dlg
 {
 	int i;
 	for (i = 0; i < dlg->n; i++)
-		if (dlg->dlg->items[i].type == D_CHECKBOX || dlg->dlg->items[i].type == D_FIELD)
+                if (dlg->dlg->items[i].type == D_CHECKBOX || dlg->dlg->items[i].type == D_FIELD || dlg->dlg->items[i].type == D_FIELD_PASS) 
 			if (dlg->dlg->items[i].fn && dlg->dlg->items[i].fn(dlg, &dlg->items[i])) {
 				dlg->selected = i;
 				draw_to_window(dlg->win, (void (*)(struct terminal *, void *))redraw_dialog_items, dlg);
@@@@ -1738,7 +1756,7 @@@@ void dlg_format_group(struct dialog_data
 #endif
 			item->x = x + nx + sl * (item->item->type != D_CHECKBOX);
 			item->y = *y;
-			if (item->item->type == D_FIELD) item->l = gf_val(item->item->dlen, item->item->dlen * G_DIALOG_FIELD_WIDTH);
+                        if (item->item->type == D_FIELD || item->item->type == D_FIELD_PASS) item->l = gf_val(item->item->dlen, item->item->dlen * G_DIALOG_FIELD_WIDTH);
 		}
 		if (rw && nx + wx > *rw) if ((*rw = nx + wx) > w) *rw = w;
 		nx += wx + gf_val(1, G_DIALOG_GROUP_SPACE);
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
