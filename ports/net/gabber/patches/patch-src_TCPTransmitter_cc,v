head	1.1;
branch	1.1.1;
access;
symbols
	cvs-200405281530:1.1.1.2
	cvs-200402211630:1.1.1.2
	cvs-200401261625:1.1.1.2
	cvs-200401162142:1.1.1.2
	cvs-200301141450:1.1.1.2
	cvs-200312021610:1.1.1.1
	cvs-200311151930:1.1.1.1
	cvs-200310311830:1.1.1.1
	cvs-200310021000:1.1.1.1
	cvs-200309281111:1.1.1.1
	cvs-200309171515:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3449:1.1.1.1
	cvs-200307191610:1.1.1.1
	ctm-3416:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291800:1.1.1.1
	ctm-3369:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	ctm-3258:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.19.52.39;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.52.39;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.01.14.15.48.53;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@$OpenBSD: patch-src_TCPTransmitter_cc,v 1.1.1.1 2002/10/28 17:22:17 todd Exp $
$RuOBSD: patch-src_TCPTransmitter_cc,v 1.4 2002/10/26 12:04:30 grange Exp $
--- src/TCPTransmitter.cc.orig	Mon Feb 18 01:29:51 2002
+++ src/TCPTransmitter.cc	Sat Oct 26 15:51:24 2002
@@@@ -120,13 +120,15 @@@@ void TCPTransmitter::connect(const strin
      // Set autoreconnect and use_ssl
      _autoreconnect = autoreconnect;
      _use_ssl = use_ssl;
-     
+
+#if 0
 #ifdef WITH_IPV6
      if (inet_addr(chost.c_str()) != INADDR_NONE)
      { // IP address in IPv4 notation - convert
 	     chost = "::ffff:" + chost;
      }
 #endif
+#endif
      
 #ifdef TRANSMITTER_DEBUG
      if (_proxy.type == none)
@@@@ -173,7 +175,7 @@@@ void TCPTransmitter::connect(const strin
 	       _host_sockaddr.sin_port = g_htons(cport);
 #endif
 	       // resolve host
-	       _async_resolve(chost.c_str());
+	       _async_resolve(chost.c_str(), cport);
 	  }
 	  else 
 	  {
@@@@ -944,15 +946,26 @@@@ const string TCPTransmitter::getSocketEr
      return("Unknown error");
 }
 
-void TCPTransmitter::_async_resolve(const gchar* hostname)
+void TCPTransmitter::_async_resolve(const gchar* hostname, guint port)
 {
+     char p[6];
+     struct addrinfo hints;
+
      g_assert(hostname != NULL);
      // check if hostname is in dotted decimal notation
+#if 0
 #ifdef WITH_IPV6
      if (inet_pton(AF_INET6, hostname, &_host_sockaddr.sin6_addr) != 0) 
 #else
      if (inet_aton(hostname, &_host_sockaddr.sin_addr) != 0) 
 #endif
+#endif
+     snprintf(p, 5, "%u", port);
+     p[5] = '\0';
+     memset(&hints, 0, sizeof(hints));
+     hints.ai_family = PF_UNSPEC;
+     hints.ai_socktype = SOCK_STREAM;
+     if (getaddrinfo(hostname, p, &hints, &_res0) == 0)
      {
 	  // all done
 	  _hostResolved = true;
@@@@ -1071,65 +1084,76 @@@@ void TCPTransmitter::_async_resolve(cons
 
 void TCPTransmitter::_async_connect()
 {
+     struct addrinfo *res;
+     char hbuf[MAXHOSTNAMELEN];
      // connect non-blocking
      
      // create socket
-#ifdef WITH_IPV6
-     _socketfd = socket(PF_INET6, SOCK_STREAM, 0);
-#else
-     _socketfd = socket(PF_INET, SOCK_STREAM, 0);
-#endif
-     if (_socketfd < 0) 
+     _socketfd = -1;
+     for (res = _res0; res; res = res->ai_next)
      {
-	  // something nasty happened
+	  _socketfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
+	  if (_socketfd < 0)
+	  {
+	       // something nasty happened
 #ifdef TRANSMITTER_DEBUG
-	  cout << "socket() failed: " << strerror(errno) << endl;
+	       cout << "socket() failed: " << strerror(errno) << endl;
 #endif
-	  handleError(strerror(errno));
-	  return;
-     }
-     _socket_flags = fcntl(_socketfd, F_GETFL, 0);
-     if (_socket_flags == -1) 
-     {
-	  // not good
+	       handleError(strerror(errno));
+	       continue;
+	  }
+	  _socket_flags = fcntl(_socketfd, F_GETFL, 0);
+	  if (_socket_flags == -1) 
+	  {
+	       // not good
 #ifdef TRANSMITTER_DEBUG
-	  cout << "fcntl F_GETFL failed on socket: " << strerror(errno) << endl;
+	       cout << "fcntl F_GETFL failed on socket: " << strerror(errno) << endl;
 #endif
-	  handleError(errSocket);
-	  return;
-     }
-     if (fcntl(_socketfd, F_SETFL, _socket_flags | O_NONBLOCK) == -1) 
-     {
-	  // damn!
+	       handleError(errSocket);
+	       continue;
+	  }
+	  if (fcntl(_socketfd, F_SETFL, _socket_flags | O_NONBLOCK) == -1)
+	  {
+	       // damn!
 #ifdef TRANSMITTER_DEBUG
-	  cout << "fcntl F_SETFL failed on socket: " << strerror(errno) << endl;
+	       cout << "fcntl F_SETFL failed on socket: " << strerror(errno) << endl;
 #endif
-	  handleError(strerror(errno));
-	  return;
-     }
+	       handleError(strerror(errno));
+	       continue;
+	  }
      
-     int one = 1;
-     if (setsockopt(_socketfd, SOL_SOCKET, SO_KEEPALIVE, &one, sizeof(one)) < 0) 
-     {
+	  int one = 1;
+	  if (setsockopt(_socketfd, SOL_SOCKET, SO_KEEPALIVE, &one, sizeof(one)) < 0) 
+	  {
 #ifdef TRANSMITTER_DEBUG
-          cout << "setsockopt failed: " << strerror(errno) << endl;
+	       cout << "setsockopt failed: " << strerror(errno) << endl;
 #endif
-     }
+	  }
      
-     // try to connect non-blocking
-     if (::connect(_socketfd, (struct sockaddr*) (&_host_sockaddr), sizeof(_host_sockaddr)) < 0) 
-     {
-	  if (errno != EINPROGRESS) 
+	  // try to connect non-blocking
+#ifdef TRANSMITTER_DEBUG
+	  getnameinfo(res->ai_addr, res->ai_addrlen, hbuf, sizeof(hbuf), NULL, 0, NI_NUMERICHOST);
+	  cout << "Trying " << hbuf << endl;
+#endif
+	  if (::connect(_socketfd, res->ai_addr, res->ai_addrlen) < 0)
 	  {
-	       // Yikes!
+	       if (errno != EINPROGRESS) 
+	       {
+		    // Yikes!
 #ifdef TRANSMITTER_DEBUG
-	       cout << "connect failed: " << strerror(errno) << endl;
+		    cout << "connect failed: " << strerror(errno) << endl;
 #endif	       
-	       handleError(strerror(errno));
-	       return;
+		    handleError(strerror(errno));
+		    close(_socketfd);
+		    _socketfd = -1;
+		    continue;
+	       }
 	  }
+	  break;
      }
-     
+     if (_socketfd < 0)
+	  return;
+
      _IOChannel = g_io_channel_unix_new(_socketfd);
      _socket_watchid = g_io_add_watch(_IOChannel,
 				      GIOCondition(G_IO_IN | G_IO_OUT | G_IO_PRI | G_IO_ERR | G_IO_HUP | G_IO_NVAL),
@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Now we can update MirPorts from OpenBSD ports tree again,
that we have fixed pkg_install tools accordingly in both
stable and current, and that these tools are compatible.

Consider MirPorts locked until next commit of ports/INDEX,v
@
text
@d1 1
a1 1
$OpenBSD: patch-src_TCPTransmitter_cc,v 1.2 2004/01/05 02:04:54 espie Exp $
d3 2
a4 2
--- src/TCPTransmitter.cc.orig	2002-02-17 23:29:51.000000000 +0100
+++ src/TCPTransmitter.cc	2004-01-05 03:01:58.000000000 +0100
a175 9
@@@@ -1338,7 +1362,7 @@@@ const string TCPTransmitter::getsockname
      }
 }
 
-void TCPTransmitter::setProxy(const string &ptype, const string &host, guint port, const string &user, const string &password, bool tryOther = true)
+void TCPTransmitter::setProxy(const string &ptype, const string &host, guint port, const string &user, const string &password, bool tryOther/*=true*/)
 {
      if (_state != Offline)
      {
@

