head	1.2;
access;
symbols
	MIRBSD_5:1.1
	MIRBSD_4:1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.06.13.18.08.12;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.23.14.43.01;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove all traces of the "old" djbdns port triplet
@
text
@#include <sys/param.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include "byte.h"
#include "socket.h"
#include "ip6.h"
#include "haveip6.h"
#include "error.h"

int socket_accept6(int s,char ip[16],uint16 *port,uint32 *scope_id)
{
#ifdef LIBC_HAS_IP6
  struct sockaddr_in6 sa;
#else
  struct sockaddr_in sa;
#endif
  unsigned int dummy = sizeof sa;
  int fd;

  fd = accept(s,(struct sockaddr *) &sa,&dummy);
  if (fd == -1) return -1;

#ifdef LIBC_HAS_IP6
  if (sa.sin6_family==AF_INET) {
    struct sockaddr_in *sa4=(struct sockaddr_in*)&sa;
    byte_copy(ip,12,V4mappedprefix);
    byte_copy(ip+12,4,(char *) &sa4->sin_addr);
    uint16_unpack_big((char *) &sa4->sin_port,port);
    return fd;
  }
  byte_copy(ip,16,(char *) &sa.sin6_addr);
  uint16_unpack_big((char *) &sa.sin6_port,port);
  if (scope_id) *scope_id=sa.sin6_scope_id;

  return fd;
#else
  byte_copy(ip,12,V4mappedprefix);
  byte_copy(ip+12,4,(char *) &sa.sin_addr);
  uint16_unpack_big((char *) &sa.sin_port,port);
  if (scope_id) *scope_id=0;
  return fd;
#endif
}
@


1.1
log
@Add DJBDNS port and UCSPI-TCP (dependant)

DJBDNS (http://cr.yp.to/djbdns.hml) is a Domain Name Server.
We have three flavours:
 - stable
	The original.
 - djbdns
 - djbdns6
	The versions with IPv6 RR support. djbdns handles
	queries via IPv4 and djbdns6 handles queries via
	IPv6, but does not include manual pages and other
	supplementary files.
@
text
@@

