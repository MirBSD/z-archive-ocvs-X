head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2003.06.13.18.15.31;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@add new djbdns ports
features:
 - one instead of three ports; selection done via FLAVOR
 - different flavours for ICANN, OpenNIC, ORSC and European-ORSN
   domain root servers (IPv4 and default only)
 -> the recent ICANN root name server move is integrated
 - Full integration (IPv6 only) of Felix von Leitners IPv6 patches
 - Partial integration (default only) of the IPv6 patches for
   IPv4 transport DNS servers
 -> http://www.fefe.de/dns/  patch revision: test19
 - consistent use of scripting, Makefile features and macroes
   leads to lean, readible port
 - tinydns installs to /usr/local/bin by default
 - home-grown diffs for more flexibility
 - all binaries are prefixed with a "6" (IPv6 transport only)
 - hand-edited diffs provide integral patch support
@
text
@#include <sys/param.h>
#include "sockaddr_in6.h"
#include "byte.h"
#include "socket.h"
#include "ip6.h"
#include "haveip6.h"
#include "error.h"

int socket_bind6(int s,const char ip[16],uint16 port,uint32 scope_id)
{
#ifdef LIBC_HAS_IP6
  struct sockaddr_in6 sa;

  if (noipv6) {
#endif
    int i;
    for (i=0; i<16; i++)
      if (ip[i]!=0) break;
    if (i==16 || ip6_isv4mapped(ip))
      return socket_bind4(s,ip+12,port);
#ifdef LIBC_HAS_IP6
  }
  byte_zero(&sa,sizeof sa);
  sa.sin6_family = AF_INET6;
  uint16_pack_big((char *) &sa.sin6_port,port);
/*  implicit: sa.sin6_flowinfo = 0; */
  byte_copy((char *) &sa.sin6_addr,16,ip);
  sa.sin6_scope_id=scope_id;

  return bind(s,(struct sockaddr *) &sa,sizeof sa);
#else
  errno=error_proto;
  return -1;
#endif
}

int socket_bind6_reuse(int s,const char ip[16],uint16 port,uint32 scope_id)
{
  int opt = 1;
  setsockopt(s,SOL_SOCKET,SO_REUSEADDR,&opt,sizeof opt);
  return socket_bind6(s,ip,port,scope_id);
}

@
