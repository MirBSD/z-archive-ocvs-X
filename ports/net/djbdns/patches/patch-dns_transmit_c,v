head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2003.06.13.18.15.31;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@add new djbdns ports
features:
 - one instead of three ports; selection done via FLAVOR
 - different flavours for ICANN, OpenNIC, ORSC and European-ORSN
   domain root servers (IPv4 and default only)
 -> the recent ICANN root name server move is integrated
 - Full integration (IPv6 only) of Felix von Leitners IPv6 patches
 - Partial integration (default only) of the IPv6 patches for
   IPv4 transport DNS servers
 -> http://www.fefe.de/dns/  patch revision: test19
 - consistent use of scripting, Makefile features and macroes
   leads to lean, readible port
 - tinydns installs to /usr/local/bin by default
 - home-grown diffs for more flexibility
 - all binaries are prefixed with a "6" (IPv6 transport only)
 - hand-edited diffs provide integral patch support
@
text
@$MirBSD$
--- dns_transmit.c.orig	Sun Feb 11 21:11:23 2001
+++ dns_transmit.c	Fri Jun 13 17:29:01 2003
@@@@ -7,6 +7,7 @@@@
 #include "byte.h"
 #include "uint16.h"
 #include "dns.h"
+#include "ip6.h"
 
 static int serverwantstcp(const char *buf,unsigned int len)
 {
@@@@ -85,9 +86,9 @@@@ static int randombind(struct dns_transmi
   int j;
 
   for (j = 0;j < 10;++j)
-    if (socket_bind4(d->s1 - 1,d->localip,1025 + dns_random(64510)) == 0)
+    if (socket_bind6(d->s1 - 1,d->localip,1025 + dns_random(64510),d->scope_id) == 0)
       return 0;
-  if (socket_bind4(d->s1 - 1,d->localip,0) == 0)
+  if (socket_bind6(d->s1 - 1,d->localip,0,d->scope_id) == 0)
     return 0;
   return -1;
 }
@@@@ -102,16 +103,16 @@@@ static int thisudp(struct dns_transmit *
 
   while (d->udploop < 4) {
     for (;d->curserver < 16;++d->curserver) {
-      ip = d->servers + 4 * d->curserver;
-      if (byte_diff(ip,4,"\0\0\0\0")) {
+      ip = d->servers + 16 * d->curserver;
+      if (byte_diff(ip,16,V6any)) {
 	d->query[2] = dns_random(256);
 	d->query[3] = dns_random(256);
   
-        d->s1 = 1 + socket_udp();
+        d->s1 = 1 + socket_udp6();
         if (!d->s1) { dns_transmit_free(d); return -1; }
 	if (randombind(d) == -1) { dns_transmit_free(d); return -1; }
 
-        if (socket_connect4(d->s1 - 1,ip,53) == 0)
+        if (socket_connect6(d->s1 - 1,ip,53,d->scope_id) == 0)
           if (send(d->s1 - 1,d->query + 2,d->querylen - 2,0) == d->querylen - 2) {
             struct taia now;
             taia_now(&now);
@@@@ -153,19 +154,19 @@@@ static int thistcp(struct dns_transmit *
   packetfree(d);
 
   for (;d->curserver < 16;++d->curserver) {
-    ip = d->servers + 4 * d->curserver;
-    if (byte_diff(ip,4,"\0\0\0\0")) {
+    ip = d->servers + 16 * d->curserver;
+    if (byte_diff(ip,16,V6any)) {
       d->query[2] = dns_random(256);
       d->query[3] = dns_random(256);
 
-      d->s1 = 1 + socket_tcp();
+      d->s1 = 1 + socket_tcp6();
       if (!d->s1) { dns_transmit_free(d); return -1; }
       if (randombind(d) == -1) { dns_transmit_free(d); return -1; }
   
       taia_now(&now);
       taia_uint(&d->deadline,10);
       taia_add(&d->deadline,&d->deadline,&now);
-      if (socket_connect4(d->s1 - 1,ip,53) == 0) {
+      if (socket_connect6(d->s1 - 1,ip,53,d->scope_id) == 0) {
         d->tcpstate = 2;
         return 0;
       }
@@@@ -193,7 +194,7 @@@@ static int nexttcp(struct dns_transmit *
   return thistcp(d);
 }
 
-int dns_transmit_start(struct dns_transmit *d,const char servers[64],int flagrecursive,const char *q,const char qtype[2],const char localip[4])
+int dns_transmit_start(struct dns_transmit *d,const char servers[256],int flagrecursive,const char *q,const char qtype[2],const char localip[16])
 {
   unsigned int len;
 
@@@@ -213,7 +214,7 @@@@ int dns_transmit_start(struct dns_transm
 
   byte_copy(d->qtype,2,qtype);
   d->servers = servers;
-  byte_copy(d->localip,4,localip);
+  byte_copy(d->localip,16,localip);
 
   d->udploop = flagrecursive ? 1 : 0;
 
@
