head	1.2;
access;
symbols
	MIRBSD_5:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3200:1.1.1.1
	ctm-3188:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.07.06.20.18.23;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.19.53.00;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.19.53.00;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@mop up
@
text
@Patch helping 64 bit cleanness taken from the Debian Linux package made
by Stéphane Bortmeyer <bortzmeyer@@debian.org>. 64 bit patch originally
by Bart Warmerdam <bartw@@xs4all.nl>.

Integrate previous OpenBSD patch using new libpcap types.

--- tcpip.c.orig	Tue Sep 22 22:35:43 1998
+++ tcpip.c	Wed Sep 29 14:43:06 1999
@@@@ -40,7 +40,7 @@@@
 typedef struct
   {
     struct in_addr addr;
-    unsigned long naddr;	/* netmask */
+    u_int32_t naddr;	/* netmask */
     interfacerec *iface;
   }
 routerec;
@@@@ -61,11 +61,11 @@@@
 #endif
 
 int sendsock, readsock;
-unsigned short ipident;
+u_int16_t ipident;
 
 /* This function will determine the checksum for a specific packet. Used by */
 /*  nearly EVERYTHING on the internet */
-unsigned short
+u_int16_t
 inet_checksum (void *addr, int len)
 {
   register int nleft = len;
@@@@ -106,16 +106,16 @@@@
   struct in_addr dest_address;
   unsigned char place_holder;
   unsigned char protocol;
-  unsigned short length;
+  u_int16_t length;
 } psuedohdr;
 
-unsigned short tcp_checksum(char *packet,
+u_int16_t tcp_checksum(char *packet,
                            int length,
                            struct in_addr source_address,
                            struct in_addr dest_address)
 {
   char *psuedo_packet;
-  unsigned short cksum;
+  u_int16_t cksum;
   
   psuedohdr.protocol = IPPROTO_TCP;
   psuedohdr.length = htons(length);
@@@@ -133,7 +133,7 @@@@
   memcpy((psuedo_packet + sizeof(psuedohdr)),
          packet,length);
   
-  cksum = inet_checksum((unsigned short *)psuedo_packet,(length + sizeof(psuedohdr)));
+  cksum = inet_checksum((u_int16_t *)psuedo_packet,(length + sizeof(psuedohdr)));
   free(psuedo_packet);
   return cksum;
 }
@@@@ -153,7 +153,7 @@@@
   memset (sa, 0, sizeof (struct sockaddr));
   sa->sin_family = AF_INET;
   sa->sin_addr.s_addr = inet_addr (host);
-  if ((long) inet_addr (host) == -1)
+  if ((int32_t) inet_addr (host) == -1)
     {
       ent = gethostbyname (host);
       if (ent != NULL)
@@@@ -173,7 +173,7 @@@@
 
 /* Sends a TCP packet */
 void
-sendtcp (spoofrec * spoof, unsigned short flags, short rep)
+sendtcp (spoofrec * spoof, u_int16_t flags, short rep)
 {
   struct tcphdr tcp;
   struct ip ip;
@@@@ -271,6 +271,7 @@@@
     switch(datalink) {
       case DLT_EN10MB:
         offset = 14; break;
+      case DLT_LOOP:
       case DLT_NULL:
       case DLT_PPP:
         offset =  4; break;
@@@@ -285,6 +286,8 @@@@
         offset =  8; break;
       case DLT_IEEE802:
         offset = 22; break;
+      case DLT_ENC:
+	offset = 12; break;
       default:
         fprintf(stderr, "unknown datalink type (%d)", datalink);
         return(0);
@@@@ -319,7 +322,7 @@@@
 /*-- Linux: Search out IP in Routing tables --*/
 /*-- Other: Return hostname ip ---------------*/
 struct in_addr
-getlocalip (unsigned long dest)
+getlocalip (u_int32_t dest)
 {
   static struct in_addr ina;
 #ifdef LINUX  /*---------------------------------------------- LINUX --*/
@@@@ -327,7 +330,7 @@@@
 
   for (i = 0; i < numroutes; i++)
     {
-      if ((dest & routes[i].naddr) == (unsigned long) routes[i].addr.s_addr)
+      if ((dest & routes[i].naddr) == (u_int32_t) routes[i].addr.s_addr)
         {
           return (routes[i].iface->addr);
         }
@@@@ -434,7 +437,7 @@@@
       else
         strcpy (iface, ptr);
       ptr = strtok (NULL, "\t ");       /* hack avoiding fscanf */
-      routes[i].addr.s_addr=(unsigned long)strtol(ptr,NULL,16);
+      routes[i].addr.s_addr=(u_int32_t)strtol(ptr,NULL,16);
       for (i1 = 0; i1 < 6; i1++)
         {
           ptr = strtok (NULL, "\t ");   /* ignore Gateway Flags RefCnt Use Metric */
@@@@ -443,7 +446,7 @@@@
         fputs ("Error parsing /proc/net/route\n", stderr);
         continue;
       }
-      routes[i].naddr=(unsigned long)strtol(ptr,NULL,16);   /* Netmask */
+      routes[i].naddr=(u_int32_t)strtol(ptr,NULL,16);   /* Netmask */
 
       found = 0;
       for (i1 = 0; i1 < numinterfaces; i1++)
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 ports repository from CTM 3132 the first time
This continues opening an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
