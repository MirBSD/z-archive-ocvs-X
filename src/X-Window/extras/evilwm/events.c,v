head	1.7;
access;
symbols
	tg-mergetmp-2:1.7
	MIRBSD_7quater:1.4
	evilwm_0_99_17:1.1.3.1
	MIRBSD_7_ALPHA:1.4.0.4
	MIRBSD_7:1.4.0.2
	MIRBSD_7ter:1.4
	evilwm_0_99_16:1.1.1.1
	evilwm_0_99_14:1.1.1.1
	tg:1.1.3
	MIRBSD_5:1.2
	MIRBSD_4:1.2;
locks; strict;
comment	@ * @;


1.7
date	2004.08.21.16.19.36;	author tg;	state Stab;
branches;
next	1.6;

1.6
date	2004.07.29.11.19.32;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.31.02.17.20;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.07.22.12.38;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.07.22.03.17;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.15.09.56.02;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.04.10.14.50.35;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.09.18.18.43.44;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2004.01.29.19.07.54;	author tg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@update to new-style licence template
@
text
@/**	$MirBSD: src/share/misc/licence.template,v 1.14 2004/08/15 15:29:11 tg Rel $ */

/*-
 * Copyright (c) 2003, 2004
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publically perform, modi-
 * fy, merge, distribute, sell, give away or sublicence, provided the
 * above copyright notices, these terms and the disclaimer are retai-
 * ned in all redistributions, or reproduced in accompanying documen-
 * tation or other materials provided with binary redistributions.
 *
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of covered work, even if advised of the possibility of such damage.
 */

/* evilwm - Minimalist Window Manager for X
 * Copyright (C) 1999-2002 Ciaran Anscomb <evilwm@@6809.org.uk>
 * see README for license and other details. */

#include "evilwm.h"
#include <stdlib.h>
#include <X11/Xatom.h>
#include <stdio.h>
#ifdef SHAPE
#include <X11/extensions/shape.h>
#endif

void handle_key_event(XKeyEvent *e) {
	Client *c = find_client(e->window);
	KeySym key = XKeycodeToKeysym(dpy,e->keycode,0);

	if (!c)
		c = current;
	if (c) {
		switch (key) {
		/* Sorry about all these if (0)s, but they actually
		 * *do* do something useful... */
		case KEY_LEFT:
			c->x -= 16; if (0)
		case KEY_DOWN:
			c->y += 16; if (0)
		case KEY_UP:
			c->y -= 16; if (0)
		case KEY_RIGHT:
			c->x += 16; if (0)
		case KEY_TOPLEFT:
			{ c->x = c->border; c->y = c->border; } if (0)
		case KEY_TOPRIGHT:
			{ c->x = DisplayWidth(dpy, c->screen->screen)-c->width-c->border; c->y = c->border; } if (0)
		case KEY_BOTTOMLEFT:
			{ c->x = c->border; c->y = DisplayHeight(dpy, c->screen->screen)-c->height-c->border; } if (0)
		case KEY_BOTTOMRIGHT:
			{ c->x = DisplayWidth(dpy, c->screen->screen)-c->width-c->border; c->y = DisplayHeight(dpy, c->screen->screen)-c->height-c->border; }
			move(c, 1);
			setmouse(c->window, c->width + c->border - 1,
					c->height + c->border - 1);
			break;
		case KEY_SLEFT:
			c->width -= c->size->width_inc; if (0)
		case KEY_SDOWN:
			c->height += c->size->height_inc; if (0)
		case KEY_SUP:
			c->height -= c->size->height_inc; if (0)
		case KEY_SRIGHT:
			c->width += c->size->width_inc;
			if (c->width < 1)
				c->width = 1;
			if (c->height < 1)
				c->height = 1;
			resize(c, 1);
			break;
		case KEY_KILL:
			send_wm_delete(c); break;
		case KEY_LOWER: case KEY_ALTLOWER:
			XLowerWindow(dpy, c->parent);
			break;
		case KEY_INFO:
			show_info(c, key);
			break;
		case KEY_MAX:
			maximise_horiz(c);
		case KEY_MAXVERT:
			maximise_vert(c);
			resize(c, 1);
			setmouse(c->window, c->width + c->border - 1,
					c->height + c->border - 1);
			break;
#ifdef VWM
		case KEY_FIX:
			c->vdesk = c->vdesk == STICKY ? vdesk : STICKY;
#ifdef VDESK_BOTH
			spawn_vdesk(c->vdesk, c);
#endif
			client_update_current(c, current);
			break;
#endif
		}
	}
	switch(key) {
		case KEY_NEW:
			spawn(opt_term); break;
		case KEY_NEXT:
			next();
			break;
#ifdef VWM
		case XK_1: case XK_2: case XK_3: case XK_4:
		case XK_5: case XK_6: case XK_7: case XK_8:
			switch_vdesk(KEY_TO_VDESK(key));
			break;
		case KEY_PREVDESK:
			if (vdesk > KEY_TO_VDESK(XK_1))
				switch_vdesk(vdesk - 1);
			break;
		case KEY_NEXTDESK:
			if (vdesk < KEY_TO_VDESK(XK_8))
				switch_vdesk(vdesk + 1);
			break;
#endif
		case KEY_EXITF:
			handle_signal(0);
			break; /* can't happen */
	}
}

#ifdef MOUSE
void handle_button_event(XButtonEvent *e) {
	Client *c = find_client(e->window);

	if (c && e->window != c->screen->root) {
		switch (e->button) {
			case Button1:
				move(c, 0); break;
			case Button2:
				resize(c, 0); break;
			case Button3:
				XLowerWindow(dpy, c->parent); break;
		}
	}
}
#endif

void handle_configure_request(XConfigureRequestEvent *e) {
	Client *c = find_client(e->window);
	XWindowChanges wc;

	wc.sibling = e->above;
	wc.stack_mode = e->detail;
	if (c) {
		ungravitate(c);
		if (e->value_mask & CWWidth) c->width = e->width;
		if (e->value_mask & CWHeight) c->height = e->height;
		if (e->value_mask & CWX) c->x = e->x;
		if (e->value_mask & CWY) c->y = e->y;
		if (c->x == 0 && c->width >= DisplayWidth(dpy, c->screen->screen)) {
			c->x -= c->border;
		}
		if (c->y == 0 && c->height >= DisplayHeight(dpy, c->screen->screen)) {
			c->y -= c->border;
		}
		gravitate(c);

		wc.x = c->x - c->border;
		wc.y = c->y - c->border;
		wc.width = c->width + (c->border*2);
		wc.height = c->height + (c->border*2);
		wc.border_width = 0;
		XConfigureWindow(dpy, c->parent, e->value_mask, &wc);
		send_config(c);
#ifdef DEBUG
		fprintf(stderr, "handle_configure_request() : window configured to %dx%d+%d+%d\n", wc.width, wc.height, wc.x, wc.y);
#endif
	}

	wc.x = c ? c->border : e->x;
	wc.y = c ? c->border : e->y;
	wc.width = e->width;
	wc.height = e->height;
	XConfigureWindow(dpy, e->window, e->value_mask, &wc);
}

void handle_map_request(XMapRequestEvent *e) {
	Client *c = find_client(e->window);

	if (c) {
#ifdef VWM
		if (c->vdesk != vdesk)
			switch_vdesk(c->vdesk);
#endif
		unhide(c, RAISE);
	} else {
		XWindowAttributes attr;
#ifdef DEBUG
		fprintf(stderr, "handle_map_request() : don't know this window, calling make_new_client();\n");
#endif
		XGetWindowAttributes(dpy, e->window, &attr);
		make_new_client(e->window, find_screen(attr.root));
	}
}

void handle_unmap_event(XUnmapEvent *e) {
	Client *c = find_client(e->window);

	if (c) {
#ifdef DEBUG
		/* fprintf(stderr, "handle_unmap_event() : ignore_unmap = %d\n", c->ignore_unmap);
		 * */
#endif
		if (c->ignore_unmap) c->ignore_unmap--;
		else remove_client(c);
	}
}

#ifdef VDESK
void handle_client_message(XClientMessageEvent *e) {
	Client *c = find_client(e->window);

	if (c && e->message_type == xa_wm_change_state &&
		e->format == 32 && e->data.l[0] == IconicState) hide(c);
}
#endif

#ifdef COLOURMAP
void handle_colormap_change(XColormapEvent *e) {
	Client *c = find_client(e->window);

	if (c && e->new) {
		c->cmap = e->colormap;
		XInstallColormap(dpy, c->cmap);
	}
}
#endif

void handle_property_change(XPropertyEvent *e) {
	Client *c = find_client(e->window);
	long dummy;

	if (c) {
		if (e->atom == XA_WM_NORMAL_HINTS)
				XGetWMNormalHints(dpy, c->window, c->size, &dummy);
	}
}

void handle_enter_event(XCrossingEvent *e) {
	Client *c;
#ifdef VWM
	int wdesk;
#endif

	current_screen = find_screen(e->root);
	/* if (e->window == root && !current) {
		XSetInputFocus(dpy, PointerRoot, RevertToPointerRoot, CurrentTime);
		return;
	} */
	if ((c = find_client(e->window))) {
#ifdef VWM
		wdesk = c->vdesk;
		if (wdesk != vdesk && wdesk != STICKY)
			return;
#endif
#ifdef COLOURMAP
		XInstallColormap(dpy, c->cmap);
#endif
		client_update_current(current, c);
		client_update_current(c, current);
		XSetInputFocus(dpy, c->window, RevertToPointerRoot, CurrentTime);
#ifdef MOUSE
		grab_button(c->parent, Mod1Mask, AnyButton);
#endif
	}
}

void handle_leave_event(XCrossingEvent *e) {
	/* if (e->window == root && !e->same_screen) {
		client_update_current(current, NULL);
	} */
}

#ifdef SHAPE
void handle_shape_event(XShapeEvent *e) {
	Client *c = find_client(e->window);
	if (c)
		set_shape(c);
}
#endif
@


1.6
log
@* use window's hints as the account to be resized by by default,
  not a fixed value of 16 (thanks to ciruz (Jonathan Schleifer) for
  mentioning this value exists)
* move check if hints are <1 to after all hints have been received
  from the X server and application (could have been overridden)
* don't let the user resize a window by keyboard to less than one
  (1) pixel width and height
* update licence template
* CFLAGS -> CPPFLAGS in Makefile, as usual
@
text
@d1 3
a3 2
/* $MirBSD: src/share/misc/licence.template,v 1.11 2004/05/28 15:34:01 tg Rel $
 *-
@


1.5
log
@* this time, make b-r for real
* including X-Window
* merge evilwm import
* install all .cf etc. files, especially the MirBSD.cf one
* cope in X for MirOS changes
* refine anoncvssh: all defines in Makefile, etc.
* cope for XFree86 1.1 licence
* merge nlist.c import
* nuke unused files
* remove warnings
* fix really bogus bug in rcdb again
* offer bsd.slim for installation
* fix the default route bug
* sync distrib stuff
(...)

thanks for alpha-testing to
 * Jannis "Kabelaffe" Konrad
 * José António "T0ni" "jesus_" Matias de Jesus
@
text
@d1 1
a1 1
/* $MirBSD: licence.template,v 1.8 2003/12/17 14:35:00 tg Exp $
d3 2
a4 2
 * Copyright (c) 2003
 *	Thorsten "mirabile" Glaser <x86@@ePost.de>
d6 6
a11 6
 * Subject to these terms, everybody who obtained a copy of this work
 * is hereby permitted to deal in the work without restriction inclu-
 * ding without limitation the rights to use, distribute, sell, modi-
 * fy, publically perform, give away, merge or sublicence it provided
 * this notice is kept and the authors and contributors are given due
 * credit in derivates or accompanying documents.
d13 7
a19 5
 * This work is provided "as is" with no explicit or implicit warran-
 * ties whatsoever to the maximum extent permitted by applicable law;
 * in no event may an author or contributor be held liable for damage
 * that is, directly or indirectly, caused by the work, even if advi-
 * sed of the possibility of such damage.
d65 1
a65 1
			c->width -= 16; if (0)
d67 1
a67 1
			c->height += 16; if (0)
d69 1
a69 1
			c->height -= 16; if (0)
d71 5
a75 1
			c->width += 16;
@


1.4
log
@implement QWER resizing (by 16, no error checking)
@
text
@d1 1
a1 1
/* $MirBSD: licence.template,v 1.4 2003/07/07 19:03:08 tg Exp $
d3 2
a4 1
 * Copyright (c) 2003 Thorsten Glaser <x86@@ePost.de>
d9 1
a9 1
 * fy, publically perform, give away, merge or sublicense it provided
d12 1
d14 1
a14 1
 * ties whatsoever to the maximum extend permitted by applicable law;
@


1.3
log
@update to evilwm 0.99.14
@
text
@d1 17
d59 10
@


1.2
log
@Provide a way to exit evilwm.

Since the switch to XFree86 4.3 I have been unable
to zap the X server with ctrl-alt-backspace for
unknown reason.
@
text
@d21 2
d34 1
a34 1
			{ c->x = DisplayWidth(dpy, screen)-c->width-c->border; c->y = c->border; } if (0)
d36 1
a36 1
			{ c->x = c->border; c->y = DisplayHeight(dpy, screen)-c->height-c->border; } if (0)
d38 1
a38 1
			{ c->x = DisplayWidth(dpy, screen)-c->width-c->border; c->y = DisplayHeight(dpy, screen)-c->height-c->border; }
d61 5
a65 4
			XSetWindowBackground(dpy, c->parent,
					RD_DESK(c) == STICKY ? fg.pixel : fc.pixel);
			XClearWindow(dpy, c->parent);
			WR_DESK(c, ( RD_DESK(c) == STICKY ? GET_VDESK : STICKY ) );
d72 1
a72 1
			spawn(opt_term ? opt_term : DEF_TERM); break;
d74 1
a74 1
			next(c);
d82 2
a83 2
			if (GET_VDESK > KEY_TO_VDESK(XK_1))
				switch_vdesk(GET_VDESK - 1);
d86 2
a87 2
			if (GET_VDESK < KEY_TO_VDESK(XK_8))
				switch_vdesk(GET_VDESK + 1);
d100 1
a100 1
	if (c && e->window != root) {
d123 4
a126 4
		if (e->value_mask & CWX) {
			c->x = e->x;
			if (c->x == 0 && c->width >= DisplayWidth(dpy, screen))
				c->x -= c->border;
d128 2
a129 4
		if (e->value_mask & CWY) {
			c->y = e->y;
			if (c->y == 0 && c->height >= DisplayHeight(dpy, screen))
				c->y -= c->border;
d140 3
d157 2
a158 2
		if (RD_DESK(c) != GET_VDESK)
			switch_vdesk(RD_DESK(c));
d162 1
d164 1
a164 1
		fprintf(stderr, "event:map->make_new_client(); ");
d166 2
a167 1
		make_new_client(e->window);
d176 2
a177 1
		fprintf(stderr, "EVENT: unmap, ignore_unmap = %d\n", c->ignore_unmap);
a210 10
#ifdef VDESK_BOTH
		/* Vdesk-hack. Evilwm does not use iconifying, so whenever
		* vdesk tries to set it's "iconifyed" flag we remove it again.
		* Vdesk assumes that if a window is not visible, but marked
		* as belonging to the current window, it sets a flag to
		* permanently mark that window as invisible. It works nicely
		* when vdesk does all the magic itself.
		*/
		if (e->atom == vdesk_desktop) fix_visibility_hack(c->window);
#endif
d215 1
d219 7
a225 2
	Client *c = find_client(e->window);
	if (c) {
d227 2
a228 2
		wdesk = RD_DESK(c);
		if (wdesk != GET_VDESK && wdesk != STICKY)
d234 2
a235 11
		if (current && c!=current) {
			XSetWindowBackground(dpy, current->parent, bg.pixel);
			XClearWindow(dpy, current->parent);
		}
#ifdef VWM
		XSetWindowBackground(dpy, c->parent, (wdesk==STICKY)?fc.pixel:fg.pixel);
#else
		XSetWindowBackground(dpy, c->parent, fg.pixel);
#endif
		XClearWindow(dpy, c->parent);
		current = c;
d238 1
a238 4
		XGrabButton(dpy, AnyButton, Mod1Mask, c->parent, False,
			ButtonMask, GrabModeAsync, GrabModeSync, None, None);
		XGrabButton(dpy, AnyButton, Mod3Mask|Mod1Mask, c->parent, False,
			ButtonMask, GrabModeAsync, GrabModeSync, None, None);
d241 6
@


1.1
log
@evilwm is a minimalist window manager for the X Window System.

Features:
* No window decorations apart from a simple 1 pixel border.
* No icons.
* Good keyboard control, including repositioning and maximise toggles.
* Solid window drags.
* Virtual desktops.
* Small binary size.

WWW: http://evilwm.sf.net/
@
text
@d87 3
@


1.1.3.1
log
@evilwm 0.99.17
@
text
@a20 2
		/* Sorry about all these if (0)s, but they actually
		 * *do* do something useful... */
d32 1
a32 1
			{ c->x = DisplayWidth(dpy, c->screen->screen)-c->width-c->border; c->y = c->border; } if (0)
d34 1
a34 1
			{ c->x = c->border; c->y = DisplayHeight(dpy, c->screen->screen)-c->height-c->border; } if (0)
d36 1
a36 1
			{ c->x = DisplayWidth(dpy, c->screen->screen)-c->width-c->border; c->y = DisplayHeight(dpy, c->screen->screen)-c->height-c->border; }
d59 4
a62 5
			c->vdesk = c->vdesk == STICKY ? vdesk : STICKY;
#ifdef VDESK_BOTH
			spawn_vdesk(c->vdesk, c);
#endif
			client_update_current(c, current);
d69 1
a69 1
			spawn(opt_term); break;
d71 1
a71 1
			next();
d79 2
a80 2
			if (vdesk > KEY_TO_VDESK(XK_1))
				switch_vdesk(vdesk - 1);
d83 2
a84 2
			if (vdesk < KEY_TO_VDESK(XK_8))
				switch_vdesk(vdesk + 1);
d94 1
a94 1
	if (c && e->window != c->screen->root) {
d117 4
a120 4
		if (e->value_mask & CWX) c->x = e->x;
		if (e->value_mask & CWY) c->y = e->y;
		if (c->x == 0 && c->width >= DisplayWidth(dpy, c->screen->screen)) {
			c->x -= c->border;
d122 4
a125 2
		if (c->y == 0 && c->height >= DisplayHeight(dpy, c->screen->screen)) {
			c->y -= c->border;
a135 3
#ifdef DEBUG
		fprintf(stderr, "handle_configure_request() : window configured to %dx%d+%d+%d\n", wc.width, wc.height, wc.x, wc.y);
#endif
d150 2
a151 2
		if (c->vdesk != vdesk)
			switch_vdesk(c->vdesk);
a154 1
		XWindowAttributes attr;
d156 1
a156 1
		fprintf(stderr, "handle_map_request() : don't know this window, calling make_new_client();\n");
d158 1
a158 2
		XGetWindowAttributes(dpy, e->window, &attr);
		make_new_client(e->window, find_screen(attr.root));
d167 1
a167 2
		/* fprintf(stderr, "handle_unmap_event() : ignore_unmap = %d\n", c->ignore_unmap);
		 * */
d201 10
a214 1
	Client *c;
d218 2
a219 7

	current_screen = find_screen(e->root);
	/* if (e->window == root && !current) {
		XSetInputFocus(dpy, PointerRoot, RevertToPointerRoot, CurrentTime);
		return;
	} */
	if ((c = find_client(e->window))) {
d221 2
a222 2
		wdesk = c->vdesk;
		if (wdesk != vdesk && wdesk != STICKY)
d228 11
a238 2
		client_update_current(current, c);
		client_update_current(c, current);
d241 4
a244 1
		grab_button(c->parent, Mod1Mask, AnyButton);
a246 6
}

void handle_leave_event(XCrossingEvent *e) {
	/* if (e->window == root && !e->same_screen) {
		client_update_current(current, NULL);
	} */
@


1.1.1.1
log
@Move evilwm 0.99.14 to a vendor branch, too. Facilitates easier updating.
@
text
@a20 2
		/* Sorry about all these if (0)s, but they actually
		 * *do* do something useful... */
d32 1
a32 1
			{ c->x = DisplayWidth(dpy, c->screen->screen)-c->width-c->border; c->y = c->border; } if (0)
d34 1
a34 1
			{ c->x = c->border; c->y = DisplayHeight(dpy, c->screen->screen)-c->height-c->border; } if (0)
d36 1
a36 1
			{ c->x = DisplayWidth(dpy, c->screen->screen)-c->width-c->border; c->y = DisplayHeight(dpy, c->screen->screen)-c->height-c->border; }
d59 4
a62 5
			c->vdesk = c->vdesk == STICKY ? vdesk : STICKY;
#ifdef VDESK_BOTH
			spawn_vdesk(c->vdesk, c);
#endif
			client_update_current(c, current);
d69 1
a69 1
			spawn(opt_term); break;
d71 1
a71 1
			next();
d79 2
a80 2
			if (vdesk > KEY_TO_VDESK(XK_1))
				switch_vdesk(vdesk - 1);
d83 2
a84 2
			if (vdesk < KEY_TO_VDESK(XK_8))
				switch_vdesk(vdesk + 1);
d94 1
a94 1
	if (c && e->window != c->screen->root) {
d117 4
a120 4
		if (e->value_mask & CWX) c->x = e->x;
		if (e->value_mask & CWY) c->y = e->y;
		if (c->x == 0 && c->width >= DisplayWidth(dpy, c->screen->screen)) {
			c->x -= c->border;
d122 4
a125 2
		if (c->y == 0 && c->height >= DisplayHeight(dpy, c->screen->screen)) {
			c->y -= c->border;
a135 3
#ifdef DEBUG
		fprintf(stderr, "handle_configure_request() : window configured to %dx%d+%d+%d\n", wc.width, wc.height, wc.x, wc.y);
#endif
d150 2
a151 2
		if (c->vdesk != vdesk)
			switch_vdesk(c->vdesk);
a154 1
		XWindowAttributes attr;
d156 1
a156 1
		fprintf(stderr, "handle_map_request() : don't know this window, calling make_new_client();\n");
d158 1
a158 2
		XGetWindowAttributes(dpy, e->window, &attr);
		make_new_client(e->window, find_screen(attr.root));
d167 1
a167 2
		/* fprintf(stderr, "handle_unmap_event() : ignore_unmap = %d\n", c->ignore_unmap);
		 * */
d201 10
a214 1
	Client *c;
d218 2
a219 7

	current_screen = find_screen(e->root);
	/* if (e->window == root && !current) {
		XSetInputFocus(dpy, PointerRoot, RevertToPointerRoot, CurrentTime);
		return;
	} */
	if ((c = find_client(e->window))) {
d221 2
a222 2
		wdesk = c->vdesk;
		if (wdesk != vdesk && wdesk != STICKY)
d228 11
a238 2
		client_update_current(current, c);
		client_update_current(c, current);
d241 4
a244 1
		grab_button(c->parent, Mod1Mask, AnyButton);
a246 6
}

void handle_leave_event(XCrossingEvent *e) {
	/* if (e->window == root && !e->same_screen) {
		client_update_current(current, NULL);
	} */
@


