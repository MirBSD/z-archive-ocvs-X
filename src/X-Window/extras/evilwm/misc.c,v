head	1.3;
access;
symbols
	tg-mergetmp-2:1.3
	MIRBSD_7quater:1.3
	evilwm_0_99_17:1.1.3.1
	MIRBSD_7_ALPHA:1.3.0.4
	MIRBSD_7:1.3.0.2
	MIRBSD_7ter:1.3
	evilwm_0_99_16:1.1.1.2
	evilwm_0_99_14:1.1.1.1
	tg:1.1.3
	MIRBSD_5:1.1
	MIRBSD_4:1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.09.18.19.20.21;	author tg;	state Stab;
branches;
next	1.2;

1.2
date	2003.07.07.22.03.17;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.04.10.14.50.36;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.09.18.18.43.41;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.09.18.19.11.33;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2004.01.29.19.07.51;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Upgrade evilwm to 0.99.16-mirbsd.

This work sponsored by: NetzLaden.org
@
text
@/* evilwm - Minimalist Window Manager for X
 * Copyright (C) 1999-2002 Ciaran Anscomb <evilwm@@6809.org.uk>
 * see README for license and other details. */

#include "evilwm.h"
#include <X11/Xproto.h>
#include <stdlib.h>
#include <stdarg.h>
#include <signal.h>
#include <sys/wait.h>
#include <unistd.h>
#include <stdio.h>

/* Now do this by fork()ing twice so we don't have to worry about SIGCHLDs */
void spawn(const char *const cmd[]) {
	pid_t pid;

	if (current_screen && current_screen->display)
		putenv(current_screen->display);
	if (!(pid = fork())) {
		setsid();
		switch (fork()) {
			/* explicitly hack around broken SUS execvp prototype */
			case 0: execvp(cmd[0], (char *const *)&cmd[1]);
			default: _exit(0);
		}
	}
	if (pid > 0)
		wait(NULL);
}

#ifdef VDESK_BOTH
void spawn_vdesk(int todesk, Client *c) {
	char *vdesk_cmd[5];
	char vdesk_num[2];
	char vdesk_window[11];

	vdesk_cmd[3] = vdesk_cmd[4] = NULL;
	vdesk_cmd[0] = "vdesk";
	vdesk_cmd[1] = "vdesk";
	vdesk_num[0] = todesk + '0';
	vdesk_num[1] = 0;
	vdesk_cmd[2] = vdesk_num;
	if (c) {
		snprintf(vdesk_window, sizeof(vdesk_window), "%ld", c->window);
		vdesk_cmd[3] = vdesk_window;
	}
	fprintf(stderr, "%s %s %s %s\n", vdesk_cmd[0], vdesk_cmd[1], vdesk_cmd[2], vdesk_cmd[3]);
	spawn(vdesk_cmd);
}
#endif

void handle_signal(int signo) {
	int i;
	/* SIGCHLD check no longer necessary */
	/* Quit Nicely */
	quitting = 1;
	while(head_client) remove_client(head_client);
	XSetInputFocus(dpy, PointerRoot, RevertToPointerRoot, CurrentTime);
	if (font) XFreeFont(dpy, font);
	for (i = 0; i < num_screens; i++) {
		XFreeGC(dpy, screens[i].invert_gc);
		XInstallColormap(dpy, DefaultColormap(dpy, screens[i].screen));
	}
	free(screens);
	XCloseDisplay(dpy);
	exit(0);
}

int handle_xerror(Display *dsply, XErrorEvent *e) {
	Client *c = find_client(e->resourceid);

	/* If this error actually occurred while setting up the new
	 * window, best let make_new_client() know not to bother */
	if (initialising != None && e->resourceid == initialising) {
#ifdef DEBUG
		fprintf(stderr, "\t **SAVED?** handle_xerror() caught error %d while initialising\n", e->error_code);
#endif
		initialising = None;
		return 0;
	}
#ifdef DEBUG
	fprintf(stderr, "**ERK** handle_xerror() caught an XErrorEvent: %d\n", e->error_code);
#endif
	/* if (e->error_code == BadAccess && e->resourceid == root) { */
	if (e->error_code == BadAccess && e->request_code == X_ChangeWindowAttributes) {
#ifdef STDIO
		fprintf(stderr, "root window unavailable (maybe another wm is running?)\n");
#endif
		exit(1);
	}
#ifdef XDEBUG
	fprintf(stderr, "XError %x ", e->error_code);
#endif
	/* Kludge around IE misbehaviour */
	if (e->error_code == 0x8 && e->request_code == 0x0c && e->minor_code == 0x00) {
#ifdef DEBUG
		fprintf(stderr, "\thandle_xerror() : IE kludge - ignoring XError\n");
#endif
		return 0;
	}

	if (c) {
#ifdef DEBUG
		fprintf(stderr, "\thandle_xerror() : calling remove_client()\n");
#endif
		remove_client(c);
	}
	return 0;
}

int ignore_xerror(Display *dsply, XErrorEvent *e) {
#ifdef DEBUG
	fprintf(stderr, "ignore_xerror() caught an XErrorEvent: %d\n", e->error_code);
#endif
	return 0;
}

#ifdef DEBUG
void dump_clients() {
	Client *c;

	for (c = head_client; c; c = c->next)
		fprintf(stderr, "MISC: (%d, %d) @@ %d,%d\n", wm_state(c),
			c->ignore_unmap, c->x, c->y);
}
#endif /* DEBUG */
@


1.2
log
@update to evilwm 0.99.14
@
text
@d15 1
a15 1
void spawn(char *cmd[]) {
d23 2
a24 1
			case 0: execvp(cmd[0], &cmd[1]);
d70 1
a70 1
int handle_xerror(Display *dpy, XErrorEvent *e) {
d95 1
a95 1
	/* Kludge aroung IE misbehaviour */
d112 1
a112 1
int ignore_xerror(Display *dpy, XErrorEvent *e) {
@


1.1
log
@evilwm is a minimalist window manager for the X Window System.

Features:
* No window decorations apart from a simple 1 pixel border.
* No icons.
* Good keyboard control, including repositioning and maximise toggles.
* Solid window drags.
* Virtual desktops.
* Small binary size.

WWW: http://evilwm.sf.net/
@
text
@d15 1
a15 1
void spawn(char *cmd) {
d17 3
d21 1
d23 1
a23 1
			case 0: execlp(cmd, cmd, NULL);
d31 21
d53 1
a58 2
	XInstallColormap(dpy, DefaultColormap(dpy, screen));
	XFreeGC(dpy, invert_gc);
d60 5
d72 12
d94 8
d103 2
a104 2
#ifdef XDEBUG
		fprintf(stderr, "(removing client)\n");
d112 3
a126 14

#ifdef SANITY
void sanity_check() {
	Client *c;
	int count = 0;

	for (c = head_client; c; c = c->next)
		count++;
	if (count != tracked_count) {
		fprintf(stderr, "misc:sanity_check() failed - should be %d clients, I count %d\n", tracked_count, count);
		exit(1);
	}
}
#endif /* SANITY */
@


1.1.3.1
log
@evilwm 0.99.17
@
text
@d15 1
a15 1
void spawn(const char *const cmd[]) {
a16 3

	if (current_screen && current_screen->display)
		putenv(current_screen->display);
a17 1
		setsid();
d19 1
a19 2
			/* explicitly hack around broken SUS execvp prototype */
			case 0: execvp(cmd[0], (char *const *)&cmd[1]);
a26 21
#ifdef VDESK_BOTH
void spawn_vdesk(int todesk, Client *c) {
	char *vdesk_cmd[5];
	char vdesk_num[2];
	char vdesk_window[11];

	vdesk_cmd[3] = vdesk_cmd[4] = NULL;
	vdesk_cmd[0] = "vdesk";
	vdesk_cmd[1] = "vdesk";
	vdesk_num[0] = todesk + '0';
	vdesk_num[1] = 0;
	vdesk_cmd[2] = vdesk_num;
	if (c) {
		snprintf(vdesk_window, sizeof(vdesk_window), "%ld", c->window);
		vdesk_cmd[3] = vdesk_window;
	}
	fprintf(stderr, "%s %s %s %s\n", vdesk_cmd[0], vdesk_cmd[1], vdesk_cmd[2], vdesk_cmd[3]);
	spawn(vdesk_cmd);
}
#endif

a27 1
	int i;
d33 2
a35 5
	for (i = 0; i < num_screens; i++) {
		XFreeGC(dpy, screens[i].invert_gc);
		XInstallColormap(dpy, DefaultColormap(dpy, screens[i].screen));
	}
	free(screens);
d40 1
a40 1
int handle_xerror(Display *dsply, XErrorEvent *e) {
a42 12
	/* If this error actually occurred while setting up the new
	 * window, best let make_new_client() know not to bother */
	if (initialising != None && e->resourceid == initialising) {
#ifdef DEBUG
		fprintf(stderr, "\t **SAVED?** handle_xerror() caught error %d while initialising\n", e->error_code);
#endif
		initialising = None;
		return 0;
	}
#ifdef DEBUG
	fprintf(stderr, "**ERK** handle_xerror() caught an XErrorEvent: %d\n", e->error_code);
#endif
a52 8
	/* Kludge around IE misbehaviour */
	if (e->error_code == 0x8 && e->request_code == 0x0c && e->minor_code == 0x00) {
#ifdef DEBUG
		fprintf(stderr, "\thandle_xerror() : IE kludge - ignoring XError\n");
#endif
		return 0;
	}

d54 2
a55 2
#ifdef DEBUG
		fprintf(stderr, "\thandle_xerror() : calling remove_client()\n");
d62 1
a62 4
int ignore_xerror(Display *dsply, XErrorEvent *e) {
#ifdef DEBUG
	fprintf(stderr, "ignore_xerror() caught an XErrorEvent: %d\n", e->error_code);
#endif
d75 14
@


1.1.1.1
log
@Move evilwm 0.99.14 to a vendor branch, too. Facilitates easier updating.
@
text
@d15 1
a15 1
void spawn(char *cmd[]) {
a16 3

	if (current_screen && current_screen->display)
		putenv(current_screen->display);
a17 1
		setsid();
d19 1
a19 1
			case 0: execvp(cmd[0], &cmd[1]);
a26 21
#ifdef VDESK_BOTH
void spawn_vdesk(int todesk, Client *c) {
	char *vdesk_cmd[5];
	char vdesk_num[2];
	char vdesk_window[11];

	vdesk_cmd[3] = vdesk_cmd[4] = NULL;
	vdesk_cmd[0] = "vdesk";
	vdesk_cmd[1] = "vdesk";
	vdesk_num[0] = todesk + '0';
	vdesk_num[1] = 0;
	vdesk_cmd[2] = vdesk_num;
	if (c) {
		snprintf(vdesk_window, sizeof(vdesk_window), "%ld", c->window);
		vdesk_cmd[3] = vdesk_window;
	}
	fprintf(stderr, "%s %s %s %s\n", vdesk_cmd[0], vdesk_cmd[1], vdesk_cmd[2], vdesk_cmd[3]);
	spawn(vdesk_cmd);
}
#endif

a27 1
	int i;
d33 2
a35 5
	for (i = 0; i < num_screens; i++) {
		XFreeGC(dpy, screens[i].invert_gc);
		XInstallColormap(dpy, DefaultColormap(dpy, screens[i].screen));
	}
	free(screens);
a42 12
	/* If this error actually occurred while setting up the new
	 * window, best let make_new_client() know not to bother */
	if (initialising != None && e->resourceid == initialising) {
#ifdef DEBUG
		fprintf(stderr, "\t **SAVED?** handle_xerror() caught error %d while initialising\n", e->error_code);
#endif
		initialising = None;
		return 0;
	}
#ifdef DEBUG
	fprintf(stderr, "**ERK** handle_xerror() caught an XErrorEvent: %d\n", e->error_code);
#endif
a52 8
	/* Kludge aroung IE misbehaviour */
	if (e->error_code == 0x8 && e->request_code == 0x0c && e->minor_code == 0x00) {
#ifdef DEBUG
		fprintf(stderr, "\thandle_xerror() : IE kludge - ignoring XError\n");
#endif
		return 0;
	}

d54 2
a55 2
#ifdef DEBUG
		fprintf(stderr, "\thandle_xerror() : calling remove_client()\n");
a62 3
#ifdef DEBUG
	fprintf(stderr, "ignore_xerror() caught an XErrorEvent: %d\n", e->error_code);
#endif
d75 14
@


1.1.1.2
log
@Update evilwm to release 0.99.16
@
text
@d15 1
a15 1
void spawn(const char *const cmd[]) {
d23 1
a23 2
			/* explicitly hack around broken SUS execvp prototype */
			case 0: execvp(cmd[0], (char *const *)&cmd[1]);
d69 1
a69 1
int handle_xerror(Display *dsply, XErrorEvent *e) {
d94 1
a94 1
	/* Kludge around IE misbehaviour */
d111 1
a111 1
int ignore_xerror(Display *dsply, XErrorEvent *e) {
@


