head	1.2;
access;
symbols
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2004.03.07.17.46.18;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.20.11.15;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.11.15;	author tg;	state Exp;
branches;
next	;

1.1.9.1
date	2004.02.14.19.29.56;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@pretty much merge these two directories. i have read the diffs.
@
text
@.\" $Xorg: README,v 1.3 2000/08/17 19:55:19 cpqbld Exp $

This library replaces the C library allocator;
providing malloc, free, realloc and calloc (sorry, no valloc)

In doing so, it provides extensive memory bug checking, locating:

	Lost memory; memory which has not been freed and which has no
	references

	In use free memory; memorhy which has been freed and still has
	references to it.

	Stores to freed memory

	free/realloc with invalid pointers -- if you pass in a pointer to
	the middle of an allocated block, it will even tell you which one

For each of these errors, a report entry is generated which includes
the stack backtrace of either the allocation or free (which ever occured
last) along with the current stack, when relevant.

Unreferenced allocated memory, stores to freed memory and referenced freed
memory are only caught when CheckMemory is called.  It is automatically
called each time 1m of data has been freed, and is called when the program
exits (by registering with atexit(3)/on_exit(3)).  You can call it whenever
you want.

Both the X server and font servers call CheckMemory after each reset when
their respective os/utils.c are compiled -DMEMBUG.

There are a few global variables you can set with the debugger to
help isolate problems:

	FindLeakWarnMiddlePointers
		Normally, memleak ignores pointers to the middle of
		freed memory.  These are frequently simply random data
		which happens to look like a pointer.  Turning this
		on will generate additional messages.
	FindLeakAllocBreakpoint
		At each allocation, memleak increments a serial number
		and stores it in the allocation header.  By rerunning
		the program, you can stop when that piece of memory
		is going to be allocated.  Store the serial number
		in this global variable and put a debugger breakpoint inside
		AddActiveBlock at the indicated line.
	FindLeakFreeBreakpoint
		Similarly for freeing memory.
	FindLeakTime
		The current serial number
	FindLeakCheckAlways
		When set, memleak checks the entire memory system after
		each allocation or free.  This is very expensive, but
		may catch errors not otherwise found until too late.

To include this in your application, simply place libmemleak.a before the
end of the link line; it will then override the C library allocator.

To port this system to a new machine, you must provide two values, one
indicating the lowest data address in a program and one indicating the
highest stack address.  In addition, to get return stack traces (which are
almost essential for debugging), you must provide the function
getReturnStack.  Samples for MIPS and SPARC are included already.

The output from the leak tracer includes only PC values in the stack
traces.  To convert these into useful values, run the output of
the leak tracer through the find-routines script; after making sure you have
built the modified version of gdb-4.4 on your machine.

-keith
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
