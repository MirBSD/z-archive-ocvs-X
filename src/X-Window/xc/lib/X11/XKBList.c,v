head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.04.36;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.04.36;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.18.01.47;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.18.43;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Xorg: XKBList.c,v 1.3 2000/08/17 19:45:02 cpqbld Exp $ */
/************************************************************
Copyright (c) 1995 by Silicon Graphics Computer Systems, Inc.

Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of Silicon Graphics not be 
used in advertising or publicity pertaining to distribution 
of the software without specific prior written permission.
Silicon Graphics makes no representation about the suitability 
of this software for any purpose. It is provided "as is"
without any express or implied warranty.

SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#define NEED_REPLIES
#define NEED_EVENTS
#define	NEED_MAP_READERS
#include "Xlibint.h"
#include <X11/extensions/XKBproto.h>
#include "XKBlibint.h"

/***====================================================================***/

static void
#if NeedFunctionPrototypes
_FreeComponentNames(int num,XkbComponentNamePtr names)
#else
_FreeComponentNames(num,names)
    int			num;
    XkbComponentNamePtr	names;
#endif
{
int			i;
XkbComponentNamePtr	tmp;

    if ((num<1)||(names==NULL))
	return;
    for (i=0,tmp=names;i<num;i++,tmp++) {
	if (tmp->name) {
	    _XkbFree(tmp->name);
	    tmp->name= NULL;
	}
    }
    _XkbFree(names);
    return;
}

/***====================================================================***/

static XkbComponentNamePtr
#if NeedFunctionPrototypes
_ReadListing(XkbReadBufferPtr buf,int count,Status *status_rtrn)
#else
_ReadListing(buf,count,status_rtrn)
    XkbReadBufferPtr	buf;
    int			count;
    Status *		status_rtrn;
#endif
{
XkbComponentNamePtr	first,this;
register int		i;
CARD16 *		flags;
int			slen,wlen;
char *			str;

    if (count<1)
	return NULL;
    first= _XkbTypedCalloc(count,XkbComponentNameRec);
    if (!first)
	return NULL;
    for (this=first,i=0;i<count;i++,this++) {
	flags= (CARD16 *)_XkbGetReadBufferPtr(buf,2*sizeof(CARD16));
	if (!flags)
	    goto BAILOUT;
	this->flags= 	flags[0];
	slen=		flags[1];
	wlen= 		((slen+1)/2)*2; /* pad to 2 byte boundary */
	this->name=	_XkbTypedCalloc(slen+1,char);
	if (!this->name)
	    goto BAILOUT;
	str= (char *)_XkbGetReadBufferPtr(buf,wlen);
	memcpy(this->name,str,slen);
    }
    return first;
BAILOUT:
    *status_rtrn= BadAlloc;
    _FreeComponentNames(i,first);
    return NULL;
}

/***====================================================================***/

XkbComponentListPtr
#if NeedFunctionPrototypes
XkbListComponents(	Display *		dpy,
			unsigned		deviceSpec,
			XkbComponentNamesPtr	ptrns,
			int *			max_inout)
#else
XkbListComponents(dpy,deviceSpec,ptrns,max_inout)
    Display *			dpy;
    unsigned			deviceSpec;
    XkbComponentNamesPtr	ptrns;
    int *			max_inout;
#endif
{
register xkbListComponentsReq*	req;
xkbListComponentsReply 		rep;
XkbInfoPtr 			xkbi;
XkbComponentListPtr		list;
XkbReadBufferRec		buf;
int				left;
char *				str;
int extraLen,len,mapLen,codesLen,typesLen,compatLen,symsLen,geomLen;

    if ( (dpy==NULL) || (dpy->flags & XlibDisplayNoXkb) ||
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)) ||
	(ptrns==NULL) || (max_inout==NULL))
	return NULL;

    xkbi= dpy->xkb_info;
    LockDisplay(dpy);
    GetReq(kbListComponents, req);
    req->reqType = 	xkbi->codes->major_opcode;
    req->xkbReqType = 	X_kbListComponents;
    req->deviceSpec = 	deviceSpec;
    req->maxNames =	*max_inout;

    mapLen= codesLen= typesLen= compatLen= symsLen= geomLen= 0;
    if (ptrns->keymap)
	mapLen= (int)strlen(ptrns->keymap);
    if (ptrns->keycodes)
	codesLen= (int)strlen(ptrns->keycodes);
    if (ptrns->types)
	typesLen= (int)strlen(ptrns->types);
    if (ptrns->compat)
	compatLen= (int)strlen(ptrns->compat);
    if (ptrns->symbols)
	symsLen= (int)strlen(ptrns->symbols);
    if (ptrns->geometry)
	geomLen= (int)strlen(ptrns->geometry);
    if (mapLen>255)	mapLen= 255;
    if (codesLen>255)	codesLen= 255;
    if (typesLen>255)	typesLen= 255;
    if (compatLen>255)	compatLen= 255;
    if (symsLen>255)	symsLen= 255;
    if (geomLen>255)	geomLen= 255;

    len= mapLen+codesLen+typesLen+compatLen+symsLen+geomLen+6;
    len= XkbPaddedSize(len);
    req->length+= len/4;
    BufAlloc(char *,str,len);
    *str++= mapLen;
    if (mapLen>0) {
	 memcpy(str,ptrns->keymap,mapLen);
	 str+= mapLen;
    }
    *str++= codesLen;
    if (codesLen>0) {
	 memcpy(str,ptrns->keycodes,codesLen);
	 str+= codesLen;
    }
    *str++= typesLen;
    if (typesLen>0) {
	 memcpy(str,ptrns->types,typesLen);
	 str+= typesLen;
    }
    *str++= compatLen;
    if (compatLen>0) {
	 memcpy(str,ptrns->compat,compatLen);
	 str+= compatLen;
    }
    *str++= symsLen;
    if (symsLen>0) {
	 memcpy(str,ptrns->symbols,symsLen);
	 str+= symsLen;
    }
    *str++= geomLen;
    if (geomLen>0) {
	 memcpy(str,ptrns->geometry,geomLen);
	 str+= geomLen;
    }
    if (!_XReply(dpy, (xReply *)&rep, 0, xFalse))
	goto BAILOUT;
    extraLen= (int)rep.length*4;
    *max_inout= rep.extra;
    if (extraLen==0) { /* no matches, but we don't want to report a failure */
	list= _XkbTypedCalloc(1,XkbComponentListRec);
	UnlockDisplay(dpy);
	SyncHandle();
	return list;
    }
    if (_XkbInitReadBuffer(dpy,&buf,extraLen)) {
	Status status;
	
	status= Success;
	list= _XkbTypedCalloc(1,XkbComponentListRec);
	if (!list) {
	    _XkbFreeReadBuffer(&buf);
	    goto BAILOUT;
	}
	list->num_keymaps= rep.nKeymaps;
	list->num_keycodes= rep.nKeycodes;
	list->num_types= rep.nTypes;
	list->num_compat= rep.nCompatMaps;
	list->num_symbols= rep.nSymbols;
	list->num_geometry= rep.nGeometries;
	if ((status==Success)&&(list->num_keymaps>0))
	    list->keymaps= _ReadListing(&buf,list->num_keymaps,&status);
	if ((status==Success)&&(list->num_keycodes>0))
	    list->keycodes= _ReadListing(&buf,list->num_keycodes,&status);
	if ((status==Success)&&(list->num_types>0))
	    list->types= _ReadListing(&buf,list->num_types,&status);
	if ((status==Success)&&(list->num_compat>0))
	    list->compat= _ReadListing(&buf,list->num_compat,&status);
	if ((status==Success)&&(list->num_symbols>0))
	    list->symbols= _ReadListing(&buf,list->num_symbols,&status);
	if ((status==Success)&&(list->num_geometry>0))
	    list->geometry= _ReadListing(&buf,list->num_geometry,&status);
	left= _XkbFreeReadBuffer(&buf);
	if ((status!=Success)||(buf.error)||(left>2)) {
	    XkbFreeComponentList(list);
	    goto BAILOUT;
	}
	UnlockDisplay(dpy);
	SyncHandle();
	return list;
    }
BAILOUT:
    UnlockDisplay(dpy);
    SyncHandle();
    return NULL;
}

void
#if NeedFunctionPrototypes
XkbFreeComponentList(XkbComponentListPtr list)
#else
XkbFreeComponentList(list)
    XkbComponentListPtr	list;
#endif
{
    if (list) {
	if (list->keymaps)
	    _FreeComponentNames(list->num_keymaps,list->keymaps);
	if (list->keycodes)
	    _FreeComponentNames(list->num_keycodes,list->keycodes);
	if (list->types)
	    _FreeComponentNames(list->num_types,list->types);
	if (list->compat)
	    _FreeComponentNames(list->num_compat,list->compat);
	if (list->symbols)
	    _FreeComponentNames(list->num_symbols,list->symbols);
	if (list->geometry)
	    _FreeComponentNames(list->num_geometry,list->geometry);
	bzero((char *)list,sizeof(XkbComponentListRec));
	_XkbFree(list);
    }
    return;
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@a26 1
/* $XFree86: xc/lib/X11/XKBList.c,v 1.2 2003/11/17 22:20:09 dawes Exp $ */
d38 1
d40 5
d64 1
d66 6
d107 1
d112 7
d249 1
d251 4
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@a26 1
/* $XFree86: xc/lib/X11/XKBList.c,v 1.2 2003/11/17 22:20:09 dawes Exp $ */
d38 1
d40 5
d64 1
d66 6
d107 1
d112 7
d249 1
d251 4
@

