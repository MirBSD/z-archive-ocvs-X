head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.04.28;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.04.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.31.50;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.18.00.22;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.18.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Xorg: CrGlCur.c,v 1.4 2001/02/09 02:03:32 xorgcvs Exp $ */
/*

Copyright 1986, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

*/
/* $XFree86: xc/lib/X11/CrGlCur.c,v 1.4 2001/12/14 19:53:59 dawes Exp $ */

#include "Xlibint.h"

Cursor XCreateGlyphCursor(dpy, source_font, mask_font,
		   source_char, mask_char,
		   foreground, background)
     register Display *dpy;
     Font source_font, mask_font;
     unsigned int source_char, mask_char;
     XColor _Xconst *foreground, *background;

{       
    Cursor cid;
    register xCreateGlyphCursorReq *req;

    LockDisplay(dpy);
    GetReq(CreateGlyphCursor, req);
    cid = req->cid = XAllocID(dpy);
    req->source = source_font;
    req->mask = mask_font;
    req->sourceChar = source_char;
    req->maskChar = mask_char;
    req->foreRed = foreground->red;
    req->foreGreen = foreground->green;
    req->foreBlue = foreground->blue;
    req->backRed = background->red;
    req->backGreen = background->green;
    req->backBlue = background->blue;
    UnlockDisplay(dpy);
    SyncHandle();
    return (cid);
}

@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d27 1
a27 1
/* $XFree86: xc/lib/X11/CrGlCur.c,v 1.8 2004/01/13 19:08:04 dawes Exp $ */
a30 189
#ifdef USE_DYNAMIC_XCURSOR

#ifdef __UNIXOS2__
#define RTLD_LAZY 1
#define LIBXCURSOR "Xcursor.dll"
#endif
#include <stdio.h>
#include <string.h>
#if defined(hpux)
#include <dl.h>
#else
#include <dlfcn.h>
#endif
#include "Cr.h"

#if defined(hpux)
typedef shl_dt	XModuleType;
#else
typedef void *XModuleType;
#endif

#ifndef LIBXCURSOR
#define LIBXCURSOR "libXcursor.so"
#endif

static char libraryName[] = LIBXCURSOR;

static XModuleType
open_library (void)
{
    char	*library = libraryName;
    char	*dot;
    XModuleType	module;
    for (;;)
    {
#if defined(hpux)
	module = shl_load(library, BIND_DEFERRED, 0L);
#else
	module =  dlopen(library, RTLD_LAZY);
#endif
	if (module)
	    return module;
	dot = strrchr (library, '.');
	if (!dot)
	    break;
	*dot = '\0';
    }
    return 0;
}

static void *
fetch_symbol (XModuleType module, char *under_symbol)
{
    void *result = NULL;
    char *symbol = under_symbol + 1;
#if defined(hpux)
    int getsyms_cnt, i;
    struct shl_symbol *symbols;
    
    getsyms_cnt = shl_getsymbols(module, TYPE_PROCEDURE,
				 EXPORT_SYMBOLS, malloc, &symbols);

    for(i=0; i<getsyms_cnt; i++) {
        if(!strcmp(symbols[i].name, symbol)) {
	    result = symbols[i].value;
	    break;
         }
    }

    if(getsyms_cnt > 0) {
        free(symbols);
    }
#else
    result = dlsym (module, symbol);
    if (!result)
	result = dlsym (module, under_symbol);
#endif
    return result;
}

typedef void	(*NoticeCreateBitmapFunc) (Display	    *dpy,
					   Pixmap	    pid,
					   unsigned int width,
					   unsigned int height);

typedef void	(*NoticePutBitmapFunc) (Display	    *dpy,
					Drawable    draw,
					XImage	    *image);

typedef Cursor	(*TryShapeBitmapCursorFunc) (Display	    *dpy,
					     Pixmap	    source,
					     Pixmap	    mask,
					     XColor	    *foreground,
					     XColor	    *background,
					     unsigned int   x,
					     unsigned int   y);

typedef Cursor	(*TryShapeCursorFunc) (Display	    *dpy,
				       Font	    source_font,
				       Font	    mask_font,
				       unsigned int source_char,
				       unsigned int mask_char,
				       XColor _Xconst *foreground,
				       XColor _Xconst *background);

static XModuleType  _XcursorModule;
static Bool	    _XcursorModuleTried;

#define GetFunc(type,name,ret) {\
    static Bool	    been_here; \
    static type	    staticFunc; \
     \
    _XLockMutex (_Xglobal_lock); \
    if (!been_here) \
    { \
	been_here = True; \
	if (!_XcursorModuleTried) \
	{ \
	    _XcursorModuleTried = True; \
	    _XcursorModule = open_library (); \
	} \
	if (_XcursorModule) \
	    staticFunc = (type) fetch_symbol (_XcursorModule, "_" name); \
    } \
    ret = staticFunc; \
    _XUnlockMutex (_Xglobal_lock); \
}

static Cursor
_XTryShapeCursor (Display	    *dpy,
		  Font		    source_font,
		  Font		    mask_font,
		  unsigned int	    source_char,
		  unsigned int	    mask_char,
		  XColor _Xconst    *foreground,
		  XColor _Xconst    *background)
{
    TryShapeCursorFunc		func;

    GetFunc (TryShapeCursorFunc, "XcursorTryShapeCursor", func);
    if (func)
	return (*func) (dpy, source_font, mask_font, source_char, mask_char,
			foreground, background);
    return None;
}

void
_XNoticeCreateBitmap (Display	    *dpy,
		      Pixmap	    pid,
		      unsigned int  width,
		      unsigned int  height)
{
    NoticeCreateBitmapFunc  func;

    GetFunc (NoticeCreateBitmapFunc, "XcursorNoticeCreateBitmap", func);
    if (func)
	(*func) (dpy, pid, width, height);
}

void
_XNoticePutBitmap (Display	*dpy,
		   Drawable	draw,
		   XImage	*image)
{
    NoticePutBitmapFunc	func;

    GetFunc (NoticePutBitmapFunc, "XcursorNoticePutBitmap", func);
    if (func)
	(*func) (dpy, draw, image);
}

Cursor
_XTryShapeBitmapCursor (Display		*dpy,
			Pixmap		source,
			Pixmap		mask,
			XColor		*foreground,
			XColor		*background,
			unsigned int	x,
			unsigned int	y)
{
    TryShapeBitmapCursorFunc	func;

    GetFunc (TryShapeBitmapCursorFunc, "XcursorTryShapeBitmapCursor", func);
    if (func)
	return (*func) (dpy, source, mask, foreground, background, x, y);
    return None;
}
#endif

a42 6
#ifdef USE_DYNAMIC_XCURSOR
    cid = _XTryShapeCursor (dpy, source_font, mask_font, 
			    source_char, mask_char, foreground, background);
    if (cid)
	return cid;
#endif
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d27 1
a27 1
/* $XFree86: xc/lib/X11/CrGlCur.c,v 1.6 2002/09/05 18:17:31 keithp Exp $ */
a30 184
#ifdef USE_DYNAMIC_XCURSOR

#include <stdio.h>
#include <string.h>
#if defined(hpux)
#include <dl.h>
#else
#include <dlfcn.h>
#endif

#if defined(hpux)
typedef shl_dt	XModuleType;
#else
typedef void *XModuleType;
#endif

#ifndef LIBXCURSOR
#define LIBXCURSOR "libXcursor.so"
#endif

static char libraryName[] = LIBXCURSOR;

static XModuleType
open_library (void)
{
    char	*library = libraryName;
    char	*dot;
    XModuleType	module;
    for (;;)
    {
#if defined(hpux)
	module = shl_load(library, BIND_DEFERRED, 0L);
#else
	module =  dlopen(library, RTLD_LAZY);
#endif
	if (module)
	    return module;
	dot = strrchr (library, '.');
	if (!dot)
	    break;
	*dot = '\0';
    }
    return 0;
}

static void *
fetch_symbol (XModuleType module, char *under_symbol)
{
    void *result = NULL;
    char *symbol = under_symbol + 1;
#if defined(hpux)
    int getsyms_cnt, i;
    struct shl_symbol *symbols;
    
    getsyms_cnt = shl_getsymbols(module, TYPE_PROCEDURE,
				 EXPORT_SYMBOLS, malloc, &symbols);

    for(i=0; i<getsyms_cnt; i++) {
        if(!strcmp(symbols[i].name, symbol)) {
	    result = symbols[i].value;
	    break;
         }
    }

    if(getsyms_cnt > 0) {
        free(symbols);
    }
#else
    result = dlsym (module, symbol);
    if (!result)
	result = dlsym (module, under_symbol);
#endif
    return result;
}

typedef void	(*NoticeCreateBitmapFunc) (Display	    *dpy,
					   Pixmap	    pid,
					   unsigned int width,
					   unsigned int height);

typedef void	(*NoticePutBitmapFunc) (Display	    *dpy,
					Drawable    draw,
					XImage	    *image);

typedef Cursor	(*TryShapeBitmapCursorFunc) (Display	    *dpy,
					     Pixmap	    source,
					     Pixmap	    mask,
					     XColor	    *foreground,
					     XColor	    *background,
					     unsigned int   x,
					     unsigned int   y);

typedef Cursor	(*TryShapeCursorFunc) (Display	    *dpy,
				       Font	    source_font,
				       Font	    mask_font,
				       unsigned int source_char,
				       unsigned int mask_char,
				       XColor _Xconst *foreground,
				       XColor _Xconst *background);

static XModuleType  _XcursorModule;
static Bool	    _XcursorModuleTried;

#define GetFunc(type,name,ret) {\
    static Bool	    been_here; \
    static type	    staticFunc; \
     \
    _XLockMutex (_Xglobal_lock); \
    if (!been_here) \
    { \
	been_here = True; \
	if (!_XcursorModuleTried) \
	{ \
	    _XcursorModuleTried = True; \
	    _XcursorModule = open_library (); \
	} \
	if (_XcursorModule) \
	    staticFunc = (type) fetch_symbol (_XcursorModule, "_" name); \
    } \
    ret = staticFunc; \
    _XUnlockMutex (_Xglobal_lock); \
}

Cursor
_XTryShapeCursor (Display	    *dpy,
		  Font		    source_font,
		  Font		    mask_font,
		  unsigned int	    source_char,
		  unsigned int	    mask_char,
		  XColor _Xconst    *foreground,
		  XColor _Xconst    *background)
{
    TryShapeCursorFunc		func;

    GetFunc (TryShapeCursorFunc, "XcursorTryShapeCursor", func);
    if (func)
	return (*func) (dpy, source_font, mask_font, source_char, mask_char,
			foreground, background);
    return None;
}

void
_XNoticeCreateBitmap (Display	    *dpy,
		      Pixmap	    pid,
		      unsigned int  width,
		      unsigned int  height)
{
    NoticeCreateBitmapFunc  func;

    GetFunc (NoticeCreateBitmapFunc, "XcursorNoticeCreateBitmap", func);
    if (func)
	(*func) (dpy, pid, width, height);
}

void
_XNoticePutBitmap (Display	*dpy,
		   Drawable	draw,
		   XImage	*image)
{
    NoticePutBitmapFunc	func;

    GetFunc (NoticePutBitmapFunc, "XcursorNoticePutBitmap", func);
    if (func)
	(*func) (dpy, draw, image);
}

Cursor
_XTryShapeBitmapCursor (Display		*dpy,
			Pixmap		source,
			Pixmap		mask,
			XColor		*foreground,
			XColor		*background,
			unsigned int	x,
			unsigned int	y)
{
    TryShapeBitmapCursorFunc	func;

    GetFunc (TryShapeBitmapCursorFunc, "XcursorTryShapeBitmapCursor", func);
    if (func)
	return (*func) (dpy, source, mask, foreground, background, x, y);
    return None;
}
#endif

a42 6
#ifdef USE_DYNAMIC_XCURSOR
    cid = _XTryShapeCursor (dpy, source_font, mask_font, 
			    source_char, mask_char, foreground, background);
    if (cid)
	return cid;
#endif
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d27 1
a27 1
/* $XFree86: xc/lib/X11/CrGlCur.c,v 1.8 2004/01/13 19:08:04 dawes Exp $ */
a32 4
#ifdef __UNIXOS2__
#define RTLD_LAZY 1
#define LIBXCURSOR "Xcursor.dll"
#endif
a39 1
#include "Cr.h"
d154 1
a154 1
static Cursor
@


