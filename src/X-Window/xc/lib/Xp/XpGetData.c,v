head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.04.57;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.04.57;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.32.41;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.19.31;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Xorg: XpGetData.c,v 1.4 2000/08/17 19:46:07 cpqbld Exp $ */
/******************************************************************************
 ******************************************************************************
 **
 ** (c) Copyright 1996 Hewlett-Packard Company
 ** (c) Copyright 1996 International Business Machines Corp.
 ** (c) Copyright 1996 Sun Microsystems, Inc.
 ** (c) Copyright 1996 Novell, Inc.
 ** (c) Copyright 1996 Digital Equipment Corp.
 ** (c) Copyright 1996 Fujitsu Limited
 ** (c) Copyright 1996 Hitachi, Ltd.
 ** 
 ** Permission is hereby granted, free of charge, to any person obtaining a copy
 ** of this software and associated documentation files (the "Software"), to deal
 ** in the Software without restriction, including without limitation the rights
 ** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 ** copies of the Software, and to permit persons to whom the Software is
 ** furnished to do so, subject to the following conditions:
 **
 ** The above copyright notice and this permission notice shall be included in
 ** all copies or substantial portions of the Software.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 ** COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 ** IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 ** CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 **
 ** Except as contained in this notice, the names of the copyright holders shall
 ** not be used in advertising or otherwise to promote the sale, use or other
 ** dealings in this Software without prior written authorization from said
 ** copyright holders.
 **
 ******************************************************************************
 *****************************************************************************/
/* $XFree86: xc/lib/Xp/XpGetData.c,v 1.4 2001/01/17 19:43:02 dawes Exp $ */

#define NEED_REPLIES

#include "Printstr.h"
#include "Xlibint.h"
#include "XpExtUtil.h"

#define MAX_XP_BUFFER_SIZE 32768

/*
 * At the tail of every async struct of ours is attached the
 * following "dev private" information needed by our async handler.
 */
typedef struct {
    XPContext       context;
    XPSaveProc      save_proc;
    XPFinishProc    finish_proc;
    XPointer        client_data;
    _XAsyncHandler  *async;
    unsigned long   seq;	/* sequence # that will trigger handler */
} _XpState;


/*
 * The following is the handler for async replies from
 * XpGetDocumentData().
 */
static Bool
_XpGetDocDataHandler(dpy, rep, buf, len, adata)
    register Display *dpy;
    register xReply *rep;
    char *buf;
    int len;
    XPointer adata;
{
    register _XpState            *state;
    xPrintGetDocumentDataReply   replbuf;
    xPrintGetDocumentDataReply   *repl;
    int dataLen;
    char *data;

    state = (_XpState *)adata;

    /*
     * Bypass this handler if the reply is NOT the one we're looking for.
     */
    if (dpy->last_request_read != state->seq) {
        return False;
    }

    /*
     * When an error occurs, call the finish_proc and then de-queue
     * this event handler.  Once an error occurs, all bets are off.
     * The error XPGetDocError is *not* the most descriptive, so the
     * caller will be encouraged to dig around for the corresponding
     * generated error.
     *
     * Note - Do not confuse the "generated" errors here with
     * XPGetDocSecondConsumer which is returned in a protocol reply.
     */
    if (rep->generic.type == X_Error) {
	(*state->finish_proc)(  (Display *) dpy,
				(XPContext) state->context,
				XPGetDocError,
				(XPointer) state->client_data );
        DeqAsyncHandler(dpy, state->async);
        Xfree(state->async);
        return False;
    }

    repl = (xPrintGetDocumentDataReply *)
        _XGetAsyncReply(dpy, (char *)&replbuf, rep, buf, len, 0, False);

    if (repl->dataLen) {
	/*
	 * Call save_proc in cases where there was document data
	 */

	dataLen = repl->length << 2;				/*with pad len*/

	data = (char *) _XAllocTemp( dpy, dataLen );

	_XGetAsyncData( dpy, (char *) data, buf, len,
			SIZEOF(xPrintGetDocumentDataReply), dataLen, 0);

	(*state->save_proc)( (Display *) dpy,
			     (XPContext) state->context,
			     (unsigned char *) data,
			     (unsigned int) repl->dataLen,	/* actual len */
			     (XPointer) state->client_data );

	_XFreeTemp( dpy, (char *) data, dataLen );
    }

    if (repl->finishedFlag) {
	/*
	 * Call finish_proc
	 */
	 (*state->finish_proc)( (Display *) dpy,
				(XPContext) state->context,
				(XPGetDocStatus) repl->statusCode,
				(XPointer) state->client_data );
	/*
	 * De-queue this async handler - we're done.
	 */
	DeqAsyncHandler( dpy, state->async );
	Xfree(state->async);
    }

    return True;	/* the reply WAS consumed by this handler */
}

/******************************************************************************
 *
 * XpGetDocumentData()
 *
 * ...registers callbacks to be triggered when async protocol replies
 * come back in response to the origial request.
 *
 * Returned Status indicate whether the callbacks will be used
 * (finish_proc and possibly save_proc), or whether they will
 * never be used.
 *
 */
Status
XpGetDocumentData (
    Display       *dpy,
    XPContext     context,
    XPSaveProc    save_proc,
    XPFinishProc  finish_proc,
    XPointer      client_data
)
{
    xPrintGetDocumentDataReq *req;
    XExtDisplayInfo *info = (XExtDisplayInfo *) xp_find_display (dpy);
    _XAsyncHandler *async;
    _XpState *async_state;


    if (XpCheckExtInit(dpy, XP_DONT_CHECK) == -1)
        return(0); /* No such extension */

    async = (_XAsyncHandler *)Xmalloc(sizeof(_XAsyncHandler) +
                                      sizeof(_XpState));
    if (!async)
	return(0); /* malloc error */
    async_state = (_XpState *)(async + 1);

    LockDisplay (dpy);

    GetReq(PrintGetDocumentData,req);
    req->reqType = info->codes->major_opcode;
    req->printReqType = X_PrintGetDocumentData;
    req->printContext = context;
    req->maxBufferSize = MAX_XP_BUFFER_SIZE;	/* use as a hint to X server */

    async_state->context     = context;
    async_state->save_proc   = save_proc;
    async_state->finish_proc = finish_proc;
    async_state->client_data = client_data;
    async_state->seq         = dpy->request;
    async_state->async       = async;

    async->next = dpy->async_handlers;
    async->handler = _XpGetDocDataHandler;
    async->data = (XPointer)async_state;

    dpy->async_handlers = async;

    UnlockDisplay(dpy);
    SyncHandle();

    return(1);		/* success at registering a handler */
}

@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d37 1
a37 1
/* $XFree86: xc/lib/Xp/XpGetData.c,v 1.5 2002/10/16 00:37:32 dawes Exp $ */
d41 2
a42 2
#include <X11/extensions/Printstr.h>
#include <X11/Xlibint.h>
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d37 1
a37 1
/* $XFree86: xc/lib/Xp/XpGetData.c,v 1.5 2002/10/16 00:37:32 dawes Exp $ */
d41 2
a42 2
#include <X11/extensions/Printstr.h>
#include <X11/Xlibint.h>
@

