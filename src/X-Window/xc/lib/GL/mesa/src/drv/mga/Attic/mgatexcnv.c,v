head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.2
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.03.02.20.11.35;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.20.04.16;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.20.04.16;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.31.31;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@semi-automatic merge and whitespace adjustment of OpenBSD XF4 subtree
@
text
@/* $XFree86: xc/lib/GL/mesa/src/drv/mga/mgatexcnv.c,v 1.2 2001/04/10 16:07:51 dawes Exp $ */
/*
 * Copyright 2000-2001 VA Linux Systems, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@valinux.com>
 */

#include <stdlib.h>
#include <stdio.h>

#include <GL/gl.h>

#include "mm.h"
#include "mgacontext.h"
#include "mgatex.h"


/*
 * mgaConvertTexture
 * Converts a mesa format texture to the apropriate hardware format
 * Note that sometimes width may be larger than the texture, like 64x1
 * for an 8x8 texture.  This happens when we have to crutch the pitch
 * limits of the mga by uploading a block of texels as a single line.
 */
void mgaConvertTexture( GLuint *destPtr, int texelBytes,
			struct gl_texture_image *image,
			int x, int y, int width, int height )
{
   register int		i, j;
   GLubyte		*src;
   int stride;

   if (0)
      fprintf(stderr, "texture image %p\n", image->Data);

   if (image->Data == 0)
      return;

   /* FIXME: g400 luminance_alpha internal format */
   switch (texelBytes) {
   case 1:
      switch (image->Format) {
      case GL_COLOR_INDEX:
      case GL_INTENSITY:
      case GL_LUMINANCE:
      case GL_ALPHA:
	 src = (GLubyte *)image->Data + ( y * image->Width + x );
	 stride = (image->Width - width);
	 for ( i = height ; i ; i-- ) {
	    for ( j = width >> 2  ; j ; j-- ) {

	       *destPtr++ = src[0] | ( src[1] << 8 ) | ( src[2] << 16 ) | ( src[3] << 24 );
	       src += 4;
	    }
	    src += stride;
	 }
	 break;
      default:
	 goto format_error;
      }
      break;
   case 2:
      switch (image->Format) {
      case GL_RGB:
	 src = (GLubyte *)image->Data + ( y * image->Width + x ) * 3;
	 stride = (image->Width - width) * 3;
	 for ( i = height ; i ; i-- ) {
	    for ( j = width >> 1  ; j ; j-- ) {

	       *destPtr++ = MGAPACKCOLOR565(src[0],src[1],src[2]) |
		  ( MGAPACKCOLOR565(src[3],src[4],src[5]) << 16 );
	       src += 6;
	    }
	    src += stride;
	 }
	 break;
      case GL_RGBA:
	 src = (GLubyte *)image->Data + ( y * image->Width + x ) * 4;
	 stride = (image->Width - width) * 4;
	 for ( i = height ; i ; i-- ) {
	    for ( j = width >> 1  ; j ; j-- ) {

	       *destPtr++ = MGAPACKCOLOR4444(src[0],src[1],src[2],src[3]) |
		  ( MGAPACKCOLOR4444(src[4],src[5],src[6],src[7]) << 16 );
	       src += 8;
	    }
	    src += stride;
	 }
	 break;
      case GL_LUMINANCE:
	 src = (GLubyte *)image->Data + ( y * image->Width + x );
	 stride = (image->Width - width);
	 for ( i = height ; i ; i-- ) {
	    for ( j = width >> 1  ; j ; j-- ) {
	       /* FIXME: should probably use 555 texture to get true grey */
	       *destPtr++ = MGAPACKCOLOR565(src[0],src[0],src[0]) |
		  ( MGAPACKCOLOR565(src[1],src[1],src[1]) << 16 );
	       src += 2;
	    }
	    src += stride;
	 }
	 break;
      case GL_INTENSITY:
	 src = (GLubyte *)image->Data + ( y * image->Width + x );
	 stride = (image->Width - width);
	 for ( i = height ; i ; i-- ) {
	    for ( j = width >> 1  ; j ; j-- ) {

	       *destPtr++ = MGAPACKCOLOR4444(src[0],src[0],src[0],src[0]) |
		  ( MGAPACKCOLOR4444(src[1],src[1],src[1],src[1]) << 16 );
	       src += 2;
	    }
	    src += stride;
	 }
	 break;
      case GL_ALPHA:
	 src = (GLubyte *)image->Data + ( y * image->Width + x );
	 stride = (image->Width - width);
	 for ( i = height ; i ; i-- ) {
	    for ( j = width >> 1  ; j ; j-- ) {

	       *destPtr++ = MGAPACKCOLOR4444(255,255,255,src[0]) |
		  ( MGAPACKCOLOR4444(255,255,255,src[1]) << 16 );
	       src += 2;
	    }
	    src += stride;
	 }
	 break;
      case GL_LUMINANCE_ALPHA:
	 src = (GLubyte *)image->Data + ( y * image->Width + x ) * 2;
	 stride = (image->Width - width) * 2;
	 for ( i = height ; i ; i-- ) {
	    for ( j = width >> 1  ; j ; j-- ) {

	       *destPtr++ = MGAPACKCOLOR4444(src[0],src[0],src[0],src[1]) |
		  ( MGAPACKCOLOR4444(src[2],src[2],src[2],src[3]) << 16 );
	       src += 4;
	    }
	    src += stride;
	 }
	 break;
      default:
	 goto format_error;
      }
      break;
   case 4:
      switch (image->Format) {
      case GL_RGB:
	 src = (GLubyte *)image->Data + (  y * image->Width + x ) * 3;
	 stride = (image->Width - width) * 3;
	 for ( i = height ; i ; i-- ) {
	    for ( j = width ; j ; j-- ) {

	       *destPtr++ = MGAPACKCOLOR8888(src[0],src[1],src[2], 255);
	       src += 3;
	    }
	    src += stride;
	 }
	 break;
      case GL_RGBA:
	 src = (GLubyte *)image->Data + (  y * image->Width + x ) * 4;
	 stride = (image->Width - width) * 4;
	 for ( i = height ; i ; i-- ) {
	    for ( j = width  ; j ; j-- ) {

	       *destPtr++ = MGAPACKCOLOR8888(src[0],src[1],src[2],src[3]);
	       src += 4;
	    }
	    src += stride;
	 }
	 break;
      case GL_LUMINANCE:
	 src = (GLubyte *)image->Data + ( y * image->Width + x );
	 stride = (image->Width - width);
	 for ( i = height ; i ; i-- ) {
	    for ( j = width ; j ; j-- ) {

	       *destPtr++ = MGAPACKCOLOR8888(src[0],src[0],src[0], 255);
	       src += 1;
	    }
	    src += stride;
	 }
	 break;
      case GL_INTENSITY:
	 src = (GLubyte *)image->Data + (  y * image->Width + x );
	 stride = (image->Width - width);
	 for ( i = height ; i ; i-- ) {
	    for ( j = width ; j ; j-- ) {

	       *destPtr++ = MGAPACKCOLOR8888(src[0],src[0],src[0],src[0]);
	       src += 1;
	    }
	    src += stride;
	 }
	 break;
      case GL_ALPHA:
	 src = (GLubyte *)image->Data + ( y * image->Width + x );
	 stride = (image->Width - width);
	 for ( i = height ; i ; i-- ) {
	    for ( j = width ; j ; j-- ) {

	       *destPtr++ = MGAPACKCOLOR8888(255,255,255,src[0]);
	       src += 1;
	    }
	    src += stride;
	 }
	 break;
      case GL_LUMINANCE_ALPHA:
	 src = (GLubyte *)image->Data + ( y * image->Width + x ) * 2;
	 stride = (image->Width - width) * 2;
	 for ( i = height ; i ; i-- ) {
	    for ( j = width ; j ; j-- ) {

	       *destPtr++ = MGAPACKCOLOR8888(src[0],src[0],
					     src[0],src[1]);
	       src += 2;
	    }
	    src += stride;
	 }
	 break;
      default:
	 goto format_error;
      }
      break;
   default:
      goto format_error;
   }

   return;

 format_error:

   fprintf(stderr, "Unsupported texelBytes %i, image->Format %i\n",
	   (int)texelBytes, (int)image->Format );
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d1 1
a1 1
/* $XFree86: xc/lib/GL/mesa/src/drv/mga/mgatexcnv.c,v 1.3 2002/10/30 12:51:36 alanh Exp $ */
d26 1
a26 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
@

