head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.04.08.18.31.20;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.31.20;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.57.58;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.17.48;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $XFree86: xc/lib/GL/mesa/src/drv/ffb/ffb_vbtmp.h,v 1.1 2002/02/22 21:32:59 dawes Exp $ */

static void TAG(emit)(GLcontext *ctx, GLuint start, GLuint end)
{
	ffbContextPtr fmesa = FFB_CONTEXT(ctx);
	struct vertex_buffer *VB = &TNL_CONTEXT(ctx)->vb;
#if (IND & (FFB_VB_RGBA_BIT))
	GLfloat (*col0)[4];
	GLuint col0_stride;
#if (IND & (FFB_VB_TWOSIDE_BIT))
	GLfloat (*col1)[4];
	GLuint col1_stride;
#endif
#endif
#if (IND & FFB_VB_XYZ_BIT)
	GLfloat (*proj)[4] = VB->ProjectedClipPtr->data;
	GLuint proj_stride = VB->ProjectedClipPtr->stride;
	const GLubyte *mask = VB->ClipMask;
#endif
	ffb_vertex *v = &fmesa->verts[start];
	int i;

#ifdef VB_DEBUG
	fprintf(stderr, "FFB: ffb_emit ["
#if (IND & (FFB_VB_XYZ_BIT))
		" XYZ"
#endif
#if (IND & (FFB_VB_RGBA_BIT))
		" RGBA"
#endif
#if (IND & (FFB_VB_TWOSIDE_BIT))
		" TWOSIDE"
#endif
		"] start(%d) end(%d) import(%d)\n",
		start, end,
		VB->importable_data);
#endif

#if (IND & (FFB_VB_RGBA_BIT))
	if (VB->ColorPtr[0]->Type != GL_FLOAT)
		ffbImportColors(fmesa, ctx, 0);
#if (IND & (FFB_VB_TWOSIDE_BIT))
	if (VB->ColorPtr[1]->Type != GL_FLOAT)
		ffbImportColors(fmesa, ctx, 1);
#endif
	col0 = (GLfloat (*)[4]) VB->ColorPtr[0]->Ptr;
	col0_stride = VB->ColorPtr[0]->StrideB;
#if (IND & (FFB_VB_TWOSIDE_BIT))
	col1 = (GLfloat (*)[4]) VB->ColorPtr[1]->Ptr;
	col1_stride = VB->ColorPtr[1]->StrideB;
#endif
#endif

	if (VB->importable_data) {
		if (start) {
#if (IND & (FFB_VB_XYZ_BIT))
			proj = (GLfloat (*)[4])((GLubyte *)proj + start * proj_stride);
#endif
#if (IND & (FFB_VB_RGBA_BIT))
			col0 = (GLfloat (*)[4])((GLubyte *)col0 + start * col0_stride);
#if (IND & (FFB_VB_TWOSIDE_BIT))
			col1 = (GLfloat (*)[4])((GLubyte *)col1 + start * col1_stride);
#endif
#endif
		}
		for (i = start; i < end; i++, v++) {
#if (IND & (FFB_VB_XYZ_BIT))
			if (mask[i] == 0) {
				v->x = proj[0][0];
				v->y = proj[0][1];
				v->z = proj[0][2];
			}
			proj = (GLfloat (*)[4])((GLubyte *)proj + proj_stride);
#endif
#if (IND & (FFB_VB_RGBA_BIT))
			v->color[0].alpha = CLAMP(col0[0][3], 0.0f, 1.0f);
			v->color[0].red   = CLAMP(col0[0][0], 0.0f, 1.0f);
			v->color[0].green = CLAMP(col0[0][1], 0.0f, 1.0f);
			v->color[0].blue  = CLAMP(col0[0][2], 0.0f, 1.0f);
			col0 = (GLfloat (*)[4])((GLubyte *)col0 + col0_stride);
#if (IND & (FFB_VB_TWOSIDE_BIT))
			v->color[1].alpha = CLAMP(col1[0][3], 0.0f, 1.0f);
			v->color[1].red   = CLAMP(col1[0][0], 0.0f, 1.0f);
			v->color[1].green = CLAMP(col1[0][1], 0.0f, 1.0f);
			v->color[1].blue  = CLAMP(col1[0][2], 0.0f, 1.0f);
			col1 = (GLfloat (*)[4])((GLubyte *)col1 + col1_stride);
#endif
#endif
		}
	} else {
		for (i = start; i < end; i++, v++) {
#if (IND & (FFB_VB_XYZ_BIT))
			if (mask[i] == 0) {
				v->x = proj[i][0];
				v->y = proj[i][1];
				v->z = proj[i][2];
			}
#endif
#if (IND & (FFB_VB_RGBA_BIT))
			v->color[0].alpha = CLAMP(col0[i][3], 0.0f, 1.0f);
			v->color[0].red   = CLAMP(col0[i][0], 0.0f, 1.0f);
			v->color[0].green = CLAMP(col0[i][1], 0.0f, 1.0f);
			v->color[0].blue  = CLAMP(col0[i][2], 0.0f, 1.0f);
#if (IND & (FFB_VB_TWOSIDE_BIT))
			v->color[1].alpha = CLAMP(col1[i][3], 0.0f, 1.0f);
			v->color[1].red   = CLAMP(col1[i][0], 0.0f, 1.0f);
			v->color[1].green = CLAMP(col1[i][1], 0.0f, 1.0f);
			v->color[1].blue  = CLAMP(col1[i][2], 0.0f, 1.0f);
#endif
#endif
		}
	}
}

static void TAG(interp)(GLcontext *ctx, GLfloat t,
			GLuint edst, GLuint eout, GLuint ein,
			GLboolean force_boundary)
{
#if (IND & (FFB_VB_XYZ_BIT | FFB_VB_RGBA_BIT))
	ffbContextPtr fmesa = FFB_CONTEXT(ctx);
#endif
#if (IND & (FFB_VB_XYZ_BIT))
	struct vertex_buffer *VB = &TNL_CONTEXT(ctx)->vb;
	const GLfloat *dstclip = VB->ClipPtr->data[edst];
	GLfloat oow = 1.0 / dstclip[3];
#endif
#if (IND & (FFB_VB_XYZ_BIT | FFB_VB_RGBA_BIT))
	ffb_vertex *dst = &fmesa->verts[edst];
#endif
#if (IND & (FFB_VB_RGBA_BIT))
	ffb_vertex *in = &fmesa->verts[eout];
	ffb_vertex *out = &fmesa->verts[ein];
#endif

#ifdef VB_DEBUG
	fprintf(stderr, "FFB: ffb_interp ["
#if (IND & (FFB_VB_XYZ_BIT))
		" XYZ"
#endif
#if (IND & (FFB_VB_RGBA_BIT))
		" RGBA"
#endif
#if (IND & (FFB_VB_TWOSIDE_BIT))
		" TWOSIDE"
#endif
		"] edst(%d) eout(%d) ein(%d)\n",
		edst, eout, ein);
#endif

#if (IND & (FFB_VB_XYZ_BIT))
	dst->x = dstclip[0] * oow;
	dst->y = dstclip[1] * oow;
	dst->z = dstclip[2] * oow;
#endif

#if (IND & (FFB_VB_RGBA_BIT))
	INTERP_F(t, dst->color[0].alpha, out->color[0].alpha, in->color[0].alpha);
	INTERP_F(t, dst->color[0].red,   out->color[0].red,   in->color[0].red);
	INTERP_F(t, dst->color[0].green, out->color[0].green, in->color[0].green);
	INTERP_F(t, dst->color[0].blue,  out->color[0].blue,  in->color[0].blue);
#if (IND & (FFB_VB_TWOSIDE_BIT))
	INTERP_F(t, dst->color[1].alpha, out->color[1].alpha, in->color[1].alpha);
	INTERP_F(t, dst->color[1].red,   out->color[1].red,   in->color[1].red);
	INTERP_F(t, dst->color[1].green, out->color[1].green, in->color[1].green);
	INTERP_F(t, dst->color[1].blue,  out->color[1].blue,  in->color[1].blue);
#endif
#endif
}

static void TAG(init)(void)
{
	setup_tab[IND].emit = TAG(emit);
	setup_tab[IND].interp = TAG(interp);
}

#undef IND
#undef TAG
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d1 1
a1 1
/* $XFree86: xc/lib/GL/mesa/src/drv/ffb/ffb_vbtmp.h,v 1.2 2003/09/28 20:15:08 alanh Exp $ */
d16 2
a17 2
	GLfloat (*proj)[4] = VB->NdcPtr->data;
	GLuint proj_stride = VB->NdcPtr->stride;
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d1 1
a1 1
/* $XFree86: xc/lib/GL/mesa/src/drv/ffb/ffb_vbtmp.h,v 1.2 2003/09/28 20:15:08 alanh Exp $ */
d16 2
a17 2
	GLfloat (*proj)[4] = VB->NdcPtr->data;
	GLuint proj_stride = VB->NdcPtr->stride;
@

