head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.04.11;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.04.11;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.31.20;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.17.47;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $XFree86: xc/lib/GL/mesa/src/drv/ffb/ffb_linetmp.h,v 1.1 2000/06/20 05:08:38 dawes Exp $ */

static void TAG(ffb_line)(GLcontext *ctx, GLuint e0, GLuint e1, GLuint pv)
{
	ffbContextPtr fmesa = FFB_CONTEXT(ctx);
	ffb_fbcPtr ffb = fmesa->regs;
	struct vertex_buffer *VB = ctx->VB;
	ffb_vertex *ffbVB = FFB_DRIVER_DATA(VB)->verts;
	const ffb_vertex *v0 = &ffbVB[e0];
	const ffb_vertex *v1 = &ffbVB[e1];
#if (IND & FFB_LINE_OFFSET_BIT)
	GLuint ffb_zoffset = FFB_Z_FROM_FLOAT(ctx->LineZoffset);
#endif
#if (IND & FFB_LINE_TWOSIDE_BIT)
	const int which_color = (VB->ColorPtr == VB->Color[0]) ? 0 : 1;
#else
	const int which_color = 0;
#endif
#if (IND & FFB_LINE_FLAT_BIT)
	const GLuint const_fg = (((GLuint)VB->Color[which_color]->data[pv][0] << 0) |
				 ((GLuint)VB->Color[which_color]->data[pv][1] << 8) |
				 ((GLuint)VB->Color[which_color]->data[pv][2] << 16) |
				 ((GLuint)VB->Color[which_color]->data[pv][3] << 24));
#endif

#if (IND & FFB_LINE_FLAT_BIT)
	FFBFifo(fmesa, 1);
	ffb->fg = const_fg;
#endif

#if !(IND & FFB_LINE_WIDE_BIT)
	/* We actually need to do the LINE_LOOP/LINE_STRIP optimization
	 * in this case so that the line pattern works out correctly.
	 * Really, Mesa should be fixed so it sends us the real primitive.
	 */
	if (v0 == fmesa->vtx_cache[1] &&
	    v1 != fmesa->vtx_cache[0]) {
#if (IND & FFB_LINE_FLAT_BIT)
		FFBFifo(fmesa, 3);
#else
#if (IND & FFB_LINE_ALPHA_BIT)
		FFBFifo(fmesa, 7);
#else
		FFBFifo(fmesa, 6);
#endif
#endif
#if !(IND & FFB_LINE_FLAT_BIT)
#if (IND & FFB_LINE_ALPHA_BIT)
		ffb->alpha	= v1->color[which_color].alpha;
#endif
		ffb->red	= v1->color[which_color].red;
		ffb->green	= v1->color[which_color].green;
		ffb->blue	= v1->color[which_color].blue;
#endif
#if (IND & FFB_LINE_OFFSET_BIT)
		ffb->z		= v1->z + ffb_zoffset;
#else
		ffb->z		= v1->z;
#endif
		ffb->y		= v1->y;
		ffb->x		= v1->x;

		fmesa->vtx_cache[0] = (void *)v0;
		fmesa->vtx_cache[1] = (void *)v1;
		fmesa->ffbScreen->rp_active = 1;
		return;
	} else {
		fmesa->vtx_cache[0] = (void *)v0;
		fmesa->vtx_cache[1] = (void *)v1;
	}
#endif

#if (IND & FFB_LINE_FLAT_BIT)
#if !(IND & FFB_LINE_WIDE_BIT)
	/* (2 * 3) + 1 */
	FFBFifo(fmesa, 7);
#else
	/* (4 * 3) */
	FFBFifo(fmesa, 12);
#endif
#else
#if !(IND & FFB_LINE_WIDE_BIT)
#if (IND & FFB_LINE_ALPHA_BIT)
	/* (2 * 7) + 1 */
	FFBFifo(fmesa, 15);
#else
	/* (2 * 6) + 1 */
	FFBFifo(fmesa, 13);
#endif
#else
#if (IND & FFB_LINE_ALPHA_BIT)
	/* (4 * 7) */
	FFBFifo(fmesa, 28);
#else
	/* (4 * 6) */
	FFBFifo(fmesa, 24);
#endif
#endif
#endif

#if !(IND & FFB_LINE_WIDE_BIT)
	/* Using DDLINE or AALINE, init the line pattern state. */
	ffb->lpat = fmesa->lpat;

#if !(IND & FFB_LINE_FLAT_BIT)
#if (IND & FFB_LINE_ALPHA_BIT)
	ffb->alpha	= v0->color[which_color].alpha;
#endif
	ffb->red	= v0->color[which_color].red;
	ffb->green	= v0->color[which_color].green;
	ffb->blue	= v0->color[which_color].blue;
#endif
#if (IND & FFB_LINE_OFFSET_BIT)
	ffb->z		= v0->z + ffb_zoffset;
#else
	ffb->z		= v0->z;
#endif
	ffb->ryf	= v0->y;
	ffb->rxf	= v0->x;

#if !(IND & FFB_LINE_FLAT_BIT)
#if (IND & FFB_LINE_ALPHA_BIT)
	ffb->alpha	= v1->color[which_color].alpha;
#endif
	ffb->red	= v1->color[which_color].red;
	ffb->green	= v1->color[which_color].green;
	ffb->blue	= v1->color[which_color].blue;
#endif
#if (IND & FFB_LINE_OFFSET_BIT)
	ffb->z		= v1->z + ffb_zoffset;
#else
	ffb->z		= v1->z;
#endif
	ffb->y		= v1->y;
	ffb->x		= v1->x;

#else /* FFB_LINE_WIDE_BIT */
	/* Doing wide lines via triangles. */
	{
		float width = ctx->Line.Width;
		float dx, dy;
		GLuint ix, iy;

		/* It might be possible to precalculate this stuff in
		 * our vertex-buffer code.  That code works with
		 * screen coordinates so it might work.  One problem
		 * could be that due to potentially drawing polygons
		 * as lines, it would be very difficult to really
		 * determine if the calculations were necessary or not.
		 */
		dx = VB->Win.data[e0][0] - VB->Win.data[e1][0];
		dy = VB->Win.data[e0][1] - VB->Win.data[e1][1];
		ix = FFB_COORD_FROM_FLOAT(width * 0.5f);
		iy = 0;
		if ((dx * dx) > (dy * dy)) {
			iy = ix;
			ix = 0;
		}

		/* The vertex sequence using isolated triangles would
		 * be:
		 *
		 *	Vertex0: line vertex0 - I	RXF/RYF
		 *	Vertex1: line vertex1 + I	DOXF/DOYF
		 *	Vertex2: line vertex0 + I	DOXF/DOYF
		 *	Vertex3: line vertex0 - I	RXF/RYF
		 *	Vertex4: line vertex1 - I	DOXF/DOYF
		 *	Vertex5: line vertex1 + I	DOXF/DOYF
		 *
		 * Using star chaining we can optimize this into a
		 * four vertex sequence, as follows:
		 *
		 *	Vertex0: line vertex0 - I	RXF/RYF
		 *	Vertex1: line vertex0 + I	DOXF/DOYF
		 *	Vertex2: line vertex1 + I	DOXF/DOYF
		 *	Vertex3: line vertex1 - I	DMXF/DMYF
		 *
		 * The DMXF/DMYF vertex means "replace middle vertex
		 * with new vertex and draw".
		 */

		/* Vertex0: line vertex0 - I, RXF/RYF */
#if !(IND & FFB_LINE_FLAT_BIT)
#if (IND & FFB_LINE_ALPHA_BIT)
		ffb->alpha	= v0->color[which_color].alpha;
#endif
		ffb->red	= v0->color[which_color].red;
		ffb->green	= v0->color[which_color].green;
		ffb->blue	= v0->color[which_color].blue;
#endif
#if (IND & FFB_LINE_OFFSET_BIT)
		ffb->z		= v0->z + ffb_zoffset;
#else
		ffb->z		= v0->z;
#endif
		ffb->ryf	= v0->y - iy;
		ffb->rxf	= v0->x - ix;

		/* Vertex1: line vertex0 + I, DOXF/DOYF */
#if !(IND & FFB_LINE_FLAT_BIT)
#if (IND & FFB_LINE_ALPHA_BIT)
		ffb->alpha	= v0->color[which_color].alpha;
#endif
		ffb->red	= v0->color[which_color].red;
		ffb->green	= v0->color[which_color].green;
		ffb->blue	= v0->color[which_color].blue;
#endif
#if (IND & FFB_LINE_OFFSET_BIT)
		ffb->z		= v0->z + ffb_zoffset;
#else
		ffb->z		= v0->z;
#endif
		ffb->y		= v0->y + iy;
		ffb->x		= v0->x + ix;

		/* Vertex2: line vertex1 + I, DOXF/DOYF */
#if !(IND & FFB_LINE_FLAT_BIT)
#if (IND & FFB_LINE_ALPHA_BIT)
		ffb->alpha	= v1->color[which_color].alpha;
#endif
		ffb->red	= v1->color[which_color].red;
		ffb->green	= v1->color[which_color].green;
		ffb->blue	= v1->color[which_color].blue;
#endif
#if (IND & FFB_LINE_OFFSET_BIT)
		ffb->z		= v1->z + ffb_zoffset;
#else
		ffb->z		= v1->z;
#endif
		ffb->y		= v1->y + iy;
		ffb->x		= v1->x + ix;

		/* Vertex3: line vertex1 - I, DMXF/DMYF */
#if !(IND & FFB_LINE_FLAT_BIT)
#if (IND & FFB_LINE_ALPHA_BIT)
		ffb->alpha	= v1->color[which_color].alpha;
#endif
		ffb->red	= v1->color[which_color].red;
		ffb->green	= v1->color[which_color].green;
		ffb->blue	= v1->color[which_color].blue;
#endif
#if (IND & FFB_LINE_OFFSET_BIT)
		ffb->z		= v1->z + ffb_zoffset;
#else
		ffb->z		= v1->z;
#endif
		ffb->dmyf	= v1->y - iy;
		ffb->dmxf	= v1->x - ix;
	}
#endif /* !(FFB_LINE_WIDE_BIT) */

	fmesa->ffbScreen->rp_active = 1;
}

static void TAG(init)(void)
{
	ffb_line_tab[IND] = TAG(ffb_line);
}

#undef IND
#undef TAG
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d1 1
a1 1
/* $XFree86: xc/lib/GL/mesa/src/drv/ffb/ffb_linetmp.h,v 1.2 2002/02/22 21:32:58 dawes Exp $ */
d3 1
a3 2
static __inline void TAG(ffb_line)(GLcontext *ctx, ffb_vertex *v0, 
				   ffb_vertex *v1 )
d7 12
d20 4
a23 1
	const GLuint const_fg = FFB_PACK_CONST_UBYTE_ARGB_COLOR( v1->color[0] );
a24 1
	FFB_DELAYED_VIEWPORT_VARS;
a25 2
#ifdef FFB_LINE_TRACE
	fprintf(stderr, "FFB: ffb_line ["
d27 2
a28 1
		" FLAT"
d30 11
d42 4
a45 1
		" ALPHA"
d47 12
a58 1
		" ]\n");
d60 2
d63 8
a70 6
#if (IND & FFB_LINE_FLAT_BIT)
	FFBFifo(fmesa, 1);
	ffb->fg = const_fg;
#ifdef FFB_LINE_TRACE
	fprintf(stderr, "FFB: ffb_line confg_fg[%08x]\n", const_fg);
#endif
d74 1
d78 5
d90 9
d101 1
d107 1
a107 1
	ffb->alpha	= FFB_GET_ALPHA(v0);
d109 3
a111 3
	ffb->red	= FFB_GET_RED(v0);
	ffb->green	= FFB_GET_GREEN(v0);
	ffb->blue	= FFB_GET_BLUE(v0);
d113 7
a119 3
	ffb->z		= FFB_GET_Z(v0);
	ffb->ryf	= FFB_GET_Y(v0);
	ffb->rxf	= FFB_GET_X(v0);
d123 5
a127 1
	ffb->alpha	= FFB_GET_ALPHA(v1);
d129 117
a245 3
	ffb->red	= FFB_GET_RED(v1);
	ffb->green	= FFB_GET_GREEN(v1);
	ffb->blue	= FFB_GET_BLUE(v1);
d247 4
a250 3
	ffb->z		= FFB_GET_Z(v1);
	ffb->y		= FFB_GET_Y(v1);
	ffb->x		= FFB_GET_X(v1);
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d1 1
a1 1
/* $XFree86: xc/lib/GL/mesa/src/drv/ffb/ffb_linetmp.h,v 1.2 2002/02/22 21:32:58 dawes Exp $ */
d3 1
a3 2
static __inline void TAG(ffb_line)(GLcontext *ctx, ffb_vertex *v0, 
				   ffb_vertex *v1 )
d7 12
d20 4
a23 1
	const GLuint const_fg = FFB_PACK_CONST_UBYTE_ARGB_COLOR( v1->color[0] );
a24 1
	FFB_DELAYED_VIEWPORT_VARS;
a25 2
#ifdef FFB_LINE_TRACE
	fprintf(stderr, "FFB: ffb_line ["
d27 2
a28 1
		" FLAT"
d30 11
d42 4
a45 1
		" ALPHA"
d47 12
a58 1
		" ]\n");
d60 2
d63 8
a70 6
#if (IND & FFB_LINE_FLAT_BIT)
	FFBFifo(fmesa, 1);
	ffb->fg = const_fg;
#ifdef FFB_LINE_TRACE
	fprintf(stderr, "FFB: ffb_line confg_fg[%08x]\n", const_fg);
#endif
d74 1
d78 5
d90 9
d101 1
d107 1
a107 1
	ffb->alpha	= FFB_GET_ALPHA(v0);
d109 3
a111 3
	ffb->red	= FFB_GET_RED(v0);
	ffb->green	= FFB_GET_GREEN(v0);
	ffb->blue	= FFB_GET_BLUE(v0);
d113 7
a119 3
	ffb->z		= FFB_GET_Z(v0);
	ffb->ryf	= FFB_GET_Y(v0);
	ffb->rxf	= FFB_GET_X(v0);
d123 5
a127 1
	ffb->alpha	= FFB_GET_ALPHA(v1);
d129 117
a245 3
	ffb->red	= FFB_GET_RED(v1);
	ffb->green	= FFB_GET_GREEN(v1);
	ffb->blue	= FFB_GET_BLUE(v1);
d247 4
a250 3
	ffb->z		= FFB_GET_Z(v1);
	ffb->y		= FFB_GET_Y(v1);
	ffb->x		= FFB_GET_X(v1);
@

