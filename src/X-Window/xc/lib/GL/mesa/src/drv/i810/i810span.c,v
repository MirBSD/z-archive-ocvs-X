head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.04.16;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.04.16;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.31.25;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.17.58.14;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.17.53;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include "types.h"
#include "i810dd.h"
#include "i810log.h"
#include "i810span.h"
#include "i810ioctl.h"


#define DBG 0

#define LOCAL_VARS					\
   __DRIdrawablePrivate *dPriv = imesa->driDrawable;	\
   i810ScreenPrivate *i810Screen = imesa->i810Screen;	\
   GLuint pitch = i810Screen->backPitch;		\
   GLuint height = dPriv->h;				\
   char *buf = (char *)(imesa->drawMap +		\
			dPriv->x * 2 +			\
			dPriv->y * pitch);		\
   char *read_buf = (char *)(imesa->readMap +		\
			     dPriv->x * 2 +		\
			     dPriv->y * pitch); 	\
   GLushort p = I810_CONTEXT( ctx )->MonoColor;         \
   (void) read_buf; (void) buf; (void) p

#define LOCAL_DEPTH_VARS				\
   __DRIdrawablePrivate *dPriv = imesa->driDrawable;	\
   i810ScreenPrivate *i810Screen = imesa->i810Screen;	\
   GLuint pitch = i810Screen->backPitch;		\
   GLuint height = dPriv->h;				\
   char *buf = (char *)(i810Screen->depth.map +	\
			dPriv->x * 2 +			\
			dPriv->y * pitch)

#define INIT_MONO_PIXEL(p)

#define CLIPPIXEL(_x,_y) (_x >= minx && _x < maxx && \
			  _y >= miny && _y < maxy)


#define CLIPSPAN( _x, _y, _n, _x1, _n1, _i )				\
   if ( _y < miny || _y >= maxy ) {					\
      _n1 = 0, _x1 = x;							\
   } else {								\
      _n1 = _n;								\
      _x1 = _x;								\
      if ( _x1 < minx ) _i += (minx-_x1), n1 -= (minx-_x1), _x1 = minx; \
      if ( _x1 + _n1 >= maxx ) n1 -= (_x1 + n1 - maxx);		        \
   }

#define Y_FLIP(_y) (height - _y - 1)

#define HW_LOCK()				\
   i810ContextPtr imesa = I810_CONTEXT(ctx);	\
   FLUSH_BATCH(imesa);				\
   i810DmaFinish(imesa);			\
   LOCK_HARDWARE_QUIESCENT(imesa);

#define HW_CLIPLOOP()						\
  do {								\
    __DRIdrawablePrivate *dPriv = imesa->driDrawable;		\
    int _nc = dPriv->numClipRects;				\
    while (_nc--) {						\
       int minx = dPriv->pClipRects[_nc].x1 - dPriv->x;		\
       int miny = dPriv->pClipRects[_nc].y1 - dPriv->y; 	\
       int maxx = dPriv->pClipRects[_nc].x2 - dPriv->x;		\
       int maxy = dPriv->pClipRects[_nc].y2 - dPriv->y;


#define HW_ENDCLIPLOOP()			\
    }						\
  } while (0)

#define HW_UNLOCK()				\
    UNLOCK_HARDWARE(imesa);




/* 16 bit, 565 rgb color spanline and pixel functions
 */
#define WRITE_RGBA( _x, _y, r, g, b, a )				\
   *(GLushort *)(buf + _x*2 + _y*pitch)  = ( (((int)r & 0xf8) << 8) |	\
		                             (((int)g & 0xfc) << 3) |	\
		                             (((int)b & 0xf8) >> 3))
#define WRITE_PIXEL( _x, _y, p )  \
   *(GLushort *)(buf + _x*2 + _y*pitch) = p

#define READ_RGBA( rgba, _x, _y )				\
do {								\
   GLushort p = *(GLushort *)(read_buf + _x*2 + _y*pitch);	\
   rgba[0] = (((p >> 11) & 0x1f) * 255) / 31;			\
   rgba[1] = (((p >>  5) & 0x3f) * 255) / 63;			\
   rgba[2] = (((p >>  0) & 0x1f) * 255) / 31;			\
   rgba[3] = 255;						\
} while(0)

#define TAG(x) i810##x##_565
#include "spantmp.h"




/* 15 bit, 555 rgb color spanline and pixel functions
 */
#define WRITE_RGBA( _x, _y, r, g, b, a )			\
   *(GLushort *)(buf + _x*2 + _y*pitch)  = (((r & 0xf8) << 7) |	\
		                            ((g & 0xf8) << 3) |	\
                         		    ((b & 0xf8) >> 3))

#define WRITE_PIXEL( _x, _y, p )  \
   *(GLushort *)(buf + _x*2 + _y*pitch)  = p

#define READ_RGBA( rgba, _x, _y )				\
do {								\
   GLushort p = *(GLushort *)(read_buf + _x*2 + _y*pitch);	\
   rgba[0] = (p >> 7) & 0xf8;					\
   rgba[1] = (p >> 3) & 0xf8;					\
   rgba[2] = (p << 3) & 0xf8;					\
   rgba[3] = 255;						\
} while(0)

#define TAG(x) i810##x##_555
#include "spantmp.h"




/* 16 bit depthbuffer functions.
 */
#define WRITE_DEPTH( _x, _y, d ) \
   *(GLushort *)(buf + _x*2 + _y*pitch)  = d;

#define READ_DEPTH( d, _x, _y )	\
   d = *(GLushort *)(buf + _x*2 + _y*pitch);

/*     d = 0xffff; */

#define TAG(x) i810##x##_16
#include "depthtmp.h"



void i810DDInitSpanFuncs( GLcontext *ctx )
{
   if (1) {
      ctx->Driver.WriteRGBASpan = i810WriteRGBASpan_565;
      ctx->Driver.WriteRGBSpan = i810WriteRGBSpan_565;
      ctx->Driver.WriteMonoRGBASpan = i810WriteMonoRGBASpan_565;
      ctx->Driver.WriteRGBAPixels = i810WriteRGBAPixels_565;
      ctx->Driver.WriteMonoRGBAPixels = i810WriteMonoRGBAPixels_565;
      ctx->Driver.ReadRGBASpan = i810ReadRGBASpan_565;
      ctx->Driver.ReadRGBAPixels = i810ReadRGBAPixels_565;
   } else {
      ctx->Driver.WriteRGBASpan = i810WriteRGBASpan_555;
      ctx->Driver.WriteRGBSpan = i810WriteRGBSpan_555;
      ctx->Driver.WriteMonoRGBASpan = i810WriteMonoRGBASpan_555;
      ctx->Driver.WriteRGBAPixels = i810WriteRGBAPixels_555;
      ctx->Driver.WriteMonoRGBAPixels = i810WriteMonoRGBAPixels_555;
      ctx->Driver.ReadRGBASpan = i810ReadRGBASpan_555;
      ctx->Driver.ReadRGBAPixels = i810ReadRGBAPixels_555;
   }

   ctx->Driver.ReadDepthSpan = i810ReadDepthSpan_16;
   ctx->Driver.WriteDepthSpan = i810WriteDepthSpan_16;
   ctx->Driver.ReadDepthPixels = i810ReadDepthPixels_16;
   ctx->Driver.WriteDepthPixels = i810WriteDepthPixels_16;

   ctx->Driver.WriteCI8Span        =NULL;
   ctx->Driver.WriteCI32Span       =NULL;
   ctx->Driver.WriteMonoCISpan     =NULL;
   ctx->Driver.WriteCI32Pixels     =NULL;
   ctx->Driver.WriteMonoCIPixels   =NULL;
   ctx->Driver.ReadCI32Span        =NULL;
   ctx->Driver.ReadCI32Pixels      =NULL;
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d1 3
a3 8
#include "glheader.h"
#include "macros.h"
#include "mtypes.h"
#include "colormac.h"

#include "i810screen.h"
#include "i810_dri.h"

a5 1
#include "swrast/swrast.h"
a14 1
   GLushort p;						\
d20 2
a21 1
			     dPriv->y * pitch);		\
d33 1
a33 2
#define INIT_MONO_PIXEL(p, color) \
   p = PACK_COLOR_565( color[0], color[1], color[2] )
d53 1
a53 1
   I810_FIREVERTICES(imesa);			\
d87 7
a93 7
#define READ_RGBA( rgba, _x, _y )					\
do {									\
   GLushort p = *(GLushort *)(read_buf + _x*2 + _y*pitch);		\
   rgba[0] = ((p >> 8) & 0xf8) * 255 / 0xf8;				\
   rgba[1] = ((p >> 3) & 0xfc) * 255 / 0xfc;				\
   rgba[2] = ((p << 3) & 0xf8) * 255 / 0xf8;				\
   rgba[3] = 255;							\
d101 26
d135 2
d141 2
a142 7
/*
 * This function is called to specify which buffer to read and write
 * for software rasterization (swrast) fallbacks.  This doesn't necessarily
 * correspond to glDrawBuffer() or glReadBuffer() calls.
 */
static void i810SetBuffer(GLcontext *ctx, GLframebuffer *buffer,
                          GLuint bufferBit )
d144 16
a159 19
   i810ContextPtr imesa = I810_CONTEXT(ctx);
   (void) buffer;

   switch(bufferBit) {
    case FRONT_LEFT_BIT:
      if ( imesa->sarea->pf_current_page == 1)
        imesa->readMap = imesa->i810Screen->back.map;
      else
        imesa->readMap = (char*)imesa->driScreen->pFB;
      break;
    case BACK_LEFT_BIT:
      if ( imesa->sarea->pf_current_page == 1)
        imesa->readMap =  (char*)imesa->driScreen->pFB;
      else
        imesa->readMap = imesa->i810Screen->back.map;
      break;
    default:
      	ASSERT(0);
	break;
a160 9
   imesa->drawMap = imesa->readMap;
}


void i810InitSpanFuncs( GLcontext *ctx )
{
   struct swrast_device_driver *swdd = _swrast_GetDeviceDriverReference(ctx);

   swdd->SetBuffer = i810SetBuffer;
d162 12
a173 12
   swdd->WriteRGBASpan = i810WriteRGBASpan_565;
   swdd->WriteRGBSpan = i810WriteRGBSpan_565;
   swdd->WriteMonoRGBASpan = i810WriteMonoRGBASpan_565;
   swdd->WriteRGBAPixels = i810WriteRGBAPixels_565;
   swdd->WriteMonoRGBAPixels = i810WriteMonoRGBAPixels_565;
   swdd->ReadRGBASpan = i810ReadRGBASpan_565;
   swdd->ReadRGBAPixels = i810ReadRGBAPixels_565;

   swdd->ReadDepthSpan = i810ReadDepthSpan_16;
   swdd->WriteDepthSpan = i810WriteDepthSpan_16;
   swdd->ReadDepthPixels = i810ReadDepthPixels_16;
   swdd->WriteDepthPixels = i810WriteDepthPixels_16;
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d1 3
a3 7
#include "glheader.h"
#include "macros.h"
#include "mtypes.h"

#include "i810screen.h"
#include "i810_dri.h"

a5 1
#include "swrast/swrast.h"
a14 1
   GLushort p;						\
d20 2
a21 1
			     dPriv->y * pitch);		\
d33 1
a33 2
#define INIT_MONO_PIXEL(p, color) \
   p = PACK_COLOR_565( color[0], color[1], color[2] )
d53 1
a53 1
   I810_FIREVERTICES(imesa);			\
d87 7
a93 7
#define READ_RGBA( rgba, _x, _y )					\
do {									\
   GLushort p = *(GLushort *)(read_buf + _x*2 + _y*pitch);		\
   rgba[0] = ((p >> 8) & 0xf8) * 255 / 0xf8;				\
   rgba[1] = ((p >> 3) & 0xfc) * 255 / 0xfc;				\
   rgba[2] = ((p << 3) & 0xf8) * 255 / 0xf8;				\
   rgba[3] = 255;							\
d101 26
d135 2
d141 2
a142 2
static void i810SetReadBuffer(GLcontext *ctx, GLframebuffer *colorBuffer,
				GLenum mode )
d144 16
a159 7
   i810ContextPtr imesa = I810_CONTEXT(ctx);

   if (mode == GL_FRONT_LEFT) {
      imesa->readMap = (char *)imesa->driScreen->pFB;
   }
   else if (mode == GL_BACK_LEFT) {
      imesa->readMap = imesa->i810Screen->back.map;
a160 11
   else {
      ASSERT(0);
   }
}


void i810InitSpanFuncs( GLcontext *ctx )
{
   struct swrast_device_driver *swdd = _swrast_GetDeviceDriverReference(ctx);

   swdd->SetReadBuffer = i810SetReadBuffer;
d162 12
a173 12
   swdd->WriteRGBASpan = i810WriteRGBASpan_565;
   swdd->WriteRGBSpan = i810WriteRGBSpan_565;
   swdd->WriteMonoRGBASpan = i810WriteMonoRGBASpan_565;
   swdd->WriteRGBAPixels = i810WriteRGBAPixels_565;
   swdd->WriteMonoRGBAPixels = i810WriteMonoRGBAPixels_565;
   swdd->ReadRGBASpan = i810ReadRGBASpan_565;
   swdd->ReadRGBAPixels = i810ReadRGBAPixels_565;

   swdd->ReadDepthSpan = i810ReadDepthSpan_16;
   swdd->WriteDepthSpan = i810WriteDepthSpan_16;
   swdd->ReadDepthPixels = i810ReadDepthPixels_16;
   swdd->WriteDepthPixels = i810WriteDepthPixels_16;
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@a3 1
#include "colormac.h"
d119 2
a120 7
/*
 * This function is called to specify which buffer to read and write
 * for software rasterization (swrast) fallbacks.  This doesn't necessarily
 * correspond to glDrawBuffer() or glReadBuffer() calls.
 */
static void i810SetBuffer(GLcontext *ctx, GLframebuffer *buffer,
                          GLuint bufferBit )
a122 1
   (void) buffer;
d124 8
a131 16
   switch(bufferBit) {
    case FRONT_LEFT_BIT:
      if ( imesa->sarea->pf_current_page == 1)
        imesa->readMap = imesa->i810Screen->back.map;
      else
        imesa->readMap = (char*)imesa->driScreen->pFB;
      break;
    case BACK_LEFT_BIT:
      if ( imesa->sarea->pf_current_page == 1)
        imesa->readMap =  (char*)imesa->driScreen->pFB;
      else
        imesa->readMap = imesa->i810Screen->back.map;
      break;
    default:
      	ASSERT(0);
	break;
a132 1
   imesa->drawMap = imesa->readMap;
d140 1
a140 1
   swdd->SetBuffer = i810SetBuffer;
@


