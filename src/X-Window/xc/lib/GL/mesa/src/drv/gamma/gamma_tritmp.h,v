head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.04.08.18.31.24;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.31.24;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.17.52;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@static void TAG(gamma_point)( gammaContextPtr gmesa, 
			     const gammaVertex *v0 )
{
    CARD32 vColor;
    CARD32 vBegin;

    vBegin = gmesa->Begin | B_PrimType_Points;

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, Begin, vBegin);

#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v0->v.color.alpha << 24) |
	     (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v0->v.u0);
    WRITEF(gmesa->buf, Ts2, v0->v.v0);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, FlushSpan, 0);
#endif

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, End, 0);
}

static void TAG(gamma_line)( gammaContextPtr gmesa, 
			     const gammaVertex *v0,
			     const gammaVertex *v1 )
{
    CARD32 vColor;
    CARD32 vBegin;

    vBegin = gmesa->Begin | B_PrimType_Lines;

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, Begin, vBegin);

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v0->v.color.alpha << 24) |
	     (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#else
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v1->v.color.alpha << 24) |
	     (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v0->v.u0);
    WRITEF(gmesa->buf, Ts2, v0->v.v0);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v1->v.color.alpha << 24) |
	     (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v1->v.u0);
    WRITEF(gmesa->buf, Ts2, v1->v.v0);
    WRITEF(gmesa->buf, Vw, v1->v.w);
    WRITEF(gmesa->buf, Vz, v1->v.z);
    WRITEF(gmesa->buf, Vy, v1->v.y);
    WRITEF(gmesa->buf, Vx4, v1->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v1->v.w);
    WRITEF(gmesa->buf, Vz, v1->v.z);
    WRITEF(gmesa->buf, Vy, v1->v.y);
    WRITEF(gmesa->buf, Vx4, v1->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, FlushSpan, 0);
#endif

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, End, 0);
}

static void TAG(gamma_triangle)( gammaContextPtr gmesa,
				 const gammaVertex *v0,
				 const gammaVertex *v1, 
				 const gammaVertex *v2 )
{
    CARD32 vColor;
    CARD32 vBegin;

    vBegin = gmesa->Begin | B_PrimType_Triangles;

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, Begin, vBegin);

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v0->v.color.alpha << 24) |
	     (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#else
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v2->v.color.alpha << 24) |
	     (v2->v.color.blue  << 16) |
	     (v2->v.color.green <<  8) |
	     (v2->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v2->v.color.blue  << 16) |
	     (v2->v.color.green <<  8) |
	     (v2->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v0->v.u0);
    WRITEF(gmesa->buf, Ts2, v0->v.v0);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v1->v.color.alpha << 24) |
	     (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v1->v.u0);
    WRITEF(gmesa->buf, Ts2, v1->v.v0);
    WRITEF(gmesa->buf, Vw, v1->v.w);
    WRITEF(gmesa->buf, Vz, v1->v.z);
    WRITEF(gmesa->buf, Vy, v1->v.y);
    WRITEF(gmesa->buf, Vx4, v1->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v1->v.w);
    WRITEF(gmesa->buf, Vz, v1->v.z);
    WRITEF(gmesa->buf, Vy, v1->v.y);
    WRITEF(gmesa->buf, Vx4, v1->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v2->v.color.alpha << 24) |
	     (v2->v.color.blue  << 16) |
	     (v2->v.color.green <<  8) |
	     (v2->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v2->v.color.blue  << 16) |
	     (v2->v.color.green <<  8) |
	     (v2->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v2->v.u0);
    WRITEF(gmesa->buf, Ts2, v2->v.v0);
    WRITEF(gmesa->buf, Vw, v2->v.w);
    WRITEF(gmesa->buf, Vz, v2->v.z);
    WRITEF(gmesa->buf, Vy, v2->v.y);
    WRITEF(gmesa->buf, Vx4, v2->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v2->v.w);
    WRITEF(gmesa->buf, Vz, v2->v.z);
    WRITEF(gmesa->buf, Vy, v2->v.y);
    WRITEF(gmesa->buf, Vx4, v2->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, FlushSpan, 0);
#endif

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, End, 0);
}

static void TAG(gamma_quad)( gammaContextPtr gmesa,
			    const gammaVertex *v0,
			    const gammaVertex *v1,
			    const gammaVertex *v2,
			    const gammaVertex *v3 )
{
    CARD32 vColor;
    CARD32 vBegin;

    vBegin = gmesa->Begin | B_PrimType_Quads;

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, Begin, vBegin);

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v0->v.color.alpha << 24) |
	     (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v0->v.color.blue  << 16) |
	     (v0->v.color.green <<  8) |
	     (v0->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#else
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v3->v.color.alpha << 24) |
	     (v3->v.color.blue  << 16) |
	     (v3->v.color.green <<  8) |
	     (v3->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v3->v.color.blue  << 16) |
	     (v3->v.color.green <<  8) |
	     (v3->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v0->v.u0);
    WRITEF(gmesa->buf, Ts2, v0->v.v0);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v0->v.w);
    WRITEF(gmesa->buf, Vz, v0->v.z);
    WRITEF(gmesa->buf, Vy, v0->v.y);
    WRITEF(gmesa->buf, Vx4, v0->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v1->v.color.alpha << 24) |
	     (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v1->v.color.blue  << 16) |
	     (v1->v.color.green <<  8) |
	     (v1->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v1->v.u0);
    WRITEF(gmesa->buf, Ts2, v1->v.v0);
    WRITEF(gmesa->buf, Vw, v1->v.w);
    WRITEF(gmesa->buf, Vz, v1->v.z);
    WRITEF(gmesa->buf, Vy, v1->v.y);
    WRITEF(gmesa->buf, Vx4, v1->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v1->v.w);
    WRITEF(gmesa->buf, Vz, v1->v.z);
    WRITEF(gmesa->buf, Vy, v1->v.y);
    WRITEF(gmesa->buf, Vx4, v1->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v2->v.color.alpha << 24) |
	     (v2->v.color.blue  << 16) |
	     (v2->v.color.green <<  8) |
	     (v2->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v2->v.color.blue  << 16) |
	     (v2->v.color.green <<  8) |
	     (v2->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v2->v.u0);
    WRITEF(gmesa->buf, Ts2, v2->v.v0);
    WRITEF(gmesa->buf, Vw, v2->v.w);
    WRITEF(gmesa->buf, Vz, v2->v.z);
    WRITEF(gmesa->buf, Vy, v2->v.y);
    WRITEF(gmesa->buf, Vx4, v2->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v2->v.w);
    WRITEF(gmesa->buf, Vz, v2->v.z);
    WRITEF(gmesa->buf, Vy, v2->v.y);
    WRITEF(gmesa->buf, Vx4, v2->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
#if (IND & GAMMA_RAST_ALPHA_BIT)
    vColor = (v3->v.color.alpha << 24) |
	     (v3->v.color.blue  << 16) |
	     (v3->v.color.green <<  8) |
	     (v3->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor4, vColor);
#else
    vColor = (v3->v.color.blue  << 16) |
	     (v3->v.color.green <<  8) |
	     (v3->v.color.red   <<  0);

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, PackedColor3, vColor);
#endif
#endif

#if (IND & GAMMA_RAST_TEX_BIT)
    CHECK_DMA_BUFFER(gmesa, 6);
    WRITEF(gmesa->buf, Tt2, v3->v.u0);
    WRITEF(gmesa->buf, Ts2, v3->v.v0);
    WRITEF(gmesa->buf, Vw, v3->v.w);
    WRITEF(gmesa->buf, Vz, v3->v.z);
    WRITEF(gmesa->buf, Vy, v3->v.y);
    WRITEF(gmesa->buf, Vx4, v3->v.x);
#else
    CHECK_DMA_BUFFER(gmesa, 4);
    WRITEF(gmesa->buf, Vw, v3->v.w);
    WRITEF(gmesa->buf, Vz, v3->v.z);
    WRITEF(gmesa->buf, Vy, v3->v.y);
    WRITEF(gmesa->buf, Vx4, v3->v.x);
#endif

#if !(IND & GAMMA_RAST_FLAT_BIT)
    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, FlushSpan, 0);
#endif

    CHECK_DMA_BUFFER(gmesa, 1);
    WRITE(gmesa->buf, End, 0);
}

static void TAG(gamma_init)(void)
{
	gamma_point_tab[IND]	= TAG(gamma_point);
	gamma_line_tab[IND]	= TAG(gamma_line);
	gamma_tri_tab[IND]	= TAG(gamma_triangle);
	gamma_quad_tab[IND]	= TAG(gamma_quad);
}

#undef IND
#undef TAG
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@
