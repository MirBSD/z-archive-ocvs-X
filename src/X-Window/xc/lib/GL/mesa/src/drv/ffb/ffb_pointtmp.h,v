head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.04.11;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.04.11;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.31.20;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.17.47;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $XFree86: xc/lib/GL/mesa/src/drv/ffb/ffb_pointtmp.h,v 1.2 2000/12/05 21:18:33 dawes Exp $ */

static void TAG(ffb_points)(GLcontext *ctx, GLuint first, GLuint last)
{
	ffbContextPtr fmesa = FFB_CONTEXT(ctx);
	ffb_fbcPtr ffb = fmesa->regs;
	struct vertex_buffer *VB = ctx->VB;
	ffb_vertex *ffbVB = FFB_DRIVER_DATA(VB)->verts;
#if (IND & FFB_POINT_OFFSET_BIT)
#if (IND & FFB_POINT_AA_BIT)
	GLuint ffb_zoffset = FFB_Z_FROM_FLOAT(ctx->PointZoffset);
#else
	GLuint ffb_zoffset = Z_FROM_MESA(ctx->PointZoffset);
#endif
#endif
#if (IND & FFB_POINT_BIG_BIT)
	GLuint sz = FFB_COORD_FROM_FLOAT(ctx->Point.Size * 0.5f);
#endif
	int i;

	for (i = first; i < last; i++) {
		if (VB->ClipMask[i] == 0) {
			ffb_vertex *tmp = &ffbVB[i];
#if !(IND & FFB_POINT_BIG_BIT)
#if (IND & FFB_POINT_AA_BIT)
			FFBFifo(fmesa, 4);
			ffb->fg = (((GLuint)VB->Color[0]->data[i][0] << 0) |
				   ((GLuint)VB->Color[0]->data[i][1] << 8) |
				   ((GLuint)VB->Color[0]->data[i][2] << 16) |
				   ((GLuint)VB->Color[0]->data[i][3] << 24));
#if (IND & FFB_POINT_OFFSET_BIT)
			ffb->z = tmp->z + ffb_zoffset;
#else
			ffb->z = tmp->z;
#endif
			ffb->y = tmp->y + 0x8000;
			ffb->x = tmp->x + 0x8000;
#else
			FFBFifo(fmesa, 4);
			ffb->fg = (((GLuint)VB->Color[0]->data[i][0] << 0) |
				   ((GLuint)VB->Color[0]->data[i][1] << 8) |
				   ((GLuint)VB->Color[0]->data[i][2] << 16) |
				   ((GLuint)VB->Color[0]->data[i][3] << 24));
#if (IND & FFB_POINT_OFFSET_BIT)
			ffb->constz =
				(Z_FROM_MESA(VB->Win.data[i][2]) + ffb_zoffset);
#else
			ffb->constz = Z_FROM_MESA(VB->Win.data[i][2]);
#endif
			ffb->bh = tmp->y >> 16;
			ffb->bw = tmp->x >> 16;
#endif
#else /* FFB_POINT_BIG_BIT */
			/* Doing big points via triangles. */
			FFBFifo(fmesa, 10);

			ffb->fg = (((GLuint)VB->Color[0]->data[i][0] << 0) |
				   ((GLuint)VB->Color[0]->data[i][1] << 8) |
				   ((GLuint)VB->Color[0]->data[i][2] << 16) |
				   ((GLuint)VB->Color[0]->data[i][3] << 24));
#if (IND & FFB_POINT_OFFSET_BIT)
			ffb->constz =
				(Z_FROM_MESA(VB->Win.data[i][2]) + ffb_zoffset);
#else
			ffb->constz = Z_FROM_MESA(VB->Win.data[i][2]);
#endif

			/* The vertex sequence using isolated triangles would
			 * be:
			 *	Vertex0: VX - sz, VY - sz	RXF/RYF
			 *	Vertex1: VX + sz, VY - sz	DOXF/DOYF
			 *	Vertex2: VX + sz, VY + sz	DOXF/DOYF
			 *	Vertex3: VX + sz, VY + sz	RXF/RYF
			 *	Vertex4: VX - sz, VY + sz	DOXF/DOYF
			 *	Vertex5: VX - sz, VY - sz	DOXF/DOYF
			 *
			 * Using star chaining we can optimize this into a
			 * four vertex sequence, as follows:
			 *
			 *	Vertex0: VX - sz, VY - sz	RXF/RYF
			 *	Vertex1: VX + sz, VY - sz	DOXF/DOYF
			 *	Vertex2: VX + sz, VY + sz	DOXF/DOYF
			 *	Vertex3: VX - sz, VY + sz	DMXF/DMYF
			 */

			/* Vertex0: VX - sz, VY - sz, RXF/RYF */
			ffb->ryf = tmp->y - sz;
			ffb->rxf = tmp->x - sz;

			/* Vertex1: VX + sz, VY - sz, DOXF/DOYF */
			ffb->y = tmp->y - sz;
			ffb->x = tmp->x + sz;

			/* Vertex2: VX + sz, VY + sz, DOXF/DOYF */
			ffb->y = tmp->y + sz;
			ffb->x = tmp->x + sz;

			/* Vertex3: VX - sz, VY + sz, DMXF/DMYF */
			ffb->dmyf = tmp->y + sz;
			ffb->dmxf = tmp->x - sz;
#endif /* !(FFB_POINT_BIG_BIT) */
		}
	}

	fmesa->ffbScreen->rp_active = 1;
}

static void TAG(init)(void)
{
	ffb_points_tab[IND] = TAG(ffb_points);
}

#undef IND
#undef TAG
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d1 1
a1 1
/* $XFree86: xc/lib/GL/mesa/src/drv/ffb/ffb_pointtmp.h,v 1.3 2002/02/22 21:32:59 dawes Exp $ */
d3 1
a3 1
static __inline void TAG(ffb_draw_point)(GLcontext *ctx, ffb_vertex *tmp )
d7 3
a9 4
	FFB_DELAYED_VIEWPORT_VARS;

#ifdef FFB_POINT_TRACE
	fprintf(stderr, "FFB: ffb_point ["
d11 4
a14 1
		"AA"
d16 2
a17 2
		"] X(%f) Y(%f) Z(%f)\n",
		tmp->x, tmp->y, tmp->z);
d19 1
d21 4
d26 21
a46 6
	FFBFifo(fmesa, 4);
			
	ffb->fg = FFB_PACK_CONST_UBYTE_ARGB_COLOR( tmp->color[0] );
	ffb->z = FFB_GET_Z(tmp);
	ffb->y = FFB_GET_Y(tmp) + 0x8000 /* FIX ME */;
	ffb->x = FFB_GET_X(tmp) + 0x8000 /* FIX ME */;
d48 19
a66 2
	{
		unsigned int const_fg, const_z, h, w;
d68 35
a102 13
		const_fg = FFB_PACK_CONST_UBYTE_ARGB_COLOR( tmp->color[0] );
		const_z = Z_FROM_MESA(FFB_Z_TO_FLOAT(FFB_GET_Z(tmp)));
		h = FFB_GET_Y(tmp) >> 16;
		w = FFB_GET_X(tmp) >> 16;
#ifdef FFB_POINT_TRACE
		fprintf(stderr, "FFB: ffb_point fg(%08x) z(%08x) h(%08x) w(%08x)\n",
			const_fg, const_z, h, w);
#endif
		FFBFifo(fmesa, 4);
		ffb->fg = const_fg;
		ffb->constz = const_z;
		ffb->bh = h;
		ffb->bw = w;
a103 1
#endif
a107 1

d110 1
a110 1
	ffb_point_tab[IND] = TAG(ffb_draw_point);
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d1 1
a1 1
/* $XFree86: xc/lib/GL/mesa/src/drv/ffb/ffb_pointtmp.h,v 1.3 2002/02/22 21:32:59 dawes Exp $ */
d3 1
a3 1
static __inline void TAG(ffb_draw_point)(GLcontext *ctx, ffb_vertex *tmp )
d7 3
a9 4
	FFB_DELAYED_VIEWPORT_VARS;

#ifdef FFB_POINT_TRACE
	fprintf(stderr, "FFB: ffb_point ["
d11 4
a14 1
		"AA"
d16 2
a17 2
		"] X(%f) Y(%f) Z(%f)\n",
		tmp->x, tmp->y, tmp->z);
d19 1
d21 4
d26 21
a46 6
	FFBFifo(fmesa, 4);
			
	ffb->fg = FFB_PACK_CONST_UBYTE_ARGB_COLOR( tmp->color[0] );
	ffb->z = FFB_GET_Z(tmp);
	ffb->y = FFB_GET_Y(tmp) + 0x8000 /* FIX ME */;
	ffb->x = FFB_GET_X(tmp) + 0x8000 /* FIX ME */;
d48 19
a66 2
	{
		unsigned int const_fg, const_z, h, w;
d68 35
a102 13
		const_fg = FFB_PACK_CONST_UBYTE_ARGB_COLOR( tmp->color[0] );
		const_z = Z_FROM_MESA(FFB_Z_TO_FLOAT(FFB_GET_Z(tmp)));
		h = FFB_GET_Y(tmp) >> 16;
		w = FFB_GET_X(tmp) >> 16;
#ifdef FFB_POINT_TRACE
		fprintf(stderr, "FFB: ffb_point fg(%08x) z(%08x) h(%08x) w(%08x)\n",
			const_fg, const_z, h, w);
#endif
		FFBFifo(fmesa, 4);
		ffb->fg = const_fg;
		ffb->constz = const_z;
		ffb->bh = h;
		ffb->bw = w;
a103 1
#endif
a107 1

d110 1
a110 1
	ffb_point_tab[IND] = TAG(ffb_draw_point);
@

