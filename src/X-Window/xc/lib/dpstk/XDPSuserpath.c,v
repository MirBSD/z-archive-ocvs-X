head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.05.05;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.05.05;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.19.52;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * XDPSuserpath.c
 *
 * (c) Copyright 1990-1994 Adobe Systems Incorporated.
 * All rights reserved.
 * 
 * Permission to use, copy, modify, distribute, and sublicense this software
 * and its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notices appear in all copies and that
 * both those copyright notices and this permission notice appear in
 * supporting documentation and that the name of Adobe Systems Incorporated
 * not be used in advertising or publicity pertaining to distribution of the
 * software without specific, written prior permission.  No trademark license
 * to use the Adobe trademarks is hereby granted.  If the Adobe trademark
 * "Display PostScript"(tm) is used to describe this software, its
 * functionality or for any other purpose, such use shall be limited to a
 * statement that this software works in conjunction with the Display
 * PostScript system.  Proper trademark attribution to reflect Adobe's
 * ownership of the trademark shall be given whenever any such reference to
 * the Display PostScript system is made.
 * 
 * ADOBE MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THE SOFTWARE FOR
 * ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
 * ADOBE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON- INFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO EVENT SHALL ADOBE BE LIABLE
 * TO YOU OR ANY OTHER PARTY FOR ANY SPECIAL, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE, STRICT LIABILITY OR ANY OTHER ACTION ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  ADOBE WILL NOT
 * PROVIDE ANY TRAINING OR OTHER SUPPORT FOR THE SOFTWARE.
 * 
 * Adobe, PostScript, and Display PostScript are trademarks of Adobe Systems
 * Incorporated which may be registered in certain jurisdictions
 * 
 * Author:  Adobe Systems Incorporated
 */
/* $XFree86: xc/lib/dpstk/XDPSuserpath.c,v 1.2 2000/06/07 22:03:01 tsi Exp $ */

#include <DPS/dpsXclient.h>
#include <DPS/dpsops.h>
#include <DPS/dpsXuserpath.h>

typedef struct _t_NumStrHeader {
    unsigned char type;
    unsigned char representation;
    unsigned short length;
} NumStrHeader;

void PSDoUserPath(coords, numCoords, numType, ops, numOps, bbox, action)
    DPSPointer coords;
    int numCoords;
    DPSNumberFormat numType;
    DPSUserPathOp *ops;
    int numOps;
    DPSPointer bbox;
    DPSUserPathAction action;
{
    DPSDoUserPath(DPSGetCurrentContext(), coords, numCoords, numType, ops,
		  numOps, bbox, action);
}

void DPSDoUserPath(ctxt, coords, numCoords, numType, ops, numOps, bbox, action)
    DPSContext ctxt;
    DPSPointer coords;
    int numCoords;
    DPSNumberFormat numType;
    DPSUserPathOp *ops;
    int numOps;
    DPSPointer bbox;
    DPSUserPathAction action;
{
    typedef struct {
	unsigned char tokenType;
	unsigned char topLevelCount;
	unsigned short nBytes;
	DPSBinObjGeneric obj0;
	DPSBinObjGeneric obj1;
	DPSBinObjGeneric obj2;
	DPSBinObjGeneric obj3;
    } _dpsQ;
    static _dpsQ _dpsF = {
	DPS_DEF_TOKENTYPE, 0, 36, /* will fill in topLevelCount later */
	{DPS_LITERAL|DPS_ARRAY, 0, 2, 16},
	{DPS_EXEC|DPS_NAME, 0, DPSSYSNAME, 0},    
	{DPS_LITERAL|DPS_STRING, 0, 0, 32}, /* param nums */
	{DPS_LITERAL|DPS_STRING, 0, 0, 32}, /* param ops */
    }; /* _dpsQ */
    register DPSBinObjRec *_dpsP = (DPSBinObjRec *)&_dpsF.obj0;
    register int _dps_offset = 32;
    int needBBox, hasUCache, numberSize;
    DPSUserPathOp setbboxOp;
    NumStrHeader nsHeader;

    if (numType >= dps_short && numType < dps_float) numberSize = 2;
    else numberSize = 4;

    hasUCache = (*ops == dps_ucache);

    if (hasUCache) {
	needBBox = (numOps > 1 && ops[1] != dps_setbbox);
    } else needBBox = (*ops != dps_setbbox);

    if (needBBox) {
	numOps += 1;
	setbboxOp = dps_setbbox;
    }
    
    numCoords += 4; /* Account for bbox */

    nsHeader.type = 149; /* Homogeneous Number Array */
    nsHeader.representation = numType;
    nsHeader.length = numCoords;
  
    /* If we're using the send operation, we modify the sequence so that
       it never gets to the action.  This leaves a hole in the sequence,
       but that's ok. */

    if (action == dps_send) _dpsF.topLevelCount = 1;
    else _dpsF.topLevelCount = 2;

    _dpsP[1].val.nameVal = action;
    _dpsP[2].length = (sizeof(NumStrHeader) + numCoords * numberSize);
    _dpsP[3].length = numOps;
    _dpsP[3].val.stringVal = _dps_offset;
    _dps_offset += numOps;
    _dpsP[2].val.stringVal = _dps_offset;
    _dps_offset += _dpsP[2].length;
    _dpsF.nBytes = _dps_offset+4;

    if (needBBox) numOps -= 1;

    numCoords -= 4; /* Unaccount for bbox */

    DPSBinObjSeqWrite(ctxt, (char *) &_dpsF, 36);
    if (needBBox) {
	if (hasUCache) {
	    DPSWriteStringChars(ctxt, (char *) ops, 1);
	    ops++; numOps--;
	}
	DPSWriteStringChars(ctxt, (char *) &setbboxOp, 1);
    }
    DPSWriteStringChars(ctxt, (char *) ops, numOps);
    DPSWriteStringChars(ctxt, (char *) &nsHeader, sizeof(NumStrHeader));
    DPSWriteStringChars(ctxt, (char *) bbox, 4 * numberSize);
    DPSWriteStringChars(ctxt, (char *) coords, numCoords * numberSize);
}

Bool PSHitUserPath(x, y, radius,
		   coords, numCoords, numType, ops, numOps, bbox, action)
    double x, y, radius;
    DPSPointer coords;
    int numCoords;
    DPSNumberFormat numType;
    DPSUserPathOp *ops;
    int numOps;
    DPSPointer bbox;
    DPSUserPathAction action;
{
    return DPSHitUserPath(DPSGetCurrentContext(), x, y, radius,
			  coords, numCoords, numType, ops,
			  numOps, bbox, action);
}

Bool DPSHitUserPath(ctxt, x, y, radius,
		       coords, numCoords, numType, ops, numOps, bbox, action)
    DPSContext ctxt;
    double x, y, radius;
    DPSPointer coords;
    int numCoords;
    DPSNumberFormat numType;
    DPSUserPathOp *ops;
    int numOps;
    DPSPointer bbox;
    DPSUserPathAction action;
{
    float aCoords[5];
    DPSUserPathOp aOps[1];
    float aBbox[4];
    int result;

    if (radius != 0.0) {
	aCoords[0] = x;
	aCoords[1] = y;
	aCoords[2] = radius;
	aCoords[3] = 0.0;
	aCoords[4] = 360.0;
	aOps[0] = dps_arc;
	aBbox[0] = x - radius;
	aBbox[1] = y - radius;
	aBbox[2] = x + radius;
	aBbox[3] = y + radius;

	switch (action) {
	    case dps_infill:
	    case dps_ineofill:
	    case dps_instroke:
		DPSDoUserPath(ctxt, (DPSPointer) aCoords, 5, dps_float,
			      aOps, 1, (DPSPointer) aBbox, action);
		break;
	    case dps_inufill:
	    case dps_inueofill:
	    case dps_inustroke:
		DPSDoUserPath(ctxt, (DPSPointer) aCoords, 5, dps_float,
			      aOps, 1, (DPSPointer) aBbox, dps_send);
		DPSDoUserPath(ctxt, coords, numCoords, numType, ops,
			      numOps, bbox, action);
		break;
	    default:
		return False;
	}
	DPSgetboolean(ctxt, &result);

    } else {
	switch (action) {
	    case dps_infill:
	        DPSinfill(ctxt, x, y, &result);
		break;
	    case dps_ineofill:
		DPSineofill(ctxt, x, y, &result);
		break;
	    case dps_instroke:
		DPSinstroke(ctxt, x, y, &result);
		break;
	    case dps_inufill:
	    case dps_inueofill:
	    case dps_inustroke:
		DPSsendfloat(ctxt, x);
		DPSsendfloat(ctxt, y);
		DPSDoUserPath(ctxt, coords, numCoords, numType, ops,
			      numOps, bbox, action);
		DPSgetboolean(ctxt, &result);
		break;
	    default:
		return False;
	    }
    }
    return result;
}

@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
