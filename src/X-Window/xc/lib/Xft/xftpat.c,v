head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.04.53;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.04.53;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.32.35;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.19.22;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * $XFree86: xc/lib/Xft/xftpat.c,v 1.6 2001/03/30 18:50:18 keithp Exp $
 *
 * Copyright © 2000 Keith Packard, member of The XFree86 Project, Inc.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdlib.h>
#include <string.h>
#include "xftint.h"

XftPattern *
XftPatternCreate (void)
{
    XftPattern	*p;

    p = (XftPattern *) malloc (sizeof (XftPattern));
    if (!p)
	return 0;
    p->num = 0;
    p->size = 0;
    p->elts = 0;
    return p;
}

void
XftValueDestroy (XftValue v)
{
    if (v.type == XftTypeString)
	free (v.u.s);
    if( v.type == XftTypeMatrix)
	free (v.u.m);
}

void
XftValueListDestroy (XftValueList *l)
{
    XftValueList    *next;
    for (; l; l = next)
    {
	if (l->value.type == XftTypeString)
	    free (l->value.u.s);
	if (l->value.type == XftTypeMatrix)
	    free (l->value.u.m);
	next = l->next;
	free (l);
    }
}

void
XftPatternDestroy (XftPattern *p)
{
    int		    i;
    
    for (i = 0; i < p->num; i++)
	XftValueListDestroy (p->elts[i].values);

    if (p->elts)
    {
	free (p->elts);
	p->elts = 0;
    }
    p->num = p->size = 0;
    free (p);
}

XftPatternElt *
XftPatternFind (XftPattern *p, const char *object, Bool insert)
{
    int		    i;
    int		    s;
    XftPatternElt   *e;
    
    /* match existing */
    for (i = 0; i < p->num; i++)
    {
	if (!_XftStrCmpIgnoreCase (object, p->elts[i].object))
	    return &p->elts[i];
    }

    if (!insert)
	return 0;

    /* grow array */
    if (i == p->size)
    {
	s = p->size + 16;
	if (p->elts)
	    e = (XftPatternElt *) realloc (p->elts, s * sizeof (XftPatternElt));
	else
	    e = (XftPatternElt *) malloc (s * sizeof (XftPatternElt));
	if (!e)
	    return False;
	p->elts = e;
	while (p->size < s)
	{
	    p->elts[p->size].object = 0;
	    p->elts[p->size].values = 0;
	    p->size++;
	}
    }
    
    /* bump count */
    p->num++;
    
    return &p->elts[i];
}

Bool
XftPatternAdd (XftPattern *p, const char *object, XftValue value, Bool append)
{
    XftPatternElt   *e;
    XftValueList    *new, **prev;

    new = (XftValueList *) malloc (sizeof (XftValueList));
    if (!new)
	goto bail0;

    /* dup string */
    if (value.type == XftTypeString)
    {
	value.u.s = _XftSaveString (value.u.s);
	if (!value.u.s)
	    goto bail1;
    }
    else if (value.type == XftTypeMatrix)
    {
	value.u.m = _XftSaveMatrix (value.u.m);
	if (!value.u.m)
	    goto bail1;
    }
    new->value = value;
    new->next = 0;
    
    e = XftPatternFind (p, object, True);
    if (!e)
	goto bail2;
    
    e->object = object;
    if (append)
    {
	for (prev = &e->values; *prev; prev = &(*prev)->next);
	*prev = new;
    }
    else
    {
	new->next = e->values;
	e->values = new;
    }
    
    return True;

bail2:    
    if (value.type == XftTypeString)
        free (value.u.s);
    else if (value.type == XftTypeMatrix)
	free (value.u.m);
bail1:
    free (new);
bail0:
    return False;
}

Bool
XftPatternDel (XftPattern *p, const char *object)
{
    XftPatternElt   *e;
    int		    i;

    e = XftPatternFind (p, object, False);
    if (!e)
	return False;

    i = e - p->elts;
    
    /* destroy value */
    XftValueListDestroy (e->values);
    
    /* shuffle existing ones down */
    memmove (e, e+1, (p->elts + p->num - (e + 1)) * sizeof (XftPatternElt));
    p->num--;
    p->elts[p->num].object = 0;
    p->elts[p->num].values = 0;
    return True;
}

Bool
XftPatternAddInteger (XftPattern *p, const char *object, int i)
{
    XftValue	v;

    v.type = XftTypeInteger;
    v.u.i = i;
    return XftPatternAdd (p, object, v, True);
}

Bool
XftPatternAddDouble (XftPattern *p, const char *object, double d)
{
    XftValue	v;

    v.type = XftTypeDouble;
    v.u.d = d;
    return XftPatternAdd (p, object, v, True);
}


Bool
XftPatternAddString (XftPattern *p, const char *object, const char *s)
{
    XftValue	v;

    v.type = XftTypeString;
    v.u.s = (char *) s;
    return XftPatternAdd (p, object, v, True);
}

Bool
XftPatternAddMatrix (XftPattern *p, const char *object, const XftMatrix *s)
{
    XftValue	v;

    v.type = XftTypeMatrix;
    v.u.m = (XftMatrix *) s;
    return XftPatternAdd (p, object, v, True);
}


Bool
XftPatternAddBool (XftPattern *p, const char *object, Bool b)
{
    XftValue	v;

    v.type = XftTypeBool;
    v.u.b = b;
    return XftPatternAdd (p, object, v, True);
}

XftResult
XftPatternGet (XftPattern *p, const char *object, int id, XftValue *v)
{
    XftPatternElt   *e;
    XftValueList    *l;

    e = XftPatternFind (p, object, False);
    if (!e)
	return XftResultNoMatch;
    for (l = e->values; l; l = l->next)
    {
	if (!id)
	{
	    *v = l->value;
	    return XftResultMatch;
	}
	id--;
    }
    return XftResultNoId;
}

XftResult
XftPatternGetInteger (XftPattern *p, const char *object, int id, int *i)
{
    XftValue	v;
    XftResult	r;

    r = XftPatternGet (p, object, id, &v);
    if (r != XftResultMatch)
	return r;
    switch (v.type) {
    case XftTypeDouble:
	*i = (int) v.u.d;
	break;
    case XftTypeInteger:
	*i = v.u.i;
	break;
    default:
        return XftResultTypeMismatch;
    }
    return XftResultMatch;
}

XftResult
XftPatternGetDouble (XftPattern *p, const char *object, int id, double *d)
{
    XftValue	v;
    XftResult	r;

    r = XftPatternGet (p, object, id, &v);
    if (r != XftResultMatch)
	return r;
    switch (v.type) {
    case XftTypeDouble:
	*d = v.u.d;
	break;
    case XftTypeInteger:
	*d = (double) v.u.i;
	break;
    default:
        return XftResultTypeMismatch;
    }
    return XftResultMatch;
}

XftResult
XftPatternGetString (XftPattern *p, const char *object, int id, char **s)
{
    XftValue	v;
    XftResult	r;

    r = XftPatternGet (p, object, id, &v);
    if (r != XftResultMatch)
	return r;
    if (v.type != XftTypeString)
        return XftResultTypeMismatch;
    *s = v.u.s;
    return XftResultMatch;
}

XftResult
XftPatternGetMatrix (XftPattern *p, const char *object, int id, XftMatrix **m)
{
    XftValue	v;
    XftResult	r;

    r = XftPatternGet (p, object, id, &v);
    if (r != XftResultMatch)
	return r;
    if (v.type != XftTypeMatrix)
        return XftResultTypeMismatch;
    *m = v.u.m;
    return XftResultMatch;
}


XftResult
XftPatternGetBool (XftPattern *p, const char *object, int id, Bool *b)
{
    XftValue	v;
    XftResult	r;

    r = XftPatternGet (p, object, id, &v);
    if (r != XftResultMatch)
	return r;
    if (v.type != XftTypeBool)
        return XftResultTypeMismatch;
    *b = v.u.b;
    return XftResultMatch;
}

XftPattern *
XftPatternDuplicate (XftPattern *orig)
{
    XftPattern	    *new;
    int		    i;
    XftValueList    *l;

    new = XftPatternCreate ();
    if (!new)
	goto bail0;

    for (i = 0; i < orig->num; i++)
    {
	for (l = orig->elts[i].values; l; l = l->next)
	    if (!XftPatternAdd (new, orig->elts[i].object, l->value, True))
		goto bail1;
    }

    return new;

bail1:
    XftPatternDestroy (new);
bail0:
    return 0;
}

XftPattern *
XftPatternVaBuild (XftPattern *orig, va_list va)
{
    XftPattern	*ret;
    
    _XftPatternVapBuild (ret, orig, va);
    return ret;
}

XftPattern *
XftPatternBuild (XftPattern *orig, ...)
{
    va_list	va;
    
    va_start (va, orig);
    _XftPatternVapBuild (orig, orig, va);
    va_end (va);
    return orig;
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d2 1
a2 1
 * $XFree86: xc/lib/Xft/xftpat.c,v 1.7 2002/02/15 07:36:11 keithp Exp $
d29 1
a29 1
FcPattern *
d32 1
a32 1
    FcPattern	*p;
d34 1
a34 1
    p = (FcPattern *) malloc (sizeof (FcPattern));
d44 7
a50 2
XftValueDestroy (FcValue v)
{ FcValueDestroy (v); }
d54 12
a65 1
{ FcValueListDestroy (l); }
d68 15
a82 2
XftPatternDestroy (FcPattern *p)
{ FcPatternDestroy (p); }
d85 40
a124 2
XftPatternFind (FcPattern *p, const char *object, Bool insert)
{ return FcPatternFind (p, object, insert); }
d127 53
a179 2
XftPatternAdd (FcPattern *p, const char *object, FcValue value, Bool append)
{ return FcPatternAdd (p, object, value, append); }
d182 1
a182 1
XftPatternDel (FcPattern *p, const char *object)
d205 1
a205 1
XftPatternAddInteger (FcPattern *p, const char *object, int i)
d207 1
a207 1
    FcValue	v;
d209 1
a209 1
    v.type = FcTypeInteger;
d215 1
a215 1
XftPatternAddDouble (FcPattern *p, const char *object, double d)
d217 1
a217 1
    FcValue	v;
d219 1
a219 1
    v.type = FcTypeDouble;
d226 1
a226 1
XftPatternAddString (FcPattern *p, const char *object, const char *s)
d228 1
a228 1
    FcValue	v;
d230 1
a230 1
    v.type = FcTypeString;
d236 1
a236 1
XftPatternAddMatrix (FcPattern *p, const char *object, const XftMatrix *s)
d238 1
a238 1
    FcValue	v;
d240 1
a240 1
    v.type = FcTypeMatrix;
d247 1
a247 1
XftPatternAddBool (FcPattern *p, const char *object, Bool b)
d249 1
a249 1
    FcValue	v;
d251 1
a251 1
    v.type = FcTypeBool;
d257 1
a257 1
XftPatternGet (FcPattern *p, const char *object, int id, FcValue *v)
d278 1
a278 1
XftPatternGetInteger (FcPattern *p, const char *object, int id, int *i)
d280 1
a280 1
    FcValue	v;
d287 1
a287 1
    case FcTypeDouble:
d290 1
a290 1
    case FcTypeInteger:
d300 1
a300 1
XftPatternGetDouble (FcPattern *p, const char *object, int id, double *d)
d302 1
a302 1
    FcValue	v;
d309 1
a309 1
    case FcTypeDouble:
d312 1
a312 1
    case FcTypeInteger:
d322 1
a322 1
XftPatternGetString (FcPattern *p, const char *object, int id, char **s)
d324 1
a324 1
    FcValue	v;
d330 1
a330 1
    if (v.type != FcTypeString)
d337 1
a337 1
XftPatternGetMatrix (FcPattern *p, const char *object, int id, XftMatrix **m)
d339 1
a339 1
    FcValue	v;
d345 1
a345 1
    if (v.type != FcTypeMatrix)
d353 1
a353 1
XftPatternGetBool (FcPattern *p, const char *object, int id, Bool *b)
d355 1
a355 1
    FcValue	v;
d361 1
a361 1
    if (v.type != FcTypeBool)
d367 2
a368 2
FcPattern *
XftPatternDuplicate (FcPattern *orig)
d370 1
a370 1
    FcPattern	    *new;
d393 2
a394 2
FcPattern *
XftPatternVaBuild (FcPattern *orig, va_list va)
d396 1
a396 1
    FcPattern	*ret;
d402 2
a403 2
FcPattern *
XftPatternBuild (FcPattern *orig, ...)
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d2 1
a2 1
 * $XFree86: xc/lib/Xft/xftpat.c,v 1.7 2002/02/15 07:36:11 keithp Exp $
d29 1
a29 1
FcPattern *
d32 1
a32 1
    FcPattern	*p;
d34 1
a34 1
    p = (FcPattern *) malloc (sizeof (FcPattern));
d44 7
a50 2
XftValueDestroy (FcValue v)
{ FcValueDestroy (v); }
d54 12
a65 1
{ FcValueListDestroy (l); }
d68 15
a82 2
XftPatternDestroy (FcPattern *p)
{ FcPatternDestroy (p); }
d85 40
a124 2
XftPatternFind (FcPattern *p, const char *object, Bool insert)
{ return FcPatternFind (p, object, insert); }
d127 53
a179 2
XftPatternAdd (FcPattern *p, const char *object, FcValue value, Bool append)
{ return FcPatternAdd (p, object, value, append); }
d182 1
a182 1
XftPatternDel (FcPattern *p, const char *object)
d205 1
a205 1
XftPatternAddInteger (FcPattern *p, const char *object, int i)
d207 1
a207 1
    FcValue	v;
d209 1
a209 1
    v.type = FcTypeInteger;
d215 1
a215 1
XftPatternAddDouble (FcPattern *p, const char *object, double d)
d217 1
a217 1
    FcValue	v;
d219 1
a219 1
    v.type = FcTypeDouble;
d226 1
a226 1
XftPatternAddString (FcPattern *p, const char *object, const char *s)
d228 1
a228 1
    FcValue	v;
d230 1
a230 1
    v.type = FcTypeString;
d236 1
a236 1
XftPatternAddMatrix (FcPattern *p, const char *object, const XftMatrix *s)
d238 1
a238 1
    FcValue	v;
d240 1
a240 1
    v.type = FcTypeMatrix;
d247 1
a247 1
XftPatternAddBool (FcPattern *p, const char *object, Bool b)
d249 1
a249 1
    FcValue	v;
d251 1
a251 1
    v.type = FcTypeBool;
d257 1
a257 1
XftPatternGet (FcPattern *p, const char *object, int id, FcValue *v)
d278 1
a278 1
XftPatternGetInteger (FcPattern *p, const char *object, int id, int *i)
d280 1
a280 1
    FcValue	v;
d287 1
a287 1
    case FcTypeDouble:
d290 1
a290 1
    case FcTypeInteger:
d300 1
a300 1
XftPatternGetDouble (FcPattern *p, const char *object, int id, double *d)
d302 1
a302 1
    FcValue	v;
d309 1
a309 1
    case FcTypeDouble:
d312 1
a312 1
    case FcTypeInteger:
d322 1
a322 1
XftPatternGetString (FcPattern *p, const char *object, int id, char **s)
d324 1
a324 1
    FcValue	v;
d330 1
a330 1
    if (v.type != FcTypeString)
d337 1
a337 1
XftPatternGetMatrix (FcPattern *p, const char *object, int id, XftMatrix **m)
d339 1
a339 1
    FcValue	v;
d345 1
a345 1
    if (v.type != FcTypeMatrix)
d353 1
a353 1
XftPatternGetBool (FcPattern *p, const char *object, int id, Bool *b)
d355 1
a355 1
    FcValue	v;
d361 1
a361 1
    if (v.type != FcTypeBool)
d367 2
a368 2
FcPattern *
XftPatternDuplicate (FcPattern *orig)
d370 1
a370 1
    FcPattern	    *new;
d393 2
a394 2
FcPattern *
XftPatternVaBuild (FcPattern *orig, va_list va)
d396 1
a396 1
    FcPattern	*ret;
d402 2
a403 2
FcPattern *
XftPatternBuild (FcPattern *orig, ...)
@

