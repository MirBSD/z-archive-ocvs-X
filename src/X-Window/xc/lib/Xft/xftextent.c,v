head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.04.53;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.04.53;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.32.34;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.19.20;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * $XFree86: xc/lib/Xft/xftextent.c,v 1.6 2001/04/01 14:00:01 tsi Exp $
 *
 * Copyright © 2000 Keith Packard, member of The XFree86 Project, Inc.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdlib.h>
#include <string.h>
#include "xftint.h"

void
XftTextExtents8 (Display	*dpy,
		 XftFont	*font,
		 XftChar8	*string, 
		 int		len,
		 XGlyphInfo	*extents)
{
    if (font->core)
    {
	XftCoreExtents8 (dpy, font->u.core.font, string, len, extents);
    }
#ifdef FREETYPE2
    else
    {
	XftRenderExtents8 (dpy, font->u.ft.font, string, len, extents);
    }
#endif
}

void
XftTextExtents16 (Display	    *dpy,
		  XftFont	    *font,
		  XftChar16	    *string, 
		  int		    len,
		  XGlyphInfo	    *extents)
{
    if (font->core)
    {
	XftCoreExtents16 (dpy, font->u.core.font, string, len, extents);
    }
#ifdef FREETYPE2
    else
    {
	XftRenderExtents16 (dpy, font->u.ft.font, string, len, extents);
    }
#endif
}

void
XftTextExtents32 (Display	*dpy,
		  XftFont	*font,
		  XftChar32	*string, 
		  int		len,
		  XGlyphInfo	*extents)
{
    if (font->core)
    {
	XftCoreExtents32 (dpy, font->u.core.font, string, len, extents);
    }
#ifdef FREETYPE2
    else
    {
	XftRenderExtents32 (dpy, font->u.ft.font, string, len, extents);
    }
#endif
}

void
XftTextExtentsUtf8 (Display	*dpy,
		    XftFont	*font,
		    XftChar8	*string, 
		    int		len,
		    XGlyphInfo	*extents)
{
    XftChar8	*src;
    XftChar32	c;
    XftChar32	lbuf[4096];
    XftChar32	*dst;
    XftChar8	*dst8;
    XftChar16	*dst16;
    XftChar32	*dst32;
    int		rlen, clen;
    int		width = 1;
    int		n;

    /* compute needed width */
    src = string;
    rlen = len;
    n = 0;
    while (rlen)
    {
	clen = XftUtf8ToUcs4 (src, &c, rlen);
	if (clen <= 0)	/* malformed UTF8 string */
	{
	    memset (extents, 0, sizeof (XGlyphInfo));
	    return;
	}
	if (c >= 0x10000)
	    width = 4;
	else if (c >= 0x100)
	{
	    if (width == 1)
		width = 2;
	}
	src += clen;
	rlen -= clen;
	n++;
    }
    dst = lbuf;
    if (n * width > sizeof (lbuf))
    {
	dst = (XftChar32 *) malloc (n * width);
	if (!dst)
	{
	    memset (extents, 0, sizeof (XGlyphInfo));
	    return;
	}
    }
    
    switch (width) {
    case 4:
	src = string;
	rlen = len;
	dst32 = dst;
	while (rlen)
	{
	    clen = XftUtf8ToUcs4 (src, &c, rlen);
	    if (clen <= 0)	/* malformed UTF8 string */
		return;
	    *dst32++ = c;
	    src += clen;
	    rlen -= clen;
	}
	dst32 = dst;
	XftTextExtents32 (dpy, font, dst32, n, extents);
	break;
    case 2:
	src = string;
	rlen = len;
	dst16 = (XftChar16 *) dst;
	while (rlen)
	{
	    clen = XftUtf8ToUcs4 (src, &c, rlen);
	    if (clen <= 0)	/* malformed UTF8 string */
		return;
	    *dst16++ = c;
	    src += clen;
	    rlen -= clen;
	}
	dst16 = (XftChar16 *) dst;
	XftTextExtents16 (dpy, font, dst16, n, extents);
	break;
    case 1:
	src = string;
	rlen = len;
	dst8 = (XftChar8 *) dst;
	while (rlen)
	{
	    clen = XftUtf8ToUcs4 (src, &c, rlen);
	    if (clen <= 0)	/* malformed UTF8 string */
		return;
	    *dst8++ = c;
	    src += clen;
	    rlen -= clen;
	}
	dst8 = (XftChar8 *) dst;
	XftTextExtents8 (dpy, font, dst8, n, extents);
	break;
    }
    if (dst != lbuf)
	free (dst);
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d2 1
a2 1
 * $XFree86: xc/lib/Xft/xftextent.c,v 1.10 2002/12/14 01:59:38 dawes Exp $
d28 1
a28 1
   
d30 5
a34 5
XftGlyphExtents (Display	    *dpy,
		 XftFont	    *pub,
		 _Xconst FT_UInt    *glyphs,
		 int		    nglyphs,
		 XGlyphInfo	    *extents)
d36 1
a36 34
    XftFontInt		*font = (XftFontInt *) pub;
    FT_UInt		missing[XFT_NMISSING];
    int			nmissing;
    int			n;
    _Xconst FT_UInt	*g;
    FT_UInt		glyph;
    XftGlyph		*xftg;
    FcBool		glyphs_loaded;
    int			x, y;
    int			left, right, top, bottom;
    int			overall_left, overall_right;
    int			overall_top, overall_bottom;
    
    g = glyphs;
    n = nglyphs;
    nmissing = 0;
    glyphs_loaded = FcFalse;
    while (n--)
	if (XftFontCheckGlyph (dpy, pub, FcFalse, *g++, missing, &nmissing))
	    glyphs_loaded = FcTrue;
    if (nmissing)
	XftFontLoadGlyphs (dpy, pub, FcFalse, missing, nmissing);
    g = glyphs;
    n = nglyphs;
    xftg = 0;
    while (n)
    {
	glyph = *g++;
	n--;
	if (glyph < font->num_glyphs &&
	    (xftg = font->glyphs[glyph]))
	    break;
    }
    if (n == 0 && !xftg)
d38 1
a38 6
	extents->width = 0;
	extents->height = 0;
	extents->x = 0;
	extents->y = 0;
	extents->yOff = 0;
	extents->xOff = 0;
d40 1
d43 1
a43 35
	x = 0;
	y = 0;
	overall_left = x - xftg->metrics.x;
	overall_top = y - xftg->metrics.y;
	overall_right = overall_left + (int) xftg->metrics.width;
	overall_bottom = overall_top + (int) xftg->metrics.height;
	x += xftg->metrics.xOff;
	y += xftg->metrics.yOff;
	while (n--)
	{
	    glyph = *g++;
	    if (glyph < font->num_glyphs && (xftg = font->glyphs[glyph]))
	    {
		left = x - xftg->metrics.x;
		top = y - xftg->metrics.y;
		right = left + (int) xftg->metrics.width;
		bottom = top + (int) xftg->metrics.height;
		if (left < overall_left)
		    overall_left = left;
		if (top < overall_top)
		    overall_top = top;
		if (right > overall_right)
		    overall_right = right;
		if (bottom > overall_bottom)
		    overall_bottom = bottom;
		x += xftg->metrics.xOff;
		y += xftg->metrics.yOff;
	    }
	}
	extents->x = -overall_left;
	extents->y = -overall_top;
	extents->width = overall_right - overall_left;
	extents->height = overall_bottom - overall_top;
	extents->xOff = x;
	extents->yOff = y;
d45 1
a45 2
    if (glyphs_loaded)
	_XftFontManageMemory (dpy, pub);
a47 2
#define NUM_LOCAL   1024

d49 5
a53 5
XftTextExtents8 (Display	    *dpy,
		 XftFont	    *pub,
		 _Xconst FcChar8    *string, 
		 int		    len,
		 XGlyphInfo	    *extents)
d55 5
a59 5
    FT_UInt	    *glyphs, glyphs_local[NUM_LOCAL];
    int		    i;

    if (len <= NUM_LOCAL)
	glyphs = glyphs_local;
d62 1
a62 6
	glyphs = malloc (len * sizeof (FT_UInt));
	if (!glyphs)
	{
	    memset (extents, '\0', sizeof (XGlyphInfo));
	    return;
	}
d64 1
a64 5
    for (i = 0; i < len; i++)
	glyphs[i] = XftCharIndex (dpy, pub, string[i]);
    XftGlyphExtents (dpy, pub, glyphs, len, extents);
    if (glyphs != glyphs_local)
	free (glyphs);
d68 5
a72 5
XftTextExtents16 (Display	    *dpy,
		  XftFont	    *pub,
		  _Xconst FcChar16  *string, 
		  int		    len,
		  XGlyphInfo	    *extents)
d74 5
a78 5
    FT_UInt	    *glyphs, glyphs_local[NUM_LOCAL];
    int		    i;

    if (len <= NUM_LOCAL)
	glyphs = glyphs_local;
d81 1
a81 6
	glyphs = malloc (len * sizeof (FT_UInt));
	if (!glyphs)
	{
	    memset (extents, '\0', sizeof (XGlyphInfo));
	    return;
	}
d83 1
a83 5
    for (i = 0; i < len; i++)
	glyphs[i] = XftCharIndex (dpy, pub, string[i]);
    XftGlyphExtents (dpy, pub, glyphs, len, extents);
    if (glyphs != glyphs_local)
	free (glyphs);
d87 22
a108 12
XftTextExtents32 (Display	    *dpy,
		  XftFont	    *pub,
		  _Xconst FcChar32  *string, 
		  int		    len,
		  XGlyphInfo	    *extents)
{
    FT_UInt	    *glyphs, glyphs_local[NUM_LOCAL];
    int		    i;

    if (len <= NUM_LOCAL)
	glyphs = glyphs_local;
    else
d110 2
a111 2
	glyphs = malloc (len * sizeof (FT_UInt));
	if (!glyphs)
d113 1
a113 1
	    memset (extents, '\0', sizeof (XGlyphInfo));
d116 10
d127 2
a128 24
    for (i = 0; i < len; i++)
	glyphs[i] = XftCharIndex (dpy, pub, string[i]);
    XftGlyphExtents (dpy, pub, glyphs, len, extents);
    if (glyphs != glyphs_local)
	free (glyphs);
}

void
XftTextExtentsUtf8 (Display	    *dpy,
		    XftFont	    *pub,
		    _Xconst FcChar8 *string, 
		    int		    len,
		    XGlyphInfo	    *extents)
{
    FT_UInt	    *glyphs, *glyphs_new, glyphs_local[NUM_LOCAL];
    FcChar32	    ucs4;
    int		    i;
    int		    l;
    int		    size;

    i = 0;
    glyphs = glyphs_local;
    size = NUM_LOCAL;
    while (len && (l = FcUtf8ToUcs4 (string, &ucs4, len)) > 0)
d130 2
a131 1
	if (i == size)
d133 2
a134 13
	    glyphs_new = malloc (size * 2 * sizeof (FT_UInt));
	    if (!glyphs_new)
	    {
		if (glyphs != glyphs_local)
		    free (glyphs);
		memset (extents, '\0', sizeof (XGlyphInfo));
		return;
	    }
	    memcpy (glyphs_new, glyphs, size * sizeof (FT_UInt));
	    size *= 2;
	    if (glyphs != glyphs_local)
		free (glyphs);
	    glyphs = glyphs_new;
a135 3
	glyphs[i++] = XftCharIndex (dpy, pub, ucs4);
	string += l;
	len -= l;
d137 39
a175 25
    XftGlyphExtents (dpy, pub, glyphs, i, extents);
    if (glyphs != glyphs_local)
	free (glyphs);
}

void
XftTextExtentsUtf16 (Display		*dpy,
		     XftFont		*pub,
		     _Xconst FcChar8	*string, 
		     FcEndian		endian,
		     int		len,
		     XGlyphInfo		*extents)
{
    FT_UInt	    *glyphs, *glyphs_new, glyphs_local[NUM_LOCAL];
    FcChar32	    ucs4;
    int		    i;
    int		    l;
    int		    size;

    i = 0;
    glyphs = glyphs_local;
    size = NUM_LOCAL;
    while (len && (l = FcUtf16ToUcs4 (string, endian, &ucs4, len)) > 0)
    {
	if (i == size)
d177 2
a178 6
	    glyphs_new = malloc (size * 2 * sizeof (FT_UInt));
	    if (!glyphs_new)
	    {
		if (glyphs != glyphs_local)
		    free (glyphs);
		memset (extents, '\0', sizeof (XGlyphInfo));
d180 7
a186 10
	    }
	    memcpy (glyphs_new, glyphs, size * sizeof (FT_UInt));
	    size *= 2;
	    if (glyphs != glyphs_local)
		free (glyphs);
	    glyphs = glyphs_new;
	}
	glyphs[i++] = XftCharIndex (dpy, pub, ucs4);
	string += l;
	len -= l;
d188 2
a189 3
    XftGlyphExtents (dpy, pub, glyphs, i, extents);
    if (glyphs != glyphs_local)
	free (glyphs);
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d2 1
a2 1
 * $XFree86: xc/lib/Xft/xftextent.c,v 1.10 2002/12/14 01:59:38 dawes Exp $
d28 1
a28 1
   
d30 5
a34 5
XftGlyphExtents (Display	    *dpy,
		 XftFont	    *pub,
		 _Xconst FT_UInt    *glyphs,
		 int		    nglyphs,
		 XGlyphInfo	    *extents)
d36 1
a36 34
    XftFontInt		*font = (XftFontInt *) pub;
    FT_UInt		missing[XFT_NMISSING];
    int			nmissing;
    int			n;
    _Xconst FT_UInt	*g;
    FT_UInt		glyph;
    XftGlyph		*xftg;
    FcBool		glyphs_loaded;
    int			x, y;
    int			left, right, top, bottom;
    int			overall_left, overall_right;
    int			overall_top, overall_bottom;
    
    g = glyphs;
    n = nglyphs;
    nmissing = 0;
    glyphs_loaded = FcFalse;
    while (n--)
	if (XftFontCheckGlyph (dpy, pub, FcFalse, *g++, missing, &nmissing))
	    glyphs_loaded = FcTrue;
    if (nmissing)
	XftFontLoadGlyphs (dpy, pub, FcFalse, missing, nmissing);
    g = glyphs;
    n = nglyphs;
    xftg = 0;
    while (n)
    {
	glyph = *g++;
	n--;
	if (glyph < font->num_glyphs &&
	    (xftg = font->glyphs[glyph]))
	    break;
    }
    if (n == 0 && !xftg)
d38 1
a38 6
	extents->width = 0;
	extents->height = 0;
	extents->x = 0;
	extents->y = 0;
	extents->yOff = 0;
	extents->xOff = 0;
d40 1
d43 1
a43 35
	x = 0;
	y = 0;
	overall_left = x - xftg->metrics.x;
	overall_top = y - xftg->metrics.y;
	overall_right = overall_left + (int) xftg->metrics.width;
	overall_bottom = overall_top + (int) xftg->metrics.height;
	x += xftg->metrics.xOff;
	y += xftg->metrics.yOff;
	while (n--)
	{
	    glyph = *g++;
	    if (glyph < font->num_glyphs && (xftg = font->glyphs[glyph]))
	    {
		left = x - xftg->metrics.x;
		top = y - xftg->metrics.y;
		right = left + (int) xftg->metrics.width;
		bottom = top + (int) xftg->metrics.height;
		if (left < overall_left)
		    overall_left = left;
		if (top < overall_top)
		    overall_top = top;
		if (right > overall_right)
		    overall_right = right;
		if (bottom > overall_bottom)
		    overall_bottom = bottom;
		x += xftg->metrics.xOff;
		y += xftg->metrics.yOff;
	    }
	}
	extents->x = -overall_left;
	extents->y = -overall_top;
	extents->width = overall_right - overall_left;
	extents->height = overall_bottom - overall_top;
	extents->xOff = x;
	extents->yOff = y;
d45 1
a45 2
    if (glyphs_loaded)
	_XftFontManageMemory (dpy, pub);
a47 2
#define NUM_LOCAL   1024

d49 5
a53 5
XftTextExtents8 (Display	    *dpy,
		 XftFont	    *pub,
		 _Xconst FcChar8    *string, 
		 int		    len,
		 XGlyphInfo	    *extents)
d55 5
a59 5
    FT_UInt	    *glyphs, glyphs_local[NUM_LOCAL];
    int		    i;

    if (len <= NUM_LOCAL)
	glyphs = glyphs_local;
d62 1
a62 6
	glyphs = malloc (len * sizeof (FT_UInt));
	if (!glyphs)
	{
	    memset (extents, '\0', sizeof (XGlyphInfo));
	    return;
	}
d64 1
a64 5
    for (i = 0; i < len; i++)
	glyphs[i] = XftCharIndex (dpy, pub, string[i]);
    XftGlyphExtents (dpy, pub, glyphs, len, extents);
    if (glyphs != glyphs_local)
	free (glyphs);
d68 5
a72 5
XftTextExtents16 (Display	    *dpy,
		  XftFont	    *pub,
		  _Xconst FcChar16  *string, 
		  int		    len,
		  XGlyphInfo	    *extents)
d74 5
a78 5
    FT_UInt	    *glyphs, glyphs_local[NUM_LOCAL];
    int		    i;

    if (len <= NUM_LOCAL)
	glyphs = glyphs_local;
d81 1
a81 6
	glyphs = malloc (len * sizeof (FT_UInt));
	if (!glyphs)
	{
	    memset (extents, '\0', sizeof (XGlyphInfo));
	    return;
	}
d83 1
a83 5
    for (i = 0; i < len; i++)
	glyphs[i] = XftCharIndex (dpy, pub, string[i]);
    XftGlyphExtents (dpy, pub, glyphs, len, extents);
    if (glyphs != glyphs_local)
	free (glyphs);
d87 22
a108 12
XftTextExtents32 (Display	    *dpy,
		  XftFont	    *pub,
		  _Xconst FcChar32  *string, 
		  int		    len,
		  XGlyphInfo	    *extents)
{
    FT_UInt	    *glyphs, glyphs_local[NUM_LOCAL];
    int		    i;

    if (len <= NUM_LOCAL)
	glyphs = glyphs_local;
    else
d110 2
a111 2
	glyphs = malloc (len * sizeof (FT_UInt));
	if (!glyphs)
d113 1
a113 1
	    memset (extents, '\0', sizeof (XGlyphInfo));
d116 10
d127 2
a128 24
    for (i = 0; i < len; i++)
	glyphs[i] = XftCharIndex (dpy, pub, string[i]);
    XftGlyphExtents (dpy, pub, glyphs, len, extents);
    if (glyphs != glyphs_local)
	free (glyphs);
}

void
XftTextExtentsUtf8 (Display	    *dpy,
		    XftFont	    *pub,
		    _Xconst FcChar8 *string, 
		    int		    len,
		    XGlyphInfo	    *extents)
{
    FT_UInt	    *glyphs, *glyphs_new, glyphs_local[NUM_LOCAL];
    FcChar32	    ucs4;
    int		    i;
    int		    l;
    int		    size;

    i = 0;
    glyphs = glyphs_local;
    size = NUM_LOCAL;
    while (len && (l = FcUtf8ToUcs4 (string, &ucs4, len)) > 0)
d130 2
a131 1
	if (i == size)
d133 2
a134 13
	    glyphs_new = malloc (size * 2 * sizeof (FT_UInt));
	    if (!glyphs_new)
	    {
		if (glyphs != glyphs_local)
		    free (glyphs);
		memset (extents, '\0', sizeof (XGlyphInfo));
		return;
	    }
	    memcpy (glyphs_new, glyphs, size * sizeof (FT_UInt));
	    size *= 2;
	    if (glyphs != glyphs_local)
		free (glyphs);
	    glyphs = glyphs_new;
a135 3
	glyphs[i++] = XftCharIndex (dpy, pub, ucs4);
	string += l;
	len -= l;
d137 39
a175 25
    XftGlyphExtents (dpy, pub, glyphs, i, extents);
    if (glyphs != glyphs_local)
	free (glyphs);
}

void
XftTextExtentsUtf16 (Display		*dpy,
		     XftFont		*pub,
		     _Xconst FcChar8	*string, 
		     FcEndian		endian,
		     int		len,
		     XGlyphInfo		*extents)
{
    FT_UInt	    *glyphs, *glyphs_new, glyphs_local[NUM_LOCAL];
    FcChar32	    ucs4;
    int		    i;
    int		    l;
    int		    size;

    i = 0;
    glyphs = glyphs_local;
    size = NUM_LOCAL;
    while (len && (l = FcUtf16ToUcs4 (string, endian, &ucs4, len)) > 0)
    {
	if (i == size)
d177 2
a178 6
	    glyphs_new = malloc (size * 2 * sizeof (FT_UInt));
	    if (!glyphs_new)
	    {
		if (glyphs != glyphs_local)
		    free (glyphs);
		memset (extents, '\0', sizeof (XGlyphInfo));
d180 7
a186 10
	    }
	    memcpy (glyphs_new, glyphs, size * sizeof (FT_UInt));
	    size *= 2;
	    if (glyphs != glyphs_local)
		free (glyphs);
	    glyphs = glyphs_new;
	}
	glyphs[i++] = XftCharIndex (dpy, pub, ucs4);
	string += l;
	len -= l;
d188 2
a189 3
    XftGlyphExtents (dpy, pub, glyphs, i, extents);
    if (glyphs != glyphs_local)
	free (glyphs);
@

