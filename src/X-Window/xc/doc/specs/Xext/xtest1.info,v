head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.20.00.30;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.00.30;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.03.28;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@XTestGenerateEvent is supposed to cause the server to generate a key or
button event, exactly as one would be generated if a user pressed a key
or pushed a mouse button.  Without knowing how your server does that for
normal input events, I can't tell you exactly how that should look, but 
it would be something like:

void
XTestGenerateEvent (dev_type, key_or_button_code, direction, x, y)
    int dev_type;		/* MOUSE = X pointer, KEYBOARD = X keyboard */
    int key_or_button_code;	/* code to stash in event */
    int direction;          	/* XTestKEY_UP or XTestKEY_DOWN */
    int x,y;			/* location of event  */
    {
    int type;
    xEvent *xE;		

    if (key_or_button_code < 8)		/* must be a button */
	if (direction == XTestKEY_UP)	/* it's a release event*/
	    type = ButtonRelease;
	else
	    type = ButtonPress;
    else				/* must be a key */
	if (direction == XTestKEY_UP)	/* it's a release event*/
	    type = KeyRelease;
	else
	    type = KeyPress;

    /* get an xEvent from some place where ProcessInputEvents can find it. */
    /* I don't know how your implementation does this. */

    xE = somehow_get_xEvent();

    xE->u.u.type = type;
    xE->u.u.detail = key_or_button_code;
    xE->u.keyButtonPointer.time = GetTimeInMillis();
    xE->u.keyButtonPointer.rootX = x;
    xE->u.keyButtonPointer.rootY = y;

    /* now call ProcessInputEvents to send the event to DIX for routing to the
       appropriate client(s). */

    ProcessInputEvents();
    }


XTestJumpPointer performs the equivalent function for pointer events.

void
XTestJumpPointer (x, y, dev_type)
    int x,y;
    int dev_type;
    {
    /* get an xEvent from some place where ProcessInputEvents can find it. */
    /* I don't know how your implementation does this. */

    xE = somehow_get_xEvent();

    xE->u.u.type = MotionNotify;
    xE->u.keyButtonPointer.time = GetTimeInMillis();
    xE->u.keyButtonPointer.rootX = x;
    xE->u.keyButtonPointer.rootY = y;

    /* Call some place in your server code that takes care of acceleration and 
       threshold.  Also constrain the move to the screen bounds.  You
       may also have a motion history buffer that should be updated with
       the information in this event.
       */

    deal_with_acceleration ();
    constrainxy();
    update_motion_history();

    /* now call ProcessInputEvents to send the event to DIX for routing to the
       appropriate client(s). */

    ProcessInputEvents();
    }

XTestGetPointerPos returns the server's notion of where the X pointer currently
is.  This is probably kept by ddx in some implementation-specific structure:

Implementation_Specific_Struct *i;

void
XTestGetPointerPos (x,y)
    short *x,*y;
    {
    *x = i->x;
    *y = i->y;
    }
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
