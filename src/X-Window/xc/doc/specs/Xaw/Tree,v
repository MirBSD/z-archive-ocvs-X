head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.20.00.29;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.00.29;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.03.19;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@.\" $Xorg: Tree,v 1.3 2000/08/17 19:42:29 cpqbld Exp $
.NH 2
Tree Widget
.LP
.XS
	Tree Widget
.XE
.IN "Tree widget" "" "@@DEF@@"
.Ds 0
.TA 2.0i
.ta 2.0i
.sp
Application Header file	<X11/Xaw/Tree.h>
.IN "Box.h" ""
Class Header file	<X11/Xaw/TreeP.h>
.IN "TreeP.h" ""
Class		treeWidgetClass
.IN "treeWidgetClass" ""
Class Name	Tree
.IN "Tree widget" "class name"
Superclass	Constraint
.sp
.De
.LP
The Tree widget provides geometry management of arbitrary widgets arranged
in a directed, acyclic graph (i.e., a tree).  The hierarchy is constructed 
by attaching a constraint resource called \fBtreeParent\fP to each widget
indicating which other node in the tree should be treated as the widget's
superior.  The structure of the tree is shown by laying out the nodes
in the standard format for tree diagrams with lines drawn connecting each
node with its children.
.LP
The Tree sizes itself according to the needs of its children and is not
intended to be resized by its parent.  Instead, it should be placed inside
another composite widget (such as the \fBPorthole\fP or \fBViewport\fP) 
that can be used to scroll around in the tree.
.NH 3
Resources
.LP
When creating a Tree widget instance, the following resources are
retrieved from the argument list or from the resource database:
.LP
.IN "Box widget" "resources"
.TS H
expand;
lw(1i) lw(1i) lw(1i) lw(.5i) lw(2i).
_
.sp 3p
.TB
Name	Class	Type	Notes	Default Value
.sp 3p
_
.TH
.R
.sp 3p
accelerators	Accelerators	AcceleratorTable		NULL
ancestorSensitive	AncestorSensitive	Boolean	D	True
autoReconfigure	AutoReconfigure	Boolean		False
background	Background	Pixel		XtDefaultBackground
backgroundPixmap	Pixmap	Pixmap		XtUnspecifiedPixmap
borderColor	BorderColor	Pixel		XtDefaultForeground
borderPixmap	Pixmap	Pixmap		XtUnspecifiedPixmap
borderWidth	BorderWidth	Dimension		1
children	ReadOnly	WidgetList	R	NULL
colormap	Colormap	Colormap		Parent's Colormap
depth	Depth	int	C	Parent's Depth
destroyCallback	Callback	XtCallbackList		NULL
foreground	Foreground	Pixel		XtDefaultForeground
gravity	Gravity	XtGravity		WestGravity
height	Height	Dimension	A	see \fBLayout Semantics\fP
hSpace	HSpace	Dimension		4
lineWidth	LineWidth	Dimension		0
mappedWhenManaged	MappedWhenManaged	Boolean		True
numChildren	ReadOnly	Cardinal	R	0
screen	Screen	Screen	R	Parent's Screen
sensitive	Sensitive	Boolean		True
vSpace	VSpace	Dimension		4
translations	Translations	TranslationTable		NULL
width	Width	Dimension	A	see \fBLayout Semantics\fP
x	Position	Position		0
y	Position	Position		0
.sp 3p
_
.TE
.IP \fBautoReconfigure\fP 1.5i
Whether or not to layout the tree every time a node is added or removed.
.Bg
.Gp
.Bc
.Bp
.Bw
.Ch
.Cm
.Dp
.Dc
.Lg
.IP \fBgravity\fP 1.5i
.IN "conversions" "Gravity"
Specifies the side of the widget from which the tree should grow.  Valid
values include \fBWestGravity\fP, \fBNorthGravity\fP, \fBEastGravity\fP, and
\fBSouthGravity\fP.
.Rs "\fP the legal values\fB"
.Hw
.IP \fBhSpace\fP 1.5i
.br
.ns
.IP \fBvSpace\fP 1.5i
The amount of space, in pixels, to leave between the children.  This
resource specifies the amount of space left between the outermost
children and the edge of the box. 
.IP \fBlineWidth\fP 1.5i
The width of the lines from nodes that do not have a \fBtreeGC\fP
constraint resource to their children.
.Mm
.Nc
.Sc
.Se
.Tr
.Xy
.NH 3
Constraint Resources
.LP
.IN "Tree widget" "constraint resources"
Each child of the Tree widget must specify its superior node in the tree.  In
addition, it may specify a GC to use when drawing a line between it and its
inferior nodes.
.TS H
lw(1i) lw(1i) lw(1i) lw(.5i) lw(2i).
_
.sp 3p
.TB
Name	Class	Type	Notes	Default Value
.sp 3p
_
.TH
.R
.sp 3p
treeGC	TreeGC	GC		NULL
treeParent	TreeParent	Widget		NULL
.sp 3p
_
.TE
.IP \fBtreeGC\fP 1.5i
This specifies the GC to use when drawing lines between this widget and its
inferiors in the tree.  If this resource is not specified, the Tree's
\fBforeground\fP and \fBlineWidth\fP will be used.
.IP \fBtreeParent\fP 1.5i
This specifies the superior node in the tree for this widget.  The default is
for the node to have no superior (and to therefore be at the top of the tree).
.NH 3
Layout Semantics
.IN "Tree widget" "layout semantics"
.LP
Each time a child is managed or unmanaged, the Tree widget will attempt
to reposition the remaining children to fix the shape of the tree if the
.B autoReconfigure
resource is set.  Children at the top (most superior) of the tree are
drawn at
the side specified by the 
.B gravity
resource.
.LP
After positioning all children, the Tree widget attempts to shrink its
own size to the minimum dimensions required for the layout.
.NH 3
Convenience Routines
.LP
.IN "Tree widget" "convenience routines"
The most efficient way to layout a tree is to set
.B autoReconfigure
to False and then use the 
.B XawTreeForceLayout
routine to arrange the children.
.IN "XawTreeForceLayout" "" "@@DEF@@"
.FD 0
void XawTreeForceLayout(\fIw\fP)
.br
	Widget \fIw\fP;
.FN
.IP \fIw\fP 1i
Specifies the Tree widget.
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
