head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.19.59.33;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.19.59.33;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.01.51;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@'\" te
'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Jan 14 18:30
.ds Dm 01 alphafunc
.ds Xs 25246 5 alphafunc.gl
.TH GLALPHAFUNC 3G
.SH NAME
.B "glAlphaFunc
\- specify the alpha test function

.SH C SPECIFICATION
void \f3glAlphaFunc\fP(
GLenum \fIfunc\fP,
.nf
.ta \w'\f3void \fPglAlphaFunc( 'u
	GLclampf \fIref\fP )
.fi

.SH PARAMETERS
.TP \w'\f2func\fP\ \ 'u 
\f2func\fP
Specifies the alpha comparison function.
Symbolic constants
\%\f3GL_NEVER\fP,
\%\f3GL_LESS\fP,
\%\f3GL_EQUAL\fP,
\%\f3GL_LEQUAL\fP,
\%\f3GL_GREATER\fP,
\%\f3GL_NOTEQUAL\fP,
\%\f3GL_GEQUAL\fP, and
\%\f3GL_ALWAYS\fP are accepted. The initial value is \%\f3GL_ALWAYS\fP.
.TP
\f2ref\fP
Specifies the reference value that incoming alpha values are compared to.
This value is clamped to the range [0,\ 1],
where 0 represents the lowest possible alpha value
and 1 the highest possible value.
The initial reference value is 0.
.SH DESCRIPTION
The alpha test discards fragments depending on the outcome of a comparison
between an incoming fragment's alpha value and a constant reference value.
\%\f3glAlphaFunc\fP specifies the reference value and the comparison function.
The comparison is performed only if alpha testing is enabled. By
default, it is not enabled. 
(See 
\%\f3glEnable\fP and \%\f3glDisable\fP of \%\f3GL_ALPHA_TEST\fP.)
.P
\f2func\fP and \f2ref\fP specify the conditions under which
the pixel is drawn.
The incoming alpha value is compared to \f2ref\fP
using the function specified by \f2func\fP.
If the value passes the comparison,
the incoming fragment is drawn
if it also passes subsequent stencil and depth buffer tests. 
If the value fails the comparison,
no change is made to the frame buffer at that pixel location. The
comparison functions are as follows: 
.TP 18
\%\f3GL_NEVER\fP
Never passes. 
.TP
\%\f3GL_LESS\fP
Passes if the incoming alpha value is less than the reference value.
.TP
\%\f3GL_EQUAL\fP
Passes if the incoming alpha value is equal to the reference value.
.TP
\%\f3GL_LEQUAL\fP
Passes if the incoming alpha value is less than or equal to the reference value.
.TP
\%\f3GL_GREATER\fP 
Passes if the incoming alpha value is greater than the reference value.
.TP
\%\f3GL_NOTEQUAL\fP
Passes if the incoming alpha value is not equal to the reference value.
.TP
\%\f3GL_GEQUAL\fP
Passes if the incoming alpha value is greater than or equal to
the reference value.
.TP
\%\f3GL_ALWAYS\fP
Always passes (initial value). 
.P
\%\f3glAlphaFunc\fP operates on all pixel write operations,
including those resulting from the scan conversion of points,
lines,
polygons,
and bitmaps,
and from pixel draw and copy operations.
\%\f3glAlphaFunc\fP does not affect screen clear operations.
.SH NOTES
Alpha testing is performed only in RGBA mode.
.SH ERRORS
\%\f3GL_INVALID_ENUM\fP is generated if \f2func\fP is not an accepted value.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \%\f3glAlphaFunc\fP
is executed between the execution of \%\f3glBegin\fP
and the corresponding execution of \%\f3glEnd\fP.
.SH ASSOCIATED GETS
\%\f3glGet\fP with argument \%\f3GL_ALPHA_TEST_FUNC\fP
.br
\%\f3glGet\fP with argument \%\f3GL_ALPHA_TEST_REF\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_ALPHA_TEST\fP
.SH SEE ALSO
\%\f3glBlendFunc(3G)\fP,
\%\f3glClear(3G)\fP,
\%\f3glDepthFunc(3G)\fP,
\%\f3glEnable(3G)\fP,
\%\f3glStencilFunc(3G)\fP
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
