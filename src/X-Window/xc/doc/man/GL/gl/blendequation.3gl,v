head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.19.59.33;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.19.59.33;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.01.52;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@'\" te
'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Jan 14 18:30
.ds Dm 01 blendequa
.ds Xs 36751 7 blendequation.gl
.TH GLBLENDEQUATION 3G
.SH NAME
.B "glBlendEquation
\- set the blend equation

.SH C SPECIFICATION
void \f3glBlendEquation\fP(
GLenum \fImode\fP )
.nf
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\f2mode\fP\ \ 'u 
\f2mode\fP
specifies how source and destination colors are combined.
It must be \%\f3GL_FUNC_ADD\fP, \%\f3GL_FUNC_SUBTRACT\fP,
\%\f3GL_FUNC_REVERSE_SUBTRACT\fP, \%\f3GL_MIN\fP, \%\f3GL_MAX\fP.

.SH DESCRIPTION
The blend equation determines how a new pixel (the ``source'' color)
is combined with a pixel already in the framebuffer (the ``destination''
color).
.TP
\%\f3GL_MIN\fP
sets the blend equation so that each component of the result color
is the minimum of the corresponding components of the source and destination
colors.
.TP
\%\f3GL_MAX\fP
sets the blend equation so that each component of the result color
is the maximum of the corresponding components of the source and destination
colors.
.P
The remaining blend equations use the source and destination blend factors
specified by \%\f3glBlendFunc\fP.
See \%\f3glBlendFunc\fP for a description of the various blend factors. 
.P
In the equations that follow, source and destination
color components are referred to as
$(R sub s, G sub s, B sub s, A sub s )$ 
and
$(R sub d, G sub d, B sub d, A sub d )$,
respectively.
The result color is referred to as 
$(R sub r, G sub r, B sub r, A sub r )$.
The source and destination blend factors are denoted 
$(s sub R, s sub G, s sub B, s sub A )$ and 
$(d sub R, d sub G, d sub B, d sub A )$, respectively.
For these equations all color components are understood to have values
in the range [0,\ 1].
.TP
\%\f3GL_FUNC_ADD\fP
sets the blend equation so that the source and destination
data are added.
Each component of the source color is
multiplied by the corresponding source factor, then
each component of the destination color is multiplied
by the corresponding destination factor.
The result is the componentwise sum of the two products, clamped to the
range [0,\ 1].
.P
.RS
.nf
.IP
$Rr ~=~ mark   min (1, ~R sub s~s sub R ~+~ R sub d~d sub R )$
$Gr ~=~ lineup min (1, ~G sub s~s sub G ~+~ G sub d~d sub G )$
$Br ~=~ lineup min (1, ~B sub s~s sub B ~+~ B sub d~d sub B )$
$Ar ~=~ lineup min (1, ~A sub s~s sub A ~+~ A sub d~d sub A )$
.fi
.RE
.TP
\%\f3GL_FUNC_SUBTRACT\fP
Is like \%\f3GL_FUNC_ADD\fP except the product of the destination factor and
the destination color is componentwise subtracted from the product of the
source factor and the source color.
The result is clamped to the range [0,\ 1].
.RS
.nf
.IP
$Rr ~=~ mark   max (0 , ~R sub s~s sub R ~-~ R sub d~d sub R )$
$Gr ~=~ lineup max (0 , ~G sub s~s sub G ~-~ G sub d~d sub G )$
$Br ~=~ lineup max (0 , ~B sub s~s sub B ~-~ B sub d~d sub B )$
$Ar ~=~ lineup max (0 , ~A sub s~s sub A ~-~ A sub d~d sub A )$
.fi
.RE
.TP
\%\f3GL_FUNC_REVERSE_SUBTRACT\fP
Is like \%\f3GL_FUNC_ADD\fP except the product of the source factor and the
source color is componentwise subtracted from the product of the destination
factor and the destination color.
The result is clamped to the range [0,\ 1].
.RS
.nf
.IP
$Rr ~=~ mark   max (0 , ~R sub d~d sub R ~-~ R sub s~s sub R )$
$Gr ~=~ lineup max (0 , ~G sub d~d sub G ~-~ G sub s~s sub G )$
$Br ~=~ lineup max (0 , ~B sub d~d sub B ~-~ B sub s~s sub B )$
$Ar ~=~ lineup max (0 , ~A sub d~d sub A ~-~ A sub s~s sub A )$
.fi
.RE
.P
The \%\f3GL_MIN\fP and \%\f3GL_MAX\fP equations are useful for applications
that analyze
.br
image data (image thresholding against a constant color,
for example).
The \%\f3GL_FUNC_ADD\fP equation is useful
for antialiasing and transparency, among other things.
.P
Initially, the blend equation is set to \%\f3GL_FUNC_ADD\fP.
.P
.SH NOTES
\%\f3glBlendEquation\fP is part of the \%\f3GL_ARB_imaging\fP subset. \%\f3glBlendEquation\fP is present only
if \%\f3GL_ARB_imaging\fP is returned when \%\f3glGetString\fP is called with
\%\f3GL_EXTENSIONS\fP as its argument.
.P
The \%\f3GL_MIN\fP, and \%\f3GL_MAX\fP equations do not use
the source or destination factors, only the source and destination colors.
.P
.SH ERRORS
\%\f3GL_INVALID_ENUM\fP is generated if \f2mode\fP is not one of 
\%\f3GL_FUNC_ADD\fP, \%\f3GL_FUNC_SUBTRACT\fP, \%\f3GL_FUNC_REVERSE_SUBTRACT\fP,
\%\f3GL_MAX\fP, or \%\f3GL_MIN\fP.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \%\f3glBlendEquation\fP is executed
between the execution of \%\f3glBegin\fP and the corresponding
execution of \%\f3glEnd\fP.
.SH ASSOCIATED GETS
.TP
\%\f3glGet\fP with an argument of \%\f3GL_BLEND_EQUATION\fP
.SH SEE ALSO
\%\f3glGetString(3G)\fP,
\%\f3glBlendColor(3G)\fP,
\%\f3glBlendFunc(3G)\fP
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
