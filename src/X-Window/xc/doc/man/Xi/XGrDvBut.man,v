head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.1
date	2003.03.22.19.59.46;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.19.59.46;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.23.33;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.02.27;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@.\"
.\" $XFree86: xc/doc/man/Xi/XGrDvBut.man,v 1.2 2001/01/27 18:20:21 dawes Exp $
.\"
.\"
.\" Copyright ([\d,\s]*) by Hewlett-Packard Company, Ardent Computer, 
.\" 
.\" Permission to use, copy, modify, distribute, and sell this documentation 
.\" for any purpose and without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\" Ardent, and Hewlett-Packard make no representations about the 
.\" suitability for any purpose of the information in this document.  It is 
.\" provided \`\`as is'' without express or implied warranty.
.\" 
.\" $Xorg: XGrDvBut.man,v 1.3 2000/08/17 19:41:56 cpqbld Exp $
.ds xL Programming With Xlib
.TH XGrabDeviceButton 3X11 __xorgversion__ "X FUNCTIONS"
.SH NAME
XGrabDeviceButton, XUngrabDeviceButton \- grab/ungrab extension input device buttons
.SH SYNTAX
\fB
.nf
XGrabDeviceButton\^(\^\fIdisplay\fP, \fIdevice\fP\^, \fIbutton\fP\^, \fImodifiers\fP\^, \fImodifier_device\fP\^, \fIgrab_window\fP\^,
\fIowner_events\fP\^, \fIevent_count\fP\^, \fIevent_list\fP\^, \fIthis_device_mode\fP\^, \fIother_devices_mode\fP\^)
      Display *\fIdisplay\fP\^;
      XDevice *\fIdevice\fP\^;
      unsigned int \fIbutton\fP\^;
      unsigned int \fImodifiers\fP\^;
      XDevice *\fImodifier_device\fP\^;
      Window \fIgrab_window\fP\^;
      Bool \fIowner_events\fP\^;
      unsigned int \fIevent_count\fP\^;	
      XEventClass *\fIevent_list\fP\^;	
      int \fIthis_device_mode\fP\^, \fIother_devices_mode\fP\^;

XUngrabDeviceButton\^(\^\fIdisplay\fP\^, \fIdevice\fP\^, \fIbutton\fP\^, \fImodifiers\fP\^, \fImodifier_device\fP\^, \fIgrab_window\fP\^)
      Display *\fIdisplay\fP\^;
      XDevice *\fIdevice\fP\^;
      unsigned int \fIbutton\fP\^;
      unsigned int \fImodifiers\fP\^;
      XDevice *\fImodifier_device\fP\^;
      Window \fIgrab_window\fP\^;
.fi
\fP
.SH ARGUMENTS
.ds Bu grabbed or released
.TP 12
.I display
Specifies the connection to the X server.
.TP 12
.I device
Specifies the device that is to be \*(Bu
.TP 12
.I button
Specifies the device button that is to be \*(Bu or
\fIAnyButton\fP.
.TP 12
.I modifiers
Specifies the set of keymasks or
\fIAnyModifier\fP.
The mask is the bitwise inclusive OR of the valid keymask bits.
Valid bits are: Shiftmask, LockMask, ControlMask, Mod1Mask, Mod2Mask,
Mod3Mask, Mod4Mask, Mod5Mask.
.TP 12
.I modifier_device
specifies the device whose modifiers are to be used.  If the modifier_device
specified is NULL, the X keyboard will be used as the modifier_device.
.TP 12
.I grab_window
Specifies the grab window.
.TP 12
.I owner_events
Specifies a Boolean value that indicates whether the device 
events are to be reported as usual or reported with respect to the grab window 
if selected by the event list.
.TP 12
.I event_count
Specifies the number of event classes in the event list.
.TP 12
.I event_list
Specifies which events are reported to the client.
.TP 12
.I this_device_mode
Specifies further processing of events from this device.
You can pass \fIGrabModeSync\fP or \fIGrabModeAsync\fP.
.TP 12
.I other_devices_mode
Specifies further processing of events from all other devices.
You can pass \fIGrabModeSync\fP or \fIGrabModeAsync\fP.
.SH DESCRIPTION
The \fIXGrabDeviceButton\fP request establishes a passive grab.
In the future,
the device is actively grabbed (as for \fIXGrabDevice\fP,
the last-grab time is set to the time at which the button was pressed
(as transmitted in the
\fIDeviceButtonPress\fP
event), and the
\fIDeviceButtonPress\fP
event is reported if all of the following conditions are true:
.IP \(bu 5
The device is not grabbed, and the specified button is logically pressed
when the specified modifier keys are logically down on the specified
modifier device
and no other buttons or modifier keys are logically down.
.IP \(bu 5
Either the grab window is an ancestor of (or is) the focus window, OR
the grab window is a descendent of the focus window and contains the
device.
.IP \(bu 5
A passive grab on the same button/modifier combination does not exist
on any ancestor of grab_window.
.LP
The interpretation of the remaining arguments is as for
\fIXGrabDevice\fP.
The active grab is terminated automatically when the logical state of the
device has all buttons released
(independent of the logical state of the modifier keys).
.LP
Note that the logical state of a device (as seen by client applications)
may lag the physical state if device event processing is frozen.
.LP
This request overrides all previous grabs by the same client on the same
button/modifier combinations on the same window.
A modifiers of 
\fIAnyModifier\fP 
is equivalent to issuing the grab request for all
possible modifier combinations (including the combination of no modifiers).  
It is not required that all modifiers specified have currently assigned 
KeyCodes.
A button of 
\fIAnyButton\fP 
is equivalent to
issuing the request for all possible buttons.
Otherwise, it is not required that the specified button currently be assigned
to a physical button.
.LP
A modifier_device of NULL indicates that the X keyboard is to be used as the
modifier_device.
.LP
If some other client has already issued a 
\fIXGrabDeviceButton\fP
with the same button/modifier combination on the same window, a
\fIBadAccess\fP 
error results.
When using 
\fIAnyModifier\fP 
or 
\fIAnyButton\fP , 
the request fails completely,
and a
\fIBadAccess\fP
error results (no grabs are
established) if there is a conflicting grab for any combination.
\fIXGrabDeviceButton\fP
has no effect on an active grab.
.LP
\fIXGrabDeviceButton\fP
can generate
\fIBadClass\fP,
\fIBadDevice\fP,
\fIBadMatch\fP,
\fIBadValue\fP,
and
\fIBadWindow\fP 
errors.
.P 
The \fIXUngrabDeviceButton\fP
request releases the passive grab for a 
button/modifier combination on the specified window if
it was grabbed by this client.
A modifier of \fIAnyModifier\fP is
equivalent to issuing 
the ungrab request for all possible modifier combinations, including 
the combination of no modifiers.
A button of 
\fIAnyButton\fP 
is equivalent to issuing the
request for all possible buttons.
\fIXUngrabDeviceButton\fP
has no effect on an active grab.
.LP
A modifier_device of NULL indicates that the X keyboard should be used as
the modifier_device.
.LP
\fIXUngrabDeviceButton\fP
can generate
\fIBadDevice\fP,
\fIBadMatch\fP,
\fIBadValue\fP
and
\fIBadWindow\fP 
errors.
.SH DIAGNOSTICS
.TP 12
\fIBadDevice\fP
An invalid device was specified.  The specified device does not exist or has 
not been opened by this client via \fIXOpenInputDevice\fP.  This error may
also occur if the specified device is the X keyboard or X pointer device.
.TP 12
\fIBadMatch\fP
This error may occur if an \fIXGrabDeviceButton\fP request was made
specifying
a device that has no buttons, or specifying a modifier device
that has no keys.
.TP 12
\fIBadValue\fP
Some numeric value falls outside the range of values accepted by the request.
Unless a specific range is specified for an argument, the full range defined
by the argument's type is accepted.  Any argument defined as a set of
alternatives can generate this error.
.TP 12
\fIBadWindow\fP
A value for a Window argument does not name a defined Window.
.SH "SEE ALSO"
XAllowDeviceEvents(3X),
.br
XGrabDevice(3X),
.br
XGrabDeviceKey(3X),
.br
\fI\*(xL\fP
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d2 1
a2 1
.\" $XFree86: xc/doc/man/Xi/XGrDvBut.man,v 1.3 2003/04/28 22:18:15 herrb Exp $
d22 20
a41 11
.HP
int XGrabDeviceButton\^(\^Display *\fIdisplay\fP\^, XDevice *\fIdevice\fP\^,
unsigned int \fIbutton\fP\^, unsigned int \fImodifiers\fP\^, XDevice
*\fImodifier_device\fP\^, Window \fIgrab_window\fP\^, Bool
\fIowner_events\fP\^, unsigned int \fIevent_count\fP\^, XEventClass
*\fIevent_list\fP\^, int \fIthis_device_mode\fP\^, int
\fIother_devices_mode\fP\^); 
.HP
int XUngrabDeviceButton\^(\^Display *\fIdisplay\fP\^, XDevice *\fIdevice\fP\^,
unsigned int \fIbutton\fP\^, unsigned int \fImodifiers\fP\^, XDevice
*\fImodifier_device\fP\^, Window \fIgrab_window\fP\^); 
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d2 1
a2 1
.\" $XFree86: xc/doc/man/Xi/XGrDvBut.man,v 1.3 2003/04/28 22:18:15 herrb Exp $
d22 20
a41 11
.HP
int XGrabDeviceButton\^(\^Display *\fIdisplay\fP\^, XDevice *\fIdevice\fP\^,
unsigned int \fIbutton\fP\^, unsigned int \fImodifiers\fP\^, XDevice
*\fImodifier_device\fP\^, Window \fIgrab_window\fP\^, Bool
\fIowner_events\fP\^, unsigned int \fIevent_count\fP\^, XEventClass
*\fIevent_list\fP\^, int \fIthis_device_mode\fP\^, int
\fIother_devices_mode\fP\^); 
.HP
int XUngrabDeviceButton\^(\^Display *\fIdisplay\fP\^, XDevice *\fIdevice\fP\^,
unsigned int \fIbutton\fP\^, unsigned int \fImodifiers\fP\^, XDevice
*\fImodifier_device\fP\^, Window \fIgrab_window\fP\^); 
@

