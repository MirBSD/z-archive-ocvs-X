head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.19.59.37;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.19.59.37;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.02.06;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@'\" e
'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 6 March 1997
.ds Re Release 1.2.0
.ds Dp May 02 11:53
.ds Dm 37 nurbscurv
.ds Xs 25594 5 nurbscurve.gl
.TH GLUNURBSCURVE 3G
.SH NAME
.B "gluNurbsCurve
\- define the shape of a NURBS curve

.SH C SPECIFICATION
void \f3gluNurbsCurve\fP(
GLUnurbs* \fInurb\fP,
.nf
.ta \w'\f3void \fPgluNurbsCurve( 'u
	GLint \fIknotCount\fP,
	GLfloat \fI*knots\fP,
	GLint \fIstride\fP,
	GLfloat \fI*control\fP,
	GLint \fIorder\fP,
	GLenum \fItype\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIknotCount\fP\ \ 'u 
\f2nurb\fP
Specifies the NURBS object (created with \%\f3gluNewNurbsRenderer\fP).
.TP
\f2knotCount\fP
Specifies the number of knots in \f2knots\fP.
\f2knotCount\fP equals the number of control points plus the order.
.TP
\f2knots\fP
Specifies an array of \f2knotCount\fP nondecreasing knot values.
.TP
\f2stride\fP
Specifies the offset (as a number of single-precision floating-point values)
between successive curve control points.
.TP
\f2control\fP
Specifies a pointer to an array of control points. The coordinates must
agree with \f2type\fP, specified below.
.TP
\f2order\fP
Specifies the order of the NURBS curve. \f2order\fP equals degree + 1, hence
a cubic curve has an order of 4.
.TP
\f2type\fP
Specifies the type of the curve. If this curve is defined within a 
\%\f3gluBeginCurve\fP/\%\f3gluEndCurve\fP pair, then 
the type can be any of the valid
one-dimensional evaluator types (such as \%\f3GL_MAP1_VERTEX_3\fP or 
\%\f3GL_MAP1_COLOR_4\fP). Between a \%\f3gluBeginTrim\fP/\%\f3gluEndTrim\fP pair,
the only valid types are \%\f3GLU_MAP1_TRIM_2\fP and \%\f3GLU_MAP1_TRIM_3\fP.
.SH DESCRIPTION
Use \%\f3gluNurbsCurve\fP to describe a NURBS curve.
.P
When \%\f3gluNurbsCurve\fP appears between a \%\f3gluBeginCurve\fP/\%\f3gluEndCurve\fP pair, it is 
used to describe a curve to be rendered.
Positional, texture, and color coordinates are associated
by presenting each as a separate \%\f3gluNurbsCurve\fP between a 
\%\f3gluBeginCurve\fP/\%\f3gluEndCurve\fP pair. No more than
one call to \%\f3gluNurbsCurve\fP for each of color, position, and texture
data can be made within a single \%\f3gluBeginCurve\fP/\%\f3gluEndCurve\fP
pair. Exactly one call must be made to describe the position of the 
curve (a \f2type\fP of \%\f3GL_MAP1_VERTEX_3\fP or \%\f3GL_MAP1_VERTEX_4\fP).
.P
When \%\f3gluNurbsCurve\fP appears between a \%\f3gluBeginTrim\fP/\%\f3gluEndTrim\fP pair, it is 
used to describe a trimming curve on a NURBS surface. If \f2type\fP is
\%\f3GLU_MAP1_TRIM_2\fP, then it describes a curve in two-dimensional (\f2u\fP 
and \f2v\fP)
parameter space. If it is \%\f3GLU_MAP1_TRIM_3\fP, then it describes a 
curve in two-dimensional homogeneous (\f2u\fP, \f2v\fP, and \f2w\fP) 
parameter space.
See the \%\f3gluBeginTrim\fP reference page for more discussion about trimming
curves.
.SH EXAMPLE
The following commands render a textured NURBS curve with normals:
.sp
.Ex
gluBeginCurve(nobj);
   gluNurbsCurve(nobj, ..., GL_MAP1_TEXTURE_COORD_2);
   gluNurbsCurve(nobj, ..., GL_MAP1_NORMAL);
   gluNurbsCurve(nobj, ..., GL_MAP1_VERTEX_4);
gluEndCurve(nobj);
.Ee
.sp
.SH NOTES
To define trim curves which stitch well, use \%\f3gluPwlCurve\fP.
.SH SEE ALSO
\%\f3gluBeginCurve(3G)\fP, \%\f3gluBeginTrim(3G)\fP, \%\f3gluNewNurbsRenderer(3G)\fP, \%\f3gluPwlCurve(3G)\fP

@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
