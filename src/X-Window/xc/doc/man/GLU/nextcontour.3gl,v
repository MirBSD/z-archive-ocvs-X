head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.19.59.37;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.19.59.37;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.02.06;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@'\" e
'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 6 March 1997
.ds Re Release 1.2.0
.ds Dp May 02 11:53
.ds Dm 37 nextconto
.ds Xs 37451 5 nextcontour.gl
.TH GLUNEXTCONTOUR 3G
.SH NAME
.B "gluNextContour
\- mark the beginning of another contour

.SH C SPECIFICATION
void \f3gluNextContour\fP(
GLUtesselator* \fItess\fP,
.nf
.ta \w'\f3void \fPgluNextContour( 'u
	GLenum \fItype\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\f2tess\fP\ \ 'u 
\f2tess\fP
Specifies the tessellation object (created with \%\f3gluNewTess\fP).
.TP
\f2type\fP
Specifies the type of the contour being defined. Valid values are
\%\f3GLU_EXTERIOR\fP,
\%\f3GLU_INTERIOR\fP,
\%\f3GLU_UNKNOWN\fP,
\%\f3GLU_CCW\fP, and
\%\f3GLU_CW\fP.
.SH DESCRIPTION
\%\f3gluNextContour\fP is used in describing polygons with multiple contours. After the first
contour has been described through a series of \%\f3gluTessVertex\fP calls, 
a \%\f3gluNextContour\fP call indicates that the previous contour is complete and that the
next contour is about to begin.
Another series of \%\f3gluTessVertex\fP calls is then used to describe the new 
contour. This process can be repeated until all contours have been described.
.P
\f2type\fP defines what type of contour follows.
The legal contour types are as follows:
.TP 18
\%\f3GLU_EXTERIOR\fP
An exterior contour defines an exterior boundary of the polygon.
.TP
\%\f3GLU_INTERIOR\fP
An interior contour defines an interior boundary of the polygon (such as 
a hole).
.TP
\%\f3GLU_UNKNOWN\fP
An unknown contour is analyzed by the library to determine if it is interior
or exterior.
.TP
\%\f3GLU_CCW\fP, 
.TP
\%\f3GLU_CW\fP
The first \%\f3GLU_CCW\fP or \%\f3GLU_CW\fP contour defined is considered to 
be exterior. All other contours are considered to be exterior if they 
are oriented in the same direction (clockwise or counterclockwise) as 
the first contour, and interior if they are not.
.P
If one contour is of type \%\f3GLU_CCW\fP or \%\f3GLU_CW\fP, then all 
contours must be of the same type (if they are not, then all \%\f3GLU_CCW\fP
and \%\f3GLU_CW\fP contours will be changed to \%\f3GLU_UNKNOWN\fP).
.P
Note that there is no real difference between the \%\f3GLU_CCW\fP and 
\%\f3GLU_CW\fP contour types.
.P
Before the first contour is described, \%\f3gluNextContour\fP can be called to 
define the type of the first contour.
If \%\f3gluNextContour\fP is not called before the first contour, then the first contour is 
marked \%\f3GLU_EXTERIOR\fP.
.P
This command is obsolete and is provided for backward compatibility
only. Calls to \%\f3gluNextContour\fP are mapped to \%\f3gluTessEndContour\fP
followed by 
\%\f3gluTessBeginContour\fP.
.SH EXAMPLE
A quadrilateral with a triangular hole in it can be described as follows:
.sp
.Ex
gluBeginPolygon(tobj);
   gluTessVertex(tobj, v1, v1);
   gluTessVertex(tobj, v2, v2);
   gluTessVertex(tobj, v3, v3);
   gluTessVertex(tobj, v4, v4);
gluNextContour(tobj, GLU_INTERIOR);
   gluTessVertex(tobj, v5, v5);
   gluTessVertex(tobj, v6, v6);
   gluTessVertex(tobj, v7, v7);
gluEndPolygon(tobj);
.Ee
.SH SEE ALSO
\%\f3gluBeginPolygon(3G)\fP, \%\f3gluNewTess(3G)\fP, \%\f3gluTessCallback(3G)\fP, \%\f3gluTessVertex(3G)\fP,
\%\f3gluTessBeginContour(3G)\fP

@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
