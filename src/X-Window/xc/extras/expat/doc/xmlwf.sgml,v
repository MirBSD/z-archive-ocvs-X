head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.05.16.16.29.21;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.13.15.15.15;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.13.15.15.15;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.11.09.18.33.35;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.48;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@<!doctype refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [

<!-- Process this file with docbook-to-man to generate an nroff manual
     page: `docbook-to-man manpage.sgml > manpage.1'.  You may view
     the manual page with: `docbook-to-man manpage.sgml | nroff -man |
     less'.  A typical entry in a Makefile or Makefile.am is:

manpage.1: manpage.sgml
	docbook-to-man $< > $@@
  -->

  <!-- Fill in your name for FIRSTNAME and SURNAME. -->
  <!ENTITY dhfirstname "<firstname>Scott</firstname>">
  <!ENTITY dhsurname   "<surname>Bronson</surname>">
  <!-- Please adjust the date whenever revising the manpage. -->
  <!ENTITY dhdate      "<date>December  5, 2001</date>">
  <!-- SECTION should be 1-8, maybe w/ subsection other parameters are
       allowed: see man(7), man(1). -->
  <!ENTITY dhsection   "<manvolnum>1</manvolnum>">
  <!ENTITY dhemail     "<email>bronson@@rinspin.com</email>">
  <!ENTITY dhusername  "Scott Bronson">
  <!ENTITY dhucpackage "<refentrytitle>XMLWF</refentrytitle>">
  <!ENTITY dhpackage   "xmlwf">

  <!ENTITY debian      "<productname>Debian GNU/Linux</productname>">
  <!ENTITY gnu         "<acronym>GNU</acronym>">
]>

<refentry>
  <refentryinfo>
    <address>
      &dhemail;
    </address>
    <author>
      &dhfirstname;
      &dhsurname;
    </author>
    <copyright>
      <year>2001</year>
      <holder>&dhusername;</holder>
    </copyright>
    &dhdate;
  </refentryinfo>
  <refmeta>
    &dhucpackage;

    &dhsection;
  </refmeta>
  <refnamediv>
    <refname>&dhpackage;</refname>

    <refpurpose>Determines if an XML document is well-formed</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <cmdsynopsis>
      <command>&dhpackage;</command>
	  <arg><option>-s</option></arg>
	  <arg><option>-n</option></arg>
	  <arg><option>-p</option></arg>
	  <arg><option>-x</option></arg>

	  <arg><option>-e <replaceable>encoding</replaceable></option></arg>
	  <arg><option>-w</option></arg>

	  <arg><option>-d <replaceable>output-dir</replaceable></option></arg>
	  <arg><option>-c</option></arg>
	  <arg><option>-m</option></arg>

	  <arg><option>-r</option></arg>
	  <arg><option>-t</option></arg>

	  <arg><option>-v</option></arg>

	  <arg>file ...</arg>
    </cmdsynopsis>
  </refsynopsisdiv>
 
  <refsect1>
    <title>DESCRIPTION</title>

    <para>
	<command>&dhpackage;</command> uses the Expat library to determine
	if an XML document is well-formed.  It is non-validating.
	</para>

	<para>
	If you do not specify any files on the command-line,
	and you have a recent version of &dhpackage;, the input
	file will be read from stdin.
	</para>

  </refsect1>

  <refsect1>
    <title>WELL-FORMED DOCUMENTS</title>

	<para>
	  A well-formed document must adhere to the
	  following rules:
	</para>

	<itemizedlist>
      <listitem><para>
	    The file begins with an XML declaration.  For instance,
		<literal>&lt;?xml version="1.0" standalone="yes"?&gt;</literal>.
		<emphasis>NOTE:</emphasis> &dhpackage; does not currently
		check for a valid XML declaration.
      </para></listitem>
      <listitem><para>
		Every start tag is either empty (&lt;tag/&gt;)
		or has a corresponding end tag.
      </para></listitem>
      <listitem><para>
	    There is exactly one root element.  This element must contain
		all other elements in the document.  Only comments, white
		space, and processing instructions may come after the close
		of the root element.
      </para></listitem>
      <listitem><para>
		All elements nest properly.
      </para></listitem>
      <listitem><para>
		All attribute values are enclosed in quotes (either single
		or double).
      </para></listitem>
    </itemizedlist>

	<para>
	  If the document has a DTD, and it strictly complies with that
	  DTD, then the document is also considered <emphasis>valid</emphasis>.
	  &dhpackage; is a non-validating parser -- it does not check the DTD.
	  However, it does support external entities (see the -x option).
	</para>
  </refsect1>

  <refsect1>
    <title>OPTIONS</title>

<para>
When an option includes an argument, you may specify the argument either
separate ("d output") or mashed ("-doutput").  &dhpackage; supports both.
</para>

    <variablelist>

      <varlistentry>
        <term><option>-c</option></term>
        <listitem>
		<para>
  If the input file is well-formed and &dhpackage; doesn't
  encounter any errors, the input file is simply copied to
  the output directory unchanged.
  This implies no namespaces (turns off -n) and
  requires -d to specify an output file.
  		</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-d output-dir</option></term>
        <listitem>
		<para>
  Specifies a directory to contain transformed
  representations of the input files.
  By default, -d outputs a canonical representation
  (described below).
  You can select different output formats using -c and -m.
	  </para>
	  <para>
  The output filenames will
  be exactly the same as the input filenames or "STDIN" if the input is
  coming from STDIN.  Therefore, you must be careful that the
  output file does not go into the same directory as the input
  file.  Otherwise, &dhpackage; will delete the input file before
  it generates the output file (just like running
  <literal>cat &lt; file &gt; file</literal> in most shells).
	  </para>
	  <para> 
  Two structurally equivalent XML documents have a byte-for-byte
  identical canonical XML representation.
  Note that ignorable white space is considered significant and
  is treated equivalently to data.
  More on canonical XML can be found at
  http://www.jclark.com/xml/canonxml.html .
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-e encoding</option></term>
        <listitem>
		<para>
   Specifies the character encoding for the document, overriding
   any document encoding declaration.  &dhpackage;
   has four built-in encodings: 
   	<literal>US-ASCII</literal>,
	<literal>UTF-8</literal>,
	<literal>UTF-16</literal>, and
    <literal>ISO-8859-1</literal>.
	Also see the -w option.
	   </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-m</option></term>
        <listitem>
		<para>
  Outputs some strange sort of XML file that completely
  describes the the input file, including character postitions.
  Requires -d to specify an output file.
	   </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-n</option></term>
        <listitem>
		<para>
  Turns on namespace processing.  (describe namespaces)
  -c disables namespaces.
	   </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-p</option></term>
        <listitem>
		<para>
    Tells xmlwf to process external DTDs and parameter
    entities.
	 </para>
	 <para>
	Normally &dhpackage; never parses parameter entities.
	-p tells it to always parse them.
	-p implies -x.
	   </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-r</option></term>
        <listitem>
		<para>
   Normally &dhpackage; memory-maps the XML file before parsing.
   -r turns off memory-mapping and uses normal file IO calls instead.
   Of course, memory-mapping is automatically turned off
   when reading from STDIN.
	   </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-s</option></term>
        <listitem>
		<para>
  Prints an error if the document is not standalone. 
  A document is standalone if it has no external subset and no
  references to parameter entities.
	   </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-t</option></term>
        <listitem>
		<para>
  Turns on timings.  This tells Expat to parse the entire file,
  but not perform any processing.
  This gives a fairly accurate idea of the raw speed of Expat itself
  without client overhead.
   -t turns off most of the output options (-d, -m -c, ...).
	   </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-v</option></term>
        <listitem>
		<para>
  Prints the version of the Expat library being used, and then exits.
	   </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-w</option></term>
        <listitem>
		<para>
  Enables Windows code pages.
  Normally, &dhpackage; will throw an error if it runs across
  an encoding that it is not equipped to handle itself.  With
  -w, &dhpackage; will try to use a Windows code page.  See
  also -e.
	   </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-x</option></term>
        <listitem>
		<para>
  Turns on parsing external entities.
  </para>
<para>
  Non-validating parsers are not required to resolve external
  entities, or even expand entities at all.
  Expat always expands internal entities (?),
  but external entity parsing must be enabled explicitly.
  </para>
  <para>
  External entities are simply entities that obtain their
  data from outside the XML file currently being parsed.
  </para>
  <para>
  This is an example of an internal entity:
<literallayout>
&lt;!ENTITY vers '1.0.2'&gt;
</literallayout>
  </para>
  <para>
  And here are some examples of external entities:

<literallayout>
&lt;!ENTITY header SYSTEM "header-&amp;vers;.xml"&gt;  (parsed)
&lt;!ENTITY logo SYSTEM "logo.png" PNG&gt;         (unparsed)
</literallayout>

	   </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--</option></term>
        <listitem>
		<para>
    For some reason, &dhpackage; specifically ignores "--"
	anywhere it appears on the command line.
	   </para>
        </listitem>
      </varlistentry>
    </variablelist>

	<para>
	Older versions of &dhpackage; do not support reading from STDIN.
	</para>
  </refsect1>

  <refsect1>
  <title>OUTPUT</title>
    <para>
	If an input file is not well-formed, &dhpackage; outputs
	a single line describing the problem to STDOUT.
	If a file is well formed, &dhpackage; outputs nothing.
	Note that the result code is <emphasis>not</emphasis> set.
	</para>
  </refsect1>
  
  <refsect1>
    <title>BUGS</title>
	<para>
	According to the W3C standard, an XML file without a
	declaration at the beginning is not considered well-formed.
	However, &dhpackage; allows this to pass.
	</para>
	<para>
	&dhpackage; returns a 0 - noerr result, even if the file is
	not well-formed.  There is no good way for a program to use
	xmlwf to quickly check a file -- it must parse xmlwf's STDOUT.
	</para>
    <para>
    The errors should go to STDERR, not stdout.
    </para>
	<para>
	There should be a way to get -d to send its output to STDOUT
	rather than forcing the user to send it to a file.
	</para>
	<para>
	I have no idea why anyone would want to use the -d, -c
	and -m options.  If someone could explain it to me, I'd
	like to add this information to this manpage.
	</para>
  </refsect1>

  <refsect1>
    <title>ALTERNATIVES</title>
	<para>
	  Here are some XML validators on the web:

<literallayout>
http://www.hcrc.ed.ac.uk/~richard/xml-check.html
http://www.stg.brown.edu/service/xmlvalid/
http://www.scripting.com/frontier5/xml/code/xmlValidator.html
http://www.xml.com/pub/a/tools/ruwf/check.html
&nbsp;    (on a page with no less than 15 ads!  Shame!)
</literallayout>

		 </para>
  </refsect1>

  <refsect1>
    <title>SEE ALSO</title>
	<para>

<literallayout>
The Expat home page:        http://www.libexpat.org/
The W3 XML specification:   http://www.w3.org/TR/REC-xml
</literallayout>

	</para>
  </refsect1>

  <refsect1>
    <title>AUTHOR</title>
    <para>
	  This manual page was written by &dhusername; &dhemail; for
      the &debian; system (but may be used by others).  Permission is
      granted to copy, distribute and/or modify this document under
      the terms of the <acronym>GNU</acronym> Free Documentation
      License, Version 1.1.
	</para>
  </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d82 2
a83 3
	<command>&dhpackage;</command> uses the Expat library to
	determine if an XML document is well-formed.  It is
	non-validating.
d87 3
a89 3
	If you do not specify any files on the command-line, and you
	have a recent version of <command>&dhpackage;</command>, the
	input file will be read from standard input.
d106 1
a106 2
		<emphasis>NOTE:</emphasis>
		<command>&dhpackage;</command> does not currently
d131 2
a132 3
	  <command>&dhpackage;</command> is a non-validating parser --
	  it does not check the DTD.  However, it does support
	  external entities (see the <option>-x</option> option).
d141 1
a141 3
separately ("<option>-d</option> output") or concatenated with the
option ("<option>-d</option>output").  <command>&dhpackage;</command>
supports both.
d150 2
a151 2
  If the input file is well-formed and <command>&dhpackage;</command>
  doesn't encounter any errors, the input file is simply copied to
d153 2
a154 2
  This implies no namespaces (turns off <option>-n</option>) and
  requires <option>-d</option> to specify an output file.
d165 1
a165 1
  By default, <option>-d</option> outputs a canonical representation
d167 1
a167 2
  You can select different output formats using <option>-c</option>
  and <option>-m</option>.
d172 1
a172 1
  coming from standard input.  Therefore, you must be careful that the
d174 2
a175 2
  file.  Otherwise, <command>&dhpackage;</command> will delete the
  input file before it generates the output file (just like running
d194 2
a195 2
   any document encoding declaration.  <command>&dhpackage;</command>
   supports four built-in encodings:
d199 2
a200 2
	<literal>ISO-8859-1</literal>.
   Also see the <option>-w</option> option.
d211 1
a211 1
  Requires <option>-d</option> to specify an output file.
d221 1
a221 1
  <option>-c</option> disables namespaces.
d234 3
a236 3
   Normally <command>&dhpackage;</command> never parses parameter
   entities.  <option>-p</option> tells it to always parse them.
   <option>-p</option> implies <option>-x</option>.
d245 2
a246 5
   Normally <command>&dhpackage;</command> memory-maps the XML file
   before parsing; this can result in faster parsing on many
   platforms.
   <option>-r</option> turns off memory-mapping and uses normal file
   IO calls instead.
d248 1
a248 1
   when reading from standard input.
a249 7
		<para>
   Use of memory-mapping can cause some platforms to report
   substantially higher memory usage for
   <command>&dhpackage;</command>, but this appears to be a matter of
   the operating system reporting memory in a strange way; there is
   not a leak in <command>&dhpackage;</command>.
           </para>
d272 1
a272 3
  <option>-t</option> turns off most of the output options
  (<option>-d</option>, <option>-m</option>, <option>-c</option>,
  ...).
d281 1
a281 3
  Prints the version of the Expat library being used, including some
  information on the compile-time configuration of the library, and
  then exits.
d290 5
a294 5
  Enables support for Windows code pages.
  Normally, <command>&dhpackage;</command> will throw an error if it
  runs across an encoding that it is not equipped to handle itself.  With
  <option>-w</option>, &dhpackage; will try to use a Windows code
  page.  See also <option>-e</option>.
d337 2
a338 10
    (Two hyphens.)
    Terminates the list of options.  This is only needed if a filename
    starts with a hyphen.  For example:
	   </para>
<literallayout>
&dhpackage; -- -myfile.xml
</literallayout>
		<para>
    will run <command>&dhpackage;</command> on the file
    <filename>-myfile.xml</filename>.
d345 1
a345 2
    Older versions of <command>&dhpackage;</command> do not support
    reading from standard input.
d352 3
a354 4
	If an input file is not well-formed,
	<command>&dhpackage;</command> prints a single line describing
	the problem to standard output.  If a file is well formed,
	<command>&dhpackage;</command> outputs nothing.
d364 1
a364 1
	However, <command>&dhpackage;</command> allows this to pass.
d367 3
a369 8
	<command>&dhpackage;</command> returns a 0 - noerr result,
	even if the file is not well-formed.  There is no good way for
	a program to use <command>&dhpackage;</command> to quickly
	check a file -- it must parse <command>&dhpackage;</command>'s
	standard output.
	</para>
	<para>
	The errors should go to standard error, not standard output.
d371 3
d375 2
a376 3
	There should be a way to get <option>-d</option> to send its
	output to standard output rather than forcing the user to send
	it to a file.
d379 3
a381 4
	I have no idea why anyone would want to use the
	<option>-d</option>, <option>-c</option>, and
	<option>-m</option> options.  If someone could explain it to
	me, I'd like to add this information to this manpage.
d395 1
@


1.1.1.1
log
@Import OpenBSD tree again due to CVS bugs
@
text
@@


1.1.1.2
log
@sync with OpenBSD's idea of X-Window as of now();
@
text
@d82 2
a83 3
	<command>&dhpackage;</command> uses the Expat library to
	determine if an XML document is well-formed.  It is
	non-validating.
d87 3
a89 3
	If you do not specify any files on the command-line, and you
	have a recent version of <command>&dhpackage;</command>, the
	input file will be read from standard input.
d106 1
a106 2
		<emphasis>NOTE:</emphasis>
		<command>&dhpackage;</command> does not currently
d131 2
a132 3
	  <command>&dhpackage;</command> is a non-validating parser --
	  it does not check the DTD.  However, it does support
	  external entities (see the <option>-x</option> option).
d141 1
a141 3
separately ("<option>-d</option> output") or concatenated with the
option ("<option>-d</option>output").  <command>&dhpackage;</command>
supports both.
d150 2
a151 2
  If the input file is well-formed and <command>&dhpackage;</command>
  doesn't encounter any errors, the input file is simply copied to
d153 2
a154 2
  This implies no namespaces (turns off <option>-n</option>) and
  requires <option>-d</option> to specify an output file.
d165 1
a165 1
  By default, <option>-d</option> outputs a canonical representation
d167 1
a167 2
  You can select different output formats using <option>-c</option>
  and <option>-m</option>.
d172 1
a172 1
  coming from standard input.  Therefore, you must be careful that the
d174 2
a175 2
  file.  Otherwise, <command>&dhpackage;</command> will delete the
  input file before it generates the output file (just like running
d194 2
a195 2
   any document encoding declaration.  <command>&dhpackage;</command>
   supports four built-in encodings:
d199 2
a200 2
	<literal>ISO-8859-1</literal>.
   Also see the <option>-w</option> option.
d211 1
a211 1
  Requires <option>-d</option> to specify an output file.
d221 1
a221 1
  <option>-c</option> disables namespaces.
d234 3
a236 3
   Normally <command>&dhpackage;</command> never parses parameter
   entities.  <option>-p</option> tells it to always parse them.
   <option>-p</option> implies <option>-x</option>.
d245 2
a246 5
   Normally <command>&dhpackage;</command> memory-maps the XML file
   before parsing; this can result in faster parsing on many
   platforms.
   <option>-r</option> turns off memory-mapping and uses normal file
   IO calls instead.
d248 1
a248 1
   when reading from standard input.
a249 7
		<para>
   Use of memory-mapping can cause some platforms to report
   substantially higher memory usage for
   <command>&dhpackage;</command>, but this appears to be a matter of
   the operating system reporting memory in a strange way; there is
   not a leak in <command>&dhpackage;</command>.
           </para>
d272 1
a272 3
  <option>-t</option> turns off most of the output options
  (<option>-d</option>, <option>-m</option>, <option>-c</option>,
  ...).
d281 1
a281 3
  Prints the version of the Expat library being used, including some
  information on the compile-time configuration of the library, and
  then exits.
d290 5
a294 5
  Enables support for Windows code pages.
  Normally, <command>&dhpackage;</command> will throw an error if it
  runs across an encoding that it is not equipped to handle itself.  With
  <option>-w</option>, &dhpackage; will try to use a Windows code
  page.  See also <option>-e</option>.
d337 2
a338 10
    (Two hyphens.)
    Terminates the list of options.  This is only needed if a filename
    starts with a hyphen.  For example:
	   </para>
<literallayout>
&dhpackage; -- -myfile.xml
</literallayout>
		<para>
    will run <command>&dhpackage;</command> on the file
    <filename>-myfile.xml</filename>.
d345 1
a345 2
    Older versions of <command>&dhpackage;</command> do not support
    reading from standard input.
d352 3
a354 4
	If an input file is not well-formed,
	<command>&dhpackage;</command> prints a single line describing
	the problem to standard output.  If a file is well formed,
	<command>&dhpackage;</command> outputs nothing.
d364 1
a364 1
	However, <command>&dhpackage;</command> allows this to pass.
d367 3
a369 8
	<command>&dhpackage;</command> returns a 0 - noerr result,
	even if the file is not well-formed.  There is no good way for
	a program to use <command>&dhpackage;</command> to quickly
	check a file -- it must parse <command>&dhpackage;</command>'s
	standard output.
	</para>
	<para>
	The errors should go to standard error, not standard output.
d371 3
d375 2
a376 3
	There should be a way to get <option>-d</option> to send its
	output to standard output rather than forcing the user to send
	it to a file.
d379 3
a381 4
	I have no idea why anyone would want to use the
	<option>-d</option>, <option>-c</option>, and
	<option>-m</option> options.  If someone could explain it to
	me, I'd like to add this information to this manpage.
d395 1
@

