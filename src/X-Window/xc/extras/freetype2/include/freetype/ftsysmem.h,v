head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.29.34;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.49;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.49;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.37.43;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.08.45;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@#ifndef __FT_SYSTEM_MEMORY_H__
#define __FT_SYSTEM_MEMORY_H__

#include <ft2build.h>

FT_BEGIN_HEADER

 /***********************************************************************
  *
  * @@type: FT_Memory
  *
  * @@description:
  *   opaque handle to a memory manager handle. Note that since FreeType
  *   2.2, the memory manager structure FT_MemoryRec is hidden to client
  *   applications.
  *
  *   however, you can still define custom allocators easily using the
  *   @@ft_memory_new API
  */
  typedef struct FT_MemoryRec_*   FT_Memory;


 /***********************************************************************
  *
  * @@functype: FT_Memory_AllocFunc
  *
  * @@description:
  *   a function used to allocate a block of memory.
  *
  * @@input:
  *   size     :: size of blocks in bytes. Always > 0 !!
  *   mem_data :: memory-manager specific optional argument
  *               (see @@ft_memory_new)
  *
  * @@return:
  *   address of new block. NULL in case of memory exhaustion
  */
  typedef FT_Pointer  (*FT_Memory_AllocFunc)( FT_ULong   size,
                                              FT_Pointer mem_data );


 /***********************************************************************
  *
  * @@functype: FT_Memory_FreeFunc
  *
  * @@description:
  *   a function used to release a block of memory created through
  *   @@FT_Memory_AllocFunc or @@FT_Memory_ReallocFunc
  *
  * @@input:
  *   block    :: address of target memory block. cannot be NULL !!
  *   mem_data :: memory-manager specific optional argument
  *               (see @@ft_memory_new)
  */
  typedef void        (*FT_Memory_FreeFunc) ( FT_Pointer  block,
                                              FT_Pointer  mem_data );


 /***********************************************************************
  *
  * @@functype: FT_Memory_ReallocFunc
  *
  * @@description:
  *   a function used to reallocate a memory block.
  *
  * @@input:
  *   block    :: address of target memory block. cannot be NULL !!
  *   new_size :: new requested size in bytes
  *   cur_size :: current block size in bytes
  *   mem_data :: memory-manager specific optional argument
  *               (see @@ft_memory_new)
  */
  typedef FT_Pointer  (*FT_Memory_ReallocFunc)( FT_Pointer   block,
                                                FT_ULong     new_size,
                                                FT_ULong     cur_size,
                                                FT_Pointer   mem_data );


 /***********************************************************************
  *
  * @@functype: FT_Memory_CreateFunc
  *
  * @@description:
  *   a function used to create a @@FT_Memory object to model a
  *   memory manager
  *
  * @@input:
  *   size      :: size of memory manager structure in bytes
  *   init_data :: optional initialisation argument
  *
  * @@output:
  *   amem_data :: memory-manager specific argument to block management
  *                routines.
  *
  * @@return:
  *   handle to new memory manager object. NULL in case of failure
  */
  typedef FT_Pointer  (*FT_Memory_CreateFunc)( FT_UInt     size,
                                               FT_Pointer  init_data,
                                               FT_Pointer *amem_data );


 /***********************************************************************
  *
  * @@functype: FT_Memory_DestroyFunc
  *
  * @@description:
  *   a function used to destroy a given @@FT_Memory manager
  *
  * @@input:
  *   memory   :: target memory manager handle
  *   mem_data :: option manager-specific argument
  */
  typedef void        (*FT_Memory_DestroyFunc)( FT_Memory  memory,
                                                FT_Pointer mem_data );


 /***********************************************************************
  *
  * @@struct: FT_Memory_FuncsRec
  *
  * @@description:
  *   a function used to hold all methods of a given memory manager
  *   implementation.
  *
  * @@fields:
  *   mem_alloc   :: block allocation routine
  *   mem_free    :: block release routine
  *   mem_realloc :: block re-allocation routine
  *   mem_create  :: manager creation routine
  *   mem_destroy :: manager destruction routine
  */
  typedef struct FT_Memory_FuncsRec_
  {
    FT_Memory_AllocFunc     mem_alloc;
    FT_Memory_FreeFunc      mem_free;
    FT_Memory_ReallocFunc   mem_realloc;
    FT_Memory_CreateFunc    mem_create;
    FT_Memory_DestroyFunc   mem_destroy;

  } FT_Memory_FuncsRec, *FT_Memory_Funcs;


 /***********************************************************************
  *
  * @@type: FT_Memory_Funcs
  *
  * @@description:
  *   a pointer to a constant @@FT_Memory_FuncsRec structure used to
  *   describe a given memory manager implementation.
  */
  typedef const FT_Memory_FuncsRec*  FT_Memory_Funcs;


 /***********************************************************************
  *
  * @@function: ft_memory_new
  *
  * @@description:
  *   create a new memory manager, given a set of memory methods
  *
  * @@input:
  *   mem_funcs     :: handle to memory manager implementation descriptor
  *   mem_init_data :: optional initialisation argument, passed to
  *                    @@FT_Memory_CreateFunc
  *
  * @@return:
  *   new memory manager handle. NULL in case of failure
  */
  FT_BASE( FT_Memory )
  ft_memory_new( FT_Memory_Funcs  mem_funcs,
                 FT_Pointer       mem_init_data );


 /***********************************************************************
  *
  * @@function: ft_memory_destroy
  *
  * @@description:
  *   destroy a given memory manager
  *
  * @@input:
  *   memory :: handle to target memory manager
  */
  FT_BASE( void )
  ft_memory_destroy( FT_Memory  memory );

/* */

FT_END_HEADER

#endif /* __FT_SYSTEM_MEMORY_H__ */
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d8 1
a8 11
 /************************************************************************/
 /************************************************************************/
 /*****                                                              *****/
 /*****    NOTE: THE CONTENT OF THIS FILE IS NOT CURRENTLY USED      *****/
 /*****          IN NORMAL BUILDS.  CONSIDER IT EXPERIMENTAL.        *****/
 /*****                                                              *****/
 /************************************************************************/
 /************************************************************************/


 /*@@**********************************************************************
d23 1
a23 1
 /*@@**********************************************************************
d42 1
a42 1
 /*@@**********************************************************************
d59 1
a59 1
 /*@@**********************************************************************
d79 1
a79 1
 /*@@**********************************************************************
d103 1
a103 1
 /*@@**********************************************************************
d118 1
a118 1
 /*@@**********************************************************************
d144 1
a144 1
 /*@@**********************************************************************
d155 1
a155 1
 /*@@**********************************************************************
d175 1
a175 1
 /*@@**********************************************************************
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d8 1
a8 11
 /************************************************************************/
 /************************************************************************/
 /*****                                                              *****/
 /*****    NOTE: THE CONTENT OF THIS FILE IS NOT CURRENTLY USED      *****/
 /*****          IN NORMAL BUILDS.  CONSIDER IT EXPERIMENTAL.        *****/
 /*****                                                              *****/
 /************************************************************************/
 /************************************************************************/


 /*@@**********************************************************************
d23 1
a23 1
 /*@@**********************************************************************
d42 1
a42 1
 /*@@**********************************************************************
d59 1
a59 1
 /*@@**********************************************************************
d79 1
a79 1
 /*@@**********************************************************************
d103 1
a103 1
 /*@@**********************************************************************
d118 1
a118 1
 /*@@**********************************************************************
d144 1
a144 1
 /*@@**********************************************************************
d155 1
a155 1
 /*@@**********************************************************************
d175 1
a175 1
 /*@@**********************************************************************
@

