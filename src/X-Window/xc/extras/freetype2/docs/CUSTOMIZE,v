head	1.1;
branch	1.1.9;
access;
symbols
	tg-mergetmp-2:1.1.9.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	openbsd:1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9;
locks; strict;
comment	@# @;


1.1
date	2004.02.14.19.08.41;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2004.03.02.17.37.30;	author tg;	state Exp;
branches;
next	;

1.1.9.1
date	2004.02.14.19.08.41;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@How to customize the compilation of the library:
================================================

 FreeType is highly customizable to fit various needs, and this document
 details how it is possible to select options and components at compilation
 time.


I. Configuration macros:

  the file found in "include/freetype/config/ftoption.h" contains a list
  of commented configuration macros that can be toggled by developers to
  indicate which features to activate in their build of the library.
  
  these options range from debug level to availability of certain
  features, like native TrueType hinting through a bytecode interpreter.
  
  we invite you to read this file for more information. You can change
  the file's content to suit your needs, or override it with one of the
  techniques described below..

  
II. Modules list:

  the file found in "include/freetype/config/ftmodule.h" contains a list
  of names corresponding to the modules / font drivers to be statically
  compiled in the FreeType library during the build.

  you can change it to suit your own preferences. Be aware that certain
  modules depend on others, as described by the file "modules.txt" in
  this directory.

  you can modify the file's content to suit your needs, or override it
  at compile time with one of the methods described below


III. System interface:

  FreeType's default interface to the system (i.e. the parts that deal with
  memory management and i/o streams) is located in "src/base/ftsystem.c".
  
  the current implementation uses standard C library calls to manage
  memory and read font files. It is however possible to write custom
  implementations to suit specific systems.

  to tell the GNU Make-based build system to use a custom system interface,
  you'll need to define the environment variable FTSYS_SRC to point to
  the relevant implementation, like in:
  
      on Unix:
        ./configure <youroptions>
        export FTSYS_SRC=foo/my_ftsystem.c
        make
        make install
   
      on Windows:
        make setup <compiler>
        set FTSYS_SRC=foo/my_ftsystem.c
        make
     
     
IV. Overriding default  configuration and module headers:

  it is possible to over-ride the default configuration and module headers
  without changing the original files. There are two ways to do that:

  1. Using the C include path:
  
    use the C include path to ensure that your own versions of the
    files are used at compile time when the lines:
    
       #include FT_CONFIG_OPTIONS_H
       #include FT_CONFIG_MODULES_H

    are compiled. Their default values being <freetype/config/ftoption.h>
    and <freetype/config/ftmodule.h>, you can do something like:

       custom/
         freetype/
           config/
             ftoption.h    => custom options header
             ftmodule.h    => custom modules list
             
       include/            => normal FreeType 2 include
          freetype/
            ...

   then change the C include path to always give the path to "custom"
   before the FreeType 2 "include"


  2. Re-defining FT_CONFIG_OPTIONS_H and FT_CONFIG_MODULES_H
  
   another way to do the same thing is to re-define the macros used
   to name the configuration headers. To do so, you'll need a custom
   "ft2build.h", whose content can be as simple as:
   
          #ifndef __FT2_BUILD_GENERIC_H__
          #define __FT2_BUILD_GENERIC_H__

          #define  FT_CONFIG_OPTIONS_H   <custom/my-ftoption.h>
          #define  FT_CONFIG_MACROS_H    <custom/my-ftmodule.h>

          #include <freetype/config/ftheader.h>

          #endif /* __FT2_BUILD_GENERIC_H__ */
   
   place them in:
   
       custom/
          ft2build.h           => custom version described above
          my-ftoption.h        => custom options header
          my-ftmodule.h        => custom modules list header

   and change the C include path to ensure that "custom" is always placed
   before the FT2 "include" during compilation.

@


1.1.1.1
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@
