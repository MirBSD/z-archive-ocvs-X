head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.29.52;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.21.03;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.21.03;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.38.46;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.09.04;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@/***************************************************************************/
/*                                                                         */
/*  pfrdrivr.c                                                             */
/*                                                                         */
/*    FreeType PFR driver interface (body).                                */
/*                                                                         */
/*  Copyright 2002 by                                                      */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include <ft2build.h>
#include FT_INTERNAL_DEBUG_H
#include FT_INTERNAL_STREAM_H
#include "pfrdrivr.h"
#include "pfrobjs.h"


  FT_CALLBACK_TABLE_DEF
  const FT_Driver_ClassRec  pfr_driver_class =
  {
    {
      ft_module_font_driver      |
      ft_module_driver_scalable,

      sizeof( FT_DriverRec ),

      "pfr",
      0x10000L,
      0x20000L,

      0,   /* format interface */

      (FT_Module_Constructor)NULL,
      (FT_Module_Destructor) NULL,
      (FT_Module_Requester)  NULL
    },

    sizeof( PFR_FaceRec ),
    sizeof( PFR_SizeRec ),
    sizeof( PFR_SlotRec ),

    (FT_Face_InitFunc)        pfr_face_init,
    (FT_Face_DoneFunc)        pfr_face_done,
    (FT_Size_InitFunc)        NULL,
    (FT_Size_DoneFunc)        NULL,
    (FT_Slot_InitFunc)        pfr_slot_init,
    (FT_Slot_DoneFunc)        pfr_slot_done,

    (FT_Size_ResetPointsFunc) NULL,
    (FT_Size_ResetPixelsFunc) NULL,
    (FT_Slot_LoadFunc)        pfr_slot_load,
    (FT_CharMap_CharIndexFunc)NULL,

    (FT_Face_GetKerningFunc)  0,
    (FT_Face_AttachFunc)      0,
    (FT_Face_GetAdvancesFunc) 0,

    (FT_CharMap_CharNextFunc) NULL
  };


/* END */
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@a21 1
#include FT_INTERNAL_PFR_H
a25 100
  static FT_Error
  pfr_get_kerning( PFR_Face    face,
                   FT_UInt     left,
                   FT_UInt     right,
                   FT_Vector  *avector )
  {
    FT_Error  error;

    error = pfr_face_get_kerning( face, left, right, avector );
    if ( !error )
    {
      PFR_PhyFont  phys = &face->phy_font;

      /* convert from metrics to outline units when necessary */
      if ( phys->outline_resolution != phys->metrics_resolution )
      {
        if ( avector->x != 0 )
          avector->x = FT_MulDiv( avector->x, phys->outline_resolution,
                                              phys->metrics_resolution );

        if ( avector->y != 0 )
          avector->y = FT_MulDiv( avector->x, phys->outline_resolution,
                                              phys->metrics_resolution );
      }
    }
    return error;
  }


  static FT_Error
  pfr_get_advance( PFR_Face   face,
                   FT_UInt    gindex,
                   FT_Pos    *aadvance )
  {
    FT_Error     error = FT_Err_Bad_Argument;

    *aadvance = 0;
    if ( face )
    {
      PFR_PhyFont  phys  = &face->phy_font;

      if ( gindex < phys->num_chars )
      {
        *aadvance = phys->chars[ gindex ].advance;
        error = 0;
      }
    }

    return error;
  }


  static FT_Error
  pfr_get_metrics( PFR_Face   face,
                   FT_UInt   *aoutline_resolution,
                   FT_UInt   *ametrics_resolution,
                   FT_Fixed  *ametrics_x_scale,
                   FT_Fixed  *ametrics_y_scale )
  {
    PFR_PhyFont  phys  = &face->phy_font;
    FT_Fixed     x_scale, y_scale;
    FT_Size      size = face->root.size;

    if ( aoutline_resolution )
      *aoutline_resolution = phys->outline_resolution;

    if ( ametrics_resolution )
      *ametrics_resolution = phys->metrics_resolution;

    x_scale = 0x10000L;
    y_scale = 0x10000L;

    if ( size )
    {
      x_scale = FT_DivFix( size->metrics.x_ppem << 6,
                           phys->metrics_resolution );

      y_scale = FT_DivFix( size->metrics.y_ppem << 6,
                           phys->metrics_resolution );
    }

    if ( ametrics_x_scale )
      *ametrics_x_scale = x_scale;

    if ( ametrics_y_scale )
      *ametrics_y_scale = y_scale;

    return 0;
  }


  FT_CALLBACK_TABLE_DEF
  const FT_PFR_ServiceRec  pfr_service_rec =
  {
    (FT_PFR_GetMetricsFunc)  pfr_get_metrics,
    (FT_PFR_GetKerningFunc)  pfr_get_kerning,
    (FT_PFR_GetAdvanceFunc)  pfr_get_advance
  };


d39 1
a39 1
      (FT_PFR_Service)  &pfr_service_rec,   /* format interface */
d60 1
d62 1
a62 1
    (FT_Face_GetKerningFunc)  pfr_get_kerning,
d64 3
a66 1
    (FT_Face_GetAdvancesFunc) 0
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@a21 1
#include FT_INTERNAL_PFR_H
a25 100
  static FT_Error
  pfr_get_kerning( PFR_Face    face,
                   FT_UInt     left,
                   FT_UInt     right,
                   FT_Vector  *avector )
  {
    FT_Error  error;

    error = pfr_face_get_kerning( face, left, right, avector );
    if ( !error )
    {
      PFR_PhyFont  phys = &face->phy_font;

      /* convert from metrics to outline units when necessary */
      if ( phys->outline_resolution != phys->metrics_resolution )
      {
        if ( avector->x != 0 )
          avector->x = FT_MulDiv( avector->x, phys->outline_resolution,
                                              phys->metrics_resolution );

        if ( avector->y != 0 )
          avector->y = FT_MulDiv( avector->x, phys->outline_resolution,
                                              phys->metrics_resolution );
      }
    }
    return error;
  }


  static FT_Error
  pfr_get_advance( PFR_Face   face,
                   FT_UInt    gindex,
                   FT_Pos    *aadvance )
  {
    FT_Error     error = FT_Err_Bad_Argument;

    *aadvance = 0;
    if ( face )
    {
      PFR_PhyFont  phys  = &face->phy_font;

      if ( gindex < phys->num_chars )
      {
        *aadvance = phys->chars[ gindex ].advance;
        error = 0;
      }
    }

    return error;
  }


  static FT_Error
  pfr_get_metrics( PFR_Face   face,
                   FT_UInt   *aoutline_resolution,
                   FT_UInt   *ametrics_resolution,
                   FT_Fixed  *ametrics_x_scale,
                   FT_Fixed  *ametrics_y_scale )
  {
    PFR_PhyFont  phys  = &face->phy_font;
    FT_Fixed     x_scale, y_scale;
    FT_Size      size = face->root.size;

    if ( aoutline_resolution )
      *aoutline_resolution = phys->outline_resolution;

    if ( ametrics_resolution )
      *ametrics_resolution = phys->metrics_resolution;

    x_scale = 0x10000L;
    y_scale = 0x10000L;

    if ( size )
    {
      x_scale = FT_DivFix( size->metrics.x_ppem << 6,
                           phys->metrics_resolution );

      y_scale = FT_DivFix( size->metrics.y_ppem << 6,
                           phys->metrics_resolution );
    }

    if ( ametrics_x_scale )
      *ametrics_x_scale = x_scale;

    if ( ametrics_y_scale )
      *ametrics_y_scale = y_scale;

    return 0;
  }


  FT_CALLBACK_TABLE_DEF
  const FT_PFR_ServiceRec  pfr_service_rec =
  {
    (FT_PFR_GetMetricsFunc)  pfr_get_metrics,
    (FT_PFR_GetKerningFunc)  pfr_get_kerning,
    (FT_PFR_GetAdvanceFunc)  pfr_get_advance
  };


d39 1
a39 1
      (FT_PFR_Service)  &pfr_service_rec,   /* format interface */
d60 1
d62 1
a62 1
    (FT_Face_GetKerningFunc)  pfr_get_kerning,
d64 3
a66 1
    (FT_Face_GetAdvancesFunc) 0
@

