head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.29.46;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.21.00;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.21.00;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.38.18;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.08.56;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@/*  bdfdrivr.c

    FreeType font driver for bdf files

    Copyright (C) 2001-2002 by
    Francesco Zappa Nardelli

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

#include <ft2build.h>

#include FT_INTERNAL_DEBUG_H
#include FT_INTERNAL_STREAM_H
#include FT_INTERNAL_OBJECTS_H

#include "bdf.h"
#include "bdfdrivr.h"

#include "bdferror.h"


  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_bdfdriver


  FT_CALLBACK_DEF( FT_Error )
  BDF_Face_Done( BDF_Face  face )
  {
    FT_Memory  memory = FT_FACE_MEMORY( face );


    bdf_free_font( face->bdffont );

    FT_FREE( face->en_table );

    FT_FREE( face->charset_encoding );
    FT_FREE( face->charset_registry );
    FT_FREE( face->root.family_name );

    FT_FREE( face->root.available_sizes );

    FT_FREE( face->bdffont );

    FT_TRACE4(( "BDF_Face_Done: done face\n" ));

    return BDF_Err_Ok;
  }


  FT_CALLBACK_DEF( FT_Error )
  BDF_Face_Init( FT_Stream      stream,
                 BDF_Face       face,
                 FT_Int         face_index,
                 FT_Int         num_params,
                 FT_Parameter*  params )
  {
    FT_Error       error  = BDF_Err_Ok;
    FT_Memory      memory = FT_FACE_MEMORY( face );

    bdf_font_t*    font;
    bdf_options_t  options;

    FT_UNUSED( num_params );
    FT_UNUSED( params );
    FT_UNUSED( face_index );


    if ( FT_STREAM_SEEK( 0 ) )
      goto Exit;

    options.correct_metrics = 1;   /* FZ XXX: options semantics */
    options.keep_unencoded  = 1;
    options.keep_comments   = 0;
    options.font_spacing    = BDF_PROPORTIONAL;

    error = bdf_load_font( stream, memory, &options, &font );
    if ( error == BDF_Err_Missing_Startfont_Field )
    {
      FT_TRACE2(( "[not a valid BDF file]\n" ));
      goto Fail;
    }
    else if ( error )
      goto Exit;

    /* we have a bdf font: let's construct the face object */
    face->bdffont = font;
    {
      FT_Face          root = FT_FACE( face );
      bdf_property_t*  prop = NULL;


      FT_TRACE4(( "number of glyphs: %d (%d)\n",
                  font->glyphs_size,
                  font->glyphs_used ));
      FT_TRACE4(( "number of unencoded glyphs: %d (%d)\n",
                  font->unencoded_size,
                  font->unencoded_used ));

      root->num_faces  = 1;
      root->face_index = 0;
      root->face_flags = FT_FACE_FLAG_FIXED_SIZES |
                         FT_FACE_FLAG_HORIZONTAL  |
                         FT_FACE_FLAG_FAST_GLYPHS;

      prop = bdf_get_font_property( font, (char *)"SPACING" );
      if ( prop != NULL )
        if ( prop->format == BDF_ATOM )
          if ( prop->value.atom != NULL )
            if ( ( *(prop->value.atom) == 'M' ) ||
                 ( *(prop->value.atom) == 'C' ) )
              root->face_flags |= FT_FACE_FLAG_FIXED_WIDTH;

      /* FZ XXX: TO DO: FT_FACE_FLAGS_VERTICAL   */
      /* FZ XXX: I need a font to implement this */

      root->style_flags = 0;
      prop = bdf_get_font_property( font, (char *)"SLANT" );
      if ( prop != NULL )
        if ( prop->format == BDF_ATOM )
          if ( prop->value.atom != NULL )
            if ( ( *(prop->value.atom) == 'O' ) ||
                 ( *(prop->value.atom) == 'I' ) )
              root->style_flags |= FT_STYLE_FLAG_ITALIC;

      prop = bdf_get_font_property( font, (char *)"WEIGHT_NAME" );
      if ( prop != NULL )
        if ( prop->format == BDF_ATOM )
          if ( prop->value.atom != NULL )
            if ( *(prop->value.atom) == 'B' )
              root->style_flags |= FT_STYLE_FLAG_BOLD;

      prop = bdf_get_font_property( font, (char *)"FAMILY_NAME" );
      if ( ( prop != NULL ) && ( prop->value.atom != NULL ) )
      {
        int  l = ft_strlen( prop->value.atom ) + 1;


        if ( FT_NEW_ARRAY( root->family_name, l ) )
          goto Exit;
        ft_strcpy( root->family_name, prop->value.atom );
      }
      else
        root->family_name = 0;

      root->style_name = (char *)"Regular";
      if ( root->style_flags & FT_STYLE_FLAG_BOLD )
      {
        if ( root->style_flags & FT_STYLE_FLAG_ITALIC )
          root->style_name = (char *)"Bold Italic";
        else
          root->style_name = (char *)"Bold";
      }
      else if ( root->style_flags & FT_STYLE_FLAG_ITALIC )
        root->style_name = (char *)"Italic";

      root->num_glyphs = font->glyphs_size;     /* unencoded included */

      root->num_fixed_sizes = 1;
      if ( FT_NEW_ARRAY( root->available_sizes, 1 ) )
        goto Exit;

      prop = bdf_get_font_property( font, (char *)"PIXEL_SIZE" );
      if ( prop != NULL )
      {
        bdf_property_t  *xres = 0, *yres = 0;


        xres = bdf_get_font_property( font, (char *)"RESOLUTION_X" );
        yres = bdf_get_font_property( font, (char *)"RESOLUTION_Y" );
        if ( ( xres != NULL ) && ( yres != NULL ) )
        {
          FT_TRACE4(( "PIXEL_SIZE: %d  RESOLUTION_X: %d  RESOLUTION_Y: %d\n",
                      prop->value.int32,
                      xres->value.int32,
                      yres->value.int32 ));
          root->available_sizes->width =
            (FT_Short)( prop->value.int32 * 75 / xres->value.int32 );
             
          root->available_sizes->height =
            (FT_Short)( prop->value.int32 * 75 / yres->value.int32 );
        }
      }
      else
      {
        /* some fonts have broken SIZE declaration (jiskan24.bdf) */
        FT_ERROR(( "BDF_Face_Init: reading size\n" ));
        root->available_sizes->width  = (FT_Short)font->point_size ;
        root->available_sizes->height = (FT_Short)font->point_size ;
      }

      /* encoding table */
      {
        bdf_glyph_t*   cur = font->glyphs;
        unsigned long  n;


        if ( FT_NEW_ARRAY( face->en_table, font->glyphs_size ) )
          goto Exit;

        for ( n = 0; n < font->glyphs_size; n++ )
        {
          (face->en_table[n]).enc = cur[n].encoding;
          FT_TRACE4(( "idx %d, val 0x%lX\n", n, cur[n].encoding ));
          (face->en_table[n]).glyph = (FT_Short)n;
        }
      }

      /* charmaps */
      {
        bdf_property_t  *charset_registry = 0, *charset_encoding = 0;


        charset_registry =
          bdf_get_font_property( font, (char *)"CHARSET_REGISTRY" );
        charset_encoding =
          bdf_get_font_property( font, (char *)"CHARSET_ENCODING" );
        if ( ( charset_registry != NULL ) && ( charset_encoding != NULL ) )
        {
          if ( ( charset_registry->format == BDF_ATOM ) &&
               ( charset_encoding->format == BDF_ATOM ) &&
               ( charset_registry->value.atom != NULL ) &&
               ( charset_encoding->value.atom != NULL ) )
          {
            if ( FT_NEW_ARRAY( face->charset_encoding,
                               strlen( charset_encoding->value.atom ) + 1 ) )
              goto Exit;
            if (FT_NEW_ARRAY( face->charset_registry,
                              strlen( charset_registry->value.atom ) + 1 ) )
              goto Exit;
            ft_strcpy( face->charset_registry, charset_registry->value.atom );
            ft_strcpy( face->charset_encoding, charset_encoding->value.atom );

            face->charmap.encoding    = ft_encoding_none;
            face->charmap.platform_id = 0;
            face->charmap.encoding_id = 0;
            face->charmap.face        = root;
            face->charmap_handle      = &face->charmap;

            root->charmap = face->charmap_handle;

            goto Exit;
          }
        }

        /* otherwise assume adobe standard encoding */
        face->charmap.encoding    = ft_encoding_adobe_standard;
        face->charmap.platform_id = 7; /* taken from t1objs.c */
        face->charmap.encoding_id = 0;
        face->charmap.face        = root;
        face->charmap_handle      = &face->charmap;

        root->charmap = face->charmap_handle;
      }
    }

  Exit:
    return error;

  Fail:
    BDF_Face_Done( face );
    return BDF_Err_Unknown_File_Format;
  }


  static
  FT_Error  BDF_Set_Pixel_Size( FT_Size  size )
  {
    BDF_Face  face = (BDF_Face)FT_SIZE_FACE( size );
    FT_Face   root = FT_FACE( face );


    FT_TRACE4(( "rec %d - pres %d\n",
                size->metrics.y_ppem, root->available_sizes->height ));

    if ( size->metrics.y_ppem == root->available_sizes->height )
    {
      size->metrics.ascender  = face->bdffont->bbx.ascent << 6;
      size->metrics.descender = face->bdffont->bbx.descent * ( -64 );
      size->metrics.height    = face->bdffont->bbx.height << 6;

      return BDF_Err_Ok;
    }
    else
      return BDF_Err_Invalid_Pixel_Size;
  }


  static FT_Error
  BDF_Glyph_Load( FT_GlyphSlot  slot,
                  FT_Size       size,
                  FT_UInt       glyph_index,
                  FT_Int        load_flags )
  {
    BDF_Face        face   = (BDF_Face)FT_SIZE_FACE( size );
    FT_Error        error  = BDF_Err_Ok;
    FT_Bitmap*      bitmap = &slot->bitmap;
    bdf_glyph_t     glyph;
    int             bpp    = face->bdffont->bpp;
    int             i, j, count;
    unsigned char   *p, *pp;

    FT_Memory       memory = face->bdffont->memory;

    FT_UNUSED( load_flags );


    if ( !face )
    {
      error = BDF_Err_Invalid_Argument;
      goto Exit;
    }

    /* slot, bitmap => freetype, glyph => bdflib */
    glyph = face->bdffont->glyphs[glyph_index];

    bitmap->rows      = glyph.bbx.height;
    bitmap->width     = glyph.bbx.width;

    if ( bpp == 1 )
    {
      bitmap->pixel_mode = ft_pixel_mode_mono;
      bitmap->pitch      = glyph.bpr;

      if ( FT_NEW_ARRAY( bitmap->buffer, glyph.bytes ) )
        goto Exit;
      FT_MEM_COPY( bitmap->buffer, glyph.bitmap, glyph.bytes );
    }
    else
    {
      /* blow up pixmap to have 8 bits per pixel */
      bitmap->pixel_mode = ft_pixel_mode_grays;
      bitmap->pitch      = bitmap->width;

      if ( FT_NEW_ARRAY( bitmap->buffer, bitmap->rows * bitmap->pitch ) )
        goto Exit;

      switch ( bpp )
      {
      case 2:
        bitmap->num_grays = 4;

        count = 0;
        p     = glyph.bitmap;

        for ( i = 0; i < bitmap->rows; i++ )
        {
          pp = p;

          /* get the full bytes */
          for ( j = 0; j < ( bitmap->width >> 2 ); j++ )
          {
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0xC0 ) >> 6 );
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0x30 ) >> 4 );
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0x0C ) >> 2 );
            bitmap->buffer[count++] = (FT_Byte)(   *pp & 0x03 );

            pp++;
          }

          /* get remaining pixels (if any) */
          switch ( bitmap->width & 3 )
          {
          case 3:
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0xC0 ) >> 6 );
            /* fall through */
          case 2:
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0x30 ) >> 4 );
            /* fall through */
          case 1:
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0x0C ) >> 2 );
            /* fall through */
          case 0:
            break;
          }

          p += glyph.bpr;
        }
        break;

      case 4:
        bitmap->num_grays = 16;

        count = 0;
        p     = glyph.bitmap;

        for ( i = 0; i < bitmap->rows; i++ )
        {
          pp = p;

          /* get the full bytes */
          for ( j = 0; j < ( bitmap->width >> 1 ); j++ )
          {
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0xF0 ) >> 4 );
            bitmap->buffer[count++] = (FT_Byte)(   *pp & 0x0F );

            pp++;
          }

          /* get remaining pixel (if any) */
          switch ( bitmap->width & 1 )
          {
          case 1:
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0xF0 ) >> 4 );
            /* fall through */
          case 0:
            break;
          }

          p += glyph.bpr;
        }
        break;

      case 8:
        bitmap->num_grays = 256;

        FT_MEM_COPY( bitmap->buffer, glyph.bitmap,
                     bitmap->rows * bitmap->pitch );
        break;
      }
    }

    slot->bitmap_left = 0;
    slot->bitmap_top  = glyph.bbx.ascent;

    /* FZ XXX: TODO: vertical metrics */
    slot->metrics.horiAdvance  = glyph.dwidth << 6;
    slot->metrics.horiBearingX = glyph.bbx.x_offset << 6;
    slot->metrics.horiBearingY = glyph.bbx.y_offset << 6;
    slot->metrics.width        = bitmap->width << 6;
    slot->metrics.height       = bitmap->rows << 6;

    slot->linearHoriAdvance = (FT_Fixed)glyph.dwidth << 16;
    slot->format            = ft_glyph_format_bitmap;
    slot->flags             = FT_GLYPH_OWN_BITMAP;

  Exit:
    return error;
  }


  static
  FT_UInt  BDF_Get_Char_Index( FT_CharMap  charmap,
                               FT_ULong    char_code )
  {
    BDF_Face          face     = (BDF_Face)charmap->face;
    BDF_encoding_el*  en_table = face->en_table;
    int               low, high, mid;


    FT_TRACE4(( "BDF_Get_Char_Index %ld\n", char_code ));

    low  = 0;
    high = face->bdffont->glyphs_used - 1;

    while ( low <= high )
    {
      mid = ( low + high ) / 2;
      if ( char_code < en_table[mid].enc )
        high = mid - 1;
      else if ( char_code > en_table[mid].enc )
        low = mid + 1;
      else
        return en_table[mid].glyph;
    }

    return face->bdffont->default_glyph;
  }


  FT_CALLBACK_TABLE_DEF
  const FT_Driver_ClassRec  bdf_driver_class =
  {
    {
      ft_module_font_driver,
      sizeof ( FT_DriverRec ),

      "bdf",
      0x10000L,
      0x20000L,

      0,

      (FT_Module_Constructor)0,
      (FT_Module_Destructor) 0,
      (FT_Module_Requester)  0
    },

    sizeof( BDF_FaceRec ),
    sizeof( FT_SizeRec ),
    sizeof( FT_GlyphSlotRec ),

    (FT_Face_InitFunc)        BDF_Face_Init,
    (FT_Face_DoneFunc)        BDF_Face_Done,
    (FT_Size_InitFunc)        0,
    (FT_Size_DoneFunc)        0,
    (FT_Slot_InitFunc)        0,
    (FT_Slot_DoneFunc)        0,

    (FT_Size_ResetPointsFunc) BDF_Set_Pixel_Size,
    (FT_Size_ResetPixelsFunc) BDF_Set_Pixel_Size,

    (FT_Slot_LoadFunc)        BDF_Glyph_Load,

#ifndef FT_CONFIG_OPTION_USE_CMAPS
    (FT_CharMap_CharIndexFunc)0,
#else
    (FT_CharMap_CharIndexFunc)BDF_Get_Char_Index,
#endif

    (FT_Face_GetKerningFunc)  0,
    (FT_Face_AttachFunc)      0,
    (FT_Face_GetAdvancesFunc) 0,

#ifndef FT_CONFIG_OPTION_USE_CMAPS
    (FT_CharMap_CharNextFunc) 0, /* BDF_Char_Get_Next,*/
#else
    (FT_CharMap_CharNextFunc) 0
#endif
  };


/* END */
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@a25 1
/* $XFree86: xc/extras/freetype2/src/bdf/bdfdrivr.c,v 1.2 2003/06/15 16:45:50 tsi Exp $ */
a31 1
#include FT_BDF_H
a48 124
  typedef struct  BDF_CMapRec_
  {
    FT_CMapRec        cmap;
    FT_UInt           num_encodings;
    BDF_encoding_el*  encodings;

  } BDF_CMapRec, *BDF_CMap;


  FT_CALLBACK_DEF( FT_Error )
  bdf_cmap_init( BDF_CMap  cmap )
  {
    BDF_Face  face = (BDF_Face)FT_CMAP_FACE( cmap );


    cmap->num_encodings = face->bdffont->glyphs_used;
    cmap->encodings     = face->en_table;

    return FT_Err_Ok;
  }


  FT_CALLBACK_DEF( void )
  bdf_cmap_done( BDF_CMap  cmap )
  {
    cmap->encodings     = NULL;
    cmap->num_encodings = 0;
  }


  FT_CALLBACK_DEF( FT_UInt )
  bdf_cmap_char_index( BDF_CMap   cmap,
                       FT_UInt32  charcode )
  {
    BDF_encoding_el*  encodings = cmap->encodings;
    FT_UInt           min, max, mid;
    FT_UInt           result = 0;


    min = 0;
    max = cmap->num_encodings;

    while ( min < max )
    {
      FT_UInt32  code;


      mid  = ( min + max ) >> 1;
      code = encodings[mid].enc;

      if ( charcode == code )
      {
        result = encodings[mid].glyph + 1;
        break;
      }

      if ( charcode < code )
        max = mid;
      else
        min = mid + 1;
    }

    return result;
  }


  FT_CALLBACK_DEF( FT_UInt )
  bdf_cmap_char_next( BDF_CMap    cmap,
                      FT_UInt32  *acharcode )
  {
    BDF_encoding_el*  encodings = cmap->encodings;
    FT_UInt           min, max, mid;
    FT_UInt32         charcode = *acharcode + 1;
    FT_UInt           result   = 0;


    min = 0;
    max = cmap->num_encodings;

    while ( min < max )
    {
      FT_UInt32  code;


      mid  = ( min + max ) >> 1;
      code = encodings[mid].enc;

      if ( charcode == code )
      {
        result = encodings[mid].glyph + 1;
        goto Exit;
      }

      if ( charcode < code )
        max = mid;
      else
        min = mid + 1;
    }

    charcode = 0;
    if ( min < cmap->num_encodings )
    {
      charcode = encodings[min].enc;
      result   = encodings[min].glyph + 1;
    }

  Exit:
    *acharcode = charcode;
    return result;
  }


  FT_CALLBACK_TABLE_DEF const FT_CMap_ClassRec  bdf_cmap_class =
  {
    sizeof( BDF_CMapRec ),
    (FT_CMap_InitFunc)     bdf_cmap_init,
    (FT_CMap_DoneFunc)     bdf_cmap_done,
    (FT_CMap_CharIndexFunc)bdf_cmap_char_index,
    (FT_CMap_CharNextFunc) bdf_cmap_char_next
  };




a184 4
      prop = bdf_get_font_property( font, (char *)"AVERAGE_WIDTH" );
      if ( ( prop != NULL ) && ( prop->value.int32 >= 10 ) )
        root->available_sizes->width = (short)( prop->value.int32 / 10 );

a186 2
        root->available_sizes->height = (short) prop->value.int32;
      else
d188 1
a188 4
        prop = bdf_get_font_property( font, (char *)"POINT_SIZE" );
        if ( prop != NULL )
        {
          bdf_property_t  *yres;
d191 13
a203 8
          yres = bdf_get_font_property( font, (char *)"RESOLUTION_Y" );
          if ( yres != NULL )
          {
            FT_TRACE4(( "POINT_SIZE: %d  RESOLUTION_Y: %d\n",
                        prop->value.int32, yres->value.int32 ));
            root->available_sizes->height =
              (FT_Short)( prop->value.int32 * yres->value.int32 / 720 );
          }
d206 1
a206 2

      if ( root->available_sizes->width == 0 )
d208 4
a211 8
        if ( root->available_sizes->height == 0 )
        {
          /* some fonts have broken SIZE declaration (jiskan24.bdf) */
          FT_ERROR(( "BDF_Face_Init: reading size\n" ));
          root->available_sizes->width = (FT_Short)font->point_size;
        }
        else
          root->available_sizes->width = root->available_sizes->height;
a212 2
      if ( root->available_sizes->height == 0 )
          root->available_sizes->height = root->available_sizes->width;
a233 1
        FT_Bool          unicode_charmap  = 0;
d248 1
a248 1
                               ft_strlen( charset_encoding->value.atom ) + 1 ) )
d250 2
a251 2
            if ( FT_NEW_ARRAY( face->charset_registry,
                               ft_strlen( charset_registry->value.atom ) + 1 ) )
d255 8
a262 29
            if ( !ft_strcmp( face->charset_registry, "ISO10646" )     ||
                 ( !ft_strcmp( face->charset_registry, "ISO8859" ) &&
                   !ft_strcmp( face->charset_encoding, "1" )       )  )
              unicode_charmap = 1;

            {
              FT_CharMapRec  charmap;


              charmap.face        = FT_FACE( face );
              charmap.encoding    = FT_ENCODING_NONE;
              charmap.platform_id = 0;
              charmap.encoding_id = 0;

              if ( unicode_charmap )
              {
                charmap.encoding    = FT_ENCODING_UNICODE;
                charmap.platform_id = 3;
                charmap.encoding_id = 1;
              }

              error = FT_CMap_New( &bdf_cmap_class, NULL, &charmap, NULL );

#if 0
              /* Select default charmap */
              if (root->num_charmaps)
                root->charmap = root->charmaps[0];
#endif
            }
d268 6
a273 4
        /* otherwise assume Adobe standard encoding */

        {
          FT_CharMapRec  charmap;
d275 1
a275 12

          charmap.face        = FT_FACE( face );
          charmap.encoding    = FT_ENCODING_ADOBE_STANDARD;
          charmap.platform_id = 7;
          charmap.encoding_id = 0;

          error = FT_CMap_New( &bdf_cmap_class, NULL, &charmap, NULL );

          /* Select default charmap */
          if (root->num_charmaps)
            root->charmap = root->charmaps[0];
        }
d288 2
a289 2
  static FT_Error
  BDF_Set_Pixel_Size( FT_Size  size )
d315 1
a315 1
                  FT_Int32      load_flags )
d325 2
a335 3
    if ( glyph_index > 0 )
      glyph_index--;

d339 2
a340 2
    bitmap->rows  = glyph.bbx.height;
    bitmap->width = glyph.bbx.width;
d344 1
a344 1
      bitmap->pixel_mode = FT_PIXEL_MODE_MONO;
d347 3
a349 3
     /* note: we don't allocate a new array to hold the bitmap, we */
     /*       can simply point to it                               */
      ft_glyphslot_set_bitmap( slot, glyph.bitmap );
d354 1
a354 1
      bitmap->pixel_mode = FT_PIXEL_MODE_GRAY;
d357 1
a357 2
      error = ft_glyphslot_alloc_bitmap( slot, bitmap->rows * bitmap->pitch );
      if ( error )
d451 1
a451 2
    slot->metrics.horiBearingY = ( glyph.bbx.y_offset +
                                   glyph.bbx.height ) << 6;
d456 2
a457 1
    slot->format            = FT_GLYPH_FORMAT_BITMAP;
d464 3
a466 4
  static FT_Error
  bdf_get_bdf_property( BDF_Face          face,
                        const char*       prop_name,
                        BDF_PropertyRec  *aproperty )
d468 4
a471 1
    bdf_property_t*  prop;
d473 1
a473 1
    FT_ASSERT( face && face->bdffont );
d475 4
a478 2
    prop = bdf_get_font_property( face->bdffont, (char*)prop_name );
    if ( prop != NULL )
d480 7
a486 21
      switch ( prop->format )
      {
        case BDF_ATOM:
          aproperty->type   = BDF_PROPERTY_TYPE_ATOM;
          aproperty->u.atom = prop->value.atom;
          break;

        case BDF_INTEGER:
          aproperty->type      = BDF_PROPERTY_TYPE_INTEGER;
          aproperty->u.integer = prop->value.int32;
          break;

        case BDF_CARDINAL:
          aproperty->type       = BDF_PROPERTY_TYPE_CARDINAL;
          aproperty->u.cardinal = prop->value.card32;
          break;

        default:
          goto Fail;
      }
      return 0;
a487 13
  Fail:
    return FT_Err_Invalid_Argument;
  }


  static FT_Module_Interface
  bdf_driver_requester( FT_Module    module,
                        const char*  name )
  {
    FT_UNUSED( module );

    if ( name && ft_strcmp( name, "get_bdf_property" ) == 0 )
      return (FT_Module_Interface) bdf_get_bdf_property;
d489 1
a489 1
    return NULL;
d508 1
a508 1
      (FT_Module_Requester)  bdf_driver_requester
d511 3
a513 3
    sizeof ( BDF_FaceRec ),
    sizeof ( FT_SizeRec ),
    sizeof ( FT_GlyphSlotRec ),
d527 6
d535 7
a541 1
    (FT_Face_GetAdvancesFunc) 0
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@a25 1
/* $XFree86: xc/extras/freetype2/src/bdf/bdfdrivr.c,v 1.2 2003/06/15 16:45:50 tsi Exp $ */
a31 1
#include FT_BDF_H
a48 124
  typedef struct  BDF_CMapRec_
  {
    FT_CMapRec        cmap;
    FT_UInt           num_encodings;
    BDF_encoding_el*  encodings;

  } BDF_CMapRec, *BDF_CMap;


  FT_CALLBACK_DEF( FT_Error )
  bdf_cmap_init( BDF_CMap  cmap )
  {
    BDF_Face  face = (BDF_Face)FT_CMAP_FACE( cmap );


    cmap->num_encodings = face->bdffont->glyphs_used;
    cmap->encodings     = face->en_table;

    return FT_Err_Ok;
  }


  FT_CALLBACK_DEF( void )
  bdf_cmap_done( BDF_CMap  cmap )
  {
    cmap->encodings     = NULL;
    cmap->num_encodings = 0;
  }


  FT_CALLBACK_DEF( FT_UInt )
  bdf_cmap_char_index( BDF_CMap   cmap,
                       FT_UInt32  charcode )
  {
    BDF_encoding_el*  encodings = cmap->encodings;
    FT_UInt           min, max, mid;
    FT_UInt           result = 0;


    min = 0;
    max = cmap->num_encodings;

    while ( min < max )
    {
      FT_UInt32  code;


      mid  = ( min + max ) >> 1;
      code = encodings[mid].enc;

      if ( charcode == code )
      {
        result = encodings[mid].glyph + 1;
        break;
      }

      if ( charcode < code )
        max = mid;
      else
        min = mid + 1;
    }

    return result;
  }


  FT_CALLBACK_DEF( FT_UInt )
  bdf_cmap_char_next( BDF_CMap    cmap,
                      FT_UInt32  *acharcode )
  {
    BDF_encoding_el*  encodings = cmap->encodings;
    FT_UInt           min, max, mid;
    FT_UInt32         charcode = *acharcode + 1;
    FT_UInt           result   = 0;


    min = 0;
    max = cmap->num_encodings;

    while ( min < max )
    {
      FT_UInt32  code;


      mid  = ( min + max ) >> 1;
      code = encodings[mid].enc;

      if ( charcode == code )
      {
        result = encodings[mid].glyph + 1;
        goto Exit;
      }

      if ( charcode < code )
        max = mid;
      else
        min = mid + 1;
    }

    charcode = 0;
    if ( min < cmap->num_encodings )
    {
      charcode = encodings[min].enc;
      result   = encodings[min].glyph + 1;
    }

  Exit:
    *acharcode = charcode;
    return result;
  }


  FT_CALLBACK_TABLE_DEF const FT_CMap_ClassRec  bdf_cmap_class =
  {
    sizeof( BDF_CMapRec ),
    (FT_CMap_InitFunc)     bdf_cmap_init,
    (FT_CMap_DoneFunc)     bdf_cmap_done,
    (FT_CMap_CharIndexFunc)bdf_cmap_char_index,
    (FT_CMap_CharNextFunc) bdf_cmap_char_next
  };




a184 4
      prop = bdf_get_font_property( font, (char *)"AVERAGE_WIDTH" );
      if ( ( prop != NULL ) && ( prop->value.int32 >= 10 ) )
        root->available_sizes->width = (short)( prop->value.int32 / 10 );

a186 2
        root->available_sizes->height = (short) prop->value.int32;
      else
d188 1
a188 4
        prop = bdf_get_font_property( font, (char *)"POINT_SIZE" );
        if ( prop != NULL )
        {
          bdf_property_t  *yres;
d191 13
a203 8
          yres = bdf_get_font_property( font, (char *)"RESOLUTION_Y" );
          if ( yres != NULL )
          {
            FT_TRACE4(( "POINT_SIZE: %d  RESOLUTION_Y: %d\n",
                        prop->value.int32, yres->value.int32 ));
            root->available_sizes->height =
              (FT_Short)( prop->value.int32 * yres->value.int32 / 720 );
          }
d206 1
a206 2

      if ( root->available_sizes->width == 0 )
d208 4
a211 8
        if ( root->available_sizes->height == 0 )
        {
          /* some fonts have broken SIZE declaration (jiskan24.bdf) */
          FT_ERROR(( "BDF_Face_Init: reading size\n" ));
          root->available_sizes->width = (FT_Short)font->point_size;
        }
        else
          root->available_sizes->width = root->available_sizes->height;
a212 2
      if ( root->available_sizes->height == 0 )
          root->available_sizes->height = root->available_sizes->width;
a233 1
        FT_Bool          unicode_charmap  = 0;
d248 1
a248 1
                               ft_strlen( charset_encoding->value.atom ) + 1 ) )
d250 2
a251 2
            if ( FT_NEW_ARRAY( face->charset_registry,
                               ft_strlen( charset_registry->value.atom ) + 1 ) )
d255 8
a262 29
            if ( !ft_strcmp( face->charset_registry, "ISO10646" )     ||
                 ( !ft_strcmp( face->charset_registry, "ISO8859" ) &&
                   !ft_strcmp( face->charset_encoding, "1" )       )  )
              unicode_charmap = 1;

            {
              FT_CharMapRec  charmap;


              charmap.face        = FT_FACE( face );
              charmap.encoding    = FT_ENCODING_NONE;
              charmap.platform_id = 0;
              charmap.encoding_id = 0;

              if ( unicode_charmap )
              {
                charmap.encoding    = FT_ENCODING_UNICODE;
                charmap.platform_id = 3;
                charmap.encoding_id = 1;
              }

              error = FT_CMap_New( &bdf_cmap_class, NULL, &charmap, NULL );

#if 0
              /* Select default charmap */
              if (root->num_charmaps)
                root->charmap = root->charmaps[0];
#endif
            }
d268 6
a273 4
        /* otherwise assume Adobe standard encoding */

        {
          FT_CharMapRec  charmap;
d275 1
a275 12

          charmap.face        = FT_FACE( face );
          charmap.encoding    = FT_ENCODING_ADOBE_STANDARD;
          charmap.platform_id = 7;
          charmap.encoding_id = 0;

          error = FT_CMap_New( &bdf_cmap_class, NULL, &charmap, NULL );

          /* Select default charmap */
          if (root->num_charmaps)
            root->charmap = root->charmaps[0];
        }
d288 2
a289 2
  static FT_Error
  BDF_Set_Pixel_Size( FT_Size  size )
d315 1
a315 1
                  FT_Int32      load_flags )
d325 2
a335 3
    if ( glyph_index > 0 )
      glyph_index--;

d339 2
a340 2
    bitmap->rows  = glyph.bbx.height;
    bitmap->width = glyph.bbx.width;
d344 1
a344 1
      bitmap->pixel_mode = FT_PIXEL_MODE_MONO;
d347 3
a349 3
     /* note: we don't allocate a new array to hold the bitmap, we */
     /*       can simply point to it                               */
      ft_glyphslot_set_bitmap( slot, glyph.bitmap );
d354 1
a354 1
      bitmap->pixel_mode = FT_PIXEL_MODE_GRAY;
d357 1
a357 2
      error = ft_glyphslot_alloc_bitmap( slot, bitmap->rows * bitmap->pitch );
      if ( error )
d451 1
a451 2
    slot->metrics.horiBearingY = ( glyph.bbx.y_offset +
                                   glyph.bbx.height ) << 6;
d456 2
a457 1
    slot->format            = FT_GLYPH_FORMAT_BITMAP;
d464 3
a466 4
  static FT_Error
  bdf_get_bdf_property( BDF_Face          face,
                        const char*       prop_name,
                        BDF_PropertyRec  *aproperty )
d468 4
a471 1
    bdf_property_t*  prop;
d473 1
a473 1
    FT_ASSERT( face && face->bdffont );
d475 4
a478 2
    prop = bdf_get_font_property( face->bdffont, (char*)prop_name );
    if ( prop != NULL )
d480 7
a486 21
      switch ( prop->format )
      {
        case BDF_ATOM:
          aproperty->type   = BDF_PROPERTY_TYPE_ATOM;
          aproperty->u.atom = prop->value.atom;
          break;

        case BDF_INTEGER:
          aproperty->type      = BDF_PROPERTY_TYPE_INTEGER;
          aproperty->u.integer = prop->value.int32;
          break;

        case BDF_CARDINAL:
          aproperty->type       = BDF_PROPERTY_TYPE_CARDINAL;
          aproperty->u.cardinal = prop->value.card32;
          break;

        default:
          goto Fail;
      }
      return 0;
a487 13
  Fail:
    return FT_Err_Invalid_Argument;
  }


  static FT_Module_Interface
  bdf_driver_requester( FT_Module    module,
                        const char*  name )
  {
    FT_UNUSED( module );

    if ( name && ft_strcmp( name, "get_bdf_property" ) == 0 )
      return (FT_Module_Interface) bdf_get_bdf_property;
d489 1
a489 1
    return NULL;
d508 1
a508 1
      (FT_Module_Requester)  bdf_driver_requester
d511 3
a513 3
    sizeof ( BDF_FaceRec ),
    sizeof ( FT_SizeRec ),
    sizeof ( FT_GlyphSlotRec ),
d527 6
d535 7
a541 1
    (FT_Face_GetAdvancesFunc) 0
@

