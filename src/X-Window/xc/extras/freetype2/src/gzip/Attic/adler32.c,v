head	1.4;
access;
symbols
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.2
	cvs-200403021700:1.1.1.1
	openbsd:1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9;
locks; strict;
comment	@ * @;


1.4
date	2004.03.07.22.57.57;	author tg;	state dead;
branches;
next	1.3;

1.3
date	2004.03.02.20.11.01;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.14.20.21.22;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2004.02.14.19.09.01;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2004.03.02.17.39.37;	author tg;	state Exp;
branches;
next	;

1.1.9.1
date	2004.02.14.19.09.01;	author tg;	state Exp;
branches;
next	1.1.9.2;

1.1.9.2
date	2004.03.05.21.56.09;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@how many times do I have to delete another redundant copy de jour
of zlib in my tree?
@
text
@/* adler32.c -- compute the Adler-32 checksum of a data stream
 * Copyright (C) 1995-2002 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
 */

/* @@(#) $Id: adler32.c,v 1.3 2004/03/02 20:11:01 tg Exp $ */

#include "zlib.h"

#define BASE 65521L /* largest prime smaller than 65536 */
#define NMAX 5552
/* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */

#define DO1(buf,i)  {s1 += buf[i]; s2 += s1;}
#define DO2(buf,i)  DO1(buf,i); DO1(buf,i+1);
#define DO4(buf,i)  DO2(buf,i); DO2(buf,i+2);
#define DO8(buf,i)  DO4(buf,i); DO4(buf,i+4);
#define DO16(buf)   DO8(buf,0); DO8(buf,8);

/* ========================================================================= */
ZEXPORT(uLong) adler32( /* adler, buf, len) */
    uLong adler,
    const Bytef *buf,
    uInt len )
{
    unsigned long s1 = adler & 0xffff;
    unsigned long s2 = (adler >> 16) & 0xffff;
    int k;

    if (buf == Z_NULL) return 1L;

    while (len > 0) {
        k = len < NMAX ? len : NMAX;
        len -= k;
        while (k >= 16) {
            DO16(buf);
	    buf += 16;
            k -= 16;
        }
        if (k != 0) do {
            s1 += *buf++;
	    s2 += s1;
        } while (--k);
        s1 %= BASE;
        s2 %= BASE;
    }
    return (s2 << 16) | s1;
}
@


1.3
log
@semi-automatic merge and whitespace adjustment of OpenBSD XF4 subtree
@
text
@d6 1
a6 1
/* @@(#) $Id: adler32.c,v 1.1.1.1 2004/03/02 17:39:37 tg Exp $ */
@


1.2
log
@nuke a bunch of unused files
" (like openbsd)

and how often do I have to tell X I don't want 25368 copies of libz in my tree
@
text
@d6 1
a6 1
/* @@(#) $Id: adler32.c,v 1.1 2004/02/14 19:09:01 tg Exp $ */
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
/* @@(#) $Id: adler32.c,v 1.1.1.1 2004/02/13 21:42:42 matthieu Exp $ */
@


1.1.1.1
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.9.2
log
@Import XFree86 4.4 from The XFree86(TM) Project, Inc.
(integrity cannot be checked)

got via cvs -qd anoncvs@@anoncvs.xfree86.org:/cvs co -Prxf-4_4_0 xc
@
text
@d6 1
a6 1
/* @@(#) $Id: adler32.c,v 1.4 2003/01/30 23:24:18 davidT Exp $ */
@

