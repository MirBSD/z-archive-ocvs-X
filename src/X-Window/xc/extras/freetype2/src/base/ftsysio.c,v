head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.29.46;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.59;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.59;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.08.56;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@#include <ft2build.h>
#include FT_SYSTEM_STREAM_H

#include <stdio.h>

 /* the ISO/ANSI standard stream object */
  typedef struct FT_StdStreamRec_
  {
    FT_StreamRec  stream;
    FILE*         file;
    const char*   pathname;
  
  } FT_StdStreamRec, *FT_StdStream;



 /* read bytes from a standard stream */
  static FT_ULong
  ft_std_stream_read( FT_StdStream   stream,
                      FT_Byte*       buffer,
                      FT_ULong       size )
  {
    long   read_bytes;
    
    read_bytes = fread( buffer, 1, size, stream->file );
    if ( read_bytes < 0 )
      read_bytes = 0;
      
    return (FT_ULong) read_bytes;
  }


 /* seek the standard stream to a new position */
  static FT_Error
  ft_std_stream_seek( FT_StdStream   stream,
                      FT_ULong       pos )
  {
    return ( fseek( stream->file, pos, SEEK_SET ) < 0 )
         ? FT_Err_Stream_Seek
         : FT_Err_Ok;
  }
  
  
 /* close a standard stream */  
  static void
  ft_std_stream_done( FT_StdStream  stream )
  {
    fclose( stream->file );
    stream->file     = NULL;
    stream->pathname = NULL;
  }


 /* open a standard stream from a given pathname */
  static void
  ft_std_stream_init( FT_StdStream  stream,
                      const char*   pathname )
  {
    FT_ASSERT( pathname != NULL );

    stream->file = fopen( pathname, "rb" );
    if ( stream->file == NULL )
    {
      FT_ERROR(( "iso.stream.init: could not open '%s'\n", pathname ));
      FT_XTHROW( FT_Err_Stream_Open );
    }
    
    /* compute total size in bytes */
    fseek( file, 0, SEEK_END );
    FT_STREAM__SIZE(stream) = ftell( file );
    fseek( file, 0, SEEK_SET );
    
    stream->pathname = pathname;
    stream->pos      = 0;
    
    FT_TRACE1(( "iso.stream.init: opened '%s' (%ld bytes) succesfully\n",
                 pathname, FT_STREAM__SIZE(stream) ));
  }                 


  static void
  ft_std_stream_class_init( FT_ClassRec*  _clazz )
  {
    FT_StreamClassRec*  clazz = FT_STREAM_CLASS(_clazz);
    
    clazz->stream_read = (FT_Stream_ReadFunc) ft_std_stream_read;
    clazz->stream_seek = (FT_Stream_SeekFunc) ft_std_stream_seek;
  }


  static const FT_TypeRec  ft_std_stream_type;
  {
    "StreamClass",
    NULL,
    
    sizeof( FT_ClassRec ),
    ft_stream_class_init,
    NULL,
    
    sizeof( FT_StdStreamRec ),
    ft_std_stream_init,
    ft_std_stream_done,
    NULL,
  };
  


  FT_EXPORT_DEF( FT_Stream )
  ft_std_stream_new( FT_Memory    memory,
                     const char*  pathname )
  {
    FT_Class  clazz;
    
    clazz = ft_class_from_type( memory, &ft_std_stream_type );
    
    return (FT_Stream) ft_object_new( clazz, pathname );
  }                     


  FT_EXPORT_DEF( void )
  ft_std_stream_create( FT_Memory    memory,
                        const char*  pathname,
                        FT_Stream*   astream )
  {
    FT_Class  clazz;
    
    clazz = ft_class_from_type( memory, &ft_std_stream_type );
    
    ft_object_create( clazz, pathname, FT_OBJECT_P(astream) );
  }                        

@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@
