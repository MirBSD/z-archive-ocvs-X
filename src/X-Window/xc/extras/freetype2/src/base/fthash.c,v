head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.29.45;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.59;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.59;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.38.12;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.08.54;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@#include "fthash.h"
#include FT_INTERNAL_MEMORY_H
#include FT_INTERNAL_DEBUG_H

#define  FT_HASH_MAX_LOAD  2
#define  FT_HASH_MIN_LOAD  1
#define  FT_HASH_SUB_LOAD  (FT_HASH_MAX_LOAD-FT_HASH_MIN_LOAD)

/* this one _must_ be a power of 2 !! */
#define  FT_HASH_INITIAL_SIZE  8


  FT_BASE_DEF( void )
  ft_hash_done( FT_Hash              table,
                FT_Hash_ForeachFunc  node_func,
                const FT_Pointer     node_data )
  {
    if ( table )
    {
      FT_Memory  memory = table->memory;

      if ( node_func )
        ft_hash_foreach( table, node_func, node_data );

      FT_FREE( table->buckets );
      table->p     = 0;
      table->mask  = 0;
      table->slack = 0;

      table->compare = NULL;
    }
  }


  FT_BASE_DEF( FT_UInt )
  ft_hash_get_size( FT_Hash  table )
  {
    FT_UInt  result = 0;

    if ( table )
      result = (table->p + table->mask + 1)*FT_HASH_MAX_LOAD - table->slack;

    return result;
  }



  FT_BASE_DEF( void )
  ft_hash_init( FT_Hash              table,
                FT_Hash_CompareFunc  compare,
                FT_Memory            memory )
  {
    hash->memory  = memory;
    hash->compare = node_compare;
    hash->p       = 0;
    hash->mask    = FT_HASH_INITIAL_SIZE-1;
    hash->slack   = FT_HASH_INITIAL_SIZE*FT_HASH_MAX_LOAD;

    FT_NEW_ARRAY( hash->buckets, FT_HASH_INITIAL_SIZE*2 );
  }



  FT_BASE_DEF( void )
  ft_hash_foreach( FT_Hash              table,
                   FT_Hash_ForeachFunc  foreach_func,
                   const FT_Pointer     foreach_data )
  {
    FT_UInt       count = table->p + table->mask + 1;
    FT_HashNode*  pnode = table->buckets;
    FT_HashNode   node, next;

    for ( ; count > 0; count--, pnode++ )
    {
      node = *pnode;
      while ( node )
      {
        next = node->link;
        foreach_func( node, foreach_data );
        node = next;
      }
    }
  }



  FT_BASE_DEF( FT_HashNode* )
  ft_hash_lookup( FT_Hash      table,
                  FT_HashNode  keynode )
  {
    FT_UInt    index;
    FT_UInt23  hash = keynode->hash;

    index = (FT_UInt)(hash & table->mask);
    if ( index < table->p )
      index = (FT_UInt)(hash & (2*table->mask+1));

    pnode = &table->buckets[index];
    for (;;)
    {
      node = *pnode;
      if ( node == NULL )
        break;

      if ( node->hash == hash && table->compare( node, keynode ) )
        break;

      pnode = &node->link;
    }

    return pnode;
  }




  FT_BASE_DEF( void )
  ft_hash_add( FT_Hash       table,
               FT_HashNode*  pnode,
               FT_HashNode   new_node )
  {
    /* add it to the hash table */
    new_node->link = *pnode;
    *pnode         = new_node;

    if ( --table->slack < 0 )
    {
      FT_UInt       p     = table->p;
      FT_UInt       mask  = table->mask;
      FT_HashNode   new_list;

      /* split a single bucket */
      new_list = NULL;
      pnode    = table->buckets + p;
      for (;;)
      {
        node = *pnode;
        if ( node == NULL )
          break;

        if ( node->hash & mask )
        {
          *pnode     = node->link;
          node->link = new_list;
          new_list   = node;
        }
        else
          pnode = &node->link;
      }

      table->buckets[ p + mask + 1 ] = new_list;

      table->slack += FT_HASH_MAX_LOAD;

      if ( p >= mask )
      {
        FT_RENEW_ARRAY( hash->buckets, (mask+1)*2, (mask+1)*4 );
        table->mask = 2*mask + 1;
        table->p    = 0;
      }
      else
        table->p = p + 1;
    }
  }



  FT_BASE_DEF( FT_Int )
  ft_hash_remove( FT_Hash      table,
                  FT_HashNode* pnode )
  {
    FT_HashNode  node;
    FT_UInt      num_buckets;

    FT_ASSERT( pnode != NULL && node != NULL );

    node         = *pnode;
    *pnode->link = node->link;
    node->link   = NULL;

    num_buckets = ( table->p + table->mask + 1) ;

    if ( ++ table->slack > num_buckets*FT_HASH_SUB_LOAD )
    {
      FT_UInt       p         = table->p;
      FT_UInt       mask      = table->mask;
      FT_UInt       old_index = p + mask;
      FT_HashNode*  pnode;
      FT_HashNode*  pold;

      if ( old_index < FT_HASH_INITIAL_SIZE )
        return;

      if ( p == 0 )
      {
        table->mask >>= 1;
        p             = table->mask;

        FT_RENEW_ARRAY( hash->buckets, (mask+1)*2, (mask) );
      }
      else
        p--;

      pnode = table->buckets + p;
      while ( *pnode )
        pnode = &(*pnode)->link;

      pold   = table->buckets + old_index;
      *pnode = *pold;
      *pold  = NULL;

      table->slack -= FT_HASH_MAX_LOAD;
      table->p      = p;
    }
  }
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d1 1
a1 3
#include <ft2build.h>
#include FT_TYPES_H
#include FT_INTERNAL_HASH_H
d30 1
a30 1
      table->node_equal = NULL;
d48 10
a57 14
  FT_BASE_DEF( FT_Error )
  ft_hash_init( FT_Hash            table,
                FT_Hash_EqualFunc  equal,
                FT_Memory          memory )
  {
    FT_Error  error;

    table->memory     = memory;
    table->p          = 0;
    table->mask       = FT_HASH_INITIAL_SIZE-1;
    table->slack      = FT_HASH_INITIAL_SIZE*FT_HASH_MAX_LOAD;
    table->node_equal = equal;

    (void)FT_NEW_ARRAY( table->buckets, FT_HASH_INITIAL_SIZE*2 );
d59 1
a59 1
    return error;
d87 1
a87 1
  FT_BASE_DEF( FT_HashLookup )
d91 2
a92 3
    FT_UInt       index;
    FT_UInt32     hash = keynode->hash;
    FT_HashNode   node, *pnode;
d105 1
a105 1
      if ( node->hash == hash && table->node_equal( node, keynode ) )
d117 4
a120 4
  FT_BASE_DEF( FT_Error )
  ft_hash_add( FT_Hash        table,
               FT_HashLookup  lookup,
               FT_HashNode    new_node )
a121 2
    FT_Error     error = 0;

d123 2
a124 2
    new_node->link = *lookup;
    *lookup        = new_node;
d130 1
a130 1
      FT_HashNode   new_list, node, *pnode;
d157 1
a157 6
        FT_Memory  memory = table->memory;


        if (FT_RENEW_ARRAY( table->buckets, (mask+1)*2, (mask+1)*4 ))
          goto Exit;

a163 2
  Exit:
    return error;
d168 3
a170 3
  FT_BASE_DEF( FT_Error )
  ft_hash_remove( FT_Hash        table,
                  FT_HashLookup  lookup )
a173 1
    FT_Error     error = 0;
d177 3
a179 3
    node       = *lookup;
    *lookup    = node->link;
    node->link = NULL;
d183 1
a183 1
    if ( ++ table->slack > (FT_Long)num_buckets*FT_HASH_SUB_LOAD )
d192 1
a192 1
        goto Exit;
a195 2
        FT_Memory  memory = table->memory;

d199 1
a199 11
        if ( FT_RENEW_ARRAY( table->buckets, (mask+1)*2, (mask+1) ) )
        {
          /* this should never happen normally, but who knows :-)   */
          /* we need to re-inject the node in the hash table before */
          /* returning there, since it's safer                      */
          pnode      = table->buckets;
          node->link = *pnode;
          *pnode     = node;

          goto Exit;
        }
a214 2
  Exit:
    return error;
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d1 1
a1 3
#include <ft2build.h>
#include FT_TYPES_H
#include FT_INTERNAL_HASH_H
d30 1
a30 1
      table->node_equal = NULL;
d48 10
a57 14
  FT_BASE_DEF( FT_Error )
  ft_hash_init( FT_Hash            table,
                FT_Hash_EqualFunc  equal,
                FT_Memory          memory )
  {
    FT_Error  error;

    table->memory     = memory;
    table->p          = 0;
    table->mask       = FT_HASH_INITIAL_SIZE-1;
    table->slack      = FT_HASH_INITIAL_SIZE*FT_HASH_MAX_LOAD;
    table->node_equal = equal;

    (void)FT_NEW_ARRAY( table->buckets, FT_HASH_INITIAL_SIZE*2 );
d59 1
a59 1
    return error;
d87 1
a87 1
  FT_BASE_DEF( FT_HashLookup )
d91 2
a92 3
    FT_UInt       index;
    FT_UInt32     hash = keynode->hash;
    FT_HashNode   node, *pnode;
d105 1
a105 1
      if ( node->hash == hash && table->node_equal( node, keynode ) )
d117 4
a120 4
  FT_BASE_DEF( FT_Error )
  ft_hash_add( FT_Hash        table,
               FT_HashLookup  lookup,
               FT_HashNode    new_node )
a121 2
    FT_Error     error = 0;

d123 2
a124 2
    new_node->link = *lookup;
    *lookup        = new_node;
d130 1
a130 1
      FT_HashNode   new_list, node, *pnode;
d157 1
a157 6
        FT_Memory  memory = table->memory;


        if (FT_RENEW_ARRAY( table->buckets, (mask+1)*2, (mask+1)*4 ))
          goto Exit;

a163 2
  Exit:
    return error;
d168 3
a170 3
  FT_BASE_DEF( FT_Error )
  ft_hash_remove( FT_Hash        table,
                  FT_HashLookup  lookup )
a173 1
    FT_Error     error = 0;
d177 3
a179 3
    node       = *lookup;
    *lookup    = node->link;
    node->link = NULL;
d183 1
a183 1
    if ( ++ table->slack > (FT_Long)num_buckets*FT_HASH_SUB_LOAD )
d192 1
a192 1
        goto Exit;
a195 2
        FT_Memory  memory = table->memory;

d199 1
a199 11
        if ( FT_RENEW_ARRAY( table->buckets, (mask+1)*2, (mask+1) ) )
        {
          /* this should never happen normally, but who knows :-)   */
          /* we need to re-inject the node in the hash table before */
          /* returning there, since it's safer                      */
          pnode      = table->buckets;
          node->link = *pnode;
          *pnode     = node;

          goto Exit;
        }
a214 2
  Exit:
    return error;
@

