head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.05.16.16.30.33;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.20.01.47;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.01.47;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.10.07;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@#!/usr/local/bin/perl5
#
# CGI script for translating manpage into html on the fly.
# Front-end for PolyglotMan (formerly called RosettaMan)
#
# Author: Youki Kadobayashi  <youki@@center.osaka-u.ac.jp>
#
# NOTE: Replace 'CGI::Apache' with just 'CGI' for systems without mod_perl.
#
# ALSO: You may want to recompile rman like this:
#	MANREFPRINTF = "/mod-bin/cgi-rman.pl?keyword=%s&section=%s"
#

use CGI::Apache font;			# for people with mod_perl and apache
## use CGI font;			# for people without mod_perl
$par = "<P>\n";
$brk = "<BR>\n";
$bg = '#c0ffff';

$query = new CGI::Apache;		# for people with mod_perl and apache
## $query = new CGI;			# for people without mod_perl

%mandatory = ('keyword' => 'Name or keyword',
	      'section' => 'Manual page section');

@@given = $query->param;
if ($#given < 0) {
	&request_page;
	exit 0;
}

foreach $field (keys %mandatory) {
	if ($query->param($field) eq '') {
		push(@@missing, $mandatory{$field});
	}
}
if ($#missing >= 0) {
    &info_missing_page(@@missing);
} else {
    if ($query->param('type') eq 'apropos') {
	&apropos_page;
    } else {
	&manual_page;
    }
}
exit 0;

sub standout {
    my ($level, $color, $string) = @@_;

    # As per CGI.pm documentation "Generating new HTML tags"
    return $query->font({color => "$color"}, "<$level>$string</$level>");
}

sub error_page {
    my ($message) = @@_;

#    print $query->header,
#		$query->start_html(-title=>$message, -BGCOLOR=>$bg);

    print &standout("H2", "brown", $message),
		"The above error occured during the manual page generation",
		" process.  Please check keyword and section number,",
		" then try again.", $par;

#    print $query->end_html;
}

sub info_missing_page {
    my (@@missing) = @@_;

    print $query->header,
		$query->start_html(-title=>"Information is missing",
				   -BGCOLOR=>$bg);

    print &standout("H2", "brown", "Information is missing"),
		"Sorry but your request was not fulfilled because",
		" the following information is missing in your entry:", $par,
		join(' ', @@missing), $par,
		"Please go back and make sure to enter data on the missing field.";

    print $query->end_html;
}

sub request_page {
    print $query->header,
		$query->start_html(-title=>'Hypertext Manual Page',
				   -author=>'Youki Kadobayashi',
				   -BGCOLOR=>$bg);

    print &standout("H2", "green", "Hypertext Manual Page");

    print $query->start_form,
	"Type of Search: ",
		$query->radio_group(-name=>'type',
				    -values=>['man', 'apropos'],
				    -default=>'man'), $brk,
	"Name or Keyword: ",
		$query->textfield(-name=>'keyword'), $brk,
	"Manpage Section: ",
		$query->popup_menu(-name=>'section',
				   -labels=>{
				       0 => 'All Sections',
				       1 => '1 - General Commands',
				       2 => '2 - System Calls',
				       3 => '3 - Library Functions',
				       4 => '4 - Device Special Files',
				       5 => '5 - File Formats',
				       6 => '6 - Games',
				       7 => '7 - Macros and Conventions',
				       8 => '8 - System Administration',
				       'pgsql' => 'PostgreSQL',
				       'tcl' => 'Tcl/Tk',
				       'mh' => 'Message Handler',
				       'isode' => 'ISODE',
				       'X11' => 'X Window System'},
				   -values=>[0, 1, 2, 3, 4, 5, 6, 7, 8,
					     'pgsql', 'tcl', 'mh',
					     'isode', 'X11'],
				   -default=>0), $brk;

    print $query->submit(-name=>'Submit'), $query->reset,
		$query->end_form, $par;

    print $query->end_html;
}

sub manual_page {
    my $keyword = $query->param('keyword');
    my $section = $query->param('section');
    my $man = "man";
    my $ok = "-a-zA-Z0-9._";

    # sanitize for security
    $section =~ s/[^$ok]+/_/go;
    $keyword =~ s/[^$ok]+/_/go;

    if ($section =~ /^[A-Za-z]/) {
	$man .= " -M$section";
    }
    elsif ($section =~ /^\d/) {
	$section =~ s/^(\d)\w*/\1/go;
	$man .= " -s $section";
    }
    $man .= ' ' . $keyword;
    open (MAN, "$man | /usr/local/bin/rman -f html -n $keyword -s $section |");

    print $query->header;
	# start_html and end_html not needed here, since rman tacks them.
    print "<!-- text generated with '$man' by cgi-rman.pl -->\n";
    while (<MAN>) {
	print $_;
    }
    if ($? != 0 || $. < 15) {
	&error_page("Your request for manual page '$keyword' failed.");
#	print "return code $?  line $.\n";
	close(MAN);
	return;
    }
    close(MAN);
}

sub apropos_page {
    my $keyword = $query->param('keyword');
    my $section = $query->param('section');	# igored
    my $man = "man -k";
    my $matches = 0;

    $man .= ' ' . $keyword;
    open (MAN, "$man |");

    $url = $query->url;
    print $query->header, $query->start_html(-title=>$man);

    while (<MAN>) {
	if (/^([a-zA-Z0-9_.-]+)[, ][a-zA-Z0-9_., -]*\((\d)\w*\)/) {
	    print $`, qq{ <A HREF="$url?keyword=$1&section=$2&type=man"> },
		$&, "</A>", $';
	    ++$matches;
	} else {
	    print $_;
	}
	print $brk;
    }
    if ($? != 0 || $matches == 0) {
	&error_page("Your search request with keyword '$keyword' failed.");
#	print "return code $?  matches $matches\n";
	close(MAN);
	return;
    }
    close(MAN);

    print $query->end_html;
}

@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
