head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.28.38;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.11;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.11;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.29.50;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.05;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@
/*
 * Mesa 3-D graphics library
 * Version:  3.5
 *
 * Copyright (C) 1999-2001  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * New (3.1) transformation code written by Keith Whitwell.
 */

#include <math.h>
#include "m_vertices.h"

static void _XFORMAPI
TAG(transform_normalize_normals)( const GLmatrix *mat,
                                  GLfloat scale,
                                  const GLvector3f *in,
                                  const GLfloat *lengths,
                                  GLvector3f *dest )
{
   GLuint i;
   const GLfloat *from = in->start;
   GLuint stride = in->stride;
   GLuint count = in->count;
   GLfloat (*out)[3] = (GLfloat (*)[3])dest->start;
   GLfloat *m = mat->inv;
   GLfloat m0 = m[0],  m4 = m[4],  m8 = m[8];
   GLfloat m1 = m[1],  m5 = m[5],  m9 = m[9];
   GLfloat m2 = m[2],  m6 = m[6],  m10 = m[10];

   if (!lengths) {
      STRIDE_LOOP {
	 GLfloat tx, ty, tz;
	 {
	    const GLfloat ux = from[0],  uy = from[1],  uz = from[2];
	    tx = ux * m0 + uy * m1 + uz * m2;
	    ty = ux * m4 + uy * m5 + uz * m6;
	    tz = ux * m8 + uy * m9 + uz * m10;
	 }
	 {
	    GLdouble len = tx*tx + ty*ty + tz*tz;
	    if (len > 1e-20) {
	       GLdouble scale = 1.0 / GL_SQRT(len);
	       out[i][0] = (GLfloat) (tx * scale);
	       out[i][1] = (GLfloat) (ty * scale);
	       out[i][2] = (GLfloat) (tz * scale);
	    }
	    else
	    {
	       out[i][0] = out[i][1] = out[i][2] = 0;
	    }
	 }
      }
   }
   else {
      if (scale != 1.0) {
	 m0 *= scale,  m4 *= scale,  m8 *= scale;
	 m1 *= scale,  m5 *= scale,  m9 *= scale;
	 m2 *= scale,  m6 *= scale,  m10 *= scale;
      }

      STRIDE_LOOP {
	 GLfloat tx, ty, tz;
	 {
	    const GLfloat ux = from[0],  uy = from[1],  uz = from[2];
	    tx = ux * m0 + uy * m1 + uz * m2;
	    ty = ux * m4 + uy * m5 + uz * m6;
	    tz = ux * m8 + uy * m9 + uz * m10;
	 }
	 {
	    GLfloat len = lengths[i];
	    out[i][0] = tx * len;
	    out[i][1] = ty * len;
	    out[i][2] = tz * len;
	 }
      }
   }
   dest->count = in->count;
}


static void _XFORMAPI
TAG(transform_normalize_normals_no_rot)( const GLmatrix *mat,
                                         GLfloat scale,
                                         const GLvector3f *in,
                                         const GLfloat *lengths,
                                         GLvector3f *dest )
{
   GLuint i;
   const GLfloat *from = in->start;
   GLuint stride = in->stride;
   GLuint count = in->count;
   GLfloat (*out)[3] = (GLfloat (*)[3])dest->start;
   GLfloat *m = mat->inv;
   GLfloat m0 = m[0];
   GLfloat m5 = m[5];
   GLfloat m10 = m[10];
   if (!lengths) {
      STRIDE_LOOP {
	 GLfloat tx, ty, tz;
	 {
	    const GLfloat ux = from[0],  uy = from[1],  uz = from[2];
	    tx = ux * m0                    ;
	    ty =           uy * m5          ;
	    tz =                     uz * m10;
	 }
	 {
	    GLdouble len = tx*tx + ty*ty + tz*tz;
	    if (len > 1e-20) {
	       GLdouble scale = 1.0 / GL_SQRT(len);
	       out[i][0] = (GLfloat) (tx * scale);
	       out[i][1] = (GLfloat) (ty * scale);
	       out[i][2] = (GLfloat) (tz * scale);
	    }
	    else
	    {
	       out[i][0] = out[i][1] = out[i][2] = 0;
	    }
	 }
      }
   }
   else {
      m0 *= scale;
      m5 *= scale;
      m10 *= scale;

      STRIDE_LOOP {
	 GLfloat tx, ty, tz;
	 {
	    const GLfloat ux = from[0],  uy = from[1],  uz = from[2];
	    tx = ux * m0                    ;
	    ty =           uy * m5          ;
	    tz =                     uz * m10;
	 }
	 {
	    GLfloat len = lengths[i];
	    out[i][0] = tx * len;
	    out[i][1] = ty * len;
	    out[i][2] = tz * len;
	 }
      }
   }
   dest->count = in->count;
}


static void _XFORMAPI
TAG(transform_rescale_normals_no_rot)( const GLmatrix *mat,
                                       GLfloat scale,
                                       const GLvector3f *in,
                                       const GLfloat *lengths,
                                       GLvector3f *dest )
{
   GLuint i;
   const GLfloat *from = in->start;
   GLuint stride = in->stride;
   GLuint count = in->count;
   GLfloat (*out)[3] = (GLfloat (*)[3])dest->start;
   const GLfloat *m = mat->inv;
   GLfloat m0 = scale*m[0];
   GLfloat m5 = scale*m[5];
   GLfloat m10 = scale*m[10];
   (void) lengths;
   STRIDE_LOOP {
      GLfloat ux = from[0],  uy = from[1],  uz = from[2];
      out[i][0] = ux * m0;
      out[i][1] =           uy * m5;
      out[i][2] =                     uz * m10;
   }
   dest->count = in->count;
}

static void _XFORMAPI
TAG(transform_rescale_normals)( const GLmatrix *mat,
                                GLfloat scale,
                                const GLvector3f *in,
                                const GLfloat *lengths,
                                GLvector3f *dest )
{
   GLuint i;
   const GLfloat *from = in->start;
   GLuint stride = in->stride;
   GLuint count = in->count;
   GLfloat (*out)[3] = (GLfloat (*)[3])dest->start;
   /* Since we are unlikely to have < 3 vertices in the buffer,
    * it makes sense to pre-multiply by scale.
    */
   const GLfloat *m = mat->inv;
   GLfloat m0 = scale*m[0],  m4 = scale*m[4],  m8 = scale*m[8];
   GLfloat m1 = scale*m[1],  m5 = scale*m[5],  m9 = scale*m[9];
   GLfloat m2 = scale*m[2],  m6 = scale*m[6],  m10 = scale*m[10];
   (void) lengths;
   STRIDE_LOOP {
      GLfloat ux = from[0],  uy = from[1],  uz = from[2];
      out[i][0] = ux * m0 + uy * m1 + uz * m2;
      out[i][1] = ux * m4 + uy * m5 + uz * m6;
      out[i][2] = ux * m8 + uy * m9 + uz * m10;
   }
   dest->count = in->count;
}


static void _XFORMAPI
TAG(transform_normals_no_rot)( const GLmatrix *mat,
			       GLfloat scale,
			       const GLvector3f *in,
			       const GLfloat *lengths,
			       GLvector3f *dest )
{
   GLuint i;
   const GLfloat *from = in->start;
   GLuint stride = in->stride;
   GLuint count = in->count;
   GLfloat (*out)[3] = (GLfloat (*)[3])dest->start;
   const GLfloat *m = mat->inv;
   GLfloat m0 = m[0];
   GLfloat m5 = m[5];
   GLfloat m10 = m[10];
   (void) scale;
   (void) lengths;
   STRIDE_LOOP {
      GLfloat ux = from[0],  uy = from[1],  uz = from[2];
      out[i][0] = ux * m0;
      out[i][1] =           uy * m5;
      out[i][2] =                     uz * m10;
   }
   dest->count = in->count;
}


static void _XFORMAPI
TAG(transform_normals)( const GLmatrix *mat,
                        GLfloat scale,
                        const GLvector3f *in,
                        const GLfloat *lengths,
                        GLvector3f *dest )
{
   GLuint i;
   const GLfloat *from = in->start;
   GLuint stride = in->stride;
   GLuint count = in->count;
   GLfloat (*out)[3] = (GLfloat (*)[3])dest->start;
   const GLfloat *m = mat->inv;
   GLfloat m0 = m[0],  m4 = m[4],  m8 = m[8];
   GLfloat m1 = m[1],  m5 = m[5],  m9 = m[9];
   GLfloat m2 = m[2],  m6 = m[6],  m10 = m[10];
   (void) scale;
   (void) lengths;
   STRIDE_LOOP {
      GLfloat ux = from[0],  uy = from[1],  uz = from[2];
      out[i][0] = ux * m0 + uy * m1 + uz * m2;
      out[i][1] = ux * m4 + uy * m5 + uz * m6;
      out[i][2] = ux * m8 + uy * m9 + uz * m10;
   }
   dest->count = in->count;
}


static void _XFORMAPI
TAG(normalize_normals)( const GLmatrix *mat,
                        GLfloat scale,
                        const GLvector3f *in,
                        const GLfloat *lengths,
                        GLvector3f *dest )
{
   GLuint i;
   const GLfloat *from = in->start;
   GLuint stride = in->stride;
   GLuint count = in->count;
   GLfloat (*out)[3] = (GLfloat (*)[3])dest->start;
   (void) mat;
   (void) scale;
   if (lengths) {
      STRIDE_LOOP {
	 const GLfloat x = from[0], y = from[1], z = from[2];
	 GLfloat invlen = lengths[i];
	 out[i][0] = x * invlen;
	 out[i][1] = y * invlen;
	 out[i][2] = z * invlen;
      }
   }
   else {
      STRIDE_LOOP {
	 const GLfloat x = from[0], y = from[1], z = from[2];
	 GLdouble len = x * x + y * y + z * z;
	 if (len > 1e-50) {
	    len = 1.0 / GL_SQRT(len);
	    out[i][0] = (GLfloat) (x * len);
	    out[i][1] = (GLfloat) (y * len);
	    out[i][2] = (GLfloat) (z * len);
	 }
	 else {
	    out[i][0] = x;
	    out[i][1] = y;
	    out[i][2] = z;
	 }
      }
   }
   dest->count = in->count;
}


static void _XFORMAPI
TAG(rescale_normals)( const GLmatrix *mat,
                      GLfloat scale,
                      const GLvector3f *in,
                      const GLfloat *lengths,
                      GLvector3f *dest )
{
   GLuint i;
   const GLfloat *from = in->start;
   GLuint stride = in->stride;
   GLuint count = in->count;
   GLfloat (*out)[3] = (GLfloat (*)[3])dest->start;
   (void) mat;
   (void) lengths;
   STRIDE_LOOP {
      SCALE_SCALAR_3V( out[i], scale, from );
   }
   dest->count = in->count;
}


static void _XFORMAPI
TAG(init_c_norm_transform)( void )
{
   _mesa_normal_tab[NORM_TRANSFORM_NO_ROT] =
      TAG(transform_normals_no_rot);

   _mesa_normal_tab[NORM_TRANSFORM_NO_ROT | NORM_RESCALE] =
      TAG(transform_rescale_normals_no_rot);

   _mesa_normal_tab[NORM_TRANSFORM_NO_ROT | NORM_NORMALIZE] =
      TAG(transform_normalize_normals_no_rot);

   _mesa_normal_tab[NORM_TRANSFORM] =
      TAG(transform_normals);

   _mesa_normal_tab[NORM_TRANSFORM | NORM_RESCALE] =
      TAG(transform_rescale_normals);

   _mesa_normal_tab[NORM_TRANSFORM | NORM_NORMALIZE] =
      TAG(transform_normalize_normals);

   _mesa_normal_tab[NORM_RESCALE] =
      TAG(rescale_normals);

   _mesa_normal_tab[NORM_NORMALIZE] =
      TAG(normalize_normals);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d4 1
a4 1
 * Version:  4.1
d6 1
a6 1
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
d30 2
a31 3
/* Functions to tranform a vector of normals.  This includes applying
 * the transformation matrix, rescaling and normalization.
 */
a32 8
/*
 * mat - the 4x4 transformation matrix
 * scale - uniform scale factor of the transformation matrix (not always used)
 * in - the source vector of normals
 * lengths - length of each incoming normal (may be NULL) (a display list
 *           optimization)
 * dest - the destination vector of normals
 */
d36 1
a36 1
                                  const GLvector4f *in,
d38 1
a38 1
                                  GLvector4f *dest )
d40 1
a40 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d42 4
a45 3
   const GLuint stride = in->stride;
   const GLuint count = in->count;
   const GLfloat *m = mat->inv;
a48 1
   GLuint i;
d67 2
a68 1
	    else {
d104 1
a104 1
                                         const GLvector4f *in,
d106 1
a106 1
                                         GLvector4f *dest )
d108 1
a108 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d110 4
a113 3
   const GLuint stride = in->stride;
   const GLuint count = in->count;
   const GLfloat *m = mat->inv;
a116 2
   GLuint i;

d134 2
a135 1
	    else {
d169 1
a169 1
                                       const GLvector4f *in,
d171 1
a171 1
                                       GLvector4f *dest )
d173 1
a173 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d175 3
a177 2
   const GLuint stride = in->stride;
   const GLuint count = in->count;
d179 3
a181 5
   const GLfloat m0 = scale*m[0];
   const GLfloat m5 = scale*m[5];
   const GLfloat m10 = scale*m[10];
   GLuint i;

a182 1

a191 1

d195 1
a195 1
                                const GLvector4f *in,
d197 1
a197 1
                                GLvector4f *dest )
d199 1
a199 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d201 3
a203 2
   const GLuint stride = in->stride;
   const GLuint count = in->count;
d208 3
a210 5
   const GLfloat m0 = scale*m[0],  m4 = scale*m[4],  m8 = scale*m[8];
   const GLfloat m1 = scale*m[1],  m5 = scale*m[5],  m9 = scale*m[9];
   const GLfloat m2 = scale*m[2],  m6 = scale*m[6],  m10 = scale*m[10];
   GLuint i;

a211 1

d225 1
a225 1
			       const GLvector4f *in,
d227 1
a227 1
			       GLvector4f *dest )
d229 1
a229 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d231 3
a233 2
   const GLuint stride = in->stride;
   const GLuint count = in->count;
d235 3
a237 5
   const GLfloat m0 = m[0];
   const GLfloat m5 = m[5];
   const GLfloat m10 = m[10];
   GLuint i;

a239 1

d253 1
a253 1
                        const GLvector4f *in,
d255 1
a255 1
                        GLvector4f *dest )
d257 1
a257 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d259 3
a261 2
   const GLuint stride = in->stride;
   const GLuint count = in->count;
d263 3
a265 5
   const GLfloat m0 = m[0],  m4 = m[4],  m8 = m[8];
   const GLfloat m1 = m[1],  m5 = m[5],  m9 = m[9];
   const GLfloat m2 = m[2],  m6 = m[6],  m10 = m[10];
   GLuint i;

a267 1

d281 1
a281 1
                        const GLvector4f *in,
d283 1
a283 1
                        GLvector4f *dest )
d285 1
a285 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d287 3
a289 4
   const GLuint stride = in->stride;
   const GLuint count = in->count;
   GLuint i;

a291 1

d325 1
a325 1
                      const GLvector4f *in,
d327 1
a327 1
                      GLvector4f *dest )
d329 1
a329 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d331 3
a333 4
   const GLuint stride = in->stride;
   const GLuint count = in->count;
   GLuint i;

a335 1

@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d4 1
a4 1
 * Version:  4.1
d6 1
a6 1
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
d30 2
a31 3
/* Functions to tranform a vector of normals.  This includes applying
 * the transformation matrix, rescaling and normalization.
 */
a32 8
/*
 * mat - the 4x4 transformation matrix
 * scale - uniform scale factor of the transformation matrix (not always used)
 * in - the source vector of normals
 * lengths - length of each incoming normal (may be NULL) (a display list
 *           optimization)
 * dest - the destination vector of normals
 */
d36 1
a36 1
                                  const GLvector4f *in,
d38 1
a38 1
                                  GLvector4f *dest )
d40 1
a40 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d42 4
a45 3
   const GLuint stride = in->stride;
   const GLuint count = in->count;
   const GLfloat *m = mat->inv;
a48 1
   GLuint i;
d67 2
a68 1
	    else {
d104 1
a104 1
                                         const GLvector4f *in,
d106 1
a106 1
                                         GLvector4f *dest )
d108 1
a108 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d110 4
a113 3
   const GLuint stride = in->stride;
   const GLuint count = in->count;
   const GLfloat *m = mat->inv;
a116 2
   GLuint i;

d134 2
a135 1
	    else {
d169 1
a169 1
                                       const GLvector4f *in,
d171 1
a171 1
                                       GLvector4f *dest )
d173 1
a173 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d175 3
a177 2
   const GLuint stride = in->stride;
   const GLuint count = in->count;
d179 3
a181 5
   const GLfloat m0 = scale*m[0];
   const GLfloat m5 = scale*m[5];
   const GLfloat m10 = scale*m[10];
   GLuint i;

a182 1

a191 1

d195 1
a195 1
                                const GLvector4f *in,
d197 1
a197 1
                                GLvector4f *dest )
d199 1
a199 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d201 3
a203 2
   const GLuint stride = in->stride;
   const GLuint count = in->count;
d208 3
a210 5
   const GLfloat m0 = scale*m[0],  m4 = scale*m[4],  m8 = scale*m[8];
   const GLfloat m1 = scale*m[1],  m5 = scale*m[5],  m9 = scale*m[9];
   const GLfloat m2 = scale*m[2],  m6 = scale*m[6],  m10 = scale*m[10];
   GLuint i;

a211 1

d225 1
a225 1
			       const GLvector4f *in,
d227 1
a227 1
			       GLvector4f *dest )
d229 1
a229 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d231 3
a233 2
   const GLuint stride = in->stride;
   const GLuint count = in->count;
d235 3
a237 5
   const GLfloat m0 = m[0];
   const GLfloat m5 = m[5];
   const GLfloat m10 = m[10];
   GLuint i;

a239 1

d253 1
a253 1
                        const GLvector4f *in,
d255 1
a255 1
                        GLvector4f *dest )
d257 1
a257 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d259 3
a261 2
   const GLuint stride = in->stride;
   const GLuint count = in->count;
d263 3
a265 5
   const GLfloat m0 = m[0],  m4 = m[4],  m8 = m[8];
   const GLfloat m1 = m[1],  m5 = m[5],  m9 = m[9];
   const GLfloat m2 = m[2],  m6 = m[6],  m10 = m[10];
   GLuint i;

a267 1

d281 1
a281 1
                        const GLvector4f *in,
d283 1
a283 1
                        GLvector4f *dest )
d285 1
a285 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d287 3
a289 4
   const GLuint stride = in->stride;
   const GLuint count = in->count;
   GLuint i;

a291 1

d325 1
a325 1
                      const GLvector4f *in,
d327 1
a327 1
                      GLvector4f *dest )
d329 1
a329 1
   GLfloat (*out)[4] = (GLfloat (*)[4])dest->start;
d331 3
a333 4
   const GLuint stride = in->stride;
   const GLuint count = in->count;
   GLuint i;

a335 1

@

