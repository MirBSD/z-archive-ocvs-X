head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.28.25;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.10;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.10;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.04;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@#ifdef MESA_TRACE

#include "glheader.h"
#include <time.h>  /* XXX move into glheader.h */
#include "tr_write.h"
#include "tr_context.h"

#define PATH_MAX 4098


static void trWriteFile( const void * buf, GLint recsize, GLint numrecs, const char * funcname ) {
	GLint recswritten;

	if( !(trCtx()->trDoPrint) ) {
		return;
	}

	recswritten = fwrite( buf, recsize, numrecs, trCtx()->logFP );
	if( recswritten != numrecs ) {
		fprintf( stderr, "Error writing to file in %s\n", funcname );
		fprintf( stderr, "Perhaps the disk is full?\n" );
		/* Should we abort ? */
		trCtx()->trDoPrint = GL_FALSE;
	}
}


static void (*trWrite)( const void *, GLint, GLint, const char *) = trWriteFile;


void trWriteCMD( GLint cmd ) {
	trWrite( (void*)&cmd, sizeof(GLint), 1, "trWriteCMD" );
}

void trWriteb( GLbyte b ) {
	trWrite( (void*)&b, sizeof(GLbyte), 1, "trWriteb" );
}

void trWrited( GLdouble d ) {
	trWrite( (void*)&d, sizeof(GLdouble), 1, "trWrited" );
}

void trWriteClampd( GLclampd cd ) {
	trWrite( (void*)&cd, sizeof(GLclampd), 1, "trWriteClampd" );
}

void trWritef( GLfloat f ) {
	trWrite( (void*)&f, sizeof(GLfloat), 1, "trWritef" );
}

void trWriteClampf( GLclampf cf ) {
	trWrite( (void*)&cf, sizeof(GLclampf), 1, "trWriteClampf" );
}

void trWritei( GLint i ) {
	trWrite( (void*)&i, sizeof(GLint), 1, "trWritei" );
}

void trWrites( GLshort s ) {
	trWrite( (void*)&s, sizeof(GLshort), 1, "trWrites" );
}

void trWriteub( GLubyte ub ) {
	trWrite( (void*)&ub, sizeof(GLubyte), 1, "trWriteub" );
}

void trWriteui( GLuint ui ) {
	trWrite( (void*)&ui, sizeof(GLuint), 1, "trWriteui" );
}

void trWriteus( GLushort us ) {
	trWrite( (void*)&us, sizeof(GLushort), 1, "trWriteus" );
}

void trWriteBool( GLboolean b ) {
	trWrite( (void*)&b, sizeof(GLboolean), 1, "trWriteBool" );
}

void trWriteBits( GLbitfield bf ) {
	trWrite( (void*)&bf, sizeof(GLbitfield), 1, "trWriteBits" );
}

void trWriteEnum( GLenum en ) {
	trWrite( (void*)&en, sizeof(GLenum), 1, "trWriteEnum" );
}

void trWriteSizei( GLsizei si ) {
	trWrite( (void*)&si, sizeof(GLsizei), 1, "trWriteSizei" );
}


void trWritePointer( const void * p ) {
	trWrite( (void*)&p, sizeof(void *), 1, "trWritePointer" );
}


void trWriteArrayb( GLsizei n, const GLbyte * b ) {
	trWrite( (void *)b, sizeof(GLbyte), n, "trWriteArrayb" );
}


void trWriteArrayub( GLsizei n, const GLubyte * ub ) {
	trWrite( (void *)ub, sizeof(GLubyte), n, "trWriteArrayub" );
}


void trWriteArrays( GLsizei n, const GLshort * s ) {
	trWrite( (void *)s, sizeof(GLshort), n, "trWriteArrays" );
}


void trWriteArrayus( GLsizei n, const GLushort * us ) {
	trWrite( (void *)us, sizeof(GLushort), n, "trWriteArrayus" );
}


void trWriteArrayi( GLsizei n, const GLint * i ) {
	trWrite( (void *)i, sizeof(GLint), n, "trWriteArrayi" );
}


void trWriteArrayui( GLsizei n, const GLuint * ui ) {
	trWrite( (void *)ui, sizeof(GLuint), n, "trWriteArrayui" );
}


void trWriteArrayBool( GLsizei n, const GLboolean * b ) {
	trWrite( (void *)b, sizeof(GLboolean), n, "trWriteArrayBool" );
}


void trWriteArrayf( GLsizei n, const GLfloat * f ) {
	trWrite( (void *)f, sizeof(GLfloat), n, "trWriteArrayf" );
}


void trWriteArrayd( GLsizei n, const GLdouble * d ) {
	trWrite( (void *)d, sizeof(GLdouble), n, "trWriteArrayd" );
}


void trWriteString( const char * str ) {
	GLuint length = strlen(str);
	trWriteui( length );
	trWrite( (void *)str, sizeof(GLubyte), length, "trWriteString" );
}


void trFileFlush( void ) {
  fflush( trCtx()->logFP );
}


static void trWriteTypeInformation( void ) {
	
	trWriteub( sizeof(GLint) );
	trWriteub( sizeof(GLshort) );
	trWriteub( sizeof(GLfloat) );
	trWriteub( sizeof(GLdouble) );
	trWriteub( sizeof(GLboolean) );
	trWriteub( sizeof(GLenum) );
	trWriteub( sizeof(GLsizei) );
	trWriteub( sizeof(GLbitfield) );
	trWriteub( sizeof(GLclampf) );
	trWriteub( sizeof(GLclampd) );
	trWriteub( sizeof(GLvoid *) );

}


static void trWriteHeader( void ) {
	struct tm *newtime;
	time_t aclock;
	char timestring[256];

	trWriteString( "0.0.1" );
	trWriteString( trCtx()->traceName );
	trWritei( trCtx()->framecounter );

	/* Always print this! */
	time( &aclock );
	newtime = localtime( &aclock );
	asctime( newtime );
	snprintf( timestring, sizeof(timestring), "Time: %s", asctime( newtime ) );
	trWriteString( timestring );
}


static void trWriteGLState( void ) {
	/*
	 * This function will write all the queryable GL state at
	 * the time the trace is started.
	 */
}


void trOpenLogFile( void ) {
	GLint numchars;
	char buffer[PATH_MAX];

	numchars = snprintf( buffer, sizeof(buffer), "%s-gl.log.%d",
	                     trCtx()->traceName, trCtx()->framecounter ); 
	if( numchars > -1 && numchars < sizeof(buffer) ) {
		trCtx()->logFP = fopen( buffer, "wb" );

		/* This information is needed before we can extract _anything_ */
		trWriteTypeInformation();
		trWriteHeader();
		trWriteGLState();

		(trCtx()->framecounter)++;
	} else if( numchars > -1 ) {
		fprintf( stderr, "buffer needs to be %d bytes long for logging to work.\n",
		         numchars + 1 );
		exit( -1 );
	} else {
		fprintf( stderr, "buffer needs to grow for logging to work.  Try %d bytes.\n",
		         sizeof(buffer) * 2 );
		exit( -1 );
	}
}


void trCloseLogFile( void ) {
	if( trCtx()->logFP != NULL ) {
		fclose(trCtx()->logFP);
	}

	trCtx()->logFP = NULL;
}


#else
extern void tr_write_dummy_func(void);
void tr_write_dummy_func(void)
{
}
#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@
