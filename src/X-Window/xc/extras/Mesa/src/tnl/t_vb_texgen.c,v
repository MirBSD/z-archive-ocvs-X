head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.29.02;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.16;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.16;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.30.30;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.19;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@
/*
 * Mesa 3-D graphics library
 * Version:  3.5
 *
 * Copyright (C) 1999-2001  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Brian Paul <brian@@valinux.com>
 *    Keith Whitwell <keithw@@valinux.com>
 */


#include "glheader.h"
#include "colormac.h"
#include "context.h"
#include "macros.h"
#include "mmath.h"
#include "mem.h"
#include "mtypes.h"

#include "math/m_xform.h"

#include "t_context.h"
#include "t_pipeline.h"


/***********************************************************************
 * Automatic texture coordinate generation (texgen) code.
 */


struct texgen_stage_data;

typedef void (*texgen_func)( GLcontext *ctx,
			     struct texgen_stage_data *store,
			     GLuint unit);


struct texgen_stage_data {

   /* Per-texunit derived state.
    */
   GLuint TexgenSize[MAX_TEXTURE_UNITS];
   GLuint TexgenHoles[MAX_TEXTURE_UNITS];
   texgen_func TexgenFunc[MAX_TEXTURE_UNITS];

   /* Temporary values used in texgen.
    */
   GLfloat (*tmp_f)[3];
   GLfloat *tmp_m;

   /* Buffered outputs of the stage.
    */
   GLvector4f texcoord[MAX_TEXTURE_UNITS];
};


#define TEXGEN_STAGE_DATA(stage) ((struct texgen_stage_data *)stage->privatePtr)



static GLuint all_bits[5] = {
   0,
   VEC_SIZE_1,
   VEC_SIZE_2,
   VEC_SIZE_3,
   VEC_SIZE_4,
};

#define VEC_SIZE_FLAGS (VEC_SIZE_1|VEC_SIZE_2|VEC_SIZE_3|VEC_SIZE_4)

#define TEXGEN_NEED_M            (TEXGEN_SPHERE_MAP)
#define TEXGEN_NEED_F            (TEXGEN_SPHERE_MAP        | \
				  TEXGEN_REFLECTION_MAP_NV)



static void build_m3( GLfloat f[][3], GLfloat m[],
		      const GLvector3f *normal,
		      const GLvector4f *eye )
{
   GLuint stride = eye->stride;
   GLfloat *coord = (GLfloat *)eye->start;
   GLuint count = eye->count;
   const GLfloat *norm = normal->start;
   GLuint i;

   for (i=0;i<count;i++,STRIDE_F(coord,stride),STRIDE_F(norm,normal->stride)) {
      GLfloat u[3], two_nu, fx, fy, fz;
      COPY_3V( u, coord );
      NORMALIZE_3FV( u );
      two_nu = 2.0F * DOT3(norm,u);
      fx = f[i][0] = u[0] - norm[0] * two_nu;
      fy = f[i][1] = u[1] - norm[1] * two_nu;
      fz = f[i][2] = u[2] - norm[2] * two_nu;
      m[i] = fx * fx + fy * fy + (fz + 1.0F) * (fz + 1.0F);
      if (m[i] != 0.0F) {
	 m[i] = 0.5F / (GLfloat) GL_SQRT(m[i]);
      }
   }
}



static void build_m2( GLfloat f[][3], GLfloat m[],
		      const GLvector3f *normal,
		      const GLvector4f *eye )
{
   GLuint stride = eye->stride;
   GLfloat *coord = eye->start;
   GLuint count = eye->count;

   GLfloat *norm = normal->start;
   GLuint i;

   for (i=0;i<count;i++,STRIDE_F(coord,stride),STRIDE_F(norm,normal->stride)) {
      GLfloat u[3], two_nu, fx, fy, fz;
      COPY_2V( u, coord );
      u[2] = 0;
      NORMALIZE_3FV( u );
      two_nu = 2.0F * DOT3(norm,u);
      fx = f[i][0] = u[0] - norm[0] * two_nu;
      fy = f[i][1] = u[1] - norm[1] * two_nu;
      fz = f[i][2] = u[2] - norm[2] * two_nu;
      m[i] = fx * fx + fy * fy + (fz + 1.0F) * (fz + 1.0F);
      if (m[i] != 0.0F) {
	 m[i] = 0.5F / (GLfloat) GL_SQRT(m[i]);
      }
   }
}



typedef void (*build_m_func)( GLfloat f[][3],
			      GLfloat m[],
			      const GLvector3f *normal,
			      const GLvector4f *eye );


static build_m_func build_m_tab[5] = {
   0,
   0,
   build_m2,
   build_m3,
   build_m3
};


/* This is unusual in that we respect the stride of the output vector
 * (f).  This allows us to pass in either a texcoord vector4f, or a
 * temporary vector3f.
 */
static void build_f3( GLfloat *f,
		      GLuint fstride,
		      const GLvector3f *normal,
		      const GLvector4f *eye )
{
   GLuint stride = eye->stride;
   GLfloat *coord = eye->start;
   GLuint count = eye->count;

   GLfloat *norm = normal->start;
   GLuint i;

   for (i=0;i<count;i++) {
      GLfloat u[3], two_nu;
      COPY_3V( u, coord );
      NORMALIZE_3FV( u );
      two_nu = 2.0F * DOT3(norm,u);
      f[0] = u[0] - norm[0] * two_nu;
      f[1] = u[1] - norm[1] * two_nu;
      f[2] = u[2] - norm[2] * two_nu;
      STRIDE_F(coord,stride);
      STRIDE_F(f,fstride);
      STRIDE_F(norm, normal->stride);
   }
}


static void build_f2( GLfloat *f,
		      GLuint fstride,
		      const GLvector3f *normal,
		      const GLvector4f *eye )
{
   GLuint stride = eye->stride;
   GLfloat *coord = eye->start;
   GLuint count = eye->count;
   GLfloat *norm = normal->start;
   GLuint i;

   for (i=0;i<count;i++) {

      GLfloat u[3], two_nu;
      COPY_2V( u, coord );
      u[2] = 0;
      NORMALIZE_3FV( u );
      two_nu = 2.0F * DOT3(norm,u);
      f[0] = u[0] - norm[0] * two_nu;
      f[1] = u[1] - norm[1] * two_nu;
      f[2] = u[2] - norm[2] * two_nu;

      STRIDE_F(coord,stride);
      STRIDE_F(f,fstride);
      STRIDE_F(norm, normal->stride);
   }
}

typedef void (*build_f_func)( GLfloat *f,
			      GLuint fstride,
			      const GLvector3f *normal_vec,
			      const GLvector4f *eye );



/* Just treat 4-vectors as 3-vectors.
 */
static build_f_func build_f_tab[5] = {
   0,
   0,
   build_f2,
   build_f3,
   build_f3
};


/* Special case texgen functions.
 */
static void texgen_reflection_map_nv( GLcontext *ctx,
				      struct texgen_stage_data *store,
				      GLuint unit )
{
   struct vertex_buffer *VB = &TNL_CONTEXT(ctx)->vb;
   GLvector4f *in = VB->TexCoordPtr[unit];
   GLvector4f *out = &store->texcoord[unit];

   build_f_tab[VB->EyePtr->size]( out->start,
				  out->stride,
				  VB->NormalPtr,
				  VB->EyePtr );

   if (in) {
      out->flags |= (in->flags & VEC_SIZE_FLAGS) | VEC_SIZE_3;
      out->count = in->count;
      out->size = MAX2(in->size, 3);
      if (in->size == 4)
	 _mesa_copy_tab[0x8]( out, in );
   }
   else {
      out->flags |= VEC_SIZE_3;
      out->size = 3;
      out->count = in->count;
   }

}



static void texgen_normal_map_nv( GLcontext *ctx,
				  struct texgen_stage_data *store,
				  GLuint unit )
{
   struct vertex_buffer *VB = &TNL_CONTEXT(ctx)->vb;
   GLvector4f *in = VB->TexCoordPtr[unit];
   GLvector4f *out = &store->texcoord[unit];
   GLvector3f *normal = VB->NormalPtr;
   GLfloat (*texcoord)[4] = (GLfloat (*)[4])out->start;
   GLuint count = VB->Count;
   GLuint i;
   const GLfloat *norm = normal->start;

   for (i=0;i<count;i++, STRIDE_F(norm, normal->stride)) {
      texcoord[i][0] = norm[0];
      texcoord[i][1] = norm[1];
      texcoord[i][2] = norm[2];
   }


   if (in) {
      out->flags |= (in->flags & VEC_SIZE_FLAGS) | VEC_SIZE_3;
      out->count = in->count;
      out->size = MAX2(in->size, 3);
      if (in->size == 4)
	 _mesa_copy_tab[0x8]( out, in );
   }
   else {
      out->flags |= VEC_SIZE_3;
      out->size = 3;
      out->count = in->count;
   }
}


static void texgen_sphere_map( GLcontext *ctx,
			       struct texgen_stage_data *store,
			       GLuint unit )
{
   struct vertex_buffer *VB = &TNL_CONTEXT(ctx)->vb;
   GLvector4f *in = VB->TexCoordPtr[unit];
   GLvector4f *out = &store->texcoord[unit];
   GLfloat (*texcoord)[4] = (GLfloat (*)[4]) out->start;
   GLuint count = VB->Count;
   GLuint i;
   GLfloat (*f)[3] = store->tmp_f;
   GLfloat *m = store->tmp_m;

/*     fprintf(stderr, "%s normstride %d eyestride %d\n",  */
/*  	   __FUNCTION__, VB->NormalPtr->stride, */
/*  	   VB->EyePtr->stride); */

   (build_m_tab[VB->EyePtr->size])( store->tmp_f,
				    store->tmp_m,
				    VB->NormalPtr,
				    VB->EyePtr );

   for (i=0;i<count;i++) {
      texcoord[i][0] = f[i][0] * m[i] + 0.5F;
      texcoord[i][1] = f[i][1] * m[i] + 0.5F;
   }

   if (in) {
      out->size = MAX2(in->size,2);
      out->count = in->count;
      out->flags |= (in->flags & VEC_SIZE_FLAGS) | VEC_SIZE_2;
      if (in->size > 2)
	 _mesa_copy_tab[all_bits[in->size] & ~0x3]( out, in );
   } else {
      out->size = 2;
      out->flags |= VEC_SIZE_2;
      out->count = in->count;
   }
}



static void texgen( GLcontext *ctx,
		    struct texgen_stage_data *store,
		    GLuint unit )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   struct vertex_buffer *VB = &tnl->vb;
   GLvector4f *in = VB->TexCoordPtr[unit];
   GLvector4f *out = &store->texcoord[unit];
   struct gl_texture_unit *texUnit = &ctx->Texture.Unit[unit];
   const GLvector4f *obj = VB->ObjPtr;
   const GLvector4f *eye = VB->EyePtr;
   const GLvector3f *normal = VB->NormalPtr;
   GLfloat (*texcoord)[4] = (GLfloat (*)[4])out->data;
   GLfloat *indata;
   GLuint count = VB->Count;
   GLfloat (*f)[3] = store->tmp_f;
   GLfloat *m = store->tmp_m;
	 GLuint holes = 0;


   if (texUnit->_GenFlags & TEXGEN_NEED_M) {
      build_m_tab[in->size]( store->tmp_f, store->tmp_m, normal, eye );
   } else if (texUnit->_GenFlags & TEXGEN_NEED_F) {
      build_f_tab[in->size]( (GLfloat *)store->tmp_f, 3, normal, eye );
   }

   if (!in) {
      ASSERT(0);
      in = out;
      in->count = VB->Count;

      out->size = store->TexgenSize[unit];
      out->flags |= texUnit->TexGenEnabled;
      out->count = VB->Count;
      holes = store->TexgenHoles[unit];
   }
   else {
      GLuint copy = (all_bits[in->size] & ~texUnit->TexGenEnabled);
      if (copy)
	 _mesa_copy_tab[copy]( out, in );

      out->size = MAX2(in->size, store->TexgenSize[unit]);
      out->flags |= (in->flags & VEC_SIZE_FLAGS) | texUnit->TexGenEnabled;
      out->count = in->count;

      holes = ~all_bits[in->size] & store->TexgenHoles[unit];
   }

   if (holes) {
      if (holes & VEC_DIRTY_2) _mesa_vector4f_clean_elem(out, count, 2);
      if (holes & VEC_DIRTY_1) _mesa_vector4f_clean_elem(out, count, 1);
      if (holes & VEC_DIRTY_0) _mesa_vector4f_clean_elem(out, count, 0);
   }

   if (texUnit->TexGenEnabled & S_BIT) {
      GLuint i;
      switch (texUnit->GenModeS) {
      case GL_OBJECT_LINEAR:
	 _mesa_dotprod_tab[obj->size]( (GLfloat *)out->data,
				       sizeof(out->data[0]), obj,
				       texUnit->ObjectPlaneS );
	 break;
      case GL_EYE_LINEAR:
	 _mesa_dotprod_tab[eye->size]( (GLfloat *)out->data,
				       sizeof(out->data[0]), eye,
				       texUnit->EyePlaneS );
	 break;
      case GL_SPHERE_MAP:
	 for (indata=in->start,i=0 ; i<count ;i++, STRIDE_F(indata,in->stride))
	    texcoord[i][0] = indata[0] * m[i] + 0.5F;
	 break;
      case GL_REFLECTION_MAP_NV:
	 for (i=0;i<count;i++)
	     texcoord[i][0] = f[i][0];
	 break;
      case GL_NORMAL_MAP_NV: {
	 const GLfloat *norm = normal->start;
	 for (i=0;i<count;i++, STRIDE_F(norm, normal->stride)) {
	     texcoord[i][0] = norm[0];
	 }
	 break;
      }
      default:
	 _mesa_problem(ctx, "Bad S texgen");
      }
   }

   if (texUnit->TexGenEnabled & T_BIT) {
      GLuint i;
      switch (texUnit->GenModeT) {
      case GL_OBJECT_LINEAR:
	 _mesa_dotprod_tab[obj->size]( &(out->data[0][1]),
				       sizeof(out->data[0]), obj,
				       texUnit->ObjectPlaneT );
	 break;
      case GL_EYE_LINEAR:
	 _mesa_dotprod_tab[eye->size]( &(out->data[0][1]),
				       sizeof(out->data[0]), eye,
				       texUnit->EyePlaneT );
	 break;
      case GL_SPHERE_MAP:
	 for (indata=in->start,i=0; i<count ;i++,STRIDE_F(indata,in->stride))
	     texcoord[i][1] = indata[1] * m[i] + 0.5F;
	 break;
      case GL_REFLECTION_MAP_NV:
	 for (i=0;i<count;i++)
	     texcoord[i][0] = f[i][0];
	 break;
      case GL_NORMAL_MAP_NV: {
	 const GLfloat *norm = normal->start;
	 for (i=0;i<count;i++, STRIDE_F(norm, normal->stride)) {
	     texcoord[i][1] = norm[1];
	 }
	 break;
      }
      default:
	 _mesa_problem(ctx, "Bad T texgen");
      }
   }

   if (texUnit->TexGenEnabled & R_BIT) {
      GLuint i;
      switch (texUnit->GenModeR) {
      case GL_OBJECT_LINEAR:
	 _mesa_dotprod_tab[obj->size]( &(out->data[0][2]),
				       sizeof(out->data[0]), obj,
				       texUnit->ObjectPlaneR );
	 break;
      case GL_EYE_LINEAR:
	 _mesa_dotprod_tab[eye->size]( &(out->data[0][2]),
				       sizeof(out->data[0]), eye,
				       texUnit->EyePlaneR );
	 break;
      case GL_REFLECTION_MAP_NV:
	 for (i=0;i<count;i++)
	     texcoord[i][2] = f[i][2];
	 break;
      case GL_NORMAL_MAP_NV: {
	 const GLfloat *norm = normal->start;
	 for (i=0;i<count;i++,STRIDE_F(norm, normal->stride)) {
	     texcoord[i][2] = norm[2];
	 }
	 break;
      }
      default:
	 _mesa_problem(ctx, "Bad R texgen");
      }
   }

   if (texUnit->TexGenEnabled & Q_BIT) {
      switch (texUnit->GenModeQ) {
      case GL_OBJECT_LINEAR:
	 _mesa_dotprod_tab[obj->size]( &(out->data[0][3]),
				       sizeof(out->data[0]), obj,
				       texUnit->ObjectPlaneQ );
	 break;
      case GL_EYE_LINEAR:
	 _mesa_dotprod_tab[eye->size]( &(out->data[0][3]),
				       sizeof(out->data[0]), eye,
				       texUnit->EyePlaneQ );
	 break;
      default:
	 _mesa_problem(ctx, "Bad Q texgen");
      }
   }
}



static GLboolean run_texgen_stage( GLcontext *ctx,
				   struct gl_pipeline_stage *stage )
{
   struct vertex_buffer *VB = &TNL_CONTEXT(ctx)->vb;
   struct texgen_stage_data *store = TEXGEN_STAGE_DATA( stage );
   GLuint i;

   for (i = 0 ; i < ctx->Const.MaxTextureUnits ; i++)
      if (ctx->Texture._TexGenEnabled & ENABLE_TEXGEN(i)) {
	 if (stage->changed_inputs & (VERT_EYE | VERT_NORM | VERT_TEX(i)))
	    store->TexgenFunc[i]( ctx, store, i );

	 VB->TexCoordPtr[i] = &store->texcoord[i];
      }

   return GL_TRUE;
}




static GLboolean run_validate_texgen_stage( GLcontext *ctx,
					    struct gl_pipeline_stage *stage )
{
   struct texgen_stage_data *store = TEXGEN_STAGE_DATA(stage);
   GLuint i;

   for (i = 0 ; i < ctx->Const.MaxTextureUnits ; i++) {
      struct gl_texture_unit *texUnit = &ctx->Texture.Unit[i];

      if (texUnit->TexGenEnabled) {
	 GLuint sz;

	 if (texUnit->TexGenEnabled & R_BIT)
	    sz = 4;
	 else if (texUnit->TexGenEnabled & Q_BIT)
	    sz = 3;
	 else if (texUnit->TexGenEnabled & T_BIT)
	    sz = 2;
	 else
	    sz = 1;

	 store->TexgenSize[i] = sz;
	 store->TexgenHoles[i] = (all_bits[sz] & ~texUnit->TexGenEnabled);
	 store->TexgenFunc[i] = texgen;

	 if (texUnit->TexGenEnabled == (S_BIT|T_BIT|R_BIT)) {
	    if (texUnit->_GenFlags == TEXGEN_REFLECTION_MAP_NV) {
	       store->TexgenFunc[i] = texgen_reflection_map_nv;
	    }
	    else if (texUnit->_GenFlags == TEXGEN_NORMAL_MAP_NV) {
	       store->TexgenFunc[i] = texgen_normal_map_nv;
	    }
	 }
	 else if (texUnit->TexGenEnabled == (S_BIT|T_BIT) &&
		  texUnit->_GenFlags == TEXGEN_SPHERE_MAP) {
	    store->TexgenFunc[i] = texgen_sphere_map;
	 }
      }
   }

   stage->run = run_texgen_stage;
   return stage->run( ctx, stage );
}


static void check_texgen( GLcontext *ctx, struct gl_pipeline_stage *stage )
{
   GLuint i;
   stage->active = 0;

   if (ctx->Texture._TexGenEnabled) {
      GLuint inputs = 0;
      GLuint outputs = 0;

      if (ctx->Texture._GenFlags & TEXGEN_OBJ_LINEAR)
	 inputs |= VERT_OBJ;

      if (ctx->Texture._GenFlags & TEXGEN_NEED_EYE_COORD)
	 inputs |= VERT_EYE;

      if (ctx->Texture._GenFlags & TEXGEN_NEED_NORMALS)
	 inputs |= VERT_NORM;

      for (i = 0 ; i < ctx->Const.MaxTextureUnits ; i++)
	 if (ctx->Texture._TexGenEnabled & ENABLE_TEXGEN(i))
	 {
	    outputs |= VERT_TEX(i);

	    /* Need the original input in case it contains a Q coord:
	     * (sigh)
	     */
	    inputs |= VERT_TEX(i);

	    /* Something for Feedback? */
	 }

      if (stage->privatePtr)
	 stage->run = run_validate_texgen_stage;
      stage->active = 1;
      stage->inputs = inputs;
      stage->outputs = outputs;
   }
}




/* Called the first time stage->run() is invoked.
 */
static GLboolean alloc_texgen_data( GLcontext *ctx,
				    struct gl_pipeline_stage *stage )
{
   struct vertex_buffer *VB = &TNL_CONTEXT(ctx)->vb;
   struct texgen_stage_data *store;
   GLuint i;

   stage->privatePtr = CALLOC(sizeof(*store));
   store = TEXGEN_STAGE_DATA(stage);
   if (!store)
      return GL_FALSE;

   for (i = 0 ; i < ctx->Const.MaxTextureUnits ; i++)
      _mesa_vector4f_alloc( &store->texcoord[i], 0, VB->Size, 32 );

   store->tmp_f = (GLfloat (*)[3]) MALLOC(VB->Size * sizeof(GLfloat) * 3);
   store->tmp_m = (GLfloat *) MALLOC(VB->Size * sizeof(GLfloat));

   /* Now validate and run the stage.
    */
   stage->run = run_validate_texgen_stage;
   return stage->run( ctx, stage );
}


static void free_texgen_data( struct gl_pipeline_stage *stage )

{
   struct texgen_stage_data *store = TEXGEN_STAGE_DATA(stage);
   GLuint i;

   if (store) {
      for (i = 0 ; i < MAX_TEXTURE_UNITS ; i++)
	 if (store->texcoord[i].data)
	    _mesa_vector4f_free( &store->texcoord[i] );


      if (store->tmp_f) FREE( store->tmp_f );
      if (store->tmp_m) FREE( store->tmp_m );
      FREE( store );
      stage->privatePtr = NULL;
   }
}



const struct gl_pipeline_stage _tnl_texgen_stage =
{
   "texgen",
   _NEW_TEXTURE,		/* when to call check() */
   _NEW_TEXTURE,		/* when to invalidate stored data */
   0,0,0,			/* active, inputs, outputs */
   0,0,				/* changed_inputs, private */
   free_texgen_data,		/* destructor */
   check_texgen,		/* check */
   alloc_texgen_data		/* run -- initially set to alloc data */
};
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d4 1
a4 1
 * Version:  5.0.2
d6 1
a6 1
 * Copyright (C) 1999-2003  Brian Paul   All Rights Reserved.
d26 2
a27 2
 *    Brian Paul
 *    Keith Whitwell <keith@@tungstengraphics.com>
d36 1
a36 1
#include "imports.h"
d97 1
a97 1
		      const GLvector4f *normal,
d124 1
a124 1
		      const GLvector4f *normal,
d154 1
a154 1
			      const GLvector4f *normal,
d173 1
a173 1
		      const GLvector4f *normal,
d200 1
a200 1
		      const GLvector4f *normal,
d228 1
a228 1
			      const GLvector4f *normal_vec,
d283 1
a283 1
   GLvector4f *normal = VB->NormalPtr;
d324 1
a324 2

/*     _mesa_debug(NULL, "%s normstride %d eyestride %d\n",  */
d361 1
a361 1
   const struct gl_texture_unit *texUnit = &ctx->Texture.Unit[unit];
d364 1
a364 3
   const GLvector4f *normal = VB->NormalPtr;
   const GLfloat *m = store->tmp_m;
   const GLuint count = VB->Count;
d366 2
d369 3
a371 1
   GLuint holes = 0;
d374 1
a374 1
      build_m_tab[eye->size]( store->tmp_f, store->tmp_m, normal, eye );
d376 1
a376 1
      build_f_tab[eye->size]( (GLfloat *)store->tmp_f, 3, normal, eye );
a401 1
      if (holes & VEC_DIRTY_3) _mesa_vector4f_clean_elem(out, count, 3);
d421 2
a422 2
         for (i = 0; i < count; i++)
            texcoord[i][0] = f[i][0] * m[i] + 0.5F;
d454 2
a455 2
         for (i = 0; i < count; i++)
            texcoord[i][1] = f[i][1] * m[i] + 0.5F;
d531 1
a531 1
	 if (stage->changed_inputs & (VERT_BIT_EYE | VERT_BIT_NORMAL | VERT_BIT_TEX(i)))
d555 1
a555 1
	 if (texUnit->TexGenEnabled & Q_BIT)
d557 1
a557 1
	 else if (texUnit->TexGenEnabled & R_BIT)
d566 1
a566 1
	 store->TexgenFunc[i] = texgen; /* general solution */
a567 1
         /* look for special texgen cases */
d593 1
a593 1
   if (ctx->Texture._TexGenEnabled && !ctx->VertexProgram.Enabled) {
d598 1
a598 1
	 inputs |= VERT_BIT_POS;
d601 1
a601 1
	 inputs |= VERT_BIT_EYE;
d604 1
a604 1
	 inputs |= VERT_BIT_NORMAL;
d609 1
a609 1
	    outputs |= VERT_BIT_TEX(i);
d614 1
a614 1
	    inputs |= VERT_BIT_TEX(i);
d680 1
a680 1
   "texgen",			/* name */
d683 2
a684 5
   GL_FALSE,			/* active? */
   0,				/* inputs */
   0,				/* outputs */
   0,				/* changed_inputs */
   NULL,			/* private data */
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d4 1
a4 1
 * Version:  5.0.2
d6 1
a6 1
 * Copyright (C) 1999-2003  Brian Paul   All Rights Reserved.
d26 2
a27 2
 *    Brian Paul
 *    Keith Whitwell <keith@@tungstengraphics.com>
d36 1
a36 1
#include "imports.h"
d97 1
a97 1
		      const GLvector4f *normal,
d124 1
a124 1
		      const GLvector4f *normal,
d154 1
a154 1
			      const GLvector4f *normal,
d173 1
a173 1
		      const GLvector4f *normal,
d200 1
a200 1
		      const GLvector4f *normal,
d228 1
a228 1
			      const GLvector4f *normal_vec,
d283 1
a283 1
   GLvector4f *normal = VB->NormalPtr;
d324 1
a324 2

/*     _mesa_debug(NULL, "%s normstride %d eyestride %d\n",  */
d361 1
a361 1
   const struct gl_texture_unit *texUnit = &ctx->Texture.Unit[unit];
d364 1
a364 3
   const GLvector4f *normal = VB->NormalPtr;
   const GLfloat *m = store->tmp_m;
   const GLuint count = VB->Count;
d366 2
d369 3
a371 1
   GLuint holes = 0;
d374 1
a374 1
      build_m_tab[eye->size]( store->tmp_f, store->tmp_m, normal, eye );
d376 1
a376 1
      build_f_tab[eye->size]( (GLfloat *)store->tmp_f, 3, normal, eye );
a401 1
      if (holes & VEC_DIRTY_3) _mesa_vector4f_clean_elem(out, count, 3);
d421 2
a422 2
         for (i = 0; i < count; i++)
            texcoord[i][0] = f[i][0] * m[i] + 0.5F;
d454 2
a455 2
         for (i = 0; i < count; i++)
            texcoord[i][1] = f[i][1] * m[i] + 0.5F;
d531 1
a531 1
	 if (stage->changed_inputs & (VERT_BIT_EYE | VERT_BIT_NORMAL | VERT_BIT_TEX(i)))
d555 1
a555 1
	 if (texUnit->TexGenEnabled & Q_BIT)
d557 1
a557 1
	 else if (texUnit->TexGenEnabled & R_BIT)
d566 1
a566 1
	 store->TexgenFunc[i] = texgen; /* general solution */
a567 1
         /* look for special texgen cases */
d593 1
a593 1
   if (ctx->Texture._TexGenEnabled && !ctx->VertexProgram.Enabled) {
d598 1
a598 1
	 inputs |= VERT_BIT_POS;
d601 1
a601 1
	 inputs |= VERT_BIT_EYE;
d604 1
a604 1
	 inputs |= VERT_BIT_NORMAL;
d609 1
a609 1
	    outputs |= VERT_BIT_TEX(i);
d614 1
a614 1
	    inputs |= VERT_BIT_TEX(i);
d680 1
a680 1
   "texgen",			/* name */
d683 2
a684 5
   GL_FALSE,			/* active? */
   0,				/* inputs */
   0,				/* outputs */
   0,				/* changed_inputs */
   NULL,			/* private data */
@

