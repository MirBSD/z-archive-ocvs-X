head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.28.59;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.16;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.16;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.30.24;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.17;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@
/*
 * Mesa 3-D graphics library
 * Version:  3.5
 *
 * Copyright (C) 1999-2001  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@valinux.com>
 *
 */


#include "glheader.h"
#include "colormac.h"
#include "context.h"
#include "macros.h"
#include "mem.h"
#include "mmath.h"
#include "mtypes.h"
#include "math/m_eval.h"

#include "t_context.h"
#include "t_imm_debug.h"
#include "t_imm_eval.h"
#include "t_imm_exec.h"
#include "t_imm_fixup.h"
#include "t_imm_alloc.h"


static void eval_points1( GLfloat outcoord[][4],
			  GLfloat coord[][4],
			  const GLuint *flags,
			  GLfloat du, GLfloat u1 )
{
   GLuint i;
   for (i = 0 ; !(flags[i] & VERT_END_VB) ; i++)
      if (flags[i] & VERT_EVAL_ANY) {
	 outcoord[i][0] = coord[i][0];
	 outcoord[i][1] = coord[i][1];
	 if (flags[i] & VERT_EVAL_P1)
	    outcoord[i][0] = coord[i][0] * du + u1;
      }
}

static void eval_points2( GLfloat outcoord[][4],
			  GLfloat coord[][4],
			  const GLuint *flags,
			  GLfloat du, GLfloat u1,
			  GLfloat dv, GLfloat v1 )
{
   GLuint i;
   for (i = 0 ; !(flags[i] & VERT_END_VB) ; i++) {
      if (flags[i] & VERT_EVAL_ANY) {
	 outcoord[i][0] = coord[i][0];
	 outcoord[i][1] = coord[i][1];
	 if (flags[i] & VERT_EVAL_P2) {
	    outcoord[i][0] = coord[i][0] * du + u1;
	    outcoord[i][1] = coord[i][1] * dv + v1;
	 }
      }
   }
}

static const GLubyte dirty_flags[5] = {
   0,				/* not possible */
   VEC_DIRTY_0,
   VEC_DIRTY_1,
   VEC_DIRTY_2,
   VEC_DIRTY_3
};


static void eval1_4f( GLvector4f *dest,
		      GLfloat coord[][4],
		      const GLuint *flags,
		      GLuint dimension,
		      struct gl_1d_map *map )
{
   const GLfloat u1 = map->u1;
   const GLfloat du = map->du;
   GLfloat (*to)[4] = dest->data;
   GLuint i;

   for (i = 0 ; !(flags[i] & VERT_END_VB) ; i++)
      if (flags[i] & (VERT_EVAL_C1|VERT_EVAL_P1)) {
	 GLfloat u = (coord[i][0] - u1) * du;
	 ASSIGN_4V(to[i], 0,0,0,1);
	 _math_horner_bezier_curve(map->Points, to[i], u,
				   dimension, map->Order);
      }

   dest->size = MAX2(dest->size, dimension);
   dest->flags |= dirty_flags[dimension];
}

static void eval1_4f_ca( struct gl_client_array *dest,
			 GLfloat coord[][4],
			 const GLuint *flags,
			 GLuint dimension,
			 struct gl_1d_map *map )
{
   const GLfloat u1 = map->u1;
   const GLfloat du = map->du;
   GLfloat (*to)[4] = (GLfloat (*)[4])dest->Ptr;
   GLuint i;

   ASSERT(dest->Type == GL_FLOAT);
   ASSERT(dest->StrideB == 4 * sizeof(GLfloat));

   for (i = 0 ; !(flags[i] & VERT_END_VB) ; i++)
      if (flags[i] & (VERT_EVAL_C1|VERT_EVAL_P1)) {
	 GLfloat u = (coord[i][0] - u1) * du;
	 ASSIGN_4V(to[i], 0,0,0,1);
	 _math_horner_bezier_curve(map->Points, to[i], u,
				   dimension, map->Order);
      }

   dest->Size = MAX2(dest->Size, (GLint) dimension);
}


static void eval1_1ui( GLvector1ui *dest,
		       GLfloat coord[][4],
		       const GLuint *flags,
		       struct gl_1d_map *map )
{
   const GLfloat u1 = map->u1;
   const GLfloat du = map->du;
   GLuint *to = dest->data;
   GLuint i;

   for (i = 0 ; !(flags[i] & VERT_END_VB) ; i++)
      if (flags[i] & (VERT_EVAL_C1|VERT_EVAL_P1)) {
	 GLfloat u = (coord[i][0] - u1) * du;
	 GLfloat tmp;
	 _math_horner_bezier_curve(map->Points, &tmp, u, 1, map->Order);
	 to[i] = (GLuint) (GLint) tmp;
      }

}

static void eval1_norm( GLvector3f *dest,
			GLfloat coord[][4],
			const GLuint *flags,
			struct gl_1d_map *map )
{
   const GLfloat u1 = map->u1;
   const GLfloat du = map->du;
   GLfloat (*to)[3] = dest->data;
   GLuint i;

   for (i = 0 ; !(flags[i] & VERT_END_VB) ; i++)
      if (flags[i] & (VERT_EVAL_C1|VERT_EVAL_P1)) {
	 GLfloat u = (coord[i][0] - u1) * du;
	 _math_horner_bezier_curve(map->Points, to[i], u, 3, map->Order);
      }
}





static void eval2_obj_norm( GLvector4f *obj_ptr,
			    GLvector3f *norm_ptr,
			    GLfloat coord[][4],
			    GLuint *flags,
			    GLuint dimension,
			    struct gl_2d_map *map )
{
   const GLfloat u1 = map->u1;
   const GLfloat du = map->du;
   const GLfloat v1 = map->v1;
   const GLfloat dv = map->dv;
   GLfloat (*obj)[4] = obj_ptr->data;
   GLfloat (*normal)[3] = norm_ptr->data;
   GLuint i;

/*     fprintf(stderr, "%s\n", __FUNCTION__); */

   for (i = 0 ; !(flags[i] & VERT_END_VB) ; i++)
      if (flags[i] & (VERT_EVAL_C2|VERT_EVAL_P2)) {
	 GLfloat u = (coord[i][0] - u1) * du;
	 GLfloat v = (coord[i][1] - v1) * dv;
	 GLfloat du[4], dv[4];

	 ASSIGN_4V(obj[i], 0,0,0,1);
	 _math_de_casteljau_surf(map->Points, obj[i], du, dv, u, v, dimension,
				 map->Uorder, map->Vorder);

	 if (dimension == 4) {
	    du[0] = du[0]*obj[i][3] - du[3]*obj[i][0];
	    du[1] = du[1]*obj[i][3] - du[3]*obj[i][1];
	    du[2] = du[2]*obj[i][3] - du[3]*obj[i][2];
	 
	    dv[0] = dv[0]*obj[i][3] - dv[3]*obj[i][0];
	    dv[1] = dv[1]*obj[i][3] - dv[3]*obj[i][1];
	    dv[2] = dv[2]*obj[i][3] - dv[3]*obj[i][2];
	 }

	 CROSS3(normal[i], du, dv);
	 NORMALIZE_3FV(normal[i]);
      }

   obj_ptr->size = MAX2(obj_ptr->size, dimension);
   obj_ptr->flags |= dirty_flags[dimension];
}


static void eval2_4f( GLvector4f *dest,
		      GLfloat coord[][4],
		      const GLuint *flags,
		      GLuint dimension,
		      struct gl_2d_map *map )
{
   const GLfloat u1 = map->u1;
   const GLfloat du = map->du;
   const GLfloat v1 = map->v1;
   const GLfloat dv = map->dv;
   GLfloat (*to)[4] = dest->data;
   GLuint i;

   for (i = 0 ; !(flags[i] & VERT_END_VB) ; i++)
      if (flags[i] & (VERT_EVAL_C2|VERT_EVAL_P2)) {
	 GLfloat u = (coord[i][0] - u1) * du;
	 GLfloat v = (coord[i][1] - v1) * dv;

	 _math_horner_bezier_surf(map->Points, to[i], u, v, dimension,
				  map->Uorder, map->Vorder);
      }

   dest->size = MAX2(dest->size, dimension);
   dest->flags |= dirty_flags[dimension];
}

static void eval2_4f_ca( struct gl_client_array *dest,
			 GLfloat coord[][4],
			 const GLuint *flags,
			 GLuint dimension,
			 struct gl_2d_map *map )
{
   const GLfloat u1 = map->u1;
   const GLfloat du = map->du;
   const GLfloat v1 = map->v1;
   const GLfloat dv = map->dv;
   GLfloat (*to)[4] = (GLfloat (*)[4])dest->Ptr;
   GLuint i;

   ASSERT(dest->Type == GL_FLOAT);
   ASSERT(dest->StrideB == 4 * sizeof(GLfloat));

   for (i = 0 ; !(flags[i] & VERT_END_VB) ; i++)
      if (flags[i] & (VERT_EVAL_C2|VERT_EVAL_P2)) {
	 GLfloat u = (coord[i][0] - u1) * du;
	 GLfloat v = (coord[i][1] - v1) * dv;
	 _math_horner_bezier_surf(map->Points, to[i], u, v, dimension,
				  map->Uorder, map->Vorder);
      }

   dest->Size = MAX2(dest->Size, (GLint) dimension);
}


static void eval2_norm( GLvector3f *dest,
			GLfloat coord[][4],
			GLuint *flags,
			struct gl_2d_map *map )
{
   const GLfloat u1 = map->u1;
   const GLfloat du = map->du;
   const GLfloat v1 = map->v1;
   const GLfloat dv = map->dv;
   GLfloat (*to)[3] = dest->data;
   GLuint i;

   for (i = 0 ; !(flags[i] & VERT_END_VB) ; i++)
      if (flags[i] & (VERT_EVAL_C2|VERT_EVAL_P2)) {
	 GLfloat u = (coord[i][0] - u1) * du;
	 GLfloat v = (coord[i][1] - v1) * dv;
	 _math_horner_bezier_surf(map->Points, to[i], u, v, 3,
				  map->Uorder, map->Vorder);
     }

}


static void eval2_1ui( GLvector1ui *dest,
		       GLfloat coord[][4],
		       const GLuint *flags,
		       struct gl_2d_map *map )
{
   const GLfloat u1 = map->u1;
   const GLfloat du = map->du;
   const GLfloat v1 = map->v1;
   const GLfloat dv = map->dv;
   GLuint *to = dest->data;
   GLuint i;

   for (i = 0 ; !(flags[i] & VERT_END_VB) ; i++)
      if (flags[i] & (VERT_EVAL_C2|VERT_EVAL_P2)) {
	 GLfloat u = (coord[i][0] - u1) * du;
	 GLfloat v = (coord[i][1] - v1) * dv;
	 GLfloat tmp;
	 _math_horner_bezier_surf(map->Points, &tmp, u, v, 1,
				  map->Uorder, map->Vorder);

	 to[i] = (GLuint) (GLint) tmp;
      }
}






static void copy_4f( GLfloat to[][4], GLfloat from[][4], GLuint count )
{
   MEMCPY( to, from, count * sizeof(to[0]));
}

static void copy_4f_stride( GLfloat to[][4], GLfloat *from, 
			    GLuint stride, GLuint count )
{
   if (stride == 4 * sizeof(GLfloat))
      MEMCPY( to, from, count * sizeof(to[0]));
   else {
      GLuint i;
      for (i = 0 ; i < count ; i++, STRIDE_F(from, stride))
	 COPY_4FV( to[i], from );
   }
}

static void copy_3f( GLfloat to[][3], GLfloat from[][3], GLuint count )
{
   GLuint i;
   for (i = 0 ; i < count ; i++) {
      COPY_3FV(to[i], from[i]);
   }
}


static void copy_1ui( GLuint to[], GLuint from[], GLuint count )
{
   MEMCPY( to, from, (count) * sizeof(to[0]));
}



/* Translate eval enabled flags to VERT_* flags.
 */
static void update_eval( GLcontext *ctx )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   GLuint eval1 = 0, eval2 = 0;

   if (ctx->Eval.Map1Index)
      eval1 |= VERT_INDEX;

   if (ctx->Eval.Map2Index)
      eval2 |= VERT_INDEX;

   if (ctx->Eval.Map1Color4)
      eval1 |= VERT_RGBA;

   if (ctx->Eval.Map2Color4)
      eval2 |= VERT_RGBA;

   if (ctx->Eval.Map1Normal)
      eval1 |= VERT_NORM;

   if (ctx->Eval.Map2Normal)
      eval2 |= VERT_NORM;

   if (ctx->Eval.Map1TextureCoord4 ||
       ctx->Eval.Map1TextureCoord3 ||
       ctx->Eval.Map1TextureCoord2 ||
       ctx->Eval.Map1TextureCoord1)
      eval1 |= VERT_TEX0;

   if (ctx->Eval.Map2TextureCoord4 ||
       ctx->Eval.Map2TextureCoord3 ||
       ctx->Eval.Map2TextureCoord2 ||
       ctx->Eval.Map2TextureCoord1)
      eval2 |= VERT_TEX0;

   if (ctx->Eval.Map1Vertex4)
      eval1 |= VERT_OBJ_234;

   if (ctx->Eval.Map1Vertex3)
      eval1 |= VERT_OBJ_23;

   if (ctx->Eval.Map2Vertex4) {
      if (ctx->Eval.AutoNormal)
	 eval2 |= VERT_OBJ_234 | VERT_NORM;
      else
	 eval2 |= VERT_OBJ_234;
   }
   else if (ctx->Eval.Map2Vertex3) {
      if (ctx->Eval.AutoNormal)
	 eval2 |= VERT_OBJ_23 | VERT_NORM;
      else
	 eval2 |= VERT_OBJ_23;
   }

   tnl->eval.EvalMap1Flags = eval1;
   tnl->eval.EvalMap2Flags = eval2;
   tnl->eval.EvalNewState = 0;
}


/* This looks a lot like a pipeline stage, but for various reasons is
 * better handled outside the pipeline, and considered the final stage
 * of fixing up an immediate struct for execution.
 *
 * Really want to cache the results of this function in display lists,
 * at least for EvalMesh commands.
 */
void _tnl_eval_immediate( GLcontext *ctx, struct immediate *IM )
{
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   struct vertex_arrays *tmp = &tnl->imm_inputs;
   struct immediate *store = tnl->eval.im;
   GLuint *flags = IM->Flag + IM->CopyStart;
   GLuint copycount;
   GLuint orflag = IM->OrFlag;
   GLuint any_eval1 = orflag & (VERT_EVAL_C1|VERT_EVAL_P1);
   GLuint any_eval2 = orflag & (VERT_EVAL_C2|VERT_EVAL_P2);
   GLuint req = 0;
   GLuint purge_flags = 0;
   GLfloat (*coord)[4] = IM->Obj + IM->CopyStart;

   if (IM->AndFlag & VERT_EVAL_ANY)
      copycount = IM->Start - IM->CopyStart; /* just copy copied vertices */
   else
      copycount = IM->Count - IM->CopyStart; /* copy all vertices */

   if (!store)
      store = tnl->eval.im = _tnl_alloc_immediate( ctx );

   if (tnl->eval.EvalNewState & _NEW_EVAL)
      update_eval( ctx );

   if (any_eval1) {
      req |= tnl->pipeline.inputs & tnl->eval.EvalMap1Flags;

      if (!ctx->Eval.Map1Vertex4 && !ctx->Eval.Map1Vertex3)
	 purge_flags = (VERT_EVAL_P1|VERT_EVAL_C1);

      if (orflag & VERT_EVAL_P1) {
	 eval_points1( store->Obj + IM->CopyStart, 
		       coord, flags,
		       ctx->Eval.MapGrid1du,
		       ctx->Eval.MapGrid1u1);
	 
	 coord = store->Obj + IM->CopyStart;
      }
   }

   if (any_eval2) {
      req |= tnl->pipeline.inputs & tnl->eval.EvalMap2Flags;

      if (!ctx->Eval.Map2Vertex4 && !ctx->Eval.Map2Vertex3)
	 purge_flags |= (VERT_EVAL_P2|VERT_EVAL_C2);

      if (orflag & VERT_EVAL_P2) {
	 eval_points2( store->Obj + IM->CopyStart, 
		       coord, flags,
		       ctx->Eval.MapGrid2du,
		       ctx->Eval.MapGrid2u1,
		       ctx->Eval.MapGrid2dv,
		       ctx->Eval.MapGrid2v1 );

	 coord = store->Obj + IM->CopyStart;
      }
   }


/*     _tnl_print_vert_flags(__FUNCTION__, req); */

   /* Perform the evaluations on active data elements.
    */
   if (req & VERT_INDEX)
   {
      GLuint generated = 0;

      if (copycount)
	 copy_1ui( store->Index + IM->CopyStart, tmp->Index.data, copycount );

      tmp->Index.data = store->Index + IM->CopyStart;
      tmp->Index.start = store->Index + IM->CopyStart;

      if (ctx->Eval.Map1Index && any_eval1) {
	 eval1_1ui( &tmp->Index, coord, flags, &ctx->EvalMap.Map1Index );
	 generated |= VERT_EVAL_C1|VERT_EVAL_P1;
      }

      if (ctx->Eval.Map2Index && any_eval2) {
	 eval2_1ui( &tmp->Index, coord, flags, &ctx->EvalMap.Map2Index );
	 generated |= VERT_EVAL_C2|VERT_EVAL_P2;
      }
   }

   if (req & VERT_RGBA)
   {
      GLuint generated = 0;

      if (copycount) 
	 copy_4f_stride( store->Color + IM->CopyStart, 
			 (GLfloat *)tmp->Color.Ptr, 
			 tmp->Color.StrideB,
			 copycount );

      tmp->Color.Ptr = store->Color + IM->CopyStart;
      tmp->Color.StrideB = 4 * sizeof(GLfloat);
      tmp->Color.Flags = 0;
      tnl->vb.importable_data &= ~VERT_RGBA;

      if (ctx->Eval.Map1Color4 && any_eval1) {
	 eval1_4f_ca( &tmp->Color, coord, flags, 4, &ctx->EvalMap.Map1Color4 );
	 generated |= VERT_EVAL_C1|VERT_EVAL_P1;
      }

      if (ctx->Eval.Map2Color4 && any_eval2) {
	 eval2_4f_ca( &tmp->Color, coord, flags, 4, &ctx->EvalMap.Map2Color4 );
	 generated |= VERT_EVAL_C2|VERT_EVAL_P2;
      }
   }


   if (req & VERT_TEX(0))
   {
      GLuint generated = 0;

      if (copycount)
	 copy_4f( store->TexCoord[0] + IM->CopyStart, 
		  tmp->TexCoord[0].data, copycount );
      else
	 tmp->TexCoord[0].size = 0;

      tmp->TexCoord[0].data = store->TexCoord[0] + IM->CopyStart;
      tmp->TexCoord[0].start = (GLfloat *)tmp->TexCoord[0].data;

      if (any_eval1) {
	 if (ctx->Eval.Map1TextureCoord4) {
	    eval1_4f( &tmp->TexCoord[0], coord, flags, 4,
		      &ctx->EvalMap.Map1Texture4 );
	    generated |= VERT_EVAL_C1|VERT_EVAL_P1;
	 }
	 else if (ctx->Eval.Map1TextureCoord3) {
	    eval1_4f( &tmp->TexCoord[0], coord, flags, 3,
		      &ctx->EvalMap.Map1Texture3 );
	    generated |= VERT_EVAL_C1|VERT_EVAL_P1;
	 }
	 else if (ctx->Eval.Map1TextureCoord2) {
	    eval1_4f( &tmp->TexCoord[0], coord, flags, 2,
		      &ctx->EvalMap.Map1Texture2 );
	    generated |= VERT_EVAL_C1|VERT_EVAL_P1;
	 }
	 else if (ctx->Eval.Map1TextureCoord1) {
	    eval1_4f( &tmp->TexCoord[0], coord, flags, 1,
		      &ctx->EvalMap.Map1Texture1 );
	    generated |= VERT_EVAL_C1|VERT_EVAL_P1;
	 }
      }

      if (any_eval2) {
	 if (ctx->Eval.Map2TextureCoord4) {
	    eval2_4f( &tmp->TexCoord[0], coord, flags, 4,
		      &ctx->EvalMap.Map2Texture4 );
	    generated |= VERT_EVAL_C2|VERT_EVAL_P2;
	 }
	 else if (ctx->Eval.Map2TextureCoord3) {
	    eval2_4f( &tmp->TexCoord[0], coord, flags, 3,
		      &ctx->EvalMap.Map2Texture3 );
	    generated |= VERT_EVAL_C2|VERT_EVAL_P2;
	 }
	 else if (ctx->Eval.Map2TextureCoord2) {
	    eval2_4f( &tmp->TexCoord[0], coord, flags, 2,
		      &ctx->EvalMap.Map2Texture2 );
	    generated |= VERT_EVAL_C2|VERT_EVAL_P2;
	 }
	 else if (ctx->Eval.Map2TextureCoord1) {
	    eval2_4f( &tmp->TexCoord[0], coord, flags, 1,
		      &ctx->EvalMap.Map2Texture1 );
	    generated |= VERT_EVAL_C2|VERT_EVAL_P2;
	 }
      }
   }


   if (req & VERT_NORM)
   {
      GLuint generated = 0;

      if (copycount) {
	 copy_3f( store->Normal + IM->CopyStart, tmp->Normal.data, 
		  copycount );
      }

      tmp->Normal.data = store->Normal + IM->CopyStart;
      tmp->Normal.start = (GLfloat *)tmp->Normal.data;

      if (ctx->Eval.Map1Normal && any_eval1) {
	 eval1_norm( &tmp->Normal, coord, flags,
		     &ctx->EvalMap.Map1Normal );
	 generated |= VERT_EVAL_C1|VERT_EVAL_P1;
      }

      if (ctx->Eval.Map2Normal && any_eval2) {
	 eval2_norm( &tmp->Normal, coord, flags,
		     &ctx->EvalMap.Map2Normal );
	 generated |= VERT_EVAL_C2|VERT_EVAL_P2;
      }
   }



   /* In the AutoNormal case, the copy and assignment of tmp->NormalPtr
    * are done above.
    */
   if (req & VERT_OBJ)
   {
      if (copycount) {
	 /* This copy may already have occurred when eliminating
	  * glEvalPoint calls:
	  */
	 if  (coord != store->Obj + IM->CopyStart)
	    copy_4f( store->Obj + IM->CopyStart, tmp->Obj.data, copycount );
      } else
	 tmp->Obj.size = 0;

      tmp->Obj.data = store->Obj + IM->CopyStart;
      tmp->Obj.start = (GLfloat *)tmp->Obj.data;

      /* Note: Normal data is already prepared above.
       */

      if (any_eval1) {
	 if (ctx->Eval.Map1Vertex4) {
	    eval1_4f( &tmp->Obj, coord, flags, 4,
		      &ctx->EvalMap.Map1Vertex4 );
	 }
	 else if (ctx->Eval.Map1Vertex3) {
	    eval1_4f( &tmp->Obj, coord, flags, 3,
		      &ctx->EvalMap.Map1Vertex3 );
	 }
      }

      if (any_eval2) {
	 if (ctx->Eval.Map2Vertex4)
	 {
	    if (ctx->Eval.AutoNormal && (req & VERT_NORM))
	       eval2_obj_norm( &tmp->Obj, &tmp->Normal, coord, flags, 4,
			       &ctx->EvalMap.Map2Vertex4 );
	    else
	       eval2_4f( &tmp->Obj, coord, flags, 4,
			 &ctx->EvalMap.Map2Vertex4 );
	 }
	 else if (ctx->Eval.Map2Vertex3)
	 {
	    if (ctx->Eval.AutoNormal && (req & VERT_NORM))
	       eval2_obj_norm( &tmp->Obj, &tmp->Normal, coord, flags, 3,
			       &ctx->EvalMap.Map2Vertex3 );
	    else
	       eval2_4f( &tmp->Obj, coord, flags, 3,
			 &ctx->EvalMap.Map2Vertex3 );
	 }
      }
   }


   /* Calculate new IM->Elts, IM->Primitive, IM->PrimitiveLength for
    * the case where vertex maps are not enabled for some received
    * eval coordinates.  In this case those slots in the immediate
    * must be ignored.
    */
   if (purge_flags) {
      GLuint vertex = VERT_OBJ|(VERT_EVAL_ANY & ~purge_flags);
      GLuint last_new_prim = 0;
      GLuint new_prim_length = 0;
      GLuint next_old_prim = 0;
      struct vertex_buffer *VB = &tnl->vb;
      GLuint i,j,count = VB->Count;

      for (i = 0, j = 0 ; i < count ; i++) {
	 if (flags[i] & vertex) {
	    store->Elt[j++] = i;
	    new_prim_length++;
	 }
	 if (i == next_old_prim) {
	    next_old_prim += VB->PrimitiveLength[i];
	    VB->PrimitiveLength[last_new_prim] = new_prim_length;
	    VB->Primitive[j] = VB->Primitive[i];
	    last_new_prim = j;
	 }
      }
      
      VB->Elts = store->Elt;
      _tnl_get_purged_copy_verts( ctx, store );
   }

   /* Produce new flags array:
    */
   {
      GLuint i;
      GLuint count = tnl->vb.Count + 1;

      copy_1ui( store->Flag, flags, count );
      tnl->vb.Flag = store->Flag;
      for (i = 0 ; i < count ; i++)
	 store->Flag[i] |= req;
      IM->Evaluated = req;	/* hack for copying. */
   }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d4 1
a4 1
 * Version:  4.1
d6 1
a6 1
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
d26 2
a27 2
 *    Keith Whitwell <keith@@tungstengraphics.com>
 *    Brian Paul - vertex program updates
d35 1
a35 1
#include "imports.h"
d54 2
a55 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & VERT_BITS_EVAL_ANY) {
d58 1
a58 1
	 if (flags[i] & VERT_BIT_EVAL_P1)
d70 2
a71 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++) {
      if (flags[i] & VERT_BITS_EVAL_ANY) {
d74 1
a74 1
	 if (flags[i] & VERT_BIT_EVAL_P2) {
d95 1
a95 1
		      const struct gl_1d_map *map )
d102 2
a103 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1)) {
a113 2

/* as above, but dest is a gl_client_array */
d118 1
a118 1
			 const struct gl_1d_map *map )
d128 2
a129 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1)) {
d143 1
a143 1
		       const struct gl_1d_map *map )
d150 2
a151 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1)) {
d160 1
a160 1
static void eval1_norm( GLvector4f *dest,
d163 1
a163 1
			const struct gl_1d_map *map )
d167 1
a167 1
   GLfloat (*to)[4] = dest->data;
d170 2
a171 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1)) {
d178 3
d182 1
a182 1
			    GLvector4f *norm_ptr,
d186 1
a186 1
			    const struct gl_2d_map *map )
d193 1
a193 1
   GLfloat (*normal)[4] = norm_ptr->data;
d196 4
a199 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2)) {
d231 1
a231 1
		      const struct gl_2d_map *map )
d240 2
a241 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2)) {
a252 2

/* as above, but dest is a gl_client_array */
d257 1
a257 1
			 const struct gl_2d_map *map )
d269 2
a270 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2)) {
d281 1
a281 1
static void eval2_norm( GLvector4f *dest,
d284 1
a284 1
			const struct gl_2d_map *map )
d290 1
a290 1
   GLfloat (*to)[4] = dest->data;
d293 2
a294 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++) {
      if (flags[i] & (VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2)) {
d299 2
a300 2
      }
   }
d307 1
a307 1
		       const struct gl_2d_map *map )
d316 2
a317 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2)) {
d329 4
d338 1
a338 1
static void copy_4f_stride( GLfloat to[][4], const GLfloat *from, 
d350 1
a350 1
static void copy_3f( GLfloat to[][4], GLfloat from[][4], GLuint count )
d359 1
a359 1
static void copy_1ui( GLuint to[], const GLuint from[], GLuint count )
a371 1
   GLuint i;
d374 1
a374 1
      eval1 |= VERT_BIT_INDEX;
d377 1
a377 1
      eval2 |= VERT_BIT_INDEX;
d380 1
a380 1
      eval1 |= VERT_BIT_COLOR0;
d383 1
a383 1
      eval2 |= VERT_BIT_COLOR0;
d386 1
a386 1
      eval1 |= VERT_BIT_NORMAL;
d389 1
a389 1
      eval2 |= VERT_BIT_NORMAL;
d395 1
a395 1
      eval1 |= VERT_BIT_TEX0;
d401 1
a401 1
      eval2 |= VERT_BIT_TEX0;
d404 1
a404 1
      eval1 |= VERT_BITS_OBJ_234;
d407 1
a407 1
      eval1 |= VERT_BITS_OBJ_23;
d411 1
a411 1
	 eval2 |= VERT_BITS_OBJ_234 | VERT_BIT_NORMAL;
d413 1
a413 1
	 eval2 |= VERT_BITS_OBJ_234;
d417 1
a417 1
	 eval2 |= VERT_BITS_OBJ_23 | VERT_BIT_NORMAL;
d419 1
a419 1
	 eval2 |= VERT_BITS_OBJ_23;
a423 12

   /* GL_NV_vertex_program evaluators */
   eval1 = eval2 = 0;
   for (i = 0; i < VERT_ATTRIB_MAX; i++) {
      if (ctx->Eval.Map1Attrib[i])
         eval1 |= (1 << i);
      if (ctx->Eval.Map2Attrib[i])
         eval2 |= (1 << i);
   }
   tnl->eval.EvalMap1AttribFlags = eval1;
   tnl->eval.EvalMap2AttribFlags = eval2;

d443 2
a444 2
   GLuint any_eval1 = orflag & (VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1);
   GLuint any_eval2 = orflag & (VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2);
d447 1
a447 1
   GLfloat (*coord)[4] = IM->Attrib[VERT_ATTRIB_POS] + IM->CopyStart;
d449 1
a449 1
   if (IM->AndFlag & VERT_BITS_EVAL_ANY)
d461 1
a461 2
      req |= tnl->pipeline.inputs
         & (tnl->eval.EvalMap1Flags | tnl->eval.EvalMap1AttribFlags);
d463 2
a464 3
      if (!ctx->Eval.Map1Vertex4 && !ctx->Eval.Map1Vertex3 &&
          !ctx->Eval.Map1Attrib[0])
	 purge_flags = (VERT_BIT_EVAL_P1|VERT_BIT_EVAL_C1);
d466 2
a467 2
      if (orflag & VERT_BIT_EVAL_P1) {
	 eval_points1( store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart, 
d472 1
a472 1
	 coord = store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart;
d477 1
a477 2
      req |= tnl->pipeline.inputs
         & (tnl->eval.EvalMap2Flags | tnl->eval.EvalMap2AttribFlags);
d479 2
a480 3
      if (!ctx->Eval.Map2Vertex4 && !ctx->Eval.Map2Vertex3 &&
          !ctx->Eval.Map2Attrib[0])
	 purge_flags |= (VERT_BIT_EVAL_P2|VERT_BIT_EVAL_C2);
d482 2
a483 2
      if (orflag & VERT_BIT_EVAL_P2) {
	 eval_points2( store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart, 
d490 1
a490 1
	 coord = store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart;
d494 3
d499 2
a500 1
   if (req & VERT_BIT_INDEX) {
d511 1
a511 1
	 generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
d516 1
a516 1
	 generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
d520 2
a521 1
   if (req & VERT_BIT_COLOR0) {
d525 1
a525 1
	 copy_4f_stride( store->Attrib[VERT_ATTRIB_COLOR0] + IM->CopyStart, 
d530 1
a530 1
      tmp->Color.Ptr = store->Attrib[VERT_ATTRIB_COLOR0] + IM->CopyStart;
d533 1
a533 1
      tnl->vb.importable_data &= ~VERT_BIT_COLOR0;
d535 3
a537 6
      if (ctx->VertexProgram.Enabled) {
         tmp->Attribs[VERT_ATTRIB_COLOR0].data =
            store->Attrib[VERT_ATTRIB_COLOR0] + IM->CopyStart;
         tmp->Attribs[VERT_ATTRIB_COLOR0].start =
            (GLfloat *) tmp->Attribs[VERT_ATTRIB_COLOR0].data;
         tmp->Attribs[VERT_ATTRIB_COLOR0].size = 0;
d540 3
a542 13
      /* Vertex program maps have priority over conventional attribs */
      if (any_eval1) {
         if (ctx->VertexProgram.Enabled
             && ctx->Eval.Map1Attrib[VERT_ATTRIB_COLOR0]) {
            eval1_4f_ca( &tmp->Color, coord, flags, 4,
                         &ctx->EvalMap.Map1Attrib[VERT_ATTRIB_COLOR0] );
            generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
         }
         else if (ctx->Eval.Map1Color4) {
            eval1_4f_ca( &tmp->Color, coord, flags, 4,
                         &ctx->EvalMap.Map1Color4 );
            generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
         }
d544 1
a545 14
      if (any_eval2) {
         if (ctx->VertexProgram.Enabled
             && ctx->Eval.Map2Attrib[VERT_ATTRIB_COLOR0]) {
            eval2_4f_ca( &tmp->Color, coord, flags, 4,
                         &ctx->EvalMap.Map2Attrib[VERT_ATTRIB_COLOR0] );
            generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
         }
         else if (ctx->Eval.Map2Color4) {
            eval2_4f_ca( &tmp->Color, coord, flags, 4,
                         &ctx->EvalMap.Map2Color4 );
            generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
         }
      }
   }
d547 2
a548 1
   if (req & VERT_BIT_TEX0) {
d552 1
a552 1
	 copy_4f( store->Attrib[VERT_ATTRIB_TEX0] + IM->CopyStart, 
d557 1
a557 1
      tmp->TexCoord[0].data = store->Attrib[VERT_ATTRIB_TEX0] + IM->CopyStart;
a559 9
      if (ctx->VertexProgram.Enabled) {
         tmp->Attribs[VERT_ATTRIB_TEX0].data =
            store->Attrib[VERT_ATTRIB_TEX0] + IM->CopyStart;
         tmp->Attribs[VERT_ATTRIB_TEX0].start =
            (GLfloat *) tmp->Attribs[VERT_ATTRIB_TEX0].data;
         tmp->Attribs[VERT_ATTRIB_TEX0].size = 0;
      }

      /* Vertex program maps have priority over conventional attribs */
d561 1
a561 7
         if (ctx->VertexProgram.Enabled
             && ctx->Eval.Map1Attrib[VERT_ATTRIB_TEX0]) {
	    eval1_4f( &tmp->TexCoord[0], coord, flags, 4,
		      &ctx->EvalMap.Map1Attrib[VERT_ATTRIB_TEX0] );
	    generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
         }
	 else if (ctx->Eval.Map1TextureCoord4) {
d564 1
a564 1
	    generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
d569 1
a569 1
	    generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
d574 1
a574 1
	    generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
d579 1
a579 1
	    generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
d584 1
a584 7
         if (ctx->VertexProgram.Enabled
             && ctx->Eval.Map2Attrib[VERT_ATTRIB_TEX0]) {
	    eval2_4f( &tmp->TexCoord[0], coord, flags, 4,
		      &ctx->EvalMap.Map2Attrib[VERT_ATTRIB_TEX0] );
	    generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
         }
	 else if (ctx->Eval.Map2TextureCoord4) {
d587 1
a587 1
	    generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
d592 1
a592 1
	    generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
d597 1
a597 1
	    generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
d602 1
a602 1
	    generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
d607 3
a609 1
   if (req & VERT_BIT_NORMAL) {
d613 2
a614 2
	 copy_3f( store->Attrib[VERT_ATTRIB_NORMAL] + IM->CopyStart,
                  tmp->Normal.data, copycount );
d617 1
a617 1
      tmp->Normal.data = store->Attrib[VERT_ATTRIB_NORMAL] + IM->CopyStart;
d620 4
a623 6
      if (ctx->VertexProgram.Enabled) {
         tmp->Attribs[VERT_ATTRIB_NORMAL].data =
            store->Attrib[VERT_ATTRIB_NORMAL] + IM->CopyStart;
         tmp->Attribs[VERT_ATTRIB_NORMAL].start =
            (GLfloat *) tmp->Attribs[VERT_ATTRIB_NORMAL].data;
         tmp->Attribs[VERT_ATTRIB_NORMAL].size = 0;
d626 4
a629 11
      if (any_eval1) {
         if (ctx->VertexProgram.Enabled &&
             ctx->Eval.Map1Attrib[VERT_ATTRIB_NORMAL]) {
            eval1_norm( &tmp->Normal, coord, flags,
                        &ctx->EvalMap.Map1Attrib[VERT_ATTRIB_NORMAL] );
            generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
         }
         else if (ctx->Eval.Map1Normal) {
            eval1_norm( &tmp->Normal, coord, flags, &ctx->EvalMap.Map1Normal );
            generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
         }
d631 2
a633 13
      if (any_eval2) {
         if (ctx->VertexProgram.Enabled &&
             ctx->Eval.Map2Attrib[VERT_ATTRIB_NORMAL]) {
            eval2_norm( &tmp->Normal, coord, flags,
                        &ctx->EvalMap.Map2Attrib[VERT_ATTRIB_NORMAL] );
            generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
         }
         else if (ctx->Eval.Map2Normal) {
            eval2_norm( &tmp->Normal, coord, flags, &ctx->EvalMap.Map2Normal );
            generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
         }
      }
   }
d638 2
a639 1
   if (req & VERT_BIT_POS) {
d644 3
a646 6
	 if (coord != store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart) {
	    copy_4f( store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart,
                     tmp->Obj.data, copycount );
         }
      }
      else {
a647 4
      }

      tmp->Obj.data = store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart;
      tmp->Obj.start = (GLfloat *) tmp->Obj.data;
d649 2
a650 6
#if 1
      /*tmp->Attribs[0].count = count;*/
      tmp->Attribs[0].data = store->Attrib[0] + IM->CopyStart;
      tmp->Attribs[0].start = (GLfloat *) tmp->Attribs[0].data;
      tmp->Attribs[0].size = 0;
#endif
d656 1
a656 6
         if (ctx->VertexProgram.Enabled &&
             ctx->Eval.Map1Attrib[VERT_ATTRIB_POS]) {
	    eval1_4f( &tmp->Obj, coord, flags, 4,
		      &ctx->EvalMap.Map1Attrib[VERT_ATTRIB_POS] );
         }
	 else if (ctx->Eval.Map1Vertex4) {
d667 3
a669 11
         if (ctx->VertexProgram.Enabled &&
             ctx->Eval.Map2Attrib[VERT_ATTRIB_POS]) {
	    if (ctx->Eval.AutoNormal && (req & VERT_BIT_NORMAL))
	       eval2_obj_norm( &tmp->Obj, &tmp->Normal, coord, flags, 4,
			       &ctx->EvalMap.Map2Attrib[VERT_ATTRIB_POS] );
	    else
	       eval2_4f( &tmp->Obj, coord, flags, 4,
			 &ctx->EvalMap.Map2Attrib[VERT_ATTRIB_POS] );
         }
	 else if (ctx->Eval.Map2Vertex4) {
	    if (ctx->Eval.AutoNormal && (req & VERT_BIT_NORMAL))
d676 3
a678 2
	 else if (ctx->Eval.Map2Vertex3) {
	    if (ctx->Eval.AutoNormal && (req & VERT_BIT_NORMAL))
a688 28
   if (ctx->VertexProgram.Enabled) {
      /* We already evaluated position, normal, color and texture 0 above.
       * now evaluate any other generic attributes.
       */
      const GLuint skipBits = (VERT_BIT_POS |
                               VERT_BIT_NORMAL |
                               VERT_BIT_COLOR0 |
                               VERT_BIT_TEX0);
      GLuint generated = 0;
      GLuint attr;
      for (attr = 0; attr < VERT_ATTRIB_MAX; attr++) {
         if ((1 << attr) & req & ~skipBits) {
            if (any_eval1 && ctx->Eval.Map1Attrib[attr]) {
               /* evaluate 1-D vertex attrib map [i] */
               eval1_4f( &tmp->Attribs[attr], coord, flags, 4,
                         &ctx->EvalMap.Map1Attrib[attr] );
               generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
            }
            if (any_eval2 && ctx->Eval.Map2Attrib[attr]) {
               /* evaluate 2-D vertex attrib map [i] */
               eval2_4f( &tmp->Attribs[attr], coord, flags, 4,
                         &ctx->EvalMap.Map2Attrib[attr] );
               generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
            }
         }
      }
   }

d695 1
a695 1
      const GLuint vertex = VERT_BIT_POS|(VERT_BITS_EVAL_ANY & ~purge_flags);
d700 1
a700 2
      const GLuint count = VB->Count;
      GLuint i, j;
a721 1
      const GLuint count = tnl->vb.Count + 1;
d723 1
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d4 1
a4 1
 * Version:  4.1
d6 1
a6 1
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
d26 2
a27 2
 *    Keith Whitwell <keith@@tungstengraphics.com>
 *    Brian Paul - vertex program updates
d35 1
a35 1
#include "imports.h"
d54 2
a55 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & VERT_BITS_EVAL_ANY) {
d58 1
a58 1
	 if (flags[i] & VERT_BIT_EVAL_P1)
d70 2
a71 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++) {
      if (flags[i] & VERT_BITS_EVAL_ANY) {
d74 1
a74 1
	 if (flags[i] & VERT_BIT_EVAL_P2) {
d95 1
a95 1
		      const struct gl_1d_map *map )
d102 2
a103 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1)) {
a113 2

/* as above, but dest is a gl_client_array */
d118 1
a118 1
			 const struct gl_1d_map *map )
d128 2
a129 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1)) {
d143 1
a143 1
		       const struct gl_1d_map *map )
d150 2
a151 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1)) {
d160 1
a160 1
static void eval1_norm( GLvector4f *dest,
d163 1
a163 1
			const struct gl_1d_map *map )
d167 1
a167 1
   GLfloat (*to)[4] = dest->data;
d170 2
a171 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1)) {
d178 3
d182 1
a182 1
			    GLvector4f *norm_ptr,
d186 1
a186 1
			    const struct gl_2d_map *map )
d193 1
a193 1
   GLfloat (*normal)[4] = norm_ptr->data;
d196 4
a199 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2)) {
d231 1
a231 1
		      const struct gl_2d_map *map )
d240 2
a241 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2)) {
a252 2

/* as above, but dest is a gl_client_array */
d257 1
a257 1
			 const struct gl_2d_map *map )
d269 2
a270 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2)) {
d281 1
a281 1
static void eval2_norm( GLvector4f *dest,
d284 1
a284 1
			const struct gl_2d_map *map )
d290 1
a290 1
   GLfloat (*to)[4] = dest->data;
d293 2
a294 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++) {
      if (flags[i] & (VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2)) {
d299 2
a300 2
      }
   }
d307 1
a307 1
		       const struct gl_2d_map *map )
d316 2
a317 2
   for (i = 0 ; !(flags[i] & VERT_BIT_END_VB) ; i++)
      if (flags[i] & (VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2)) {
d329 4
d338 1
a338 1
static void copy_4f_stride( GLfloat to[][4], const GLfloat *from, 
d350 1
a350 1
static void copy_3f( GLfloat to[][4], GLfloat from[][4], GLuint count )
d359 1
a359 1
static void copy_1ui( GLuint to[], const GLuint from[], GLuint count )
a371 1
   GLuint i;
d374 1
a374 1
      eval1 |= VERT_BIT_INDEX;
d377 1
a377 1
      eval2 |= VERT_BIT_INDEX;
d380 1
a380 1
      eval1 |= VERT_BIT_COLOR0;
d383 1
a383 1
      eval2 |= VERT_BIT_COLOR0;
d386 1
a386 1
      eval1 |= VERT_BIT_NORMAL;
d389 1
a389 1
      eval2 |= VERT_BIT_NORMAL;
d395 1
a395 1
      eval1 |= VERT_BIT_TEX0;
d401 1
a401 1
      eval2 |= VERT_BIT_TEX0;
d404 1
a404 1
      eval1 |= VERT_BITS_OBJ_234;
d407 1
a407 1
      eval1 |= VERT_BITS_OBJ_23;
d411 1
a411 1
	 eval2 |= VERT_BITS_OBJ_234 | VERT_BIT_NORMAL;
d413 1
a413 1
	 eval2 |= VERT_BITS_OBJ_234;
d417 1
a417 1
	 eval2 |= VERT_BITS_OBJ_23 | VERT_BIT_NORMAL;
d419 1
a419 1
	 eval2 |= VERT_BITS_OBJ_23;
a423 12

   /* GL_NV_vertex_program evaluators */
   eval1 = eval2 = 0;
   for (i = 0; i < VERT_ATTRIB_MAX; i++) {
      if (ctx->Eval.Map1Attrib[i])
         eval1 |= (1 << i);
      if (ctx->Eval.Map2Attrib[i])
         eval2 |= (1 << i);
   }
   tnl->eval.EvalMap1AttribFlags = eval1;
   tnl->eval.EvalMap2AttribFlags = eval2;

d443 2
a444 2
   GLuint any_eval1 = orflag & (VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1);
   GLuint any_eval2 = orflag & (VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2);
d447 1
a447 1
   GLfloat (*coord)[4] = IM->Attrib[VERT_ATTRIB_POS] + IM->CopyStart;
d449 1
a449 1
   if (IM->AndFlag & VERT_BITS_EVAL_ANY)
d461 1
a461 2
      req |= tnl->pipeline.inputs
         & (tnl->eval.EvalMap1Flags | tnl->eval.EvalMap1AttribFlags);
d463 2
a464 3
      if (!ctx->Eval.Map1Vertex4 && !ctx->Eval.Map1Vertex3 &&
          !ctx->Eval.Map1Attrib[0])
	 purge_flags = (VERT_BIT_EVAL_P1|VERT_BIT_EVAL_C1);
d466 2
a467 2
      if (orflag & VERT_BIT_EVAL_P1) {
	 eval_points1( store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart, 
d472 1
a472 1
	 coord = store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart;
d477 1
a477 2
      req |= tnl->pipeline.inputs
         & (tnl->eval.EvalMap2Flags | tnl->eval.EvalMap2AttribFlags);
d479 2
a480 3
      if (!ctx->Eval.Map2Vertex4 && !ctx->Eval.Map2Vertex3 &&
          !ctx->Eval.Map2Attrib[0])
	 purge_flags |= (VERT_BIT_EVAL_P2|VERT_BIT_EVAL_C2);
d482 2
a483 2
      if (orflag & VERT_BIT_EVAL_P2) {
	 eval_points2( store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart, 
d490 1
a490 1
	 coord = store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart;
d494 3
d499 2
a500 1
   if (req & VERT_BIT_INDEX) {
d511 1
a511 1
	 generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
d516 1
a516 1
	 generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
d520 2
a521 1
   if (req & VERT_BIT_COLOR0) {
d525 1
a525 1
	 copy_4f_stride( store->Attrib[VERT_ATTRIB_COLOR0] + IM->CopyStart, 
d530 1
a530 1
      tmp->Color.Ptr = store->Attrib[VERT_ATTRIB_COLOR0] + IM->CopyStart;
d533 1
a533 1
      tnl->vb.importable_data &= ~VERT_BIT_COLOR0;
d535 3
a537 6
      if (ctx->VertexProgram.Enabled) {
         tmp->Attribs[VERT_ATTRIB_COLOR0].data =
            store->Attrib[VERT_ATTRIB_COLOR0] + IM->CopyStart;
         tmp->Attribs[VERT_ATTRIB_COLOR0].start =
            (GLfloat *) tmp->Attribs[VERT_ATTRIB_COLOR0].data;
         tmp->Attribs[VERT_ATTRIB_COLOR0].size = 0;
d540 3
a542 13
      /* Vertex program maps have priority over conventional attribs */
      if (any_eval1) {
         if (ctx->VertexProgram.Enabled
             && ctx->Eval.Map1Attrib[VERT_ATTRIB_COLOR0]) {
            eval1_4f_ca( &tmp->Color, coord, flags, 4,
                         &ctx->EvalMap.Map1Attrib[VERT_ATTRIB_COLOR0] );
            generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
         }
         else if (ctx->Eval.Map1Color4) {
            eval1_4f_ca( &tmp->Color, coord, flags, 4,
                         &ctx->EvalMap.Map1Color4 );
            generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
         }
d544 1
a545 14
      if (any_eval2) {
         if (ctx->VertexProgram.Enabled
             && ctx->Eval.Map2Attrib[VERT_ATTRIB_COLOR0]) {
            eval2_4f_ca( &tmp->Color, coord, flags, 4,
                         &ctx->EvalMap.Map2Attrib[VERT_ATTRIB_COLOR0] );
            generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
         }
         else if (ctx->Eval.Map2Color4) {
            eval2_4f_ca( &tmp->Color, coord, flags, 4,
                         &ctx->EvalMap.Map2Color4 );
            generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
         }
      }
   }
d547 2
a548 1
   if (req & VERT_BIT_TEX0) {
d552 1
a552 1
	 copy_4f( store->Attrib[VERT_ATTRIB_TEX0] + IM->CopyStart, 
d557 1
a557 1
      tmp->TexCoord[0].data = store->Attrib[VERT_ATTRIB_TEX0] + IM->CopyStart;
a559 9
      if (ctx->VertexProgram.Enabled) {
         tmp->Attribs[VERT_ATTRIB_TEX0].data =
            store->Attrib[VERT_ATTRIB_TEX0] + IM->CopyStart;
         tmp->Attribs[VERT_ATTRIB_TEX0].start =
            (GLfloat *) tmp->Attribs[VERT_ATTRIB_TEX0].data;
         tmp->Attribs[VERT_ATTRIB_TEX0].size = 0;
      }

      /* Vertex program maps have priority over conventional attribs */
d561 1
a561 7
         if (ctx->VertexProgram.Enabled
             && ctx->Eval.Map1Attrib[VERT_ATTRIB_TEX0]) {
	    eval1_4f( &tmp->TexCoord[0], coord, flags, 4,
		      &ctx->EvalMap.Map1Attrib[VERT_ATTRIB_TEX0] );
	    generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
         }
	 else if (ctx->Eval.Map1TextureCoord4) {
d564 1
a564 1
	    generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
d569 1
a569 1
	    generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
d574 1
a574 1
	    generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
d579 1
a579 1
	    generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
d584 1
a584 7
         if (ctx->VertexProgram.Enabled
             && ctx->Eval.Map2Attrib[VERT_ATTRIB_TEX0]) {
	    eval2_4f( &tmp->TexCoord[0], coord, flags, 4,
		      &ctx->EvalMap.Map2Attrib[VERT_ATTRIB_TEX0] );
	    generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
         }
	 else if (ctx->Eval.Map2TextureCoord4) {
d587 1
a587 1
	    generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
d592 1
a592 1
	    generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
d597 1
a597 1
	    generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
d602 1
a602 1
	    generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
d607 3
a609 1
   if (req & VERT_BIT_NORMAL) {
d613 2
a614 2
	 copy_3f( store->Attrib[VERT_ATTRIB_NORMAL] + IM->CopyStart,
                  tmp->Normal.data, copycount );
d617 1
a617 1
      tmp->Normal.data = store->Attrib[VERT_ATTRIB_NORMAL] + IM->CopyStart;
d620 4
a623 6
      if (ctx->VertexProgram.Enabled) {
         tmp->Attribs[VERT_ATTRIB_NORMAL].data =
            store->Attrib[VERT_ATTRIB_NORMAL] + IM->CopyStart;
         tmp->Attribs[VERT_ATTRIB_NORMAL].start =
            (GLfloat *) tmp->Attribs[VERT_ATTRIB_NORMAL].data;
         tmp->Attribs[VERT_ATTRIB_NORMAL].size = 0;
d626 4
a629 11
      if (any_eval1) {
         if (ctx->VertexProgram.Enabled &&
             ctx->Eval.Map1Attrib[VERT_ATTRIB_NORMAL]) {
            eval1_norm( &tmp->Normal, coord, flags,
                        &ctx->EvalMap.Map1Attrib[VERT_ATTRIB_NORMAL] );
            generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
         }
         else if (ctx->Eval.Map1Normal) {
            eval1_norm( &tmp->Normal, coord, flags, &ctx->EvalMap.Map1Normal );
            generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
         }
d631 2
a633 13
      if (any_eval2) {
         if (ctx->VertexProgram.Enabled &&
             ctx->Eval.Map2Attrib[VERT_ATTRIB_NORMAL]) {
            eval2_norm( &tmp->Normal, coord, flags,
                        &ctx->EvalMap.Map2Attrib[VERT_ATTRIB_NORMAL] );
            generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
         }
         else if (ctx->Eval.Map2Normal) {
            eval2_norm( &tmp->Normal, coord, flags, &ctx->EvalMap.Map2Normal );
            generated |= VERT_BIT_EVAL_C2|VERT_BIT_EVAL_P2;
         }
      }
   }
d638 2
a639 1
   if (req & VERT_BIT_POS) {
d644 3
a646 6
	 if (coord != store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart) {
	    copy_4f( store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart,
                     tmp->Obj.data, copycount );
         }
      }
      else {
a647 4
      }

      tmp->Obj.data = store->Attrib[VERT_ATTRIB_POS] + IM->CopyStart;
      tmp->Obj.start = (GLfloat *) tmp->Obj.data;
d649 2
a650 6
#if 1
      /*tmp->Attribs[0].count = count;*/
      tmp->Attribs[0].data = store->Attrib[0] + IM->CopyStart;
      tmp->Attribs[0].start = (GLfloat *) tmp->Attribs[0].data;
      tmp->Attribs[0].size = 0;
#endif
d656 1
a656 6
         if (ctx->VertexProgram.Enabled &&
             ctx->Eval.Map1Attrib[VERT_ATTRIB_POS]) {
	    eval1_4f( &tmp->Obj, coord, flags, 4,
		      &ctx->EvalMap.Map1Attrib[VERT_ATTRIB_POS] );
         }
	 else if (ctx->Eval.Map1Vertex4) {
d667 3
a669 11
         if (ctx->VertexProgram.Enabled &&
             ctx->Eval.Map2Attrib[VERT_ATTRIB_POS]) {
	    if (ctx->Eval.AutoNormal && (req & VERT_BIT_NORMAL))
	       eval2_obj_norm( &tmp->Obj, &tmp->Normal, coord, flags, 4,
			       &ctx->EvalMap.Map2Attrib[VERT_ATTRIB_POS] );
	    else
	       eval2_4f( &tmp->Obj, coord, flags, 4,
			 &ctx->EvalMap.Map2Attrib[VERT_ATTRIB_POS] );
         }
	 else if (ctx->Eval.Map2Vertex4) {
	    if (ctx->Eval.AutoNormal && (req & VERT_BIT_NORMAL))
d676 3
a678 2
	 else if (ctx->Eval.Map2Vertex3) {
	    if (ctx->Eval.AutoNormal && (req & VERT_BIT_NORMAL))
a688 28
   if (ctx->VertexProgram.Enabled) {
      /* We already evaluated position, normal, color and texture 0 above.
       * now evaluate any other generic attributes.
       */
      const GLuint skipBits = (VERT_BIT_POS |
                               VERT_BIT_NORMAL |
                               VERT_BIT_COLOR0 |
                               VERT_BIT_TEX0);
      GLuint generated = 0;
      GLuint attr;
      for (attr = 0; attr < VERT_ATTRIB_MAX; attr++) {
         if ((1 << attr) & req & ~skipBits) {
            if (any_eval1 && ctx->Eval.Map1Attrib[attr]) {
               /* evaluate 1-D vertex attrib map [i] */
               eval1_4f( &tmp->Attribs[attr], coord, flags, 4,
                         &ctx->EvalMap.Map1Attrib[attr] );
               generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
            }
            if (any_eval2 && ctx->Eval.Map2Attrib[attr]) {
               /* evaluate 2-D vertex attrib map [i] */
               eval2_4f( &tmp->Attribs[attr], coord, flags, 4,
                         &ctx->EvalMap.Map2Attrib[attr] );
               generated |= VERT_BIT_EVAL_C1|VERT_BIT_EVAL_P1;
            }
         }
      }
   }

d695 1
a695 1
      const GLuint vertex = VERT_BIT_POS|(VERT_BITS_EVAL_ANY & ~purge_flags);
d700 1
a700 2
      const GLuint count = VB->Count;
      GLuint i, j;
a721 1
      const GLuint count = tnl->vb.Count + 1;
d723 1
@

