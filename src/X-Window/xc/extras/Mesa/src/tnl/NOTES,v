head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.05.16.16.28.54;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.15;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.15;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.15;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@INTRODUCTION

A generic, configurable software implementation of GL transformation &
lighting.

This module provides an implementation of the routines required by the
'vtxfmt' mechanism of core mesa for tnl functionality in all
combinations of compile and execute modes.

Most current drivers use the tnl module exclusively to provide this
functionality, though there is an experimental alternate
implementation provided by the tnl_dd/t_dd_imm_* files which can
handle a small subset of GL states in execute mode only.


STATE

To create and destroy the module:

	GLboolean _tnl_CreateContext( GLcontext *ctx );
	void _tnl_DestroyContext( GLcontext *ctx );

The module is not active by default, and must be installed by calling
_tnl_Wakeup().  This function installs internal tnl functions into all
the vtxfmt dispatch hooks, thus taking over the task of transformation
and lighting entirely:

        void _tnl_wakeup_exec( GLcontext *ctx );
	void _tnl_wakeup_save_exec( GLcontext *ctx );

   
This module tracks state changes internally and maintains derived
values based on the current state.  For this to work, the driver
ensure the following funciton is called whenever the state changes and
the swsetup module is 'awake':

	void _tnl_InvalidateState( GLcontext *ctx, GLuint new_state );

There is no explicit call to put the tnl module to sleep.  Simply
install other function pointers into all the vtxfmt dispatch slots,
and (optionally) cease calling _tnl_InvalidateState().

CUSTOMIZATION

The module provides customizability through several mechanisms.  The
most important is by allowing drivers to specify the pipeline through
which vertex data is passed, including its eventual transfer to
rasterization hardware (or software).

The default pipeline is specified in t_pipeline.c, and is usually a
starting point for driver pipelines.  Some drivers will remove a stage
where hardware provides support for the implemented operation (for
instance fog where per-pixel hardware fog is available, as in the dri
tdfx driver), or add stages to shortcircuit latter operations (for
example taking advantage of hardware support for strips and other
higher-level primitives (for example the radeon driver).

In addition, the following functions provide further tweaks:

extern void
_tnl_need_projected_coords( GLcontext *ctx, GLboolean flag );

	- Direct the default vertex transformation stage to
          produce/not produce projected clip coordinates.
	  
extern void
_tnl_need_dlist_loopback( GLcontext *ctx, GLboolean flag );
      
        - Direct the display list component of the tnl module to
          replay display lists as 'glVertex' type calls, rather than
          passing the display list data directly into the tnl pipeline
          mechanism.  

	  This allows display lists to be replayed by the tnl module
	  even when the module is not strictly active.


extern void
_tnl_need_dlist_norm_lengths( GLcontext *ctx, GLboolean flag );

	- Direct the display list component to enable/disable caching
          1/length values for display list normals.  Doing so is
          ususally helpful when lighting is performed in software, but
          wasteful otherwise.


DRIVER INTERFACE

The module itself offers a minimal driver interface:

	 void (*RunPipeline)( GLcontext *ctx );

Normally this is set to _tnl_RunPipeline(), however the driver can use
this hook to wrap checks or other code around this call. 

In addition, the driver interface for the default render pipeline
stage is housed in the tnl context struct (this could be cleaner).  


RENDER DRIVER INTERFACE

See t_context.h for the definition and explanation of this.@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@
