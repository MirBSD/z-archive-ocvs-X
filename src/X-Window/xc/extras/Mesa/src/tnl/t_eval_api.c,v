head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.28.56;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.15;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.15;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.30.19;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.15;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@
/*
 * Mesa 3-D graphics library
 * Version:  4.0.3
 *
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


#include "glheader.h"
#include "colormac.h"
#include "context.h"
#include "macros.h"
#include "mem.h"
#include "mmath.h"
#include "mtypes.h"
#include "math/m_eval.h"

#include "t_eval_api.h"
#include "t_imm_api.h"
#include "t_imm_alloc.h"
#include "t_imm_exec.h"





/* KW: If are compiling, we don't know whether eval will produce a
 *     vertex when it is run in the future.  If this is pure immediate
 *     mode, eval is a noop if neither vertex map is enabled.
 *
 *     Thus we need to have a check in the display list code or
 *     elsewhere for eval(1,2) vertices in the case where
 *     map(1,2)_vertex is disabled, and to purge those vertices from
 *     the vb.
 */
void
_tnl_exec_EvalMesh1( GLenum mode, GLint i1, GLint i2 )
{
   GET_CURRENT_CONTEXT(ctx);
   GLint i;
   GLfloat u, du;
   GLenum prim;
   ASSERT_OUTSIDE_BEGIN_END(ctx);

/*     fprintf(stderr, "%s\n", __FUNCTION__); */

   switch (mode) {
      case GL_POINT:
         prim = GL_POINTS;
         break;
      case GL_LINE:
         prim = GL_LINE_STRIP;
         break;
      default:
         _mesa_error( ctx, GL_INVALID_ENUM, "glEvalMesh1(mode)" );
         return;
   }

   /* No effect if vertex maps disabled.
    */
   if (!ctx->Eval.Map1Vertex4 && !ctx->Eval.Map1Vertex3)
      return;

   du = ctx->Eval.MapGrid1du;
   u = ctx->Eval.MapGrid1u1 + i1 * du;

   /* Need to turn off compilation -- this is already saved, and the
    * coordinates generated and the test above depend on state that
    * may change before the list is executed.
    *
    * TODO: Anaylse display lists to determine if this state is
    * constant.
    *
    * State to watch:
    *       - enabled maps
    *       - map state for each enabled map, including control points
    *       - grid state
    *
    * Could alternatively cache individual maps in arrays, rather than
    * building immediates.  
    */
   {
      GLboolean compiling = ctx->CompileFlag;
      TNLcontext *tnl = TNL_CONTEXT(ctx);
      struct immediate *im = TNL_CURRENT_IM(ctx);
      GLboolean (*NotifyBegin)(GLcontext *ctx, GLenum p);

      NotifyBegin = tnl->Driver.NotifyBegin;
      tnl->Driver.NotifyBegin = 0;

      if (compiling) {
	 struct immediate *IM = _tnl_alloc_immediate( ctx );
	 FLUSH_VERTICES( ctx, 0 );
	 SET_IMMEDIATE( ctx, IM );
	 IM->ref_count++;	 
	 ctx->CompileFlag = GL_FALSE;
      }

      _tnl_Begin( prim );
      for (i=i1;i<=i2;i++,u+=du) {
	 _tnl_eval_coord1f( ctx, u );
      }
      _tnl_end(ctx);

      /* Need this for replay *and* compile:
       */
      FLUSH_VERTICES( ctx, 0 );
      tnl->Driver.NotifyBegin = NotifyBegin;

      if (compiling) {
	 TNL_CURRENT_IM(ctx)->ref_count--;
	 ASSERT( TNL_CURRENT_IM(ctx)->ref_count == 0 );
	 _tnl_free_immediate( ctx, TNL_CURRENT_IM(ctx) );
	 SET_IMMEDIATE( ctx, im );
	 ctx->CompileFlag = GL_TRUE;
      }
   }
}



void
_tnl_exec_EvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 )
{
   GET_CURRENT_CONTEXT(ctx);
   GLint i, j;
   GLfloat u, du, v, dv, v1, u1;
   ASSERT_OUTSIDE_BEGIN_END(ctx);

/*     fprintf(stderr, "%s\n", __FUNCTION__); */

   /* No effect if vertex maps disabled.
    */
   if (!ctx->Eval.Map2Vertex4 && !ctx->Eval.Map2Vertex3)
      return;


   du = ctx->Eval.MapGrid2du;
   dv = ctx->Eval.MapGrid2dv;
   v1 = ctx->Eval.MapGrid2v1 + j1 * dv;
   u1 = ctx->Eval.MapGrid2u1 + i1 * du;

   /* Need to turn off compilation -- this is already saved, and the
    * coordinates generated and the test above depend on state that
    * may change before the list is executed.
    */
   {
      GLboolean compiling = ctx->CompileFlag;
      struct immediate *im = TNL_CURRENT_IM(ctx);
      TNLcontext *tnl = TNL_CONTEXT(ctx);
      GLboolean (*NotifyBegin)(GLcontext *ctx, GLenum p);

      NotifyBegin = tnl->Driver.NotifyBegin;
      tnl->Driver.NotifyBegin = 0;

      if (compiling) {
	 struct immediate *IM =  _tnl_alloc_immediate( ctx );
	 FLUSH_VERTICES( ctx, 0 );
	 SET_IMMEDIATE( ctx, IM );
	 IM->ref_count++;	 
	 ctx->CompileFlag = GL_FALSE;
      }

      switch (mode) {
      case GL_POINT:
	 _tnl_Begin( GL_POINTS );
	 for (v=v1,j=j1;j<=j2;j++,v+=dv) {
	    for (u=u1,i=i1;i<=i2;i++,u+=du) {
	       _tnl_eval_coord2f( ctx, u, v );
	    }
	 }
	 _tnl_end(ctx);
	 break;
      case GL_LINE:
	 for (v=v1,j=j1;j<=j2;j++,v+=dv) {
	    _tnl_Begin( GL_LINE_STRIP );
	    for (u=u1,i=i1;i<=i2;i++,u+=du) {
	       _tnl_eval_coord2f( ctx, u, v );
	    }
	    _tnl_end(ctx);
	 }
	 for (u=u1,i=i1;i<=i2;i++,u+=du) {
	    _tnl_Begin( GL_LINE_STRIP );
	    for (v=v1,j=j1;j<=j2;j++,v+=dv) {
	       _tnl_eval_coord2f( ctx, u, v );
	    }
	    _tnl_end(ctx);
	 }
	 break;
      case GL_FILL:
	 for (v=v1,j=j1;j<j2;j++,v+=dv) {
	    _tnl_Begin( GL_TRIANGLE_STRIP );
	    for (u=u1,i=i1;i<=i2;i++,u+=du) {
	       _tnl_eval_coord2f( ctx, u, v );
	       _tnl_eval_coord2f( ctx, u, v+dv );
	    }
	    _tnl_end(ctx);
	 }
	 break;
      default:
	 _mesa_error( ctx, GL_INVALID_ENUM, "glEvalMesh2(mode)" );
	 return;
      }

      /* Need this for replay *and* compile:
       */
      FLUSH_VERTICES( ctx, 0 );
      tnl->Driver.NotifyBegin = NotifyBegin;
	 
      if (compiling) {
	 TNL_CURRENT_IM(ctx)->ref_count--;
	 _tnl_free_immediate( ctx, TNL_CURRENT_IM( ctx ) );
	 SET_IMMEDIATE( ctx, im );
	 ctx->CompileFlag = GL_TRUE;
      }
   }
}



void _tnl_eval_init( GLcontext *ctx )
{
   GLvertexformat *vfmt = &(TNL_CONTEXT(ctx)->vtxfmt);
   vfmt->EvalMesh1 = _tnl_exec_EvalMesh1;
   vfmt->EvalMesh2 = _tnl_exec_EvalMesh2;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d4 1
a4 1
 * Version:  4.1
a23 4
 *
 * Authors:
 *    Keith Whitwell - original code
 *    Brian Paul - vertex program updates
d31 1
a31 1
#include "imports.h"
d42 3
d63 1
a63 2
   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glEvalMesh1()");
d79 1
a79 2
   if (!ctx->Eval.Map1Vertex4 && !ctx->Eval.Map1Vertex3 &&
       (!ctx->VertexProgram.Enabled || !ctx->Eval.Map1Attrib[VERT_ATTRIB_POS]))
d110 1
a110 1
	 struct immediate *tmp = _tnl_alloc_immediate( ctx );
d112 2
a113 2
	 SET_IMMEDIATE( ctx, tmp );
	 TNL_CURRENT_IM(ctx)->ref_count++;	 
d148 1
a148 2
   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glEvalMesh2()");
d152 1
a152 2
   if (!ctx->Eval.Map2Vertex4 && !ctx->Eval.Map2Vertex3 &&
       (!ctx->VertexProgram.Enabled || !ctx->Eval.Map2Attrib[VERT_ATTRIB_POS]))
d155 1
d175 1
a175 1
	 struct immediate *tmp = _tnl_alloc_immediate( ctx );
d177 2
a178 2
	 SET_IMMEDIATE( ctx, tmp );
	 TNL_CURRENT_IM(ctx)->ref_count++;	 
d236 1
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d4 1
a4 1
 * Version:  4.1
a23 4
 *
 * Authors:
 *    Keith Whitwell - original code
 *    Brian Paul - vertex program updates
d31 1
a31 1
#include "imports.h"
d42 3
d63 1
a63 2
   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glEvalMesh1()");
d79 1
a79 2
   if (!ctx->Eval.Map1Vertex4 && !ctx->Eval.Map1Vertex3 &&
       (!ctx->VertexProgram.Enabled || !ctx->Eval.Map1Attrib[VERT_ATTRIB_POS]))
d110 1
a110 1
	 struct immediate *tmp = _tnl_alloc_immediate( ctx );
d112 2
a113 2
	 SET_IMMEDIATE( ctx, tmp );
	 TNL_CURRENT_IM(ctx)->ref_count++;	 
d148 1
a148 2
   if (MESA_VERBOSE & VERBOSE_API)
      _mesa_debug(ctx, "glEvalMesh2()");
d152 1
a152 2
   if (!ctx->Eval.Map2Vertex4 && !ctx->Eval.Map2Vertex3 &&
       (!ctx->VertexProgram.Enabled || !ctx->Eval.Map2Attrib[VERT_ATTRIB_POS]))
d155 1
d175 1
a175 1
	 struct immediate *tmp = _tnl_alloc_immediate( ctx );
d177 2
a178 2
	 SET_IMMEDIATE( ctx, tmp );
	 TNL_CURRENT_IM(ctx)->ref_count++;	 
d236 1
@

