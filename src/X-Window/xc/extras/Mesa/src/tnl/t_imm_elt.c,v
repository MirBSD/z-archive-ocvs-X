head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.28.59;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.16;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.16;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.30.23;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.17;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@
/*
 * Mesa 3-D graphics library
 * Version:  3.5
 *
 * Copyright (C) 1999-2001  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@valinux.com>
 */

#include "glheader.h"
#include "colormac.h"
#include "mem.h"
#include "mmath.h"
#include "mtypes.h"

#include "math/m_translate.h"

#include "t_context.h"
#include "t_imm_elt.h"



typedef void (*trans_elt_1f_func)(GLfloat *to,
				  CONST void *ptr,
				  GLuint stride,
				  GLuint *flags,
				  GLuint *elts,
				  GLuint match,
				  GLuint start,
				  GLuint n );

typedef void (*trans_elt_1ui_func)(GLuint *to,
				   CONST void *ptr,
				   GLuint stride,
				   GLuint *flags,
				   GLuint *elts,
				   GLuint match,
				   GLuint start,
				   GLuint n );

typedef void (*trans_elt_1ub_func)(GLubyte *to,
				   CONST void *ptr,
				   GLuint stride,
				   GLuint *flags,
				   GLuint *elts,
				   GLuint match,
				   GLuint start,
				   GLuint n );

typedef void (*trans_elt_4ub_func)(GLubyte (*to)[4],
                                   CONST void *ptr,
                                   GLuint stride,
                                   GLuint *flags,
                                   GLuint *elts,
                                   GLuint match,
                                   GLuint start,
                                   GLuint n );

typedef void (*trans_elt_4us_func)(GLushort (*to)[4],
                                   CONST void *ptr,
                                   GLuint stride,
                                   GLuint *flags,
                                   GLuint *elts,
                                   GLuint match,
                                   GLuint start,
                                   GLuint n );

typedef void (*trans_elt_4f_func)(GLfloat (*to)[4],
				  CONST void *ptr,
				  GLuint stride,
				  GLuint *flags,
				  GLuint *elts,
				  GLuint match,
				  GLuint start,
				  GLuint n );

typedef void (*trans_elt_3f_func)(GLfloat (*to)[3],
				  CONST void *ptr,
				  GLuint stride,
				  GLuint *flags,
				  GLuint *elts,
				  GLuint match,
				  GLuint start,
				  GLuint n );




static trans_elt_1f_func _tnl_trans_elt_1f_tab[MAX_TYPES];
static trans_elt_1ui_func _tnl_trans_elt_1ui_tab[MAX_TYPES];
static trans_elt_1ub_func _tnl_trans_elt_1ub_tab[MAX_TYPES];
static trans_elt_3f_func  _tnl_trans_elt_3f_tab[MAX_TYPES];
static trans_elt_4ub_func _tnl_trans_elt_4ub_tab[5][MAX_TYPES];
static trans_elt_4us_func _tnl_trans_elt_4us_tab[5][MAX_TYPES];
static trans_elt_4f_func  _tnl_trans_elt_4f_tab[5][MAX_TYPES];


#define PTR_ELT(ptr, elt) (((SRC *)ptr)[elt])





/* Code specific to array element implementation.  There is a small
 * subtlety in the bits CHECK() tests, and the way bits are set in
 * glArrayElement which ensures that if, eg, in the case that the
 * vertex array is disabled and normal array is enabled, and we get
 * either sequence:
 *
 * ArrayElement()    OR   Normal()
 * Normal()               ArrayElement()
 * Vertex()               Vertex()
 *
 * That the correct value for normal is used.
 */
#define TAB(x) _tnl_trans_elt##x##_tab
#define ARGS   GLuint *flags, GLuint *elts, GLuint match, \
               GLuint start, GLuint n
#define SRC_START  0
#define DST_START  start
#define CHECK  if ((flags[i]&match) == VERT_ELT)
#define NEXT_F  (void)1
#define NEXT_F2 f = first + elts[i] * stride;


/* GL_BYTE
 */
#define SRC GLbyte
#define SRC_IDX TYPE_IDX(GL_BYTE)
#define TRX_3F(f,n)   BYTE_TO_FLOAT( PTR_ELT(f,n) )
#define TRX_4F(f,n)   BYTE_TO_FLOAT( PTR_ELT(f,n) )
#define TRX_UB(ub, f,n)  ub = BYTE_TO_UBYTE( PTR_ELT(f,n) )
#define TRX_US(us, f,n)  us = BYTE_TO_USHORT( PTR_ELT(f,n) )
#define TRX_UI(f,n)  (PTR_ELT(f,n) < 0 ? 0 : (GLuint)  PTR_ELT(f,n))


#define SZ 4
#define INIT init_trans_4_GLbyte_elt
#define DEST_4F trans_4_GLbyte_4f_elt
#define DEST_4UB trans_4_GLbyte_4ub_elt
#define DEST_4US trans_4_GLbyte_4us_elt
#include "math/m_trans_tmp.h"

#define SZ 3
#define INIT init_trans_3_GLbyte_elt
#define DEST_4F trans_3_GLbyte_4f_elt
#define DEST_4UB trans_3_GLbyte_4ub_elt
#define DEST_4US trans_3_GLbyte_4us_elt
#define DEST_3F trans_3_GLbyte_3f_elt
#include "math/m_trans_tmp.h"

#define SZ 2
#define INIT init_trans_2_GLbyte_elt
#define DEST_4F trans_2_GLbyte_4f_elt
#include "math/m_trans_tmp.h"

#define SZ 1
#define INIT init_trans_1_GLbyte_elt
#define DEST_4F trans_1_GLbyte_4f_elt
#define DEST_1UB trans_1_GLbyte_1ub_elt
#define DEST_1UI trans_1_GLbyte_1ui_elt
#include "math/m_trans_tmp.h"

#undef SRC
#undef TRX_3F
#undef TRX_4F
#undef TRX_UB
#undef TRX_US
#undef TRX_UI
#undef SRC_IDX

/* GL_UNSIGNED_BYTE
 */
#define SRC GLubyte
#define SRC_IDX TYPE_IDX(GL_UNSIGNED_BYTE)
#define TRX_3F(f,n)	     UBYTE_TO_FLOAT( PTR_ELT(f,n) )
#define TRX_4F(f,n)	     UBYTE_TO_FLOAT( PTR_ELT(f,n) )
#define TRX_UB(ub, f,n)	     ub = PTR_ELT(f,n)
#define TRX_US(us, f,n)	     us = PTR_ELT(f,n)
#define TRX_UI(f,n)          (GLuint)PTR_ELT(f,n)

/* 4ub->4ub handled in special case below.
 */
#define SZ 4
#define INIT init_trans_4_GLubyte_elt
#define DEST_4F trans_4_GLubyte_4f_elt
#define DEST_4US trans_4_GLubyte_4us_elt
#include "math/m_trans_tmp.h"

#define SZ 3
#define INIT init_trans_3_GLubyte_elt
#define DEST_4F trans_3_GLubyte_4f_elt
#define DEST_3F trans_3_GLubyte_3f_elt
#define DEST_4UB trans_3_GLubyte_4ub_elt
#define DEST_4US trans_3_GLubyte_4us_elt
#include "math/m_trans_tmp.h"


#define SZ 1
#define INIT init_trans_1_GLubyte_elt
#define DEST_1UI trans_1_GLubyte_1ui_elt
#define DEST_1UB trans_1_GLubyte_1ub_elt
#include "math/m_trans_tmp.h"

#undef SRC
#undef SRC_IDX
#undef TRX_3F
#undef TRX_4F
#undef TRX_UB
#undef TRX_US
#undef TRX_UI


/* GL_SHORT
 */
#define SRC GLshort
#define SRC_IDX TYPE_IDX(GL_SHORT)
#define TRX_3F(f,n)   SHORT_TO_FLOAT( PTR_ELT(f,n) )
#define TRX_4F(f,n)   (GLfloat)( PTR_ELT(f,n) )
#define TRX_UB(ub, f,n)  ub = SHORT_TO_UBYTE(PTR_ELT(f,n))
#define TRX_US(us, f,n)  us = SHORT_TO_USHORT(PTR_ELT(f,n))
#define TRX_UI(f,n)  (PTR_ELT(f,n) < 0 ? 0 : (GLuint)  PTR_ELT(f,n))


#define SZ  4
#define INIT init_trans_4_GLshort_elt
#define DEST_4F trans_4_GLshort_4f_elt
#define DEST_4UB trans_4_GLshort_4ub_elt
#define DEST_4US trans_4_GLshort_4us_elt
#include "math/m_trans_tmp.h"

#define SZ 3
#define INIT init_trans_3_GLshort_elt
#define DEST_4F trans_3_GLshort_4f_elt
#define DEST_4UB trans_3_GLshort_4ub_elt
#define DEST_4US trans_3_GLshort_4us_elt
#define DEST_3F trans_3_GLshort_3f_elt
#include "math/m_trans_tmp.h"

#define SZ 2
#define INIT init_trans_2_GLshort_elt
#define DEST_4F trans_2_GLshort_4f_elt
#include "math/m_trans_tmp.h"

#define SZ 1
#define INIT init_trans_1_GLshort_elt
#define DEST_4F trans_1_GLshort_4f_elt
#define DEST_1UB trans_1_GLshort_1ub_elt
#define DEST_1UI trans_1_GLshort_1ui_elt
#include "math/m_trans_tmp.h"


#undef SRC
#undef SRC_IDX
#undef TRX_3F
#undef TRX_4F
#undef TRX_UB
#undef TRX_US
#undef TRX_UI


/* GL_UNSIGNED_SHORT
 */
#define SRC GLushort
#define SRC_IDX TYPE_IDX(GL_UNSIGNED_SHORT)
#define TRX_3F(f,n)   USHORT_TO_FLOAT( PTR_ELT(f,n) )
#define TRX_4F(f,n)   (GLfloat)( PTR_ELT(f,n) )
#define TRX_UB(ub,f,n)  ub = (GLubyte) (PTR_ELT(f,n) >> 8)
#define TRX_US(us,f,n)  us = PTR_ELT(f,n)
#define TRX_UI(f,n)  (GLuint)   PTR_ELT(f,n)


#define SZ 4
#define INIT init_trans_4_GLushort_elt
#define DEST_4F trans_4_GLushort_4f_elt
#define DEST_4UB trans_4_GLushort_4ub_elt
#define DEST_4US trans_4_GLushort_4us_elt
#include "math/m_trans_tmp.h"

#define SZ 3
#define INIT init_trans_3_GLushort_elt
#define DEST_4F trans_3_GLushort_4f_elt
#define DEST_4UB trans_3_GLushort_4ub_elt
#define DEST_4US trans_3_GLushort_4us_elt
#define DEST_3F trans_3_GLushort_3f_elt
#include "math/m_trans_tmp.h"

#define SZ 2
#define INIT init_trans_2_GLushort_elt
#define DEST_4F trans_2_GLushort_4f_elt
#include "math/m_trans_tmp.h"

#define SZ 1
#define INIT init_trans_1_GLushort_elt
#define DEST_4F trans_1_GLushort_4f_elt
#define DEST_1UB trans_1_GLushort_1ub_elt
#define DEST_1UI trans_1_GLushort_1ui_elt
#include "math/m_trans_tmp.h"

#undef SRC
#undef SRC_IDX
#undef TRX_3F
#undef TRX_4F
#undef TRX_UB
#undef TRX_US
#undef TRX_UI


/* GL_INT
 */
#define SRC GLint
#define SRC_IDX TYPE_IDX(GL_INT)
#define TRX_3F(f,n)   INT_TO_FLOAT( PTR_ELT(f,n) )
#define TRX_4F(f,n)   (GLfloat)( PTR_ELT(f,n) )
#define TRX_UB(ub, f,n)  ub = INT_TO_UBYTE(PTR_ELT(f,n))
#define TRX_US(us, f,n)  us = INT_TO_USHORT(PTR_ELT(f,n))
#define TRX_UI(f,n)  (PTR_ELT(f,n) < 0 ? 0 : (GLuint)  PTR_ELT(f,n))


#define SZ 4
#define INIT init_trans_4_GLint_elt
#define DEST_4F trans_4_GLint_4f_elt
#define DEST_4UB trans_4_GLint_4ub_elt
#define DEST_4US trans_4_GLint_4us_elt
#include "math/m_trans_tmp.h"

#define SZ 3
#define INIT init_trans_3_GLint_elt
#define DEST_4F trans_3_GLint_4f_elt
#define DEST_4UB trans_3_GLint_4ub_elt
#define DEST_4US trans_3_GLint_4us_elt
#define DEST_3F trans_3_GLint_3f_elt
#include "math/m_trans_tmp.h"

#define SZ 2
#define INIT init_trans_2_GLint_elt
#define DEST_4F trans_2_GLint_4f_elt
#include "math/m_trans_tmp.h"

#define SZ 1
#define INIT init_trans_1_GLint_elt
#define DEST_4F trans_1_GLint_4f_elt
#define DEST_1UB trans_1_GLint_1ub_elt
#define DEST_1UI trans_1_GLint_1ui_elt
#include "math/m_trans_tmp.h"


#undef SRC
#undef SRC_IDX
#undef TRX_3F
#undef TRX_4F
#undef TRX_UB
#undef TRX_US
#undef TRX_UI


/* GL_UNSIGNED_INT
 */
#define SRC GLuint
#define SRC_IDX TYPE_IDX(GL_UNSIGNED_INT)
#define TRX_3F(f,n)   UINT_TO_FLOAT( PTR_ELT(f,n) )
#define TRX_4F(f,n)   (GLfloat)( PTR_ELT(f,n) )
#define TRX_UB(ub, f,n)  ub = (GLubyte) (PTR_ELT(f,n) >> 24)
#define TRX_US(us, f,n)  us = (GLushort) (PTR_ELT(f,n) >> 16)
#define TRX_UI(f,n)		PTR_ELT(f,n)


#define SZ 4
#define INIT init_trans_4_GLuint_elt
#define DEST_4F trans_4_GLuint_4f_elt
#define DEST_4UB trans_4_GLuint_4ub_elt
#define DEST_4US trans_4_GLuint_4us_elt
#include "math/m_trans_tmp.h"

#define SZ 3
#define INIT init_trans_3_GLuint_elt
#define DEST_4F trans_3_GLuint_4f_elt
#define DEST_4UB trans_3_GLuint_4ub_elt
#define DEST_4US trans_3_GLuint_4us_elt
#define DEST_3F trans_3_GLuint_3f_elt
#include "math/m_trans_tmp.h"

#define SZ 2
#define INIT init_trans_2_GLuint_elt
#define DEST_4F trans_2_GLuint_4f_elt
#include "math/m_trans_tmp.h"

#define SZ 1
#define INIT init_trans_1_GLuint_elt
#define DEST_4F trans_1_GLuint_4f_elt
#define DEST_1UB trans_1_GLuint_1ub_elt
#define DEST_1UI trans_1_GLuint_1ui_elt
#include "math/m_trans_tmp.h"

#undef SRC
#undef SRC_IDX
#undef TRX_3F
#undef TRX_4F
#undef TRX_UB
#undef TRX_US
#undef TRX_UI


/* GL_DOUBLE
 */
#define SRC GLdouble
#define SRC_IDX TYPE_IDX(GL_DOUBLE)
#define TRX_3F(f,n)    (GLfloat) PTR_ELT(f,n)
#define TRX_4F(f,n)    (GLfloat) PTR_ELT(f,n)
#define TRX_UB(ub,f,n) UNCLAMPED_FLOAT_TO_UBYTE(ub, PTR_ELT(f,n))
#define TRX_US(us,f,n) UNCLAMPED_FLOAT_TO_USHORT(us, PTR_ELT(f,n))
#define TRX_UI(f,n)    (GLuint) (GLint) PTR_ELT(f,n)
#define TRX_1F(f,n)    (GLfloat) PTR_ELT(f,n)


#define SZ 4
#define INIT init_trans_4_GLdouble_elt
#define DEST_4F trans_4_GLdouble_4f_elt
#define DEST_4UB trans_4_GLdouble_4ub_elt
#define DEST_4US trans_4_GLdouble_4us_elt
#include "math/m_trans_tmp.h"

#define SZ 3
#define INIT init_trans_3_GLdouble_elt
#define DEST_4F trans_3_GLdouble_4f_elt
#define DEST_4UB trans_3_GLdouble_4ub_elt
#define DEST_4US trans_3_GLdouble_4us_elt
#define DEST_3F trans_3_GLdouble_3f_elt
#include "math/m_trans_tmp.h"

#define SZ 2
#define INIT init_trans_2_GLdouble_elt
#define DEST_4F trans_2_GLdouble_4f_elt
#include "math/m_trans_tmp.h"

#define SZ 1
#define INIT init_trans_1_GLdouble_elt
#define DEST_4F trans_1_GLdouble_4f_elt
#define DEST_1UB trans_1_GLdouble_1ub_elt
#define DEST_1UI trans_1_GLdouble_1ui_elt
#define DEST_1F trans_1_GLdouble_1f_elt
#include "math/m_trans_tmp.h"

#undef SRC
#undef SRC_IDX

/* GL_FLOAT
 */
#define SRC GLfloat
#define SRC_IDX TYPE_IDX(GL_FLOAT)
#define SZ 4
#define INIT init_trans_4_GLfloat_elt
#define DEST_4UB trans_4_GLfloat_4ub_elt
#define DEST_4US trans_4_GLfloat_4us_elt
#define DEST_4F  trans_4_GLfloat_4f_elt
#include "math/m_trans_tmp.h"

#define SZ 3
#define INIT init_trans_3_GLfloat_elt
#define DEST_4F  trans_3_GLfloat_4f_elt
#define DEST_4UB trans_3_GLfloat_4ub_elt
#define DEST_4US trans_3_GLfloat_4us_elt
#define DEST_3F trans_3_GLfloat_3f_elt
#include "math/m_trans_tmp.h"

#define SZ 2
#define INIT init_trans_2_GLfloat_elt
#define DEST_4F trans_2_GLfloat_4f_elt
#include "math/m_trans_tmp.h"

#define SZ 1
#define INIT init_trans_1_GLfloat_elt
#define DEST_4F  trans_1_GLfloat_3f_elt
#define DEST_1UB trans_1_GLfloat_1ub_elt
#define DEST_1UI trans_1_GLfloat_1ui_elt
#define DEST_1F trans_1_GLfloat_1f_elt
#include "math/m_trans_tmp.h"

#undef SRC
#undef SRC_IDX
#undef TRX_3F
#undef TRX_4F
#undef TRX_UB
#undef TRX_US
#undef TRX_UI


static void trans_4_GLubyte_4ub(GLubyte (*t)[4],
                                CONST void *Ptr,
                                GLuint stride,
                                ARGS )
{
   const GLubyte *f = (GLubyte *) Ptr + SRC_START * stride;
   const GLubyte *first = f;
   GLuint i;
   (void) start;
   if (((((long) f | (long) stride)) & 3L) == 0L) {
      /* Aligned.
       */
      for (i = DST_START ; i < n ; i++, NEXT_F) {
	 CHECK {
	    NEXT_F2;
	    COPY_4UBV( t[i], f );
	 }
      }
   } else {
      for (i = DST_START ; i < n ; i++, NEXT_F) {
	 CHECK {
	    NEXT_F2;
	    t[i][0] = f[0];
	    t[i][1] = f[1];
	    t[i][2] = f[2];
	    t[i][3] = f[3];
	 }
      }
   }
}


static void init_translate_elt(void)
{
   MEMSET( TAB(_1ui), 0, sizeof(TAB(_1ui)) );
   MEMSET( TAB(_1ub), 0, sizeof(TAB(_1ub)) );
   MEMSET( TAB(_3f),  0, sizeof(TAB(_3f)) );
   MEMSET( TAB(_4ub), 0, sizeof(TAB(_4ub)) );
   MEMSET( TAB(_4us), 0, sizeof(TAB(_4us)) );
   MEMSET( TAB(_4f),  0, sizeof(TAB(_4f)) );

   TAB(_4ub)[4][TYPE_IDX(GL_UNSIGNED_BYTE)] = trans_4_GLubyte_4ub;

   init_trans_4_GLbyte_elt();
   init_trans_3_GLbyte_elt();
   init_trans_2_GLbyte_elt();
   init_trans_1_GLbyte_elt();
   init_trans_1_GLubyte_elt();
   init_trans_3_GLubyte_elt();
   init_trans_4_GLubyte_elt();
   init_trans_4_GLshort_elt();
   init_trans_3_GLshort_elt();
   init_trans_2_GLshort_elt();
   init_trans_1_GLshort_elt();
   init_trans_4_GLushort_elt();
   init_trans_3_GLushort_elt();
   init_trans_2_GLushort_elt();
   init_trans_1_GLushort_elt();
   init_trans_4_GLint_elt();
   init_trans_3_GLint_elt();
   init_trans_2_GLint_elt();
   init_trans_1_GLint_elt();
   init_trans_4_GLuint_elt();
   init_trans_3_GLuint_elt();
   init_trans_2_GLuint_elt();
   init_trans_1_GLuint_elt();
   init_trans_4_GLdouble_elt();
   init_trans_3_GLdouble_elt();
   init_trans_2_GLdouble_elt();
   init_trans_1_GLdouble_elt();
   init_trans_4_GLfloat_elt();
   init_trans_3_GLfloat_elt();
   init_trans_2_GLfloat_elt();
   init_trans_1_GLfloat_elt();
}


#undef TAB
#undef CLASS
#undef ARGS
#undef CHECK
#undef START




void _tnl_imm_elt_init( void )
{
   init_translate_elt();
}


static void _tnl_trans_elt_1f(GLfloat *to,
		       const struct gl_client_array *from,
		       GLuint *flags,
		       GLuint *elts,
		       GLuint match,
		       GLuint start,
		       GLuint n )
{
   _tnl_trans_elt_1f_tab[TYPE_IDX(from->Type)]( to,
					      from->Ptr,
					      from->StrideB,
					      flags,
					      elts,
					      match,
					      start,
					      n );

}

static void _tnl_trans_elt_1ui(GLuint *to,
			const struct gl_client_array *from,
			GLuint *flags,
			GLuint *elts,
			GLuint match,
			GLuint start,
			GLuint n )
{
   _tnl_trans_elt_1ui_tab[TYPE_IDX(from->Type)]( to,
					       from->Ptr,
					       from->StrideB,
					       flags,
					       elts,
					       match,
					       start,
					       n );

}


static void _tnl_trans_elt_1ub(GLubyte *to,
			const struct gl_client_array *from,
			GLuint *flags,
			GLuint *elts,
			GLuint match,
			GLuint start,
			GLuint n )
{
   _tnl_trans_elt_1ub_tab[TYPE_IDX(from->Type)]( to,
                                                 from->Ptr,
                                                 from->StrideB,
                                                 flags,
                                                 elts,
                                                 match,
                                                 start,
                                                 n );

}


#if 0
static void _tnl_trans_elt_4ub(GLubyte (*to)[4],
                               const struct gl_client_array *from,
                               GLuint *flags,
                               GLuint *elts,
                               GLuint match,
                               GLuint start,
                               GLuint n )
{
   _tnl_trans_elt_4ub_tab[from->Size][TYPE_IDX(from->Type)]( to,
                                                             from->Ptr,
                                                             from->StrideB,
                                                             flags,
                                                             elts,
                                                             match,
                                                             start,
                                                             n );

}
#endif

#if 0
static void _tnl_trans_elt_4us(GLushort (*to)[4],
                               const struct gl_client_array *from,
                               GLuint *flags,
                               GLuint *elts,
                               GLuint match,
                               GLuint start,
                               GLuint n )
{
   _tnl_trans_elt_4us_tab[from->Size][TYPE_IDX(from->Type)]( to,
                                                             from->Ptr,
                                                             from->StrideB,
                                                             flags,
                                                             elts,
                                                             match,
                                                             start,
                                                             n );

}
#endif

static void _tnl_trans_elt_4f(GLfloat (*to)[4],
                              const struct gl_client_array *from,
                              GLuint *flags,
                              GLuint *elts,
                              GLuint match,
                              GLuint start,
                              GLuint n )
{
   _tnl_trans_elt_4f_tab[from->Size][TYPE_IDX(from->Type)]( to,
					      from->Ptr,
					      from->StrideB,
					      flags,
					      elts,
					      match,
					      start,
					      n );

}



static void _tnl_trans_elt_3f(GLfloat (*to)[3],
		       const struct gl_client_array *from,
		       GLuint *flags,
		       GLuint *elts,
		       GLuint match,
		       GLuint start,
		       GLuint n )
{
   _tnl_trans_elt_3f_tab[TYPE_IDX(from->Type)]( to,
					      from->Ptr,
					      from->StrideB,
					      flags,
					      elts,
					      match,
					      start,
					      n );
}




/* Batch function to translate away all the array elements in the
 * input buffer prior to transform.  Done only the first time a vertex
 * buffer is executed or compiled.
 *
 * KW: Have to do this after each glEnd if arrays aren't locked.
 */
void _tnl_translate_array_elts( GLcontext *ctx, struct immediate *IM,
				GLuint start, GLuint count )
{
   GLuint *flags = IM->Flag;
   GLuint *elts = IM->Elt;
   GLuint translate = ctx->Array._Enabled;
   GLuint i;

   if (MESA_VERBOSE&VERBOSE_IMMEDIATE)
      fprintf(stderr, "exec_array_elements %d .. %d\n", start, count);

   if (translate & VERT_OBJ) {
      _tnl_trans_elt_4f( IM->Obj,
			 &ctx->Array.Vertex,
			 flags, elts, (VERT_ELT|VERT_OBJ),
			 start, count);

      if (ctx->Array.Vertex.Size == 4)
	 translate |= VERT_OBJ_234;
      else if (ctx->Array.Vertex.Size == 3)
	 translate |= VERT_OBJ_23;
   }


   if (translate & VERT_NORM)
      _tnl_trans_elt_3f( IM->Normal,
			 &ctx->Array.Normal,
			 flags, elts, (VERT_ELT|VERT_NORM),
			 start, count);

   if (translate & VERT_EDGE)
      _tnl_trans_elt_1ub( IM->EdgeFlag,
			  &ctx->Array.EdgeFlag,
			  flags, elts, (VERT_ELT|VERT_EDGE),
			  start, count);

   if (translate & VERT_RGBA) {
      _tnl_trans_elt_4f( IM->Color,
			 &ctx->Array.Color,
			 flags, elts, (VERT_ELT|VERT_RGBA),
			 start, count);
   }

   if (translate & VERT_SPEC_RGB) {
      _tnl_trans_elt_4f( IM->SecondaryColor,
			 &ctx->Array.SecondaryColor,
			 flags, elts, (VERT_ELT|VERT_SPEC_RGB),
			 start, count);
   }

   if (translate & VERT_FOG_COORD)
      _tnl_trans_elt_1f( IM->FogCoord,
			 &ctx->Array.FogCoord,
			 flags, elts, (VERT_ELT|VERT_FOG_COORD),
			 start, count);

   if (translate & VERT_INDEX)
      _tnl_trans_elt_1ui( IM->Index,
			  &ctx->Array.Index,
			  flags, elts, (VERT_ELT|VERT_INDEX),
			  start, count);

   if (translate & VERT_TEX_ANY) {
      for (i = 0 ; i < ctx->Const.MaxTextureUnits ; i++)
	 if (translate & VERT_TEX(i)) {
	    _tnl_trans_elt_4f( IM->TexCoord[i],
			       &ctx->Array.TexCoord[i],
			       flags, elts, (VERT_ELT|VERT_TEX(i)),
			       start, count);

	    if (ctx->Array.TexCoord[i].Size == 4)
	       IM->TexSize |= TEX_SIZE_4(i);
	    else if (ctx->Array.TexCoord[i].Size == 3)
	       IM->TexSize |= TEX_SIZE_3(i);
	 }
   }

   for (i = start ; i < count ; i++)
      if (flags[i] & VERT_ELT) flags[i] |= translate;

   IM->FlushElt = 0;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d4 1
a4 1
 * Version:  4.1
d6 1
a6 1
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
d26 1
a26 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 2
#include "context.h"
#include "imports.h"
d41 10
d54 2
a55 2
				   const GLuint *flags,
				   const GLuint *elts,
d63 2
a64 2
				   const GLuint *flags,
				   const GLuint *elts,
d69 18
d90 2
a91 2
				  const GLuint *flags,
				  const GLuint *elts,
d96 13
d111 3
a114 1
static trans_elt_4f_func  _tnl_trans_elt_4fc_tab[5][MAX_TYPES];
d121 2
d136 1
a136 1
#define ARGS   const GLuint *flags, const GLuint *elts, GLuint match, \
d140 1
a140 1
#define CHECK  if ((flags[i]&match) == VERT_BIT_ELT)
d149 1
a150 1
#define TRX_4FC(f,n)   BYTE_TO_FLOAT( PTR_ELT(f,n) )
d152 1
d159 2
a160 1
#define DEST_4FC trans_4_GLbyte_4fc_elt
d166 3
a168 1
#define DEST_4FC trans_3_GLbyte_4fc_elt
a173 1
#define DEST_4FC trans_2_GLbyte_4fc_elt
a178 1
#define DEST_4FC trans_1_GLbyte_4fc_elt
d184 1
a185 1
#undef TRX_4FC
d187 1
d195 1
a196 1
#define TRX_4FC(f,n)	     UBYTE_TO_FLOAT( PTR_ELT(f,n) )
d198 1
d206 1
a206 1
#define DEST_4FC trans_4_GLubyte_4fc_elt
d212 3
a214 1
#define DEST_4FC trans_3_GLubyte_4fc_elt
d220 1
a220 2
#define DEST_4F  trans_1_GLubyte_4f_elt
#define DEST_4FC  trans_1_GLubyte_4fc_elt
a221 1
#define DEST_1UI trans_1_GLubyte_1ui_elt
d226 1
a227 1
#undef TRX_4FC
d229 1
d237 1
a238 1
#define TRX_4FC(f,n)   SHORT_TO_FLOAT( PTR_ELT(f,n) )
d240 1
d247 2
a248 1
#define DEST_4FC trans_4_GLshort_4fc_elt
d254 3
a256 1
#define DEST_4FC trans_3_GLshort_4fc_elt
a261 1
#define DEST_4FC trans_2_GLshort_4fc_elt
a266 1
#define DEST_4FC trans_1_GLshort_4fc_elt
d274 1
a275 1
#undef TRX_4FC
d277 1
d285 1
a286 1
#define TRX_4FC(f,n)   USHORT_TO_FLOAT( PTR_ELT(f,n) )
d288 1
d295 2
a296 1
#define DEST_4FC trans_4_GLushort_4fc_elt
d302 3
a304 1
#define DEST_4FC trans_3_GLushort_4fc_elt
a309 1
#define DEST_4FC trans_2_GLushort_4fc_elt
a314 1
#define DEST_4FC trans_1_GLushort_4fc_elt
d321 1
a322 1
#undef TRX_4FC
d324 1
d332 1
a333 1
#define TRX_4FC(f,n)   INT_TO_FLOAT( PTR_ELT(f,n) )
d335 1
d342 2
a343 1
#define DEST_4FC trans_4_GLint_4fc_elt
d349 3
a351 1
#define DEST_4FC trans_3_GLint_4fc_elt
a356 1
#define DEST_4FC trans_2_GLint_4fc_elt
a361 1
#define DEST_4FC trans_1_GLint_4fc_elt
d369 1
a370 1
#undef TRX_4FC
d372 1
d380 1
a381 1
#define TRX_4FC(f,n)   UINT_TO_FLOAT( PTR_ELT(f,n) )
d383 1
d390 2
a391 1
#define DEST_4FC trans_4_GLuint_4fc_elt
d397 3
a399 1
#define DEST_4FC trans_3_GLuint_4fc_elt
a404 1
#define DEST_4FC trans_2_GLuint_4fc_elt
a409 1
#define DEST_4FC trans_1_GLuint_4fc_elt
d416 1
a417 1
#undef TRX_4FC
d419 1
d427 1
a428 1
#define TRX_4FC(f,n)    (GLfloat) PTR_ELT(f,n)
d430 1
d438 2
a439 1
#define DEST_4FC trans_4_GLdouble_4fc_elt
d445 3
a447 1
#define DEST_4FC trans_3_GLdouble_4fc_elt
a452 1
#define DEST_4FC trans_2_GLdouble_4fc_elt
a457 1
#define DEST_4FC trans_1_GLdouble_4fc_elt
d460 1
a464 4
#undef TRX_4F
#undef TRX_4FC
#undef TRX_UB
#undef TRX_UI
a469 7
#define TRX_4F(f,n)    (GLfloat) PTR_ELT(f,n)
#define TRX_4FC(f,n)    (GLfloat) PTR_ELT(f,n)
#define TRX_UB(ub,f,n) UNCLAMPED_FLOAT_TO_UBYTE(ub, PTR_ELT(f,n))
#define TRX_UI(f,n)    (GLuint) (GLint) PTR_ELT(f,n)
#define TRX_1F(f,n)    (GLfloat) PTR_ELT(f,n)


d472 2
a474 1
#define DEST_4FC  trans_4_GLfloat_4fc_elt
d480 3
a482 1
#define DEST_4FC  trans_3_GLfloat_4fc_elt
a487 1
#define DEST_4FC trans_2_GLfloat_4fc_elt
d492 1
a492 2
#define DEST_4F  trans_1_GLfloat_4f_elt
#define DEST_4FC  trans_1_GLfloat_4fc_elt
d495 1
d500 1
a501 1
#undef TRX_4FC
d503 1
d507 30
d543 3
d547 2
a548 1
   MEMSET( TAB(_4fc),  0, sizeof(TAB(_4fc)) );
d592 1
d599 19
d620 2
a621 2
			const GLuint *flags,
			const GLuint *elts,
d640 2
a641 2
			const GLuint *flags,
			const GLuint *elts,
d658 42
d702 2
a703 2
                              const GLuint *flags,
                              const GLuint *elts,
d721 7
a727 7
static void _tnl_trans_elt_4fc(GLfloat (*to)[4],
			       const struct gl_client_array *from,
			       const GLuint *flags,
			       const GLuint *elts,
			       GLuint match,
			       GLuint start,
			       GLuint n )
d729 1
a729 1
   _tnl_trans_elt_4fc_tab[from->Size][TYPE_IDX(from->Type)]( to,
d737 1
a738 1
}
d752 1
a752 1
   const GLuint *elts = IM->Elt;
d756 2
a757 2
   if (MESA_VERBOSE & VERBOSE_IMMEDIATE)
      _mesa_debug(ctx, "exec_array_elements %d .. %d\n", start, count);
d759 2
a760 2
   if (translate & VERT_BIT_POS) {
      _tnl_trans_elt_4f( IM->Attrib[VERT_ATTRIB_POS],
d762 1
a762 1
			 flags, elts, (VERT_BIT_ELT|VERT_BIT_POS),
d766 1
a766 1
	 translate |= VERT_BITS_OBJ_234;
d768 1
a768 1
	 translate |= VERT_BITS_OBJ_23;
d772 2
a773 2
   if (translate & VERT_BIT_NORMAL)
      _tnl_trans_elt_4f( IM->Attrib[VERT_ATTRIB_NORMAL],
d775 1
a775 1
			 flags, elts, (VERT_BIT_ELT|VERT_BIT_NORMAL),
d778 1
a778 1
   if (translate & VERT_BIT_EDGEFLAG)
d781 1
a781 1
			  flags, elts, (VERT_BIT_ELT|VERT_BIT_EDGEFLAG),
d784 5
a788 5
   if (translate & VERT_BIT_COLOR0) {
      _tnl_trans_elt_4fc( IM->Attrib[VERT_ATTRIB_COLOR0],
			  &ctx->Array.Color,
			  flags, elts, (VERT_BIT_ELT|VERT_BIT_COLOR0),
			  start, count);
d791 5
a795 5
   if (translate & VERT_BIT_COLOR1) {
      _tnl_trans_elt_4fc( IM->Attrib[VERT_ATTRIB_COLOR1],
			  &ctx->Array.SecondaryColor,
			  flags, elts, (VERT_BIT_ELT|VERT_BIT_COLOR1),
			  start, count);
d798 2
a799 2
   if (translate & VERT_BIT_FOG)
      _tnl_trans_elt_4f( IM->Attrib[VERT_ATTRIB_FOG],
d801 1
a801 1
			 flags, elts, (VERT_BIT_ELT|VERT_BIT_FOG),
d804 1
a804 1
   if (translate & VERT_BIT_INDEX)
d807 1
a807 1
			  flags, elts, (VERT_BIT_ELT|VERT_BIT_INDEX),
d810 1
a810 1
   if (translate & VERT_BITS_TEX_ANY) {
d812 2
a813 2
	 if (translate & VERT_BIT_TEX(i)) {
	    _tnl_trans_elt_4f( IM->Attrib[VERT_ATTRIB_TEX0 + i],
d815 1
a815 1
			       flags, elts, (VERT_BIT_ELT|VERT_BIT_TEX(i)),
d826 1
a826 1
      if (flags[i] & VERT_BIT_ELT) flags[i] |= translate;
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d4 1
a4 1
 * Version:  4.1
d6 1
a6 1
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
d26 1
a26 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 2
#include "context.h"
#include "imports.h"
d41 10
d54 2
a55 2
				   const GLuint *flags,
				   const GLuint *elts,
d63 2
a64 2
				   const GLuint *flags,
				   const GLuint *elts,
d69 18
d90 2
a91 2
				  const GLuint *flags,
				  const GLuint *elts,
d96 13
d111 3
a114 1
static trans_elt_4f_func  _tnl_trans_elt_4fc_tab[5][MAX_TYPES];
d121 2
d136 1
a136 1
#define ARGS   const GLuint *flags, const GLuint *elts, GLuint match, \
d140 1
a140 1
#define CHECK  if ((flags[i]&match) == VERT_BIT_ELT)
d149 1
a150 1
#define TRX_4FC(f,n)   BYTE_TO_FLOAT( PTR_ELT(f,n) )
d152 1
d159 2
a160 1
#define DEST_4FC trans_4_GLbyte_4fc_elt
d166 3
a168 1
#define DEST_4FC trans_3_GLbyte_4fc_elt
a173 1
#define DEST_4FC trans_2_GLbyte_4fc_elt
a178 1
#define DEST_4FC trans_1_GLbyte_4fc_elt
d184 1
a185 1
#undef TRX_4FC
d187 1
d195 1
a196 1
#define TRX_4FC(f,n)	     UBYTE_TO_FLOAT( PTR_ELT(f,n) )
d198 1
d206 1
a206 1
#define DEST_4FC trans_4_GLubyte_4fc_elt
d212 3
a214 1
#define DEST_4FC trans_3_GLubyte_4fc_elt
d220 1
a220 2
#define DEST_4F  trans_1_GLubyte_4f_elt
#define DEST_4FC  trans_1_GLubyte_4fc_elt
a221 1
#define DEST_1UI trans_1_GLubyte_1ui_elt
d226 1
a227 1
#undef TRX_4FC
d229 1
d237 1
a238 1
#define TRX_4FC(f,n)   SHORT_TO_FLOAT( PTR_ELT(f,n) )
d240 1
d247 2
a248 1
#define DEST_4FC trans_4_GLshort_4fc_elt
d254 3
a256 1
#define DEST_4FC trans_3_GLshort_4fc_elt
a261 1
#define DEST_4FC trans_2_GLshort_4fc_elt
a266 1
#define DEST_4FC trans_1_GLshort_4fc_elt
d274 1
a275 1
#undef TRX_4FC
d277 1
d285 1
a286 1
#define TRX_4FC(f,n)   USHORT_TO_FLOAT( PTR_ELT(f,n) )
d288 1
d295 2
a296 1
#define DEST_4FC trans_4_GLushort_4fc_elt
d302 3
a304 1
#define DEST_4FC trans_3_GLushort_4fc_elt
a309 1
#define DEST_4FC trans_2_GLushort_4fc_elt
a314 1
#define DEST_4FC trans_1_GLushort_4fc_elt
d321 1
a322 1
#undef TRX_4FC
d324 1
d332 1
a333 1
#define TRX_4FC(f,n)   INT_TO_FLOAT( PTR_ELT(f,n) )
d335 1
d342 2
a343 1
#define DEST_4FC trans_4_GLint_4fc_elt
d349 3
a351 1
#define DEST_4FC trans_3_GLint_4fc_elt
a356 1
#define DEST_4FC trans_2_GLint_4fc_elt
a361 1
#define DEST_4FC trans_1_GLint_4fc_elt
d369 1
a370 1
#undef TRX_4FC
d372 1
d380 1
a381 1
#define TRX_4FC(f,n)   UINT_TO_FLOAT( PTR_ELT(f,n) )
d383 1
d390 2
a391 1
#define DEST_4FC trans_4_GLuint_4fc_elt
d397 3
a399 1
#define DEST_4FC trans_3_GLuint_4fc_elt
a404 1
#define DEST_4FC trans_2_GLuint_4fc_elt
a409 1
#define DEST_4FC trans_1_GLuint_4fc_elt
d416 1
a417 1
#undef TRX_4FC
d419 1
d427 1
a428 1
#define TRX_4FC(f,n)    (GLfloat) PTR_ELT(f,n)
d430 1
d438 2
a439 1
#define DEST_4FC trans_4_GLdouble_4fc_elt
d445 3
a447 1
#define DEST_4FC trans_3_GLdouble_4fc_elt
a452 1
#define DEST_4FC trans_2_GLdouble_4fc_elt
a457 1
#define DEST_4FC trans_1_GLdouble_4fc_elt
d460 1
a464 4
#undef TRX_4F
#undef TRX_4FC
#undef TRX_UB
#undef TRX_UI
a469 7
#define TRX_4F(f,n)    (GLfloat) PTR_ELT(f,n)
#define TRX_4FC(f,n)    (GLfloat) PTR_ELT(f,n)
#define TRX_UB(ub,f,n) UNCLAMPED_FLOAT_TO_UBYTE(ub, PTR_ELT(f,n))
#define TRX_UI(f,n)    (GLuint) (GLint) PTR_ELT(f,n)
#define TRX_1F(f,n)    (GLfloat) PTR_ELT(f,n)


d472 2
a474 1
#define DEST_4FC  trans_4_GLfloat_4fc_elt
d480 3
a482 1
#define DEST_4FC  trans_3_GLfloat_4fc_elt
a487 1
#define DEST_4FC trans_2_GLfloat_4fc_elt
d492 1
a492 2
#define DEST_4F  trans_1_GLfloat_4f_elt
#define DEST_4FC  trans_1_GLfloat_4fc_elt
d495 1
d500 1
a501 1
#undef TRX_4FC
d503 1
d507 30
d543 3
d547 2
a548 1
   MEMSET( TAB(_4fc),  0, sizeof(TAB(_4fc)) );
d592 1
d599 19
d620 2
a621 2
			const GLuint *flags,
			const GLuint *elts,
d640 2
a641 2
			const GLuint *flags,
			const GLuint *elts,
d658 42
d702 2
a703 2
                              const GLuint *flags,
                              const GLuint *elts,
d721 7
a727 7
static void _tnl_trans_elt_4fc(GLfloat (*to)[4],
			       const struct gl_client_array *from,
			       const GLuint *flags,
			       const GLuint *elts,
			       GLuint match,
			       GLuint start,
			       GLuint n )
d729 1
a729 1
   _tnl_trans_elt_4fc_tab[from->Size][TYPE_IDX(from->Type)]( to,
d737 1
a738 1
}
d752 1
a752 1
   const GLuint *elts = IM->Elt;
d756 2
a757 2
   if (MESA_VERBOSE & VERBOSE_IMMEDIATE)
      _mesa_debug(ctx, "exec_array_elements %d .. %d\n", start, count);
d759 2
a760 2
   if (translate & VERT_BIT_POS) {
      _tnl_trans_elt_4f( IM->Attrib[VERT_ATTRIB_POS],
d762 1
a762 1
			 flags, elts, (VERT_BIT_ELT|VERT_BIT_POS),
d766 1
a766 1
	 translate |= VERT_BITS_OBJ_234;
d768 1
a768 1
	 translate |= VERT_BITS_OBJ_23;
d772 2
a773 2
   if (translate & VERT_BIT_NORMAL)
      _tnl_trans_elt_4f( IM->Attrib[VERT_ATTRIB_NORMAL],
d775 1
a775 1
			 flags, elts, (VERT_BIT_ELT|VERT_BIT_NORMAL),
d778 1
a778 1
   if (translate & VERT_BIT_EDGEFLAG)
d781 1
a781 1
			  flags, elts, (VERT_BIT_ELT|VERT_BIT_EDGEFLAG),
d784 5
a788 5
   if (translate & VERT_BIT_COLOR0) {
      _tnl_trans_elt_4fc( IM->Attrib[VERT_ATTRIB_COLOR0],
			  &ctx->Array.Color,
			  flags, elts, (VERT_BIT_ELT|VERT_BIT_COLOR0),
			  start, count);
d791 5
a795 5
   if (translate & VERT_BIT_COLOR1) {
      _tnl_trans_elt_4fc( IM->Attrib[VERT_ATTRIB_COLOR1],
			  &ctx->Array.SecondaryColor,
			  flags, elts, (VERT_BIT_ELT|VERT_BIT_COLOR1),
			  start, count);
d798 2
a799 2
   if (translate & VERT_BIT_FOG)
      _tnl_trans_elt_4f( IM->Attrib[VERT_ATTRIB_FOG],
d801 1
a801 1
			 flags, elts, (VERT_BIT_ELT|VERT_BIT_FOG),
d804 1
a804 1
   if (translate & VERT_BIT_INDEX)
d807 1
a807 1
			  flags, elts, (VERT_BIT_ELT|VERT_BIT_INDEX),
d810 1
a810 1
   if (translate & VERT_BITS_TEX_ANY) {
d812 2
a813 2
	 if (translate & VERT_BIT_TEX(i)) {
	    _tnl_trans_elt_4f( IM->Attrib[VERT_ATTRIB_TEX0 + i],
d815 1
a815 1
			       flags, elts, (VERT_BIT_ELT|VERT_BIT_TEX(i)),
d826 1
a826 1
      if (flags[i] & VERT_BIT_ELT) flags[i] |= translate;
@

