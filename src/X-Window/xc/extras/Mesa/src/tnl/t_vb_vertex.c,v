head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.29.02;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.16;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.16;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.30.31;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.19;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@
/*
 * Mesa 3-D graphics library
 * Version:  3.5
 *
 * Copyright (C) 1999-2001  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@valinux.com>
 */


#include "glheader.h"
#include "colormac.h"
#include "context.h"
#include "macros.h"
#include "mem.h"
#include "mmath.h"
#include "mtypes.h"

#include "math/m_xform.h"

#include "t_context.h"
#include "t_pipeline.h"



struct vertex_stage_data {
   GLvector4f eye;
   GLvector4f clip;
   GLvector4f proj;
   GLubyte *clipmask;
   GLubyte ormask;
   GLubyte andmask;


   /* Need these because it's difficult to replay the sideeffects
    * analytically.
    */
   GLvector4f *save_eyeptr;
   GLvector4f *save_clipptr;
   GLvector4f *save_projptr;
};

#define VERTEX_STAGE_DATA(stage) ((struct vertex_stage_data *)stage->privatePtr)




/* This function implements cliptesting for user-defined clip planes.
 * The clipping of primitives to these planes is implemented in
 * t_render_clip.h.
 */
#define USER_CLIPTEST(NAME, SZ)					\
static void NAME( GLcontext *ctx,				\
		  GLvector4f *clip,				\
		  GLubyte *clipmask,				\
		  GLubyte *clipormask,				\
		  GLubyte *clipandmask )			\
{								\
   GLuint p;							\
								\
   for (p = 0; p < ctx->Const.MaxClipPlanes; p++)		\
      if (ctx->Transform.ClipEnabled[p]) {			\
	 GLuint nr, i;						\
	 const GLfloat a = ctx->Transform._ClipUserPlane[p][0];	\
	 const GLfloat b = ctx->Transform._ClipUserPlane[p][1];	\
	 const GLfloat c = ctx->Transform._ClipUserPlane[p][2];	\
	 const GLfloat d = ctx->Transform._ClipUserPlane[p][3];	\
         GLfloat *coord = (GLfloat *)clip->data;		\
         GLuint stride = clip->stride;				\
         GLuint count = clip->count;				\
								\
	 for (nr = 0, i = 0 ; i < count ; i++) {		\
	    GLfloat dp = coord[0] * a + coord[1] * b;		\
	    if (SZ > 2) dp += coord[2] * c;			\
	    if (SZ > 3) dp += coord[3] * d; else dp += d;	\
								\
	    if (dp < 0) {					\
	       nr++;						\
	       clipmask[i] |= CLIP_USER_BIT;			\
	    }							\
								\
	    STRIDE_F(coord, stride);				\
	 }							\
								\
	 if (nr > 0) {						\
	    *clipormask |= CLIP_USER_BIT;			\
	    if (nr == count) {					\
	       *clipandmask |= CLIP_USER_BIT;			\
	       return;						\
	    }							\
	 }							\
      }								\
}


USER_CLIPTEST(userclip2, 2)
USER_CLIPTEST(userclip3, 3)
USER_CLIPTEST(userclip4, 4)

static void (*(usercliptab[5]))( GLcontext *,
				 GLvector4f *, GLubyte *,
				 GLubyte *, GLubyte * ) =
{
   0,
   0,
   userclip2,
   userclip3,
   userclip4
};



static GLboolean run_vertex_stage( GLcontext *ctx,
				   struct gl_pipeline_stage *stage )
{
   struct vertex_stage_data *store = (struct vertex_stage_data *)stage->privatePtr;
   TNLcontext *tnl = TNL_CONTEXT(ctx);
   struct vertex_buffer *VB = &tnl->vb;

   if (stage->changed_inputs) {

      if (ctx->_NeedEyeCoords) {
	 /* Separate modelview transformation:
	  * Use combined ModelProject to avoid some depth artifacts
	  */
	 if (ctx->ModelView.type == MATRIX_IDENTITY)
	    VB->EyePtr = VB->ObjPtr;
	 else
	    VB->EyePtr = TransformRaw( &store->eye, &ctx->ModelView,
				       VB->ObjPtr);

	 if (ctx->ProjectionMatrix.type == MATRIX_IDENTITY)
	    VB->ClipPtr = VB->EyePtr;
	 else
	    VB->ClipPtr = TransformRaw( &store->clip, &ctx->_ModelProjectMatrix,
					VB->ObjPtr );
      }
      else {
	 /* Combined modelviewproject transform:
	  */
	 if (ctx->_ModelProjectMatrix.type == MATRIX_IDENTITY)
	    VB->ClipPtr = VB->ObjPtr;
	 else
	    VB->ClipPtr = TransformRaw( &store->clip,
                                        &ctx->_ModelProjectMatrix,
					VB->ObjPtr );
      }

      /* Drivers expect this to be clean to element 4...
       */
      if (VB->ClipPtr->size < 4) {
	 if (VB->ClipPtr->flags & VEC_NOT_WRITEABLE) {
	    ASSERT(VB->ClipPtr == VB->ObjPtr);
	    VB->import_data( ctx, VERT_OBJ, VEC_NOT_WRITEABLE );
	    VB->ClipPtr = VB->ObjPtr;
	 }
	 if (VB->ClipPtr->size == 2)
	    _mesa_vector4f_clean_elem( VB->ClipPtr, VB->Count, 2 );
	 _mesa_vector4f_clean_elem( VB->ClipPtr, VB->Count, 3 );
      }

      /* Cliptest and perspective divide.  Clip functions must clear
       * the clipmask.
       */
      store->ormask = 0;
      store->andmask = CLIP_ALL_BITS;

      if (tnl->NeedProjCoords) {
	 VB->ProjectedClipPtr =
	    _mesa_clip_tab[VB->ClipPtr->size]( VB->ClipPtr,
                                               &store->proj,
                                               store->clipmask,
                                               &store->ormask,
                                               &store->andmask );

      } else {
	 VB->ProjectedClipPtr = 0;
	 _mesa_clip_np_tab[VB->ClipPtr->size]( VB->ClipPtr,
                                               0,
                                               store->clipmask,
                                               &store->ormask,
                                               &store->andmask );
      }

      if (store->andmask)
	 return GL_FALSE;


      /* Test userclip planes.  This contributes to VB->ClipMask, so
       * is essentially required to be in this stage.
       */
      if (ctx->Transform._AnyClip) {
	 usercliptab[VB->ClipPtr->size]( ctx,
					 VB->ClipPtr,
					 store->clipmask,
					 &store->ormask,
					 &store->andmask );

	 if (store->andmask)
	    return GL_FALSE;
      }

      VB->ClipOrMask = store->ormask;
      VB->ClipMask = store->clipmask;

      if (VB->ClipPtr == VB->ObjPtr && (VB->importable_data & VERT_OBJ))
	 VB->importable_data |= VERT_CLIP;

      store->save_eyeptr = VB->EyePtr;
      store->save_clipptr = VB->ClipPtr;
      store->save_projptr = VB->ProjectedClipPtr;
   }
   else {
      /* Replay the sideeffects.
       */
      VB->EyePtr = store->save_eyeptr;
      VB->ClipPtr = store->save_clipptr;
      VB->ProjectedClipPtr = store->save_projptr;
      VB->ClipMask = store->clipmask;
      VB->ClipOrMask = store->ormask;
      if (VB->ClipPtr == VB->ObjPtr && (VB->importable_data & VERT_OBJ))
	 VB->importable_data |= VERT_CLIP;
      if (store->andmask)
	 return GL_FALSE;
   }

   return GL_TRUE;
}


static void check_vertex( GLcontext *ctx, struct gl_pipeline_stage *stage )
{
   (void) ctx;
   (void) stage;
}

static GLboolean init_vertex_stage( GLcontext *ctx,
				    struct gl_pipeline_stage *stage )
{
   struct vertex_buffer *VB = &TNL_CONTEXT(ctx)->vb;
   struct vertex_stage_data *store;
   GLuint size = VB->Size;

   stage->privatePtr = CALLOC(sizeof(*store));
   store = VERTEX_STAGE_DATA(stage);
   if (!store)
      return GL_FALSE;

   _mesa_vector4f_alloc( &store->eye, 0, size, 32 );
   _mesa_vector4f_alloc( &store->clip, 0, size, 32 );
   _mesa_vector4f_alloc( &store->proj, 0, size, 32 );

   store->clipmask = (GLubyte *) ALIGN_MALLOC(sizeof(GLubyte)*size, 32 );

   if (!store->clipmask ||
       !store->eye.data ||
       !store->clip.data ||
       !store->proj.data)
      return GL_FALSE;

   /* Now run the stage.
    */
   stage->run = run_vertex_stage;
   return stage->run( ctx, stage );
}

static void dtr( struct gl_pipeline_stage *stage )
{
   struct vertex_stage_data *store = VERTEX_STAGE_DATA(stage);

   if (store) {
      _mesa_vector4f_free( &store->eye );
      _mesa_vector4f_free( &store->clip );
      _mesa_vector4f_free( &store->proj );
      ALIGN_FREE( store->clipmask );
      FREE(store);
      stage->privatePtr = NULL;
      stage->run = init_vertex_stage;
   }
}


const struct gl_pipeline_stage _tnl_vertex_transform_stage =
{
   "modelview/project/cliptest/divide",
   0,				/* re-check -- always on */
   _MESA_NEW_NEED_EYE_COORDS |
   _NEW_MODELVIEW|
   _NEW_PROJECTION|
   _NEW_TRANSFORM,		/* re-run */
   GL_TRUE,			/* active */
   VERT_OBJ,		/* inputs */
   VERT_EYE|VERT_CLIP,		/* outputs */
   0, 0,			/* changed_inputs, private */
   dtr,				/* destructor */
   check_vertex,		/* check */
   init_vertex_stage		/* run -- initially set to init */
};
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d4 1
a4 1
 * Version:  5.0
d26 1
a26 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
d34 1
a34 1
#include "imports.h"
d59 1
a59 1
   GLvector4f *save_ndcptr;
d81 1
a81 1
      if (ctx->Transform.ClipPlanesEnabled & (1 << p)) {	\
a138 2
   ASSERT(!ctx->VertexProgram.Enabled);

d145 1
a145 1
	 if (ctx->ModelviewMatrixStack.Top->type == MATRIX_IDENTITY)
d148 1
a148 2
	    VB->EyePtr = TransformRaw( &store->eye,
                                       ctx->ModelviewMatrixStack.Top,
d151 1
a151 1
	 if (ctx->ProjectionMatrixStack.Top->type == MATRIX_IDENTITY)
d154 1
a154 2
	    VB->ClipPtr = TransformRaw( &store->clip,
                                        &ctx->_ModelProjectMatrix,
d173 1
a173 1
	    VB->import_data( ctx, VERT_BIT_POS, VEC_NOT_WRITEABLE );
d187 2
a188 2
      if (tnl->NeedNdcCoords) {
	 VB->NdcPtr =
d194 3
a196 3
      }
      else {
	 VB->NdcPtr = 0;
d211 1
a211 1
      if (ctx->Transform.ClipPlanesEnabled) {
d225 2
a226 2
      if (VB->ClipPtr == VB->ObjPtr && (VB->importable_data & VERT_BIT_POS))
	 VB->importable_data |= VERT_BIT_CLIP;
d230 1
a230 1
      store->save_ndcptr = VB->NdcPtr;
d237 1
a237 1
      VB->NdcPtr = store->save_ndcptr;
d240 2
a241 2
      if (VB->ClipPtr == VB->ObjPtr && (VB->importable_data & VERT_BIT_POS))
	 VB->importable_data |= VERT_BIT_CLIP;
d252 2
a253 1
   stage->active = !ctx->VertexProgram.Enabled;
d305 2
a306 2
   _NEW_PROGRAM,                /* check_state: only care about vertex prog */
   _MESA_NEW_NEED_EYE_COORDS |  /* run_state: when to invalidate / re-run */
d309 1
a309 2
   _NEW_PROGRAM|
   _NEW_TRANSFORM,
d311 3
a313 4
   VERT_BIT_POS,		/* inputs */
   VERT_BIT_EYE|VERT_BIT_CLIP,		/* outputs */
   0,				/* changed_inputs */
   NULL,			/* private data */
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d4 1
a4 1
 * Version:  5.0
d26 1
a26 1
 *    Keith Whitwell <keith@@tungstengraphics.com>
d34 1
a34 1
#include "imports.h"
d59 1
a59 1
   GLvector4f *save_ndcptr;
d81 1
a81 1
      if (ctx->Transform.ClipPlanesEnabled & (1 << p)) {	\
a138 2
   ASSERT(!ctx->VertexProgram.Enabled);

d145 1
a145 1
	 if (ctx->ModelviewMatrixStack.Top->type == MATRIX_IDENTITY)
d148 1
a148 2
	    VB->EyePtr = TransformRaw( &store->eye,
                                       ctx->ModelviewMatrixStack.Top,
d151 1
a151 1
	 if (ctx->ProjectionMatrixStack.Top->type == MATRIX_IDENTITY)
d154 1
a154 2
	    VB->ClipPtr = TransformRaw( &store->clip,
                                        &ctx->_ModelProjectMatrix,
d173 1
a173 1
	    VB->import_data( ctx, VERT_BIT_POS, VEC_NOT_WRITEABLE );
d187 2
a188 2
      if (tnl->NeedNdcCoords) {
	 VB->NdcPtr =
d194 3
a196 3
      }
      else {
	 VB->NdcPtr = 0;
d211 1
a211 1
      if (ctx->Transform.ClipPlanesEnabled) {
d225 2
a226 2
      if (VB->ClipPtr == VB->ObjPtr && (VB->importable_data & VERT_BIT_POS))
	 VB->importable_data |= VERT_BIT_CLIP;
d230 1
a230 1
      store->save_ndcptr = VB->NdcPtr;
d237 1
a237 1
      VB->NdcPtr = store->save_ndcptr;
d240 2
a241 2
      if (VB->ClipPtr == VB->ObjPtr && (VB->importable_data & VERT_BIT_POS))
	 VB->importable_data |= VERT_BIT_CLIP;
d252 2
a253 1
   stage->active = !ctx->VertexProgram.Enabled;
d305 2
a306 2
   _NEW_PROGRAM,                /* check_state: only care about vertex prog */
   _MESA_NEW_NEED_EYE_COORDS |  /* run_state: when to invalidate / re-run */
d309 1
a309 2
   _NEW_PROGRAM|
   _NEW_TRANSFORM,
d311 3
a313 4
   VERT_BIT_POS,		/* inputs */
   VERT_BIT_EYE|VERT_BIT_CLIP,		/* outputs */
   0,				/* changed_inputs */
   NULL,			/* private data */
@

