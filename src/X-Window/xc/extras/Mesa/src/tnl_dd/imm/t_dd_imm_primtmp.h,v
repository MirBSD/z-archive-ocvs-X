head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.29.03;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.16;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.16;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.30.39;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.20;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@/* $Id: t_dd_imm_primtmp.h,v 1.1 2003/04/08 18:20:16 tg Exp $ */

/*
 * Mesa 3-D graphics library
 * Version:  3.5
 *
 * Copyright (C) 1999-2001  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keithw@@valinux.com>
 *    Gareth Hughes <gareth@@valinux.com>
 */

/* Template for immediate mode vertices. 
 *
 * Probably instantiate once for each vertex format used:
 *   - TINY_VERTICES
 *   - TEX0_VERTICES
 *   - TEX1_VERTICES
 *   - PTEX_VERTICES
 *
 * Have to handle TEX->PTEX transition somehow.
 */

#define DBG 0



/* =============================================================
 * GL_POINTS
 */

static void TAG(flush_point_0)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   if ( !v0->mask ) {
      LOCAL_VARS;
      DRAW_POINT( v0 );
   }
}


/* =============================================================
 * GL_LINES
 */

static void TAG(flush_line_1)( GLcontext *ctx, TNL_VERTEX *v0 );

static void TAG(flush_line_0)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   FLUSH_VERTEX = TAG(flush_line_1);
   ACTIVE_VERTEX = IMM_VERTICES( 1 );
}

static void TAG(flush_line_1)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   TNL_VERTEX *v1 = v0 - 1;
   ACTIVE_VERTEX = IMM_VERTICES( 0 );
   FLUSH_VERTEX = TAG(flush_line_0);
   if (FALLBACK_OR_CLIPPING) 
      CLIP_OR_DRAW_LINE( ctx, v1, v0 ); 
   else
      DRAW_LINE( ctx, v1, v0 ); 
}


/* =============================================================
 * GL_LINE_LOOP
 */

static void TAG(flush_line_loop_2)( GLcontext *ctx, TNL_VERTEX *v0 );
static void TAG(flush_line_loop_1)( GLcontext *ctx, TNL_VERTEX *v0 );

static void TAG(flush_line_loop_0)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;

   ACTIVE_VERTEX = v0 + 1;
   FLUSH_VERTEX = TAG(flush_line_loop_1);
}

#define DRAW_LINELOOP_LINE( a, b )			\
   if (!HAVE_LINE_STRIP || FALLBACK_OR_CLIPPING) {	\
      CLIP_OR_DRAW_LINE( ctx, a, b );			\
   } else if (EXTEND_PRIM( 1 )) {			\
      EMIT_VERTEX( b );					\
   } else {						\
      BEGIN_PRIM( GL_LINE_STRIP, 2 ); 			\
      EMIT_VERTEX( a );					\
      EMIT_VERTEX( b );      				\
   }

static void TAG(flush_line_loop_1)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   TNL_VERTEX *v1 = v0 - 1;
   ACTIVE_VERTEX = v1;
   FLUSH_VERTEX = TAG(flush_line_loop_2);
   DRAW_LINELOOP_LINE( v1, v0 );
}

static void TAG(flush_line_loop_2)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   TNL_VERTEX *v1 = v0 + 1;
   ACTIVE_VERTEX = v1;
   FLUSH_VERTEX = TAG(flush_line_loop_1);
   DRAW_LINELOOP_LINE( v1, v0 );
}

static void TAG(end_line_loop)( GLcontext *ctx )
{
   LOCAL_VARS;

   if ( FLUSH_VERTEX != TAG(flush_line_loop_0) ) {
      TNL_VERTEX *v1 = ACTIVE_VERTEX;
      TNL_VERTEX *v0 = IMM_VERTICES( 0 );
      DRAW_LINELOOP_LINE( v1, v0 );
   }
}



/* =============================================================
 * GL_LINE_STRIP
 */

static void TAG(flush_line_strip_2)( GLcontext *ctx, TNL_VERTEX *v0 );
static void TAG(flush_line_strip_1)( GLcontext *ctx, TNL_VERTEX *v0 );

static void TAG(flush_line_strip_0)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;

   ACTIVE_VERTEX = v0 + 1;
   FLUSH_VERTEX = TAG(flush_line_strip_0b);
}


static void TAG(flush_line_strip_1)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   TNL_VERTEX *v1 = v0 - 1;

   ACTIVE_VERTEX = v1;
   FLUSH_VERTEX = TAG(flush_line_strip_2);

   if (!HAVE_LINE_STRIP || FALLBACK_OR_CLIPPING)
      CLIP_OR_DRAW_LINE( ctx, v1, v0 );
   else if (EXTEND_PRIM( 1 )) {
      EMIT_VERTEX( v0 );
   } else {
      BEGIN_PRIM( GL_LINE_STRIP, 2 ); 
      EMIT_VERTEX( v1 );
      EMIT_VERTEX( v0 );      
   }      
}

static void TAG(flush_line_strip_2)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   TNL_VERTEX *v1 = v0 + 1;

   ACTIVE_VERTEX = v1;
   FLUSH_VERTEX = TAG(flush_line_strip_1);

   if (!HAVE_LINE_STRIP || FALLBACK_OR_CLIPPING)
      CLIP_OR_DRAW_LINE( ctx, v1, v0 );
   else if (EXTEND_PRIM( 1 )) {
      EMIT_VERTEX( v0 );
   } else {
      BEGIN_PRIM( GL_LINE_STRIP, 2 ); 
      EMIT_VERTEX( v1 );
      EMIT_VERTEX( v0 );      
   }      
}



/* =============================================================
 * GL_TRIANGLES
 */

static void TAG(flush_triangle_2)( GLcontext *ctx, TNL_VERTEX *v0 );
static void TAG(flush_triangle_1)( GLcontext *ctx, TNL_VERTEX *v0 );

static void TAG(flush_triangle_0)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;

   if ( DBG ) fprintf( stderr, __FUNCTION__ "\n" );

   ACTIVE_VERTEX = v0 + 1;
   FLUSH_VERTEX = TAG(flush_triangle_1);
   BEGIN_PRIM( GL_TRIANGLES, 0 );
}

static void TAG(flush_triangle_1)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;

   if ( DBG ) fprintf( stderr, __FUNCTION__ "\n" );

   ACTIVE_VERTEX = v0 + 1;
   FLUSH_VERTEX = TAG(flush_triangle_2);
}

static void TAG(flush_triangle_2)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   TNL_VERTEX *v2 = v0 - 2;
   TNL_VERTEX *v1 = v0 - 1;

   if ( DBG ) fprintf( stderr, __FUNCTION__ "\n" );

   ACTIVE_VERTEX = v2;
   FLUSH_VERTEX = TAG(flush_triangle_0);

   /* nothing gained by trying to emit as hw primitives -- that
    * happens normally in this case.  
    */
   if (FALLBACK_OR_CLIPPING)
      CLIP_OR_DRAW_TRI( ctx, v2, v1, v0 );
   else
      DRAW_TRI( ctx, v2, v1, v0 );
}




/* =============================================================
 * GL_TRIANGLE_STRIP
 */

static void TAG(flush_tri_strip_3)( GLcontext *ctx, TNL_VERTEX *v0 );
static void TAG(flush_tri_strip_2)( GLcontext *ctx, TNL_VERTEX *v0 );
static void TAG(flush_tri_strip_1)( GLcontext *ctx, TNL_VERTEX *v0 );

static void TAG(flush_tri_strip_0)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   ACTIVE_VERTEX = IMM_VERTICES( 1 );
   FLUSH_VERTEX = TAG(flush_tri_strip_1);
}

static void TAG(flush_tri_strip_1)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   ACTIVE_VERTEX = IMM_VERTICES( 2 );
   FLUSH_VERTEX = TAG(flush_tri_strip_2);
}

#define DO_TRISTRIP_TRI( vert0, vert1 )				\
   if (!HAVE_TRI_STRIP || FALLBACK_OR_CLIPPING) {	\
      TNL_VERTEX *v2 = IMM_VERTICES( vert0 );			\
      TNL_VERTEX *v1 = IMM_VERTICES( vert1 );			\
      TAG(draw_tri)( ctx, v2, v1, v0 );				\
   } else if (EXTEND_PRIM( 1 )) {				\
      EMIT_VERTEX( v0 );					\
   } else {							\
      TNL_VERTEX *v2 = IMM_VERTICES( vert0 );			\
      TNL_VERTEX *v1 = IMM_VERTICES( vert1 );			\
      BEGIN_PRIM( GL_TRIANGLE_STRIP, 3 ); 			\
      EMIT_VERTEX( v2 );					\
      EMIT_VERTEX( v1 );      					\
      EMIT_VERTEX( v0 );      					\
   }      

static void TAG(flush_tri_strip_2)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   FLUSH_VERTEX = TAG(flush_tri_strip_3);
   ACTIVE_VERTEX = IMM_VERTICES( 3 );
   DO_TRISTRIP_TRI( 0, 1 );
}

static void TAG(flush_tri_strip_3)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   FLUSH_VERTEX = TAG(flush_tri_strip_4);
   ACTIVE_VERTEX = IMM_VERTICES( 0 );
   DO_TRISTRIP_TRI( 1, 2 );
}

static void TAG(flush_tri_strip_4)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   FLUSH_VERTEX = TAG(flush_tri_strip_5);
   ACTIVE_VERTEX = IMM_VERTICES( 1 );
   DO_TRISTRIP_TRI( 2, 3 );
}

static void TAG(flush_tri_strip_5)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   FLUSH_VERTEX = TAG(flush_tri_strip_2);
   ACTIVE_VERTEX = IMM_VERTICES( 2 );
   DO_TRISTRIP_TRI( 0, 3 );
}



/* =============================================================
 * GL_TRIANGLE_FAN
 */

static void TAG(flush_tri_fan_2)( GLcontext *ctx, TNL_VERTEX *v0 );
static void TAG(flush_tri_fan_1)( GLcontext *ctx, TNL_VERTEX *v0 );

static void TAG(flush_tri_fan_0)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;

   ACTIVE_VERTEX = v0 + 1;
   FLUSH_VERTEX = TAG(flush_tri_fan_1);
}

static void TAG(flush_tri_fan_1)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;

   ACTIVE_VERTEX = v0 + 1;
   FLUSH_VERTEX = TAG(flush_tri_fan_2);
}

#define DO_TRIFAN_TRI( vert0, vert1 )				\
   if (!HAVE_TRI_FAN || FALLBACK_OR_CLIPPING) {	\
      TNL_VERTEX *v2 = IMM_VERTICES( vert0 );			\
      TNL_VERTEX *v1 = IMM_VERTICES( vert1 );			\
      TAG(draw_tri)( ctx, v2, v1, v0 );				\
   } else if (EXTEND_PRIM( 1 )) {				\
      EMIT_VERTEX( v0 );					\
   } else {							\
      TNL_VERTEX *v2 = IMM_VERTICES( vert0 );			\
      TNL_VERTEX *v1 = IMM_VERTICES( vert1 );			\
      BEGIN_PRIM( GL_TRIANGLE_FAN, 3 ); 			\
      EMIT_VERTEX( v2 );					\
      EMIT_VERTEX( v1 );      					\
      EMIT_VERTEX( v0 );      					\
   }      

static void TAG(flush_tri_fan_2)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   ACTIVE_VERTEX = IMM_VERTICES( 1 );
   FLUSH_VERTEX = TAG(flush_tri_fan_3 );
   DO_TRIFAN_TRI( 0, 1 );
}

static void TAG(flush_tri_fan_3)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   ACTIVE_VERTEX = IMM_VERTICES( 2 );
   FLUSH_VERTEX = TAG(flush_tri_fan_2 );
   DO_TRIFAN_TRI( 0, 2 );
}



/* =============================================================
 * GL_QUADS
 */

static void TAG(flush_quad_3)( GLcontext *ctx, TNL_VERTEX *v0 );
static void TAG(flush_quad_2)( GLcontext *ctx, TNL_VERTEX *v0 );
static void TAG(flush_quad_1)( GLcontext *ctx, TNL_VERTEX *v0 );

static void TAG(flush_quad_0)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   IMM_VERTEX( v0 ) = v0 + 1;
   FLUSH_VERTEX = TAG(flush_quad_1);
}

static void TAG(flush_quad_1)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   IMM_VERTEX( v0 ) = v0 + 1;
   FLUSH_VERTEX = TAG(flush_quad_2);
}

static void TAG(flush_quad_2)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   IMM_VERTEX( v0 ) = v0 + 1;
   FLUSH_VERTEX = TAG(flush_quad_3);
}

static void TAG(flush_quad_3)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   TNL_VERTEX *v3 = v0 - 3;
   TNL_VERTEX *v2 = v0 - 2;
   TNL_VERTEX *v1 = v0 - 1;

   IMM_VERTEX( v0 ) = v3;
   FLUSH_VERTEX = TAG(flush_quad_0);

   if (!HAVE_HW_QUADS || FALLBACK_OR_CLIPPING) {
      CLIP_OR_DRAW_TRI( ctx, v3, v2, v0 );
      CLIP_OR_DRAW_TRI( ctx, v2, v1, v0 );
   } else {
      EXTEND_PRIM_NF( GL_QUADS, 4 );
      EMIT_VERTEX( v3 );
      EMIT_VERTEX( v2 );
      EMIT_VERTEX( v1 );      
      EMIT_VERTEX( v0 );      
   }
}



/* =============================================================
 * GL_QUAD_STRIP
 */

static void TAG(flush_quad_strip_3)( GLcontext *ctx, TNL_VERTEX *v0 );
static void TAG(flush_quad_strip_2)( GLcontext *ctx, TNL_VERTEX *v0 );
static void TAG(flush_quad_strip_1)( GLcontext *ctx, TNL_VERTEX *v0 );

static void TAG(flush_quad_strip_0)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;

   IMM_VERTEX( v3 ) = v0;
   IMM_VERTEX( v0 ) = v0 + 1;
   FLUSH_VERTEX = TAG(flush_quad_strip_1);
}

static void TAG(flush_quad_strip_1)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;

   IMM_VERTEX( v2 ) = v0;
   IMM_VERTEX( v0 ) = v0 + 1;
   FLUSH_VERTEX = TAG(flush_quad_strip_2);
}

static void TAG(flush_quad_strip_2)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;

   IMM_VERTEX( v1 ) = v0;
   IMM_VERTEX( v0 ) = v0 + 1;
   FLUSH_VERTEX = TAG(flush_quad_strip_3);
}

static void TAG(flush_quad_strip_3)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   TNL_VERTEX *v3 = IMM_VERTEX( v3 );
   TNL_VERTEX *v2 = IMM_VERTEX( v2 );
   TNL_VERTEX *v1 = IMM_VERTEX( v1 );

   IMM_VERTEX( v0 ) = v3;
   IMM_VERTEX( v2 ) = v0;
   IMM_VERTEX( v3 ) = v1;
   FLUSH_VERTEX = TAG(flush_quad_strip_2);

   if (FALLBACK_OR_CLIPPING) {
      CLIP_OR_DRAW_TRI( ctx, v3, v2, v0 );
      CLIP_OR_DRAW_TRI( ctx, v2, v1, v0 );
   } else {
      DRAW_TRI( ctx, v3, v2, v0 );
      DRAW_TRI( ctx, v2, v1, v0 );
   }
}



/* =============================================================
 * GL_POLYGON
 */

static void TAG(flush_poly_2)( GLcontext *ctx, TNL_VERTEX *v0 );
static void TAG(flush_poly_1)( GLcontext *ctx, TNL_VERTEX *v0 );

static void TAG(flush_poly_0)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   ACTIVE_VERTEX = IMM_VERTICES( 1 );
   FLUSH_VERTEX = TAG(flush_poly_1);
}

static void TAG(flush_poly_1)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   ACTIVE_VERTEX = IMM_VERTICES( 2 );
   FLUSH_VERTEX = TAG(flush_poly_2);
}

#define DO_POLY_TRI( vert0, vert1 )				\
   if (!HAVE_POLYGONS || FALLBACK_OR_CLIPPING) {	\
      TNL_VERTEX *v2 = IMM_VERTICES( vert0 );			\
      TNL_VERTEX *v1 = IMM_VERTICES( vert1 );			\
      TAG(draw_tri)( ctx, v1, v0, v2 );				\
   } else if (EXTEND_PRIM( 1 )) {				\
      EMIT_VERTEX( v0 );					\
   } else {							\
      TNL_VERTEX *v2 = IMM_VERTICES( vert0 );			\
      TNL_VERTEX *v1 = IMM_VERTICES( vert1 );			\
      BEGIN_PRIM( GL_POLYGON, 3 );				\
      EMIT_VERTEX( v2 );					\
      EMIT_VERTEX( v1 );					\
      EMIT_VERTEX( v0 );					\
   }      

static void TAG(flush_poly_2)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   ACTIVE_VERTEX = IMM_VERTICES( 1 );
   FLUSH_VERTEX = TAG(flush_poly_3);
   DO_POLY_TRI( 0, 1 );
}

static void TAG(flush_poly_3)( GLcontext *ctx, TNL_VERTEX *v0 )
{
   LOCAL_VARS;
   ACTIVE_VERTEX = IMM_VERTICES( 2 );
   FLUSH_VERTEX = TAG(flush_poly_2);
   DO_POLY_TRI( 0, 2 );
}


void (*TAG(flush_tab)[GL_POLYGON+1])( GLcontext *, TNL_VERTEX * ) =
{
   TAG(flush_point),
   TAG(flush_line_0),
   TAG(flush_line_loop_0),
   TAG(flush_line_strip_0),
   TAG(flush_triangle_0),
   TAG(flush_tri_strip_0),
   TAG(flush_tri_fan_0),
   TAG(flush_quad_0),
   TAG(flush_quad_strip_0),
   TAG(flush_poly_0),
};


#ifndef PRESERVE_PRIM_DEFS
#undef LOCAL_VARS
#undef GET_INTERP_FUNC
#undef IMM_VERTEX
#undef IMM_VERTICES
#undef FLUSH_VERTEX
#endif
#undef PRESERVE_PRIM_DEFS
#undef EXTEND_PRIM
#undef EMIT_VERTEX
#undef EMIT_VERTEX_TRI
#undef EMIT_VERTEX_LINE
#undef EMIT_VERTEX_POINT
#undef TAG
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $Id: t_dd_imm_primtmp.h,v 1.2 2003/04/01 22:36:10 matthieu Exp $ */
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d1 1
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d1 1
@

