head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.28.17;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.20.00.58;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.00.58;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.20.02;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.17.28.48;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.04.42;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@
/*
 * Mesa 3-D graphics library
 * Version:  3.3
 * 
 * Copyright (C) 1999-2000  Brian Paul   All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


#ifdef PC_HEADER
#include "all.h"
#else
#include "glheader.h"
#include "enums.h"
#include "context.h"
#include "hint.h"
#include "state.h"
#endif



void
_mesa_Hint( GLenum target, GLenum mode )
{
   GET_CURRENT_CONTEXT(ctx);
   (void) _mesa_try_Hint( ctx, target, mode );
}


GLboolean
_mesa_try_Hint( GLcontext *ctx, GLenum target, GLenum mode )
{
   ASSERT_OUTSIDE_BEGIN_END_AND_FLUSH_WITH_RETVAL(ctx, "glHint", GL_FALSE);

   if (MESA_VERBOSE & VERBOSE_API)
      fprintf(stderr, "glHint %s %d\n", gl_lookup_enum_by_nr(target), mode);

   if (mode != GL_NICEST && mode != GL_FASTEST && mode != GL_DONT_CARE) {
      gl_error(ctx, GL_INVALID_ENUM, "glHint(mode)");
      return GL_FALSE;
   }

   switch (target) {
      case GL_FOG_HINT:
         ctx->Hint.Fog = mode;
         break;
      case GL_LINE_SMOOTH_HINT:
         ctx->Hint.LineSmooth = mode;
         break;
      case GL_PERSPECTIVE_CORRECTION_HINT:
         ctx->Hint.PerspectiveCorrection = mode;
         break;
      case GL_POINT_SMOOTH_HINT:
         ctx->Hint.PointSmooth = mode;
         break;
      case GL_POLYGON_SMOOTH_HINT:
         ctx->Hint.PolygonSmooth = mode;
         break;
      case GL_PREFER_DOUBLEBUFFER_HINT_PGI:
      case GL_STRICT_DEPTHFUNC_HINT_PGI:
         break;
      case GL_STRICT_LIGHTING_HINT_PGI:
         ctx->Hint.StrictLighting = mode;
         break;
      case GL_STRICT_SCISSOR_HINT_PGI:
      case GL_FULL_STIPPLE_HINT_PGI:
      case GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI:
      case GL_NATIVE_GRAPHICS_END_HINT_PGI:
      case GL_CONSERVE_MEMORY_HINT_PGI:
      case GL_RECLAIM_MEMORY_HINT_PGI:
         break;
      case GL_ALWAYS_FAST_HINT_PGI:
         if (mode) {
            ctx->Hint.AllowDrawWin = GL_TRUE;
            ctx->Hint.AllowDrawFrg = GL_FALSE;
            ctx->Hint.AllowDrawMem = GL_FALSE;
         } else {
            ctx->Hint.AllowDrawWin = GL_TRUE;
            ctx->Hint.AllowDrawFrg = GL_TRUE;
            ctx->Hint.AllowDrawMem = GL_TRUE;
         } 
         break;
      case GL_ALWAYS_SOFT_HINT_PGI:
         ctx->Hint.AllowDrawWin = GL_TRUE;
         ctx->Hint.AllowDrawFrg = GL_TRUE;
         ctx->Hint.AllowDrawMem = GL_TRUE;
         break;
      case GL_ALLOW_DRAW_OBJ_HINT_PGI:
         break;
      case GL_ALLOW_DRAW_WIN_HINT_PGI:
         ctx->Hint.AllowDrawWin = mode;
         break;
      case GL_ALLOW_DRAW_FRG_HINT_PGI:
         ctx->Hint.AllowDrawFrg = mode;
         break;
      case GL_ALLOW_DRAW_MEM_HINT_PGI:
         ctx->Hint.AllowDrawMem = mode;
         break;
      case GL_CLIP_NEAR_HINT_PGI:
      case GL_CLIP_FAR_HINT_PGI:
      case GL_WIDE_LINE_HINT_PGI:
      case GL_BACK_NORMALS_HINT_PGI:
      case GL_NATIVE_GRAPHICS_HANDLE_PGI:
         break;

      /* GL_EXT_clip_volume_hint */
      case GL_CLIP_VOLUME_CLIPPING_HINT_EXT:
         ctx->Hint.ClipVolumeClipping = mode;
         break;

      /* GL_ARB_texture_compression */
      case GL_TEXTURE_COMPRESSION_HINT_ARB:
         if (ctx->Extensions.HaveTextureCompression) {
            ctx->Hint.TextureCompression = mode;
         }
         else {
            gl_error(ctx, GL_INVALID_ENUM, "glHint(target)");
         }
         break;

      default:
         gl_error(ctx, GL_INVALID_ENUM, "glHint(target)");
         return GL_FALSE;
   }

   ctx->NewState |= NEW_ALL;   /* just to be safe */

   if (ctx->Driver.Hint) {
      (*ctx->Driver.Hint)( ctx, target, mode );
   }
   
   return GL_TRUE;
}


void
_mesa_HintPGI( GLenum target, GLint mode )
{
   GET_CURRENT_CONTEXT(ctx);
   ASSERT_OUTSIDE_BEGIN_END_AND_FLUSH(ctx, "glHintPGI");

   if (MESA_VERBOSE & VERBOSE_API)
      fprintf(stderr, "glHintPGI %s %d\n", gl_lookup_enum_by_nr(target), mode);

   if (mode != GL_NICEST && mode != GL_FASTEST && mode != GL_DONT_CARE) {
      gl_error(ctx, GL_INVALID_ENUM, "glHintPGI(mode)");
      return;
   }

   switch (target) {
      case GL_PREFER_DOUBLEBUFFER_HINT_PGI:
      case GL_STRICT_DEPTHFUNC_HINT_PGI:
      case GL_STRICT_LIGHTING_HINT_PGI:
      case GL_STRICT_SCISSOR_HINT_PGI:
      case GL_FULL_STIPPLE_HINT_PGI:
      case GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI:
      case GL_NATIVE_GRAPHICS_END_HINT_PGI:
      case GL_CONSERVE_MEMORY_HINT_PGI:
      case GL_RECLAIM_MEMORY_HINT_PGI:
      case GL_ALWAYS_FAST_HINT_PGI:
      case GL_ALWAYS_SOFT_HINT_PGI:
      case GL_ALLOW_DRAW_OBJ_HINT_PGI:
      case GL_ALLOW_DRAW_WIN_HINT_PGI:
      case GL_ALLOW_DRAW_FRG_HINT_PGI:
      case GL_ALLOW_DRAW_MEM_HINT_PGI:
      case GL_CLIP_NEAR_HINT_PGI:
      case GL_CLIP_FAR_HINT_PGI:
      case GL_WIDE_LINE_HINT_PGI:
      case GL_BACK_NORMALS_HINT_PGI:
      case GL_NATIVE_GRAPHICS_HANDLE_PGI:
         (void) _mesa_try_Hint(ctx, target, (GLenum) mode);
         break;
      default:
         gl_error( ctx, GL_INVALID_ENUM, "glHintPGI(target)" );
         return;
   }
}

   
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d4 4
a7 4
 * Version:  4.1
 *
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
 *
d14 1
a14 1
 *
d17 1
a17 1
 *
d27 3
d34 2
a35 1
#include "imports.h"
d43 8
a50 1
   ASSERT_OUTSIDE_BEGIN_END(ctx);
d53 1
a53 2
      _mesa_debug(ctx, "glHint %s %d\n",
                  _mesa_lookup_enum_by_nr(target), mode);
d56 2
a57 2
      _mesa_error(ctx, GL_INVALID_ENUM, "glHint(mode)");
      return;
a61 3
         if (ctx->Hint.Fog == mode)
	    return;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
a64 3
         if (ctx->Hint.LineSmooth == mode)
	    return;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
a67 3
         if (ctx->Hint.PerspectiveCorrection == mode)
	    return;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
a70 3
         if (ctx->Hint.PointSmooth == mode)
	    return;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
a73 3
         if (ctx->Hint.PolygonSmooth == mode)
	    return;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
d76 46
a124 3
         if (ctx->Hint.ClipVolumeClipping == mode)
	    return;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
d130 2
a131 3
         if (!ctx->Extensions.ARB_texture_compression) {
            _mesa_error(ctx, GL_INVALID_ENUM, "glHint(target)");
	    return;
d133 2
a134 11
	 if (ctx->Hint.TextureCompression == mode)
	    return;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
	 ctx->Hint.TextureCompression = mode;
         break;

      /* GL_SGIS_generate_mipmap */
      case GL_GENERATE_MIPMAP_HINT_SGIS:
         if (!ctx->Extensions.SGIS_generate_mipmap) {
            _mesa_error(ctx, GL_INVALID_ENUM, "glHint(target)");
	    return;
a135 4
         if (ctx->Hint.GenerateMipmap == mode)
            return;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
	 ctx->Hint.GenerateMipmap = mode;
d139 2
a140 2
         _mesa_error(ctx, GL_INVALID_ENUM, "glHint(target)");
         return;
d143 2
d148 2
d151 46
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d4 4
a7 4
 * Version:  3.5
 *
 * Copyright (C) 1999-2001  Brian Paul   All Rights Reserved.
 *
d14 1
a14 1
 *
d17 1
a17 1
 *
a42 1
   ASSERT_OUTSIDE_BEGIN_END(ctx);
d50 2
d53 1
a53 1
      fprintf(stderr, "glHint %s %d\n", _mesa_lookup_enum_by_nr(target), mode);
d56 1
a56 1
      _mesa_error(ctx, GL_INVALID_ENUM, "glHint(mode)");
a61 3
         if (ctx->Hint.Fog == mode)
	    return GL_TRUE;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
a64 3
         if (ctx->Hint.LineSmooth == mode)
	    return GL_TRUE;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
a67 3
         if (ctx->Hint.PerspectiveCorrection == mode)
	    return GL_TRUE;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
a70 3
         if (ctx->Hint.PointSmooth == mode)
	    return GL_TRUE;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
a73 3
         if (ctx->Hint.PolygonSmooth == mode)
	    return GL_TRUE;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
d76 46
a124 3
         if (ctx->Hint.ClipVolumeClipping == mode)
	    return GL_TRUE;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
d130 2
a131 3
         if (!ctx->Extensions.ARB_texture_compression) {
            _mesa_error(ctx, GL_INVALID_ENUM, "glHint(target)");
	    return GL_FALSE;
d133 2
a134 11
	 if (ctx->Hint.TextureCompression == mode)
	    return GL_TRUE;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
	 ctx->Hint.TextureCompression = mode;
         break;

      /* GL_SGIS_generate_mipmap */
      case GL_GENERATE_MIPMAP_HINT_SGIS:
         if (!ctx->Extensions.SGIS_generate_mipmap) {
            _mesa_error(ctx, GL_INVALID_ENUM, "glHint(target)");
	    return GL_FALSE;
a135 4
         if (ctx->Hint.GenerateMipmap == mode)
            return GL_TRUE;
	 FLUSH_VERTICES(ctx, _NEW_HINT);
	 ctx->Hint.GenerateMipmap = mode;
d139 1
a139 1
         _mesa_error(ctx, GL_INVALID_ENUM, "glHint(target)");
d143 2
d148 4
d153 41
a193 1
   return GL_TRUE;
d195 2
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d4 1
a4 1
 * Version:  4.1
d6 1
a6 1
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
d27 3
d34 2
a35 1
#include "imports.h"
d44 2
d47 4
d52 1
a52 2
      _mesa_debug(ctx, "glHint %s %d\n",
                  _mesa_lookup_enum_by_nr(target), mode);
d56 1
a56 1
      return;
d62 1
a62 1
	    return;
d68 1
a68 1
	    return;
d74 1
a74 1
	    return;
d80 1
a80 1
	    return;
d86 1
a86 1
	    return;
d94 1
a94 1
	    return;
d103 1
a103 1
	    return;
d106 1
a106 1
	    return;
d115 1
a115 1
	    return;
d118 1
a118 1
            return;
d125 1
a125 1
         return;
d131 2
@


