head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.28.43;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.11;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.11;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.29.56;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.08;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@
/*
 * Mesa 3-D graphics library
 * Version:  4.0.2
 *
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


/*
 * Software alpha planes.  Many frame buffers don't have alpha bits so
 * we simulate them in software.
 */


#include "glheader.h"
#include "context.h"
#include "mem.h"

#include "s_alphabuf.h"


#define ALPHA_DRAW_ADDR(X,Y) \
   (ctx->DrawBuffer->Alpha + (Y) * ctx->DrawBuffer->Width + (X))

#define ALPHA_READ_ADDR(X,Y) \
   (ctx->ReadBuffer->Alpha + (Y) * ctx->ReadBuffer->Width + (X))


/*
 * Allocate a new front and back alpha buffer.
 */
void
_mesa_alloc_alpha_buffers( GLframebuffer *buffer )
{
   GET_CURRENT_CONTEXT(ctx);
   const GLint bytes = buffer->Width * buffer->Height * sizeof(GLchan);

   ASSERT(buffer->UseSoftwareAlphaBuffers);

   if (buffer->FrontLeftAlpha) {
      MESA_PBUFFER_FREE( buffer->FrontLeftAlpha );
   }
   buffer->FrontLeftAlpha = (GLchan *) MESA_PBUFFER_ALLOC( bytes );
   if (!buffer->FrontLeftAlpha) {
      /* out of memory */
      _mesa_error( NULL, GL_OUT_OF_MEMORY,
                   "Couldn't allocate front-left alpha buffer" );
   }

   if (buffer->Visual.doubleBufferMode) {
      if (buffer->BackLeftAlpha) {
         MESA_PBUFFER_FREE( buffer->BackLeftAlpha );
      }
      buffer->BackLeftAlpha = (GLchan *) MESA_PBUFFER_ALLOC( bytes );
      if (!buffer->BackLeftAlpha) {
         /* out of memory */
         _mesa_error( NULL, GL_OUT_OF_MEMORY,
                      "Couldn't allocate back-left alpha buffer" );
      }
   }

   if (buffer->Visual.stereoMode) {
      if (buffer->FrontRightAlpha) {
         MESA_PBUFFER_FREE( buffer->FrontRightAlpha );
      }
      buffer->FrontRightAlpha = (GLchan *) MESA_PBUFFER_ALLOC( bytes );
      if (!buffer->FrontRightAlpha) {
         /* out of memory */
         _mesa_error( NULL, GL_OUT_OF_MEMORY,
                      "Couldn't allocate front-right alpha buffer" );
      }

      if (buffer->Visual.doubleBufferMode) {
         if (buffer->BackRightAlpha) {
            MESA_PBUFFER_FREE( buffer->BackRightAlpha );
         }
         buffer->BackRightAlpha = (GLchan *) MESA_PBUFFER_ALLOC( bytes );
         if (!buffer->BackRightAlpha) {
            /* out of memory */
            _mesa_error( NULL, GL_OUT_OF_MEMORY,
                         "Couldn't allocate back-right alpha buffer" );
         }
      }
   }

   if (ctx) {
      if (ctx->Color.DriverDrawBuffer == GL_FRONT_LEFT)
         buffer->Alpha = buffer->FrontLeftAlpha;
      else if (ctx->Color.DriverDrawBuffer == GL_BACK_LEFT)
         buffer->Alpha = buffer->BackLeftAlpha;
      else if (ctx->Color.DriverDrawBuffer == GL_FRONT_RIGHT)
         buffer->Alpha = buffer->FrontRightAlpha;
      else if (ctx->Color.DriverDrawBuffer == GL_BACK_RIGHT)
         buffer->Alpha = buffer->BackRightAlpha;
   }
}


/*
 * Clear all the alpha buffers
 */
void
_mesa_clear_alpha_buffers( GLcontext *ctx )
{
   const GLchan aclear = ctx->Color.ClearColor[3];
   GLuint bufferBit;

   ASSERT(ctx->DrawBuffer->UseSoftwareAlphaBuffers);
   ASSERT(ctx->Color.ColorMask[ACOMP]);

   /* loop over four possible alpha buffers */
   for (bufferBit = 1; bufferBit <= 8; bufferBit = bufferBit << 1) {
      if (bufferBit & ctx->Color.DrawDestMask) {
         GLchan *buffer;
         if (bufferBit == FRONT_LEFT_BIT) {
            buffer = ctx->DrawBuffer->FrontLeftAlpha;
         }
         else if (bufferBit == FRONT_RIGHT_BIT) {
            buffer = ctx->DrawBuffer->FrontRightAlpha;
         }
         else if (bufferBit == BACK_LEFT_BIT) {
            buffer = ctx->DrawBuffer->BackLeftAlpha;
         }
         else {
            buffer = ctx->DrawBuffer->BackRightAlpha;
         }

         if (ctx->Scissor.Enabled) {
            /* clear scissor region */
            GLint j;
            GLint rowLen = ctx->DrawBuffer->_Xmax - ctx->DrawBuffer->_Xmin;
            GLint rows = ctx->DrawBuffer->_Ymax - ctx->DrawBuffer->_Ymin;
            GLint width = ctx->DrawBuffer->Width;
            GLchan *aptr = buffer
                          + ctx->DrawBuffer->_Ymin * ctx->DrawBuffer->Width
                          + ctx->DrawBuffer->_Xmin;
            for (j = 0; j < rows; j++) {
#if CHAN_BITS == 8
               MEMSET( aptr, aclear, rowLen );
#elif CHAN_BITS == 16
               MEMSET16( aptr, aclear, rowLen );
#else
               GLint i;
               for (i = 0; i < rowLen; i++) {
                  aptr[i] = aclear;
               }
#endif
               aptr += width;
            }
         }
         else {
            /* clear whole buffer */
            GLuint pixels = ctx->DrawBuffer->Width * ctx->DrawBuffer->Height;
#if CHAN_BITS == 8
            MEMSET(buffer, aclear, pixels);
#elif CHAN_BITS == 16
            MEMSET16(buffer, aclear, pixels);
#else
            GLuint i;
            for (i = 0; i < pixels; i++) {
               buffer[i] = aclear;
            }
#endif
         }
      }
   }
}



void
_mesa_write_alpha_span( GLcontext *ctx, GLuint n, GLint x, GLint y,
                        CONST GLchan rgba[][4], const GLubyte mask[] )
{
   GLchan *aptr = ALPHA_DRAW_ADDR( x, y );
   GLuint i;

   if (mask) {
      for (i=0;i<n;i++) {
         if (mask[i]) {
            *aptr = rgba[i][ACOMP];
         }
         aptr++;
      }
   }
   else {
      for (i=0;i<n;i++) {
         *aptr++ = rgba[i][ACOMP];
      }
   }
}


void
_mesa_write_mono_alpha_span( GLcontext *ctx, GLuint n, GLint x, GLint y,
                             GLchan alpha, const GLubyte mask[] )
{
   GLchan *aptr = ALPHA_DRAW_ADDR( x, y );
   GLuint i;

   if (mask) {
      for (i=0;i<n;i++) {
         if (mask[i]) {
            *aptr = alpha;
         }
         aptr++;
      }
   }
   else {
      for (i=0;i<n;i++) {
         *aptr++ = alpha;
      }
   }
}


void
_mesa_write_alpha_pixels( GLcontext *ctx,
                          GLuint n, const GLint x[], const GLint y[],
                          CONST GLchan rgba[][4], const GLubyte mask[] )
{
   GLuint i;

   if (mask) {
      for (i=0;i<n;i++) {
         if (mask[i]) {
            GLchan *aptr = ALPHA_DRAW_ADDR( x[i], y[i] );
            *aptr = rgba[i][ACOMP];
         }
      }
   }
   else {
      for (i=0;i<n;i++) {
         GLchan *aptr = ALPHA_DRAW_ADDR( x[i], y[i] );
         *aptr = rgba[i][ACOMP];
      }
   }
}


void
_mesa_write_mono_alpha_pixels( GLcontext *ctx,
                               GLuint n, const GLint x[], const GLint y[],
                               GLchan alpha, const GLubyte mask[] )
{
   GLuint i;

   if (mask) {
      for (i=0;i<n;i++) {
         if (mask[i]) {
            GLchan *aptr = ALPHA_DRAW_ADDR( x[i], y[i] );
            *aptr = alpha;
         }
      }
   }
   else {
      for (i=0;i<n;i++) {
         GLchan *aptr = ALPHA_DRAW_ADDR( x[i], y[i] );
         *aptr = alpha;
      }
   }
}



void
_mesa_read_alpha_span( GLcontext *ctx,
                       GLuint n, GLint x, GLint y, GLchan rgba[][4] )
{
   GLchan *aptr = ALPHA_READ_ADDR( x, y );
   GLuint i;
   for (i=0;i<n;i++) {
      rgba[i][ACOMP] = *aptr++;
   }
}


void
_mesa_read_alpha_pixels( GLcontext *ctx,
                         GLuint n, const GLint x[], const GLint y[],
                         GLchan rgba[][4], const GLubyte mask[] )
{
   GLuint i;
   for (i=0;i<n;i++) {
      if (mask[i]) {
         GLchan *aptr = ALPHA_READ_ADDR( x[i], y[i] );
         rgba[i][ACOMP] = *aptr;
      }
   }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d4 1
a4 1
 * Version:  5.0.1
a33 1
#include "colormac.h"
d35 1
a35 1
#include "imports.h"
a36 1
#include "s_context.h"
d40 7
d53 1
d61 1
a61 1
   buffer->FrontLeftAlpha = MESA_PBUFFER_ALLOC( bytes );
d72 1
a72 1
      buffer->BackLeftAlpha = MESA_PBUFFER_ALLOC( bytes );
d84 1
a84 1
      buffer->FrontRightAlpha = MESA_PBUFFER_ALLOC( bytes );
d95 1
a95 1
         buffer->BackRightAlpha = MESA_PBUFFER_ALLOC( bytes );
d103 11
d123 1
a123 1
   GLchan aclear;
a125 2
   CLAMPED_FLOAT_TO_CHAN(aclear, ctx->Color.ClearColor[3]);

d131 1
a131 1
      if (bufferBit & ctx->Color._DrawDestMask) {
d134 1
a134 1
            buffer = (GLchan *) ctx->DrawBuffer->FrontLeftAlpha;
d137 1
a137 1
            buffer = (GLchan *) ctx->DrawBuffer->FrontRightAlpha;
d140 1
a140 1
            buffer = (GLchan *) ctx->DrawBuffer->BackLeftAlpha;
d143 1
a143 1
            buffer = (GLchan *) ctx->DrawBuffer->BackRightAlpha;
a188 25
static INLINE
GLchan *get_alpha_buffer( GLcontext *ctx )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);

   switch (swrast->CurrentBuffer) {
   case FRONT_LEFT_BIT:
      return (GLchan *) ctx->DrawBuffer->FrontLeftAlpha;
      break;
   case BACK_LEFT_BIT:
      return (GLchan *) ctx->DrawBuffer->BackLeftAlpha;
      break;
   case FRONT_RIGHT_BIT:
      return (GLchan *) ctx->DrawBuffer->FrontRightAlpha;
      break;
   case BACK_RIGHT_BIT:
      return (GLchan *) ctx->DrawBuffer->BackRightAlpha;
      break;
   default:
      _mesa_problem(ctx, "Bad CurrentBuffer in get_alpha_buffer()");
      return (GLchan *) ctx->DrawBuffer->FrontLeftAlpha;
   }
}


d193 1
a193 1
   GLchan *buffer, *aptr;
a195 3
   buffer = get_alpha_buffer(ctx);
   aptr = buffer + y * ctx->DrawBuffer->Width + x;

d216 1
a216 1
   GLchan *buffer, *aptr;
a218 3
   buffer = get_alpha_buffer(ctx);
   aptr = buffer + y * ctx->DrawBuffer->Width + x;

a239 1
   GLchan *buffer;
a241 2
   buffer = get_alpha_buffer(ctx);

d245 1
a245 1
            GLchan *aptr = buffer + y[i] * ctx->DrawBuffer->Width + x[i];
d252 1
a252 1
         GLchan *aptr = buffer + y[i] * ctx->DrawBuffer->Width + x[i];
a263 1
   GLchan *buffer;
a265 2
   buffer = get_alpha_buffer(ctx);

d269 1
a269 1
            GLchan *aptr = buffer + y[i] * ctx->DrawBuffer->Width + x[i];
d276 1
a276 1
         GLchan *aptr = buffer + y[i] * ctx->DrawBuffer->Width + x[i];
d288 1
a288 1
   const GLchan *buffer, *aptr;
d290 1
a290 5

   buffer = get_alpha_buffer(ctx);
   aptr = buffer + y * ctx->DrawBuffer->Width + x;

   for (i = 0; i < n; i++)
d292 1
a300 1
   const GLchan *buffer;
d302 1
a302 4

   buffer = get_alpha_buffer(ctx);

   for (i = 0; i < n; i++) {
d304 1
a304 1
         const GLchan *aptr = buffer + y[i] * ctx->DrawBuffer->Width + x[i];
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d4 1
a4 1
 * Version:  5.0.1
a33 1
#include "colormac.h"
d35 1
a35 1
#include "imports.h"
a36 1
#include "s_context.h"
d40 7
d53 1
d61 1
a61 1
   buffer->FrontLeftAlpha = MESA_PBUFFER_ALLOC( bytes );
d72 1
a72 1
      buffer->BackLeftAlpha = MESA_PBUFFER_ALLOC( bytes );
d84 1
a84 1
      buffer->FrontRightAlpha = MESA_PBUFFER_ALLOC( bytes );
d95 1
a95 1
         buffer->BackRightAlpha = MESA_PBUFFER_ALLOC( bytes );
d103 11
d123 1
a123 1
   GLchan aclear;
a125 2
   CLAMPED_FLOAT_TO_CHAN(aclear, ctx->Color.ClearColor[3]);

d131 1
a131 1
      if (bufferBit & ctx->Color._DrawDestMask) {
d134 1
a134 1
            buffer = (GLchan *) ctx->DrawBuffer->FrontLeftAlpha;
d137 1
a137 1
            buffer = (GLchan *) ctx->DrawBuffer->FrontRightAlpha;
d140 1
a140 1
            buffer = (GLchan *) ctx->DrawBuffer->BackLeftAlpha;
d143 1
a143 1
            buffer = (GLchan *) ctx->DrawBuffer->BackRightAlpha;
a188 25
static INLINE
GLchan *get_alpha_buffer( GLcontext *ctx )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);

   switch (swrast->CurrentBuffer) {
   case FRONT_LEFT_BIT:
      return (GLchan *) ctx->DrawBuffer->FrontLeftAlpha;
      break;
   case BACK_LEFT_BIT:
      return (GLchan *) ctx->DrawBuffer->BackLeftAlpha;
      break;
   case FRONT_RIGHT_BIT:
      return (GLchan *) ctx->DrawBuffer->FrontRightAlpha;
      break;
   case BACK_RIGHT_BIT:
      return (GLchan *) ctx->DrawBuffer->BackRightAlpha;
      break;
   default:
      _mesa_problem(ctx, "Bad CurrentBuffer in get_alpha_buffer()");
      return (GLchan *) ctx->DrawBuffer->FrontLeftAlpha;
   }
}


d193 1
a193 1
   GLchan *buffer, *aptr;
a195 3
   buffer = get_alpha_buffer(ctx);
   aptr = buffer + y * ctx->DrawBuffer->Width + x;

d216 1
a216 1
   GLchan *buffer, *aptr;
a218 3
   buffer = get_alpha_buffer(ctx);
   aptr = buffer + y * ctx->DrawBuffer->Width + x;

a239 1
   GLchan *buffer;
a241 2
   buffer = get_alpha_buffer(ctx);

d245 1
a245 1
            GLchan *aptr = buffer + y[i] * ctx->DrawBuffer->Width + x[i];
d252 1
a252 1
         GLchan *aptr = buffer + y[i] * ctx->DrawBuffer->Width + x[i];
a263 1
   GLchan *buffer;
a265 2
   buffer = get_alpha_buffer(ctx);

d269 1
a269 1
            GLchan *aptr = buffer + y[i] * ctx->DrawBuffer->Width + x[i];
d276 1
a276 1
         GLchan *aptr = buffer + y[i] * ctx->DrawBuffer->Width + x[i];
d288 1
a288 1
   const GLchan *buffer, *aptr;
d290 1
a290 5

   buffer = get_alpha_buffer(ctx);
   aptr = buffer + y * ctx->DrawBuffer->Width + x;

   for (i = 0; i < n; i++)
d292 1
a300 1
   const GLchan *buffer;
d302 1
a302 4

   buffer = get_alpha_buffer(ctx);

   for (i = 0; i < n; i++) {
d304 1
a304 1
         const GLchan *aptr = buffer + y[i] * ctx->DrawBuffer->Width + x[i];
@

