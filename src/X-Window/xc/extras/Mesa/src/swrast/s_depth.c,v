head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.28.43;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.12;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.12;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.29.59;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.09;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@
/*
 * Mesa 3-D graphics library
 * Version:  4.0.3
 *
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


#include "glheader.h"
#include "context.h"
#include "macros.h"
#include "mem.h"

#include "s_depth.h"
#include "s_context.h"
#include "s_pb.h"




/*
 * Return address of depth buffer value for given window coord.
 */
GLvoid *
_mesa_zbuffer_address(GLcontext *ctx, GLint x, GLint y)
{
   if (ctx->Visual.depthBits <= 16)
      return (GLushort *) ctx->DrawBuffer->DepthBuffer + ctx->DrawBuffer->Width * y + x;
   else
      return (GLuint *) ctx->DrawBuffer->DepthBuffer + ctx->DrawBuffer->Width * y + x;
}


#define Z_ADDRESS16( CTX, X, Y )				\
            ( ((GLushort *) (CTX)->DrawBuffer->DepthBuffer)	\
              + (CTX)->DrawBuffer->Width * (Y) + (X) )

#define Z_ADDRESS32( CTX, X, Y )				\
            ( ((GLuint *) (CTX)->DrawBuffer->DepthBuffer)	\
              + (CTX)->DrawBuffer->Width * (Y) + (X) )



/**********************************************************************/
/*****                   Depth Testing Functions                  *****/
/**********************************************************************/


/*
 * Do depth test for an array of fragments.  This is used both for
 * software and hardware Z buffers.
 * Input:  zbuffer - array of z values in the zbuffer
 *         z - array of fragment z values
 * Return:  number of fragments which pass the test.
 */
static GLuint
depth_test_span16( GLcontext *ctx, GLuint n, GLint x, GLint y,
                   GLushort zbuffer[], const GLdepth z[], GLubyte mask[] )
{
   GLuint passed = 0;

   /* switch cases ordered from most frequent to less frequent */
   switch (ctx->Depth.Func) {
      case GL_LESS:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] < zbuffer[i]) {
		     /* pass */
		     zbuffer[i] = z[i];
		     passed++;
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] < zbuffer[i]) {
		     /* pass */
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_LEQUAL:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] <= zbuffer[i]) {
		     zbuffer[i] = z[i];
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] <= zbuffer[i]) {
		     /* pass */
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_GEQUAL:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] >= zbuffer[i]) {
		     zbuffer[i] = z[i];
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] >= zbuffer[i]) {
		     /* pass */
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_GREATER:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] > zbuffer[i]) {
		     zbuffer[i] = z[i];
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] > zbuffer[i]) {
		     /* pass */
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_NOTEQUAL:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] != zbuffer[i]) {
		     zbuffer[i] = z[i];
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] != zbuffer[i]) {
		     /* pass */
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_EQUAL:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] == zbuffer[i]) {
		     zbuffer[i] = z[i];
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] == zbuffer[i]) {
		     /* pass */
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_ALWAYS:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  zbuffer[i] = z[i];
		  passed++;
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer or mask */
	    passed = n;
	 }
	 break;
      case GL_NEVER:
         BZERO(mask, n * sizeof(GLubyte));
	 break;
      default:
         _mesa_problem(ctx, "Bad depth func in depth_test_span16");
   }

   return passed;
}


static GLuint
depth_test_span32( GLcontext *ctx, GLuint n, GLint x, GLint y,
                   GLuint zbuffer[], const GLdepth z[], GLubyte mask[] )
{
   GLuint passed = 0;

   /* switch cases ordered from most frequent to less frequent */
   switch (ctx->Depth.Func) {
      case GL_LESS:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] < zbuffer[i]) {
		     /* pass */
		     zbuffer[i] = z[i];
		     passed++;
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] < zbuffer[i]) {
		     /* pass */
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_LEQUAL:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] <= zbuffer[i]) {
		     zbuffer[i] = z[i];
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] <= zbuffer[i]) {
		     /* pass */
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_GEQUAL:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] >= zbuffer[i]) {
		     zbuffer[i] = z[i];
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] >= zbuffer[i]) {
		     /* pass */
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_GREATER:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] > zbuffer[i]) {
		     zbuffer[i] = z[i];
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] > zbuffer[i]) {
		     /* pass */
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_NOTEQUAL:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] != zbuffer[i]) {
		     zbuffer[i] = z[i];
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] != zbuffer[i]) {
		     /* pass */
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_EQUAL:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] == zbuffer[i]) {
		     zbuffer[i] = z[i];
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  if (z[i] == zbuffer[i]) {
		     /* pass */
		     passed++;
		  }
		  else {
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_ALWAYS:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0;i<n;i++) {
	       if (mask[i]) {
		  zbuffer[i] = z[i];
		  passed++;
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer or mask */
	    passed = n;
	 }
	 break;
      case GL_NEVER:
         BZERO(mask, n * sizeof(GLubyte));
	 break;
      default:
         _mesa_problem(ctx, "Bad depth func in depth_test_span32");
   }

   return passed;
}



/*
 * Apply depth test to span of fragments.  Hardware or software z buffer.
 */
GLuint
_mesa_depth_test_span( GLcontext *ctx, GLuint n, GLint x, GLint y,
                       const GLdepth z[], GLubyte mask[] )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   if (swrast->Driver.ReadDepthSpan) {
      /* hardware-based depth buffer */
      GLdepth zbuffer[MAX_WIDTH];
      GLuint passed;
      (*swrast->Driver.ReadDepthSpan)(ctx, n, x, y, zbuffer);
      passed = depth_test_span32(ctx, n, x, y, zbuffer, z, mask);
      assert(swrast->Driver.WriteDepthSpan);
      (*swrast->Driver.WriteDepthSpan)(ctx, n, x, y, zbuffer, mask);
      return passed;
   }
   else {
      /* software depth buffer */
      if (ctx->Visual.depthBits <= 16) {
         GLushort *zptr = (GLushort *) Z_ADDRESS16(ctx, x, y);
         GLuint passed = depth_test_span16(ctx, n, x, y, zptr, z, mask);
         return passed;
      }
      else {
         GLuint *zptr = (GLuint *) Z_ADDRESS32(ctx, x, y);
         GLuint passed = depth_test_span32(ctx, n, x, y, zptr, z, mask);
         return passed;
      }
   }
}




/*
 * Do depth testing for an array of fragments using software Z buffer.
 */
static void
software_depth_test_pixels16( GLcontext *ctx, GLuint n,
                              const GLint x[], const GLint y[],
                              const GLdepth z[], GLubyte mask[] )
{
   /* switch cases ordered from most frequent to less frequent */
   switch (ctx->Depth.Func) {
      case GL_LESS:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLushort *zptr = Z_ADDRESS16(ctx,x[i],y[i]);
		  if (z[i] < *zptr) {
		     /* pass */
		     *zptr = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLushort *zptr = Z_ADDRESS16(ctx,x[i],y[i]);
		  if (z[i] < *zptr) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_LEQUAL:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLushort *zptr = Z_ADDRESS16(ctx,x[i],y[i]);
		  if (z[i] <= *zptr) {
		     /* pass */
		     *zptr = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLushort *zptr = Z_ADDRESS16(ctx,x[i],y[i]);
		  if (z[i] <= *zptr) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_GEQUAL:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLushort *zptr = Z_ADDRESS16(ctx,x[i],y[i]);
		  if (z[i] >= *zptr) {
		     /* pass */
		     *zptr = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLushort *zptr = Z_ADDRESS16(ctx,x[i],y[i]);
		  if (z[i] >= *zptr) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_GREATER:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLushort *zptr = Z_ADDRESS16(ctx,x[i],y[i]);
		  if (z[i] > *zptr) {
		     /* pass */
		     *zptr = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLushort *zptr = Z_ADDRESS16(ctx,x[i],y[i]);
		  if (z[i] > *zptr) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_NOTEQUAL:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLushort *zptr = Z_ADDRESS16(ctx,x[i],y[i]);
		  if (z[i] != *zptr) {
		     /* pass */
		     *zptr = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLushort *zptr = Z_ADDRESS16(ctx,x[i],y[i]);
		  if (z[i] != *zptr) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_EQUAL:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLushort *zptr = Z_ADDRESS16(ctx,x[i],y[i]);
		  if (z[i] == *zptr) {
		     /* pass */
		     *zptr = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLushort *zptr = Z_ADDRESS16(ctx,x[i],y[i]);
		  if (z[i] == *zptr) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_ALWAYS:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLushort *zptr = Z_ADDRESS16(ctx,x[i],y[i]);
		  *zptr = z[i];
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer or mask */
	 }
	 break;
      case GL_NEVER:
	 /* depth test never passes */
         BZERO(mask, n * sizeof(GLubyte));
	 break;
      default:
         _mesa_problem(ctx, "Bad depth func in software_depth_test_pixels");
   }
}



/*
 * Do depth testing for an array of fragments using software Z buffer.
 */
static void
software_depth_test_pixels32( GLcontext *ctx, GLuint n,
                              const GLint x[], const GLint y[],
                              const GLdepth z[], GLubyte mask[] )
{
   /* switch cases ordered from most frequent to less frequent */
   switch (ctx->Depth.Func) {
      case GL_LESS:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLuint *zptr = Z_ADDRESS32(ctx,x[i],y[i]);
		  if (z[i] < *zptr) {
		     /* pass */
		     *zptr = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLuint *zptr = Z_ADDRESS32(ctx,x[i],y[i]);
		  if (z[i] < *zptr) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_LEQUAL:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLuint *zptr = Z_ADDRESS32(ctx,x[i],y[i]);
		  if (z[i] <= *zptr) {
		     /* pass */
		     *zptr = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLuint *zptr = Z_ADDRESS32(ctx,x[i],y[i]);
		  if (z[i] <= *zptr) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_GEQUAL:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLuint *zptr = Z_ADDRESS32(ctx,x[i],y[i]);
		  if (z[i] >= *zptr) {
		     /* pass */
		     *zptr = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLuint *zptr = Z_ADDRESS32(ctx,x[i],y[i]);
		  if (z[i] >= *zptr) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_GREATER:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLuint *zptr = Z_ADDRESS32(ctx,x[i],y[i]);
		  if (z[i] > *zptr) {
		     /* pass */
		     *zptr = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLuint *zptr = Z_ADDRESS32(ctx,x[i],y[i]);
		  if (z[i] > *zptr) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_NOTEQUAL:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLuint *zptr = Z_ADDRESS32(ctx,x[i],y[i]);
		  if (z[i] != *zptr) {
		     /* pass */
		     *zptr = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLuint *zptr = Z_ADDRESS32(ctx,x[i],y[i]);
		  if (z[i] != *zptr) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_EQUAL:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLuint *zptr = Z_ADDRESS32(ctx,x[i],y[i]);
		  if (z[i] == *zptr) {
		     /* pass */
		     *zptr = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLuint *zptr = Z_ADDRESS32(ctx,x[i],y[i]);
		  if (z[i] == *zptr) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_ALWAYS:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  GLuint *zptr = Z_ADDRESS32(ctx,x[i],y[i]);
		  *zptr = z[i];
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer or mask */
	 }
	 break;
      case GL_NEVER:
	 /* depth test never passes */
         BZERO(mask, n * sizeof(GLubyte));
	 break;
      default:
         _mesa_problem(ctx, "Bad depth func in software_depth_test_pixels");
   }
}



/*
 * Do depth testing for an array of pixels using hardware Z buffer.
 * Input/output:  zbuffer - array of depth values from Z buffer
 * Input:  z - array of fragment z values.
 */
static void
hardware_depth_test_pixels( GLcontext *ctx, GLuint n, GLdepth zbuffer[],
                            const GLdepth z[], GLubyte mask[] )
{
   /* switch cases ordered from most frequent to less frequent */
   switch (ctx->Depth.Func) {
      case GL_LESS:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] < zbuffer[i]) {
		     /* pass */
		     zbuffer[i] = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] < zbuffer[i]) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_LEQUAL:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] <= zbuffer[i]) {
		     /* pass */
		     zbuffer[i] = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] <= zbuffer[i]) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_GEQUAL:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] >= zbuffer[i]) {
		     /* pass */
		     zbuffer[i] = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] >= zbuffer[i]) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_GREATER:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] > zbuffer[i]) {
		     /* pass */
		     zbuffer[i] = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] > zbuffer[i]) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_NOTEQUAL:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] != zbuffer[i]) {
		     /* pass */
		     zbuffer[i] = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] != zbuffer[i]) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_EQUAL:
         if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] == zbuffer[i]) {
		     /* pass */
		     zbuffer[i] = z[i];
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  if (z[i] == zbuffer[i]) {
		     /* pass */
		  }
		  else {
		     /* fail */
		     mask[i] = 0;
		  }
	       }
	    }
	 }
	 break;
      case GL_ALWAYS:
	 if (ctx->Depth.Mask) {
	    /* Update Z buffer */
            GLuint i;
	    for (i=0; i<n; i++) {
	       if (mask[i]) {
		  zbuffer[i] = z[i];
	       }
	    }
	 }
	 else {
	    /* Don't update Z buffer or mask */
	 }
	 break;
      case GL_NEVER:
	 /* depth test never passes */
         BZERO(mask, n * sizeof(GLubyte));
	 break;
      default:
         _mesa_problem(ctx, "Bad depth func in hardware_depth_test_pixels");
   }
}



void
_mesa_depth_test_pixels( GLcontext *ctx,
                         GLuint n, const GLint x[], const GLint y[],
                         const GLdepth z[], GLubyte mask[] )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   if (swrast->Driver.ReadDepthPixels) {
      /* read depth values from hardware Z buffer */
      GLdepth zbuffer[PB_SIZE];
      (*swrast->Driver.ReadDepthPixels)(ctx, n, x, y, zbuffer);

      hardware_depth_test_pixels( ctx, n, zbuffer, z, mask );

      /* update hardware Z buffer with new values */
      assert(swrast->Driver.WriteDepthPixels);
      (*swrast->Driver.WriteDepthPixels)(ctx, n, x, y, zbuffer, mask );
   }
   else {
      /* software depth testing */
      if (ctx->Visual.depthBits <= 16)
         software_depth_test_pixels16(ctx, n, x, y, z, mask);
      else
         software_depth_test_pixels32(ctx, n, x, y, z, mask);
   }
}





/**********************************************************************/
/*****                      Read Depth Buffer                     *****/
/**********************************************************************/


/*
 * Read a span of depth values from the depth buffer.
 * This function does clipping before calling the device driver function.
 */
void
_mesa_read_depth_span( GLcontext *ctx,
                       GLint n, GLint x, GLint y, GLdepth depth[] )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);

   if (y < 0 || y >= (GLint) ctx->DrawBuffer->Height ||
       x + n <= 0 || x >= (GLint) ctx->DrawBuffer->Width) {
      /* span is completely outside framebuffer */
      GLint i;
      for (i = 0; i < n; i++)
         depth[i] = 0;
      return;
   }

   if (x < 0) {
      GLint dx = -x;
      GLint i;
      for (i = 0; i < dx; i++)
         depth[i] = 0;
      x = 0;
      n -= dx;
      depth += dx;
   }
   if (x + n > (GLint) ctx->DrawBuffer->Width) {
      GLint dx = x + n - (GLint) ctx->DrawBuffer->Width;
      GLint i;
      for (i = 0; i < dx; i++)
         depth[n - i - 1] = 0;
      n -= dx;
   }
   if (n <= 0) {
      return;
   }

   if (ctx->DrawBuffer->DepthBuffer) {
      /* read from software depth buffer */
      if (ctx->Visual.depthBits <= 16) {
         const GLushort *zptr = Z_ADDRESS16( ctx, x, y );
         GLint i;
         for (i = 0; i < n; i++) {
            depth[i] = zptr[i];
         }
      }
      else {
         const GLuint *zptr = Z_ADDRESS32( ctx, x, y );
         GLint i;
         for (i = 0; i < n; i++) {
            depth[i] = zptr[i];
         }
      }
   }
   else if (swrast->Driver.ReadDepthSpan) {
      /* read from hardware depth buffer */
      (*swrast->Driver.ReadDepthSpan)( ctx, n, x, y, depth );
   }
   else {
      /* no depth buffer */
      BZERO(depth, n * sizeof(GLfloat));
   }

}




/*
 * Return a span of depth values from the depth buffer as floats in [0,1].
 * This is used for both hardware and software depth buffers.
 * Input:  n - how many pixels
 *         x,y - location of first pixel
 * Output:  depth - the array of depth values
 */
void
_mesa_read_depth_span_float( GLcontext *ctx,
                             GLint n, GLint x, GLint y, GLfloat depth[] )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   const GLfloat scale = 1.0F / ctx->DepthMaxF;

   if (y < 0 || y >= (GLint) ctx->DrawBuffer->Height ||
       x + n <= 0 || x >= (GLint) ctx->DrawBuffer->Width) {
      /* span is completely outside framebuffer */
      GLint i;
      for (i = 0; i < n; i++)
         depth[i] = 0.0F;
      return;
   }

   if (x < 0) {
      GLint dx = -x;
      GLint i;
      for (i = 0; i < dx; i++)
         depth[i] = 0.0F;
      n -= dx;
      x = 0;
   }
   if (x + n > (GLint) ctx->DrawBuffer->Width) {
      GLint dx = x + n - (GLint) ctx->DrawBuffer->Width;
      GLint i;
      for (i = 0; i < dx; i++)
         depth[n - i - 1] = 0.0F;
      n -= dx;
   }
   if (n <= 0) {
      return;
   }

   if (ctx->DrawBuffer->DepthBuffer) {
      /* read from software depth buffer */
      if (ctx->Visual.depthBits <= 16) {
         const GLushort *zptr = Z_ADDRESS16( ctx, x, y );
         GLint i;
         for (i = 0; i < n; i++) {
            depth[i] = (GLfloat) zptr[i] * scale;
         }
      }
      else {
         const GLuint *zptr = Z_ADDRESS32( ctx, x, y );
         GLint i;
         for (i = 0; i < n; i++) {
            depth[i] = (GLfloat) zptr[i] * scale;
         }
      }
   }
   else if (swrast->Driver.ReadDepthSpan) {
      /* read from hardware depth buffer */
      GLdepth d[MAX_WIDTH];
      GLint i;
      assert(n <= MAX_WIDTH);
      (*swrast->Driver.ReadDepthSpan)( ctx, n, x, y, d );
      for (i = 0; i < n; i++) {
	 depth[i] = d[i] * scale;
      }
   }
   else {
      /* no depth buffer */
      BZERO(depth, n * sizeof(GLfloat));
   }
}



/**********************************************************************/
/*****                Allocate and Clear Depth Buffer             *****/
/**********************************************************************/



/*
 * Allocate a new depth buffer.  If there's already a depth buffer allocated
 * it will be free()'d.  The new depth buffer will be uniniitalized.
 */
void
_mesa_alloc_depth_buffer( GLframebuffer *buffer )
{
   GLint bytesPerValue;

   ASSERT(buffer->UseSoftwareDepthBuffer);

   /* deallocate current depth buffer if present */
   if (buffer->DepthBuffer) {
      MESA_PBUFFER_FREE(buffer->DepthBuffer);
      buffer->DepthBuffer = NULL;
   }

   /* allocate new depth buffer, but don't initialize it */
   if (buffer->Visual.depthBits <= 16)
      bytesPerValue = sizeof(GLushort);
   else
      bytesPerValue = sizeof(GLuint);

   buffer->DepthBuffer = MESA_PBUFFER_ALLOC(buffer->Width * buffer->Height * bytesPerValue);

   if (!buffer->DepthBuffer) {
      /* out of memory */
      GET_CURRENT_CONTEXT(ctx);
      if (ctx) {
         ctx->Depth.Test = GL_FALSE;
         ctx->NewState |= _NEW_DEPTH;
         _mesa_error(ctx, GL_OUT_OF_MEMORY, "Couldn't allocate depth buffer");
      }
   }
}




/*
 * Clear the depth buffer.  If the depth buffer doesn't exist yet we'll
 * allocate it now.
 * This function is only called through Driver.clear_depth_buffer.
 */
void
_mesa_clear_depth_buffer( GLcontext *ctx )
{
   if (ctx->Visual.depthBits == 0
       || !ctx->DrawBuffer->DepthBuffer
       || !ctx->Depth.Mask) {
      /* no depth buffer, or writing to it is disabled */
      return;
   }

   /* The loops in this function have been written so the IRIX 5.3
    * C compiler can unroll them.  Hopefully other compilers can too!
    */

   if (ctx->Scissor.Enabled) {
      /* only clear scissor region */
      if (ctx->Visual.depthBits <= 16) {
         const GLushort clearValue = (GLushort) (ctx->Depth.Clear * ctx->DepthMax);
         const GLint rows = ctx->DrawBuffer->_Ymax - ctx->DrawBuffer->_Ymin;
         const GLint cols = ctx->DrawBuffer->_Xmax - ctx->DrawBuffer->_Xmin;
         const GLint rowStride = ctx->DrawBuffer->Width;
         GLushort *dRow = (GLushort *) ctx->DrawBuffer->DepthBuffer
            + ctx->DrawBuffer->_Ymin * rowStride + ctx->DrawBuffer->_Xmin;
         GLint i, j;
         for (i = 0; i < rows; i++) {
            for (j = 0; j < cols; j++) {
               dRow[j] = clearValue;
            }
            dRow += rowStride;
         }
      }
      else {
         const GLuint clearValue = (GLuint) (ctx->Depth.Clear * ctx->DepthMax);
         const GLint rows = ctx->DrawBuffer->_Ymax - ctx->DrawBuffer->_Ymin;
         const GLint cols = ctx->DrawBuffer->_Xmax - ctx->DrawBuffer->_Xmin;
         const GLint rowStride = ctx->DrawBuffer->Width;
         GLuint *dRow = (GLuint *) ctx->DrawBuffer->DepthBuffer
            + ctx->DrawBuffer->_Ymin * rowStride + ctx->DrawBuffer->_Xmin;
         GLint i, j;
         for (i = 0; i < rows; i++) {
            for (j = 0; j < cols; j++) {
               dRow[j] = clearValue;
            }
            dRow += rowStride;
         }
      }
   }
   else {
      /* clear whole buffer */
      if (ctx->Visual.depthBits <= 16) {
         const GLushort clearValue = (GLushort) (ctx->Depth.Clear * ctx->DepthMax);
         if ((clearValue & 0xff) == (clearValue >> 8)) {
            if (clearValue == 0) {
               BZERO(ctx->DrawBuffer->DepthBuffer,
                     2*ctx->DrawBuffer->Width*ctx->DrawBuffer->Height);
            }
            else {
               /* lower and upper bytes of clear_value are same, use MEMSET */
               MEMSET( ctx->DrawBuffer->DepthBuffer, clearValue & 0xff,
                       2 * ctx->DrawBuffer->Width * ctx->DrawBuffer->Height);
            }
         }
         else {
            GLushort *d = (GLushort *) ctx->DrawBuffer->DepthBuffer;
            GLint n = ctx->DrawBuffer->Width * ctx->DrawBuffer->Height;
            while (n >= 16) {
               d[0] = clearValue;    d[1] = clearValue;
               d[2] = clearValue;    d[3] = clearValue;
               d[4] = clearValue;    d[5] = clearValue;
               d[6] = clearValue;    d[7] = clearValue;
               d[8] = clearValue;    d[9] = clearValue;
               d[10] = clearValue;   d[11] = clearValue;
               d[12] = clearValue;   d[13] = clearValue;
               d[14] = clearValue;   d[15] = clearValue;
               d += 16;
               n -= 16;
            }
            while (n > 0) {
               *d++ = clearValue;
               n--;
            }
         }
      }
      else {
         /* >16 bit depth buffer */
         const GLuint clearValue = (GLuint) (ctx->Depth.Clear * ctx->DepthMax);
         if (clearValue == 0) {
            BZERO(ctx->DrawBuffer->DepthBuffer,
                ctx->DrawBuffer->Width*ctx->DrawBuffer->Height*sizeof(GLuint));
         }
         else {
            GLint n = ctx->DrawBuffer->Width * ctx->DrawBuffer->Height;
            GLuint *d = (GLuint *) ctx->DrawBuffer->DepthBuffer;
            while (n >= 16) {
               d[0] = clearValue;    d[1] = clearValue;
               d[2] = clearValue;    d[3] = clearValue;
               d[4] = clearValue;    d[5] = clearValue;
               d[6] = clearValue;    d[7] = clearValue;
               d[8] = clearValue;    d[9] = clearValue;
               d[10] = clearValue;   d[11] = clearValue;
               d[12] = clearValue;   d[13] = clearValue;
               d[14] = clearValue;   d[15] = clearValue;
               d += 16;
               n -= 16;
            }
            while (n > 0) {
               *d++ = clearValue;
               n--;
            }
         }
      }
   }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d4 1
a4 1
 * Version:  4.1
d30 1
a30 1
#include "imports.h"
d34 1
d37 3
a39 1
/**
d46 1
a46 2
      return (GLushort *) ctx->DrawBuffer->DepthBuffer
         + ctx->DrawBuffer->Width * y + x;
d48 1
a48 2
      return (GLuint *) ctx->DrawBuffer->DepthBuffer
         + ctx->DrawBuffer->Width * y + x;
d75 1
a75 1
depth_test_span16( GLcontext *ctx, GLuint n,
d293 1
a293 1
         _mesa_bzero(mask, n * sizeof(GLubyte));
d304 1
a304 1
depth_test_span32( GLcontext *ctx, GLuint n,
d522 1
a522 1
         _mesa_bzero(mask, n * sizeof(GLubyte));
d536 3
a538 2
static GLuint
depth_test_span( GLcontext *ctx, struct sw_span *span)
a539 3
   const GLint x = span->x;
   const GLint y = span->y;
   const GLuint n = span->end;
a540 4

   ASSERT((span->arrayMask & SPAN_XY) == 0);
   ASSERT(span->arrayMask & SPAN_Z);
   
d546 3
a548 7
      passed = depth_test_span32(ctx, n, zbuffer, span->array->z,
                                 span->array->mask);
      ASSERT(swrast->Driver.WriteDepthSpan);
      (*swrast->Driver.WriteDepthSpan)(ctx, n, x, y, zbuffer,
                                       span->array->mask);
      if (passed < n)
         span->writeAll = GL_FALSE;
a551 1
      GLuint passed;
d555 2
a556 1
         passed = depth_test_span16(ctx, n, zptr, span->array->z, span->array->mask);
d560 2
a561 1
         passed = depth_test_span32(ctx, n, zptr, span->array->z, span->array->mask);
a562 17
#if 1
      if (passed < span->end) {
         span->writeAll = GL_FALSE;
      }
#else
      /* this causes a glDrawPixels(GL_DEPTH_COMPONENT) conformance failure */
      if (passed < span->end) {
	  span->writeAll = GL_FALSE;
	  if (passed == 0) {
	      span->end = 0;
	      return 0;
	  }
	  while (span->end > 0  &&  span->mask[span->end - 1] == 0)
	      span->end --;
      }
#endif
      return passed;
d806 1
a806 1
         _mesa_bzero(mask, n * sizeof(GLubyte));
d1052 1
a1052 1
         _mesa_bzero(mask, n * sizeof(GLubyte));
d1286 1
a1286 1
         _mesa_bzero(mask, n * sizeof(GLubyte));
d1295 4
a1298 2
static GLuint
depth_test_pixels( GLcontext *ctx, struct sw_span *span )
a1300 6
   const GLuint n = span->end;
   const GLint *x = span->array->x;
   const GLint *y = span->array->y;
   const GLdepth *z = span->array->z;
   GLubyte *mask = span->array->mask;

d1303 1
a1303 1
      GLdepth zbuffer[MAX_WIDTH];
a1318 1
   return n; /* not really correct, but OK */
a1321 12
/**
 * Apply depth (Z) buffer testing to the span.
 * \return approx number of pixels that passed (only zero is reliable)
 */
GLuint
_mesa_depth_test_span( GLcontext *ctx, struct sw_span *span)
{
   if (span->arrayMask & SPAN_XY)
      return depth_test_pixels(ctx, span);
   else
      return depth_test_span(ctx, span);
}
d1330 1
a1330 1
/**
d1341 1
a1341 1
       x + (GLint) n <= 0 || x >= (GLint) ctx->DrawBuffer->Width) {
d1392 1
a1392 1
      _mesa_bzero(depth, n * sizeof(GLfloat));
d1400 1
a1400 1
/**
d1415 1
a1415 1
       x + (GLint) n <= 0 || x >= (GLint) ctx->DrawBuffer->Width) {
d1471 1
a1471 1
      _mesa_bzero(depth, n * sizeof(GLfloat));
d1483 1
a1483 1
/**
a1485 1
 * This function is only called through Driver.alloc_depth_buffer.
d1506 1
a1506 2
   buffer->DepthBuffer = MESA_PBUFFER_ALLOC(buffer->Width * buffer->Height
                                            * bytesPerValue);
d1520 3
a1522 1
/**
d1580 1
a1580 1
               _mesa_bzero(ctx->DrawBuffer->DepthBuffer,
d1614 1
a1614 1
            _mesa_bzero(ctx->DrawBuffer->DepthBuffer,
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d4 1
a4 1
 * Version:  4.1
d30 1
a30 1
#include "imports.h"
d34 1
d37 3
a39 1
/**
d46 1
a46 2
      return (GLushort *) ctx->DrawBuffer->DepthBuffer
         + ctx->DrawBuffer->Width * y + x;
d48 1
a48 2
      return (GLuint *) ctx->DrawBuffer->DepthBuffer
         + ctx->DrawBuffer->Width * y + x;
d75 1
a75 1
depth_test_span16( GLcontext *ctx, GLuint n,
d293 1
a293 1
         _mesa_bzero(mask, n * sizeof(GLubyte));
d304 1
a304 1
depth_test_span32( GLcontext *ctx, GLuint n,
d522 1
a522 1
         _mesa_bzero(mask, n * sizeof(GLubyte));
d536 3
a538 2
static GLuint
depth_test_span( GLcontext *ctx, struct sw_span *span)
a539 3
   const GLint x = span->x;
   const GLint y = span->y;
   const GLuint n = span->end;
a540 4

   ASSERT((span->arrayMask & SPAN_XY) == 0);
   ASSERT(span->arrayMask & SPAN_Z);
   
d546 3
a548 7
      passed = depth_test_span32(ctx, n, zbuffer, span->array->z,
                                 span->array->mask);
      ASSERT(swrast->Driver.WriteDepthSpan);
      (*swrast->Driver.WriteDepthSpan)(ctx, n, x, y, zbuffer,
                                       span->array->mask);
      if (passed < n)
         span->writeAll = GL_FALSE;
a551 1
      GLuint passed;
d555 2
a556 1
         passed = depth_test_span16(ctx, n, zptr, span->array->z, span->array->mask);
d560 2
a561 1
         passed = depth_test_span32(ctx, n, zptr, span->array->z, span->array->mask);
a562 17
#if 1
      if (passed < span->end) {
         span->writeAll = GL_FALSE;
      }
#else
      /* this causes a glDrawPixels(GL_DEPTH_COMPONENT) conformance failure */
      if (passed < span->end) {
	  span->writeAll = GL_FALSE;
	  if (passed == 0) {
	      span->end = 0;
	      return 0;
	  }
	  while (span->end > 0  &&  span->mask[span->end - 1] == 0)
	      span->end --;
      }
#endif
      return passed;
d806 1
a806 1
         _mesa_bzero(mask, n * sizeof(GLubyte));
d1052 1
a1052 1
         _mesa_bzero(mask, n * sizeof(GLubyte));
d1286 1
a1286 1
         _mesa_bzero(mask, n * sizeof(GLubyte));
d1295 4
a1298 2
static GLuint
depth_test_pixels( GLcontext *ctx, struct sw_span *span )
a1300 6
   const GLuint n = span->end;
   const GLint *x = span->array->x;
   const GLint *y = span->array->y;
   const GLdepth *z = span->array->z;
   GLubyte *mask = span->array->mask;

d1303 1
a1303 1
      GLdepth zbuffer[MAX_WIDTH];
a1318 1
   return n; /* not really correct, but OK */
a1321 12
/**
 * Apply depth (Z) buffer testing to the span.
 * \return approx number of pixels that passed (only zero is reliable)
 */
GLuint
_mesa_depth_test_span( GLcontext *ctx, struct sw_span *span)
{
   if (span->arrayMask & SPAN_XY)
      return depth_test_pixels(ctx, span);
   else
      return depth_test_span(ctx, span);
}
d1330 1
a1330 1
/**
d1341 1
a1341 1
       x + (GLint) n <= 0 || x >= (GLint) ctx->DrawBuffer->Width) {
d1392 1
a1392 1
      _mesa_bzero(depth, n * sizeof(GLfloat));
d1400 1
a1400 1
/**
d1415 1
a1415 1
       x + (GLint) n <= 0 || x >= (GLint) ctx->DrawBuffer->Width) {
d1471 1
a1471 1
      _mesa_bzero(depth, n * sizeof(GLfloat));
d1483 1
a1483 1
/**
a1485 1
 * This function is only called through Driver.alloc_depth_buffer.
d1506 1
a1506 2
   buffer->DepthBuffer = MESA_PBUFFER_ALLOC(buffer->Width * buffer->Height
                                            * bytesPerValue);
d1520 3
a1522 1
/**
d1580 1
a1580 1
               _mesa_bzero(ctx->DrawBuffer->DepthBuffer,
d1614 1
a1614 1
            _mesa_bzero(ctx->DrawBuffer->DepthBuffer,
@

