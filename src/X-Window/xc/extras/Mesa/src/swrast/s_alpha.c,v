head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.28.43;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.11;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.11;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.29.55;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.08;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@
/*
 * Mesa 3-D graphics library
 * Version:  3.5
 *
 * Copyright (C) 1999-2001  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


#include "glheader.h"
#include "context.h"
#include "colormac.h"
#include "macros.h"
#include "mmath.h"

#include "s_alpha.h"





/*
 * Apply the alpha test to a span of pixels.
 * In:  rgba - array of pixels
 * In/Out:  mask - current pixel mask.  Pixels which fail the alpha test
 *                 will set the corresponding mask flag to 0.
 * Return:  0 = all pixels in the span failed the alpha test.
 *          1 = one or more pixels passed the alpha test.
 */
GLint
_mesa_alpha_test( const GLcontext *ctx,
                  GLuint n, CONST GLchan rgba[][4], GLubyte mask[] )
{
   GLuint i;
   GLchan ref = ctx->Color.AlphaRef;

   /* switch cases ordered from most frequent to less frequent */
   switch (ctx->Color.AlphaFunc) {
      case GL_LESS:
         for (i=0;i<n;i++) {
	    mask[i] &= (rgba[i][ACOMP] < ref);
	 }
	 return 1;
      case GL_LEQUAL:
         for (i=0;i<n;i++)
	    mask[i] &= (rgba[i][ACOMP] <= ref);
	 return 1;
      case GL_GEQUAL:
         for (i=0;i<n;i++) {
	    mask[i] &= (rgba[i][ACOMP] >= ref);
	 }
	 return 1;
      case GL_GREATER:
         for (i=0;i<n;i++) {
	    mask[i] &= (rgba[i][ACOMP] > ref);
	 }
	 return 1;
      case GL_NOTEQUAL:
         for (i=0;i<n;i++) {
	    mask[i] &= (rgba[i][ACOMP] != ref);
	 }
	 return 1;
      case GL_EQUAL:
         for (i=0;i<n;i++) {
	    mask[i] &= (rgba[i][ACOMP] == ref);
	 }
	 return 1;
      case GL_ALWAYS:
	 /* do nothing */
	 return 1;
      case GL_NEVER:
         /* caller should check for zero! */
	 return 0;
      default:
	 _mesa_problem( ctx, "Invalid alpha test in gl_alpha_test" );
         return 0;
   }
   /* Never get here */
   /*return 1;*/
}
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d4 1
a4 1
 * Version:  4.1
d6 1
a6 1
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
a25 4
/**
 * \file swrast/s_alpha.c
 * \brief Functions to apply alpha test.
 */
a33 1
#include "s_context.h"
d36 10
a45 6
/**
 * \fn GLint _mesa_alpha_test( const GLcontext *ctx, struct sw_span *span )
 * \brief Apply the alpha test to a span of pixels.
 * \return
 *      - "0" = all pixels in the span failed the alpha test.
 *      - "1" = one or more pixels passed the alpha test.
d48 2
a49 1
_mesa_alpha_test( const GLcontext *ctx, struct sw_span *span )
a50 4
   const GLchan (*rgba)[4] = (const GLchan (*)[4]) span->array->rgba;
   GLchan ref;
   const GLuint n = span->end;
   GLubyte *mask = span->array->mask;
d52 1
d54 40
a93 149
   CLAMPED_FLOAT_TO_CHAN(ref, ctx->Color.AlphaRef);

   if (span->arrayMask & SPAN_RGBA) {
      /* Use the array values */
      switch (ctx->Color.AlphaFunc) {
         case GL_LESS:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] < ref);
            break;
         case GL_LEQUAL:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] <= ref);
            break;
         case GL_GEQUAL:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] >= ref);
            break;
         case GL_GREATER:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] > ref);
            break;
         case GL_NOTEQUAL:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] != ref);
            break;
         case GL_EQUAL:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] == ref);
            break;
         case GL_ALWAYS:
            /* do nothing */
            return 1;
         case GL_NEVER:
            /* caller should check for zero! */
            span->writeAll = GL_FALSE;
            return 0;
         default:
            _mesa_problem( ctx, "Invalid alpha test in _mesa_alpha_test" );
            return 0;
      }
   }
   else {
      /* Use the interpolation values */
#if CHAN_TYPE == GL_FLOAT
      const GLfloat alphaStep = span->alphaStep;
      GLfloat alpha = span->alpha;
      ASSERT(span->interpMask & SPAN_RGBA);
      switch (ctx->Color.AlphaFunc) {
         case GL_LESS:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha < ref);
               alpha += alphaStep;
            }
            break;
         case GL_LEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha <= ref);
               alpha += alphaStep;
            }
            break;
         case GL_GEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha >= ref);
               alpha += alphaStep;
            }
            break;
         case GL_GREATER:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha > ref);
               alpha += alphaStep;
            }
            break;
         case GL_NOTEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha != ref);
               alpha += alphaStep;
            }
            break;
         case GL_EQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha == ref);
               alpha += alphaStep;
            }
            break;
         case GL_ALWAYS:
            /* do nothing */
            return 1;
         case GL_NEVER:
            /* caller should check for zero! */
            span->writeAll = GL_FALSE;
            return 0;
         default:
            _mesa_problem( ctx, "Invalid alpha test in gl_alpha_test" );
            return 0;
      }
#else
      /* 8 or 16-bit channel interpolation */
      const GLfixed alphaStep = span->alphaStep;
      GLfixed alpha = span->alpha;
      ASSERT(span->interpMask & SPAN_RGBA);
      switch (ctx->Color.AlphaFunc) {
         case GL_LESS:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) < ref);
               alpha += alphaStep;
            }
            break;
         case GL_LEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) <= ref);
               alpha += alphaStep;
            }
            break;
         case GL_GEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) >= ref);
               alpha += alphaStep;
            }
            break;
         case GL_GREATER:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) > ref);
               alpha += alphaStep;
            }
            break;
         case GL_NOTEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) != ref);
               alpha += alphaStep;
            }
            break;
         case GL_EQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) == ref);
               alpha += alphaStep;
            }
            break;
         case GL_ALWAYS:
            /* do nothing */
            return 1;
         case GL_NEVER:
            /* caller should check for zero! */
            span->writeAll = GL_FALSE;
            return 0;
         default:
            _mesa_problem( ctx, "Invalid alpha test in gl_alpha_test" );
            return 0;
      }
#endif /* CHAN_TYPE */
d95 2
a96 18

#if 0
   /* XXXX This causes conformance failures!!!! */
   while ((span->start <= span->end)  &&
          (mask[span->start] == 0))
     span->start ++;

   while ((span->end >= span->start)  &&
          (mask[span->end] == 0))
     span->end --;
#endif

   span->writeAll = GL_FALSE;

   if (span->start >= span->end)
     return 0;
   else
     return 1;
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d4 1
a4 1
 * Version:  4.1
d6 1
a6 1
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
a25 4
/**
 * \file swrast/s_alpha.c
 * \brief Functions to apply alpha test.
 */
a33 1
#include "s_context.h"
d36 10
a45 6
/**
 * \fn GLint _mesa_alpha_test( const GLcontext *ctx, struct sw_span *span )
 * \brief Apply the alpha test to a span of pixels.
 * \return
 *      - "0" = all pixels in the span failed the alpha test.
 *      - "1" = one or more pixels passed the alpha test.
d48 2
a49 1
_mesa_alpha_test( const GLcontext *ctx, struct sw_span *span )
a50 4
   const GLchan (*rgba)[4] = (const GLchan (*)[4]) span->array->rgba;
   GLchan ref;
   const GLuint n = span->end;
   GLubyte *mask = span->array->mask;
d52 1
d54 40
a93 149
   CLAMPED_FLOAT_TO_CHAN(ref, ctx->Color.AlphaRef);

   if (span->arrayMask & SPAN_RGBA) {
      /* Use the array values */
      switch (ctx->Color.AlphaFunc) {
         case GL_LESS:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] < ref);
            break;
         case GL_LEQUAL:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] <= ref);
            break;
         case GL_GEQUAL:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] >= ref);
            break;
         case GL_GREATER:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] > ref);
            break;
         case GL_NOTEQUAL:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] != ref);
            break;
         case GL_EQUAL:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] == ref);
            break;
         case GL_ALWAYS:
            /* do nothing */
            return 1;
         case GL_NEVER:
            /* caller should check for zero! */
            span->writeAll = GL_FALSE;
            return 0;
         default:
            _mesa_problem( ctx, "Invalid alpha test in _mesa_alpha_test" );
            return 0;
      }
   }
   else {
      /* Use the interpolation values */
#if CHAN_TYPE == GL_FLOAT
      const GLfloat alphaStep = span->alphaStep;
      GLfloat alpha = span->alpha;
      ASSERT(span->interpMask & SPAN_RGBA);
      switch (ctx->Color.AlphaFunc) {
         case GL_LESS:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha < ref);
               alpha += alphaStep;
            }
            break;
         case GL_LEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha <= ref);
               alpha += alphaStep;
            }
            break;
         case GL_GEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha >= ref);
               alpha += alphaStep;
            }
            break;
         case GL_GREATER:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha > ref);
               alpha += alphaStep;
            }
            break;
         case GL_NOTEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha != ref);
               alpha += alphaStep;
            }
            break;
         case GL_EQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha == ref);
               alpha += alphaStep;
            }
            break;
         case GL_ALWAYS:
            /* do nothing */
            return 1;
         case GL_NEVER:
            /* caller should check for zero! */
            span->writeAll = GL_FALSE;
            return 0;
         default:
            _mesa_problem( ctx, "Invalid alpha test in gl_alpha_test" );
            return 0;
      }
#else
      /* 8 or 16-bit channel interpolation */
      const GLfixed alphaStep = span->alphaStep;
      GLfixed alpha = span->alpha;
      ASSERT(span->interpMask & SPAN_RGBA);
      switch (ctx->Color.AlphaFunc) {
         case GL_LESS:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) < ref);
               alpha += alphaStep;
            }
            break;
         case GL_LEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) <= ref);
               alpha += alphaStep;
            }
            break;
         case GL_GEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) >= ref);
               alpha += alphaStep;
            }
            break;
         case GL_GREATER:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) > ref);
               alpha += alphaStep;
            }
            break;
         case GL_NOTEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) != ref);
               alpha += alphaStep;
            }
            break;
         case GL_EQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) == ref);
               alpha += alphaStep;
            }
            break;
         case GL_ALWAYS:
            /* do nothing */
            return 1;
         case GL_NEVER:
            /* caller should check for zero! */
            span->writeAll = GL_FALSE;
            return 0;
         default:
            _mesa_problem( ctx, "Invalid alpha test in gl_alpha_test" );
            return 0;
      }
#endif /* CHAN_TYPE */
d95 2
a96 18

#if 0
   /* XXXX This causes conformance failures!!!! */
   while ((span->start <= span->end)  &&
          (mask[span->start] == 0))
     span->start ++;

   while ((span->end >= span->start)  &&
          (mask[span->end] == 0))
     span->end --;
#endif

   span->writeAll = GL_FALSE;

   if (span->start >= span->end)
     return 0;
   else
     return 1;
@

