head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.28.45;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.04.08.18.20.15;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.20.15;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.30.04;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.05.10;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@
/*
 * Mesa 3-D graphics library
 * Version:  3.5
 *
 * Copyright (C) 1999-2001  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


/*
 * Implement the effect of glColorMask and glIndexMask in software.
 */


#include "glheader.h"
#include "enums.h"
#include "macros.h"

#include "s_alphabuf.h"
#include "s_context.h"
#include "s_masking.h"
#include "s_pb.h"
#include "s_span.h"


/*
 * Apply glColorMask to a span of RGBA pixels.
 */
void
_mesa_mask_rgba_span( GLcontext *ctx,
                      GLuint n, GLint x, GLint y, GLchan rgba[][4] )
{
   GLchan dest[MAX_WIDTH][4];
   GLuint i;

#if CHAN_BITS == 8

   GLuint srcMask = *((GLuint*)ctx->Color.ColorMask);
   GLuint dstMask = ~srcMask;
   GLuint *rgba32 = (GLuint *) rgba;
   GLuint *dest32 = (GLuint *) dest;

   _mesa_read_rgba_span( ctx, ctx->DrawBuffer, n, x, y, dest );
   for (i = 0; i < n; i++) {
      rgba32[i] = (rgba32[i] & srcMask) | (dest32[i] & dstMask);
   }

#else

   const GLint rMask = ctx->Color.ColorMask[RCOMP];
   const GLint gMask = ctx->Color.ColorMask[GCOMP];
   const GLint bMask = ctx->Color.ColorMask[BCOMP];
   const GLint aMask = ctx->Color.ColorMask[ACOMP];

   _mesa_read_rgba_span( ctx, ctx->DrawBuffer, n, x, y, dest );
   for (i = 0; i < n; i++) {
      if (!rMask)  rgba[i][RCOMP] = dest[i][RCOMP];
      if (!gMask)  rgba[i][GCOMP] = dest[i][GCOMP];
      if (!bMask)  rgba[i][BCOMP] = dest[i][BCOMP];
      if (!aMask)  rgba[i][ACOMP] = dest[i][ACOMP];
   }

#endif
}



/*
 * Apply glColorMask to an array of RGBA pixels.
 */
void
_mesa_mask_rgba_pixels( GLcontext *ctx,
                        GLuint n, const GLint x[], const GLint y[],
                        GLchan rgba[][4], const GLubyte mask[] )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   GLchan dest[PB_SIZE][4];
   GLuint i;

#if CHAN_BITS == 8

   GLuint srcMask = *((GLuint*)ctx->Color.ColorMask);
   GLuint dstMask = ~srcMask;
   GLuint *rgba32 = (GLuint *) rgba;
   GLuint *dest32 = (GLuint *) dest;

   (*swrast->Driver.ReadRGBAPixels)( ctx, n, x, y, dest, mask );
   if (SWRAST_CONTEXT(ctx)->_RasterMask & ALPHABUF_BIT) {
      _mesa_read_alpha_pixels( ctx, n, x, y, dest, mask );
   }

   for (i=0; i<n; i++) {
      rgba32[i] = (rgba32[i] & srcMask) | (dest32[i] & dstMask);
   }

#else

   const GLint rMask = ctx->Color.ColorMask[RCOMP];
   const GLint gMask = ctx->Color.ColorMask[GCOMP];
   const GLint bMask = ctx->Color.ColorMask[BCOMP];
   const GLint aMask = ctx->Color.ColorMask[ACOMP];

   (*swrast->Driver.ReadRGBAPixels)( ctx, n, x, y, dest, mask );
   if (SWRAST_CONTEXT(ctx)->_RasterMask & ALPHABUF_BIT) {
      _mesa_read_alpha_pixels( ctx, n, x, y, dest, mask );
   }

   for (i = 0; i < n; i++) {
      if (!rMask)  rgba[i][RCOMP] = dest[i][RCOMP];
      if (!gMask)  rgba[i][GCOMP] = dest[i][GCOMP];
      if (!bMask)  rgba[i][BCOMP] = dest[i][BCOMP];
      if (!aMask)  rgba[i][ACOMP] = dest[i][ACOMP];
   }

#endif
}



/*
 * Apply glIndexMask to a span of CI pixels.
 */
void
_mesa_mask_index_span( GLcontext *ctx,
                       GLuint n, GLint x, GLint y, GLuint index[] )
{
   GLuint i;
   GLuint fbindexes[MAX_WIDTH];
   GLuint msrc, mdest;

   _mesa_read_index_span( ctx, ctx->DrawBuffer, n, x, y, fbindexes );

   msrc = ctx->Color.IndexMask;
   mdest = ~msrc;

   for (i=0;i<n;i++) {
      index[i] = (index[i] & msrc) | (fbindexes[i] & mdest);
   }
}



/*
 * Apply glIndexMask to an array of CI pixels.
 */
void
_mesa_mask_index_pixels( GLcontext *ctx,
                         GLuint n, const GLint x[], const GLint y[],
                         GLuint index[], const GLubyte mask[] )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   GLuint i;
   GLuint fbindexes[PB_SIZE];
   GLuint msrc, mdest;

   (*swrast->Driver.ReadCI32Pixels)( ctx, n, x, y, fbindexes, mask );

   msrc = ctx->Color.IndexMask;
   mdest = ~msrc;

   for (i=0;i<n;i++) {
      index[i] = (index[i] & msrc) | (fbindexes[i] & mdest);
   }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d4 1
a4 1
 * Version:  4.1
d6 1
a6 1
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
d39 1
d43 3
a45 1

d47 2
a48 2
_mesa_mask_rgba_span( GLcontext *ctx, const struct sw_span *span,
                     GLchan rgba[][4] )
a49 1
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
d51 2
d54 1
a58 8
#else
   const GLboolean rMask = ctx->Color.ColorMask[RCOMP];
   const GLboolean gMask = ctx->Color.ColorMask[GCOMP];
   const GLboolean bMask = ctx->Color.ColorMask[BCOMP];
   const GLboolean aMask = ctx->Color.ColorMask[ACOMP];
#endif
   const GLuint n = span->end;
   GLuint i;
d60 1
a60 16
   ASSERT(n < MAX_WIDTH);
   ASSERT(span->arrayMask & SPAN_RGBA);

   if (span->arrayMask & SPAN_XY) {
      (*swrast->Driver.ReadRGBAPixels)(ctx, n, span->array->x, span->array->y,
                                       dest, span->array->mask);
      if (SWRAST_CONTEXT(ctx)->_RasterMask & ALPHABUF_BIT) {
         _mesa_read_alpha_pixels(ctx, n, span->array->x, span->array->y,
                                 dest, span->array->mask);
      }
   }
   else {
      _mesa_read_rgba_span(ctx, ctx->DrawBuffer, n, span->x, span->y, dest);
   }

#if CHAN_BITS == 8
d64 1
d66 7
d79 1
a84 1

d86 1
a86 1
 * Apply glColorMask to a span of RGBA pixels.
d89 3
a91 2
_mesa_mask_rgba_array( GLcontext *ctx,
                       GLuint n, GLint x, GLint y, GLchan rgba[][4] )
d93 2
a94 1
   GLchan dest[MAX_WIDTH][4];
d104 6
a109 2
   _mesa_read_rgba_span( ctx, ctx->DrawBuffer, n, x, y, dest );
   for (i = 0; i < n; i++) {
d120 5
a124 1
   _mesa_read_rgba_span( ctx, ctx->DrawBuffer, n, x, y, dest );
d137 3
d141 2
a142 2
_mesa_mask_index_span( GLcontext *ctx, const struct sw_span *span,
                       GLuint index[] )
d144 1
a144 3
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   const GLuint msrc = ctx->Color.IndexMask;
   const GLuint mdest = ~msrc;
d146 1
a146 1
   GLuint i;
d148 1
a148 2
   ASSERT(span->arrayMask & SPAN_INDEX);
   ASSERT(span->end < MAX_WIDTH);
d150 2
a151 1
   if (span->arrayMask & SPAN_XY) {
d153 2
a154 15
      (*swrast->Driver.ReadCI32Pixels)(ctx, span->end, span->array->x,
                                       span->array->y, fbindexes,
                                       span->array->mask);

      for (i = 0; i < span->end; i++) {
         index[i] = (index[i] & msrc) | (fbindexes[i] & mdest);
      }
   }
   else {
      _mesa_read_index_span(ctx, ctx->DrawBuffer, span->end, span->x, span->y,
                            fbindexes );

      for (i = 0; i < span->end; i++) {
         index[i] = (index[i] & msrc) | (fbindexes[i] & mdest);
      }
d161 1
a161 1
 * Apply glIndexMask to a span of CI pixels.
d164 3
a166 2
_mesa_mask_index_array( GLcontext *ctx,
                        GLuint n, GLint x, GLint y, GLuint index[] )
d168 1
d170 1
a170 1
   GLuint fbindexes[MAX_WIDTH];
d173 1
a173 1
   _mesa_read_index_span( ctx, ctx->DrawBuffer, n, x, y, fbindexes );
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d4 1
a4 1
 * Version:  4.1
d6 1
a6 1
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
d39 1
d43 3
a45 1

d47 2
a48 2
_mesa_mask_rgba_span( GLcontext *ctx, const struct sw_span *span,
                     GLchan rgba[][4] )
a49 1
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
d51 2
d54 1
a58 8
#else
   const GLboolean rMask = ctx->Color.ColorMask[RCOMP];
   const GLboolean gMask = ctx->Color.ColorMask[GCOMP];
   const GLboolean bMask = ctx->Color.ColorMask[BCOMP];
   const GLboolean aMask = ctx->Color.ColorMask[ACOMP];
#endif
   const GLuint n = span->end;
   GLuint i;
d60 1
a60 16
   ASSERT(n < MAX_WIDTH);
   ASSERT(span->arrayMask & SPAN_RGBA);

   if (span->arrayMask & SPAN_XY) {
      (*swrast->Driver.ReadRGBAPixels)(ctx, n, span->array->x, span->array->y,
                                       dest, span->array->mask);
      if (SWRAST_CONTEXT(ctx)->_RasterMask & ALPHABUF_BIT) {
         _mesa_read_alpha_pixels(ctx, n, span->array->x, span->array->y,
                                 dest, span->array->mask);
      }
   }
   else {
      _mesa_read_rgba_span(ctx, ctx->DrawBuffer, n, span->x, span->y, dest);
   }

#if CHAN_BITS == 8
d64 1
d66 7
d79 1
a84 1

d86 1
a86 1
 * Apply glColorMask to a span of RGBA pixels.
d89 3
a91 2
_mesa_mask_rgba_array( GLcontext *ctx,
                       GLuint n, GLint x, GLint y, GLchan rgba[][4] )
d93 2
a94 1
   GLchan dest[MAX_WIDTH][4];
d104 6
a109 2
   _mesa_read_rgba_span( ctx, ctx->DrawBuffer, n, x, y, dest );
   for (i = 0; i < n; i++) {
d120 5
a124 1
   _mesa_read_rgba_span( ctx, ctx->DrawBuffer, n, x, y, dest );
d137 3
d141 2
a142 2
_mesa_mask_index_span( GLcontext *ctx, const struct sw_span *span,
                       GLuint index[] )
d144 1
a144 3
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   const GLuint msrc = ctx->Color.IndexMask;
   const GLuint mdest = ~msrc;
d146 1
a146 1
   GLuint i;
d148 1
a148 2
   ASSERT(span->arrayMask & SPAN_INDEX);
   ASSERT(span->end < MAX_WIDTH);
d150 2
a151 1
   if (span->arrayMask & SPAN_XY) {
d153 2
a154 15
      (*swrast->Driver.ReadCI32Pixels)(ctx, span->end, span->array->x,
                                       span->array->y, fbindexes,
                                       span->array->mask);

      for (i = 0; i < span->end; i++) {
         index[i] = (index[i] & msrc) | (fbindexes[i] & mdest);
      }
   }
   else {
      _mesa_read_index_span(ctx, ctx->DrawBuffer, span->end, span->x, span->y,
                            fbindexes );

      for (i = 0; i < span->end; i++) {
         index[i] = (index[i] & msrc) | (fbindexes[i] & mdest);
      }
d161 1
a161 1
 * Apply glIndexMask to a span of CI pixels.
d164 3
a166 2
_mesa_mask_index_array( GLcontext *ctx,
                        GLuint n, GLint x, GLint y, GLuint index[] )
d168 1
d170 1
a170 1
   GLuint fbindexes[MAX_WIDTH];
d173 1
a173 1
   _mesa_read_index_span( ctx, ctx->DrawBuffer, n, x, y, fbindexes );
@

