head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.05.16.16.27.49;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.20.00.44;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.00.44;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.04.03;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@
		    FreeType Optimization HOWTO



Introduction
============

  This file describes several ways to improve the performance of the
  FreeType  engine  on  specific  builds.   Each  `trick'  has  some
  drawbacks, be it on code size or portability.

  The  performance  improvement  cannot  be quantified  here  simply
  because id depends significantly on platforms _and_ compilers.



I. Tweaking the configuration file
==================================

  The FreeType configuration file  is named `ft_conf.h' and contains
  the definition  of various macros  that are used to  configure the
  engine at build time.

  Apart from  the Unix configuration  file, which is  generated when
  calling the `configure' script from the template called

    freetype/ft_conf.h.in    ,

  all configuration files are located in

    freetype/lib/arch/<system>/ft_conf.h    ,

  where  <system>  stands  for  your platform.   This  release  also
  provides an `ansi' build, i.e., the directory `lib/arch/ansi' used
  to compile with any ANSI-compliant compiler.

  The configuration macros that  relate to performance are described
  next.


  1. TT_CONFIG_OPTION_INTERPRETER_SWITCH
  --------------------------------------

    If set,  this macro builds  a bytecode interpreter which  uses a
    huge  `switch' statement  to  parse the  bytecode stream  during
    glyph hinting.

    If unset,  the interpreter  uses a big  jump table to  call each
    bytecode's routine.

    This macro is *set* by default.  However, it may be worthwile on
    some platforms to unset it.

    Note      that      this      macro      is      ignored      if
    TT_CONFIG_OPTION_NO_INTERPRETER is set.


  2. TT_CONFIG_OPTION_STATIC_INTERPRETER
  --------------------------------------

    If set,  this macro builds  a bytecode interpreter which  uses a
    static variable  to store its  state.  On some  processors, this
    will produce code which is bigger but slightly faster.

    Note  that you  should NOT  DEFINE  this macro  when building  a
    thread-safe version of the engine.

    This macro is *unset* by default.


  3. TT_CONFIG_OPTION_STATIC_RASTER
  ---------------------------------

    If set,  this macro  builds a scan-line  converter which  uses a
    static variable to store  its state.  On some processors, though
    depending on the compiler used,  this will produce code which is
    bigger but moderately faster.

    Note  that you  should NOT  DEFINE  this macro  when building  a
    thread-safe version of the engine.

    This macro is *unset* by  default.  We do not recommend using it
    except for extreme cases where a performance `edge' is needed.



II. Replacing some components with optimized versions
=====================================================

  You can also, in order to improve performance, replace one or more
  components  from   the  original  source  files.    Here  are  our
  suggestions.


  1. Use memory-mapped files whenever available
  ---------------------------------------------

    Loading a  glyph from a  TrueType file needs many  random seeks,
    which take a lot of time when using disk-based files.

    Whenever   possible,  use   memory-mappings   to  improve   load
    performance dramatically.  For an example, see the source file
  
      freetype/lib/arch/unix/ttmmap.c

    which uses Unix memory-mapped files.


  2. Replace the computation routines in `ttcalc.c'
  ---------------------------------------------------

    This file contains many  computation routines that can easily be
    replaced by  inline-assembly, tailored for  a specific processor
    and/or compiler.

    After  heavy  testing,  we  have  found  that  these  functions,
    especially TT_MulDiv(),  are the ones that  are most extensively
    used and called when loading glyphs from a font file.

    We do not provide inline-assembly  with this release, as we want
    to  emphasize the  portability  of our  library.  However,  when
    working on a specific project  where the hardware is known to be
    fixed  (like on  an  embedded system),  great performance  gains
    could be achieved by replacing these routines.

    (By the way, the square root  function is not optimal, but it is
    very  seldom  called.   However,  its  accuracy  is  _critical_.
    Replacing it with a fast  but inaccurate algorithm will ruin the
    rendering of glyphs at small sizes.)



III. Measuring performance improvements
=======================================

  Once you  have chosen some  improvements and rebuilt  the library,
  some quick ways to measure the `new' speed are:

  - Run  the test program  `ftlint' on  a directory  containing many
    TrueType fonts, and measure the time it takes.  On Unix, you can
    use the shell command `time' to do it like in

      % time test/ftlint 10 /ttfonts/*.ttf

    This will  measure the  performance improvement of  the TrueType
    interpreter.

  - Run the test program `fttimer' on a font containing many complex
    glyphs (the  latest available versions of Times  or Arial should
    do it), probaby using anti-aliasing, as in:

      % time test/fttimer -g /ttfonts/arial.ttf

  Compare the results of several of these runs for each build.


--- end of OPTIMIZE ---
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
