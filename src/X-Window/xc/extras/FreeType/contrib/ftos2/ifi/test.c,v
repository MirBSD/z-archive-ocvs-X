head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.27.39;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.20.00.39;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.00.39;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.19.23;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.03.48;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@
#include <os2.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "32pmifi.h"

//#define USE_ORIG
#ifdef USE_ORIG
   #pragma import (fdhdr, "FONT_DRIVER_DISPATCH_TABLE", "TRUETYPE", 0)
#else
  #if defined USE_ATM
    #pragma import (fdhdr, "FONT_DRIVER_DISPATCH_TABLE", "PMATM", 0)
  #else
    #pragma import (fdhdr, "FONT_DRIVER_DISPATCH_TABLE", "FREETYPE", 0)
  #endif
#endif

extern FDHEADER fdhdr;

char *fontnames[20] = {
 "G:\\OS2\\MDOS\\WINOS2\\SYSTEM\\SYMBOL.TTF",
 "G:\\OS2\\MDOS\\WINOS2\\SYSTEM\\WINGDING.TTF",
 "G:\\PSFONTS\\ARIALB.ttf",
 "G:\\PSFONTS\\ARIALI.ttf",
 "G:\\PSFONTS\\ARIALZ.ttf",
 "G:\\PSFONTS\\COUR.TTF",
 "G:\\PSFONTS\\COURB.TTF",
 "G:\\PSFONTS\\COURI.TTF",
 "G:\\PSFONTS\\COURZ.TTF",
 "G:\\PSFONTS\\ARIAL.ttf",
 "G:\\PSFONTS\\TIMESB.TTF",
 "G:\\PSFONTS\\TIMESI.ttf",
 "G:\\PSFONTS\\TIMESZ.ttf",
 "G:\\PSFONTS\\TIMES.TTF",
 "G:\\PSFONTS\\ARIBLK.ttf",
 "G:\\CHINESE\\AVSV.TTF",
 "G:\\CHINESE\\MINGLI.TTC",
 "D:\\PSFONTS\\TNRMT30.TTF"
};

#define FNTNAME1 "\\PSFONTS\\TIMES.TTF"
#ifdef USE_ATM
   #define FNTNAME2 "\\PSFONTS\\helv.ofm"
#else
   #define FNTNAME2 "\\PSFONTS\\symbol.tTf"
#endif

#define BUFSIZE 32768

void ShowChar(PCHARATTR pca, PBITMAPMETRICS pbmm) {
   int i, j;
   int bufwidth = ((pbmm->sizlExtent.cx + 31) & -32) / 8;

   for (i =0; i <  pbmm->sizlExtent.cy; i++) {
      for (j = 0; j < bufwidth * 8; j++)
         if (pca->pBuffer[i * bufwidth + j / 8] & (1 << (7-(j % 8))))
            printf("*");
         else
            printf(" ");
      printf("\n");
   }
}

void main(int argc, char **argv)
{
   char          fname[260];
   PFDDISPATCH   pfdisp;
   LONG          rc;
   HFF           hff, hff2;      /* font file */
   HFC           hfc, hfc2;      /* font context */
   static   IFIMETRICS    ifimet[12];      /* IFI metrics */
   CONTEXTINFO   ci;
   CHARATTR      charattr; /* character attributes */
   BITMAPMETRICS bmm;      /* bit-map metrics */
   PBYTE         buf;
   int           glyph = 0, i, j;
   int           numFaces;
   int           faceIndex = 0;

   switch (argc) {
      case 4:
         strcpy(fname, argv[1]);
         glyph = atoi(argv[2]);
         faceIndex = atoi(argv[3]);
         break;

      case 2:
         glyph = atoi(argv[1]);
      case 1:
         strcpy(fname, FNTNAME1);
         break;

      default:
         strcpy(fname, argv[1]);
         glyph = atoi(argv[2]);
   }

   buf = (PBYTE)malloc(BUFSIZE);
   if (strncmp("OS/2 FONT DRIVER", fdhdr.strId, 16)) {
      printf("Invalid Font Driver\n");
      return;
   }
   printf("Font Driver OK, ");
   printf("Version %d\n", fdhdr.ulVersion);
   printf("Technology: %s\n", fdhdr.szTechnology);

   hff = fdhdr.pfddisp->FdLoadFontFile(fname);
   printf("Loading font... HFF = %X\n", hff);
   if (hff == (HFF)0xFFFFFFFF)
      return;

/*   rc = fdhdr.pfddisp->FdConvertFontFile("G:\\PSFONTS\\TIMES.TTF",
           "G:\\PSFONTS", buf); */

#if 0
   for (i = 0; i < 18; i++) {
      hff = fdhdr.pfddisp->FdLoadFontFile(fontnames[i]);
      if (hff == (HFF)-1) {
         printf("x");
         continue;
      }
      numFaces = fdhdr.pfddisp->FdQueryFaces(hff, NULL, 0, -1, 0);
      if (numFaces < 0) {
         printf("x");
         continue;
      }
      for (j = 0; j < numFaces; j++) {
         rc = fdhdr.pfddisp->FdQueryFaces(hff, &ifimet[0], 238, 1, j);
         if (rc < 0) {
            printf("x");
            continue;
         }
      }

      rc = fdhdr.pfddisp->FdUnloadFontFile(hff);
      if (rc)
         printf("x");
      else
         printf(".");
   }
   printf("\n");
#endif

   hff = fdhdr.pfddisp->FdLoadFontFile(FNTNAME2);
   hff = fdhdr.pfddisp->FdLoadFontFile(fname);
   rc = fdhdr.pfddisp->FdUnloadFontFile(hff);

   hff = fdhdr.pfddisp->FdLoadFontFile(fname);
   printf("Loading font... HFF = %X\n", hff);
   if (hff == (HFF)0xFFFFFFFF)
      return;
   numFaces = fdhdr.pfddisp->FdQueryFaces(hff, NULL, 0, -1, 0);
   printf("Number of faces = %d\n", numFaces);
   rc = fdhdr.pfddisp->FdQueryFaces(hff, &ifimet[0], sizeof(IFIMETRICS), numFaces, 0);
   printf("Querying faces... RC = %X\n", rc);
   hfc = fdhdr.pfddisp->FdOpenFontContext(hff, faceIndex);
   printf("Opening context... HFC = %X\n", hfc);
   if (hfc == (HFC)0xFFFFFFFF) {
      rc = fdhdr.pfddisp->FdUnloadFontFile(hff);
      printf("Unloading font... RC = %X\n", rc);
   }
   ci.cb = sizeof(ci);
   ci.fl = 0;
/*   ci.sizlPPM.cx = 3618;
   ci.sizlPPM.cy = 3622;
   ci.pfxSpot.x = 46340;
   ci.pfxSpot.y = 46340;
   ci.matXform.eM11 = 511;
   ci.matXform.eM12 = 0;
   ci.matXform.eM21 = 0;
   ci.matXform.eM22 = 511; */
   ci.sizlPPM.cx = 3622;
   ci.sizlPPM.cy = 3622;
   ci.pfxSpot.x = 46340;
   ci.pfxSpot.y = 46340;
   ci.matXform.eM11 = 768;
   ci.matXform.eM12 = 0;
   ci.matXform.eM21 = 0;
   ci.matXform.eM22 = 768;

   rc = fdhdr.pfddisp->FdQueryFaceAttr(hfc, FD_QUERY_ABC_WIDTHS, buf,
                                       sizeof(ABC_TRIPLETS), NULL, glyph);
   printf("Querying face attrs... RC = %d\n", rc);
   rc = fdhdr.pfddisp->FdQueryFaceAttr(hfc, FD_QUERY_KERNINGPAIRS, buf,
                                       ifimet[0].cKerningPairs * sizeof(FD_KERNINGPAIRS),
                                       NULL, 0);


   rc = fdhdr.pfddisp->FdSetFontContext(hfc, &ci);
   printf("Setting context... rc = %X\n", rc);

   charattr.cb = sizeof(charattr);
   charattr.iQuery = FD_QUERY_BITMAPMETRICS | FD_QUERY_CHARIMAGE;
//   charattr.iQuery = FD_QUERY_OUTLINE;
   charattr.gi = glyph;
   charattr.pBuffer = buf;
   charattr.cbLen = BUFSIZE;
   if (rc == -1)
      return;
   rc = fdhdr.pfddisp->FdQueryCharAttr(hfc, &charattr, &bmm);
   printf("Querying char attrs... bytes = %d\n", rc);
   ShowChar(&charattr, &bmm);

//   rc = fdhdr.pfddisp->FdQueryCharAttr(hfc, &charattr, &bmm, NULL);
//   printf("Querying char attrs... bytes = %d\n", rc);

   hff2 = fdhdr.pfddisp->FdLoadFontFile(FNTNAME2);
   printf("Loading font... HFF = %X\n", hff2);
   if (hff2 == (HFF)0xFFFFFFFF)
      return;

   charattr.cbLen = 0;
   rc = fdhdr.pfddisp->FdQueryCharAttr(hfc, &charattr, &bmm);
   printf("Querying char attrs... bytes = %d\n", rc);
   rc = fdhdr.pfddisp->FdQueryFaces(hff2, &ifimet[0], sizeof(ifimet), 1, 0);
   printf("Querying faces... RC = %X\n", rc);
   hfc2 = fdhdr.pfddisp->FdOpenFontContext(hff2, 0);
   printf("Opening context... HFC = %X\n", hfc2);
   if (hfc2 == (HFC)0xFFFFFFFF) {
      rc = fdhdr.pfddisp->FdUnloadFontFile(hff2);
      printf("Unloading font... RC = %X\n", rc);
   }
   rc = fdhdr.pfddisp->FdCloseFontContext(hfc);
   printf("Closing context... RC = %X\n", rc);
   rc = fdhdr.pfddisp->FdUnloadFontFile(hff);
   printf("Unloading font... RC = %X\n", rc);
   rc = fdhdr.pfddisp->FdUnloadFontFile(hff);
   printf("Unloading font... RC = %X\n", rc);

   rc = fdhdr.pfddisp->FdCloseFontContext(hfc2);
   printf("Closing context... RC = %X\n", rc);
   rc = fdhdr.pfddisp->FdUnloadFontFile(hff2);
   printf("Unloading font... RC = %X\n", rc);
   rc = fdhdr.pfddisp->FdUnloadFontFile(hff2);
   printf("Unloading font... RC = %X\n", rc);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@a0 1
/* $XFree86: xc/extras/FreeType/contrib/ftos2/ifi/test.c,v 1.2 2003/01/12 03:55:43 tsi Exp $ */
d11 1
a11 1
#  pragma import (fdhdr, "FONT_DRIVER_DISPATCH_TABLE", "TRUETYPE", 0)
d13 5
a17 5
#  if defined USE_ATM
#    pragma import (fdhdr, "FONT_DRIVER_DISPATCH_TABLE", "PMATM", 0)
#  else
#    pragma import (fdhdr, "FONT_DRIVER_DISPATCH_TABLE", "FREETYPE", 0)
#  endif
d45 1
a45 1
#  define FNTNAME2 "\\PSFONTS\\helv.ofm"
d47 1
a47 1
#  define FNTNAME2 "\\PSFONTS\\symbol.tTf"
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@a0 1
/* $XFree86: xc/extras/FreeType/contrib/ftos2/ifi/test.c,v 1.2 2003/01/12 03:55:43 tsi Exp $ */
d11 1
a11 1
#  pragma import (fdhdr, "FONT_DRIVER_DISPATCH_TABLE", "TRUETYPE", 0)
d13 5
a17 5
#  if defined USE_ATM
#    pragma import (fdhdr, "FONT_DRIVER_DISPATCH_TABLE", "PMATM", 0)
#  else
#    pragma import (fdhdr, "FONT_DRIVER_DISPATCH_TABLE", "FREETYPE", 0)
#  endif
d45 1
a45 1
#  define FNTNAME2 "\\PSFONTS\\helv.ofm"
d47 1
a47 1
#  define FNTNAME2 "\\PSFONTS\\symbol.tTf"
@

