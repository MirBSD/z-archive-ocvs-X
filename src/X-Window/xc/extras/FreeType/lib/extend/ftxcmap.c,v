head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.16.27.59;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.20.00.50;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.00.50;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.04.16;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove a bunch of files not used in MirBSD - clean tree. People who want them got cvs.
@
text
@/*******************************************************************
 *
 *  ftxcmap.h                                                   1.0
 *
 *    API extension for iterating over Cmaps
 *
 *  Copyright 1996-1999 by Juliusz Chroboczek,
 *  David Turner, Robert Wilhelm, and Werner Lemberg.
 *
 *  This file is part of the FreeType project, and may only be used
 *  modified and distributed under the terms of the FreeType project
 *  license, LICENSE.TXT.  By continuing to use, modify, or distribute
 *  this file you indicate that you have read the license and
 *  understand and accept it fully.
 *
 *
 ******************************************************************/

#include "ftxcmap.h"

#include "tttypes.h"
#include "ttobjs.h"
#include "tttables.h"

static Long    charmap_first4  ( PCMap4, UShort* );
static Long    charmap_next4   ( PCMap4, UShort, UShort* );
static Long    charmap_last4   ( PCMap4, UShort* );
static UShort  charmap_find_id4( PCMap4, UShort, TCMap4Segment*, UShort );


/*******************************************************************
 *
 *  Function    :  TT_CharMap_First
 *
 *  Description :  Returns the first valid character code in a
 *                 given character map.  Also returns the corresponding
 *                 glyph index.
 *
 *  Input  :  charMap     handle to the target character map
 *            id          address where the glyph index will be
 *                        be returned in case of success
 *
 *  Output :  First valid character code.  -1 in case of failure.
 *
 *  Notes  :
 *
 ******************************************************************/

EXPORT_FUNC
TT_Long  TT_CharMap_First( TT_CharMap  charMap,
                           TT_UShort*  id )
{
  PCMapTable  cmap;
  UShort      i, c;


  if ( !( cmap = HANDLE_CharMap( charMap ) ) )
    return -1;

  switch ( cmap->format )
  {
  case 0:
    if ( id )
      *id = cmap->c.cmap0.glyphIdArray[0];
    return 0;

  case 4:
    return charmap_first4( &cmap->c.cmap4, id );

  case 6:
    if ( cmap->c.cmap6.entryCount < 1 )
      return -1;

    if ( id )
      *id = cmap->c.cmap6.glyphIdArray[0];
    return cmap->c.cmap6.firstCode;

  default:
    /* Now loop from 0 to 65535. We can't use a simple "for' on */
    /* 16-bits systems, hence the "strange" loop here..         */
    i = 0;
    do
    {
      c = TT_Char_Index( charMap, i );
      if ( c > 0 )
      {
        if ( id )
          *id = c;
        return i;
      }
      i++;
    } while ( i != 0 );  /* because i is UShort! */

    return -1;
  }
}


static Long  charmap_first4( PCMap4   cmap4,
                             UShort*  id )
{
  UShort firstCode;


  if ( cmap4->segCountX2 / 2 < 1 )
    return -1;

  firstCode = cmap4->segments[0].startCount;

  if ( id )
    *id = charmap_find_id4( cmap4, firstCode, &(cmap4->segments[0]), 0 );

  return firstCode;
}


/*******************************************************************
 *
 *  Function    :  TT_CharMap_Next
 *
 *  Description :  Returns the next valid character code in a given
 *                 charMap.
 *
 *  Input  : charMap    handle to the target char. map
 *           index      starting character code
 *           id         address where the glyph index of the next
 *                      character will be returned
 *
 *  Output : Next valid character code after 'index'.  -1 in case
 *           of failure.
 *
 *  Notes  :
 *
 ******************************************************************/

EXPORT_FUNC
TT_Long  TT_CharMap_Next( TT_CharMap  charMap,
                          TT_UShort   index,
                          TT_UShort*  id )
{
  PCMapTable  cmap;
  UShort      i, c;


  cmap = HANDLE_CharMap( charMap );
  if ( !cmap )
    return -1;

  switch ( cmap->format )
  {
  case 0:
    if ( index < 255 )
    {
      if ( id )
        *id = cmap->c.cmap0.glyphIdArray[index + 1];
      return index + 1;
    }
    else
      return -1;

  case 4:
    return charmap_next4( &cmap->c.cmap4, index, id );

  case 6:
    {
      UShort  firstCode = cmap->c.cmap6.firstCode;


      if ( index + 1 < firstCode + cmap->c.cmap6.entryCount )
      {
        if ( id )
          *id = cmap->c.cmap6.glyphIdArray[index + 1 - firstCode];
        return index + 1;
      }
      else
        return -1;
    }

  default:
    /* Now loop from 0 to 65535. We can't use a simple "for" on */
    /* 16-bits systems, hence the "strange" loop here..         */
    i = 0;
    do
    {
      c = TT_Char_Index( charMap, i );
      if ( c > 0 )
      {
        if ( id )
          *id = c;
        return i;
      }
      i++;
    } while ( i != 0 );  /* because i is UShort! */

    return -1;
  }
}


static Long  charmap_next4( PCMap4   cmap4,
                            UShort   charCode,
                            UShort*  id)
{
  UShort         segCount, nextCode;
  UShort         i;
  TCMap4Segment  seg4;


  if ( charCode == 0xFFFF )
    return -1;                /* get it out of the way now */

  segCount = cmap4->segCountX2 / 2;

  for ( i = 0; i < segCount; i++ )
    if ( charCode < cmap4->segments[i].endCount )
      break;

  /* Safety check - even though the last endCount should be 0xFFFF */
  if ( i >= segCount )
    return -1;

  seg4 = cmap4->segments[i];

  if ( charCode < seg4.startCount )
    nextCode = seg4.startCount;
  else
    nextCode = charCode + 1;

  if ( id )
    *id = charmap_find_id4( cmap4, nextCode, &seg4, i );

  return nextCode;
}


static UShort
charmap_find_id4( PCMap4          cmap4,
                  UShort          charCode,
                  TCMap4Segment*  seg4,
                  UShort          i )
{
  UShort  index1;


  if ( seg4->idRangeOffset == 0 )
    return (charCode + seg4->idDelta) & 0xFFFF;
  else
  {
    index1 = seg4->idRangeOffset / 2 + charCode-seg4->startCount -
             ( cmap4->segCountX2 / 2 - i );

    if ( index1 >= cmap4->numGlyphId || cmap4->glyphIdArray[index1] == 0 )
      return 0;
    else
      return (cmap4->glyphIdArray[index1] + seg4->idDelta) & 0xFFFF;
  }
}


/*******************************************************************
 *
 *  Function    :  TT_CharMap_Last
 *
 *  Description :  Returns the last valid character code in a
 *                 given character map.  Also returns the corresponding
 *                 glyph index.
 *
 *  Input  :  charMap     handle to the target character map
 *            id          address where the glyph index will be
 *                        be returned in case of success
 *
 *  Output :  Last valid character code.  -1 in case of failure.
 *
 *  Notes  :
 *
 ******************************************************************/

EXPORT_FUNC
TT_Long  TT_CharMap_Last( TT_CharMap  charMap,
                          TT_UShort*  id )
{
  PCMapTable  cmap;
  UShort      i, c;


  if ( !( cmap = HANDLE_CharMap( charMap ) ) )
    return -1;

  switch ( cmap->format )
  {
  case 0:
    if ( id )
      *id = cmap->c.cmap0.glyphIdArray[255];
    return 255;

  case 4:
    return charmap_last4( &cmap->c.cmap4, id );

  case 6:
    if ( cmap->c.cmap6.entryCount < 1 )
      return -1;

    if ( id )
      *id = cmap->c.cmap6.glyphIdArray[cmap->c.cmap6.entryCount - 1];
    return cmap->c.cmap6.firstCode + cmap->c.cmap6.entryCount - 1;

  default:
    i = 65535;
    do
    {
      c = TT_Char_Index( charMap, i );
      if ( c > 0 )
      {
        if ( id )
          *id = c;
        return i;
      }
      i--;
    } while ( i != 0 );

    return -1;
  }
}


static Long  charmap_last4( PCMap4   cmap4,
                            UShort*  id )
{
  UShort lastCode;


  if ( cmap4->segCountX2 / 2 < 1 )
    return -1;

  lastCode = cmap4->segments[cmap4->segCountX2 / 2 - 1].endCount;

  if ( id )
    *id = charmap_find_id4( cmap4,
                            lastCode,
                            &(cmap4->segments[cmap4->segCountX2 / 2 - 1]),
                            0 );

  return lastCode;
}


/* END */
@


1.1
log
@Initial revision
@
text
@@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
