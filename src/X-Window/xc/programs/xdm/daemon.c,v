head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.10.15;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.10.15;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.39.38;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.18.38.23;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.28.20;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Xorg: daemon.c,v 1.4 2001/02/09 02:05:40 xorgcvs Exp $ */
/*

Copyright 1988, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.

*/
/* $XFree86: xc/programs/xdm/daemon.c,v 3.17 2001/12/14 20:01:21 dawes Exp $ */

/*
 * xdm - display manager daemon
 * Author:  Keith Packard, MIT X Consortium
 */

#include <X11/Xos.h>

#if defined(SVR4) || defined(USG)
#include <termios.h>
#else
#include <sys/ioctl.h>
#endif
#if defined(__osf__) || defined(linux) || defined(__GNU__) || defined(__CYGWIN__)
#define setpgrp setpgid
#endif
#ifdef hpux
#include <sys/ptyio.h>
#endif
#include <errno.h>
#include <sys/types.h>
#ifdef X_NOT_POSIX
#define Pid_t int
#else
#define Pid_t pid_t
#endif

#include <stdlib.h>

#include "dm.h"
#include "dm_error.h"

void
BecomeOrphan (void)
{
    Pid_t child_id;
#ifndef CSRG_BASED
    int stat;
#endif

    /*
     * fork so that the process goes into the background automatically. Also
     * has a nice side effect of having the child process get inherited by
     * init (pid 1).
     * Separate the child into its own process group before the parent
     * exits.  This eliminates the possibility that the child might get
     * killed when the init script that's running xdm exits.
     */

    child_id = fork();
    switch (child_id) {
    case 0:
	/* child */
	break;
    case -1:
	/* error */
	LogError("daemon fork failed, errno = %d\n", errno);
	break;

    default:
	/* parent */

#ifndef CSRG_BASED
#if defined(SVR4) || defined(__QNXNTO__)
	stat = setpgid(child_id, child_id);
	/* This gets error EPERM.  Why? */
#else
#if defined(SYSV)
	stat = 0;	/* don't know how to set child's process group */
#else
	stat = setpgrp(child_id, child_id);
	if (stat != 0)
	    LogError("setting process grp for daemon failed, errno = %d\n",
		     errno);
#endif
#endif
#endif /* !CSRG_BASED */
	exit (0);
    }
}

void
BecomeDaemon (void)
{
#ifndef CSRG_BASED
    register int i;

    /*
     * Close standard file descriptors and get rid of controlling tty
     */

#if defined(SYSV) || defined(SVR4) || defined(__QNXNTO__)
    setpgrp ();
#else
    setpgrp (0, getpid());
#endif

    close (0); 
    close (1);
    close (2);

#ifndef __EMX__
#if !((defined(SYSV) || defined(SVR4)) && defined(i386)) && !defined(__CYGWIN__)
    if ((i = open ("/dev/tty", O_RDWR)) >= 0) {	/* did open succeed? */
#if defined(USG) && defined(TCCLRCTTY)
	int zero = 0;
	(void) ioctl (i, TCCLRCTTY, &zero);
#else
#if (defined(SYSV) || defined(SVR4)) && defined(TIOCTTY)
	int zero = 0;
	(void) ioctl (i, TIOCTTY, &zero);
#else
	(void) ioctl (i, TIOCNOTTY, (char *) 0);    /* detach, BSD style */
#endif
#endif
	(void) close (i);
    }
#endif /* !((SYSV || SVR4) && i386) */
#endif /* !__EMX__ */

    /*
     * Set up the standard file descriptors.
     */
    (void) open ("/", O_RDONLY);	/* root inode already in core */
    (void) dup2 (0, 1);
    (void) dup2 (0, 2);
#else
    daemon (0, 0);
#endif /* CSRG_BASED */
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d29 1
a29 1
/* $XFree86: xc/programs/xdm/daemon.c,v 3.22 2004/01/11 00:19:30 dawes Exp $ */
a36 5
#include <sys/types.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>

d38 2
a39 2
#if defined(USG)
# include <termios.h>
d41 4
a44 1
# include <sys/ioctl.h>
d47 1
a47 1
# include <sys/ptyio.h>
d49 2
a50 1

d52 1
a52 1
# define Pid_t int
d54 1
a54 1
# define Pid_t pid_t
d57 2
d62 6
a67 2
#if defined(__GLIBC__) || defined(CSRG_BASED)
#define HAS_DAEMON
d70 18
a87 3
#ifndef X_NOT_POSIX
#define HAS_SETSID
#endif
d89 2
a90 2
#ifndef HAS_SETSID
#define setsid() MySetsid()
d92 12
a103 5
static Pid_t
MySetsid(void)
{
#if defined(TIOCNOTTY) || defined(TCCLRCTTY) || defined(TIOCTTY)
    int fd;
a104 12
    int stat;

    fd = open("/dev/tty", O_RDWR);
    if (fd >= 0) {
#if defined(USG) && defined(TCCLRCTTY)
       int zero = 0;
       (void) ioctl (fd, TCCLRCTTY, &zero);
#elif (defined(SYSV) || defined(SVR4)) && defined(TIOCTTY)
       int zero = 0;
       (void) ioctl (i, TIOCTTY, &zero);
#elif defined(TIOCNOTTY)
       (void) ioctl (i, TIOCNOTTY, (char *) 0);    /* detach, BSD style */
d106 2
a107 1
        close(fd);
a108 6

#if defined(SYSV) || defined(__QNXNTO__)
    return setpgrp();
#else
    return setpgid(0, getpid());
#endif
a109 1
#endif /* !HAS_SETSID */
a110 1
/* detach */
d114 6
d121 2
a122 3
    /* If our C library has the daemon() function, just use it. */
#ifdef HAS_DAEMON
    daemon (0, 0);
d124 2
a125 19
    switch (fork()) {
    case -1:
       /* error */
       LogError("daemon fork failed, %s\n", strerror(errno));
       exit(1);
       break;
    case 0:
       /* child */
       break;
    default:
       /* parent */
       exit(0);
    }

    if (setsid() == -1) {
       LogError("setting session id for daemon failed: %s\n",
                  strerror(errno));
       exit(1);
    }
d127 1
a127 3
    chdir("/");

    close (0);
d131 18
d153 1
a153 1
    (void) open ("/dev/null", O_RDWR);
d156 3
a158 1
#endif /* HAS_DAEMON */
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d29 1
a29 1
/* $XFree86: xc/programs/xdm/daemon.c,v 3.20 2002/12/04 16:53:39 tsi Exp $ */
a36 4
#include <sys/types.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
d38 4
a41 7
#ifndef __GLIBC__
# if defined(__osf__) || \
     defined(__GNU__) || \
     defined(__CYGWIN__) || \
     defined(linux)
#  define setpgrp setpgid
# endif
d43 2
a44 5

#if defined(SVR4) || defined(USG) || defined(__GLIBC__)
# include <termios.h>
#else
# include <sys/ioctl.h>
d47 1
a47 1
# include <sys/ptyio.h>
d49 2
a50 1

d52 1
a52 1
# define Pid_t int
d54 1
a54 1
# define Pid_t pid_t
d57 2
d66 3
d79 1
a79 1
    child_id = fork ();
d86 1
a86 1
	LogError ("daemon fork failed, errno = %d\n", errno);
d89 1
a89 1
    default: {
d92 1
a92 1
#if defined(CSRG_BASED) || defined(SYSV) || defined(SVR4) || defined(__QNXNTO__) || defined(__GLIBC__)
d94 13
a106 15
	    /* This gets error EPERM.  Why? */
	    int stat = setpgid(child_id, child_id);
#elif defined(SYSV)
	    /* don't know how to set child's process group */
	    int stat = 0;
#elif defined(__GLIBC__)
	    int stat = setpgrp ();
#else
	    int stat = setpgrp (child_id, child_id);
#endif
	    if (stat != 0)
		LogError ("setting process group for daemon failed: %s\n",
			  strerror(errno));
#endif /* ! (CSRG_BASED || SYSV || SVR4 || __QNXNTO__ || __GLIBC__) */
	}
d114 3
d121 2
a122 3
    /* If our C library has the daemon() function, just use it. */
#if defined(__GLIBC__) || defined(CSRG_BASED)
    daemon (0, 0);
d124 2
a125 7
    int i;

# if defined(SYSV) || defined(SVR4) || defined(__QNXNTO__)
    setpgrp ();
# else
    setpgrp (0, getpid ());
# endif
d127 1
a127 1
    close (0);
d131 2
a132 2
# if !defined(__UNIXOS2__) && !defined(__CYGWIN__)
#  if !((defined(SYSV) || defined(SVR4)) && defined(i386))
d134 1
a134 1
#   if defined(USG) && defined(TCCLRCTTY)
d137 2
a138 2
#   else
#    if (defined(SYSV) || defined(SVR4)) && defined(TIOCTTY)
d141 1
a141 1
#    else
d143 2
a144 2
#    endif
#   endif
d147 2
a148 2
#  endif /* !((SYSV || SVR4) && i386) */
# endif /* !__UNIXOS2__ && !__CYGWIN__*/
d156 3
a158 1
#endif
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d29 1
a29 1
/* $XFree86: xc/programs/xdm/daemon.c,v 3.22 2004/01/11 00:19:30 dawes Exp $ */
d42 8
d51 1
a51 1
#if defined(USG)
d69 2
a70 13
#if defined(__GLIBC__) || defined(CSRG_BASED)
#define HAS_DAEMON
#endif

#ifndef X_NOT_POSIX
#define HAS_SETSID
#endif

#ifndef HAS_SETSID
#define setsid() MySetsid()

static Pid_t
MySetsid(void)
d72 1
a72 4
#if defined(TIOCNOTTY) || defined(TCCLRCTTY) || defined(TIOCTTY)
    int fd;
#endif
    int stat;
d74 8
a81 13
    fd = open("/dev/tty", O_RDWR);
    if (fd >= 0) {
#if defined(USG) && defined(TCCLRCTTY)
       int zero = 0;
       (void) ioctl (fd, TCCLRCTTY, &zero);
#elif (defined(SYSV) || defined(SVR4)) && defined(TIOCTTY)
       int zero = 0;
       (void) ioctl (i, TIOCTTY, &zero);
#elif defined(TIOCNOTTY)
       (void) ioctl (i, TIOCNOTTY, (char *) 0);    /* detach, BSD style */
#endif
        close(fd);
    }
d83 22
a104 2
#if defined(SYSV) || defined(__QNXNTO__)
    return setpgrp();
d106 1
a106 1
    return setpgid(0, getpid());
d108 7
a115 1
#endif /* !HAS_SETSID */
a116 1
/* detach */
d120 3
d125 1
a125 1
#ifdef HAS_DAEMON
d128 1
a128 19
    switch (fork()) {
    case -1:
       /* error */
       LogError("daemon fork failed, %s\n", strerror(errno));
       exit(1);
       break;
    case 0:
       /* child */
       break;
    default:
       /* parent */
       exit(0);
    }

    if (setsid() == -1) {
       LogError("setting session id for daemon failed: %s\n",
                  strerror(errno));
       exit(1);
    }
d130 5
a134 1
    chdir("/");
d140 18
d162 1
a162 1
    (void) open ("/dev/null", O_RDWR);
d165 1
a165 1
#endif /* HAS_DAEMON */
@


