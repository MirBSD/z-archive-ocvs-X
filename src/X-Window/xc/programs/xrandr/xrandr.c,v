head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.11.02;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.11.02;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.41.03;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.29.31;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * $XFree86: xc/programs/xrandr/xrandr.c,v 1.8 2001/07/11 16:40:32 keithp Exp $
 *
 * Copyright © 2001 Keith Packard, member of The XFree86 Project, Inc.
 * Copyright © 2001 Compaq Computer Corporation
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard or Compaq not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD and COMPAQ DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 * Blame Jim Gettys for any bugs...
 */

#include <stdio.h>
#include <X11/Xlib.h>
#include <X11/Xproto.h>
#include <X11/extensions/Xrandr.h>
#include <string.h>
#include <stdlib.h>

static char *program_name;

static char *direction[5] = {
  "normal", 
  "left", 
  "inverted", 
  "right",
  "\n"};


static void
usage(void)
{
  fprintf(stderr, "usage: %s [options]\n", program_name);
  fprintf(stderr, "  where options are:\n");
  fprintf(stderr, "  -display <display> or -d <display>\n");
  fprintf(stderr, "  -help\n");
  fprintf(stderr, "  -o <normal,inverted,left,right,0,1,2,3>\n");
  fprintf(stderr, "   or --orientation <normal,inverted,left,right,0,1,2,3>\n");
  fprintf(stderr, "  -q                or --query\n");
  fprintf(stderr, "  -s <size>         or --size <size>\n");
  fprintf(stderr, "  -v                or --verbose\n");
  fprintf(stderr, "                    or --screen <screen>\n");
  
  exit(1);
  /*NOTREACHED*/
}

int
main (int argc, char **argv)
{
  Display       *dpy;
  XRRScreenSize *sizes;
  XRRScreenConfiguration *sc;
  int		nsize;
  Window	root;
  Status	status = RRSetConfigFailed;
  int		rot = -1;
  int		verbose = 0, query = 0;
  Rotation	rotation, current_rotation, rotations;
  XRRScreenChangeNotifyEvent event;    
  char          *display_name = NULL;
  int 		i;
  SizeID	current_size;
  VisualGroupID	current_visual_group;
  int		size = -1;
  int		dirind = 0;
  int		setit = 0;
  int		screen = -1;

  program_name = argv[0];
  if (argc == 1) query = 1;
  for (i = 1; i < argc; i++) {
    if (!strcmp ("-display", argv[i]) || !strcmp ("-d", argv[i])) {
      if (++i>=argc) usage ();
      display_name = argv[i];
      continue;
    }
    if (!strcmp("-help", argv[i])) {
      usage();
    }
    if (!strcmp ("-v", argv[i]) || !strcmp ("--verbose", argv[i])) {
      verbose = 1;
      continue;
    }
    if (!strcmp ("-s", argv[i]) || !strcmp ("--size", argv[i])) {
      if (++i>=argc) usage ();
      size = atoi (argv[i]);
      if (size < 0) usage();
      setit = 1;
      continue;
    }
    if (!strcmp ("--screen", argv[i])) {
      if (++i>=argc) usage ();
      screen = atoi (argv[i]);
      if (screen < 0) usage();
      continue;
    }
    if (!strcmp ("-q", argv[i]) || !strcmp ("--query", argv[i])) {
      query = 1;
      continue;
    }
    if (!strcmp ("-o", argv[i]) || !strcmp ("--orientation", argv[i])) {
      char *endptr;
      if (++i>=argc) usage ();
      dirind = strtol(argv[i], &endptr, 0);
      if (*endptr != '\0') {
	for (dirind = 0; dirind < 4; dirind++) {
	  if (strcmp (direction[dirind], argv[i]) == 0) break;
	}
	if ((dirind < 0) || (dirind > 3))  usage();
      }
      rot = dirind;
      setit = 1;
      continue;
    }
    usage();
  }
  if (verbose) query = 1;

  dpy = XOpenDisplay (display_name);
  if (dpy == NULL) {
      fprintf (stderr, "Can't open display %s\n", display_name);
      exit (1);
  }
  if (screen < 0)
    screen = DefaultScreen (dpy);
  if (screen >= ScreenCount (dpy)) {
    fprintf (stderr, "Invalid screen number %d (display has %d)\n",
	     screen, ScreenCount (dpy));
    exit (1);
  }

  root = RootWindow (dpy, screen);

  sc = XRRGetScreenInfo (dpy, root);

  if (sc == NULL) 
      exit (1);
  
  current_size = XRRCurrentConfig (sc, &current_visual_group, &current_rotation);
  if (size < 0)
    size = current_size;
  if (rot < 0)
  {
    for (rot = 0; rot < 4; rot++)
	if (1 << rot == current_rotation)
	    break;
  }

  sizes = XRRSizes(sc, &nsize);
  for (i = 0; i < nsize; i++) {
    if (query) 
      printf ("SZ:  Pixels        Physical\n%d: %4d x%4d  (%4dmm x%4dmm)\n",
	      i, sizes[i].width, sizes[i].height,
	      sizes[i].mwidth, sizes[i].mheight);
  }

  if (size >= nsize) usage();
  rotations = XRRRotations(sc, &current_rotation);
  rotation = 1 << rot ;
  if (query) {
    for (i = 0; i < 4; i ++) {
      if ((current_rotation >> i) & 1) 
	printf("Current rotation - %s\n", direction[i]);
    }
    printf ("Rotations possible - ");
    for (i = 0; i < 4; i ++) {
      if ((rotations >> i) & 1)  printf("%s ", direction[i]);
    }
    printf ("\n");
  }

  if (verbose) printf("Setting size to %d, rotation to %s\n", 
		      size, direction[rot]);

  if (setit) XRRScreenChangeSelectInput (dpy, root, True);
  if (setit) status = XRRSetScreenConfig (dpy, sc, DefaultRootWindow (dpy), 
		       (SizeID) size, current_visual_group, (Rotation) rotation, CurrentTime);
  if (verbose && setit) {
    if (status == RRSetConfigSuccess)
      {
	XNextEvent(dpy, (XEvent *) &event);
	printf("Got an event!\n");
	printf(" window = %d\n root = %d\n size_index = %d\n visual_group_index %d\n rotation %d\n", 
	       (int) event.window, (int) event.root, 
	       event.size_index, event.visual_group_index, event.rotation);
	printf(" timestamp = %ld, config_timestamp = %ld\n",
	       event.timestamp, event.config_timestamp);
	printf(" %dX%d pixels, %dX%d mm\n",
	       event.width, event.height,
	       event.mwidth, event.mheight);
      }
  }
  XRRFreeScreenInfo(sc);
  return(0);
}

@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d2 1
a2 1
 * $XFree86: xc/programs/xrandr/xrandr.c,v 1.12 2002/11/01 20:04:00 keithp Exp $
d5 1
a5 1
 * Copyright © 2002 Hewlett Pacard Company, Inc.
d11 1
a11 1
 * documentation, and that the name of Keith Packard or HP not be used in
d13 1
a13 1
 * specific, written prior permission.  Keith Packard and HP makes no
d17 1
a17 1
 * KEITH PACKARD and HP DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
d24 1
a24 3
 *
 * Blame Jim Gettys for any bugs; he wrote most of the client side code,
 * and part of the server code for randr.
a28 1
#include <X11/Xlibint.h>
a30 1
#include <X11/extensions/Xrender.h>	/* we share subpixel information */
a42 9
/* subpixel order */
static char *order[6] = {
  "unknown",
  "horizontal rgb",
  "horizontal bgr",
  "vertical rgb",
  "vertical bgr",
  "no subpixels"};

d52 5
a56 9
  fprintf(stderr, "            or --orientation <normal,inverted,left,right,0,1,2,3>\n");
  fprintf(stderr, "  -q        or --query\n");
  fprintf(stderr, "  -s <size>/<width>x<height> or --size <size>/<width>x<height>\n");
  fprintf(stderr, "  -r <rate> or --rate <rate>\n");
  fprintf(stderr, "  -v        or --version\n");
  fprintf(stderr, "  -x        (reflect in x)\n");
  fprintf(stderr, "  -y        (reflect in y)\n");
  fprintf(stderr, "  --screen <screen>\n");
  fprintf(stderr, "  --verbose\n");
a68 2
  int		nrate;
  short		*rates;
d74 1
a74 2
  XEvent	event;
  XRRScreenChangeNotifyEvent *sce;    
d76 1
a76 1
  int 		i, j;
d78 1
a78 2
  short		current_rate;
  int		rate = -1;
a82 5
  int		version = 0;
  int		event_base, error_base;
  int		reflection = 0;
  int		width = 0, height = 0;
  int		have_pixel_size = 0;
a93 1
      continue;
d95 1
a95 1
    if (!strcmp ("--verbose", argv[i])) {
a98 1

d101 2
a102 30
      if (sscanf (argv[i], "%dx%d", &width, &height) == 2)
	have_pixel_size = 1;
      else {
	size = atoi (argv[i]);
	if (size < 0) usage();
      }
      setit = 1;
      continue;
    }

    if (!strcmp ("-r", argv[i]) || !strcmp ("--rate", argv[i])) {
      if (++i>=argc) usage ();
      rate = atoi (argv[i]);
      if (rate < 0) usage();
      setit = 1;
      continue;
    }

    if (!strcmp ("-v", argv[i]) || !strcmp ("--version", argv[i])) {
      version = 1;
      continue;
    }

    if (!strcmp ("-x", argv[i])) {
      reflection |= RR_Reflect_X;
      setit = 1;
      continue;
    }
    if (!strcmp ("-y", argv[i])) {
      reflection |= RR_Reflect_Y;
a134 1

d154 2
a155 12
  current_size = XRRConfigCurrentConfiguration (sc, &current_rotation);

  sizes = XRRConfigSizes(sc, &nsize);

  if (have_pixel_size) {
    for (size = 0; size < nsize; size++)
    {
      if (sizes[size].width == width && sizes[size].height == height)
	break;
    }
  }
  else if (size < 0)
a156 3

  if (size >= nsize) usage();

d160 1
a160 1
	if (1 << rot == (current_rotation & 0xf))
d164 6
a169 8
  current_rate = XRRConfigCurrentRate (sc);

  if (rate < 0)
  {
    if (size == current_size)
	rate = current_rate;
    else
	rate = 0;
d172 2
a173 26
  if (version) {
    int major_version, minor_version;
    XRRQueryVersion (dpy, &major_version, &minor_version);
    printf("Server reports RandR version %d.%d\n", 
	   major_version, minor_version);
  }

  if (query) {
    printf(" SZ:    Pixels          Physical       Refresh\n");
    for (i = 0; i < nsize; i++) {
      printf ("%c%-2d %5d x %-5d  (%4dmm x%4dmm )",
	   i == current_size ? '*' : ' ',
	   i, sizes[i].width, sizes[i].height,
	   sizes[i].mwidth, sizes[i].mheight);
      rates = XRRConfigRates (sc, i, &nrate);
      if (nrate) printf ("  ");
      for (j = 0; j < nrate; j++)
	printf ("%c%-4d",
		i == current_size && rates[j] == current_rate ? '*' : ' ',
		rates[j]);
      printf ("\n");
    }
  }

  rotations = XRRConfigRotations(sc, &current_rotation);

a179 12

    printf("Current reflection - ");
    if (current_rotation & (RR_Reflect_X|RR_Reflect_Y))
    {
	if (current_rotation & RR_Reflect_X) printf ("X Axis ");
	if (current_rotation & RR_Reflect_Y) printf ("Y Axis");
    }
    else
	printf ("none");
    printf ("\n");
    

a184 28

    printf ("Reflections possible - ");
    if (rotations & (RR_Reflect_X|RR_Reflect_Y))
    {
        if (rotations & RR_Reflect_X) printf ("X Axis ");
	if (rotations & RR_Reflect_Y) printf ("Y Axis");
    }
    else
	printf ("none");
    printf ("\n");
  }

  if (verbose) { 
    printf("Setting size to %d, rotation to %s\n",  size, direction[rot]);

    printf ("Setting reflection on ");
    if (reflection)
    {
	if (reflection & RR_Reflect_X) printf ("X Axis ");
	if (reflection & RR_Reflect_Y) printf ("Y Axis");
    }
    else
	printf ("neither axis");
    printf ("\n");

    if (reflection & RR_Reflect_X) printf("Setting reflection on X axis\n");

    if (reflection & RR_Reflect_Y) printf("Setting reflection on Y axis\n");
d187 2
a188 2
  /* we should test configureNotify on the root window */
  XSelectInput (dpy, root, StructureNotifyMask);
d190 3
a192 7
  if (setit) XRRSelectInput (dpy, root,
			RRScreenChangeNotifyMask);
  if (setit) status = XRRSetScreenConfigAndRate (dpy, sc,
						 DefaultRootWindow (dpy), 
	       (SizeID) size, (Rotation) (rotation | reflection), rate, CurrentTime);
  
  XRRQueryExtension(dpy, &event_base, &error_base);
a195 2
	while (1) {
	int spo;
d197 9
a205 34
	
	printf ("Event received, type = %d\n", event.type);
	/* update Xlib's knowledge of the event */
	XRRUpdateConfiguration (&event);
	if (event.type == ConfigureNotify)
	  printf("Received ConfigureNotify Event!\n");

	switch (event.type - event_base) {
	case RRScreenChangeNotify:
	  sce = (XRRScreenChangeNotifyEvent *) &event;

	  printf("Got a screen change notify event!\n");
	  printf(" window = %d\n root = %d\n size_index = %d\n rotation %d\n", 
	       (int) sce->window, (int) sce->root, 
	       sce->size_index,  sce->rotation);
	  printf(" timestamp = %ld, config_timestamp = %ld\n",
	       sce->timestamp, sce->config_timestamp);
	  printf(" Rotation = %x\n", sce->rotation);
	  printf(" %d X %d pixels, %d X %d mm\n",
		 sce->width, sce->height, sce->mwidth, sce->mheight);
	  printf("Display width   %d, height   %d\n",
		 DisplayWidth(dpy, screen), DisplayHeight(dpy, screen));
	  printf("Display widthmm %d, heightmm %d\n", 
		 DisplayWidthMM(dpy, screen), DisplayHeightMM(dpy, screen));
	  spo = sce->subpixel_order;
	  if ((spo < 0) || (spo > 5))
	    printf ("Unknown subpixel order, value = %d\n", spo);
	  else printf ("new Subpixel rendering model is %s\n", order[spo]);
	  break;
	default:
	  if (event.type != ConfigureNotify) 
	    printf("unknown event received, type = %d!\n", event.type);
	}
	}
d208 1
a208 1
  XRRFreeScreenConfigInfo(sc);
d211 1
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d2 1
a2 1
 * $XFree86: xc/programs/xrandr/xrandr.c,v 1.12 2002/11/01 20:04:00 keithp Exp $
d5 1
a5 1
 * Copyright © 2002 Hewlett Pacard Company, Inc.
d11 1
a11 1
 * documentation, and that the name of Keith Packard or HP not be used in
d13 1
a13 1
 * specific, written prior permission.  Keith Packard and HP makes no
d17 1
a17 1
 * KEITH PACKARD and HP DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
d24 1
a24 3
 *
 * Blame Jim Gettys for any bugs; he wrote most of the client side code,
 * and part of the server code for randr.
a28 1
#include <X11/Xlibint.h>
a30 1
#include <X11/extensions/Xrender.h>	/* we share subpixel information */
a42 9
/* subpixel order */
static char *order[6] = {
  "unknown",
  "horizontal rgb",
  "horizontal bgr",
  "vertical rgb",
  "vertical bgr",
  "no subpixels"};

d52 5
a56 9
  fprintf(stderr, "            or --orientation <normal,inverted,left,right,0,1,2,3>\n");
  fprintf(stderr, "  -q        or --query\n");
  fprintf(stderr, "  -s <size>/<width>x<height> or --size <size>/<width>x<height>\n");
  fprintf(stderr, "  -r <rate> or --rate <rate>\n");
  fprintf(stderr, "  -v        or --version\n");
  fprintf(stderr, "  -x        (reflect in x)\n");
  fprintf(stderr, "  -y        (reflect in y)\n");
  fprintf(stderr, "  --screen <screen>\n");
  fprintf(stderr, "  --verbose\n");
a68 2
  int		nrate;
  short		*rates;
d74 1
a74 2
  XEvent	event;
  XRRScreenChangeNotifyEvent *sce;    
d76 1
a76 1
  int 		i, j;
d78 1
a78 2
  short		current_rate;
  int		rate = -1;
a82 5
  int		version = 0;
  int		event_base, error_base;
  int		reflection = 0;
  int		width = 0, height = 0;
  int		have_pixel_size = 0;
a93 1
      continue;
d95 1
a95 1
    if (!strcmp ("--verbose", argv[i])) {
a98 1

d101 2
a102 30
      if (sscanf (argv[i], "%dx%d", &width, &height) == 2)
	have_pixel_size = 1;
      else {
	size = atoi (argv[i]);
	if (size < 0) usage();
      }
      setit = 1;
      continue;
    }

    if (!strcmp ("-r", argv[i]) || !strcmp ("--rate", argv[i])) {
      if (++i>=argc) usage ();
      rate = atoi (argv[i]);
      if (rate < 0) usage();
      setit = 1;
      continue;
    }

    if (!strcmp ("-v", argv[i]) || !strcmp ("--version", argv[i])) {
      version = 1;
      continue;
    }

    if (!strcmp ("-x", argv[i])) {
      reflection |= RR_Reflect_X;
      setit = 1;
      continue;
    }
    if (!strcmp ("-y", argv[i])) {
      reflection |= RR_Reflect_Y;
a134 1

d154 2
a155 12
  current_size = XRRConfigCurrentConfiguration (sc, &current_rotation);

  sizes = XRRConfigSizes(sc, &nsize);

  if (have_pixel_size) {
    for (size = 0; size < nsize; size++)
    {
      if (sizes[size].width == width && sizes[size].height == height)
	break;
    }
  }
  else if (size < 0)
a156 3

  if (size >= nsize) usage();

d160 1
a160 1
	if (1 << rot == (current_rotation & 0xf))
d164 6
a169 8
  current_rate = XRRConfigCurrentRate (sc);

  if (rate < 0)
  {
    if (size == current_size)
	rate = current_rate;
    else
	rate = 0;
d172 2
a173 26
  if (version) {
    int major_version, minor_version;
    XRRQueryVersion (dpy, &major_version, &minor_version);
    printf("Server reports RandR version %d.%d\n", 
	   major_version, minor_version);
  }

  if (query) {
    printf(" SZ:    Pixels          Physical       Refresh\n");
    for (i = 0; i < nsize; i++) {
      printf ("%c%-2d %5d x %-5d  (%4dmm x%4dmm )",
	   i == current_size ? '*' : ' ',
	   i, sizes[i].width, sizes[i].height,
	   sizes[i].mwidth, sizes[i].mheight);
      rates = XRRConfigRates (sc, i, &nrate);
      if (nrate) printf ("  ");
      for (j = 0; j < nrate; j++)
	printf ("%c%-4d",
		i == current_size && rates[j] == current_rate ? '*' : ' ',
		rates[j]);
      printf ("\n");
    }
  }

  rotations = XRRConfigRotations(sc, &current_rotation);

a179 12

    printf("Current reflection - ");
    if (current_rotation & (RR_Reflect_X|RR_Reflect_Y))
    {
	if (current_rotation & RR_Reflect_X) printf ("X Axis ");
	if (current_rotation & RR_Reflect_Y) printf ("Y Axis");
    }
    else
	printf ("none");
    printf ("\n");
    

a184 28

    printf ("Reflections possible - ");
    if (rotations & (RR_Reflect_X|RR_Reflect_Y))
    {
        if (rotations & RR_Reflect_X) printf ("X Axis ");
	if (rotations & RR_Reflect_Y) printf ("Y Axis");
    }
    else
	printf ("none");
    printf ("\n");
  }

  if (verbose) { 
    printf("Setting size to %d, rotation to %s\n",  size, direction[rot]);

    printf ("Setting reflection on ");
    if (reflection)
    {
	if (reflection & RR_Reflect_X) printf ("X Axis ");
	if (reflection & RR_Reflect_Y) printf ("Y Axis");
    }
    else
	printf ("neither axis");
    printf ("\n");

    if (reflection & RR_Reflect_X) printf("Setting reflection on X axis\n");

    if (reflection & RR_Reflect_Y) printf("Setting reflection on Y axis\n");
d187 2
a188 2
  /* we should test configureNotify on the root window */
  XSelectInput (dpy, root, StructureNotifyMask);
d190 3
a192 7
  if (setit) XRRSelectInput (dpy, root,
			RRScreenChangeNotifyMask);
  if (setit) status = XRRSetScreenConfigAndRate (dpy, sc,
						 DefaultRootWindow (dpy), 
	       (SizeID) size, (Rotation) (rotation | reflection), rate, CurrentTime);
  
  XRRQueryExtension(dpy, &event_base, &error_base);
a195 2
	while (1) {
	int spo;
d197 9
a205 34
	
	printf ("Event received, type = %d\n", event.type);
	/* update Xlib's knowledge of the event */
	XRRUpdateConfiguration (&event);
	if (event.type == ConfigureNotify)
	  printf("Received ConfigureNotify Event!\n");

	switch (event.type - event_base) {
	case RRScreenChangeNotify:
	  sce = (XRRScreenChangeNotifyEvent *) &event;

	  printf("Got a screen change notify event!\n");
	  printf(" window = %d\n root = %d\n size_index = %d\n rotation %d\n", 
	       (int) sce->window, (int) sce->root, 
	       sce->size_index,  sce->rotation);
	  printf(" timestamp = %ld, config_timestamp = %ld\n",
	       sce->timestamp, sce->config_timestamp);
	  printf(" Rotation = %x\n", sce->rotation);
	  printf(" %d X %d pixels, %d X %d mm\n",
		 sce->width, sce->height, sce->mwidth, sce->mheight);
	  printf("Display width   %d, height   %d\n",
		 DisplayWidth(dpy, screen), DisplayHeight(dpy, screen));
	  printf("Display widthmm %d, heightmm %d\n", 
		 DisplayWidthMM(dpy, screen), DisplayHeightMM(dpy, screen));
	  spo = sce->subpixel_order;
	  if ((spo < 0) || (spo > 5))
	    printf ("Unknown subpixel order, value = %d\n", spo);
	  else printf ("new Subpixel rendering model is %s\n", order[spo]);
	  break;
	default:
	  if (event.type != ConfigureNotify) 
	    printf("unknown event received, type = %d!\n", event.type);
	}
	}
d208 1
a208 1
  XRRFreeScreenConfigInfo(sc);
d211 1
@

