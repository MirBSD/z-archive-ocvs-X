head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	cvs-200403021700:1.1.1.2
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.09.54;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.20.09.54;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.18.33.15;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
   FvwmButtons v2.0.41-plural-Z-alpha, copyright 1996, Jarl Totland

 * This module, and the entire GoodStuff program, and the concept for
 * interfacing this module to the Window Manager, are all original work
 * by Robert Nation
 *
 * Copyright 1993, Robert Nation. No guarantees or warantees or anything
 * are provided or implied in any way whatsoever. Use this program at your
 * own risk. Permission to use this program for any purpose is given,
 * as long as the copyright is kept intact.

*/

#include <unistd.h>
#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <X11/Intrinsic.h>
#include "FvwmButtons.h"

/**
*** DumpButtons()
*** Debug function. May only be called after ShuffleButtons has been called.
**/
void DumpButtons(button_info *b)
{
  if(!b)
    {
      fprintf(stderr,"NULL\n");
      return;
    }
  if(b!=UberButton)
    {
      int button=buttonNum(b);
      fprintf(stderr,"0x%lx(%ix%i@@(%i,%i),0x%04lx): ",
	      (unsigned long)b,b->BWidth,b->BHeight,
	      buttonXPos(b,button),buttonYPos(b,button),b->flags);
    }
  else
    fprintf(stderr,"0x%lx(%ix%i@@,0x%04lx): ",(unsigned long)b,
	    b->BWidth,b->BHeight,b->flags);
    
  if(b->flags&b_Font)
    fprintf(stderr,"Font(%s,0x%lx) ",b->font_string,(unsigned long)b->font);
  if(b->flags&b_Padding)
    fprintf(stderr,"Padding(%i,%i) ",b->xpad,b->ypad);
  if(b->flags&b_Frame)
    fprintf(stderr,"Framew(%i) ",b->framew);
  if(b->flags&b_Title)
    fprintf(stderr,"Title(%s) ",b->title);
  if(b->flags&b_Icon)
    fprintf(stderr,"Icon(%s,%i) ",b->icon_file,(int)b->IconWin);
  if(b->flags&b_Action)
    fprintf(stderr,"\n  Action(%s,%s,%s,%s) ",
	    b->action[0]?b->action[0]:"",
	    b->action[1]?b->action[1]:"",
	    b->action[2]?b->action[2]:"",
	    b->action[3]?b->action[3]:"");
  if(b->flags&b_Swallow)
    {
      fprintf(stderr,"Swallow(0x%02x) ",b->swallow);
      if(b->swallow&b_Respawn)
	fprintf(stderr,"\n  Respawn(%s) ",b->spawn);
    }
  if(b->flags&b_Hangon)
    fprintf(stderr,"Hangon(%s) ",b->hangon);
  fprintf(stderr,"\n");
  if(b->flags&b_Container)
    {
      int i=0;
      fprintf(stderr,"  Container(%ix%i=%i buttons 0x%04lx (alloc %i), size %ix%i, pos %i,%i)\n{ ",
	      b->c->num_columns,b->c->num_rows,b->c->num_buttons,b->c->flags,
	      b->c->allocated_buttons,
	      b->c->ButtonWidth,b->c->ButtonHeight,b->c->xpos,b->c->ypos);
/*
      fprintf(stderr,"  font(%s,%i) framew(%i) pad(%i,%i) { ",
	      b->c->font_string,(int)b->c->font,b->c->framew,b->c->xpad,
	      b->c->ypad);
*/
      while(i<b->c->num_buttons)
	fprintf(stderr,"0x%lx ",(unsigned long)b->c->buttons[i++]);
      fprintf(stderr,"}\n");
      i=0;
      while(i<b->c->num_buttons)
	DumpButtons(b->c->buttons[i++]);
      return;
    }
}

void SaveButtons(button_info *b)
{
  int i;
  if(!b)
    return;
  if(b->BWidth>1 || b->BHeight>1)
    fprintf(stderr,"%ix%i ",b->BWidth,b->BHeight);
  if(b->flags&b_Font)
    fprintf(stderr,"Font %s ",b->font_string);
  if(b->flags&b_Fore)
    fprintf(stderr,"Fore %s ",b->fore);
  if(b->flags&b_Back)
    fprintf(stderr,"Back %s ",b->back);
  if(b->flags&b_Frame)
    fprintf(stderr,"Frame %i ",b->framew);
  if(b->flags&b_Padding)
    fprintf(stderr,"Padding %i %i ",b->xpad,b->ypad);
  if(b->flags&b_Title)
    {
      fprintf(stderr,"Title ");
      if(b->flags&b_Justify)
	{
	  fprintf(stderr,"(");
	  switch(b->justify&b_TitleHoriz)
	    {
	    case 0:
	      fprintf(stderr,"Left");
	      break;
	    case 1:
	      fprintf(stderr,"Center");
	      break;
	    case 2:
	      fprintf(stderr,"Right");
	      break;
	    }
	  if(b->justify&b_Horizontal)
	    fprintf(stderr,", Side");
	  fprintf(stderr,") ");
	}
      fprintf(stderr,"\"%s\" ",b->title);
    }
  if(b->flags&b_Icon)
    fprintf(stderr,"Icon \"%s\" ",b->icon_file);
  if(b->flags&b_Swallow)
    {
      fprintf(stderr,"Swallow ");
      if(b->swallow_mask)
	{
	  fprintf(stderr,"(");
	  if(b->swallow_mask&b_NoHints)
	    if(b->swallow&b_NoHints)
	      fprintf(stderr,"NoHints ");
	    else
	      fprintf(stderr,"Hints ");
	  if(b->swallow_mask&b_Kill)
	    if(b->swallow&b_Kill)
	      fprintf(stderr,"Kill ");
	    else
	      fprintf(stderr,"NoKill ");
	  if(b->swallow_mask&b_NoClose)
	    if(b->swallow&b_NoClose)
	      fprintf(stderr,"NoClose ");
	    else
	      fprintf(stderr,"Close ");
	  if(b->swallow_mask&b_Respawn)
	    if(b->swallow&b_Respawn)
	      fprintf(stderr,"Respawn ");
	    else
	      fprintf(stderr,"NoRespawn ");
	  if(b->swallow_mask&b_UseOld)
	    if(b->swallow&b_UseOld)
	      fprintf(stderr,"UseOld ");
	    else
	      fprintf(stderr,"NoOld ");
	  if(b->swallow_mask&b_UseTitle)
	    if(b->swallow&b_UseTitle)
	      fprintf(stderr,"UseTitle ");
	    else
	      fprintf(stderr,"NoTitle ");
	  fprintf(stderr,") ");
	}
      fprintf(stderr,"\"%s\" \"%s\" ",b->hangon,b->spawn);
    }
  if(b->flags&b_Action)
    {
      if(b->action[0])
	fprintf(stderr,"Action `%s` ",b->action[0]);
      for(i=1;i<4;i++)
	if(b->action[i])
	  fprintf(stderr,"Action (Mouse %i) `%s` ",i,b->action[i]);
    }


  if(b->flags&b_Container)
    {
      fprintf(stderr,"Container (Columns %i Rows %i ",b->c->num_columns,
	      b->c->num_rows);
      if(b->c->flags)
	{
	  if(b->c->flags&b_Font)
	    fprintf(stderr,"Font %s ",b->c->font_string);
	  if(b->c->flags&b_Fore)
	    fprintf(stderr,"Fore %s ",b->c->fore);
	  if(b->c->flags&b_Back)
	    fprintf(stderr,"Back %s ",b->c->back);
	  if(b->c->flags&b_Frame)
	    fprintf(stderr,"Frame %i ",b->c->framew);
	  if(b->c->flags&b_Padding)
	    fprintf(stderr,"Padding %i %i ",b->c->xpad,b->c->ypad);
	  if(b->c->flags&b_Justify)
	    {
	      fprintf(stderr,"Title (");
	      switch(b->c->justify&b_TitleHoriz)
		{
		case 0:
		  fprintf(stderr,"Left");
		  break;
		case 1:
		  fprintf(stderr,"Center");
		  break;
		case 2:
		  fprintf(stderr,"Right");
		  break;
		}
	      if(b->c->justify&b_Horizontal)
		fprintf(stderr,", Side");
	      fprintf(stderr,") ");
	    }
	  if(b->c->swallow_mask)
	    {
	      fprintf(stderr,"Swallow (");
	      if(b->c->swallow_mask&b_NoHints)
		if(b->c->swallow&b_NoHints)
		  fprintf(stderr,"NoHints ");
		else
		  fprintf(stderr,"Hints ");
	      if(b->c->swallow_mask&b_Kill)
		if(b->c->swallow&b_Kill)
		  fprintf(stderr,"Kill ");
		else
		  fprintf(stderr,"NoKill ");
	      if(b->c->swallow_mask&b_NoClose)
		if(b->c->swallow&b_NoClose)
		  fprintf(stderr,"NoClose ");
		else
		  fprintf(stderr,"Close ");
	      if(b->c->swallow_mask&b_Respawn)
		if(b->c->swallow&b_Respawn)
		  fprintf(stderr,"Respawn ");
		else
		  fprintf(stderr,"NoRespawn ");
	      if(b->c->swallow_mask&b_UseOld)
		if(b->c->swallow&b_UseOld)
		  fprintf(stderr,"UseOld ");
		else
		  fprintf(stderr,"NoOld ");
	      if(b->c->swallow_mask&b_UseTitle)
		if(b->c->swallow&b_UseTitle)
		  fprintf(stderr,"UseTitle ");
		else
		  fprintf(stderr,"NoTitle ");
	      fprintf(stderr,") ");
	    }
	}
      fprintf(stderr,")");
    }
  fprintf(stderr,"\n");
  
  if(b->flags&b_Container)
    {
      i=0;
      while(i<b->c->num_buttons)
	SaveButtons(b->c->buttons[i++]);
      fprintf(stderr,"End\n");
    }
}

@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d140 1
a140 1
	  if(b->swallow_mask&b_NoHints) {
d145 1
a145 2
	  }
	  if(b->swallow_mask&b_Kill) {
d150 1
a150 2
	  }
	  if(b->swallow_mask&b_NoClose) {
d155 1
a155 2
	  }
	  if(b->swallow_mask&b_Respawn) {
d160 1
a160 2
	  }
	  if(b->swallow_mask&b_UseOld) {
d165 1
a165 2
	  }
	  if(b->swallow_mask&b_UseTitle) {
a169 1
	  }
d222 1
a222 1
	      if(b->c->swallow_mask&b_NoHints) {
d227 1
a227 2
	      }
	      if(b->c->swallow_mask&b_Kill) {
d232 1
a232 2
	      }
	      if(b->c->swallow_mask&b_NoClose) {
d237 1
a237 2
	      }
	      if(b->c->swallow_mask&b_Respawn) {
d242 1
a242 2
	      }
	      if(b->c->swallow_mask&b_UseOld) {
d247 1
a247 2
	      }
	      if(b->c->swallow_mask&b_UseTitle) {
a251 1
	      }
@

