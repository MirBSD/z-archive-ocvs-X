head	1.2;
access;
symbols
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	cvs-200403021700:1.1.1.1
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2004.07.14.14.15.40;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.20.09.59;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.20.09.59;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge OpenBSD; adapt MirOS BSD; fix french spelling to english
@
text
@#!/bin/sh
# Hell, this is really difficult with /bin/sh. I want my zsh back!

myname=`basename $0`
log=archive/automated_tests/$myname.log
typeset -i c1
typeset -i c2
typeset -i c3

usage ()
{
  echo "usage: $myname [ -0 | -1 | -2 ] [ make options ]"
  echo "  -0: run tests with all options defined and disabled (2 builds)"
  echo "  -1: run tests with one option defined and disabled"
  echo "  -2: run tests with two options defined and disabled"
  echo "  default is: myname -0 -1"
  echo "  logging output goes to $log and $log.*"
}

#
#parse command line
#
run_depth_0=""
run_depth_1=""
run_depth_2=""
custom=""
while [ -n "$1" ] ; do
  if [ "$1" = "-h" ] ; then
    usage
    exit
  elif [ "$1" = "-?" ] ; then
    usage
    exit
  elif [ "$1" = "-0" ] ; then
    run_depth_0=1
    run_depth_1=""
    run_depth_2=""
    custom=1
  elif [ "$1" = "-1" ] ; then
    run_depth_0=""
    run_depth_1=1
    run_depth_2=""
    custom=1
  elif [ "$1" = "-2" ] ; then
    run_depth_0=""
    run_depth_1=""
    run_depth_2=1
    custom=1
  else
    break;
  fi
  shift
done

MAKE_OPTS="$*"

# set default if nothing was selected
if [ -z "$custom" ]; then
  run_depth_0="1"
  run_depth_1="1"
fi

if [ ! -x ./$myname ] ; then
  echo please run $myname from archive/automated_tests
  exit 1
fi
cd ../..
rm -f "$log"* > /dev/null 2>&1


##################
# some functions #
##################

# clean up before next build
clean_up ()
{
  make clean > /dev/null 2>&1
  make distclean > /dev/null 2>&1
  rm -f config.cache > /dev/null 2>&1
  for i in `find . -name .deps -type d` ; do rm -rf $i; done > /dev/null 2>&1
  for i in `find . -name Makefile` ; do rm -f $i; done > /dev/null 2>&1
  for i in `find . -name "*.o"` ; do rm -f $i; done > /dev/null 2>&1
}

# generate parameter list for configure
disable_options ()
{
  CONFIGURE_OPTS=""
  while [ ! "$1" = "" ]; do
    CONFIGURE_OPTS="$CONFIGURE_OPTS --disable-${BUILD_OPTIONS[$1]}"
    shift
  done
  c3=0
  while [ ! "${BUILD_OPTIONS[$c3]}" = "" ]; do
    echo $CONFIGURE_OPTS | grep -q -- "--disable-${BUILD_OPTIONS[$c3]}" ||
      CONFIGURE_OPTS="$CONFIGURE_OPTS --enable-${BUILD_OPTIONS[$c3]}"
    c3=$c3+1
  done
}

# disable all enabled options and vice versa
reverse_options ()
{
  CONFIGURE_OPTS=`echo $CONFIGURE_OPTS |
           sed -e 's/--enable-/--xyz-/g' |
           sed -e 's/--disable-/--enable-/g' |
           sed -e 's/--xyz-/--disable-/g'`
}

# call configure and make (with logging)
build ()
{
return
  clean_up
  echo >> $log
  echo >> $log
  echo "++++++++++ checking configure with options $CONFIGURE_OPTS" >> $log
  echo >> $log
  echo "./configure --enable-extras $CONFIGURE_OPTS\n\n" > $log.$1
  if nice ./configure --enable-extras $CONFIGURE_OPTS >> $log.$1 2>&1; then
    echo ok >> $log
  else
    echo FAILED >> $log
  fi
  echo >> $log
  echo "building" >> $log
  echo >> $log
  if nice make $MAKE_OPTS > $log.$1 2>&1; then
    echo ok >> $log
  else
    echo FAILED >> $log
  fi
}

############################
# end of functions section #
############################

#
# get the list of possible options
#
c1=0
for i in `
grep smr_SWITCH configure.in | grep -v debug-msgs |
sed -e 's/^smr_SWITCH.//g' |
cut -f 1 -d ","`; do
  BUILD_OPTIONS[$c1]="$i"
  c1=$c1+1;
done

#
# now do the tests
#
if [ "$run_depth_1" = "1" ] ; then
  echo
  echo " +++ running tests for depth 1 +++"
  echo
  c1=0
  while [ ! "${BUILD_OPTIONS[$c1]}" = "" ]; do
    disable_options $c1
    echo build ${BUILD_OPTIONS[$c1]}_off
    build ${BUILD_OPTIONS[$c1]}_off
    reverse_options
    echo build ${BUILD_OPTIONS[$c1]}_on
    build ${BUILD_OPTIONS[$c1]}_on
    c1=$c1+1
  done
fi

if [ "$run_depth_2" = "1" ] ; then
  echo
  echo " +++ running tests for depth 2 +++"
  echo
  c1=0
  while [ -n "${BUILD_OPTIONS[$c1]}" ]; do
    c2=$c1+1
    while [ -n "${BUILD_OPTIONS[$c2]}" ]; do
      disable_options $c1 $c2
      echo build ${BUILD_OPTIONS[$c1]}_off,${BUILD_OPTIONS[$c2]}_off
      build ${BUILD_OPTIONS[$c1]}_off
      reverse_options
      echo build ${BUILD_OPTIONS[$c1]}_on,${BUILD_OPTIONS[$c2]}_on
      build ${BUILD_OPTIONS[$c1]}_on
      c2=$c2+1
    done
    c1=$c1+1
  done
fi

if [ "$run_depth_0" = "1" ] ; then
  echo
  echo " +++ running tests for depth 0 +++"
  echo
  disable_options
  reverse_options
  echo build all_disabled
  build all_disabled
  disable_options
  echo build all_enabled
  build all_enabled
fi
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
