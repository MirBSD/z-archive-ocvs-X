head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.39.51;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.18.39.25;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.28.33;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 2001 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *  
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE XFREE86 PROJECT BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the XFree86 Project shall
 * not be used in advertising or otherwise to promote the sale, use or other
 * dealings in this Software without prior written authorization from the
 * XFree86 Project.
 *
 * Author: Paulo César Pereira de Andrade
 */

/* $XFree86: xc/programs/xedit/lisp/require.c,v 1.7 2001/10/18 03:15:22 paulo Exp $ */

#include "require.h"

/*
 * Initialization
 */
static char *BadArgumentAt = "bad argument %s, at %s";

/*
 * Implementation
 */
LispObj *
Lisp_Load(LispMac *mac, LispObj *list, char *fname)
{
    LispObj *file = CAR(list), *verbose, *print, *ifdoesnotexist;

    if (!STRING_P(file))
	LispDestroy(mac, BadArgumentAt, LispStrObj(mac, file), fname);

    LispGetKeys(mac, fname, "VERBOSE:PRINT:IF-DOES-NOT-EXIST", CDR(list),
		&verbose, &print, &ifdoesnotexist);

    return (_LispLoadFile(mac, STRPTR(file), fname,
			  verbose != NIL, print != NIL, ifdoesnotexist != NIL));
}

LispObj *
Lisp_Require(LispMac *mac, LispObj *list, char *fname)
{
    LispObj *feat = CAR(list), *nam, *obj;
    char filename[1024], *ext;
    int len;

    if (!STRING_P(feat) && !SYMBOL_P(feat))
	LispDestroy(mac, BadArgumentAt, LispStrObj(mac, feat), fname);

    if (CDR(list) != NIL) {
	nam = CAR(CDR(list));

	if (!STRING_P(nam))
	    LispDestroy(mac, "%s is not of type string, at %s",
			LispStrObj(mac, nam), fname);
    }
    else
	nam = feat;

    for (obj = MOD; obj != NIL; obj = CDR(obj)) {
	if (STRPTR(CAR(obj)) == STRPTR(feat))
	    return (feat);
    }

    if (STRPTR(nam)[0] != '/') {
#ifdef LISPDIR
	snprintf(filename, sizeof(filename), "%s", LISPDIR);
#else
	getcwd(filename, sizeof(filename));
#endif
    }
    else
	filename[0] = '\0';
    *(filename + sizeof(filename) - 5) = '\0';	/* make sure there is place for ext */
    len = strlen(filename);
    if (!len || filename[len - 1] != '/') {
	strcat(filename, "/");
	++len;
    }

    snprintf(filename + len, sizeof(filename) - len - 5, "%s", STRPTR(nam));

    ext = filename + strlen(filename);

#ifdef SHARED_MODULES
    strcpy(ext, ".so");
    if (access(filename, R_OK) == 0) {
	LispModule *module;
	char data[64];
	int len;

	if (mac->module == NULL) {
	    /* export our own symbols */
	    if (dlopen(NULL, RTLD_LAZY | RTLD_GLOBAL) == NULL)
		LispDestroy(mac, dlerror());
	}

#if 0
	if (mac->interactive)
	    fprintf(lisp_stderr, "; Loading %s\n", filename);
#endif
	module = (LispModule*)LispMalloc(mac, sizeof(LispModule));
	if ((module->handle = dlopen(filename, RTLD_LAZY | RTLD_GLOBAL)) == NULL)
	    LispDestroy(mac, dlerror());
	snprintf(data, sizeof(data), "%sLispModuleData", STRPTR(nam));
	if ((module->data = (LispModuleData*)dlsym(module->handle, data)) == NULL) {
	    dlclose(module->handle);
	    LispDestroy(mac, "cannot find LispModuleData for %s",
			LispStrObj(mac, feat));
	}
	LispMused(mac, module);
	module->next = mac->module;
	mac->module = module;
	if (module->data->load)
	    (module->data->load)(mac);

	return (Lisp_Provide(mac, CONS(feat, NIL), "PROVIDE"));
    }
#endif

    strcpy(ext, ".lsp");
    (void)_LispLoadFile(mac, filename, fname, 0, 0, 0);

    return (feat);
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/require.c,v 1.18 2003/04/27 18:17:34 tsi Exp $ */
d32 6
a37 1
#include "lisp/require.h"
d43 1
a43 4
Lisp_Load(LispBuiltin *builtin)
/*
 load filename &key verbose print if-does-not-exist
 */
d45 4
a48 1
    LispObj *filename, *verbose, *print, *if_does_not_exist;
d50 2
a51 10
    if_does_not_exist = ARGUMENT(3);
    print = ARGUMENT(2);
    verbose = ARGUMENT(1);
    filename = ARGUMENT(0);

    if (PATHNAMEP(filename))
	filename = CAR(filename->data.pathname);
    else {
	CHECK_STRING(filename);
    }
d53 2
a54 5
    return (LispLoadFile(filename,
			 verbose != UNSPEC && verbose != NIL,
			 print != UNSPEC && print != NIL,
			 if_does_not_exist != UNSPEC &&
			 if_does_not_exist != NIL));
d58 1
a58 4
Lisp_Require(LispBuiltin *builtin)
/*
 require module &optional pathname
 */
d60 1
d64 2
a65 1
    LispObj *obj, *module, *pathname;
d67 2
a68 2
    pathname = ARGUMENT(1);
    module = ARGUMENT(0);
d70 3
a72 7
    CHECK_STRING(module);
    if (pathname != UNSPEC) {
	if (PATHNAMEP(pathname))
	    pathname = CAR(pathname->data.pathname);
	else {
	    CHECK_STRING(pathname);
	}
d75 1
a75 1
	pathname = module;
d77 3
a79 3
    for (obj = MOD; CONSP(obj); obj = CDR(obj)) {
	if (strcmp(THESTR(CAR(obj)), THESTR(module)) == 0)
	    return (module);
d82 1
a82 1
    if (THESTR(pathname)[0] != '/') {
d98 1
a98 1
    snprintf(filename + len, sizeof(filename) - len - 5, "%s", THESTR(pathname));
d105 1
a105 1
	LispModule *lisp_module;
d109 1
a109 1
	if (lisp__data.module == NULL) {
d112 1
a112 1
		LispDestroy("%s: ", STRFUN(builtin), dlerror());
d115 12
a126 22
	lisp_module = (LispModule*)LispMalloc(sizeof(LispModule));
	if ((lisp_module->handle =
	     dlopen(filename, RTLD_LAZY | RTLD_GLOBAL)) == NULL)
	    LispDestroy("%s: dlopen: %s", STRFUN(builtin), dlerror());
	snprintf(data, sizeof(data), "%sLispModuleData", THESTR(module));
	if ((lisp_module->data =
	     (LispModuleData*)dlsym(lisp_module->handle, data)) == NULL) {
	    dlclose(lisp_module->handle);
	    LispDestroy("%s: cannot find LispModuleData for %s",
			STRFUN(builtin), STROBJ(module));
	}
	LispMused(lisp_module);
	lisp_module->next = lisp__data.module;
	lisp__data.module = lisp_module;
	if (lisp_module->data->load)
	    (lisp_module->data->load)();

	if (MOD == NIL)
	    MOD = CONS(module, NIL);
	else {
	    RPLACD(MOD, CONS(CAR(MOD), CDR(MOD)));
	    RPLACA(MOD, module);
d128 5
a132 1
	LispSetVar(lisp__data.modules, MOD);
d134 1
a134 1
	return (module);
d139 1
a139 1
    (void)LispLoadFile(STRING(filename), 0, 0, 0);
d141 1
a141 1
    return (module);
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/require.c,v 1.16 2002/11/23 08:26:50 paulo Exp $ */
d35 5
d43 1
a43 4
Lisp_Load(LispBuiltin *builtin)
/*
 load filename &key verbose print if-does-not-exist
 */
d45 4
a48 1
    LispObj *filename, *verbose, *print, *if_does_not_exist;
d50 2
a51 10
    if_does_not_exist = ARGUMENT(3);
    print = ARGUMENT(2);
    verbose = ARGUMENT(1);
    filename = ARGUMENT(0);

    if (PATHNAMEP(filename))
	filename = CAR(filename->data.pathname);
    else {
	CHECK_STRING(filename);
    }
d53 2
a54 5
    return (LispLoadFile(filename,
			 verbose != UNSPEC && verbose != NIL,
			 print != UNSPEC && print != NIL,
			 if_does_not_exist != UNSPEC &&
			 if_does_not_exist != NIL));
d58 1
a58 4
Lisp_Require(LispBuiltin *builtin)
/*
 require module &optional pathname
 */
d60 1
d64 2
a65 1
    LispObj *obj, *module, *pathname;
d67 2
a68 2
    pathname = ARGUMENT(1);
    module = ARGUMENT(0);
d70 3
a72 7
    CHECK_STRING(module);
    if (pathname != UNSPEC) {
	if (PATHNAMEP(pathname))
	    pathname = CAR(pathname->data.pathname);
	else {
	    CHECK_STRING(pathname);
	}
d75 1
a75 1
	pathname = module;
d77 3
a79 3
    for (obj = MOD; CONSP(obj); obj = CDR(obj)) {
	if (strcmp(THESTR(CAR(obj)), THESTR(module)) == 0)
	    return (module);
d82 1
a82 1
    if (THESTR(pathname)[0] != '/') {
d98 1
a98 1
    snprintf(filename + len, sizeof(filename) - len - 5, "%s", THESTR(pathname));
d105 1
a105 1
	LispModule *lisp_module;
d109 1
a109 1
	if (lisp__data.module == NULL) {
d112 1
a112 1
		LispDestroy(mac, "%s: ", STRFUN(builtin), dlerror());
d115 12
a126 22
	lisp_module = (LispModule*)LispMalloc(sizeof(LispModule));
	if ((lisp_module->handle =
	     dlopen(filename, RTLD_LAZY | RTLD_GLOBAL)) == NULL)
	    LispDestroy(mac, "%s: dlopen: %s", STRFUN(builtin), dlerror());
	snprintf(data, sizeof(data), "%sLispModuleData", THESTR(module));
	if ((lisp_module->data =
	     (LispModuleData*)dlsym(lisp_module->handle, data)) == NULL) {
	    dlclose(lisp_module->handle);
	    LispDestroy("%s: cannot find LispModuleData for %s",
			STRFUN(builtin), STROBJ(module));
	}
	LispMused(lisp_module);
	lisp_module->next = lisp__data.module;
	lisp__data.module = lisp_module;
	if (lisp_module->data->load)
	    (lisp_module->data->load)();

	if (MOD == NIL)
	    MOD = CONS(module, NIL);
	else {
	    RPLACD(MOD, CONS(CAR(MOD), CDR(MOD)));
	    RPLACA(MOD, module);
d128 5
a132 1
	LispSetVar(lisp__data.modules, MOD);
d134 1
a134 1
	return (module);
d139 1
a139 1
    (void)LispLoadFile(STRING(filename), 0, 0, 0);
d141 1
a141 1
    return (module);
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/require.c,v 1.18 2003/04/27 18:17:34 tsi Exp $ */
d32 1
a32 1
#include "lisp/require.h"
d123 1
a123 1
		LispDestroy("%s: ", STRFUN(builtin), dlerror());
d129 1
a129 1
	    LispDestroy("%s: dlopen: %s", STRFUN(builtin), dlerror());
@


