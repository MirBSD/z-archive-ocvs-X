head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.39.52;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.18.39.36;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.28.35;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 2001 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *  
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE XFREE86 PROJECT BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the XFree86 Project shall
 * not be used in advertising or otherwise to promote the sale, use or other
 * dealings in this Software without prior written authorization from the
 * XFree86 Project.
 *
 * Author: Paulo César Pereira de Andrade
 */

/* $XFree86: xc/programs/xedit/lisp/modules/xaw.c,v 1.7 2001/10/18 03:15:25 paulo Exp $ */

#include <stdlib.h>
#include <X11/Intrinsic.h>
#include <X11/Xaw/AsciiSink.h>
#include <X11/Xaw/AsciiSrc.h>
#include <X11/Xaw/AsciiText.h>
#include <X11/Xaw/Box.h>
#include <X11/Xaw/Command.h>
#include <X11/Xaw/Dialog.h>
#include <X11/Xaw/Form.h>
#include <X11/Xaw/Grip.h>
#include <X11/Xaw/Label.h>
#include <X11/Xaw/List.h>
#include <X11/Xaw/MenuButton.h>
#include <X11/Xaw/MultiSink.h>
#include <X11/Xaw/MultiSrc.h>
#include <X11/Xaw/Paned.h>
#include <X11/Xaw/Panner.h>
#include <X11/Xaw/Porthole.h>
#include <X11/Xaw/Repeater.h>
#include <X11/Xaw/Scrollbar.h>
#include <X11/Xaw/Simple.h>
#include <X11/Xaw/SimpleMenu.h>
#include <X11/Xaw/SmeBSB.h>
#include <X11/Xaw/Sme.h>
#include <X11/Xaw/SmeLine.h>
#include <X11/Xaw/StripChart.h>
#include <X11/Xaw/Text.h>
#include <X11/Xaw/TextSink.h>
#include <X11/Xaw/TextSrc.h>
#include <X11/Xaw/Tip.h>
#include <X11/Xaw/Toggle.h>
#include <X11/Xaw/Tree.h>
#include <X11/Xaw/Viewport.h>
#include <X11/Vendor.h>
#include "internal.h"

/*
 * Prototypes
 */
int xawLoadModule(LispMac*);

LispObj *Lisp_XawCoerceToListReturnStruct(LispMac*, LispObj*, char*);
LispObj *Lisp_XawFormDoLayout(LispMac*, LispObj*, char*);
LispObj *Lisp_XawListHighlight(LispMac*, LispObj*, char*);
LispObj *Lisp_XawListUnhighlight(LispMac*, LispObj*, char*);
LispObj *Lisp_XawTextGetSource(LispMac*, LispObj*, char*);
LispObj *Lisp_XawTextLastPosition(LispMac*, LispObj*, char*);
LispObj *Lisp_XawTextGetInsertionPoint(LispMac*, LispObj*, char*);
LispObj *Lisp_XawTextSetInsertionPoint(LispMac*, LispObj*, char*);

/*
 * Initialization
 */

static LispBuiltin lispbuiltins[] = {
    {"XAW-COERCE-TO-LIST-RETURN-STRUCT",Lisp_XawCoerceToListReturnStruct,1,1,1,},
    {"XAW-FORM-DO-LAYOUT",		Lisp_XawFormDoLayout,		 1,2,2,},
    {"XAW-LIST-HIGHLIGHT",		Lisp_XawListHighlight,		 1,2,2,},
    {"XAW-LIST-UNHIGHLIGHT",		Lisp_XawListUnhighlight,	 1,1,1,},
    {"XAW-TEXT-GET-SOURCE",		Lisp_XawTextGetSource,		 1,1,1,},
    {"XAW-TEXT-LAST-POSITION",		Lisp_XawTextLastPosition,	 1,1,1,},
    {"XAW-TEXT-GET-INSERTION-POINT",	Lisp_XawTextGetInsertionPoint,	 1,1,1,},
    {"XAW-TEXT-SET-INSERTION-POINT",	Lisp_XawTextSetInsertionPoint,	 1,2,2,},
};

LispModuleData xawLispModuleData = {
    LISP_MODULE_VERSION,
    xawLoadModule
};

static int xawWidget_t, xawWidgetClass_t, xawListReturnStruct_t, charpp_t;

/*
 * Implementation
 */
int
xawLoadModule(LispMac *mac)
{
    int i;
    char *fname = "INTERNAL:XAW-LOAD-MODULE";

    xawWidget_t = LispRegisterOpaqueType(mac, "Widget");
    xawWidgetClass_t = LispRegisterOpaqueType(mac, "WidgetClass");
    xawListReturnStruct_t = LispRegisterOpaqueType(mac, "XawListReturnStruct");
    charpp_t = LispRegisterOpaqueType(mac, "char**");

    LispExecute(mac, "(DEFSTRUCT XAW-LIST-RETURN-STRUCT STRING INDEX)\n");

    GCProtect();
    (void)LispSetVariable(mac, ATOM2("ASCII-SINK-OBJECT-CLASS"),
			  OPAQUE(asciiSinkObjectClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("ASCII-SRC-OBJECT-CLASS"),
			  OPAQUE(asciiSinkObjectClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("ASCII-TEXT-WIDGET-CLASS"),
			  OPAQUE(asciiTextWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("BOX-WIDGET-CLASS"),
			  OPAQUE(boxWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("COMMAND-WIDGET-CLASS"),
			  OPAQUE(commandWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("DIALOG-WIDGET-CLASS"),
			  OPAQUE(dialogWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("FORM-WIDGET-CLASS"),
			  OPAQUE(formWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("GRIP-WIDGET-CLASS"),
			  OPAQUE(gripWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("LABEL-WIDGET-CLASS"),
			  OPAQUE(labelWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("LIST-WIDGET-CLASS"),
			  OPAQUE(listWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("MENU-BUTTON-WIDGET-CLASS"),
			  OPAQUE(menuButtonWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("MULTI-SINK-OBJEC-TCLASS"),
			  OPAQUE(multiSinkObjectClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("MULTI-SRC-OBJECT-CLASS"),
			  OPAQUE(multiSrcObjectClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("PANED-WIDGET-CLASS"),
			  OPAQUE(panedWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("PANNER-WIDGET-CLASS"),
			  OPAQUE(pannerWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("PORTHOLE-WIDGET-CLASS"),
			  OPAQUE(portholeWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("REPEATER-WIDGET-CLASS"),
			  OPAQUE(repeaterWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("SCROLLBAR-WIDGET-CLASS"),
			  OPAQUE(scrollbarWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("SIMPLE-MENU-WIDGET-CLASS"),
			  OPAQUE(simpleMenuWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("SIMPLE-WIDGET-CLASS"),
			  OPAQUE(simpleWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("SME-BSB-OBJECT-CLASS"),
			  OPAQUE(smeBSBObjectClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("SME-LINE-OBJECT-CLASS"),
			  OPAQUE(smeLineObjectClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("SME-OBJECT-CLASS"),
			  OPAQUE(smeObjectClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("STRIP-CHART-WIDGET-CLASS"),
			  OPAQUE(stripChartWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("TEXT-WIDGET-CLASS"),
			  OPAQUE(textWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("TEXT-SINKOBJECT-CLASS"),
			  OPAQUE(textSinkObjectClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("TEXT-SRC-OBJECT-CLASS"),
			  OPAQUE(textSrcObjectClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("TIP-WIDGET-CLASS"),
			  OPAQUE(tipWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("TOGGLE-WIDGET-CLASS"),
			  OPAQUE(toggleWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("TREE-WIDGET-CLASS"),
			  OPAQUE(treeWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("VIEWPORT-WIDGET-CLASS"),
			  OPAQUE(viewportWidgetClass, xawWidgetClass_t),
			  fname, 0);
    (void)LispSetVariable(mac, ATOM2("VENDOR-SHELL-WIDGET-CLASS"),
			  OPAQUE(vendorShellWidgetClass, xawWidgetClass_t),
			  fname, 0);
    GCUProtect();

    for (i = 0; i < sizeof(lispbuiltins) / sizeof(lispbuiltins[0]); i++)
	LispAddBuiltinFunction(mac, &lispbuiltins[i]);

    return (1);
}

LispObj *
Lisp_XawCoerceToListReturnStruct(LispMac *mac, LispObj *list, char *fname)
{
    LispObj *res, *code, *frm = FRM;
    XawListReturnStruct *retlist;

    if (!CHECKO(CAR(list), xawListReturnStruct_t))
	LispDestroy(mac, "cannot convert %s to XawListReturnStruct, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    retlist = (XawListReturnStruct*)(CAR(list)->data.opaque.data);

    GCProtect();
    code = CONS(ATOM("MAKE-XAW-LIST-RETURN-STRUCT"),
		CONS(ATOM(":STRING"),
		       CONS(STRING(retlist->string),
			    CONS(ATOM(":INDEX"),
				 CONS(REAL(retlist->list_index), NIL)))));
    FRM = CONS(code, FRM);
    GCUProtect();

    res = EVAL(code);
    FRM = frm;

    return (res);
}

LispObj *
Lisp_XawFormDoLayout(LispMac *mac, LispObj *list, char *fname)
{
    int force;

    if (!CHECKO(CAR(list), xawWidget_t))
	LispDestroy(mac, "cannot convert %s to Widget, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    force = CAR(CDR(list)) != NIL;
    XawFormDoLayout((Widget)(CAR(list)->data.opaque.data), force);

    return (NIL);
}

LispObj *
Lisp_XawTextGetSource(LispMac *mac, LispObj *list, char *fname)
{
    if (!CHECKO(CAR(list), xawWidget_t))
	LispDestroy(mac, "cannot convert %s to Widget, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    return (OPAQUE(XawTextGetSource((Widget)(CAR(list)->data.opaque.data)),
		   xawWidget_t));
}

LispObj *
Lisp_XawTextLastPosition(LispMac *mac, LispObj *list, char *fname)
{
    if (!CHECKO(CAR(list), xawWidget_t))
	LispDestroy(mac, "cannot convert %s to Widget, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    return (REAL(XawTextLastPosition((Widget)(CAR(list)->data.opaque.data))));
}

LispObj *
Lisp_XawTextGetInsertionPoint(LispMac *mac, LispObj *list, char *fname)
{
    if (!CHECKO(CAR(list), xawWidget_t))
	LispDestroy(mac, "cannot convert %s to Widget, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    return (REAL(XawTextGetInsertionPoint((Widget)(CAR(list)->data.opaque.data))));
}

LispObj *
Lisp_XawTextSetInsertionPoint(LispMac *mac, LispObj *list, char *fname)
{
    if (!CHECKO(CAR(list), xawWidget_t))
	LispDestroy(mac, "cannot convert %s to Widget, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    if (CAR(CDR(list))->type != LispReal_t)
	LispDestroy(mac, "cannot convert %s to XawTextPosition, at %s",
		    LispStrObj(mac, CAR(CDR(list))), fname);

    XawTextSetInsertionPoint((Widget)(CAR(list)->data.opaque.data),
			     (XawTextPosition)(CAR(CDR(list))->data.real));

    return (NIL);
}

LispObj *
Lisp_XawListHighlight(LispMac *mac, LispObj *list, char *fname)
{
    if (!CHECKO(CAR(list), xawWidget_t))
	LispDestroy(mac, "cannot convert %s to Widget, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    if (CAR(CDR(list))->type != LispReal_t)
	LispDestroy(mac, "expecting number, at %s", fname);
    XawListHighlight((Widget)(CAR(list)->data.opaque.data),
		     (int)(CAR(CDR(list))->data.real));

    return (NIL);
}

LispObj *
Lisp_XawListUnhighlight(LispMac *mac, LispObj *list, char *fname)
{
    if (!CHECKO(CAR(list), xawWidget_t))
	LispDestroy(mac, "cannot convert %s to Widget, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    XawListUnhighlight((Widget)(CAR(list)->data.opaque.data));

    return (NIL);
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/modules/xaw.c,v 1.16 2003/04/27 18:17:37 tsi Exp $ */
a33 1
#include <X11/StringDefs.h>
d66 1
a66 10
#include "lisp/internal.h"
#include "lisp/private.h"

/*
 * Types
 */
typedef struct {
    LispObj *object;
    void *data;
} WidgetData;
d71 1
a71 2
int xawLoadModule(void);
void LispXawCleanupCallback(Widget, XtPointer, XtPointer);
d73 8
a80 15
/* until a better/smarter interface be written... */
LispObj *Lisp_XawCoerceToListReturnStruct(LispBuiltin*);
LispObj *Lisp_XawScrollbarCoerceToReal(LispBuiltin*);

LispObj *Lisp_XawFormDoLayout(LispBuiltin*);
LispObj *Lisp_XawListChange(LispBuiltin*);
LispObj *Lisp_XawListHighlight(LispBuiltin*);
LispObj *Lisp_XawListUnhighlight(LispBuiltin*);
LispObj *Lisp_XawTextGetSource(LispBuiltin*);
LispObj *Lisp_XawTextLastPosition(LispBuiltin*);
LispObj *Lisp_XawTextReplace(LispBuiltin*);
LispObj *Lisp_XawTextSearch(LispBuiltin*);
LispObj *Lisp_XawTextGetInsertionPoint(LispBuiltin*);
LispObj *Lisp_XawTextSetInsertionPoint(LispBuiltin*);
LispObj *Lisp_XawScrollbarSetThumb(LispBuiltin*);
d87 8
a94 14
    {LispFunction, Lisp_XawCoerceToListReturnStruct, "xaw-coerce-to-list-return-struct opaque"},
    {LispFunction, Lisp_XawScrollbarCoerceToReal, "xaw-scrollbar-coerce-to-real opaque"},

    {LispFunction, Lisp_XawScrollbarSetThumb, "xaw-scrollbar-set-thumb widget top &optional shown"},
    {LispFunction, Lisp_XawFormDoLayout, "xaw-form-do-layout widget force"},
    {LispFunction, Lisp_XawListChange, "xaw-list-change widget list &optional longest resize"},
    {LispFunction, Lisp_XawListHighlight, "xaw-list-highlight widget index"},
    {LispFunction, Lisp_XawListUnhighlight, "xaw-list-unhighlight widget"},
    {LispFunction, Lisp_XawTextGetSource, "xaw-text-get-source widget"},
    {LispFunction, Lisp_XawTextLastPosition, "xaw-text-last-position widget"},
    {LispFunction, Lisp_XawTextReplace, "xaw-text-replace widget left right text"},
    {LispFunction, Lisp_XawTextSearch, "xaw-text-search widget direction text"},
    {LispFunction, Lisp_XawTextGetInsertionPoint, "xaw-text-get-insertion-point widget"},
    {LispFunction, Lisp_XawTextSetInsertionPoint, "xaw-text-set-insertion-point widget position"},
d102 1
a102 3
static int xawWidget_t, xawWidgetClass_t, xawListReturnStruct_t, xawFloatp_t;
static WidgetData **list_data;
static int num_list_data;
d108 1
a108 1
xawLoadModule(void)
d111 1
a111 1
    char *fname = "XAW-LOAD-MODULE";
d113 4
a116 4
    xawWidget_t = LispRegisterOpaqueType("Widget");
    xawWidgetClass_t = LispRegisterOpaqueType("WidgetClass");
    xawListReturnStruct_t = LispRegisterOpaqueType("XawListReturnStruct");
    xawFloatp_t = LispRegisterOpaqueType("float*");
d118 1
a118 1
    LispExecute("(DEFSTRUCT XAW-LIST-RETURN-STRUCT STRING INDEX)\n");
d120 2
a121 2
    GCDisable();
    (void)LispSetVariable(ATOM2("ASCII-SINK-OBJECT-CLASS"),
d124 1
a124 1
    (void)LispSetVariable(ATOM2("ASCII-SRC-OBJECT-CLASS"),
d127 1
a127 1
    (void)LispSetVariable(ATOM2("ASCII-TEXT-WIDGET-CLASS"),
d130 1
a130 1
    (void)LispSetVariable(ATOM2("BOX-WIDGET-CLASS"),
d133 1
a133 1
    (void)LispSetVariable(ATOM2("COMMAND-WIDGET-CLASS"),
d136 1
a136 1
    (void)LispSetVariable(ATOM2("DIALOG-WIDGET-CLASS"),
d139 1
a139 1
    (void)LispSetVariable(ATOM2("FORM-WIDGET-CLASS"),
d142 1
a142 1
    (void)LispSetVariable(ATOM2("GRIP-WIDGET-CLASS"),
d145 1
a145 1
    (void)LispSetVariable(ATOM2("LABEL-WIDGET-CLASS"),
d148 1
a148 1
    (void)LispSetVariable(ATOM2("LIST-WIDGET-CLASS"),
d151 1
a151 1
    (void)LispSetVariable(ATOM2("MENU-BUTTON-WIDGET-CLASS"),
d154 1
a154 1
    (void)LispSetVariable(ATOM2("MULTI-SINK-OBJEC-TCLASS"),
d157 1
a157 1
    (void)LispSetVariable(ATOM2("MULTI-SRC-OBJECT-CLASS"),
d160 1
a160 1
    (void)LispSetVariable(ATOM2("PANED-WIDGET-CLASS"),
d163 1
a163 1
    (void)LispSetVariable(ATOM2("PANNER-WIDGET-CLASS"),
d166 1
a166 1
    (void)LispSetVariable(ATOM2("PORTHOLE-WIDGET-CLASS"),
d169 1
a169 1
    (void)LispSetVariable(ATOM2("REPEATER-WIDGET-CLASS"),
d172 1
a172 1
    (void)LispSetVariable(ATOM2("SCROLLBAR-WIDGET-CLASS"),
d175 1
a175 1
    (void)LispSetVariable(ATOM2("SIMPLE-MENU-WIDGET-CLASS"),
d178 1
a178 1
    (void)LispSetVariable(ATOM2("SIMPLE-WIDGET-CLASS"),
d181 1
a181 1
    (void)LispSetVariable(ATOM2("SME-BSB-OBJECT-CLASS"),
d184 1
a184 1
    (void)LispSetVariable(ATOM2("SME-LINE-OBJECT-CLASS"),
d187 1
a187 1
    (void)LispSetVariable(ATOM2("SME-OBJECT-CLASS"),
d190 1
a190 1
    (void)LispSetVariable(ATOM2("STRIP-CHART-WIDGET-CLASS"),
d193 1
a193 1
    (void)LispSetVariable(ATOM2("TEXT-WIDGET-CLASS"),
d196 1
a196 1
    (void)LispSetVariable(ATOM2("TEXT-SINKOBJECT-CLASS"),
d199 1
a199 1
    (void)LispSetVariable(ATOM2("TEXT-SRC-OBJECT-CLASS"),
d202 1
a202 1
    (void)LispSetVariable(ATOM2("TIP-WIDGET-CLASS"),
d205 1
a205 1
    (void)LispSetVariable(ATOM2("TOGGLE-WIDGET-CLASS"),
d208 1
a208 1
    (void)LispSetVariable(ATOM2("TREE-WIDGET-CLASS"),
d211 1
a211 1
    (void)LispSetVariable(ATOM2("VIEWPORT-WIDGET-CLASS"),
d214 1
a214 1
    (void)LispSetVariable(ATOM2("VENDOR-SHELL-WIDGET-CLASS"),
d217 1
a217 21

    /* return codes of XawTextReplace */
    (void)LispSetVariable(ATOM2("XAW-REPLACE-ERROR"),
			  INTEGER(XawReplaceError), fname, 0);
    (void)LispSetVariable(ATOM2("XAW-EDIT-DONE"),
			  INTEGER(XawEditDone), fname, 0);
    (void)LispSetVariable(ATOM2("XAW-EDIT-ERROR"),
			  INTEGER(XawEditError), fname, 0);
    (void)LispSetVariable(ATOM2("XAW-POSITION-ERROR"),
			  INTEGER(XawPositionError), fname, 0);

    /* return code of XawTextSearch */
    (void)LispSetVariable(ATOM2("XAW-TEXT-SEARCH-ERROR"),
			  INTEGER(XawTextSearchError), fname, 0);

    /* enum XawTextScanDirection */
    (void)LispSetVariable(ATOM2("XAWSD-LEFT"),
			  INTEGER(XawsdLeft), fname, 0);
    (void)LispSetVariable(ATOM2("XAWSD-RIGHT"),
			  INTEGER(XawsdRight), fname, 0);
    GCEnable();
d220 1
a220 1
	LispAddBuiltinFunction(&lispbuiltins[i]);
a224 10
void
LispXawCleanupCallback(Widget w, XtPointer user_data, XtPointer call_data)
{
    WidgetData *data = (WidgetData*)user_data;

    UPROTECT(CAR(data->object), data->object);
    XtFree((XtPointer)data->data);
    XtFree((XtPointer)data);
}

d226 1
a226 4
Lisp_XawCoerceToListReturnStruct(LispBuiltin *builtin)
/*
 xaw-coerce-to-list-return-struct opaque
 */
d228 1
a228 1
    LispObj *result, *code, *ocod = COD;
d231 3
a233 3
    LispObj *opaque;

    opaque = ARGUMENT(0);
d235 1
a235 3
    if (!CHECKO(opaque, xawListReturnStruct_t))
	LispDestroy("%s: cannot convert %s to XawListReturnStruct",
		    STRFUN(builtin), STROBJ(opaque));
d237 1
a237 3
    retlist = (XawListReturnStruct*)(opaque->data.opaque.data);

    GCDisable();
d239 1
a239 1
		CONS(KEYWORD("STRING"),
d241 4
a244 27
			    CONS(KEYWORD("INDEX"),
				 CONS(INTEGER(retlist->list_index), NIL)))));
    COD = CONS(code, COD);
    GCEnable();

    result = EVAL(code);
    COD = ocod;

    return (result);
}

LispObj *
Lisp_XawScrollbarCoerceToReal(LispBuiltin *builtin)
/*
 xaw-scrollbar-coerce-to-real opaque
 */
{
    float *floatp;
    double real;

    LispObj *opaque;

    opaque = ARGUMENT(0);

    if (!CHECKO(opaque, xawFloatp_t))
	LispDestroy("%s: cannot convert %s to float*",
		    STRFUN(builtin), STROBJ(opaque));
d246 2
a247 2
    floatp = (float*)(opaque->data.opaque.data);
    real = *floatp;
d249 1
a249 1
    return (DFLOAT(real));
d253 1
a253 4
Lisp_XawFormDoLayout(LispBuiltin *builtin)
/*
 xaw-form-do-layout widget force
 */
d257 3
a259 1
    LispObj *owidget, *oforce;
d261 2
a262 2
    oforce = ARGUMENT(1);
    owidget = ARGUMENT(0);
d264 1
a264 8
    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));

    force = oforce != NIL;
    XawFormDoLayout((Widget)(owidget->data.opaque.data), force);

    return (oforce);
d268 1
a268 4
Lisp_XawTextGetSource(LispBuiltin *builtin)
/*
 xaw-text-get-source widget
 */
d270 3
a272 7
    LispObj *owidget;

    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
d274 1
a274 1
    return (OPAQUE(XawTextGetSource((Widget)(owidget->data.opaque.data)),
d279 1
a279 4
Lisp_XawTextLastPosition(LispBuiltin *builtin)
/*
 xaw-text-last-position widget
 */
d281 3
a283 3
    LispObj *owidget;

    owidget = ARGUMENT(0);
d285 1
a285 5
    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));

    return (FIXNUM(XawTextLastPosition((Widget)(owidget->data.opaque.data))));
d289 1
a289 4
Lisp_XawTextGetInsertionPoint(LispBuiltin *builtin)
/*
 xaw-text-get-insertion-point widget
 */
d291 3
a293 1
    LispObj *owidget;
d295 1
a295 7
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));

    return (FIXNUM(XawTextGetInsertionPoint((Widget)(owidget->data.opaque.data))));
d299 1
a299 4
Lisp_XawTextSetInsertionPoint(LispBuiltin *builtin)
/*
 xaw-text-set-insertion-point widget position
 */
d301 6
a306 2
    Widget widget;
    XawTextPosition position;
d308 2
a309 1
    LispObj *owidget, *oposition;
d311 1
a311 14
    oposition = ARGUMENT(1);
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
    widget = (Widget)(owidget->data.opaque.data);

    CHECK_INDEX(oposition);
    position = (XawTextPosition)FIXNUM_VALUE(oposition);

    XawTextSetInsertionPoint(widget, position);

    return (oposition);
d315 1
a315 4
Lisp_XawTextReplace(LispBuiltin *builtin)
/*
 xaw-text-replace widget left right text
 */
d317 7
a323 27
    Widget widget;
    XawTextPosition left, right;
    XawTextBlock block;

    LispObj *owidget, *oleft, *oright, *otext;

    otext = ARGUMENT(3);
    oright = ARGUMENT(2);
    oleft = ARGUMENT(1);
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
    widget = (Widget)(owidget->data.opaque.data);

    CHECK_INDEX(oleft);
    left = (XawTextPosition)FIXNUM_VALUE(oleft);

    CHECK_INDEX(oright);
    right = (XawTextPosition)FIXNUM_VALUE(oright);

    CHECK_STRING(otext);
    block.firstPos = 0;
    block.ptr = THESTR(otext);
    block.length = strlen(block.ptr);
    block.format = FMT8BIT;
d325 1
a325 136
    return (FIXNUM(XawTextReplace(widget, left, right, &block)));
}

LispObj *
Lisp_XawTextSearch(LispBuiltin *builtin)
/*
 xaw-text-search widget direction text
 */
{
    Widget widget;
    XawTextScanDirection direction;
    XawTextBlock block;

    LispObj *owidget, *odirection, *otext;

    otext = ARGUMENT(2);
    odirection = ARGUMENT(1);
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
    widget = (Widget)(owidget->data.opaque.data);

    CHECK_INDEX(odirection);
    direction = (XawTextPosition)FIXNUM_VALUE(odirection);
    if (direction != XawsdLeft && direction != XawsdRight)
	LispDestroy("%s: %d does not fit in XawTextScanDirection",
		    STRFUN(builtin), direction);

    CHECK_STRING(otext);
    block.firstPos = 0;
    block.ptr = THESTR(otext);
    block.length = strlen(block.ptr);
    block.format = FMT8BIT;

    return (FIXNUM(XawTextSearch(widget, direction, &block)));
}

LispObj *
Lisp_XawListChange(LispBuiltin *builtin)
/*
 xaw-list-change widget list &optional longest resize
 */
{
    Widget widget;
    String *list;
    int i, nitems;
    int longest;
    Boolean resize;
    LispObj *object;
    WidgetData *data;

    LispObj *owidget, *olist, *olongest, *oresize;

    oresize = ARGUMENT(3);
    olongest = ARGUMENT(2);
    olist = ARGUMENT(1);
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
    widget = (Widget)(owidget->data.opaque.data);

    CHECK_LIST(olist);
    for (nitems = 0, object = olist; CONSP(object);
	 ++nitems, object = CDR(object))
	CHECK_STRING(CAR(object));

    if (olongest != UNSPEC) {
	CHECK_INDEX(olongest);
	longest = FIXNUM_VALUE(olongest);
    }
    else
	XtVaGetValues(widget, XtNlongest, &longest, NULL, 0);
    resize = oresize != UNSPEC && oresize != NIL;

    /* No errors in arguments, build string list */
    list = (String*)XtMalloc(sizeof(String) * nitems);
    for (i = 0, object = olist; CONSP(object); i++, object = CDR(object))
	list[i] = THESTR(CAR(object));

    /* Check if xaw-list-change was already called
      * for this widget and free previous data */
    for (i = 0; i < num_list_data; i++)
	if ((Widget)CAR(list_data[i]->object)->data.opaque.data == widget) {
	    XtRemoveCallback(widget, XtNdestroyCallback,
			     LispXawCleanupCallback, list_data[i]);
	    LispXawCleanupCallback(widget, list_data[i], NULL);
	    break;
	}

    if (i >= num_list_data) {
	++num_list_data;
	list_data = (WidgetData**)XtRealloc((XtPointer)list_data,
					    sizeof(WidgetData*) * num_list_data);
    }

    data = (WidgetData*)XtMalloc(sizeof(WidgetData));
    data->data = list;
    list_data[i] = data;
    data->object = CONS(owidget, olist);
    PROTECT(owidget, data->object);
    XtAddCallback(widget, XtNdestroyCallback, LispXawCleanupCallback, data);

    XawListChange(widget, list, nitems, longest, resize);

    return (olist);
}

LispObj *
Lisp_XawListHighlight(LispBuiltin *builtin)
/*
 xaw-list-highlight widget index
 */
{
    Widget widget;
    int position;

    LispObj *owidget, *oindex;

    oindex = ARGUMENT(1);
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
    widget = (Widget)(owidget->data.opaque.data);

    CHECK_INDEX(oindex);
    position = FIXNUM_VALUE(oindex);

    XawListHighlight(widget, position);

    return (oindex);
d329 1
a329 4
Lisp_XawListUnhighlight(LispBuiltin *builtin)
/*
 xaw-list-unhighlight widget
 */
d331 4
a334 9
    LispObj *owidget;

    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));

    XawListUnhighlight((Widget)(owidget->data.opaque.data));
a336 35
}

LispObj *
Lisp_XawScrollbarSetThumb(LispBuiltin *builtin)
/*
 xaw-scrollbar-set-thumb widget top &optional shown
 */
{
    Widget widget;
    double top, shown;

    LispObj *owidget, *otop, *oshown;

    oshown = ARGUMENT(2);
    otop = ARGUMENT(1);
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
    widget = (Widget)(owidget->data.opaque.data);

    CHECK_DFLOAT(otop);
    top = DFLOAT_VALUE(otop);

    if (oshown == UNSPEC)
	shown = 1.0;
    else {
	CHECK_DFLOAT(oshown);
	shown = DFLOAT_VALUE(oshown);
    }

    XawScrollbarSetThumb(widget, top, shown);

    return (oshown == UNSPEC ? DFLOAT(shown) : oshown);
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/modules/xaw.c,v 1.14 2002/11/23 08:26:52 paulo Exp $ */
a33 1
#include <X11/StringDefs.h>
a66 9
#include "private.h"

/*
 * Types
 */
typedef struct {
    LispObj *object;
    void *data;
} WidgetData;
d71 1
a71 2
int xawLoadModule(void);
void LispXawCleanupCallback(Widget, XtPointer, XtPointer);
d73 8
a80 15
/* until a better/smarter interface be written... */
LispObj *Lisp_XawCoerceToListReturnStruct(LispBuiltin*);
LispObj *Lisp_XawScrollbarCoerceToReal(LispBuiltin*);

LispObj *Lisp_XawFormDoLayout(LispBuiltin*);
LispObj *Lisp_XawListChange(LispBuiltin*);
LispObj *Lisp_XawListHighlight(LispBuiltin*);
LispObj *Lisp_XawListUnhighlight(LispBuiltin*);
LispObj *Lisp_XawTextGetSource(LispBuiltin*);
LispObj *Lisp_XawTextLastPosition(LispBuiltin*);
LispObj *Lisp_XawTextReplace(LispBuiltin*);
LispObj *Lisp_XawTextSearch(LispBuiltin*);
LispObj *Lisp_XawTextGetInsertionPoint(LispBuiltin*);
LispObj *Lisp_XawTextSetInsertionPoint(LispBuiltin*);
LispObj *Lisp_XawScrollbarSetThumb(LispBuiltin*);
d87 8
a94 14
    {LispFunction, Lisp_XawCoerceToListReturnStruct, "xaw-coerce-to-list-return-struct opaque"},
    {LispFunction, Lisp_XawScrollbarCoerceToReal, "xaw-scrollbar-coerce-to-real opaque"},

    {LispFunction, Lisp_XawScrollbarSetThumb, "xaw-scrollbar-set-thumb widget top &optional shown"},
    {LispFunction, Lisp_XawFormDoLayout, "xaw-form-do-layout widget force"},
    {LispFunction, Lisp_XawListChange, "xaw-list-change widget list &optional longest resize"},
    {LispFunction, Lisp_XawListHighlight, "xaw-list-highlight widget index"},
    {LispFunction, Lisp_XawListUnhighlight, "xaw-list-unhighlight widget"},
    {LispFunction, Lisp_XawTextGetSource, "xaw-text-get-source widget"},
    {LispFunction, Lisp_XawTextLastPosition, "xaw-text-last-position widget"},
    {LispFunction, Lisp_XawTextReplace, "xaw-text-replace widget left right text"},
    {LispFunction, Lisp_XawTextSearch, "xaw-text-search widget direction text"},
    {LispFunction, Lisp_XawTextGetInsertionPoint, "xaw-text-get-insertion-point widget"},
    {LispFunction, Lisp_XawTextSetInsertionPoint, "xaw-text-set-insertion-point widget position"},
d102 1
a102 3
static int xawWidget_t, xawWidgetClass_t, xawListReturnStruct_t, xawFloatp_t;
static WidgetData **list_data;
static int num_list_data;
d108 1
a108 1
xawLoadModule(void)
d111 1
a111 1
    char *fname = "XAW-LOAD-MODULE";
d113 4
a116 4
    xawWidget_t = LispRegisterOpaqueType("Widget");
    xawWidgetClass_t = LispRegisterOpaqueType("WidgetClass");
    xawListReturnStruct_t = LispRegisterOpaqueType("XawListReturnStruct");
    xawFloatp_t = LispRegisterOpaqueType("float*");
d118 1
a118 1
    LispExecute("(DEFSTRUCT XAW-LIST-RETURN-STRUCT STRING INDEX)\n");
d120 2
a121 2
    GCDisable();
    (void)LispSetVariable(ATOM2("ASCII-SINK-OBJECT-CLASS"),
d124 1
a124 1
    (void)LispSetVariable(ATOM2("ASCII-SRC-OBJECT-CLASS"),
d127 1
a127 1
    (void)LispSetVariable(ATOM2("ASCII-TEXT-WIDGET-CLASS"),
d130 1
a130 1
    (void)LispSetVariable(ATOM2("BOX-WIDGET-CLASS"),
d133 1
a133 1
    (void)LispSetVariable(ATOM2("COMMAND-WIDGET-CLASS"),
d136 1
a136 1
    (void)LispSetVariable(ATOM2("DIALOG-WIDGET-CLASS"),
d139 1
a139 1
    (void)LispSetVariable(ATOM2("FORM-WIDGET-CLASS"),
d142 1
a142 1
    (void)LispSetVariable(ATOM2("GRIP-WIDGET-CLASS"),
d145 1
a145 1
    (void)LispSetVariable(ATOM2("LABEL-WIDGET-CLASS"),
d148 1
a148 1
    (void)LispSetVariable(ATOM2("LIST-WIDGET-CLASS"),
d151 1
a151 1
    (void)LispSetVariable(ATOM2("MENU-BUTTON-WIDGET-CLASS"),
d154 1
a154 1
    (void)LispSetVariable(ATOM2("MULTI-SINK-OBJEC-TCLASS"),
d157 1
a157 1
    (void)LispSetVariable(ATOM2("MULTI-SRC-OBJECT-CLASS"),
d160 1
a160 1
    (void)LispSetVariable(ATOM2("PANED-WIDGET-CLASS"),
d163 1
a163 1
    (void)LispSetVariable(ATOM2("PANNER-WIDGET-CLASS"),
d166 1
a166 1
    (void)LispSetVariable(ATOM2("PORTHOLE-WIDGET-CLASS"),
d169 1
a169 1
    (void)LispSetVariable(ATOM2("REPEATER-WIDGET-CLASS"),
d172 1
a172 1
    (void)LispSetVariable(ATOM2("SCROLLBAR-WIDGET-CLASS"),
d175 1
a175 1
    (void)LispSetVariable(ATOM2("SIMPLE-MENU-WIDGET-CLASS"),
d178 1
a178 1
    (void)LispSetVariable(ATOM2("SIMPLE-WIDGET-CLASS"),
d181 1
a181 1
    (void)LispSetVariable(ATOM2("SME-BSB-OBJECT-CLASS"),
d184 1
a184 1
    (void)LispSetVariable(ATOM2("SME-LINE-OBJECT-CLASS"),
d187 1
a187 1
    (void)LispSetVariable(ATOM2("SME-OBJECT-CLASS"),
d190 1
a190 1
    (void)LispSetVariable(ATOM2("STRIP-CHART-WIDGET-CLASS"),
d193 1
a193 1
    (void)LispSetVariable(ATOM2("TEXT-WIDGET-CLASS"),
d196 1
a196 1
    (void)LispSetVariable(ATOM2("TEXT-SINKOBJECT-CLASS"),
d199 1
a199 1
    (void)LispSetVariable(ATOM2("TEXT-SRC-OBJECT-CLASS"),
d202 1
a202 1
    (void)LispSetVariable(ATOM2("TIP-WIDGET-CLASS"),
d205 1
a205 1
    (void)LispSetVariable(ATOM2("TOGGLE-WIDGET-CLASS"),
d208 1
a208 1
    (void)LispSetVariable(ATOM2("TREE-WIDGET-CLASS"),
d211 1
a211 1
    (void)LispSetVariable(ATOM2("VIEWPORT-WIDGET-CLASS"),
d214 1
a214 1
    (void)LispSetVariable(ATOM2("VENDOR-SHELL-WIDGET-CLASS"),
d217 1
a217 21

    /* return codes of XawTextReplace */
    (void)LispSetVariable(ATOM2("XAW-REPLACE-ERROR"),
			  INTEGER(XawReplaceError), fname, 0);
    (void)LispSetVariable(ATOM2("XAW-EDIT-DONE"),
			  INTEGER(XawEditDone), fname, 0);
    (void)LispSetVariable(ATOM2("XAW-EDIT-ERROR"),
			  INTEGER(XawEditError), fname, 0);
    (void)LispSetVariable(ATOM2("XAW-POSITION-ERROR"),
			  INTEGER(XawPositionError), fname, 0);

    /* return code of XawTextSearch */
    (void)LispSetVariable(ATOM2("XAW-TEXT-SEARCH-ERROR"),
			  INTEGER(XawTextSearchError), fname, 0);

    /* enum XawTextScanDirection */
    (void)LispSetVariable(ATOM2("XAWSD-LEFT"),
			  INTEGER(XawsdLeft), fname, 0);
    (void)LispSetVariable(ATOM2("XAWSD-RIGHT"),
			  INTEGER(XawsdRight), fname, 0);
    GCEnable();
d220 1
a220 1
	LispAddBuiltinFunction(&lispbuiltins[i]);
a224 10
void
LispXawCleanupCallback(Widget w, XtPointer user_data, XtPointer call_data)
{
    WidgetData *data = (WidgetData*)user_data;

    UPROTECT(CAR(data->object), data->object);
    XtFree((XtPointer)data->data);
    XtFree((XtPointer)data);
}

d226 1
a226 4
Lisp_XawCoerceToListReturnStruct(LispBuiltin *builtin)
/*
 xaw-coerce-to-list-return-struct opaque
 */
d228 1
a228 1
    LispObj *result, *code, *ocod = COD;
d231 3
a233 3
    LispObj *opaque;

    opaque = ARGUMENT(0);
d235 1
a235 3
    if (!CHECKO(opaque, xawListReturnStruct_t))
	LispDestroy("%s: cannot convert %s to XawListReturnStruct",
		    STRFUN(builtin), STROBJ(opaque));
d237 1
a237 3
    retlist = (XawListReturnStruct*)(opaque->data.opaque.data);

    GCDisable();
d239 1
a239 1
		CONS(KEYWORD("STRING"),
d241 4
a244 28
			    CONS(KEYWORD("INDEX"),
				 CONS(INTEGER(retlist->list_index), NIL)))));
    COD = CONS(code, COD);
    GCEnable();

    result = EVAL(code);
    COD = ocod;

    return (result);
}

LispObj *
Lisp_XawScrollbarCoerceToReal(LispBuiltin *builtin)
/*
 xaw-scrollbar-coerce-to-real opaque
 */
{
    LispObj *result;
    float *floatp;
    double real;

    LispObj *opaque;

    opaque = ARGUMENT(0);

    if (!CHECKO(opaque, xawFloatp_t))
	LispDestroy("%s: cannot convert %s to float*",
		    STRFUN(builtin), STROBJ(opaque));
d246 2
a247 2
    floatp = (float*)(opaque->data.opaque.data);
    real = *floatp;
d249 1
a249 1
    return (DFLOAT(real));
d253 1
a253 4
Lisp_XawFormDoLayout(LispBuiltin *builtin)
/*
 xaw-form-do-layout widget force
 */
d257 3
a259 1
    LispObj *owidget, *oforce;
d261 2
a262 2
    oforce = ARGUMENT(1);
    owidget = ARGUMENT(0);
d264 1
a264 8
    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));

    force = oforce != NIL;
    XawFormDoLayout((Widget)(owidget->data.opaque.data), force);

    return (oforce);
d268 1
a268 4
Lisp_XawTextGetSource(LispBuiltin *builtin)
/*
 xaw-text-get-source widget
 */
d270 3
a272 7
    LispObj *owidget;

    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
d274 1
a274 1
    return (OPAQUE(XawTextGetSource((Widget)(owidget->data.opaque.data)),
d279 1
a279 4
Lisp_XawTextLastPosition(LispBuiltin *builtin)
/*
 xaw-text-last-position widget
 */
d281 3
a283 3
    LispObj *owidget;

    owidget = ARGUMENT(0);
d285 1
a285 5
    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));

    return (FIXNUM(XawTextLastPosition((Widget)(owidget->data.opaque.data))));
d289 1
a289 4
Lisp_XawTextGetInsertionPoint(LispBuiltin *builtin)
/*
 xaw-text-get-insertion-point widget
 */
d291 3
a293 1
    LispObj *owidget;
d295 1
a295 7
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));

    return (FIXNUM(XawTextGetInsertionPoint((Widget)(owidget->data.opaque.data))));
d299 1
a299 4
Lisp_XawTextSetInsertionPoint(LispBuiltin *builtin)
/*
 xaw-text-set-insertion-point widget position
 */
d301 6
a306 2
    Widget widget;
    XawTextPosition position;
d308 2
a309 1
    LispObj *owidget, *oposition;
d311 1
a311 14
    oposition = ARGUMENT(1);
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
    widget = (Widget)(owidget->data.opaque.data);

    CHECK_INDEX(oposition);
    position = (XawTextPosition)FIXNUM_VALUE(oposition);

    XawTextSetInsertionPoint(widget, position);

    return (oposition);
d315 1
a315 4
Lisp_XawTextReplace(LispBuiltin *builtin)
/*
 xaw-text-replace widget left right text
 */
d317 7
a323 27
    Widget widget;
    XawTextPosition left, right;
    XawTextBlock block;

    LispObj *owidget, *oleft, *oright, *otext;

    otext = ARGUMENT(3);
    oright = ARGUMENT(2);
    oleft = ARGUMENT(1);
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
    widget = (Widget)(owidget->data.opaque.data);

    CHECK_INDEX(oleft);
    left = (XawTextPosition)FIXNUM_VALUE(oleft);

    CHECK_INDEX(oright);
    right = (XawTextPosition)FIXNUM_VALUE(oright);

    CHECK_STRING(otext);
    block.firstPos = 0;
    block.ptr = THESTR(otext);
    block.length = strlen(block.ptr);
    block.format = FMT8BIT;
d325 1
a325 136
    return (FIXNUM(XawTextReplace(widget, left, right, &block)));
}

LispObj *
Lisp_XawTextSearch(LispBuiltin *builtin)
/*
 xaw-text-search widget direction text
 */
{
    Widget widget;
    XawTextScanDirection direction;
    XawTextBlock block;

    LispObj *owidget, *odirection, *otext;

    otext = ARGUMENT(2);
    odirection = ARGUMENT(1);
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
    widget = (Widget)(owidget->data.opaque.data);

    CHECK_INDEX(odirection);
    direction = (XawTextPosition)FIXNUM_VALUE(odirection);
    if (direction != XawsdLeft && direction != XawsdRight)
	LispDestroy("%s: %d does not fit in XawTextScanDirection",
		    STRFUN(builtin), direction);

    CHECK_STRING(otext);
    block.firstPos = 0;
    block.ptr = THESTR(otext);
    block.length = strlen(block.ptr);
    block.format = FMT8BIT;

    return (FIXNUM(XawTextSearch(widget, direction, &block)));
}

LispObj *
Lisp_XawListChange(LispBuiltin *builtin)
/*
 xaw-list-change widget list &optional longest resize
 */
{
    Widget widget;
    String *list;
    int i, nitems;
    int longest;
    Boolean resize;
    LispObj *object;
    WidgetData *data;

    LispObj *owidget, *olist, *olongest, *oresize;

    oresize = ARGUMENT(3);
    olongest = ARGUMENT(2);
    olist = ARGUMENT(1);
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
    widget = (Widget)(owidget->data.opaque.data);

    CHECK_LIST(olist);
    for (nitems = 0, object = olist; CONSP(object);
	 ++nitems, object = CDR(object))
	CHECK_STRING(CAR(object));

    if (olongest != UNSPEC) {
	CHECK_INDEX(olongest);
	longest = FIXNUM_VALUE(olongest);
    }
    else
	XtVaGetValues(widget, XtNlongest, &longest, NULL, 0);
    resize = oresize != UNSPEC && oresize != NIL;

    /* No errors in arguments, build string list */
    list = (String*)XtMalloc(sizeof(String) * nitems);
    for (i = 0, object = olist; CONSP(object); i++, object = CDR(object))
	list[i] = THESTR(CAR(object));

    /* Check if xaw-list-change was already called
      * for this widget and free previous data */
    for (i = 0; i < num_list_data; i++)
	if ((Widget)CAR(list_data[i]->object)->data.opaque.data == widget) {
	    XtRemoveCallback(widget, XtNdestroyCallback,
			     LispXawCleanupCallback, list_data[i]);
	    LispXawCleanupCallback(widget, list_data[i], NULL);
	    break;
	}

    if (i >= num_list_data) {
	++num_list_data;
	list_data = (WidgetData**)XtRealloc((XtPointer)list_data,
					    sizeof(WidgetData*) * num_list_data);
    }

    data = (WidgetData*)XtMalloc(sizeof(WidgetData));
    data->data = list;
    list_data[i] = data;
    data->object = CONS(owidget, olist);
    PROTECT(owidget, data->object);
    XtAddCallback(widget, XtNdestroyCallback, LispXawCleanupCallback, data);

    XawListChange(widget, list, nitems, longest, resize);

    return (olist);
}

LispObj *
Lisp_XawListHighlight(LispBuiltin *builtin)
/*
 xaw-list-highlight widget index
 */
{
    Widget widget;
    int position;

    LispObj *owidget, *oindex;

    oindex = ARGUMENT(1);
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
    widget = (Widget)(owidget->data.opaque.data);

    CHECK_INDEX(oindex);
    position = FIXNUM_VALUE(oindex);

    XawListHighlight(widget, position);

    return (oindex);
d329 1
a329 4
Lisp_XawListUnhighlight(LispBuiltin *builtin)
/*
 xaw-list-unhighlight widget
 */
d331 4
a334 9
    LispObj *owidget;

    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));

    XawListUnhighlight((Widget)(owidget->data.opaque.data));
a336 35
}

LispObj *
Lisp_XawScrollbarSetThumb(LispBuiltin *builtin)
/*
 xaw-scrollbar-set-thumb widget top &optional shown
 */
{
    Widget widget;
    double top, shown;

    LispObj *owidget, *otop, *oshown;

    oshown = ARGUMENT(2);
    otop = ARGUMENT(1);
    owidget = ARGUMENT(0);

    if (!CHECKO(owidget, xawWidget_t))
	LispDestroy("%s: cannot convert %s to Widget",
		    STRFUN(builtin), STROBJ(owidget));
    widget = (Widget)(owidget->data.opaque.data);

    CHECK_DFLOAT(otop);
    top = DFLOAT_VALUE(otop);

    if (oshown == UNSPEC)
	shown = 1.0;
    else {
	CHECK_DFLOAT(oshown);
	shown = DFLOAT_VALUE(oshown);
    }

    XawScrollbarSetThumb(widget, top, shown);

    return (oshown == UNSPEC ? DFLOAT(shown) : oshown);
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/modules/xaw.c,v 1.16 2003/04/27 18:17:37 tsi Exp $ */
d67 2
a68 2
#include "lisp/internal.h"
#include "lisp/private.h"
d321 1
@


