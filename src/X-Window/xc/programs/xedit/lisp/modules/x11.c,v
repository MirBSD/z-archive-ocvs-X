head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.39.52;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.18.39.35;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.28.35;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 2001 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *  
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE XFREE86 PROJECT BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the XFree86 Project shall
 * not be used in advertising or otherwise to promote the sale, use or other
 * dealings in this Software without prior written authorization from the
 * XFree86 Project.
 *
 * Author: Paulo César Pereira de Andrade
 */

/* $XFree86: xc/programs/xedit/lisp/modules/x11.c,v 1.4 2001/10/15 07:05:53 paulo Exp $ */

#include <stdlib.h>
#include <string.h>
#include "internal.h"
#include <X11/Xlib.h>

/*
 * Prototypes
 */
int x11LoadModule(LispMac*);

LispObj *Lisp_XOpenDisplay(LispMac*, LispObj*, char*);
LispObj *Lisp_XCloseDisplay(LispMac*, LispObj*, char*);
LispObj *Lisp_XDefaultRootWindow(LispMac*, LispObj*, char*);
LispObj *Lisp_XDefaultScreenOfDisplay(LispMac*, LispObj*, char*);
LispObj *Lisp_XBlackPixelOfScreen(LispMac*, LispObj*, char*);
LispObj *Lisp_XWhitePixelOfScreen(LispMac*, LispObj*, char*);
LispObj *Lisp_XDefaultGCOfScreen(LispMac*, LispObj*, char*);
LispObj *Lisp_XCreateSimpleWindow(LispMac*, LispObj*, char*);
LispObj *Lisp_XMapWindow(LispMac*, LispObj*, char*);
LispObj *Lisp_XDestroyWindow(LispMac*, LispObj*, char*);
LispObj *Lisp_XFlush(LispMac*, LispObj*, char*);

LispObj *Lisp_XDrawLine(LispMac*, LispObj*, char*);

/*
 * Initialization
 */
static LispBuiltin lispbuiltins[] = {
    {"X-OPEN-DISPLAY",			Lisp_XOpenDisplay,		1,0,1,},
    {"X-CLOSE-DISPLAY",			Lisp_XCloseDisplay,		1,1,1,},
    {"X-DEFAULT-ROOT-WINDOW",		Lisp_XDefaultRootWindow,	1,1,1,},
    {"X-DEFAULT-SCREEN-OF-DISPLAY",	Lisp_XDefaultScreenOfDisplay,	1,1,1,},
    {"X-BLACK-PIXEL-OF-SCREEN",		Lisp_XBlackPixelOfScreen,	1,1,1,},
    {"X-WHITE-PIXEL-OF-SCREEN",		Lisp_XWhitePixelOfScreen,	1,1,1,},
    {"X-DEFAULT-GC-OF-SCREEN",		Lisp_XDefaultGCOfScreen,	1,1,1,},
    {"X-CREATE-SIMPLE-WINDOW",		Lisp_XCreateSimpleWindow,	1,9,9,},
    {"X-MAP-WINDOW",			Lisp_XMapWindow,		1,2,2,},
    {"X-DESTROY-WINDOW",		Lisp_XDestroyWindow,		1,2,2,},
    {"X-FLUSH",				Lisp_XFlush,			1,1,1,},
    {"X-DRAW-LINE",			Lisp_XDrawLine,			1,7,7,},
};

LispModuleData x11LispModuleData = {
    LISP_MODULE_VERSION,
    x11LoadModule
};

static int x11Display_t, x11Screen_t, x11Window_t, x11GC_t;

/*
 * Implementation
 */
int
x11LoadModule(LispMac *mac)
{
    int i;

    x11Display_t = LispRegisterOpaqueType(mac, "Display*");
    x11Screen_t = LispRegisterOpaqueType(mac, "Screen*");
    x11Window_t = LispRegisterOpaqueType(mac, "Window");
    x11GC_t = LispRegisterOpaqueType(mac, "GC");

    for (i = 0; i < sizeof(lispbuiltins) / sizeof(lispbuiltins[0]); i++)
	LispAddBuiltinFunction(mac, &lispbuiltins[i]);

    return (1);
}

LispObj *
Lisp_XOpenDisplay(LispMac *mac, LispObj *list, char *fname)
{
    LispObj *nam;
    char *dname;

    if (list == NIL)
	dname = NULL;
    else if ((nam = CAR(list))->type == LispString_t)
	dname = STRPTR(nam);
    else
	LispDestroy(mac, "%s is not a valid display name, at %s",
		    LispStrObj(mac, nam), fname);

    return (OPAQUE(XOpenDisplay(dname), x11Display_t));
}

LispObj *
Lisp_XCloseDisplay(LispMac *mac, LispObj *list, char *fname)
{
    if (!CHECKO(CAR(list), x11Display_t))
	LispDestroy(mac, "cannot convert %s to Display*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    XCloseDisplay((Display*)(CAR(list)->data.opaque.data));

    return (NIL);
}

LispObj *
Lisp_XDefaultRootWindow(LispMac *mac, LispObj *list, char *fname)
{
    if (!CHECKO(CAR(list), x11Display_t))
	LispDestroy(mac, "cannot convert %s to Display*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    return (OPAQUE(XDefaultRootWindow((Display*)(CAR(list)->data.opaque.data)),
		   x11Window_t));
}

LispObj *
Lisp_XDefaultScreenOfDisplay(LispMac *mac, LispObj *list, char *fname)
{
    if (!CHECKO(CAR(list), x11Display_t))
	LispDestroy(mac, "cannot convert %s to Display*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    return (OPAQUE(XDefaultScreenOfDisplay((Display*)(CAR(list)->data.opaque.data)),
		   x11Screen_t));
}

LispObj *
Lisp_XBlackPixelOfScreen(LispMac *mac, LispObj *list, char *fname)
{
    if (!CHECKO(CAR(list), x11Screen_t))
	LispDestroy(mac, "cannot convert %s to Screen*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    return (REAL((double)
		 XBlackPixelOfScreen((Screen*)(CAR(list)->data.opaque.data))));
}

LispObj *
Lisp_XWhitePixelOfScreen(LispMac *mac, LispObj *list, char *fname)
{
    if (!CHECKO(CAR(list), x11Screen_t))
	LispDestroy(mac, "cannot convert %s to Screen*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    return (REAL((double)
		 XWhitePixelOfScreen((Screen*)(CAR(list)->data.opaque.data))));
}

LispObj *
Lisp_XDefaultGCOfScreen(LispMac *mac, LispObj *list, char *fname)
{
    if (!CHECKO(CAR(list), x11Screen_t))
	LispDestroy(mac, "cannot convert %s to Screen*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    return (OPAQUE(XDefaultGCOfScreen((Screen*)(CAR(list)->data.opaque.data)),
		   x11GC_t));
}

LispObj *
Lisp_XCreateSimpleWindow(LispMac *mac, LispObj *list, char *fname)
{
    Display *display;
    Window parent;
    int x, y;
    unsigned int width, height, border_width;
    unsigned long border, background;

    if (!CHECKO(CAR(list), x11Display_t))
	LispDestroy(mac, "cannot convert %s to Display*, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    display = (Display*)(CAR(list)->data.opaque.data);
    list = CDR(list);

    if (!CHECKO(CAR(list), x11Window_t))
	LispDestroy(mac, "cannot convert %s to Window, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    parent = (Window)(CAR(list)->data.opaque.data);
    list = CDR(list);

    if (CAR(list)->type != LispReal_t ||
	(int)(CAR(list)->data.real) != CAR(list)->data.real)
	LispDestroy(mac, "Cannot convert %s to int, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    x = (int)(CAR(list)->data.real);
    list = CDR(list);

    if (CAR(list)->type != LispReal_t ||
	(int)(CAR(list)->data.real) != CAR(list)->data.real)
	LispDestroy(mac, "Cannot convert %s to int, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    y = (int)(CAR(list)->data.real);
    list = CDR(list);

    if (CAR(list)->type != LispReal_t ||
	CAR(list)->data.real < 0 ||
	(int)(CAR(list)->data.real) != CAR(list)->data.real)
	LispDestroy(mac, "Cannot convert %s to unsigned int, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    width = (unsigned int)(CAR(list)->data.real);
    list = CDR(list);

    if (CAR(list)->type != LispReal_t ||
	CAR(list)->data.real < 0 ||
	(int)(CAR(list)->data.real) != CAR(list)->data.real)
	LispDestroy(mac, "Cannot convert %s to unsigned int, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    height = (unsigned int)(CAR(list)->data.real);
    list = CDR(list);

    if (CAR(list)->type != LispReal_t ||
	CAR(list)->data.real < 0 ||
	(int)(CAR(list)->data.real) != CAR(list)->data.real)
	LispDestroy(mac, "Cannot convert %s to unsigned int, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    border_width = (unsigned int)(CAR(list)->data.real);
    list = CDR(list);

    if (CAR(list)->type != LispReal_t ||
	CAR(list)->data.real < 0 ||
	(int)(CAR(list)->data.real) != CAR(list)->data.real)
	LispDestroy(mac, "Cannot convert %s to unsigned long, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    border = (unsigned int)(CAR(list)->data.real);
    list = CDR(list);

    if (CAR(list)->type != LispReal_t ||
	CAR(list)->data.real < 0 ||
	(int)(CAR(list)->data.real) != CAR(list)->data.real)
	LispDestroy(mac, "Cannot convert %s to unsigned long, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    background = (unsigned int)(CAR(list)->data.real);

    return (OPAQUE(
	    XCreateSimpleWindow(display, parent, x, y, width, height,
				border_width, border, background),
	    x11Window_t));
}

LispObj *
Lisp_XMapWindow(LispMac *mac, LispObj *list, char *fname)
{
    Display *display;
    Window window;

    if (!CHECKO(CAR(list), x11Display_t))
	LispDestroy(mac, "cannot convert %s to Display*, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    display = (Display*)(CAR(list)->data.opaque.data);
    list = CDR(list);

    if (!CHECKO(CAR(list), x11Window_t))
	LispDestroy(mac, "cannot convert %s to Window, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    window = (Window)(CAR(list)->data.opaque.data);

    XMapWindow(display, window);

    return (CAR(list));
}

LispObj *
Lisp_XDestroyWindow(LispMac *mac, LispObj *list, char *fname)
{
    Display *display;
    Window window;

    if (!CHECKO(CAR(list), x11Display_t))
	LispDestroy(mac, "cannot convert %s to Display*, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    display = (Display*)(CAR(list)->data.opaque.data);
    list = CDR(list);

    if (!CHECKO(CAR(list), x11Window_t))
	LispDestroy(mac, "cannot convert %s to Window, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    window = (Window)(CAR(list)->data.opaque.data);

    XDestroyWindow(display, window);

    return (NIL);
}

LispObj *
Lisp_XFlush(LispMac *mac, LispObj *list, char *fname)
{
    Display *display;

    if (!CHECKO(CAR(list), x11Display_t))
	LispDestroy(mac, "cannot convert %s to Display*, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    display = (Display*)(CAR(list)->data.opaque.data);

    XFlush(display);

    return (NIL);
}

LispObj *
Lisp_XDrawLine(LispMac *mac, LispObj *list, char *fname)
{
    Display *display;
    Drawable window;
    GC gc;
    int x0, y0, x1, y1;

    if (!CHECKO(CAR(list), x11Display_t))
	LispDestroy(mac, "cannot convert %s to Display*, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    display = (Display*)(CAR(list)->data.opaque.data);
    list = CDR(list);

    if (!CHECKO(CAR(list), x11Window_t))
	LispDestroy(mac, "cannot convert %s to Drawable, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    window = (Drawable)(CAR(list)->data.opaque.data);
    list = CDR(list);

    if (!CHECKO(CAR(list), x11GC_t))
	LispDestroy(mac, "cannot convert %s to GC, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    gc = (GC)(CAR(list)->data.opaque.data);
    list = CDR(list);

    if (CAR(list)->type != LispReal_t)
	LispDestroy(mac, "Cannot convert %s to int, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    x0 = (int)(CAR(list)->data.real);
    list = CDR(list);
    if (CAR(list)->type != LispReal_t)
	LispDestroy(mac, "Cannot convert %s to int, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    y0 = (int)(CAR(list)->data.real);
    list = CDR(list);
    if (CAR(list)->type != LispReal_t)
	LispDestroy(mac, "Cannot convert %s to int, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    x1 = (int)(CAR(list)->data.real);
    list = CDR(list);
    if (CAR(list)->type != LispReal_t)
	LispDestroy(mac, "Cannot convert %s to int, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    y1 = (int)(CAR(list)->data.real);
    list = CDR(list);

    XDrawLine(display, window, gc, x0, y0, x1, y1);

    return (NIL);
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/modules/x11.c,v 1.12 2003/04/27 18:17:37 tsi Exp $ */
d34 1
a34 2
#include "lisp/internal.h"
#include "lisp/private.h"
d40 1
a40 1
int x11LoadModule(void);
d42 11
a52 19
LispObj *Lisp_XOpenDisplay(LispBuiltin *builtin);
LispObj *Lisp_XCloseDisplay(LispBuiltin *builtin);
LispObj *Lisp_XDefaultRootWindow(LispBuiltin *builtin);
LispObj *Lisp_XDefaultScreen(LispBuiltin *builtin);
LispObj *Lisp_XDefaultScreenOfDisplay(LispBuiltin *builtin);
LispObj *Lisp_XBlackPixel(LispBuiltin *builtin);
LispObj *Lisp_XBlackPixelOfScreen(LispBuiltin *builtin);
LispObj *Lisp_XWidthOfScreen(LispBuiltin *builtin);
LispObj *Lisp_XHeightOfScreen(LispBuiltin *builtin);
LispObj *Lisp_XWhitePixel(LispBuiltin *builtin);
LispObj *Lisp_XWhitePixelOfScreen(LispBuiltin *builtin);
LispObj *Lisp_XDefaultGC(LispBuiltin *builtin);
LispObj *Lisp_XDefaultGCOfScreen(LispBuiltin *builtin);
LispObj *Lisp_XCreateSimpleWindow(LispBuiltin *builtin);
LispObj *Lisp_XMapWindow(LispBuiltin *builtin);
LispObj *Lisp_XDestroyWindow(LispBuiltin *builtin);
LispObj *Lisp_XFlush(LispBuiltin *builtin);
LispObj *Lisp_XRaiseWindow(LispBuiltin *builtin);
LispObj *Lisp_XBell(LispBuiltin *builtin);
d54 1
a54 1
LispObj *Lisp_XDrawLine(LispBuiltin *builtin);
d60 12
a71 20
    {LispFunction, Lisp_XOpenDisplay, "x-open-display &optional display-name"},
    {LispFunction, Lisp_XCloseDisplay, "x-close-display display"},
    {LispFunction, Lisp_XDefaultRootWindow, "x-default-root-window display"},
    {LispFunction, Lisp_XDefaultScreen, "x-default-screen display"},
    {LispFunction, Lisp_XDefaultScreenOfDisplay, "x-default-screen-of-display display"},
    {LispFunction, Lisp_XBlackPixel, "x-black-pixel display &optional screen"},
    {LispFunction, Lisp_XBlackPixelOfScreen, "x-black-pixel-of-screen screen"},
    {LispFunction, Lisp_XWhitePixel, "x-white-pixel display &optional screen"},
    {LispFunction, Lisp_XWhitePixelOfScreen, "x-white-pixel-of-screen screen"},
    {LispFunction, Lisp_XDefaultGC, "x-default-gc display &optional screen"},
    {LispFunction, Lisp_XDefaultGCOfScreen, "x-default-gc-of-screen screen"},
    {LispFunction, Lisp_XCreateSimpleWindow, "x-create-simple-window display parent x y width height &optional border-width border background"},
    {LispFunction, Lisp_XMapWindow, "x-map-window display window"},
    {LispFunction, Lisp_XDestroyWindow, "X-DESTROY-WINDOW"},
    {LispFunction, Lisp_XFlush, "x-flush display"},
    {LispFunction, Lisp_XDrawLine, "x-draw-line display drawable gc x1 y1 x2 y2"},
    {LispFunction, Lisp_XBell, "x-bell display &optional percent"},
    {LispFunction, Lisp_XRaiseWindow, "x-raise-window display window"},
    {LispFunction, Lisp_XWidthOfScreen, "x-width-of-screen screen"},
    {LispFunction, Lisp_XHeightOfScreen, "x-height-of-screen screen"},
d85 1
a85 1
x11LoadModule(void)
d89 4
a92 4
    x11Display_t = LispRegisterOpaqueType("Display*");
    x11Screen_t = LispRegisterOpaqueType("Screen*");
    x11Window_t = LispRegisterOpaqueType("Window");
    x11GC_t = LispRegisterOpaqueType("GC");
d95 1
a95 1
	LispAddBuiltinFunction(&lispbuiltins[i]);
d101 1
a101 4
Lisp_XOpenDisplay(LispBuiltin *builtin)
/*
x-open-display &optional display-name
 */
d103 1
a103 1
    LispObj *display_name;
d106 1
a106 3
    display_name = ARGUMENT(0);

    if (display_name == UNSPEC)
d108 5
a112 4
    else {
	CHECK_STRING(display_name);
	dname = THESTR(display_name);
    }
d118 1
a118 4
Lisp_XCloseDisplay(LispBuiltin *builtin)
/*
 x-close-display display
 */
d120 3
a122 1
    LispObj *display;
d124 1
a124 7
    display = ARGUMENT(0);

    if (!CHECKO(display, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(display));

    XCloseDisplay((Display*)(display->data.opaque.data));
d130 1
a130 4
Lisp_XDefaultRootWindow(LispBuiltin *builtin)
/*
 x-default-root-window display
 */
d132 3
a134 3
    LispObj *display;

    display = ARGUMENT(0);
d136 1
a136 5
    if (!CHECKO(display, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(display));

    return (OPAQUE(DefaultRootWindow((Display*)(display->data.opaque.data)),
d141 1
a141 4
Lisp_XDefaultScreen(LispBuiltin *builtin)
/*
 x-default-screen display
 */
d143 3
a145 7
    LispObj *display;

    display = ARGUMENT(0);

    if (!CHECKO(display, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(display));
d147 1
a147 18
    return (INTEGER(DefaultScreen((Display*)(display->data.opaque.data))));
}

LispObj *
Lisp_XDefaultScreenOfDisplay(LispBuiltin *builtin)
/*
 x-default-screen-of-display display
 */
{
    LispObj *display;

    display = ARGUMENT(0);

    if (!CHECKO(display, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(display));

    return (OPAQUE(DefaultScreenOfDisplay((Display*)(display->data.opaque.data)),
d152 1
a152 37
Lisp_XBlackPixel(LispBuiltin *builtin)
/*
 x-black-pixel display &optional screen
 */
{
    Display *display;
    int screen;

    LispObj *odisplay, *oscreen;

    oscreen = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (oscreen == UNSPEC)
	screen = DefaultScreen(display);
    else {
	CHECK_INDEX(oscreen);
	screen = FIXNUM_VALUE(oscreen);
    }

    if (screen >= ScreenCount(display))
	LispDestroy("%s: screen index %d too large, %d screens available",
		    STRFUN(builtin), screen, ScreenCount(display));

    return (INTEGER(BlackPixel(display, screen)));
}

LispObj *
Lisp_XBlackPixelOfScreen(LispBuiltin *builtin)
/*
 x-black-pixel-of-screen screen
 */
d154 3
a156 3
    LispObj *screen;

    screen = ARGUMENT(0);
d158 2
a159 5
    if (!CHECKO(screen, x11Screen_t))
	LispDestroy("%s: cannot convert %s to Screen*",
		    STRFUN(builtin), STROBJ(screen));

    return (INTEGER(XBlackPixelOfScreen((Screen*)(screen->data.opaque.data))));
d163 1
a163 4
Lisp_XWhitePixel(LispBuiltin *builtin)
/*
 x-white-pixel display &optional screen
 */
d165 3
a167 12
    Display *display;
    int screen;

    LispObj *odisplay, *oscreen;

    oscreen = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);
d169 2
a170 12
    if (oscreen == UNSPEC)
	screen = DefaultScreen(display);
    else {
	CHECK_FIXNUM(oscreen);
	screen = FIXNUM_VALUE(oscreen);
    }

    if (screen >= ScreenCount(display))
	LispDestroy("%s: screen index %d too large, %d screens available",
		    STRFUN(builtin), screen, ScreenCount(display));

    return (INTEGER(WhitePixel(display, screen)));
d174 1
a174 4
Lisp_XWhitePixelOfScreen(LispBuiltin *builtin)
/*
 x-white-pixel-of-screen screen
 */
d176 3
a178 53
    LispObj *screen;

    screen = ARGUMENT(0);

    if (!CHECKO(screen, x11Screen_t))
	LispDestroy("%s: cannot convert %s to Screen*",
		    STRFUN(builtin), STROBJ(screen));

    return (INTEGER(WhitePixelOfScreen((Screen*)(screen->data.opaque.data))));
}

LispObj *
Lisp_XDefaultGC(LispBuiltin *builtin)
/*
 x-default-gc display &optional screen
 */
{
    Display *display;
    int screen;

    LispObj *odisplay, *oscreen;

    oscreen = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (oscreen == UNSPEC)
	screen = DefaultScreen(display);
    else {
	CHECK_FIXNUM(oscreen);
	screen = FIXNUM_VALUE(oscreen);
    }

    if (screen >= ScreenCount(display))
	LispDestroy("%s: screen index %d too large, %d screens available",
		    STRFUN(builtin), screen, ScreenCount(display));

    return (OPAQUE(DefaultGC(display, screen), x11GC_t));
}

LispObj *
Lisp_XDefaultGCOfScreen(LispBuiltin *builtin)
/*
 x-default-gc-of-screen screen
 */
{
    LispObj *screen;

    screen = ARGUMENT(0);
d180 1
a180 5
    if (!CHECKO(screen, x11Screen_t))
	LispDestroy("%s: cannot convert %s to Screen*",
		    STRFUN(builtin), STROBJ(screen));

    return (OPAQUE(DefaultGCOfScreen((Screen*)(screen->data.opaque.data)),
d185 1
a185 4
Lisp_XCreateSimpleWindow(LispBuiltin *builtin)
/*
 x-create-simple-window display parent x y width height &optional border-width border background
 */
d193 64
a256 56
    LispObj *odisplay, *oparent, *ox, *oy, *owidth, *oheight,
	    *oborder_width, *oborder, *obackground;

    obackground = ARGUMENT(8);
    oborder = ARGUMENT(7);
    oborder_width = ARGUMENT(6);
    oheight = ARGUMENT(5);
    owidth = ARGUMENT(4);
    oy = ARGUMENT(3);
    ox = ARGUMENT(2);
    oparent = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (!CHECKO(oparent, x11Window_t))
	LispDestroy("%s: cannot convert %s to Window",
		    STRFUN(builtin), STROBJ(oparent));
    parent = (Window)(oparent->data.opaque.data);

    CHECK_FIXNUM(ox);
    x = FIXNUM_VALUE(ox);

    CHECK_FIXNUM(oy);
    y = FIXNUM_VALUE(oy);

    CHECK_INDEX(owidth);
    width = FIXNUM_VALUE(owidth);

    CHECK_INDEX(oheight);
    height = FIXNUM_VALUE(oheight);

    /* check &OPTIONAL parameters */
    if (oborder_width == UNSPEC)
	border_width = 1;
    else {
	CHECK_INDEX(oborder_width);
	border_width = FIXNUM_VALUE(oborder_width);
    }

    if (oborder == UNSPEC)
	border = BlackPixel(display, DefaultScreen(display));
    else {
	CHECK_LONGINT(oborder);
	border = LONGINT_VALUE(oborder);
    }

    if (obackground == UNSPEC)
	background = WhitePixel(display, DefaultScreen(display));
    else {
	CHECK_LONGINT(obackground);
	background = LONGINT_VALUE(obackground);
    }
d265 1
a265 4
Lisp_XMapWindow(LispBuiltin *builtin)
/*
 x-map-window display window
 */
d270 10
a279 14
    LispObj *odisplay, *owindow;

    owindow = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (!CHECKO(owindow, x11Window_t))
	LispDestroy("%s: cannot convert %s to Window",
		    STRFUN(builtin), STROBJ(owindow));
    window = (Window)(owindow->data.opaque.data);
d283 1
a283 1
    return (owindow);
d287 1
a287 4
Lisp_XDestroyWindow(LispBuiltin *builtin)
/*
 x-destroy-window display window
 */
d292 10
a301 14
    LispObj *odisplay, *owindow;

    owindow = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (!CHECKO(owindow, x11Window_t))
	LispDestroy("%s: cannot convert %s to Window",
		    STRFUN(builtin), STROBJ(owindow));
    window = (Window)(owindow->data.opaque.data);
d309 1
a309 4
Lisp_XFlush(LispBuiltin *builtin)
/*
 x-flush display
 */
d313 4
a316 8
    LispObj *odisplay;

    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);
d320 1
a320 1
    return (odisplay);
d324 1
a324 4
Lisp_XDrawLine(LispBuiltin *builtin)
/*
 x-draw-line display drawable gc x1 y1 x2 y2
 */
d327 1
a327 1
    Drawable drawable;
d329 1
a329 1
    int x1, y1, x2, y2;
d331 38
a368 1
    LispObj *odisplay, *odrawable, *ogc, *ox1, *oy1, *ox2, *oy2;
d370 1
a370 7
    oy2 = ARGUMENT(6);
    ox2 = ARGUMENT(5);
    oy1 = ARGUMENT(4);
    ox1 = ARGUMENT(3);
    ogc = ARGUMENT(2);
    odrawable = ARGUMENT(1);
    odisplay = ARGUMENT(0);
d372 1
a372 129
    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    /* XXX correct check when drawing to pixmaps implemented */
    if (!CHECKO(odrawable, x11Window_t))
	LispDestroy("%s: cannot convert %s to Drawable",
		    STRFUN(builtin), STROBJ(odrawable));
    drawable = (Drawable)(odrawable->data.opaque.data);

    if (!CHECKO(ogc, x11GC_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(ogc));
    gc = (GC)(ogc->data.opaque.data);

    CHECK_FIXNUM(ox1);
    x1 = FIXNUM_VALUE(ox1);

    CHECK_FIXNUM(oy1);
    y1 = FIXNUM_VALUE(oy1);

    CHECK_FIXNUM(ox2);
    x2 = FIXNUM_VALUE(ox2);

    CHECK_FIXNUM(oy2);
    y2 = FIXNUM_VALUE(oy2);

    XDrawLine(display, drawable, gc, x1, y1, x2, y2);

    return (odrawable);
}

LispObj *
Lisp_XBell(LispBuiltin *builtin)
/*
 x-bell &optional percent
 */
{
    Display *display;
    int percent;

    LispObj *odisplay, *opercent;

    opercent = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (opercent == UNSPEC)
	percent = 0;
    else {
	CHECK_FIXNUM(opercent);
	percent = FIXNUM_VALUE(opercent);
    }

    if (percent < -100 || percent > 100)
	LispDestroy("%s: percent value %d out of range -100 to 100",
		    STRFUN(builtin), percent);

    XBell(display, percent);

    return (odisplay);
}

LispObj *
Lisp_XRaiseWindow(LispBuiltin *builtin)
/*
 x-raise-window display window
 */
{
    Display *display;
    Window window;

    LispObj *odisplay, *owindow;

    owindow = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (!CHECKO(owindow, x11Window_t))
	LispDestroy("%s: cannot convert %s to Window",
		    STRFUN(builtin), STROBJ(owindow));
    window = (Window)(owindow->data.opaque.data);

    XRaiseWindow(display, window);

    return (owindow);
}

LispObj *
Lisp_XWidthOfScreen(LispBuiltin *builtin)
/*
 x-width-of-screen screen
 */
{
    LispObj *screen;

    screen = ARGUMENT(0);

    if (!CHECKO(screen, x11Screen_t))
	LispDestroy("%s: cannot convert %s to Screen*",
		    STRFUN(builtin), STROBJ(screen));

    return (FIXNUM(WidthOfScreen((Screen*)(screen->data.opaque.data))));
}

LispObj *
Lisp_XHeightOfScreen(LispBuiltin *builtin)
/*
 x-height-of-screen screen
 */
{
    LispObj *screen;

    screen = ARGUMENT(0);

    if (!CHECKO(screen, x11Screen_t))
	LispDestroy("%s: cannot convert %s to Screen*",
		    STRFUN(builtin), STROBJ(screen));

    return (FIXNUM(HeightOfScreen((Screen*)(screen->data.opaque.data))));
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/modules/x11.c,v 1.10 2002/11/23 08:26:52 paulo Exp $ */
a34 1
#include "private.h"
d40 1
a40 1
int x11LoadModule(void);
d42 11
a52 19
LispObj *Lisp_XOpenDisplay(LispBuiltin *builtin);
LispObj *Lisp_XCloseDisplay(LispBuiltin *builtin);
LispObj *Lisp_XDefaultRootWindow(LispBuiltin *builtin);
LispObj *Lisp_XDefaultScreen(LispBuiltin *builtin);
LispObj *Lisp_XDefaultScreenOfDisplay(LispBuiltin *builtin);
LispObj *Lisp_XBlackPixel(LispBuiltin *builtin);
LispObj *Lisp_XBlackPixelOfScreen(LispBuiltin *builtin);
LispObj *Lisp_XWidthOfScreen(LispBuiltin *builtin);
LispObj *Lisp_XHeightOfScreen(LispBuiltin *builtin);
LispObj *Lisp_XWhitePixel(LispBuiltin *builtin);
LispObj *Lisp_XWhitePixelOfScreen(LispBuiltin *builtin);
LispObj *Lisp_XDefaultGC(LispBuiltin *builtin);
LispObj *Lisp_XDefaultGCOfScreen(LispBuiltin *builtin);
LispObj *Lisp_XCreateSimpleWindow(LispBuiltin *builtin);
LispObj *Lisp_XMapWindow(LispBuiltin *builtin);
LispObj *Lisp_XDestroyWindow(LispBuiltin *builtin);
LispObj *Lisp_XFlush(LispBuiltin *builtin);
LispObj *Lisp_XRaiseWindow(LispBuiltin *builtin);
LispObj *Lisp_XBell(LispBuiltin *builtin);
d54 1
a54 1
LispObj *Lisp_XDrawLine(LispBuiltin *builtin);
d60 12
a71 20
    {LispFunction, Lisp_XOpenDisplay, "x-open-display &optional display-name"},
    {LispFunction, Lisp_XCloseDisplay, "x-close-display display"},
    {LispFunction, Lisp_XDefaultRootWindow, "x-default-root-window display"},
    {LispFunction, Lisp_XDefaultScreen, "x-default-screen display"},
    {LispFunction, Lisp_XDefaultScreenOfDisplay, "x-default-screen-of-display display"},
    {LispFunction, Lisp_XBlackPixel, "x-black-pixel display &optional screen"},
    {LispFunction, Lisp_XBlackPixelOfScreen, "x-black-pixel-of-screen screen"},
    {LispFunction, Lisp_XWhitePixel, "x-white-pixel display &optional screen"},
    {LispFunction, Lisp_XWhitePixelOfScreen, "x-white-pixel-of-screen screen"},
    {LispFunction, Lisp_XDefaultGC, "x-default-gc display &optional screen"},
    {LispFunction, Lisp_XDefaultGCOfScreen, "x-default-gc-of-screen screen"},
    {LispFunction, Lisp_XCreateSimpleWindow, "x-create-simple-window display parent x y width height &optional border-width border background"},
    {LispFunction, Lisp_XMapWindow, "x-map-window display window"},
    {LispFunction, Lisp_XDestroyWindow, "X-DESTROY-WINDOW"},
    {LispFunction, Lisp_XFlush, "x-flush display"},
    {LispFunction, Lisp_XDrawLine, "x-draw-line display drawable gc x1 y1 x2 y2"},
    {LispFunction, Lisp_XBell, "x-bell display &optional percent"},
    {LispFunction, Lisp_XRaiseWindow, "x-raise-window display window"},
    {LispFunction, Lisp_XWidthOfScreen, "x-width-of-screen screen"},
    {LispFunction, Lisp_XHeightOfScreen, "x-height-of-screen screen"},
d85 1
a85 1
x11LoadModule(void)
d89 4
a92 4
    x11Display_t = LispRegisterOpaqueType("Display*");
    x11Screen_t = LispRegisterOpaqueType("Screen*");
    x11Window_t = LispRegisterOpaqueType("Window");
    x11GC_t = LispRegisterOpaqueType("GC");
d95 1
a95 1
	LispAddBuiltinFunction(&lispbuiltins[i]);
d101 1
a101 4
Lisp_XOpenDisplay(LispBuiltin *builtin)
/*
x-open-display &optional display-name
 */
d103 1
a103 1
    LispObj *display_name;
d106 1
a106 3
    display_name = ARGUMENT(0);

    if (display_name == UNSPEC)
d108 5
a112 4
    else {
	CHECK_STRING(display_name);
	dname = THESTR(display_name);
    }
d118 1
a118 4
Lisp_XCloseDisplay(LispBuiltin *builtin)
/*
 x-close-display display
 */
d120 3
a122 1
    LispObj *display;
d124 1
a124 7
    display = ARGUMENT(0);

    if (!CHECKO(display, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(display));

    XCloseDisplay((Display*)(display->data.opaque.data));
d130 1
a130 4
Lisp_XDefaultRootWindow(LispBuiltin *builtin)
/*
 x-default-root-window display
 */
d132 3
a134 3
    LispObj *display;

    display = ARGUMENT(0);
d136 1
a136 5
    if (!CHECKO(display, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(display));

    return (OPAQUE(DefaultRootWindow((Display*)(display->data.opaque.data)),
d141 1
a141 21
Lisp_XDefaultScreen(LispBuiltin *builtin)
/*
 x-default-screen display
 */
{
    LispObj *display;

    display = ARGUMENT(0);

    if (!CHECKO(display, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(display));

    return (INTEGER(DefaultScreen((Display*)(display->data.opaque.data))));
}

LispObj *
Lisp_XDefaultScreenOfDisplay(LispBuiltin *builtin)
/*
 x-default-screen-of-display display
 */
d143 3
a145 3
    LispObj *display;

    display = ARGUMENT(0);
d147 1
a147 5
    if (!CHECKO(display, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(display));

    return (OPAQUE(DefaultScreenOfDisplay((Display*)(display->data.opaque.data)),
d152 1
a152 4
Lisp_XBlackPixel(LispBuiltin *builtin)
/*
 x-black-pixel display &optional screen
 */
d154 3
a156 7
    Display *display;
    int screen;

    LispObj *odisplay, *oscreen;

    oscreen = ARGUMENT(1);
    odisplay = ARGUMENT(0);
d158 2
a159 17
    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (oscreen == UNSPEC)
	screen = DefaultScreen(display);
    else
	CHECK_INDEX(oscreen);
    else
	screen = FIXNUM_VALUE(oscreen);

    if (screen >= ScreenCount(display))
	LispDestroy("%s: screen index %d too large, %d screens available",
		    STRFUN(builtin), screen, ScreenCount(display));

    return (INTEGER(BlackPixel(display, screen)));
d163 1
a163 4
Lisp_XBlackPixelOfScreen(LispBuiltin *builtin)
/*
 x-black-pixel-of-screen screen
 */
d165 3
a167 1
    LispObj *screen;
d169 2
a170 7
    screen = ARGUMENT(0);

    if (!CHECKO(screen, x11Screen_t))
	LispDestroy("%s: cannot convert %s to Screen*",
		    STRFUN(builtin), STROBJ(screen));

    return (INTEGER(XBlackPixelOfScreen((Screen*)(screen->data.opaque.data))));
d174 1
a174 4
Lisp_XWhitePixel(LispBuiltin *builtin)
/*
 x-white-pixel display &optional screen
 */
d176 3
a178 2
    Display *display;
    int screen;
d180 1
a180 89
    LispObj *odisplay, *oscreen;

    oscreen = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (oscreen == UNSPEC)
	screen = DefaultScreen(display);
    else
	CHECK_FIXNUM(oscreen);
    else
	screen = FIXNUM_VALUE(oscreen);

    if (screen >= ScreenCount(display))
	LispDestroy("%s: screen index %d too large, %d screens available",
		    STRFUN(builtin), screen, ScreenCount(display));

    return (INTEGER(WhitePixel(display, screen)));
}

LispObj *
Lisp_XWhitePixelOfScreen(LispBuiltin *builtin)
/*
 x-white-pixel-of-screen screen
 */
{
    LispObj *screen;

    screen = ARGUMENT(0);

    if (!CHECKO(screen, x11Screen_t))
	LispDestroy("%s: cannot convert %s to Screen*",
		    STRFUN(builtin), STROBJ(screen));

    return (INTEGER(WhitePixelOfScreen((Screen*)(screen->data.opaque.data))));
}

LispObj *
Lisp_XDefaultGC(LispBuiltin *builtin)
/*
 x-default-gc display &optional screen
 */
{
    Display *display;
    int screen;

    LispObj *odisplay, *oscreen;

    oscreen = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (oscreen == UNSPEC)
	screen = DefaultScreen(display);
    else
	CHECK_FIXNUM(oscreen);
    else
	screen = FIXNUM_VALUE(oscreen);

    if (screen >= ScreenCount(display))
	LispDestroy("%s: screen index %d too large, %d screens available",
		    STRFUN(builtin), screen, ScreenCount(display));

    return (OPAQUE(DefaultGC(display, screen), x11GC_t));
}

LispObj *
Lisp_XDefaultGCOfScreen(LispBuiltin *builtin)
/*
 x-default-gc-of-screen screen
 */
{
    LispObj *screen;

    screen = ARGUMENT(0);

    if (!CHECKO(screen, x11Screen_t))
	LispDestroy("%s: cannot convert %s to Screen*",
		    STRFUN(builtin), STROBJ(screen));

    return (OPAQUE(DefaultGCOfScreen((Screen*)(screen->data.opaque.data)),
d185 1
a185 4
Lisp_XCreateSimpleWindow(LispBuiltin *builtin)
/*
 x-create-simple-window display parent x y width height &optional border-width border background
 */
d193 64
a256 56
    LispObj *odisplay, *oparent, *ox, *oy, *owidth, *oheight,
	    *oborder_width, *oborder, *obackground;

    obackground = ARGUMENT(8);
    oborder = ARGUMENT(7);
    oborder_width = ARGUMENT(6);
    oheight = ARGUMENT(5);
    owidth = ARGUMENT(4);
    oy = ARGUMENT(3);
    ox = ARGUMENT(2);
    oparent = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (!CHECKO(oparent, x11Window_t))
	LispDestroy("%s: cannot convert %s to Window",
		    STRFUN(builtin), STROBJ(oparent));
    parent = (Window)(oparent->data.opaque.data);

    CHECK_FIXNUM(ox);
    x = FIXNUM_VALUE(ox);

    CHECK_FIXNUM(oy);
    y = FIXNUM_VALUE(oy);

    CHECK_INDEX(owidth);
    width = FIXNUM_VALUE(owidth);

    CHECK_INDEX(oheight);
    height = FIXNUM_VALUE(oheight);

    /* check &OPTIONAL parameters */
    if (oborder_width == UNSPEC)
	border_width = 1;
    else
	CHECK_INDEX(oborder_width);
    else
	border_width = FIXNUM_VALUE(oborder_width);

    if (oborder == UNSPEC)
	border = BlackPixel(display, DefaultScreen(display));
    else
	CHECK_LONGINT(oborder);
    else
	border = LONGINT_VALUE(oborder);

    if (obackground == UNSPEC)
	background = WhitePixel(display, DefaultScreen(display));
    else
	CHECK_LONGINT(obackground);
    else
	background = LONGINT_VALUE(obackground);
d265 1
a265 4
Lisp_XMapWindow(LispBuiltin *builtin)
/*
 x-map-window display window
 */
d270 10
a279 14
    LispObj *odisplay, *owindow;

    owindow = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (!CHECKO(owindow, x11Window_t))
	LispDestroy("%s: cannot convert %s to Window",
		    STRFUN(builtin), STROBJ(owindow));
    window = (Window)(owindow->data.opaque.data);
d283 1
a283 1
    return (owindow);
d287 1
a287 4
Lisp_XDestroyWindow(LispBuiltin *builtin)
/*
 x-destroy-window display window
 */
d292 10
a301 14
    LispObj *odisplay, *owindow;

    owindow = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (!CHECKO(owindow, x11Window_t))
	LispDestroy("%s: cannot convert %s to Window",
		    STRFUN(builtin), STROBJ(owindow));
    window = (Window)(owindow->data.opaque.data);
d309 1
a309 4
Lisp_XFlush(LispBuiltin *builtin)
/*
 x-flush display
 */
d313 4
a316 8
    LispObj *odisplay;

    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);
d320 1
a320 1
    return (odisplay);
d324 1
a324 4
Lisp_XDrawLine(LispBuiltin *builtin)
/*
 x-draw-line display drawable gc x1 y1 x2 y2
 */
d327 1
a327 1
    Drawable drawable;
d329 1
a329 1
    int x1, y1, x2, y2;
d331 38
a368 1
    LispObj *odisplay, *odrawable, *ogc, *ox1, *oy1, *ox2, *oy2;
d370 1
a370 7
    oy2 = ARGUMENT(6);
    ox2 = ARGUMENT(5);
    oy1 = ARGUMENT(4);
    ox1 = ARGUMENT(3);
    ogc = ARGUMENT(2);
    odrawable = ARGUMENT(1);
    odisplay = ARGUMENT(0);
d372 1
a372 129
    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    /* XXX correct check when drawing to pixmaps implemented */
    if (!CHECKO(odrawable, x11Window_t))
	LispDestroy("%s: cannot convert %s to Drawable",
		    STRFUN(builtin), STROBJ(odrawable));
    drawable = (Drawable)(odrawable->data.opaque.data);

    if (!CHECKO(ogc, x11GC_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(ogc));
    gc = (GC)(ogc->data.opaque.data);

    CHECK_FIXNUM(ox1);
    x1 = FIXNUM_VALUE(ox1);

    CHECK_FIXNUM(oy1);
    y1 = FIXNUM_VALUE(oy1);

    CHECK_FIXNUM(ox2);
    x2 = FIXNUM_VALUE(ox2);

    CHECK_FIXNUM(oy2);
    y2 = FIXNUM_VALUE(oy2);

    XDrawLine(display, drawable, gc, x1, y1, x2, y2);

    return (odrawable);
}

LispObj *
Lisp_XBell(LispBuiltin *builtin)
/*
 x-bell &optional percent
 */
{
    Display *display;
    int percent;

    LispObj *odisplay, *opercent;

    opercent = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (opercent == UNSPEC)
	percent = 0;
    else
	CHECK_FIXNUM(opercent);
    else
	percent = FIXNUM_VALUE(opercent);

    if (percent < -100 || percent > 100)
	LispDestroy("%s: percent value %d out of range -100 to 100",
		    STRFUN(builtin), percent);

    XBell(display, percent);

    return (odisplay);
}

LispObj *
Lisp_XRaiseWindow(LispBuiltin *builtin)
/*
 x-raise-window display window
 */
{
    Display *display;
    Window window;

    LispObj *odisplay, *owindow;

    owindow = ARGUMENT(1);
    odisplay = ARGUMENT(0);

    if (!CHECKO(odisplay, x11Display_t))
	LispDestroy("%s: cannot convert %s to Display*",
		    STRFUN(builtin), STROBJ(odisplay));
    display = (Display*)(odisplay->data.opaque.data);

    if (!CHECKO(owindow, x11Window_t))
	LispDestroy("%s: cannot convert %s to Window",
		    STRFUN(builtin), STROBJ(owindow));
    window = (Window)(owindow->data.opaque.data);

    XRaiseWindow(display, window);

    return (owindow);
}

LispObj *
Lisp_XWidthOfScreen(LispBuiltin *builtin)
/*
 x-width-of-screen screen
 */
{
    LispObj *screen;

    screen = ARGUMENT(0);

    if (!CHECKO(screen, x11Screen_t))
	LispDestroy("%s: cannot convert %s to Screen*",
		    STRFUN(builtin), STROBJ(screen));

    return (FIXNUM(WidthOfScreen((Screen*)(screen->data.opaque.data))));
}

LispObj *
Lisp_XHeightOfScreen(LispBuiltin *builtin)
/*
 x-height-of-screen screen
 */
{
    LispObj *screen;

    screen = ARGUMENT(0);

    if (!CHECKO(screen, x11Screen_t))
	LispDestroy("%s: cannot convert %s to Screen*",
		    STRFUN(builtin), STROBJ(screen));

    return (FIXNUM(HeightOfScreen((Screen*)(screen->data.opaque.data))));
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/modules/x11.c,v 1.12 2003/04/27 18:17:37 tsi Exp $ */
d34 2
a35 2
#include "lisp/internal.h"
#include "lisp/private.h"
d231 1
a231 1
    else {
d233 1
a234 1
    }
d281 1
a281 1
    else {
d283 1
a284 1
    }
d331 1
a331 1
    else {
d333 1
a334 1
    }
d411 1
a411 1
    else {
d413 1
a414 1
    }
d418 1
a418 1
    else {
d420 1
a421 1
    }
d425 1
a425 1
    else {
d427 1
a428 1
    }
d591 1
a591 1
    else {
d593 1
a594 1
    }
@


