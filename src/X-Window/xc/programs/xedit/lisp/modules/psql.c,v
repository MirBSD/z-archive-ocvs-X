head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.39.52;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.18.39.34;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.28.34;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 2001 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *  
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE XFREE86 PROJECT BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the XFree86 Project shall
 * not be used in advertising or otherwise to promote the sale, use or other
 * dealings in this Software without prior written authorization from the
 * XFree86 Project.
 *
 * Author: Paulo César Pereira de Andrade
 */

/* $XFree86: xc/programs/xedit/lisp/modules/psql.c,v 1.3 2001/10/15 15:36:51 paulo Exp $ */

#include <stdlib.h>
#include <libpq-fe.h>
#undef USE_SSL		/* cannot get it to compile... */
#include <postgres.h>
#include <utils/geo_decls.h>
#include "internal.h"

/*
 * Prototypes
 */
int psqlLoadModule(LispMac *mac);

LispObj *Lisp_PQbackendPID(LispMac*, LispObj*, char*);
LispObj *Lisp_PQclear(LispMac*, LispObj*, char*);
LispObj *Lisp_PQconsumeInput(LispMac*, LispObj*, char*);
LispObj *Lisp_PQdb(LispMac*, LispObj*, char*);
LispObj *Lisp_PQerrorMessage(LispMac*, LispObj*, char*);
LispObj *Lisp_PQexec(LispMac*, LispObj*, char*);
LispObj *Lisp_PQfinish(LispMac*, LispObj*, char*);
LispObj *Lisp_PQfname(LispMac*, LispObj*, char*);
LispObj *Lisp_PQfnumber(LispMac*, LispObj*, char*);
LispObj *Lisp_PQfsize(LispMac*, LispObj*, char*);
LispObj *Lisp_PQftype(LispMac*, LispObj*, char*);
LispObj *Lisp_PQgetlength(LispMac*, LispObj*, char*);
LispObj *Lisp_PQgetvalue(LispMac*, LispObj*, char*);
LispObj *Lisp_PQhost(LispMac*, LispObj*, char*);
LispObj *Lisp_PQnfields(LispMac*, LispObj*, char*);
LispObj *Lisp_PQnotifies(LispMac*, LispObj*, char*);
LispObj *Lisp_PQntuples(LispMac*, LispObj*, char*);
LispObj *Lisp_PQoptions(LispMac*, LispObj*, char*);
LispObj *Lisp_PQpass(LispMac*, LispObj*, char*);
LispObj *Lisp_PQport(LispMac*, LispObj*, char*);
LispObj *Lisp_PQresultStatus(LispMac*, LispObj*, char*);
LispObj *Lisp_PQsetdb(LispMac*, LispObj*, char*);
LispObj *Lisp_PQsocket(LispMac*, LispObj*, char*);
LispObj *Lisp_PQstatus(LispMac*, LispObj*, char*);
LispObj *Lisp_PQtty(LispMac*, LispObj*, char*);
LispObj *Lisp_PQuser(LispMac*, LispObj*, char*);

/*
 * Initialization
 */
static LispBuiltin lispbuiltins[] = {
    {"PQ-BACKEND-PID",		Lisp_PQbackendPID,	1, 1, 1,},
    {"PQ-CLEAR",		Lisp_PQclear,		1, 1, 1,},
    {"PQ-CONSUME-INPUT",	Lisp_PQconsumeInput,	1, 1, 1,},
    {"PQ-DB",			Lisp_PQdb,		1, 1, 1,},
    {"PQ-ERROR-MESSAGE",	Lisp_PQerrorMessage,	1, 1, 1,},
    {"PQ-EXEC",			Lisp_PQexec,		1, 2, 2,},
    {"PQ-FINISH",		Lisp_PQfinish,		1, 1, 1,},
    {"PQ-FNAME",		Lisp_PQfname,		1, 2, 2,},
    {"PQ-FNUMBER",		Lisp_PQfnumber,		1, 2, 2,},
    {"PQ-FSIZE",		Lisp_PQfsize,		1, 2, 2,},
    {"PQ-FTYPE",		Lisp_PQftype,		1, 2, 2,},
    {"PQ-GETLENGTH",		Lisp_PQgetlength,	1, 3, 3,},
    {"PQ-GETVALUE",		Lisp_PQgetvalue,	1, 3, 4,},
    {"PQ-HOST",			Lisp_PQhost,		1, 1, 1,},
    {"PQ-NFIELDS",		Lisp_PQnfields,		1, 1, 1,},
    {"PQ-NOTIFIES",		Lisp_PQnotifies,	1, 1, 1,},
    {"PQ-NTUPLES",		Lisp_PQntuples,		1, 1, 1,},
    {"PQ-OPTIONS",		Lisp_PQoptions,		1, 1, 1,},
    {"PQ-PASS",			Lisp_PQpass,		1, 1, 1,},
    {"PQ-PORT",			Lisp_PQport,		1, 1, 1,},
    {"PQ-RESULT-STATUS",	Lisp_PQresultStatus,	1, 1, 1,},
    {"PQ-SETDB",		Lisp_PQsetdb,		1, 5, 5,},
    {"PQ-SETDB-LOGIN",		Lisp_PQsetdb,		1, 7, 7,},
    {"PQ-SOCKET",		Lisp_PQsocket,		1, 1, 1,},
    {"PQ-STATUS",		Lisp_PQstatus,		1, 1, 1,},
    {"PQ-TTY",			Lisp_PQtty,		1, 1, 1,},
    {"PQ-USER",			Lisp_PQuser,		1, 1, 1,},
};

LispModuleData psqlLispModuleData = {
    LISP_MODULE_VERSION,
    psqlLoadModule
};

static int PGconn_t, PGresult_t;

/*
 * Implementation
 */
int
psqlLoadModule(LispMac *mac)
{
    int i;
    char *fname = "INTERNAL:PSQL-LOAD-MODULE";

    PGconn_t = LispRegisterOpaqueType(mac, "PGconn*");
    PGresult_t = LispRegisterOpaqueType(mac, "PGresult*");
    GCProtect();

    /* NOTE: Implemented just enough to make programming examples
     * (and my needs) work.
     * Completing this is an exercise to the reader, or may be implemented
     * when/if required.
     */
    LispExecute(mac,
		"(DEFSTRUCT PG-NOTIFY RELNAME BE-PID)\n"
		"(DEFSTRUCT PG-POINT X Y)\n"
		"(DEFSTRUCT PG-BOX HIGH LOW)\n"
		"(DEFSTRUCT PG-POLYGON SIZE NUM-POINTS BOUNDBOX POINTS)\n");

    /* enum ConnStatusType */
    (void)LispSetVariable(mac, ATOM2("PG-CONNECTION-OK"),
			  REAL(CONNECTION_OK), fname, 0);
    (void)LispSetVariable(mac, ATOM2("PG-CONNECTION-BAD"),
			  REAL(CONNECTION_BAD), fname, 0);
    (void)LispSetVariable(mac, ATOM2("PG-CONNECTION-STARTED"),
			  REAL(CONNECTION_STARTED), fname, 0);
    (void)LispSetVariable(mac, ATOM2("PG-CONNECTION-MADE"),
			  REAL(CONNECTION_MADE), fname, 0);
    (void)LispSetVariable(mac, ATOM2("PG-CONNECTION-AWAITING-RESPONSE"),
			  REAL(CONNECTION_AWAITING_RESPONSE), fname, 0);
    (void)LispSetVariable(mac, ATOM2("PG-CONNECTION-AUTH-OK"),
			  REAL(CONNECTION_AUTH_OK), fname, 0);
    (void)LispSetVariable(mac, ATOM2("PG-CONNECTION-SETENV"),
			  REAL(CONNECTION_SETENV), fname, 0);


    /* enum ExecStatusType */
    (void)LispSetVariable(mac, ATOM2("PGRES-EMPTY-QUERY"),
			  REAL(PGRES_EMPTY_QUERY), fname, 0);
    (void)LispSetVariable(mac, ATOM2("PGRES-COMMAND-OK"),
			  REAL(PGRES_COMMAND_OK), fname, 0);
    (void)LispSetVariable(mac, ATOM2("PGRES-TUPLES-OK"),
			  REAL(PGRES_TUPLES_OK), fname, 0);
    (void)LispSetVariable(mac, ATOM2("PGRES-COPY-OUT"),
			  REAL(PGRES_COPY_OUT), fname, 0);
    (void)LispSetVariable(mac, ATOM2("PGRES-COPY-IN"),
			  REAL(PGRES_COPY_IN), fname, 0);
    (void)LispSetVariable(mac, ATOM2("PGRES-BAD-RESPONSE"),
			  REAL(PGRES_BAD_RESPONSE), fname, 0);
    (void)LispSetVariable(mac, ATOM2("PGRES-NONFATAL-ERROR"),
			  REAL(PGRES_NONFATAL_ERROR), fname, 0);
    (void)LispSetVariable(mac, ATOM2("PGRES-FATAL-ERROR"),
			  REAL(PGRES_FATAL_ERROR), fname, 0);
    GCUProtect();

    for (i = 0; i < sizeof(lispbuiltins) / sizeof(lispbuiltins[0]); i++)
	LispAddBuiltinFunction(mac, &lispbuiltins[i]);

    return (1);
}

LispObj *
Lisp_PQbackendPID(LispMac *mac, LispObj *list, char *fname)
{
    int pid;
    PGconn *conn;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    pid = PQbackendPID(conn);

    return (REAL(pid));
}

LispObj *
Lisp_PQclear(LispMac *mac, LispObj *list, char *fname)
{
    PGresult *res;

    if (!CHECKO(CAR(list), PGresult_t))
	LispDestroy(mac, "cannot convert %s to PGresult*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    res = (PGresult*)(CAR(list)->data.opaque.data);
    PQclear(res);

    return (NIL);
}

LispObj *
Lisp_PQconsumeInput(LispMac *mac, LispObj *list, char *fname)
{
    int result;
    PGconn *conn;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    result = PQconsumeInput(conn);

    return (REAL(result));
}

LispObj *
Lisp_PQdb(LispMac *mac, LispObj *list, char *fname)
{
    char *str;
    PGconn *conn;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    str = PQdb(conn);

    return (str ? STRING(str) : NIL);
}

LispObj *
Lisp_PQerrorMessage(LispMac *mac, LispObj *list, char *fname)
{
    char *str;
    PGconn *conn;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    str = PQerrorMessage(conn);

    return (str ? STRING(str) : NIL);
}

LispObj *
Lisp_PQexec(LispMac *mac, LispObj *list, char *fname)
{
    PGconn *conn;
    PGresult *res;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    list = CDR(list);
    if (CAR(list)->type != LispString_t)
	LispDestroy(mac, "expecting string, at %s", fname);

    res = PQexec(conn, STRPTR(CAR(list)));

    return (res ? OPAQUE(res, PGresult_t) : NIL);
}

LispObj *
Lisp_PQfinish(LispMac *mac, LispObj *list, char *fname)
{
    PGconn *conn;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    PQfinish(conn);

    return (NIL);
}

LispObj *
Lisp_PQfname(LispMac *mac, LispObj *list, char *fname)
{
    char *str;
    int field;
    PGresult *res;

    if (!CHECKO(CAR(list), PGresult_t))
	LispDestroy(mac, "cannot convert %s to PGresult*, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    res = (PGresult*)(CAR(list)->data.opaque.data);
    list = CDR(list);
    if (CAR(list)->type != LispReal_t || CAR(list)->data.real < 0 ||
	(int)CAR(list)->data.real != CAR(list)->data.real)
	LispDestroy(mac, "expecting positive integer, at %s", fname);
    field = (int)CAR(list)->data.real;

    str = PQfname(res, field);

    return (str ? STRING(str) : NIL);
}

LispObj *
Lisp_PQfnumber(LispMac *mac, LispObj *list, char *fname)
{
    int num;
    PGresult *res;

    if (!CHECKO(CAR(list), PGresult_t))
	LispDestroy(mac, "cannot convert %s to PGresult*, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    res = (PGresult*)(CAR(list)->data.opaque.data);
    list = CDR(list);
    if (CAR(list)->type != LispString_t)
	LispDestroy(mac, "expecting string, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    num = PQfnumber(res, STRPTR(CAR(list)));

    return (REAL(num));
}

LispObj *
Lisp_PQfsize(LispMac *mac, LispObj *list, char *fname)
{
    int size, field;
    PGresult *res;

    if (!CHECKO(CAR(list), PGresult_t))
	LispDestroy(mac, "cannot convert %s to PGresult*, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    res = (PGresult*)(CAR(list)->data.opaque.data);
    list = CDR(list);
    if (CAR(list)->type != LispReal_t || CAR(list)->data.real < 0 ||
	(int)CAR(list)->data.real != CAR(list)->data.real)
	LispDestroy(mac, "expecting positive integer, at %s", fname);
    field = (int)CAR(list)->data.real;

    size = PQfsize(res, field);

    return (REAL(size));
}

LispObj *
Lisp_PQftype(LispMac *mac, LispObj *list, char *fname)
{
    Oid oid;
    int field;
    PGresult *res;

    if (!CHECKO(CAR(list), PGresult_t))
	LispDestroy(mac, "cannot convert %s to PGresult*, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    res = (PGresult*)(CAR(list)->data.opaque.data);
    list = CDR(list);
    if (CAR(list)->type != LispReal_t || CAR(list)->data.real < 0 ||
	(int)CAR(list)->data.real != CAR(list)->data.real)
	LispDestroy(mac, "expecting positive integer, at %s", fname);
    field = (int)CAR(list)->data.real;

    oid = PQftype(res, field);

    return (REAL(oid));
}

LispObj *
Lisp_PQgetlength(LispMac *mac, LispObj *list, char *fname)
{
    PGresult *res;
    int tuple, field, len;

    if (!CHECKO(CAR(list), PGresult_t))
	LispDestroy(mac, "cannot convert %s to PGresult*, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    res = (PGresult*)(CAR(list)->data.opaque.data);
    list = CDR(list);
    if (CAR(list)->type != LispReal_t || CAR(list)->data.real < 0 ||
	(int)CAR(list)->data.real != CAR(list)->data.real)
	LispDestroy(mac, "expecting positive integer, at %s", fname);
    tuple = (int)CAR(list)->data.real;
    list = CDR(list);
    if (CAR(list)->type != LispReal_t || CAR(list)->data.real < 0 ||
	(int)CAR(list)->data.real != CAR(list)->data.real)
	LispDestroy(mac, "expecting positive integer, at %s", fname);
    field = (int)CAR(list)->data.real;

    len = PQgetlength(res, tuple, field);

    return (REAL(len));
}

/* (pq-getvalue connection tuple field &optional type-specifier) */
LispObj *
Lisp_PQgetvalue(LispMac *mac, LispObj *list, char *fname)
{
    char *str;
    double real = 0.0;
    PGresult *res;
    int tuple, field, isreal = 0;

    if (!CHECKO(CAR(list), PGresult_t))
	LispDestroy(mac, "cannot convert %s to PGresult*, at %s",
		    LispStrObj(mac, CAR(list)), fname);
    res = (PGresult*)(CAR(list)->data.opaque.data);
    list = CDR(list);
    if (CAR(list)->type != LispReal_t || CAR(list)->data.real < 0 ||
	(int)CAR(list)->data.real != CAR(list)->data.real)
	LispDestroy(mac, "expecting positive integer, at %s", fname);
    tuple = (int)CAR(list)->data.real;
    list = CDR(list);
    if (CAR(list)->type != LispReal_t || CAR(list)->data.real < 0 ||
	(int)CAR(list)->data.real != CAR(list)->data.real)
	LispDestroy(mac, "expecting positive integer, at %s", fname);
    field = (int)CAR(list)->data.real;

    str = PQgetvalue(res, tuple, field);

    list = CDR(list);
    if (list != NIL) {
	if (CAR(list)->type != LispAtom_t)
	    LispDestroy(mac, "expecting atom, at %s");
	if (strcmp(STRPTR(CAR(list)), "INT16") == 0) {
	    real = *(short*)str;
	    isreal = 1;
	    goto simple_type;
	}
	else if (strcmp(STRPTR(CAR(list)), "INT32") == 0) {
	    real = *(int*)str;
	    isreal = 1;
	    goto simple_type;
	}
	else if (strcmp(STRPTR(CAR(list)), "FLOAT") == 0) {
	    real = *(float*)str;
	    isreal = 1;
	    goto simple_type;
	}
	else if (strcmp(STRPTR(CAR(list)), "REAL") == 0) {
	    real = *(double*)str;
	    isreal = 1;
	    goto simple_type;
	}
	else if (strcmp(STRPTR(CAR(list)), "PG-POLYGON") == 0)
	    goto polygon_type;
	else if (strcmp(STRPTR(CAR(list)), "STRING") != 0)
	    LispDestroy(mac, "unknown type specifier %s, at %s",
			STRPTR(CAR(list)), fname);
    }

simple_type:
    return (isreal ? REAL(real) : (str ? STRING(str) : NIL));

polygon_type:
  {
    LispObj *poly, *box, *p = NIL, *cdr, *obj;
    POLYGON *polygon;
    int i, size;

    size = PQgetlength(res, tuple, field);
    polygon = (POLYGON*)(str - sizeof(int));

    GCProtect();
    /* get polygon->boundbox */
    cdr = EVAL(CONS(ATOM("MAKE-PG-POINT"),
		    CONS(ATOM(":X"),
			 CONS(REAL(polygon->boundbox.high.x),
			      CONS(ATOM(":Y"),
				   CONS(REAL(polygon->boundbox.high.y), NIL))))));
    obj = EVAL(CONS(ATOM("MAKE-PG-POINT"),
		    CONS(ATOM(":X"),
			 CONS(REAL(polygon->boundbox.low.x),
			      CONS(ATOM(":Y"),
				   CONS(REAL(polygon->boundbox.low.y), NIL))))));
    box = EVAL(CONS(ATOM("MAKE-PG-BOX"),
		    CONS(ATOM(":HIGH"),
			 CONS(cdr,
			      CONS(ATOM(":LOW"),
				   CONS(obj, NIL))))));
    /* get polygon->p values */
    for (i = 0; i < polygon->npts; i++) {
	obj = EVAL(CONS(ATOM("MAKE-PG-POINT"),
			CONS(ATOM(":X"),
			     CONS(REAL(polygon->p[i].x),
			      CONS(ATOM(":Y"),
				   CONS(REAL(polygon->p[i].y), NIL))))));
	if (i == 0)
	    p = cdr = CONS(obj, NIL);
	else {
	    CDR(cdr) = CONS(obj, NIL);
	    cdr = CDR(cdr);
	}
    }

    /* make result */
    poly = EVAL(CONS(ATOM("MAKE-PG-POLYGON"),
		     CONS(ATOM(":SIZE"),
			  CONS(REAL(size),
			       CONS(ATOM(":NUM-POINTS"),
				    CONS(REAL(polygon->npts),
					 CONS(ATOM(":BOUNDBOX"),
					      CONS(box,
						   CONS(ATOM(":POINTS"),
							CONS(QUOTE(p), NIL))))))))));
    GCUProtect();

    return (poly);
  }
}

LispObj *
Lisp_PQhost(LispMac *mac, LispObj *list, char *fname)
{
    char *str;
    PGconn *conn;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    str = PQhost(conn);

    return (str ? STRING(str) : NIL);
}

LispObj *
Lisp_PQnfields(LispMac *mac, LispObj *list, char *fname)
{
    int nfields;
    PGresult *res;

    if (!CHECKO(CAR(list), PGresult_t))
	LispDestroy(mac, "cannot convert %s to PGresult*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    res = (PGresult*)(CAR(list)->data.opaque.data);
    nfields = PQnfields(res);

    return (REAL(nfields));
}

LispObj *
Lisp_PQnotifies(LispMac *mac, LispObj *list, char *fname)
{
    LispObj *res, *code, *frm = FRM;
    PGconn *conn;
    PGnotify *notifies;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    if ((notifies = PQnotifies(conn)) == NULL)
	return (NIL);

    GCProtect();
    code = CONS(ATOM("MAKE-PG-NOTIFY"),
		  CONS(ATOM(":RELNAME"),
		       CONS(STRING(notifies->relname),
			    CONS(ATOM(":BE-PID"),
				 CONS(REAL(notifies->be_pid), NIL)))));
    FRM = CONS(code, FRM);
    GCUProtect();
    res = EVAL(code);
    FRM = frm;

    free(notifies);

    return (res);
}

LispObj *
Lisp_PQntuples(LispMac *mac, LispObj *list, char *fname)
{
    int ntuples;
    PGresult *res;

    if (!CHECKO(CAR(list), PGresult_t))
	LispDestroy(mac, "cannot convert %s to PGresult*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    res = (PGresult*)(CAR(list)->data.opaque.data);
    ntuples = PQntuples(res);

    return (REAL(ntuples));
}

LispObj *
Lisp_PQoptions(LispMac *mac, LispObj *list, char *fname)
{
    char *str;
    PGconn *conn;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    str = PQoptions(conn);

    return (str ? STRING(str) : NIL);
}

LispObj *
Lisp_PQpass(LispMac *mac, LispObj *list, char *fname)
{
    char *str;
    PGconn *conn;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    str = PQpass(conn);

    return (str ? STRING(str) : NIL);
}

LispObj *
Lisp_PQport(LispMac *mac, LispObj *list, char *fname)
{
    char *str;
    PGconn *conn;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    str = PQport(conn);

    return (str ? STRING(str) : NIL);
}

LispObj *
Lisp_PQsetdb(LispMac *mac, LispObj *list, char *fname)
{
    PGconn *conn;
    LispObj *obj;
    char *host, *port, *options, *tty, *dbname, *login, *pass;

    for (obj = list; obj != NIL; obj = CDR(obj))
	if (CAR(obj) != NIL && CAR(obj)->type != LispString_t)
	    LispDestroy(mac, "expecting string, at %s", fname);

    host = CAR(list) == NIL ? NULL : STRPTR(CAR(list));
    list = CDR(list);
    port = CAR(list) == NIL ? NULL : STRPTR(CAR(list));
    list = CDR(list);
    options = CAR(list) == NIL ? NULL : STRPTR(CAR(list));
    list = CDR(list);
    tty = CAR(list) == NIL ? NULL : STRPTR(CAR(list));
    list = CDR(list);
    dbname = CAR(list) == NIL ? NULL : STRPTR(CAR(list));
    list = CDR(list);
    if (list != NIL) {
	login = CAR(list) == NIL ? NULL : STRPTR(CAR(list));
	list = CDR(list);
	pass = CAR(list) == NIL ? NULL : STRPTR(CAR(list));
    }
    else
	login = pass = NULL;

    conn = PQsetdbLogin(host, port, options, tty, dbname, login, pass);

    return (conn ? OPAQUE(conn, PGconn_t) : NIL);
}

LispObj *
Lisp_PQresultStatus(LispMac *mac, LispObj *list, char *fname)
{
    int status;
    PGresult *res;

    if (!CHECKO(CAR(list), PGresult_t))
	LispDestroy(mac, "cannot convert %s to PGresult*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    res = (PGresult*)(CAR(list)->data.opaque.data);
    status = PQresultStatus(res);

    return (REAL(status));
}

LispObj *
Lisp_PQsocket(LispMac *mac, LispObj *list, char *fname)
{
    int sock;
    PGconn *conn;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    sock = PQsocket(conn);

    return (REAL(sock));
}

LispObj *
Lisp_PQstatus(LispMac *mac, LispObj *list, char *fname)
{
    int status;
    PGconn *conn;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    status = PQstatus(conn);

    return (REAL(status));
}

LispObj *
Lisp_PQtty(LispMac *mac, LispObj *list, char *fname)
{
    char *str;
    PGconn *conn;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    str = PQtty(conn);

    return (str ? STRING(str) : NIL);
}

LispObj *
Lisp_PQuser(LispMac *mac, LispObj *list, char *fname)
{
    char *str;
    PGconn *conn;

    if (!CHECKO(CAR(list), PGconn_t))
	LispDestroy(mac, "cannot convert %s to PGconn*, at %s",
		    LispStrObj(mac, CAR(list)), fname);

    conn = (PGconn*)(CAR(list)->data.opaque.data);
    str = PQuser(conn);

    return (str ? STRING(str) : NIL);
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/modules/psql.c,v 1.13 2003/04/27 18:17:37 tsi Exp $ */
d37 1
a37 2
#include "lisp/internal.h"
#include "lisp/private.h"
d42 1
a42 1
int psqlLoadModule(void);
d44 26
a69 27
LispObj *Lisp_PQbackendPID(LispBuiltin*);
LispObj *Lisp_PQclear(LispBuiltin*);
LispObj *Lisp_PQconsumeInput(LispBuiltin*);
LispObj *Lisp_PQdb(LispBuiltin*);
LispObj *Lisp_PQerrorMessage(LispBuiltin*);
LispObj *Lisp_PQexec(LispBuiltin*);
LispObj *Lisp_PQfinish(LispBuiltin*);
LispObj *Lisp_PQfname(LispBuiltin*);
LispObj *Lisp_PQfnumber(LispBuiltin*);
LispObj *Lisp_PQfsize(LispBuiltin*);
LispObj *Lisp_PQftype(LispBuiltin*);
LispObj *Lisp_PQgetlength(LispBuiltin*);
LispObj *Lisp_PQgetvalue(LispBuiltin*);
LispObj *Lisp_PQhost(LispBuiltin*);
LispObj *Lisp_PQnfields(LispBuiltin*);
LispObj *Lisp_PQnotifies(LispBuiltin*);
LispObj *Lisp_PQntuples(LispBuiltin*);
LispObj *Lisp_PQoptions(LispBuiltin*);
LispObj *Lisp_PQpass(LispBuiltin*);
LispObj *Lisp_PQport(LispBuiltin*);
LispObj *Lisp_PQresultStatus(LispBuiltin*);
LispObj *Lisp_PQsetdb(LispBuiltin*);
LispObj *Lisp_PQsetdbLogin(LispBuiltin*);
LispObj *Lisp_PQsocket(LispBuiltin*);
LispObj *Lisp_PQstatus(LispBuiltin*);
LispObj *Lisp_PQtty(LispBuiltin*);
LispObj *Lisp_PQuser(LispBuiltin*);
d75 27
a101 27
    {LispFunction, Lisp_PQbackendPID, "pq-backend-pid connection"},
    {LispFunction, Lisp_PQclear, "pq-clear result"},
    {LispFunction, Lisp_PQconsumeInput, "pq-consume-input connection"},
    {LispFunction, Lisp_PQdb, "pq-db connection"},
    {LispFunction, Lisp_PQerrorMessage, "pq-error-message connection"},
    {LispFunction, Lisp_PQexec, "pq-exec connection query"},
    {LispFunction, Lisp_PQfinish, "pq-finish connection"},
    {LispFunction, Lisp_PQfname, "pq-fname result field-number"},
    {LispFunction, Lisp_PQfnumber, "pq-fnumber result field-name"},
    {LispFunction, Lisp_PQfsize, "pq-fsize result field-number"},
    {LispFunction, Lisp_PQftype, "pq-ftype result field-number"},
    {LispFunction, Lisp_PQgetlength, "pq-getlength result tupple field-number"},
    {LispFunction, Lisp_PQgetvalue, "pq-getvalue result tupple field-number &optional type"},
    {LispFunction, Lisp_PQhost, "pq-host connection"},
    {LispFunction, Lisp_PQnfields, "pq-nfields result"},
    {LispFunction, Lisp_PQnotifies, "pq-notifies connection"},
    {LispFunction, Lisp_PQntuples, "pq-ntuples result"},
    {LispFunction, Lisp_PQoptions, "pq-options connection"},
    {LispFunction, Lisp_PQpass, "pq-pass connection"},
    {LispFunction, Lisp_PQport, "pq-port connection"},
    {LispFunction, Lisp_PQresultStatus, "pq-result-status result"},
    {LispFunction, Lisp_PQsetdb, "pq-setdb host port options tty dbname"},
    {LispFunction, Lisp_PQsetdbLogin, "pq-setdb-login host port options tty dbname login password"},
    {LispFunction, Lisp_PQsocket, "pq-socket connection"},
    {LispFunction, Lisp_PQstatus, "pq-status connection"},
    {LispFunction, Lisp_PQtty, "pq-tty connection"},
    {LispFunction, Lisp_PQuser, "pq-user connection"},
d115 1
a115 1
psqlLoadModule(void)
d118 1
a118 1
    char *fname = "PSQL-LOAD-MODULE";
d120 3
a122 2
    PGconn_t = LispRegisterOpaqueType("PGconn*");
    PGresult_t = LispRegisterOpaqueType("PGresult*");
a123 1
    GCDisable();
d129 2
a130 1
    LispExecute("(DEFSTRUCT PG-NOTIFY RELNAME BE-PID)\n"
d136 1
a136 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-OK"),
d138 1
a138 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-BAD"),
d140 1
a140 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-STARTED"),
d142 1
a142 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-MADE"),
d144 1
a144 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-AWAITING-RESPONSE"),
d146 1
a146 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-AUTH-OK"),
d148 1
a148 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-SETENV"),
d153 1
a153 1
    (void)LispSetVariable(ATOM2("PGRES-EMPTY-QUERY"),
d155 1
a155 1
    (void)LispSetVariable(ATOM2("PGRES-COMMAND-OK"),
d157 1
a157 1
    (void)LispSetVariable(ATOM2("PGRES-TUPLES-OK"),
d159 1
a159 1
    (void)LispSetVariable(ATOM2("PGRES-COPY-OUT"),
d161 1
a161 1
    (void)LispSetVariable(ATOM2("PGRES-COPY-IN"),
d163 1
a163 1
    (void)LispSetVariable(ATOM2("PGRES-BAD-RESPONSE"),
d165 1
a165 1
    (void)LispSetVariable(ATOM2("PGRES-NONFATAL-ERROR"),
d167 1
a167 1
    (void)LispSetVariable(ATOM2("PGRES-FATAL-ERROR"),
d169 1
a169 1
    GCEnable();
d172 1
a172 1
	LispAddBuiltinFunction(&lispbuiltins[i]);
d178 1
a178 4
Lisp_PQbackendPID(LispBuiltin *builtin)
/*
 pq-backend-pid connection
 */
d183 3
a185 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d187 1
d190 1
a190 1
    return (INTEGER(pid));
d194 1
a194 4
Lisp_PQclear(LispBuiltin *builtin)
/*
 pq-clear result
 */
d198 3
a200 8
    LispObj *result;

    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);
d202 1
d209 1
a209 4
Lisp_PQconsumeInput(LispBuiltin *builtin)
/*
 pq-consume-input connection
 */
d214 3
a216 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d218 1
d221 1
a221 1
    return (INTEGER(result));
d225 1
a225 4
Lisp_PQdb(LispBuiltin *builtin)
/*
 pq-db connection
 */
d227 1
a227 1
    char *string;
d230 3
a232 3
    LispObj *connection;

    connection = ARGUMENT(0);
d234 2
a235 4
    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d237 1
a237 3
    string = PQdb(conn);

    return (string ? STRING(string) : NIL);
d241 1
a241 1
Lisp_PQerrorMessage(LispBuiltin *builtin)
d243 1
a243 1
    char *string;
d246 3
a248 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d250 2
a251 1
    string = PQerrorMessage(conn);
d253 1
a253 1
    return (string ? STRING(string) : NIL);
d257 1
a257 4
Lisp_PQexec(LispBuiltin *builtin)
/*
 pq-exec connection query
 */
d262 3
a264 1
    LispObj *connection, *query;
d266 4
a269 2
    query = ARGUMENT(1);
    connection = ARGUMENT(0);
d271 1
a271 7
    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);

    CHECK_STRING(query);
    res = PQexec(conn, THESTR(query));
d277 1
a277 4
Lisp_PQfinish(LispBuiltin *builtin)
/*
 pq-finish connection
 */
d281 3
a283 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d285 1
d292 1
a292 4
Lisp_PQfname(LispBuiltin *builtin)
/*
 pq-fname result field-number
 */
d294 1
a294 1
    char *string;
d298 9
a306 12
    LispObj *result, *field_number;

    field_number = ARGUMENT(1);
    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);

    CHECK_INDEX(field_number);
    field = FIXNUM_VALUE(field_number);
d308 1
a308 1
    string = PQfname(res, field);
d310 1
a310 1
    return (string ? STRING(string) : NIL);
d314 1
a314 4
Lisp_PQfnumber(LispBuiltin *builtin)
/*
 pq-fnumber result field-name
 */
d316 1
a316 2
    int number;
    int field;
d319 8
a326 9
    LispObj *result, *field_name;

    field_name = ARGUMENT(1);
    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);
d328 1
a328 2
    CHECK_STRING(field_name);
    number = PQfnumber(res, THESTR(field_name));
d330 1
a330 1
    return (INTEGER(number));
d334 1
a334 4
Lisp_PQfsize(LispBuiltin *builtin)
/*
 pq-fsize result field-number
 */
d339 9
a347 12
    LispObj *result, *field_number;

    field_number = ARGUMENT(1);
    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);

    CHECK_INDEX(field_number);
    field = FIXNUM_VALUE(field_number);
d351 1
a351 1
    return (INTEGER(size));
d355 1
a355 1
Lisp_PQftype(LispBuiltin *builtin)
d361 9
a369 12
    LispObj *result, *field_number;

    field_number = ARGUMENT(1);
    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);

    CHECK_INDEX(field_number);
    field = FIXNUM_VALUE(field_number);
d373 1
a373 1
    return (INTEGER(oid));
d377 1
a377 4
Lisp_PQgetlength(LispBuiltin *builtin)
/*
 pq-getlength result tupple field-number
 */
d380 1
a380 15
    int tuple, field, length;

    LispObj *result, *otupple, *field_number;

    field_number = ARGUMENT(2);
    otupple = ARGUMENT(1);
    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);

    CHECK_INDEX(otupple);
    tuple = FIXNUM_VALUE(otupple);
d382 14
a395 2
    CHECK_INDEX(field_number);
    field = FIXNUM_VALUE(field_number);
d397 1
a397 1
    length = PQgetlength(res, tuple, field);
d399 1
a399 1
    return (INTEGER(length));
d402 1
d404 1
a404 4
Lisp_PQgetvalue(LispBuiltin *builtin)
/*
 pq-getvalue result tuple field &optional type-specifier
 */
d406 1
a406 1
    char *string;
d409 1
a409 1
    int tuple, field, isint = 0, isreal = 0, integer;
d411 24
a434 29
    LispObj *result, *otupple, *field_number, *type;

    type = ARGUMENT(3);
    field_number = ARGUMENT(2);
    otupple = ARGUMENT(1);
    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);

    CHECK_INDEX(otupple);
    tuple = FIXNUM_VALUE(otupple);

    CHECK_INDEX(field_number);
    field = FIXNUM_VALUE(field_number);

    string = PQgetvalue(res, tuple, field);

    if (type != UNSPEC) {
	char *typestring;

	CHECK_SYMBOL(type);
	typestring = ATOMID(type);

	if (strcmp(typestring, "INT16") == 0) {
	    integer = *(short*)string;
	    isint = 1;
d437 3
a439 3
	else if (strcmp(typestring, "INT32") == 0) {
	    integer = *(int*)string;
	    isint = 1;
d442 2
a443 2
	else if (strcmp(typestring, "FLOAT") == 0) {
	    real = *(float*)string;
d447 2
a448 2
	else if (strcmp(typestring, "REAL") == 0) {
	    real = *(double*)string;
d452 1
a452 1
	else if (strcmp(typestring, "PG-POLYGON") == 0)
d454 3
a456 3
	else if (strcmp(typestring, "STRING") != 0)
	    LispDestroy("%s: unknown type %s",
			STRFUN(builtin), typestring);
d460 1
a460 2
    return (isint ? INTEGER(integer) : isreal ? DFLOAT(real) :
	    (string ? STRING(string) : NIL));
d469 1
a469 1
    polygon = (POLYGON*)(string - sizeof(int));
d471 1
a471 1
    GCDisable();
d474 1
a474 1
		    CONS(KEYWORD("X"),
d476 1
a476 1
			      CONS(KEYWORD("Y"),
d479 1
a479 1
		    CONS(KEYWORD("X"),
d481 1
a481 1
			      CONS(KEYWORD("Y"),
d484 1
a484 1
		    CONS(KEYWORD("HIGH"),
d486 1
a486 1
			      CONS(KEYWORD("LOW"),
d491 1
a491 1
			CONS(KEYWORD("X"),
d493 1
a493 1
			      CONS(KEYWORD("Y"),
d498 1
a498 1
	    RPLACD(cdr, CONS(obj, NIL));
d505 1
a505 1
		     CONS(KEYWORD("SIZE"),
d507 1
a507 1
			       CONS(KEYWORD("NUM-POINTS"),
d509 1
a509 1
					 CONS(KEYWORD("BOUNDBOX"),
d511 1
a511 1
						   CONS(KEYWORD("POINTS"),
d513 1
a513 1
    GCEnable();
d520 1
a520 4
Lisp_PQhost(LispBuiltin *builtin)
/*
 pq-host connection
 */
d522 1
a522 1
    char *string;
d525 3
a527 1
    LispObj *connection;
d529 2
a530 1
    connection = ARGUMENT(0);
d532 1
a532 8
    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);

    string = PQhost(conn);

    return (string ? STRING(string) : NIL);
d536 1
a536 4
Lisp_PQnfields(LispBuiltin *builtin)
/*
 pq-nfields result
 */
d541 3
a543 8
    LispObj *result;

    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);
d545 1
d548 1
a548 1
    return (INTEGER(nfields));
d552 1
a552 4
Lisp_PQnotifies(LispBuiltin *builtin)
/*
 pq-notifies connection
 */
d554 1
a554 1
    LispObj *result, *code, *cod = COD;
d558 3
a560 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d562 1
d566 1
a566 1
    GCDisable();
d568 1
a568 1
		  CONS(KEYWORD("RELNAME"),
d570 1
a570 1
			    CONS(KEYWORD("BE-PID"),
d572 4
a575 4
    COD = CONS(code, COD);
    GCEnable();
    result = EVAL(code);
    COD = cod;
d579 1
a579 1
    return (result);
d583 1
a583 4
Lisp_PQntuples(LispBuiltin *builtin)
/*
 pq-ntuples result
 */
d588 3
a590 8
    LispObj *result;

    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);
d592 1
d595 1
a595 1
    return (INTEGER(ntuples));
d599 1
a599 4
Lisp_PQoptions(LispBuiltin *builtin)
/*
 pq-options connection
 */
d601 1
a601 1
    char *string;
d604 3
a606 3
    LispObj *connection;

    connection = ARGUMENT(0);
d608 2
a609 4
    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d611 1
a611 3
    string = PQoptions(conn);

    return (string ? STRING(string) : NIL);
d615 1
a615 4
Lisp_PQpass(LispBuiltin *builtin)
/*
 pq-pass connection
 */
d617 1
a617 1
    char *string;
d620 3
a622 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d624 2
a625 1
    string = PQpass(conn);
d627 1
a627 1
    return (string ? STRING(string) : NIL);
d631 1
a631 4
Lisp_PQport(LispBuiltin *builtin)
/*
 pq-port connection
 */
d633 1
a633 1
    char *string;
d636 3
a638 26
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);

    string = PQport(conn);

    return (string ? STRING(string) : NIL);
}

LispObj *
Lisp_PQresultStatus(LispBuiltin *builtin)
/*
 pq-result-status result
 */
{
    int status;
    PGresult *res;

    LispObj *result;

    result = ARGUMENT(0);
d640 2
a641 4
    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);
d643 1
a643 3
    status = PQresultStatus(res);

    return (INTEGER(status));
d647 1
a647 5
LispPQsetdb(LispBuiltin *builtin, int loginp)
/*
 pq-setdb host port options tty dbname
 pq-setdb-login host port options tty dbname login password
 */
d650 2
a651 43
    char *host, *port, *options, *tty, *dbname, *login, *password;

    LispObj *ohost, *oport, *ooptions, *otty, *odbname, *ologin, *opassword;

    if (loginp) {
	opassword = ARGUMENT(6);
	ologin = ARGUMENT(5);
    }
    else
	opassword = ologin = NIL;
    odbname = ARGUMENT(4);
    otty = ARGUMENT(3);
    ooptions = ARGUMENT(2);
    oport = ARGUMENT(1);
    ohost = ARGUMENT(0);

    if (ohost != NIL) {
	CHECK_STRING(ohost);
	host = THESTR(ohost);
    }
    else
	host = NULL;

    if (oport != NIL) {
	CHECK_STRING(oport);
	port = THESTR(oport);
    }
    else
	port = NULL;

    if (ooptions != NIL) {
	CHECK_STRING(ooptions);
	options = THESTR(ooptions);
    }
    else
	options = NULL;

    if (otty != NIL) {
	CHECK_STRING(otty);
	tty = THESTR(otty);
    }
    else
	tty = NULL;
d653 3
a655 13
    if (odbname != NIL) {
	CHECK_STRING(odbname);
	dbname = THESTR(odbname);
    }
    else
	dbname = NULL;

    if (ologin != NIL) {
	CHECK_STRING(ologin);
	login = THESTR(ologin);
    }
    else
	login = NULL;
d657 14
a670 3
    if (opassword != NIL) {
	CHECK_STRING(opassword);
	password = THESTR(opassword);
d673 1
a673 1
	password = NULL;
d675 1
a675 1
    conn = PQsetdbLogin(host, port, options, tty, dbname, login, password);
d681 1
a681 4
Lisp_PQsetdb(LispBuiltin *builtin)
/*
 pq-setdb host port options tty dbname
 */
d683 9
a691 2
    return (LispPQsetdb(builtin, 0));
}
d693 1
a693 7
LispObj *
Lisp_PQsetdbLogin(LispBuiltin *builtin)
/*
 pq-setdb-login host port options tty dbname login password
 */
{
    return (LispPQsetdb(builtin, 1));
d697 1
a697 4
Lisp_PQsocket(LispBuiltin *builtin)
/*
 pq-socket connection
 */
d702 3
a704 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d706 1
d709 1
a709 1
    return (INTEGER(sock));
d713 1
a713 4
Lisp_PQstatus(LispBuiltin *builtin)
/*
 pq-status connection
 */
d718 3
a720 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d722 1
d725 1
a725 1
    return (INTEGER(status));
d729 1
a729 4
Lisp_PQtty(LispBuiltin *builtin)
/*
 pq-tty connection
 */
d731 1
a731 1
    char *string;
d734 3
a736 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d738 2
a739 1
    string = PQtty(conn);
d741 1
a741 1
    return (string ? STRING(string) : NIL);
d745 1
a745 4
Lisp_PQuser(LispBuiltin *builtin)
/*
 pq-user connection
 */
d747 1
a747 1
    char *string;
d750 3
a752 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d754 2
a755 1
    string = PQuser(conn);
d757 1
a757 1
    return (string ? STRING(string) : NIL);
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/modules/psql.c,v 1.12 2002/11/23 08:26:52 paulo Exp $ */
a37 1
#include "private.h"
d42 1
a42 1
int psqlLoadModule(void);
d44 26
a69 27
LispObj *Lisp_PQbackendPID(LispBuiltin*);
LispObj *Lisp_PQclear(LispBuiltin*);
LispObj *Lisp_PQconsumeInput(LispBuiltin*);
LispObj *Lisp_PQdb(LispBuiltin*);
LispObj *Lisp_PQerrorMessage(LispBuiltin*);
LispObj *Lisp_PQexec(LispBuiltin*);
LispObj *Lisp_PQfinish(LispBuiltin*);
LispObj *Lisp_PQfname(LispBuiltin*);
LispObj *Lisp_PQfnumber(LispBuiltin*);
LispObj *Lisp_PQfsize(LispBuiltin*);
LispObj *Lisp_PQftype(LispBuiltin*);
LispObj *Lisp_PQgetlength(LispBuiltin*);
LispObj *Lisp_PQgetvalue(LispBuiltin*);
LispObj *Lisp_PQhost(LispBuiltin*);
LispObj *Lisp_PQnfields(LispBuiltin*);
LispObj *Lisp_PQnotifies(LispBuiltin*);
LispObj *Lisp_PQntuples(LispBuiltin*);
LispObj *Lisp_PQoptions(LispBuiltin*);
LispObj *Lisp_PQpass(LispBuiltin*);
LispObj *Lisp_PQport(LispBuiltin*);
LispObj *Lisp_PQresultStatus(LispBuiltin*);
LispObj *Lisp_PQsetdb(LispBuiltin*);
LispObj *Lisp_PQsetdbLogin(LispBuiltin*);
LispObj *Lisp_PQsocket(LispBuiltin*);
LispObj *Lisp_PQstatus(LispBuiltin*);
LispObj *Lisp_PQtty(LispBuiltin*);
LispObj *Lisp_PQuser(LispBuiltin*);
d75 27
a101 27
    {LispFunction, Lisp_PQbackendPID, "pq-backend-pid connection"},
    {LispFunction, Lisp_PQclear, "pq-clear result"},
    {LispFunction, Lisp_PQconsumeInput, "pq-consume-input connection"},
    {LispFunction, Lisp_PQdb, "pq-db connection"},
    {LispFunction, Lisp_PQerrorMessage, "pq-error-message connection"},
    {LispFunction, Lisp_PQexec, "pq-exec connection query"},
    {LispFunction, Lisp_PQfinish, "pq-finish connection"},
    {LispFunction, Lisp_PQfname, "pq-fname result field-number"},
    {LispFunction, Lisp_PQfnumber, "pq-fnumber result field-name"},
    {LispFunction, Lisp_PQfsize, "pq-fsize result field-number"},
    {LispFunction, Lisp_PQftype, "pq-ftype result field-number"},
    {LispFunction, Lisp_PQgetlength, "pq-getlength result tupple field-number"},
    {LispFunction, Lisp_PQgetvalue, "pq-getvalue result tupple field-number &optional type"},
    {LispFunction, Lisp_PQhost, "pq-host connection"},
    {LispFunction, Lisp_PQnfields, "pq-nfields result"},
    {LispFunction, Lisp_PQnotifies, "pq-notifies connection"},
    {LispFunction, Lisp_PQntuples, "pq-ntuples result"},
    {LispFunction, Lisp_PQoptions, "pq-options connection"},
    {LispFunction, Lisp_PQpass, "pq-pass connection"},
    {LispFunction, Lisp_PQport, "pq-port connection"},
    {LispFunction, Lisp_PQresultStatus, "pq-result-status result"},
    {LispFunction, Lisp_PQsetdb, "pq-setdb host port options tty dbname"},
    {LispFunction, Lisp_PQsetdbLogin, "pq-setdb-login host port options tty dbname login password"},
    {LispFunction, Lisp_PQsocket, "pq-socket connection"},
    {LispFunction, Lisp_PQstatus, "pq-status connection"},
    {LispFunction, Lisp_PQtty, "pq-tty connection"},
    {LispFunction, Lisp_PQuser, "pq-user connection"},
d115 1
a115 1
psqlLoadModule(void)
d118 1
a118 1
    char *fname = "PSQL-LOAD-MODULE";
d120 3
a122 2
    PGconn_t = LispRegisterOpaqueType("PGconn*");
    PGresult_t = LispRegisterOpaqueType("PGresult*");
a123 1
    GCDisable();
d129 2
a130 1
    LispExecute("(DEFSTRUCT PG-NOTIFY RELNAME BE-PID)\n"
d136 1
a136 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-OK"),
d138 1
a138 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-BAD"),
d140 1
a140 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-STARTED"),
d142 1
a142 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-MADE"),
d144 1
a144 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-AWAITING-RESPONSE"),
d146 1
a146 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-AUTH-OK"),
d148 1
a148 1
    (void)LispSetVariable(ATOM2("PG-CONNECTION-SETENV"),
d153 1
a153 1
    (void)LispSetVariable(ATOM2("PGRES-EMPTY-QUERY"),
d155 1
a155 1
    (void)LispSetVariable(ATOM2("PGRES-COMMAND-OK"),
d157 1
a157 1
    (void)LispSetVariable(ATOM2("PGRES-TUPLES-OK"),
d159 1
a159 1
    (void)LispSetVariable(ATOM2("PGRES-COPY-OUT"),
d161 1
a161 1
    (void)LispSetVariable(ATOM2("PGRES-COPY-IN"),
d163 1
a163 1
    (void)LispSetVariable(ATOM2("PGRES-BAD-RESPONSE"),
d165 1
a165 1
    (void)LispSetVariable(ATOM2("PGRES-NONFATAL-ERROR"),
d167 1
a167 1
    (void)LispSetVariable(ATOM2("PGRES-FATAL-ERROR"),
d169 1
a169 1
    GCEnable();
d172 1
a172 1
	LispAddBuiltinFunction(&lispbuiltins[i]);
d178 1
a178 4
Lisp_PQbackendPID(LispBuiltin *builtin)
/*
 pq-backend-pid connection
 */
d183 3
a185 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d187 1
d190 1
a190 1
    return (INTEGER(pid));
d194 1
a194 4
Lisp_PQclear(LispBuiltin *builtin)
/*
 pq-clear result
 */
d198 3
a200 8
    LispObj *result;

    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);
d202 1
d209 1
a209 4
Lisp_PQconsumeInput(LispBuiltin *builtin)
/*
 pq-consume-input connection
 */
d214 3
a216 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d218 1
d221 1
a221 1
    return (INTEGER(result));
d225 1
a225 4
Lisp_PQdb(LispBuiltin *builtin)
/*
 pq-db connection
 */
d227 1
a227 1
    char *string;
d230 3
a232 3
    LispObj *connection;

    connection = ARGUMENT(0);
d234 2
a235 4
    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d237 1
a237 3
    string = PQdb(conn);

    return (string ? STRING(string) : NIL);
d241 1
a241 1
Lisp_PQerrorMessage(LispBuiltin *builtin)
d243 1
a243 1
    char *string;
d246 3
a248 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d250 2
a251 1
    string = PQerrorMessage(conn);
d253 1
a253 1
    return (string ? STRING(string) : NIL);
d257 1
a257 4
Lisp_PQexec(LispBuiltin *builtin)
/*
 pq-exec connection query
 */
d262 3
a264 1
    LispObj *connection, *query;
d266 4
a269 2
    query = ARGUMENT(1);
    connection = ARGUMENT(0);
d271 1
a271 7
    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);

    CHECK_STRING(query);
    res = PQexec(conn, THESTR(query));
d277 1
a277 4
Lisp_PQfinish(LispBuiltin *builtin)
/*
 pq-finish connection
 */
d281 3
a283 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d285 1
d292 1
a292 4
Lisp_PQfname(LispBuiltin *builtin)
/*
 pq-fname result field-number
 */
d294 1
a294 1
    char *string;
d298 9
a306 12
    LispObj *result, *field_number;

    field_number = ARGUMENT(1);
    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);

    CHECK_INDEX(field_number);
    field = FIXNUM_VALUE(field_number);
d308 1
a308 1
    string = PQfname(res, field);
d310 1
a310 1
    return (string ? STRING(string) : NIL);
d314 1
a314 4
Lisp_PQfnumber(LispBuiltin *builtin)
/*
 pq-fnumber result field-name
 */
d316 1
a316 2
    int number;
    int field;
d319 8
a326 9
    LispObj *result, *field_name;

    field_name = ARGUMENT(1);
    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);
d328 1
a328 2
    CHECK_STRING(field_name);
    number = PQfnumber(res, THESTR(field_name));
d330 1
a330 1
    return (INTEGER(number));
d334 1
a334 4
Lisp_PQfsize(LispBuiltin *builtin)
/*
 pq-fsize result field-number
 */
d339 9
a347 12
    LispObj *result, *field_number;

    field_number = ARGUMENT(1);
    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);

    CHECK_INDEX(field_number);
    field = FIXNUM_VALUE(field_number);
d351 1
a351 1
    return (INTEGER(size));
d355 1
a355 1
Lisp_PQftype(LispBuiltin *builtin)
d361 9
a369 12
    LispObj *result, *field_number;

    field_number = ARGUMENT(1);
    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);

    CHECK_INDEX(field_number);
    field = FIXNUM_VALUE(field_number);
d373 1
a373 1
    return (INTEGER(oid));
d377 1
a377 4
Lisp_PQgetlength(LispBuiltin *builtin)
/*
 pq-getlength result tupple field-number
 */
d380 1
a380 15
    int tuple, field, length;

    LispObj *result, *otupple, *field_number;

    field_number = ARGUMENT(2);
    otupple = ARGUMENT(1);
    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);

    CHECK_INDEX(otupple);
    tuple = FIXNUM_VALUE(otupple);
d382 14
a395 2
    CHECK_INDEX(field_number);
    field = FIXNUM_VALUE(field_number);
d397 1
a397 1
    length = PQgetlength(res, tuple, field);
d399 1
a399 1
    return (INTEGER(length));
d402 1
d404 1
a404 4
Lisp_PQgetvalue(LispBuiltin *builtin)
/*
 pq-getvalue result tuple field &optional type-specifier
 */
d406 1
a406 1
    char *string;
d409 1
a409 1
    int tuple, field, isint = 0, isreal = 0, integer;
d411 24
a434 29
    LispObj *result, *otupple, *field_number, *type;

    type = ARGUMENT(3);
    field_number = ARGUMENT(2);
    otupple = ARGUMENT(1);
    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);

    CHECK_INDEX(otupple);
    tuple = FIXNUM_VALUE(otupple);

    CHECK_INDEX(field_number);
    field = FIXNUM_VALUE(field_number);

    string = PQgetvalue(res, tuple, field);

    if (type != UNSPEC) {
	char *typestring;

	CHECK_SYMBOL(type);
	typestring = ATOMID(type);

	if (strcmp(typestring, "INT16") == 0) {
	    integer = *(short*)string;
	    isint = 1;
d437 3
a439 3
	else if (strcmp(typestring, "INT32") == 0) {
	    integer = *(int*)string;
	    isint = 1;
d442 2
a443 2
	else if (strcmp(typestring, "FLOAT") == 0) {
	    real = *(float*)string;
d447 2
a448 2
	else if (strcmp(typestring, "REAL") == 0) {
	    real = *(double*)string;
d452 1
a452 1
	else if (strcmp(typestring, "PG-POLYGON") == 0)
d454 3
a456 3
	else if (strcmp(typestring, "STRING") != 0)
	    LispDestroy("%s: unknown type %s",
			STRFUN(builtin), typestring);
d460 1
a460 2
    return (isint ? INTEGER(integer) : isreal ? DFLOAT(real) :
	    (string ? STRING(string) : NIL));
d469 1
a469 1
    polygon = (POLYGON*)(string - sizeof(int));
d471 1
a471 1
    GCDisable();
d474 1
a474 1
		    CONS(KEYWORD("X"),
d476 1
a476 1
			      CONS(KEYWORD("Y"),
d479 1
a479 1
		    CONS(KEYWORD("X"),
d481 1
a481 1
			      CONS(KEYWORD("Y"),
d484 1
a484 1
		    CONS(KEYWORD("HIGH"),
d486 1
a486 1
			      CONS(KEYWORD("LOW"),
d491 1
a491 1
			CONS(KEYWORD("X"),
d493 1
a493 1
			      CONS(KEYWORD("Y"),
d498 1
a498 1
	    RPLACD(cdr, CONS(obj, NIL));
d505 1
a505 1
		     CONS(KEYWORD("SIZE"),
d507 1
a507 1
			       CONS(KEYWORD("NUM-POINTS"),
d509 1
a509 1
					 CONS(KEYWORD("BOUNDBOX"),
d511 1
a511 1
						   CONS(KEYWORD("POINTS"),
d513 1
a513 1
    GCEnable();
d520 1
a520 4
Lisp_PQhost(LispBuiltin *builtin)
/*
 pq-host connection
 */
d522 1
a522 1
    char *string;
d525 3
a527 1
    LispObj *connection;
d529 2
a530 1
    connection = ARGUMENT(0);
d532 1
a532 8
    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);

    string = PQhost(conn);

    return (string ? STRING(string) : NIL);
d536 1
a536 4
Lisp_PQnfields(LispBuiltin *builtin)
/*
 pq-nfields result
 */
d541 3
a543 8
    LispObj *result;

    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);
d545 1
d548 1
a548 1
    return (INTEGER(nfields));
d552 1
a552 4
Lisp_PQnotifies(LispBuiltin *builtin)
/*
 pq-notifies connection
 */
d554 1
a554 1
    LispObj *result, *code, *cod = COD;
d558 3
a560 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d562 1
d566 1
a566 1
    GCDisable();
d568 1
a568 1
		  CONS(KEYWORD("RELNAME"),
d570 1
a570 1
			    CONS(KEYWORD("BE-PID"),
d572 4
a575 4
    COD = CONS(code, COD);
    GCEnable();
    result = EVAL(code);
    COD = cod;
d579 1
a579 1
    return (result);
d583 1
a583 4
Lisp_PQntuples(LispBuiltin *builtin)
/*
 pq-ntuples result
 */
d588 3
a590 8
    LispObj *result;

    result = ARGUMENT(0);

    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);
d592 1
d595 1
a595 1
    return (INTEGER(ntuples));
d599 1
a599 4
Lisp_PQoptions(LispBuiltin *builtin)
/*
 pq-options connection
 */
d601 1
a601 1
    char *string;
d604 3
a606 3
    LispObj *connection;

    connection = ARGUMENT(0);
d608 2
a609 4
    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d611 1
a611 3
    string = PQoptions(conn);

    return (string ? STRING(string) : NIL);
d615 1
a615 4
Lisp_PQpass(LispBuiltin *builtin)
/*
 pq-pass connection
 */
d617 1
a617 1
    char *string;
d620 3
a622 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d624 2
a625 1
    string = PQpass(conn);
d627 1
a627 1
    return (string ? STRING(string) : NIL);
d631 1
a631 4
Lisp_PQport(LispBuiltin *builtin)
/*
 pq-port connection
 */
d633 1
a633 1
    char *string;
d636 3
a638 26
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);

    string = PQport(conn);

    return (string ? STRING(string) : NIL);
}

LispObj *
Lisp_PQresultStatus(LispBuiltin *builtin)
/*
 pq-result-status result
 */
{
    int status;
    PGresult *res;

    LispObj *result;

    result = ARGUMENT(0);
d640 2
a641 4
    if (!CHECKO(result, PGresult_t))
	LispDestroy("%s: cannot convert %s to PGresult*",
		    STRFUN(builtin), STROBJ(result));
    res = (PGresult*)(result->data.opaque.data);
d643 1
a643 3
    status = PQresultStatus(res);

    return (INTEGER(status));
d647 1
a647 5
LispPQsetdb(LispBuiltin *builtin, int loginp)
/*
 pq-setdb host port options tty dbname
 pq-setdb-login host port options tty dbname login password
 */
d650 2
a651 43
    char *host, *port, *options, *tty, *dbname, *login, *password;

    LispObj *ohost, *oport, *ooptions, *otty, *odbname, *ologin, *opassword;

    if (loginp) {
	opassword = ARGUMENT(6);
	ologin = ARGUMENT(5);
    }
    else
	opassword = ologin = NIL;
    odbname = ARGUMENT(4);
    otty = ARGUMENT(3);
    ooptions = ARGUMENT(2);
    oport = ARGUMENT(1);
    ohost = ARGUMENT(0);

    if (ohost != NIL) {
	CHECK_STRING(ohost);
	host = THESTR(ohost);
    }
    else
	host = NULL;

    if (oport != NIL) {
	CHECK_STRING(oport);
	port = THESTR(oport);
    }
    else
	port = NULL;

    if (ooptions != NIL) {
	CHECK_STRING(ooptions);
	options = THESTR(ooptions);
    }
    else
	options = NULL;

    if (otty != NIL) {
	CHECK_STRING(otty);
	tty = THESTR(otty);
    }
    else
	tty = NULL;
d653 3
a655 13
    if (odbname != NIL) {
	CHECK_STRING(odbname);
	dbname = THESTR(odbname);
    }
    else
	dbname = NULL;

    if (ologin != NIL) {
	CHECK_STRING(ologin);
	login = THESTR(ologin);
    }
    else
	login = NULL;
d657 14
a670 3
    if (opassword != NIL) {
	CHECK_STRING(opassword);
	password = THESTR(opassword);
d673 1
a673 1
	password = NULL;
d675 1
a675 1
    conn = PQsetdbLogin(host, port, options, tty, dbname, login, password);
d681 1
a681 4
Lisp_PQsetdb(LispBuiltin *builtin)
/*
 pq-setdb host port options tty dbname
 */
d683 9
a691 2
    return (LispPQsetdb(builtin, 0));
}
d693 1
a693 7
LispObj *
Lisp_PQsetdbLogin(LispBuiltin *builtin)
/*
 pq-setdb-login host port options tty dbname login password
 */
{
    return (LispPQsetdb(builtin, 1));
d697 1
a697 4
Lisp_PQsocket(LispBuiltin *builtin)
/*
 pq-socket connection
 */
d702 3
a704 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d706 1
d709 1
a709 1
    return (INTEGER(sock));
d713 1
a713 4
Lisp_PQstatus(LispBuiltin *builtin)
/*
 pq-status connection
 */
d718 3
a720 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d722 1
d725 1
a725 1
    return (INTEGER(status));
d729 1
a729 4
Lisp_PQtty(LispBuiltin *builtin)
/*
 pq-tty connection
 */
d731 1
a731 1
    char *string;
d734 3
a736 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d738 2
a739 1
    string = PQtty(conn);
d741 1
a741 1
    return (string ? STRING(string) : NIL);
d745 1
a745 4
Lisp_PQuser(LispBuiltin *builtin)
/*
 pq-user connection
 */
d747 1
a747 1
    char *string;
d750 3
a752 8
    LispObj *connection;

    connection = ARGUMENT(0);

    if (!CHECKO(connection, PGconn_t))
	LispDestroy("%s: cannot convert %s to PGconn*",
		    STRFUN(builtin), STROBJ(connection));
    conn = (PGconn*)(connection->data.opaque.data);
d754 2
a755 1
    string = PQuser(conn);
d757 1
a757 1
    return (string ? STRING(string) : NIL);
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/modules/psql.c,v 1.13 2003/04/27 18:17:37 tsi Exp $ */
d37 2
a38 2
#include "lisp/internal.h"
#include "lisp/private.h"
@


