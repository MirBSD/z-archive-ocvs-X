head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.39.50;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.18.39.05;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.28.29;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 2001 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *  
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE XFREE86 PROJECT BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the XFree86 Project shall
 * not be used in advertising or otherwise to promote the sale, use or other
 * dealings in this Software without prior written authorization from the
 * XFree86 Project.
 *
 * Author: Paulo César Pereira de Andrade
 */

/* $XFree86: xc/programs/xedit/lisp/debugger.c,v 1.11 2001/10/28 03:34:29 tsi Exp $ */

#include <ctype.h>
#include "debugger.h"

#define DebuggerHelp		0
#define DebuggerAbort		1
#define DebuggerBacktrace	2
#define DebuggerContinue	3
#define DebuggerFinish		4
#define DebuggerFrame		5
#define DebuggerNext		6
#define DebuggerNexti		7
#define DebuggerPrint		8
#define DebuggerStep		9
#define DebuggerStepi		10
#define DebuggerBreak		11
#define DebuggerDelete		12
#define DebuggerDown		13
#define DebuggerUp		14
#define DebuggerInfo		15
#define DebuggerWatch		16

#define DebuggerInfoBreakpoints	0
#define DebuggerInfoBacktrace	1

/*
 * Prototypes
 */
static void LispDebuggerCommand(LispMac*, LispObj *obj);

/*
 * Initialization
 */
static struct {
    char *name;
    int action;
} commands[] = {
    {"help",		DebuggerHelp},
    {"abort",		DebuggerAbort},
    {"backtrace",	DebuggerBacktrace},
    {"b",		DebuggerBreak},
    {"break",		DebuggerBreak},
    {"bt",		DebuggerBacktrace},
    {"continue",	DebuggerContinue},
    {"d",		DebuggerDelete},
    {"delete",		DebuggerDelete},
    {"down",		DebuggerDown},
    {"finish",		DebuggerFinish},
    {"frame",		DebuggerFrame},
    {"info",		DebuggerInfo},
    {"n",		DebuggerNext},
    {"next",		DebuggerNext},
    {"ni",		DebuggerNexti},
    {"nexti",		DebuggerNexti},
    {"print",		DebuggerPrint},
    {"run",		DebuggerContinue},
    {"s",		DebuggerStep},
    {"step",		DebuggerStep},
    {"si",		DebuggerStepi},
    {"stepi",		DebuggerStepi},
    {"up",		DebuggerUp},
    {"watch",		DebuggerWatch},
};

static struct {
    char *name;
    int subaction;
} info_commands[] = {
    {"breakpoints",	DebuggerInfoBreakpoints},
    {"stack",		DebuggerInfoBacktrace},
    {"watchpoints",	DebuggerInfoBreakpoints},
};

static char debugger_help[] =
"Available commands are:\n\
\n\
help		- This message.\n\
abort		- Abort the current execution, and return to toplevel.\n\
backtrace, bt	- Print backtrace.\n\
b, break	- Set breakpoint at function name argument.\n\
continue	- Continue execution.\n\
d, delete	- Delete breakpoint(s), all breakpoint if no arguments given.\n\
down		- Set environment to frame called by the current one.\n\
finish		- Executes until current form is finished.\n\
frame		- Set environment to selected frame.\n\
info		- Prints information about the debugger state.\n\
n, next		- Evaluate next form.\n\
nexti, ni	- Evaluate next form, including variables.\n\
print		- Print value of variable name argument.\n\
run		- Continue execution.\n\
s, step		- Evaluate next form, stopping on any subforms.\n\
si, stepi	- Evaluate next form including variables, stopping on subforms.\n\
up		- Set environment to frame that called the current one.\n\
\n\
Commands may be abbreviated.\n";

static char debugger_info_help[] =
"Available subcommands are:\n\
\n\
breakpoints	- List and prints status of breakpoints, and watchpoints.\n\
stack		- Backtrace of stack.\n\
watchpoints	- List and prints status of watchpoints, and breakpoints.\n\
\n\
Subcommands may be abbreviated.\n";

/* Debugger variables layout (if you change it, update description):
 *
 * DBG
 *	is a macro for mac->dbglist
 *	is a NIL terminated list
 *	every element is a list in the format (NOT NIL terminated):
 *	(list* NAM ARG ENV LEX)
 *	where
 *		NAM is an ATOM for the function/macro name
 *		    or NIL for lambda expressions
 *		ARG is NAM arguments (a LIST)
 *		ENV is the contents of the global ENV (a LIST)
 *		LEX is the contents of the global LEX (a LIST)
 *	new elements are added to the beggining of the list
 *
 * BRK
 *	is macro for mac->brklist
 *	is a NIL terminated list
 *	every element is a list in the format (NIL terminated):
 *	(list NAM IDX TYP HIT VAR VAL FRM)
 *	where
 *		NAM is an ATOM for the name of the object at
 *		    wich the breakpoint was added
 *		IDX is a REAL, the breakpoint number
 *		    must be stored, as breakpoints may be deleted
 *		TYP is a REAL that must be an integer of enum LispBreakType
 *		HIT is a REAL, with the number of times this breakpoint was
 *		    hitted.
 *		VAR variable to watch a SYMBOL	(not needed for breakpoints)
 *		VAL value of watched variable	(not needed for breakpoints)
 *		FRM frame where variable started being watched
 *						(not needed for breakpoints)
 *	new elements are added to the end of the list
 */

/*
 * Implementation
 */
void
LispDebugger(LispMac *mac, LispDebugCall call, LispObj *name, LispObj *arg)
{
    int force = 0;
    LispObj *obj, *prev;

    switch (call) {
	case LispDebugCallBegin:
	    ++mac->debug_level;
	    GCProtect();
	    DBG = CONS(CONS(name, CONS(arg, CONS(ENV, LEX))), DBG);
	    GCUProtect();
	    for (obj = BRK; obj != NIL; obj = CDR(obj))
		if (STRPTR(CAR(CAR(obj))) == STRPTR(name) &&
		    CAR(CDR(CDR(CAR(obj))))->data.real == LispDebugBreakFunction)
		    break;
	    if (obj != NIL) {
		if (!mac->newline)
		    fputc('\n', lisp_stdout);
		fprintf(lisp_stdout, "BREAK #");
		LispPrintObj(mac, NIL, CAR(CDR(CAR(obj))), 1);
		fprintf(lisp_stdout, "> (");
		LispPrintObj(mac, NIL, CAR(CAR(DBG)), 1);
		fputc(' ', lisp_stdout);
		LispPrintObj(mac, NIL, CAR(CDR(CAR(DBG))), 0);
		fprintf(lisp_stdout, ")\n");
		force = 1;
		/* update hits counter */
		CAR(CDR(CDR(CDR(CAR(obj)))))->data.real += 1.0;
	    }
	    break;
	case LispDebugCallEnd:
	    DBG = CDR(DBG);
	    if (mac->debug_level < mac->debug_step)
		mac->debug_step = mac->debug_level;
	    --mac->debug_level;
	    break;
	case LispDebugCallFatal:
	    LispDebuggerCommand(mac, NIL);
	    return;
	case LispDebugCallBegini:
	case LispDebugCallEndi:
	    if (mac->debug != LispDebugNexti && mac->debug != LispDebugStepi)
		return;
	    break;
	case LispDebugCallWatch:
	    break;
    }

    /* didn't return, check watchpoints */
    if (call == LispDebugCallEnd || call == LispDebugCallWatch) {
watch_again:
	for (prev = obj = BRK; obj != NIL; prev = obj, obj = CDR(obj)) {
	    if (CAR(CDR(CDR(CAR(obj))))->data.real == LispDebugBreakVariable) {
		/* the variable */
		LispObj *wat = CAR(CDR(CDR(CDR(CDR(CAR(obj))))));
		LispObj *sym = LispGetVarCons(mac, CAAR(obj));
		LispObj *frm = CAR(CDR(CDR(CDR(CDR(CDR(CDR(CAR(obj))))))));

		if ((sym == NULL && mac->debug_level <= 0) ||
		    (sym != wat && frm->data.real > mac->debug_level)) {
		    fprintf(lisp_stdout, "WATCH #%g> %s deleted. Variable does "
			    "not exist anymore.\n",
			    CAR(CDR(CAR(obj)))->data.real,
			    STRPTR(CAR(CAR(obj))));
		    /* force debugger to stop */
		    force = 1;
		    if (obj == prev) {
			BRK = CDR(BRK);
			goto watch_again;
		    }
		    else
			CDR(prev) = CDR(obj);
		    obj = prev;
		}
		else {
		    /* current value */
		    LispObj *cur = CDR(wat);
		    /* last value */
		    LispObj *val = CAR(CDR(CDR(CDR(CDR(CDR(CAR(obj)))))));
		    if (_LispEqual(mac, val, cur) == NIL) {
			fprintf(lisp_stdout, "WATCH #%g> %s\n",
				CAR(CDR(CAR(obj)))->data.real,
				STRPTR(CAR(CAR(obj))));
			fprintf(lisp_stdout, "OLD: ");
			LispPrintObj(mac, NIL, val, 1);
			fprintf(lisp_stdout, "\nNEW: ");
			LispPrintObj(mac, NIL, cur, 1);
			fputc('\n', lisp_stdout);

			/* update current value */
			CAR(CDR(CDR(CDR(CDR(CDR(CAR(obj))))))) = cur;
			/* update hits counter */
			CAR(CDR(CDR(CDR(CAR(obj)))))->data.real += 1.0;
			/* force debugger to stop */
			force = 1;
		    }
		}
	    }
	}

	if (call == LispDebugCallWatch)
	    /* special call, just don't keep gc protected variables that may be
	     * using a lot of memory... */
	    return;
    }

    switch (mac->debug) {
	case LispDebugUnspec:
	    LispDebuggerCommand(mac, NIL);
	    goto debugger_done;
	case LispDebugRun:
	    if (force)
		LispDebuggerCommand(mac, NIL);
	    goto debugger_done;
	case LispDebugFinish:
	    if (!force &&
		(call != LispDebugCallEnd || mac->debug_level != mac->debug_step))
		goto debugger_done;
	    break;
	case LispDebugNext:
	    if (call == LispDebugCallBegin) {
		if (!force && mac->debug_level != mac->debug_step)
		    goto debugger_done;
	    }
	    else if (call == LispDebugCallEnd) {
		if (!force && mac->debug_level >= mac->debug_step)
		    goto debugger_done;
	    }
	    break;
	case LispDebugStep:
	    break;
	case LispDebugNexti:
	    if (call == LispDebugCallBegini) {
		if (!force && mac->debug_level != mac->debug_step)
		    goto debugger_done;
	    }
	    else if (call == LispDebugCallEndi) {
		if (!force && mac->debug_level >= mac->debug_step)
		    goto debugger_done;
	    }
	    break;
	case LispDebugStepi:
	    break;
    }

    if (call == LispDebugCallBegin) {
	if (!mac->newline)
	    fputc('\n', lisp_stdout);
	fprintf(lisp_stdout, "#%d> ", mac->debug_level);

	fputc('(', lisp_stdout);
	LispPrintObj(mac, NIL, CAR(CAR(DBG)), 1);
	fputc(' ', lisp_stdout);
	LispPrintObj(mac, NIL, CAR(CDR(CAR(DBG))), 0);
	fprintf(lisp_stdout, ")\n");
	LispDebuggerCommand(mac, NIL);
    }
    else if (call == LispDebugCallEnd) {
	if (!mac->newline)
	    fputc('\n', lisp_stdout);
	fprintf(lisp_stdout, "#%d= ", mac->debug_level + 1);

	LispPrintObj(mac, NIL, arg, 1);
	fputc('\n', lisp_stdout);
	LispDebuggerCommand(mac, NIL);
    }
    else if (call == LispDebugCallBegini) {
	if (!mac->newline)
	    fputc('\n', lisp_stdout);
	fprintf(lisp_stdout, "#%d+> ",	mac->debug_level + 1);

	LispPrintObj(mac, NIL, arg, 1);
	fputc('\n', lisp_stdout);
	LispDebuggerCommand(mac, arg);
    }
    else if (call == LispDebugCallEndi) {
	if (!mac->newline)
	    fputc('\n', lisp_stdout);
	fprintf(lisp_stdout, "#%d+= ", mac->debug_level + 1);

	LispPrintObj(mac, NIL, arg, 1);
	fputc('\n', lisp_stdout);
	mac->newline = 1;
	LispDebuggerCommand(mac, arg);
    }
    else if (force)
	LispDebuggerCommand(mac, arg);

debugger_done:
    return;
}

static void
LispDebuggerCommand(LispMac *mac, LispObj *args)
{
    LispObj *obj, *frm, *curframe,
	    *old_frm = FRM, *old_env = ENV, *old_lex = LEX;
    int i = 0, frame, matches, action = -1, subaction = 0;
    char *cmd, *arg, *ptr, line[256];

    frame = mac->debug_level;
    curframe = CAR(DBG);

    line[0] = '\0';
    arg = line;
    for (;;) {
	fprintf(lisp_stdout, "%s", DBGPROMPT);
	fflush(lisp_stdout);
	if (fgets(line, sizeof(line), lisp_stdin) == NULL) {
	    fputc('\n', lisp_stdout);
	    return;
	}
	/* get command */
	ptr = line;
	while (*ptr && isspace(*ptr))
	    ++ptr;
	cmd = ptr;
	while (*ptr && !isspace(*ptr))
	    ++ptr;
	if (*ptr)
	    *ptr++ = '\0';

	if (*cmd) {	/* if *cmd is nul, then arg may be still set */
	    /* get argument(s) */
	    while (*ptr && isspace(*ptr))
		++ptr;
	    arg = ptr;
	    /* goto end of line */
	    if (*ptr) {
		while (*ptr)
		    ++ptr;
		--ptr;
		while (*ptr && isspace(*ptr))
		    --ptr;
		if (*ptr)
		    *++ptr = '\0';
	    }
	}

	if (*cmd == '\0') {
	    if (action < 0) {
		if (mac->debug == LispDebugFinish)
		    action = DebuggerFinish;
		else if (mac->debug == LispDebugNext)
		    action = DebuggerNext;
		else if (mac->debug == LispDebugStep)
		    action = DebuggerStep;
		else if (mac->debug == LispDebugNexti)
		    action = DebuggerNexti;
		else if (mac->debug == LispDebugStepi)
		    action = DebuggerStepi;
		else if (mac->debug == LispDebugRun)
		    action = DebuggerContinue;
		else
		    continue;
	    }
	}
	else {
	    for (i = matches = 0; i < sizeof(commands) / sizeof(commands[0]);
		 i++) {
		char *str = commands[i].name;

		ptr = cmd;
		while (*ptr && *ptr == *str) {
		    ++ptr;
		    ++str;
		}
		if (*ptr == '\0') {
		    action = commands[i].action;
		    if (*str == '\0') {
			matches = 1;
			break;
		    }
		    ++matches;
		}
	    }
	    if (matches == 0) {
		fprintf(lisp_stdout, "* Command unknown: %s. "
			"Type help for help.\n", cmd);
		continue;
	    }
	    else if (matches > 1) {
		fprintf(lisp_stdout, "* Command is ambiguous: %s. "
			"Type help for help.\n", cmd);
		continue;
	    }
	}

	switch (action) {
	    case DebuggerHelp:
		fprintf(lisp_stdout, debugger_help);
		break;
	    case DebuggerInfo:
		if (*arg == '\0') {
		    fprintf(lisp_stdout, debugger_info_help);
		    break;
		}

		for (i = matches = 0;
		     i < sizeof(info_commands) / sizeof(info_commands[0]);
		     i++) {
		    char *str = info_commands[i].name;

		    ptr = arg;
		    while (*ptr && *ptr == *str) {
			++ptr;
			++str;
		    }
		    if (*ptr == '\0') {
			subaction = info_commands[i].subaction;
			if (*str == '\0') {
			    matches = 1;
			    break;
			}
			++matches;
		    }
		}
		if (matches == 0) {
		    fprintf(lisp_stdout, "* Command unknown: %s. "
			    "Type info for help.\n", arg);
		    continue;
		}
		else if (matches > 1) {
		    fprintf(lisp_stdout, "* Command is ambiguous: %s. "
			    "Type info for help.\n", arg);
		    continue;
		}

		switch (subaction) {
		    case DebuggerInfoBreakpoints:
			fprintf(lisp_stdout, "Num\tHits\tType\t\tWhat\n");
			for (obj = BRK; obj != NIL; obj = CDR(obj)) {
			    /* breakpoint number */
			    fputc('#', lisp_stdout);
			    LispPrintObj(mac, NIL, CAR(CDR(CAR(obj))), 1);

			    /* number of hits */
			    fprintf(lisp_stdout, "\t");
			    LispPrintObj(mac, NIL,
					 CAR(CDR(CDR(CDR(CAR(obj))))), 1);

			    /* breakpoint type */
			    fprintf(lisp_stdout, "\t");
			    switch ((int)CAR(CDR(CDR(CAR(obj))))->data.real) {
				case LispDebugBreakFunction:
				    fprintf(lisp_stdout, "Function");
				    break;
				case LispDebugBreakVariable:
				    fprintf(lisp_stdout, "Variable");
				    break;
			    }

			    /* breakpoint object */
			    fprintf(lisp_stdout, "\t");
			    LispPrintObj(mac, NIL, CAR(CAR(obj)), 1);
			    fputc('\n', lisp_stdout);
			}
			break;
		    case DebuggerInfoBacktrace:
			goto debugger_print_backtrace;
		}
		break;
	    case DebuggerAbort:
		/* Almost the same code as LispDestroy */
		while (mac->mem.mem_level)
		    free(mac->mem.mem[--mac->mem.mem_level]);

		LispTopLevel(mac);
		if (mac->st) {
		    mac->cp = &(mac->st[strlen(mac->st)]);
		    mac->tok = 0;
		}
		mac->column = 0;
		mac->newline = 1;
		siglongjmp(mac->jmp, 1);/* don't need to restore environment */
		/*NOTREACHED*/
		break;
	    case DebuggerBreak:
		for (ptr = arg; *ptr; ptr++) {
		    if (isspace(*ptr))
			break;
		    else
			*ptr = toupper(*ptr);
		}

		if (!*arg || *ptr || strchr(arg, '(') || strchr(arg, '(') ||
		    strchr(arg, ';')) {
		    fprintf(lisp_stdout, "* Bad function name "
			    "'%s' specified.\n", arg);
		}
		else {
		    for (obj = frm = BRK; obj != NIL; frm = obj, obj = CDR(obj))
			;
		    i = mac->debug_break;
		    ++mac->debug_break;
		    GCProtect();
		    obj = CONS(ATOM2(arg),
			       CONS(REAL(i),
				    CONS(REAL(LispDebugBreakFunction),
					 CONS(REAL(0), NIL))));
		    if (BRK == NIL)
			BRK = CONS(obj, NIL);
		    else
			CDR(frm) = CONS(obj, NIL);
		    GCUProtect();
		}
		break;
	    case DebuggerWatch: {
		int vframe;
		LispObj *sym, *val, *atom;

		/* make variable name uppercase, an ATOM */
		ptr = arg;
		while (*ptr) {
		    *ptr = toupper(*ptr);
		    ++ptr;
		}
		atom = ATOM2(arg);
		val = LispGetVar(mac, atom);
		if (val == NULL) {
		    fprintf(lisp_stdout, "* No variable named '%s' "
			    "in the selected frame.\n", arg);
		    break;
		}

		/* variable is available at the current frame */
		sym = LispGetVarCons(mac, atom);

		/* find the lowest frame where the variable is visible */
		vframe = 0;
		if (frame) {
		    for (; vframe < frame; vframe++) {
			for (frm = DBG, i = mac->debug_level; i > vframe;
			     frm = CDR(frm), i--)
			    ;
			obj = CAR(frm);
			if (FRM == old_frm) {
			    /* if first time selecting a new frame */
			    GCProtect();
			    FRM = CONS(ENV, old_frm);
			    GCUProtect();
			}
			ENV = CAR(CDR(CDR(obj)));
			LEX = CDR(CDR(CDR(obj)));

			if (LispGetVarCons(mac, atom) == sym)
			    /* got variable initial frame */
			    break;
		    }
		    vframe = i;
		    if (vframe != frame) {
			/* restore environment */
			for (frm = DBG, i = mac->debug_level; i > frame;
			     frm = CDR(frm), i--)
			    ;
			obj = CAR(frm);
			ENV = CAR(CDR(CDR(obj)));
			LEX = CDR(CDR(CDR(obj)));
		    }
		}

		i = mac->debug_break;
		++mac->debug_break;
		for (obj = frm = BRK; obj != NIL; frm = obj, obj = CDR(obj))
		    ;

		GCProtect();
		obj = CONS(atom,				      /* NAM */
			   CONS(REAL(i),			      /* IDX */
				CONS(REAL(LispDebugBreakVariable),    /* TYP */
				     CONS(REAL(0),		      /* HIT */
					  CONS(sym,		      /* VAR */
					       CONS(val,	      /* VAL */
						    CONS(REAL(vframe),/* FRM */
							      NIL)))))));

		/* add watchpoint */
		if (BRK == NIL)
		    BRK = CONS(obj, NIL);
		else
		    CDR(frm) = CONS(obj, NIL);
		GCUProtect();
	    }	break;
	    case DebuggerDelete:
		if (*arg == 0) {
		    int confirm = 0;

		    for (;;) {
			int ch;

			fprintf(lisp_stdout, "* Delete all breakpoints? "
				"(y or n) ");
			fflush(lisp_stdout);
			if ((ch = fgetc(lisp_stdin)) == '\n')
			    continue;
			while ((i = fgetc(lisp_stdin)) != '\n' && i != EOF)
			    ;
			if (tolower(ch) == 'n')
			    break;
			else if (tolower(ch) == 'y') {
			    confirm = 1;
			    break;
			}
		    }
		    if (confirm)
			BRK = NIL;
		}
		else {
		    for (ptr = arg; *ptr;) {
			while (*ptr && isdigit(*ptr))
			    ++ptr;
			if (*ptr && !isspace(*ptr)) {
			    *ptr = '\0';
			    fprintf(lisp_stdout, "* Bad breakpoint number "
				    "'%s' specified.\n", arg);
			    break;
			}
			i = atoi(arg);
			for (obj = frm = BRK; frm != NIL;
			     obj = frm, frm = CDR(frm))
			    if (CAR(CDR(CAR(frm)))->data.real == i)
				break;
			if (frm == NIL) {
			    fprintf(lisp_stdout, "* No breakpoint number "
				    "%d available.\n", i);
			    break;
			}
			if (obj == frm)
			    BRK = CDR(BRK);
			else
			    CDR(obj) = CDR(frm);
			while (*ptr && isspace(*ptr))
			    ++ptr;
			arg = ptr;
		    }
		}
		break;
	    case DebuggerFrame:
		i = -1;
		ptr = arg;
		if (*ptr) {
		    i = 0;
		    while (*ptr && isdigit(*ptr)) {
			i *= 10;
			i += *ptr - '0';
			++ptr;
		    }
		    if (*ptr) {
			fprintf(lisp_stdout, "* Frame identifier must "
				"be a positive number.\n");
			break;
		    }
		}
		else
		    goto debugger_print_frame;
		if (i >= 0 && i <= mac->debug_level)
		    goto debugger_new_frame;
		fprintf(lisp_stdout, "* No such frame %d.\n", i);
		break;
	    case DebuggerDown:
		if (frame + 1 > mac->debug_level) {
		    fprintf(lisp_stdout, "* Cannot go down.\n");
		    break;
		}
		i = frame + 1;
		goto debugger_new_frame;
		break;
	    case DebuggerUp:
		if (frame == 0) {
		    fprintf(lisp_stdout, "* Cannot go up.\n");
		    break;
		}
		i = frame - 1;
		goto debugger_new_frame;
		break;
	    case DebuggerPrint:
		ptr = arg;
		while (*ptr) {
		    *ptr = toupper(*ptr);
		    ++ptr;
		}
		obj = LispGetVar(mac, ATOM2(arg));
		if (obj) {
		    LispPrintObj(mac, NIL, obj, 1);
		    fputc('\n', lisp_stdout);
		}
		else
		    fprintf(lisp_stdout, "* No variable named '%s' "
			    "in the selected frame.\n", arg);
		break;
	    case DebuggerBacktrace:
debugger_print_backtrace:
		if (DBG == NIL) {
		    fprintf(lisp_stdout, "* No stack.\n");
		    break;
		}
		DBG = LispReverse(DBG);
		for (obj = DBG, i = 0; obj != NIL; obj = CDR(obj), i++) {
		    frm = CAR(obj);
		    fprintf(lisp_stdout, "#%d> (", i);
		    LispPrintObj(mac, NIL, CAR(frm), 1);
		    fputc(' ', lisp_stdout);
		    LispPrintObj(mac, NIL, CAR(CDR(frm)), 0);
		    fprintf(lisp_stdout, ")\n");
		}
		DBG = LispReverse(DBG);
		if (mac->debug == LispDebugNexti ||
		    mac->debug == LispDebugStepi) {
		    fprintf(lisp_stdout, "#%d+> ", i);
		    LispPrintObj(mac, NIL, args, 1);
		    fputc('\n', lisp_stdout);
		}
		break;
	    case DebuggerContinue:
		mac->debug = LispDebugRun;
		goto debugger_command_done;
	    case DebuggerFinish:
		if (mac->debug != LispDebugFinish) {
		    mac->debug_step = mac->debug_level - 2;
		    mac->debug = LispDebugFinish;
		}
		else
		    mac->debug_step = mac->debug_level - 1;
		goto debugger_command_done;
	    case DebuggerNext:
		if (mac->debug != LispDebugNext &&
		    mac->debug != LispDebugNexti) {
		    mac->debug = LispDebugNext;
		    mac->debug_step = mac->debug_level + 1;
		}
		goto debugger_command_done;
	    case DebuggerNexti:
		if (mac->debug != LispDebugNext &&
		    mac->debug != LispDebugNexti) {
		    mac->debug = LispDebugNexti;
		    mac->debug_step = mac->debug_level + 1;
		}
		goto debugger_command_done;
	    case DebuggerStep:
		mac->debug = LispDebugStep;
		goto debugger_command_done;
	    case DebuggerStepi:
		mac->debug = LispDebugStepi;
		goto debugger_command_done;
	}
	continue;

debugger_new_frame:
	/* goto here with i as the new frame value, after error checking */
	if (i != frame) {
	    frame = i;
	    for (frm = DBG, i = mac->debug_level; i > frame; frm = CDR(frm), i--)
		;
	    curframe = CAR(frm);

	    if (FRM == old_frm) {
		/* if first time selecting a new frame */
		GCProtect();
		FRM = CONS(ENV, old_frm);
		GCUProtect();
	    }
	    ENV = CAR(CDR(CDR(curframe)));
	    LEX = CDR(CDR(CDR(curframe)));
	}
debugger_print_frame:
	fprintf(lisp_stdout, "#%d> (", frame);
	LispPrintObj(mac, NIL, CAR(curframe), 1);
	fputc(' ', lisp_stdout);
	LispPrintObj(mac, NIL, CAR(CDR(curframe)), 0);
	fprintf(lisp_stdout, ")\n");


    }

debugger_command_done:
    FRM = old_frm;
    ENV = old_env;
    LEX = old_lex;
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/debugger.c,v 1.25 2003/04/27 18:17:32 tsi Exp $ */
d33 1
a33 3
#include "lisp/io.h"
#include "lisp/debugger.h"
#include "lisp/write.h"
a34 1
#ifdef DEBUGGER
d42 10
a51 8
#define DebuggerPrint		7
#define DebuggerStep		8
#define DebuggerBreak		9
#define DebuggerDelete		10
#define DebuggerDown		11
#define DebuggerUp		12
#define DebuggerInfo		13
#define DebuggerWatch		14
d59 1
a59 2
static char *format_integer(int);
static void LispDebuggerCommand(LispObj *obj);
d83 2
d89 2
d118 1
d122 1
d139 1
a139 1
 *	is a macro for lisp__data.dbglist
d142 1
a142 1
 *	(list* NAM ARG ENV HED LEX)
d147 3
a149 4
 *		ENV is the value of lisp__data.stack.base (a FIXNUM)
 *		LEN is the value of lisp__data.env.length (a FIXNUM)
 *		LEX is the value of lisp__data.env.lex (a FIXNUM)
 *	new elements are added to the beggining of the DBG list
d152 1
a152 1
 *	is macro for lisp__data.brklist
d159 1
a159 1
 *		IDX is a FIXNUM, the breakpoint number
d161 2
a162 2
 *		TYP is a FIXNUM that must be an integer of enum LispBreakType
 *		HIT is a FIXNUM, with the number of times this breakpoint was
d175 1
a175 1
LispDebugger(LispDebugCall call, LispObj *name, LispObj *arg)
d182 4
a185 6
	    ++lisp__data.debug_level;
	    GCDisable();
	    DBG = CONS(CONS(name, CONS(arg, CONS(FIXNUM(lisp__data.stack.base),
		       CONS(FIXNUM(lisp__data.env.length),
			    FIXNUM(lisp__data.env.lex))))), DBG);
	    GCEnable();
d187 2
a188 3
		if (ATOMID(CAR(CAR(obj))) == ATOMID(name) &&
		    FIXNUM_VALUE(CAR(CDR(CDR(CAR(obj))))) ==
		    LispDebugBreakFunction)
d191 9
a199 12
		long counter;

		/* if not at a fresh line */
		if (LispGetColumn(NIL))
		    LispFputc(Stdout, '\n');
		LispFputs(Stdout, "BREAK #");
		LispWriteObject(NIL, CAR(CDR(CAR(obj))));
		LispFputs(Stdout, "> (");
		LispWriteObject(NIL, CAR(CAR(DBG)));
		LispFputc(Stdout, ' ');
		LispWriteObject(NIL, CAR(CDR(CAR(DBG))));
		LispFputs(Stdout, ")\n");
d202 1
a202 2
		counter = FIXNUM_VALUE(CAR(CDR(CDR(CDR(CAR(obj))))));
		CAR(CDR(CDR(CDR(CAR(obj))))) FIXNUM(counter + 1);
d207 3
a209 3
	    if (lisp__data.debug_level < lisp__data.debug_step)
		lisp__data.debug_step = lisp__data.debug_level;
	    --lisp__data.debug_level;
d212 1
a212 1
	    LispDebuggerCommand(NIL);
d214 5
d227 1
a227 2
	    if (FIXNUM_VALUE(CAR(CDR(CDR(CAR(obj))))) ==
		LispDebugBreakVariable) {
d230 1
a230 1
		void *sym = LispGetVarAddr(CAAR(obj));
d233 6
a238 8
		if ((sym == NULL && lisp__data.debug_level <= 0) ||
		    (sym != wat->data.opaque.data &&
		     FIXNUM_VALUE(frm) > lisp__data.debug_level)) {
		    LispFputs(Stdout, "WATCH #");
		    LispFputs(Stdout, format_integer(FIXNUM_VALUE(CAR(CDR(CAR(obj))))));
		    LispFputs(Stdout, "> ");
		    LispFputs(Stdout, STRPTR(CAR(CAR(obj))));
		    LispFputs(Stdout, " deleted. Variable does not exist anymore.\n");
d246 1
a246 1
			RPLACD(prev, CDR(obj));
d251 1
a251 1
		    LispObj *cur = *(LispObj**)wat->data.opaque.data;
d254 9
a262 15
		    if (XEQUAL(val, cur) == NIL) {
			long counter;

			LispFputs(Stdout, "WATCH #");
			LispFputs(Stdout, format_integer(FIXNUM_VALUE(CAR(CDR(CAR(obj))))));
			LispFputs(Stdout, "> ");
			LispFputs(Stdout, STRPTR(CAR(CAR(obj))));
			LispFputc(Stdout, '\n');

			LispFputs(Stdout, "OLD: ");
			LispWriteObject(NIL, val);

			LispFputs(Stdout, "\nNEW: ");
			LispWriteObject(NIL, cur);
			LispFputc(Stdout, '\n');
d267 1
a267 2
			counter = FIXNUM_VALUE(CAR(CDR(CDR(CDR(CAR(obj))))));
			CAR(CDR(CDR(CDR(CAR(obj))))) = FIXNUM(counter + 1);
d281 1
a281 1
    switch (lisp__data.debug) {
d283 1
a283 1
	    LispDebuggerCommand(NIL);
d287 1
a287 1
		LispDebuggerCommand(NIL);
d291 1
a291 2
		(call != LispDebugCallEnd ||
		 lisp__data.debug_level != lisp__data.debug_step))
d296 1
a296 1
		if (!force && lisp__data.debug_level != lisp__data.debug_step)
d300 1
a300 1
		if (!force && lisp__data.debug_level >= lisp__data.debug_step)
d306 12
d321 10
a330 8
	LispFputc(Stdout, '#');
	LispFputs(Stdout, format_integer(lisp__data.debug_level));
	LispFputs(Stdout, "> (");
	LispWriteObject(NIL, CAR(CAR(DBG)));
	LispFputc(Stdout, ' ');
	LispWriteObject(NIL, CAR(CDR(CAR(DBG))));
	LispFputs(Stdout, ")\n");
	LispDebuggerCommand(NIL);
d333 26
a358 6
	LispFputc(Stdout, '#');
	LispFputs(Stdout, format_integer(lisp__data.debug_level + 1));
	LispFputs(Stdout, "= ");
	LispWriteObject(NIL, arg);
	LispFputc(Stdout, '\n');
	LispDebuggerCommand(NIL);
d361 1
a361 1
	LispDebuggerCommand(arg);
d368 1
a368 1
LispDebuggerCommand(LispObj *args)
d370 2
a371 1
    LispObj *obj, *frm, *curframe;
d375 1
a375 5
    int envbase = lisp__data.stack.base,
	envlen = lisp__data.env.length,
	envlex = lisp__data.env.lex;

    frame = lisp__data.debug_level;
d381 4
a384 4
	LispFputs(Stdout, DBGPROMPT);
	LispFflush(Stdout);
	if (LispFgets(Stdin, line, sizeof(line)) == NULL) {
	    LispFputc(Stdout, '\n');
d416 1
a416 1
		if (lisp__data.debug == LispDebugFinish)
d418 1
a418 1
		else if (lisp__data.debug == LispDebugNext)
d420 1
a420 1
		else if (lisp__data.debug == LispDebugStep)
d422 5
a426 1
		else if (lisp__data.debug == LispDebugRun)
d452 2
a453 3
		LispFputs(Stdout, "* Command unknown: ");
		LispFputs(Stdout, cmd);
		LispFputs(Stdout, ". Type help for help.\n");
d457 2
a458 3
		LispFputs(Stdout, "* Command is ambiguous: ");
		LispFputs(Stdout, cmd);
		LispFputs(Stdout, ". Type help for help.\n");
d465 1
a465 1
		LispFputs(Stdout, debugger_help);
d469 1
a469 1
		    LispFputs(Stdout, debugger_info_help);
d493 2
a494 3
		    LispFputs(Stdout, "* Command unknown: ");
		    LispFputs(Stdout, arg);
		    LispFputs(Stdout, ". Type info for help.\n");
d498 2
a499 3
		    LispFputs(Stdout, "* Command is ambiguous: ");
		    LispFputs(Stdout, arg);
		    LispFputs(Stdout, ". Type info for help.\n");
d505 1
a505 1
			LispFputs(Stdout, "Num\tHits\tType\t\tWhat\n");
d508 2
a509 2
			    LispFputc(Stdout, '#');
			    LispWriteObject(NIL, CAR(CDR(CAR(obj))));
d512 3
a514 2
			    LispFputc(Stdout, '\t');
			    LispWriteObject(NIL, CAR(CDR(CDR(CDR(CAR(obj))))));
d517 2
a518 2
			    LispFputc(Stdout, '\t');
			    switch ((int)FIXNUM_VALUE(CAR(CDR(CDR(CAR(obj)))))) {
d520 1
a520 1
				    LispFputs(Stdout, "Function");
d523 1
a523 1
				    LispFputs(Stdout, "Variable");
d528 3
a530 3
			    LispFputc(Stdout, '\t');
			    LispWriteObject(NIL, CAR(CAR(obj)));
			    LispFputc(Stdout, '\n');
d538 12
a549 13
		while (lisp__data.mem.level) {
		    --lisp__data.mem.level;
		    if (lisp__data.mem.mem[lisp__data.mem.level])
			free(lisp__data.mem.mem[lisp__data.mem.level]);
		}
		lisp__data.mem.index = 0;
		LispTopLevel();
		if (!lisp__data.running) {
		    LispMessage("*** Fatal: nowhere to longjmp.");
		    abort();
		}
		/* don't need to restore environment */
		siglongjmp(lisp__data.jmp, 1);
d562 2
a563 3
		    LispFputs(Stdout, "* Bad function name '");
		    LispFputs(Stdout, arg);
		    LispFputs(Stdout, "' specified.\n");
d568 7
a574 7
		    i = lisp__data.debug_break;
		    ++lisp__data.debug_break;
		    GCDisable();
		    obj = CONS(ATOM(arg),
			       CONS(FIXNUM(i),
				    CONS(FIXNUM(LispDebugBreakFunction),
					 CONS(FIXNUM(0), NIL))));
d578 2
a579 2
			RPLACD(frm, CONS(obj, NIL));
		    GCEnable();
a582 1
		void *sym;
d584 1
a584 1
		LispObj *val, *atom;
d592 2
a593 2
		atom = ATOM(arg);
		val = LispGetVar(atom);
d595 2
a596 3
		    LispFputs(Stdout, "* No variable named '");
		    LispFputs(Stdout, arg);
		    LispFputs(Stdout, "' in the selected frame.\n");
d601 1
a601 1
		sym = LispGetVarAddr(atom);
d605 1
a605 1
		if (frame > 0) {
d607 1
a607 1
			for (frm = DBG, i = lisp__data.debug_level; i > vframe;
d611 8
a618 3
			lisp__data.stack.base = FIXNUM_VALUE(CAR(CDR(CDR(obj))));
			lisp__data.env.length = FIXNUM_VALUE(CAR(CDR(CDR(CDR(obj)))));
			lisp__data.env.lex = FIXNUM_VALUE(CDR(CDR(CDR(CDR(obj)))));
d620 1
a620 1
			if (LispGetVarAddr(atom) == sym)
d627 1
a627 1
			for (frm = DBG, i = lisp__data.debug_level; i > frame;
d631 2
a632 3
			lisp__data.stack.base = FIXNUM_VALUE(CAR(CDR(CDR(obj))));
			lisp__data.env.length = FIXNUM_VALUE(CAR(CDR(CDR(CDR(obj)))));
			lisp__data.env.lex = FIXNUM_VALUE(CDR(CDR(CDR(CDR(obj)))));
d636 2
a637 2
		i = lisp__data.debug_break;
		++lisp__data.debug_break;
d641 8
a648 8
		GCDisable();
		obj = CONS(atom,					/* NAM */
			   CONS(FIXNUM(i),				/* IDX */
				CONS(FIXNUM(LispDebugBreakVariable),	/* TYP */
				     CONS(FIXNUM(0),			/* HIT */
					  CONS(OPAQUE(sym, 0),		/* VAR */
					       CONS(val,		/* VAL */
						    CONS(FIXNUM(vframe),/* FRM */
d655 2
a656 2
		    RPLACD(frm, CONS(obj, NIL));
		GCEnable();
d665 4
a668 3
			LispFputs(Stdout, "* Delete all breakpoints? (y or n) ");
			LispFflush(Stdout);
			if ((ch = LispFgetc(Stdin)) == '\n')
d670 1
a670 1
			while ((i = LispFgetc(Stdin)) != '\n' && i != EOF)
d688 2
a689 3
			    LispFputs(Stdout, "* Bad breakpoint number '");
			    LispFputs(Stdout, arg);
			    LispFputs(Stdout, "' specified.\n");
d695 1
a695 1
			    if (FIXNUM_VALUE(CAR(CDR(CAR(frm)))) == i)
d698 2
a699 3
			    LispFputs(Stdout, "* No breakpoint number ");
			    LispFputs(Stdout, arg);
			    LispFputs(Stdout, " available.\n");
d705 1
a705 1
			    RPLACD(obj, CDR(frm));
d723 1
a723 1
			LispFputs(Stdout, "* Frame identifier must "
d730 1
a730 1
		if (i >= 0 && i <= lisp__data.debug_level)
d732 1
a732 3
		LispFputs(Stdout, "* No such frame ");
		LispFputs(Stdout, format_integer(i));
		LispFputs(Stdout, ".\n");
d735 2
a736 2
		if (frame + 1 > lisp__data.debug_level) {
		    LispFputs(Stdout, "* Cannot go down.\n");
d744 1
a744 1
		    LispFputs(Stdout, "* Cannot go up.\n");
d756 4
a759 9
		obj = LispGetVar(ATOM(arg));
		if (obj != NULL) {
		    LispWriteObject(NIL, obj);
		    LispFputc(Stdout, '\n');
		}
		else {
		    LispFputs(Stdout, "* No variable named '");
		    LispFputs(Stdout, arg);
		    LispFputs(Stdout, "' in the selected frame.\n");
d761 3
d768 1
a768 1
		    LispFputs(Stdout, "* No stack.\n");
d774 5
a778 7
		    LispFputc(Stdout, '#');
		    LispFputs(Stdout, format_integer(i));
		    LispFputs(Stdout, "> (");
		    LispWriteObject(NIL, CAR(frm));
		    LispFputc(Stdout, ' ');
		    LispWriteObject(NIL, CAR(CDR(frm)));
		    LispFputs(Stdout, ")\n");
d781 6
d789 1
a789 1
		lisp__data.debug = LispDebugRun;
d792 3
a794 3
		if (lisp__data.debug != LispDebugFinish) {
		    lisp__data.debug_step = lisp__data.debug_level - 2;
		    lisp__data.debug = LispDebugFinish;
d797 1
a797 1
		    lisp__data.debug_step = lisp__data.debug_level - 1;
d800 11
a810 3
		if (lisp__data.debug != LispDebugNext) {
		    lisp__data.debug = LispDebugNext;
		    lisp__data.debug_step = lisp__data.debug_level + 1;
d814 4
a817 1
		lisp__data.debug = LispDebugStep;
d826 1
a826 2
	    for (frm = DBG, i = lisp__data.debug_level;
		 i > frame; frm = CDR(frm), i--)
d829 9
a837 3
	    lisp__data.stack.base = FIXNUM_VALUE(CAR(CDR(CDR(curframe))));
	    lisp__data.env.length = FIXNUM_VALUE(CAR(CDR(CDR(CDR(curframe)))));
	    lisp__data.env.lex = FIXNUM_VALUE(CDR(CDR(CDR(CDR(curframe)))));
d840 7
a846 7
	LispFputc(Stdout, '#');
	LispFputs(Stdout, format_integer(frame));
	LispFputs(Stdout, "> (");
	LispWriteObject(NIL, CAR(curframe));
	LispFputc(Stdout, ' ');
	LispWriteObject(NIL, CAR(CDR(curframe)));
	LispFputs(Stdout, ")\n");
d850 3
a852 3
    lisp__data.stack.base = envbase;
    lisp__data.env.length = envlen;
    lisp__data.env.lex = envlex;
a853 12

static char *
format_integer(int integer)
{
    static char buffer[16];

    sprintf(buffer, "%d", integer);

    return (buffer);
}

#endif /* DEBUGGER */
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/debugger.c,v 1.24 2002/11/12 06:05:07 paulo Exp $ */
a32 1
#include "io.h"
a33 1
#include "write.h"
a34 1
#ifdef DEBUGGER
d42 10
a51 8
#define DebuggerPrint		7
#define DebuggerStep		8
#define DebuggerBreak		9
#define DebuggerDelete		10
#define DebuggerDown		11
#define DebuggerUp		12
#define DebuggerInfo		13
#define DebuggerWatch		14
d59 1
a59 2
static char *format_integer(int);
static void LispDebuggerCommand(LispObj *obj);
d83 2
d89 2
d118 1
d122 1
d139 1
a139 1
 *	is a macro for lisp__data.dbglist
d142 1
a142 1
 *	(list* NAM ARG ENV HED LEX)
d147 3
a149 4
 *		ENV is the value of lisp__data.stack.base (a FIXNUM)
 *		LEN is the value of lisp__data.env.length (a FIXNUM)
 *		LEX is the value of lisp__data.env.lex (a FIXNUM)
 *	new elements are added to the beggining of the DBG list
d152 1
a152 1
 *	is macro for lisp__data.brklist
d159 1
a159 1
 *		IDX is a FIXNUM, the breakpoint number
d161 2
a162 2
 *		TYP is a FIXNUM that must be an integer of enum LispBreakType
 *		HIT is a FIXNUM, with the number of times this breakpoint was
d175 1
a175 1
LispDebugger(LispDebugCall call, LispObj *name, LispObj *arg)
d182 4
a185 6
	    ++lisp__data.debug_level;
	    GCDisable();
	    DBG = CONS(CONS(name, CONS(arg, CONS(FIXNUM(lisp__data.stack.base),
		       CONS(FIXNUM(lisp__data.env.length),
			    FIXNUM(lisp__data.env.lex))))), DBG);
	    GCEnable();
d187 2
a188 3
		if (ATOMID(CAR(CAR(obj))) == ATOMID(name) &&
		    FIXNUM_VALUE(CAR(CDR(CDR(CAR(obj))))) ==
		    LispDebugBreakFunction)
d191 9
a199 12
		long counter;

		/* if not at a fresh line */
		if (LispGetColumn(NIL))
		    LispFputc(Stdout, '\n');
		LispFputs(Stdout, "BREAK #");
		LispWriteObject(NIL, CAR(CDR(CAR(obj))));
		LispFputs(Stdout, "> (");
		LispWriteObject(NIL, CAR(CAR(DBG)));
		LispFputc(Stdout, ' ');
		LispWriteObject(NIL, CAR(CDR(CAR(DBG))));
		LispFputs(Stdout, ")\n");
d202 1
a202 2
		counter = FIXNUM_VALUE(CAR(CDR(CDR(CDR(CAR(obj))))));
		CAR(CDR(CDR(CDR(CAR(obj))))) FIXNUM(counter + 1);
d207 3
a209 3
	    if (lisp__data.debug_level < lisp__data.debug_step)
		lisp__data.debug_step = lisp__data.debug_level;
	    --lisp__data.debug_level;
d212 1
a212 1
	    LispDebuggerCommand(NIL);
d214 5
d227 1
a227 2
	    if (FIXNUM_VALUE(CAR(CDR(CDR(CAR(obj))))) ==
		LispDebugBreakVariable) {
d230 1
a230 1
		void *sym = LispGetVarAddr(CAAR(obj));
d233 6
a238 8
		if ((sym == NULL && lisp__data.debug_level <= 0) ||
		    (sym != wat->data.opaque.data &&
		     FIXNUM_VALUE(frm) > lisp__data.debug_level)) {
		    LispFputs(Stdout, "WATCH #");
		    LispFputs(Stdout, format_integer(FIXNUM_VALUE(CAR(CDR(CAR(obj))))));
		    LispFputs(Stdout, "> ");
		    LispFputs(Stdout, STRPTR(CAR(CAR(obj))));
		    LispFputs(Stdout, " deleted. Variable does not exist anymore.\n");
d246 1
a246 1
			RPLACD(prev, CDR(obj));
d251 1
a251 1
		    LispObj *cur = *(LispObj**)wat->data.opaque.data;
d254 9
a262 15
		    if (XEQUAL(val, cur) == NIL) {
			long counter;

			LispFputs(Stdout, "WATCH #");
			LispFputs(Stdout, format_integer(FIXNUM_VALUE(CAR(CDR(CAR(obj))))));
			LispFputs(Stdout, "> ");
			LispFputs(Stdout, STRPTR(CAR(CAR(obj))));
			LispFputc(Stdout, '\n');

			LispFputs(Stdout, "OLD: ");
			LispWriteObject(NIL, val);

			LispFputs(Stdout, "\nNEW: ");
			LispWriteObject(NIL, cur);
			LispFputc(Stdout, '\n');
d267 1
a267 2
			counter = FIXNUM_VALUE(CAR(CDR(CDR(CDR(CAR(obj))))));
			CAR(CDR(CDR(CDR(CAR(obj))))) = FIXNUM(counter + 1);
d281 1
a281 1
    switch (lisp__data.debug) {
d283 1
a283 1
	    LispDebuggerCommand(NIL);
d287 1
a287 1
		LispDebuggerCommand(NIL);
d291 1
a291 2
		(call != LispDebugCallEnd ||
		 lisp__data.debug_level != lisp__data.debug_step))
d296 1
a296 1
		if (!force && lisp__data.debug_level != lisp__data.debug_step)
d300 1
a300 1
		if (!force && lisp__data.debug_level >= lisp__data.debug_step)
d306 12
d321 10
a330 8
	LispFputc(Stdout, '#');
	LispFputs(Stdout, format_integer(lisp__data.debug_level));
	LispFputs(Stdout, "> (");
	LispWriteObject(NIL, CAR(CAR(DBG)));
	LispFputc(Stdout, ' ');
	LispWriteObject(NIL, CAR(CDR(CAR(DBG))));
	LispFputs(Stdout, ")\n");
	LispDebuggerCommand(NIL);
d333 26
a358 6
	LispFputc(Stdout, '#');
	LispFputs(Stdout, format_integer(lisp__data.debug_level + 1));
	LispFputs(Stdout, "= ");
	LispWriteObject(NIL, arg);
	LispFputc(Stdout, '\n');
	LispDebuggerCommand(NIL);
d361 1
a361 1
	LispDebuggerCommand(arg);
d368 1
a368 1
LispDebuggerCommand(LispObj *args)
d370 2
a371 1
    LispObj *obj, *frm, *curframe;
d375 1
a375 5
    int envbase = lisp__data.stack.base,
	envlen = lisp__data.env.length,
	envlex = lisp__data.env.lex;

    frame = lisp__data.debug_level;
d381 4
a384 4
	LispFputs(Stdout, DBGPROMPT);
	LispFflush(Stdout);
	if (LispFgets(Stdin, line, sizeof(line)) == NULL) {
	    LispFputc(Stdout, '\n');
d416 1
a416 1
		if (lisp__data.debug == LispDebugFinish)
d418 1
a418 1
		else if (lisp__data.debug == LispDebugNext)
d420 1
a420 1
		else if (lisp__data.debug == LispDebugStep)
d422 5
a426 1
		else if (lisp__data.debug == LispDebugRun)
d452 2
a453 3
		LispFputs(Stdout, "* Command unknown: ");
		LispFputs(Stdout, cmd);
		LispFputs(Stdout, ". Type help for help.\n");
d457 2
a458 3
		LispFputs(Stdout, "* Command is ambiguous: ");
		LispFputs(Stdout, cmd);
		LispFputs(Stdout, ". Type help for help.\n");
d465 1
a465 1
		LispFputs(Stdout, debugger_help);
d469 1
a469 1
		    LispFputs(Stdout, debugger_info_help);
d493 2
a494 3
		    LispFputs(Stdout, "* Command unknown: ");
		    LispFputs(Stdout, arg);
		    LispFputs(Stdout, ". Type info for help.\n");
d498 2
a499 3
		    LispFputs(Stdout, "* Command is ambiguous: ");
		    LispFputs(Stdout, arg);
		    LispFputs(Stdout, ". Type info for help.\n");
d505 1
a505 1
			LispFputs(Stdout, "Num\tHits\tType\t\tWhat\n");
d508 2
a509 2
			    LispFputc(Stdout, '#');
			    LispWriteObject(NIL, CAR(CDR(CAR(obj))));
d512 3
a514 2
			    LispFputc(Stdout, '\t');
			    LispWriteObject(NIL, CAR(CDR(CDR(CDR(CAR(obj))))));
d517 2
a518 2
			    LispFputc(Stdout, '\t');
			    switch ((int)FIXNUM_VALUE(CAR(CDR(CDR(CAR(obj)))))) {
d520 1
a520 1
				    LispFputs(Stdout, "Function");
d523 1
a523 1
				    LispFputs(Stdout, "Variable");
d528 3
a530 3
			    LispFputc(Stdout, '\t');
			    LispWriteObject(NIL, CAR(CAR(obj)));
			    LispFputc(Stdout, '\n');
d538 12
a549 13
		while (lisp__data.mem.level) {
		    --lisp__data.mem.level;
		    if (lisp__data.mem.mem[lisp__data.mem.level])
			free(lisp__data.mem.mem[lisp__data.mem.level]);
		}
		lisp__data.mem.index = 0;
		LispTopLevel();
		if (!lisp__data.running) {
		    LispMessage("*** Fatal: nowhere to longjmp.");
		    abort();
		}
		/* don't need to restore environment */
		siglongjmp(lisp__data.jmp, 1);
d562 2
a563 3
		    LispFputs(Stdout, "* Bad function name '");
		    LispFputs(Stdout, arg);
		    LispFputs(Stdout, "' specified.\n");
d568 7
a574 7
		    i = lisp__data.debug_break;
		    ++lisp__data.debug_break;
		    GCDisable();
		    obj = CONS(ATOM(arg),
			       CONS(FIXNUM(i),
				    CONS(FIXNUM(LispDebugBreakFunction),
					 CONS(FIXNUM(0), NIL))));
d578 2
a579 2
			RPLACD(frm, CONS(obj, NIL));
		    GCEnable();
a582 1
		void *sym;
d584 1
a584 1
		LispObj *val, *atom;
d592 2
a593 2
		atom = ATOM(arg);
		val = LispGetVar(atom);
d595 2
a596 3
		    LispFputs(Stdout, "* No variable named '");
		    LispFputs(Stdout, arg);
		    LispFputs(Stdout, "' in the selected frame.\n");
d601 1
a601 1
		sym = LispGetVarAddr(atom);
d605 1
a605 1
		if (frame > 0) {
d607 1
a607 1
			for (frm = DBG, i = lisp__data.debug_level; i > vframe;
d611 8
a618 3
			lisp__data.stack.base = FIXNUM_VALUE(CAR(CDR(CDR(obj))));
			lisp__data.env.length = FIXNUM_VALUE(CAR(CDR(CDR(CDR(obj)))));
			lisp__data.env.lex = FIXNUM_VALUE(CDR(CDR(CDR(CDR(obj)))));
d620 1
a620 1
			if (LispGetVarAddr(atom) == sym)
d627 1
a627 1
			for (frm = DBG, i = lisp__data.debug_level; i > frame;
d631 2
a632 3
			lisp__data.stack.base = FIXNUM_VALUE(CAR(CDR(CDR(obj))));
			lisp__data.env.length = FIXNUM_VALUE(CAR(CDR(CDR(CDR(obj)))));
			lisp__data.env.lex = FIXNUM_VALUE(CDR(CDR(CDR(CDR(obj)))));
d636 2
a637 2
		i = lisp__data.debug_break;
		++lisp__data.debug_break;
d641 8
a648 8
		GCDisable();
		obj = CONS(atom,					/* NAM */
			   CONS(FIXNUM(i),				/* IDX */
				CONS(FIXNUM(LispDebugBreakVariable),	/* TYP */
				     CONS(FIXNUM(0),			/* HIT */
					  CONS(OPAQUE(sym, 0),		/* VAR */
					       CONS(val,		/* VAL */
						    CONS(FIXNUM(vframe),/* FRM */
d655 2
a656 2
		    RPLACD(frm, CONS(obj, NIL));
		GCEnable();
d665 4
a668 3
			LispFputs(Stdout, "* Delete all breakpoints? (y or n) ");
			LispFflush(Stdout);
			if ((ch = LispFgetc(Stdin)) == '\n')
d670 1
a670 1
			while ((i = LispFgetc(Stdin)) != '\n' && i != EOF)
d688 2
a689 3
			    LispFputs(Stdout, "* Bad breakpoint number '");
			    LispFputs(Stdout, arg);
			    LispFputs(Stdout, "' specified.\n");
d695 1
a695 1
			    if (FIXNUM_VALUE(CAR(CDR(CAR(frm)))) == i)
d698 2
a699 3
			    LispFputs(Stdout, "* No breakpoint number ");
			    LispFputs(Stdout, arg);
			    LispFputs(Stdout, " available.\n");
d705 1
a705 1
			    RPLACD(obj, CDR(frm));
d723 1
a723 1
			LispFputs(Stdout, "* Frame identifier must "
d730 1
a730 1
		if (i >= 0 && i <= lisp__data.debug_level)
d732 1
a732 3
		LispFputs(Stdout, "* No such frame ");
		LispFputs(Stdout, format_integer(i));
		LispFputs(Stdout, ".\n");
d735 2
a736 2
		if (frame + 1 > lisp__data.debug_level) {
		    LispFputs(Stdout, "* Cannot go down.\n");
d744 1
a744 1
		    LispFputs(Stdout, "* Cannot go up.\n");
d756 4
a759 9
		obj = LispGetVar(ATOM(arg));
		if (obj != NULL) {
		    LispWriteObject(NIL, obj);
		    LispFputc(Stdout, '\n');
		}
		else {
		    LispFputs(Stdout, "* No variable named '");
		    LispFputs(Stdout, arg);
		    LispFputs(Stdout, "' in the selected frame.\n");
d761 3
d768 1
a768 1
		    LispFputs(Stdout, "* No stack.\n");
d774 5
a778 7
		    LispFputc(Stdout, '#');
		    LispFputs(Stdout, format_integer(i));
		    LispFputs(Stdout, "> (");
		    LispWriteObject(NIL, CAR(frm));
		    LispFputc(Stdout, ' ');
		    LispWriteObject(NIL, CAR(CDR(frm)));
		    LispFputs(Stdout, ")\n");
d781 6
d789 1
a789 1
		lisp__data.debug = LispDebugRun;
d792 3
a794 3
		if (lisp__data.debug != LispDebugFinish) {
		    lisp__data.debug_step = lisp__data.debug_level - 2;
		    lisp__data.debug = LispDebugFinish;
d797 1
a797 1
		    lisp__data.debug_step = lisp__data.debug_level - 1;
d800 11
a810 3
		if (lisp__data.debug != LispDebugNext) {
		    lisp__data.debug = LispDebugNext;
		    lisp__data.debug_step = lisp__data.debug_level + 1;
d814 4
a817 1
		lisp__data.debug = LispDebugStep;
d826 1
a826 2
	    for (frm = DBG, i = lisp__data.debug_level;
		 i > frame; frm = CDR(frm), i--)
d829 9
a837 3
	    lisp__data.stack.base = FIXNUM_VALUE(CAR(CDR(CDR(curframe))));
	    lisp__data.env.length = FIXNUM_VALUE(CAR(CDR(CDR(CDR(curframe)))));
	    lisp__data.env.lex = FIXNUM_VALUE(CDR(CDR(CDR(CDR(curframe)))));
d840 7
a846 7
	LispFputc(Stdout, '#');
	LispFputs(Stdout, format_integer(frame));
	LispFputs(Stdout, "> (");
	LispWriteObject(NIL, CAR(curframe));
	LispFputc(Stdout, ' ');
	LispWriteObject(NIL, CAR(CDR(curframe)));
	LispFputs(Stdout, ")\n");
d850 3
a852 3
    lisp__data.stack.base = envbase;
    lisp__data.env.length = envlen;
    lisp__data.env.lex = envlex;
a853 12

static char *
format_integer(int integer)
{
    static char buffer[16];

    sprintf(buffer, "%d", integer);

    return (buffer);
}

#endif /* DEBUGGER */
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/debugger.c,v 1.25 2003/04/27 18:17:32 tsi Exp $ */
d33 3
a35 3
#include "lisp/io.h"
#include "lisp/debugger.h"
#include "lisp/write.h"
@


