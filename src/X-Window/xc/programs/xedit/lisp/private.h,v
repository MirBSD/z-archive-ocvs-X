head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.39.51;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.18.39.22;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.28.32;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 2001 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *  
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE XFREE86 PROJECT BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the XFree86 Project shall
 * not be used in advertising or otherwise to promote the sale, use or other
 * dealings in this Software without prior written authorization from the
 * XFree86 Project.
 *
 * Author: Paulo César Pereira de Andrade
 */

/* $XFree86: xc/programs/xedit/lisp/private.h,v 1.15 2001/10/20 00:19:35 paulo Exp $ */

#ifndef Lisp_private_h
#define Lisp_private_h

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <setjmp.h>
#include <unistd.h>
#include <sys/time.h>
#include "internal.h"

#include "core.h"
#include "debugger.h"
#include "helper.h"
#include "string.h"
#include "struct.h"

/*
 * Defines
 */
#define	STRTBLSZ	23

#define MOD	mac->modlist
#define GLB	mac->glblist
#define ENV	mac->envlist
#define LEX	mac->lexlist
#define COD	mac->codlist
#define FRM	mac->frmlist
#define RUN	mac->runlist
#define RES	mac->reslist
#define DBG	mac->dbglist
#define BRK	mac->brklist
#define PRO	mac->prolist

#define	EOLIST	(LispObj*)1	/* end-of-list ")" found in LispRun */

/*
 * Types
 */
typedef struct _LispStream LispStream;
typedef struct _LispBlock LispBlock;
typedef struct _LispOpaque LispOpaque;
typedef struct _LispModule LispModule;
typedef struct _LispProperty LispProperty;

struct _LispStream {
    FILE *fp;
    char *st;
    char *cp;
    int tok;
};

/* Possible values to attach to a LispAtom include:
 *	a generic LispObject for global variable value
 *	a function definition
 *	a pointer to a builtin function definition
 *	the atom properties list, read with (get), set with (setf (get ...) ...)
 *	a setf expansion macro or function replacement name
 *	a structure definition
 */
struct _LispProperty {
    unsigned int object : 1;
    unsigned int function : 1;
    unsigned int builtin : 1;
    unsigned int property : 1;
    unsigned int defsetf : 1;
    unsigned int defstruct : 1;
    LispObj *value;
    union {
	LispObj *function;
	LispBuiltin *builtin;
    } fun;	/* cannot have both, a builtin and user function attached,
		 * virtually, builtin and user function are the same */
    LispObj *properties;
    LispObj *setf;
    struct {
	LispObj *definition;
#define STRUCT_CHECK		-2
#define STRUCT_CONSTRUCTOR	-1
	int function;		/* if >= 0, it is a structure field index */
    } structure;
};

struct _LispAtom {
    unsigned int mark : 1;	/* gc protected */
    unsigned int dirty : 1;
    unsigned int prot : 1;	/* never released */
    char *string;
    LispProperty *property;
    struct _LispAtom *next;
};

struct _LispOpaque {
    int type;
    char *desc;
    LispOpaque *next;
};

typedef enum _LispBlockType {
    LispBlockTag,	/* may become "invisible" */
    LispBlockCatch,	/* can be used to jump across function calls */
    LispBlockClosure,	/* hides blocks of type LispBlockTag bellow it */
    LispBlockProtect,	/* used by unwind-protect */
    LispBlockBody	/* used by tagbody and go */
} LispBlockType;

struct _LispBlock {
    LispBlockType type;
    LispObj tag;
    jmp_buf jmp;
    int level;
    int block_level;
    int debug_level;
    int debug_step;
};

struct _LispModule {
    LispModule *next;
    void *handle;
    LispModuleData *data;
};

struct _LispMac {
    FILE *fp;
    char *st;
    char *cp;
    int tok;
    int level;
    int princ;		/* don't quote strings? */
    int justsize;	/* just calculate size of output,
			 * needed to calculate formatted output */
    int newline;	/* at a newline in the output */
    int column;		/* column number in the output */
    int interactive;
    int errexit;
    LispAtom *strs[STRTBLSZ];
    LispOpaque *opqs[STRTBLSZ];
    int opaque;
    sigjmp_buf jmp;
    struct {
	unsigned stream_level;
	unsigned stream_size;
	LispStream *stream;	
    } stream;
    struct {
	unsigned block_level;
	unsigned block_size;
	LispObj *block_ret;
	LispBlock **block;
    } block;
    struct {
	unsigned mem_level;
	unsigned mem_size;
	void **mem;
    } mem;		/* memory from Lisp*Alloc, to be release in error */
    LispModule *module;
    char *prompt;

    LispObj *modlist;		/* module list */
    LispObj *glblist;		/* global variables */
    LispObj *envlist;		/* alive variables */
    LispObj *lexlist;		/* lexical instead of dynamic scope */
    LispObj *codlist;		/* current code */
    LispObj *frmlist;		/* input data */
    LispObj *runlist[3];	/* +, ++, and +++ */
    LispObj *reslist[3];	/* *, **, and *** */
    LispObj *dbglist;		/* debug information */
    LispObj *brklist;		/* breakpoints information */
    LispObj *prolist;		/* protect objects list */

#ifdef SIGNALRETURNSINT
    int (*sigint)(int);
    int (*sigfpe)(int);
#else
    void (*sigint)(int);
    void (*sigfpe)(int);
#endif

    int destroyed;		/* reached LispDestroy, used by unwind-protect */
    int running;		/* there is somewhere to siglongjmp */

    int debugging;		/* debugger enabled? */
    int debug_level;		/* almost always the same as mac->level */
    int debug_step;		/* control for stoping and printing output */
    int debug_break;		/* next breakpoint number */
    LispDebugState debug;
};

/*
 * Prototypes
 */
LispObj *LispEnvRun(LispMac*, LispObj*, LispFunPtr, char*, int);
LispObj *LispGetVar(LispMac*, LispObj*);
LispObj *LispGetVarCons(LispMac*, LispObj*);	/* used by debugger */
LispObj *LispAddVar(LispMac*, LispObj*, LispObj*);
LispObj *LispSetVar(LispMac*, LispObj*, LispObj*);
void LispUnsetVar(LispMac*, LispObj*);

/* destructive fast reverse, note that don't receive a LispMac* argument */
LispObj *LispReverse(LispObj *list);

/* reads an expression from the selected stream */
LispObj *LispRun(LispMac*);

#if 0
/* generated by gperf */
extern struct _LispBuiltin *LispFindBuiltin(const char*, unsigned int);
#endif

/* (print) */
void LispPrint(LispMac*, LispObj*, LispObj*, int);

LispBlock *LispBeginBlock(LispMac*, LispObj*, LispBlockType);
void LispEndBlock(LispMac*, LispBlock*);
	/* if unwind-protect active, jump to cleanup code, else do nothing */
void LispBlockUnwind(LispMac*);

void LispUpdateResults(LispMac*, LispObj*, LispObj*);
void LispTopLevel(LispMac*);

LispAtom *LispDoGetAtom(LispMac*, char *str, int, int);
	/* get value from atom's property list */
LispObj *LispGetAtomProperty(LispMac*, LispAtom*, LispObj*);
	/* put value in atom's property list */
LispObj *LispPutAtomProperty(LispMac*, LispAtom*, LispObj*, LispObj*);

	/* create or change object property */
void LispSetAtomObjectProperty(LispMac*, LispAtom*, LispObj*);
	/* remove object property */
void LispRemAtomObjectProperty(LispMac*, LispAtom*);
	/* define function, or replace function definition */
void LispSetAtomFunctionProperty(LispMac*, LispAtom*, LispObj*);
	/* remove function property */
void LispRemAtomFunctionProperty(LispMac*, LispAtom*);
	/* define builtin, or replace builtin definition */
void LispSetAtomBuiltinProperty(LispMac*, LispAtom*, LispBuiltin*);
	/* remove builtin property */
void LispRemAtomBuiltinProperty(LispMac*, LispAtom*);
	/* define setf macro, or replace current definition */
void LispSetAtomSetfProperty(LispMac*, LispAtom*, LispObj*);
	/* remove setf macro */
void LispRemAtomSetfProperty(LispMac*, LispAtom*);
	/* create or change structure property */
void LispSetAtomStructProperty(LispMac*, LispAtom*, LispObj*, int);
	/* remove structure property */
void LispRemAtomStructProperty(LispMac*, LispAtom*);

#endif /* Lisp_private_h */
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/private.h,v 1.42 2003/12/17 17:45:33 dawes Exp $ */
a34 1
#include <X11/Xos.h>
a37 2
#if defined(X_POSIX_C_SOURCE)
#define _POSIX_C_SOURCE X_POSIX_C_SOURCE
a38 4
#undef _POSIX_C_SOURCE
#else
#include <setjmp.h>
#endif
d41 1
a41 1
#include "lisp/internal.h"
d43 5
a47 7
#include "lisp/core.h"
#ifdef DEBUGGER
#include "lisp/debugger.h"
#endif
#include "lisp/helper.h"
#include "lisp/string.h"
#include "lisp/struct.h"
d52 15
a66 26
#define	STRTBLSZ		23
#define MULTIPLE_VALUES_LIMIT	127
#define MAX_STACK_DEPTH		16384

#define FEATURES							\
    (lisp__data.features->data.atom->a_object ?				\
	(LispObj *)lisp__data.features->data.atom->property->value :	\
	NIL)
#define PACK	lisp__data.packlist
#define PACKAGE	lisp__data.package->data.atom->property->value
#define MOD	lisp__data.modlist
#define COD	lisp__data.codlist
#define RUN	lisp__data.runlist
#define RES	lisp__data.reslist
#define DBG	lisp__data.dbglist
#define BRK	lisp__data.brklist
#define PRO	lisp__data.prolist

#define SINPUT	lisp__data.input
#define SOUTPUT	lisp__data.output
#define STANDARD_INPUT						\
    lisp__data.standard_input->data.atom->property->value
#define STANDARD_OUTPUT						\
    lisp__data.standard_output->data.atom->property->value
#define STANDARDSTREAM(file, desc, flags)			\
	LispNewStandardStream(file, desc, flags)
d76 15
a90 41
typedef struct _LispObjList LispObjList;
typedef struct _LispStringHash LispStringHash;
typedef struct _LispCharInfo LispCharInfo;


/* Normal function/macro arguments */
typedef struct _LispNormalArgs {
    int num_symbols;
    LispObj **symbols;		/* symbol names */
} LispNormalArgs;

/* &optional function/macro arguments */
typedef struct _LispOptionalArgs {
    int num_symbols;
    LispObj **symbols;		/* symbol names */
    LispObj **defaults;		/* default values, when unspecifed */
    LispObj **sforms;		/* T if variable specified, NIL otherwise */
} LispOptionalArgs;

/* &key function/macro arguments */
typedef struct _LispKeyArgs {
    int num_symbols;
    LispObj **symbols;		/* symbol names */
    LispObj **defaults;		/* default values */
    LispObj **sforms;		/* T if variable specified, NIL otherwise */
    LispObj **keys;		/* key names, for special keywords */
} LispKeyArgs;

/* &aux function/macro arguments */
typedef struct _LispAuxArgs {
    int num_symbols;
    LispObj **symbols;		/* symbol names */
    LispObj **initials;		/* initial values */
} LispAuxArgs;

/* characters in the field description have the format:
 *	'.'	normals has a list of normal arguments
 *	'o'	optionals has a list of &optional arguments
 *	'k'	keys has a list of &key arguments
 *	'r'	rest is a valid pointer to a &rest symbol
 *	'a'	auxs has a list of &aux arguments
a91 18
typedef struct _LispArgList {
    LispNormalArgs normals;
    LispOptionalArgs optionals;
    LispKeyArgs keys;
    LispObj *rest;
    LispAuxArgs auxs;
    int num_arguments;
    char *description;
} LispArgList;

typedef enum _LispDocType_t {
    LispDocVariable,
    LispDocFunction,
    LispDocStructure,
    LispDocType,
    LispDocSetf
} LispDocType_t;

d93 6
a98 7
    /* may be used by multiple packages */
    unsigned int refcount;

    /* package where the property was created */
    LispPackage *package;

    /* value of variable attached to symbol */
a99 1

a100 1
	/* function attached to symbol */
a101 1
	/* builtin function attached to symbol*/
d103 2
a104 5
    } fun;
    /* function/macro argument list description */
    LispArgList *alist;

    /* symbol properties list */
a105 2

    /* setf method */
a106 4
    /* setf argument list description */
    LispArgList *salist;

    /* structure information */
a108 1
#define STRUCT_NAME		-3
d116 3
a118 30
    /* hint: dynamically binded variable */
    unsigned int dyn : 1;

    /* Property has useful data in value field */
    unsigned int a_object : 1;
    /* Property has useful data in fun.function field */
    unsigned int a_function : 1;
    /* Property has useful data in fun.builtin field */
    unsigned int a_builtin : 1;
    /* Property has useful data in fun.function field */
    unsigned int a_compiled : 1;
    /* Property has useful data in properties field */
    unsigned int a_property : 1;
    /* Property has useful data in setf field */
    unsigned int a_defsetf : 1;
    /* Property has useful data in defstruct field */
    unsigned int a_defstruct : 1;

    /* Symbol is extern */
    unsigned int ext : 1;

    /* Symbol must be quoted with '|' to be allow reading back */
    unsigned int unreadable : 1;

    /* Symbol value may need special handling when changed */
    unsigned int watch : 1;

    /* Symbol value is constant, cannot be changed */
    unsigned int constant : 1;

a119 5
    LispObj *object;		/* backpointer to object ATOM */
    int offset;			/* in the environment list */
    LispObj *package;		/* package home of symbol */
    LispObj *function;		/* symbol function */
    LispObj *name;		/* symbol string */
a121 14

    LispObj *documentation[5];
};

struct _LispObjList {
    LispObj **pairs;		/* name0 ... nameN */
    int length;			/* number of objects */
    int space;			/* space allocated in field pairs */
};

struct _LispPackage {
    LispObjList glb;		/* global symbols in package */
    LispObjList use;		/* inherited packages */
    LispAtom *atoms[STRTBLSZ];	/* atoms in this package */
a129 7
/* These strings are never released, they are used to avoid
 * the need of strcmp() on two symbol names, just compare pointers */
struct _LispStringHash {
    char *string;
    LispStringHash *next;
};

a130 1
    LispBlockNone,	/* no block */
d140 1
a140 1
    LispObj *tag;
d142 1
a142 2
    int stack;
    int protect;
a143 1
#ifdef DEBUGGER
a145 1
#endif
a153 5
typedef struct _LispUngetInfo {
    char buffer[16];
    int offset;
} LispUngetInfo;

d155 16
a170 1
    /* stack for builtin function arguments */
d172 4
a175 7
	LispObj **values;
	int base;		/* base of arguments to function */
	int length;
	int space;
    } stack;

    /* environment */
d177 2
a178 37
	LispObj **values;
	Atom_id *names;
	int lex;		/* until where variables are visible */
	int head;		/* top of environment */
	int length;		/* number of used pairs */
	int space;		/* number of objects in pairs */
    } env;

    struct {
	LispObj **values;
	int count;
    } returns;

    struct {
	LispObj **objects;
	int length;
	int space;
    } protect;

    LispObj *package;		/* package object */
    LispPackage *pack;		/* pointer to lisp__data.package->data.package.package */

    /* fast access to the KEYWORD package */
    LispObj *keyword;
    LispPackage *key;

    /* the LISP package */
    LispObj *lisp;

    /* only used if the package was changed, but an error generated
     * before returning to the toplevel */
    LispObj *savepackage;
    LispPackage *savepack;

    struct {
	int block_level;
	int block_size;
a181 3

    sigjmp_buf jmp;

d183 2
a184 28
	unsigned int expandbits : 3;	/* code doesn't look like reusing cells
					 * so try to have a larger number of
					 * free cells */
	unsigned int immutablebits : 1;	/* need to reset immutable bits */
	unsigned int timebits : 1;	/* update gctime counter */
	unsigned int count;
	long gctime;
	int average;			/* of cells freed after gc calls */
    } gc;

    LispStringHash *strings[STRTBLSZ];
    LispOpaque *opqs[STRTBLSZ];
    int opaque;

    LispObj *standard_input, *input, *input_list;
    LispObj *standard_output, *output, *output_list;
    LispObj *error_stream;
    LispUngetInfo **unget;
    int iunget, nunget;
    int eof;

    int interactive;
    int errexit;

    struct {
	int index;
	int level;
	int space;
a187 1
    LispObj *modules;
a189 2
    LispObj *features;

d191 3
a193 1
    LispObj *packlist;		/* list of packages */
d195 1
a197 1
#ifdef DEBUGGER
a199 1
#endif
a212 3
    int ignore_errors;		/* inside a ignore-errors block */
    LispObj *error_condition;	/* actually, a string */

d214 1
a214 2
#ifdef DEBUGGER
    int debug_level;		/* almost always the same as lisp__data.level */
a217 1
#endif
a219 5
struct _LispCharInfo {
    char **names;
};


d223 6
a228 28
void LispUseArgList(LispArgList*);
void LispFreeArgList(LispArgList*);
LispArgList *LispCheckArguments(LispFunType, LispObj*, char*, int);
LispObj *LispListProtectedArguments(LispArgList*);

LispObj *LispGetDoc(LispObj*);
LispObj *LispGetVar(LispObj*);
#ifdef DEBUGGER
void *LispGetVarAddr(LispObj*);	/* used by debugger */
#endif
LispObj *LispAddVar(LispObj*, LispObj*);
LispObj *LispSetVar(LispObj*, LispObj*);
void LispUnsetVar(LispObj*);

	/* only used at initialization time */
LispObj *LispNewStandardStream(LispFile*, LispObj*, int);

	/* create a new package */
LispObj *LispNewPackage(LispObj*, LispObj*);
	/* add package to use-list of current, and imports all extern symbols */
void LispUsePackage(LispObj*);
	/* make symbol extern in the current package */
void LispExportSymbol(LispObj*);
	/* imports symbol to current package */
void LispImportSymbol(LispObj*);

	/* always returns the same string */
char *LispGetAtomString(char*, int);
d233 7
a239 1
char *LispIntToOpaqueType(int);
d242 1
a242 1
void LispPrint(LispObj*, LispObj*, int);
d244 2
a245 6
LispBlock *LispBeginBlock(LispObj*, LispBlockType);
#define BLOCKJUMP(block)				\
    lisp__data.stack.length = (block)->stack;		\
    lisp__data.protect.length = (block)->protect;	\
    longjmp((block)->jmp, 1)
void LispEndBlock(LispBlock*);
d247 1
a247 1
void LispBlockUnwind(LispBlock*);
d249 2
a250 2
void LispUpdateResults(LispObj*, LispObj*);
void LispTopLevel(void);
d252 1
a252 3
#define STRHASH(string)		LispDoHashString(string)
int LispDoHashString(char*);
LispAtom *LispDoGetAtom(char *str, int);
d254 1
a254 1
LispObj *LispGetAtomProperty(LispAtom*, LispObj*);
d256 6
a261 15
LispObj *LispPutAtomProperty(LispAtom*, LispObj*, LispObj*);
	/* remove value from atom's property list */
LispObj *LispRemAtomProperty(LispAtom*, LispObj*);
	/* replace atom's property list */
LispObj *LispReplaceAtomPropertyList(LispAtom*, LispObj*);

	/* returns function associated with symbol */
LispObj *LispSymbolFunction(LispObj*);
	/* returns symbol string name */
LispObj *LispSymbolName(LispObj*);

	/* define byte compiled function, or replace definition */
void LispSetAtomCompiledProperty(LispAtom*, LispObj*);
	/* remove byte compiled function property */
void LispRemAtomCompiledProperty(LispAtom*);
d263 1
a263 1
void LispSetAtomFunctionProperty(LispAtom*, LispObj*, LispArgList*);
d265 1
a265 1
void LispRemAtomFunctionProperty(LispAtom*);
d267 1
a267 1
void LispSetAtomBuiltinProperty(LispAtom*, LispBuiltin*, LispArgList*);
d269 1
a269 1
void LispRemAtomBuiltinProperty(LispAtom*);
d271 1
a271 1
void LispSetAtomSetfProperty(LispAtom*, LispObj*, LispArgList*);
d273 1
a273 1
void LispRemAtomSetfProperty(LispAtom*);
d275 1
a275 1
void LispSetAtomStructProperty(LispAtom*, LispObj*, int);
d277 1
a277 30
void LispRemAtomStructProperty(LispAtom*);

void LispProclaimSpecial(LispObj*, LispObj*, LispObj*);
void LispDefconstant(LispObj*, LispObj*, LispObj*);

void LispAddDocumentation(LispObj*, LispObj*, LispDocType_t);
void LispRemDocumentation(LispObj*, LispDocType_t);
LispObj *LispGetDocumentation(LispObj*, LispDocType_t);

/* increases storage for functions returning multiple values */
void LispMoreReturns(void);

/* increases storage for temporarily protected data */
void LispMoreProtects(void);

/* Initialization */
extern int LispArgList_t;
extern LispCharInfo LispChars[256];

/* This function will return if the interpreter cannot be stopped */
extern void LispSignal(int);

void LispDisableInterrupts(void);
void LispEnableInterrupts(void);
#define DISABLE_INTERRUPTS()	LispDisableInterrupts()
#define ENABLE_INTERRUPTS()	LispEnableInterrupts()

/* Value returned by LispBegin, used everywhere in the code.
 * Only one interpreter instance allowed. */
extern LispMac lisp__data;
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/private.h,v 1.39 2002/12/20 04:32:46 paulo Exp $ */
a43 1
#ifdef DEBUGGER
a44 1
#endif
d52 15
a66 26
#define	STRTBLSZ		23
#define MULTIPLE_VALUES_LIMIT	127
#define MAX_STACK_DEPTH		16384

#define FEATURES						\
    lisp__data.features->data.atom->a_object ?			\
	lisp__data.features->data.atom->property->value :	\
	NIL
#define PACK	lisp__data.packlist
#define PACKAGE	lisp__data.package->data.atom->property->value
#define MOD	lisp__data.modlist
#define COD	lisp__data.codlist
#define RUN	lisp__data.runlist
#define RES	lisp__data.reslist
#define DBG	lisp__data.dbglist
#define BRK	lisp__data.brklist
#define PRO	lisp__data.prolist

#define SINPUT	lisp__data.input
#define SOUTPUT	lisp__data.output
#define STANDARD_INPUT						\
    lisp__data.standard_input->data.atom->property->value
#define STANDARD_OUTPUT						\
    lisp__data.standard_output->data.atom->property->value
#define STANDARDSTREAM(file, desc, flags)			\
	LispNewStandardStream(file, desc, flags)
d76 15
a90 41
typedef struct _LispObjList LispObjList;
typedef struct _LispStringHash LispStringHash;
typedef struct _LispCharInfo LispCharInfo;


/* Normal function/macro arguments */
typedef struct _LispNormalArgs {
    int num_symbols;
    LispObj **symbols;		/* symbol names */
} LispNormalArgs;

/* &optional function/macro arguments */
typedef struct _LispOptionalArgs {
    int num_symbols;
    LispObj **symbols;		/* symbol names */
    LispObj **defaults;		/* default values, when unspecifed */
    LispObj **sforms;		/* T if variable specified, NIL otherwise */
} LispOptionalArgs;

/* &key function/macro arguments */
typedef struct _LispKeyArgs {
    int num_symbols;
    LispObj **symbols;		/* symbol names */
    LispObj **defaults;		/* default values */
    LispObj **sforms;		/* T if variable specified, NIL otherwise */
    LispObj **keys;		/* key names, for special keywords */
} LispKeyArgs;

/* &aux function/macro arguments */
typedef struct _LispAuxArgs {
    int num_symbols;
    LispObj **symbols;		/* symbol names */
    LispObj **initials;		/* initial values */
} LispAuxArgs;

/* characters in the field description have the format:
 *	'.'	normals has a list of normal arguments
 *	'o'	optionals has a list of &optional arguments
 *	'k'	keys has a list of &key arguments
 *	'r'	rest is a valid pointer to a &rest symbol
 *	'a'	auxs has a list of &aux arguments
a91 18
typedef struct _LispArgList {
    LispNormalArgs normals;
    LispOptionalArgs optionals;
    LispKeyArgs keys;
    LispObj *rest;
    LispAuxArgs auxs;
    int num_arguments;
    char *description;
} LispArgList;

typedef enum _LispDocType_t {
    LispDocVariable,
    LispDocFunction,
    LispDocStructure,
    LispDocType,
    LispDocSetf
} LispDocType_t;

d93 6
a98 7
    /* may be used by multiple packages */
    unsigned int refcount;

    /* package where the property was created */
    LispPackage *package;

    /* value of variable attached to symbol */
a99 1

a100 1
	/* function attached to symbol */
a101 1
	/* builtin function attached to symbol*/
d103 2
a104 5
    } fun;
    /* function/macro argument list description */
    LispArgList *alist;

    /* symbol properties list */
a105 2

    /* setf method */
a106 4
    /* setf argument list description */
    LispArgList *salist;

    /* structure information */
a108 1
#define STRUCT_NAME		-3
d116 3
a118 30
    /* hint: dynamically binded variable */
    unsigned int dyn : 1;

    /* Property has useful data in value field */
    unsigned int a_object : 1;
    /* Property has useful data in fun.function field */
    unsigned int a_function : 1;
    /* Property has useful data in fun.builtin field */
    unsigned int a_builtin : 1;
    /* Property has useful data in fun.function field */
    unsigned int a_compiled : 1;
    /* Property has useful data in properties field */
    unsigned int a_property : 1;
    /* Property has useful data in setf field */
    unsigned int a_defsetf : 1;
    /* Property has useful data in defstruct field */
    unsigned int a_defstruct : 1;

    /* Symbol is extern */
    unsigned int ext : 1;

    /* Symbol must be quoted with '|' to be allow reading back */
    unsigned int unreadable : 1;

    /* Symbol value may need special handling when changed */
    unsigned int watch : 1;

    /* Symbol value is constant, cannot be changed */
    unsigned int constant : 1;

a119 5
    LispObj *object;		/* backpointer to object ATOM */
    int offset;			/* in the environment list */
    LispObj *package;		/* package home of symbol */
    LispObj *function;		/* symbol function */
    LispObj *name;		/* symbol string */
a121 14

    LispObj *documentation[5];
};

struct _LispObjList {
    LispObj **pairs;		/* name0 ... nameN */
    int length;			/* number of objects */
    int space;			/* space allocated in field pairs */
};

struct _LispPackage {
    LispObjList glb;		/* global symbols in package */
    LispObjList use;		/* inherited packages */
    LispAtom *atoms[STRTBLSZ];	/* atoms in this package */
a129 7
/* These strings are never released, they are used to avoid
 * the need of strcmp() on two symbol names, just compare pointers */
struct _LispStringHash {
    char *string;
    LispStringHash *next;
};

a130 1
    LispBlockNone,	/* no block */
d140 1
a140 1
    LispObj *tag;
d142 1
a142 2
    int stack;
    int protect;
a143 1
#ifdef DEBUGGER
a145 1
#endif
a153 5
typedef struct _LispUngetInfo {
    char buffer[16];
    int offset;
} LispUngetInfo;

d155 16
a170 18
    /* stack for builtin function arguments */
    struct {
	LispObj **values;
	int base;		/* base of arguments to function */
	int length;
	int space;
    } stack;

    /* environment */
    struct {
	LispObj **values;
	Atom_id *names;
	int lex;		/* until where variables are visible */
	int head;		/* top of environment */
	int length;		/* number of used pairs */
	int space;		/* number of objects in pairs */
    } env;

d172 4
a175 4
	LispObj **values;
	int count;
    } returns;

d177 2
a178 23
	LispObj **objects;
	int length;
	int space;
    } protect;

    LispObj *package;		/* package object */
    LispPackage *pack;		/* pointer to lisp__data.package->data.package.package */

    /* fast access to the KEYWORD package */
    LispObj *keyword;
    LispPackage *key;

    /* the LISP package */
    LispObj *lisp;

    /* only used if the package was changed, but an error generated
     * before returning to the toplevel */
    LispObj *savepackage;
    LispPackage *savepack;

    struct {
	int block_level;
	int block_size;
a181 28

    sigjmp_buf jmp;

    struct {
	unsigned int expandbits : 3;	/* code doesn't look like reusing cells
					 * so try to have a larger number of
					 * free cells */
	unsigned int immutablebits : 1;	/* need to reset immutable bits */
	unsigned int timebits : 1;	/* update gctime counter */
	unsigned int count;
	long gctime;
	int average;			/* of cells freed after gc calls */
    } gc;

    LispStringHash *strings[STRTBLSZ];
    LispOpaque *opqs[STRTBLSZ];
    int opaque;

    LispObj *standard_input, *input, *input_list;
    LispObj *standard_output, *output, *output_list;
    LispObj *error_stream;
    LispUngetInfo **unget;
    int iunget, nunget;
    int eof;

    int interactive;
    int errexit;

d183 2
a184 3
	int index;
	int level;
	int space;
a187 1
    LispObj *modules;
a189 2
    LispObj *features;

d191 3
a193 1
    LispObj *packlist;		/* list of packages */
d195 1
a197 1
#ifdef DEBUGGER
a199 1
#endif
a212 3
    int ignore_errors;		/* inside a ignore-errors block */
    LispObj *error_condition;	/* actually, a string */

d214 1
a214 2
#ifdef DEBUGGER
    int debug_level;		/* almost always the same as lisp__data.level */
a217 1
#endif
a219 5
struct _LispCharInfo {
    char **names;
};


d223 6
a228 28
void LispUseArgList(LispArgList*);
void LispFreeArgList(LispArgList*);
LispArgList *LispCheckArguments(LispFunType, LispObj*, char*, int);
LispObj *LispListProtectedArguments(LispArgList*);

LispObj *LispGetDoc(LispObj*);
LispObj *LispGetVar(LispObj*);
#ifdef DEBUGGER
void *LispGetVarAddr(LispObj*);	/* used by debugger */
#endif
LispObj *LispAddVar(LispObj*, LispObj*);
LispObj *LispSetVar(LispObj*, LispObj*);
void LispUnsetVar(LispObj*);

	/* only used at initialization time */
LispObj *LispNewStandardStream(LispFile*, LispObj*, int);

	/* create a new package */
LispObj *LispNewPackage(LispObj*, LispObj*);
	/* add package to use-list of current, and imports all extern symbols */
void LispUsePackage(LispObj*);
	/* make symbol extern in the current package */
void LispExportSymbol(LispObj*);
	/* imports symbol to current package */
void LispImportSymbol(LispObj*);

	/* always returns the same string */
char *LispGetAtomString(char*, int);
d233 7
a239 1
char *LispIntToOpaqueType(int);
d242 1
a242 1
void LispPrint(LispObj*, LispObj*, int);
d244 2
a245 6
LispBlock *LispBeginBlock(LispObj*, LispBlockType);
#define BLOCKJUMP(block)				\
    lisp__data.stack.length = (block)->stack;		\
    lisp__data.protect.length = (block)->protect;	\
    longjmp((block)->jmp, 1)
void LispEndBlock(LispBlock*);
d247 1
a247 1
void LispBlockUnwind(LispBlock*);
d249 2
a250 2
void LispUpdateResults(LispObj*, LispObj*);
void LispTopLevel(void);
d252 1
a252 3
#define STRHASH(string)		LispDoHashString(string)
int LispDoHashString(char*);
LispAtom *LispDoGetAtom(char *str, int);
d254 1
a254 1
LispObj *LispGetAtomProperty(LispAtom*, LispObj*);
d256 6
a261 15
LispObj *LispPutAtomProperty(LispAtom*, LispObj*, LispObj*);
	/* remove value from atom's property list */
LispObj *LispRemAtomProperty(LispAtom*, LispObj*);
	/* replace atom's property list */
LispObj *LispReplaceAtomPropertyList(LispAtom*, LispObj*);

	/* returns function associated with symbol */
LispObj *LispSymbolFunction(LispObj*);
	/* returns symbol string name */
LispObj *LispSymbolName(LispObj*);

	/* define byte compiled function, or replace definition */
void LispSetAtomCompiledProperty(LispAtom*, LispObj*);
	/* remove byte compiled function property */
void LispRemAtomCompiledProperty(LispAtom*);
d263 1
a263 1
void LispSetAtomFunctionProperty(LispAtom*, LispObj*, LispArgList*);
d265 1
a265 1
void LispRemAtomFunctionProperty(LispAtom*);
d267 1
a267 1
void LispSetAtomBuiltinProperty(LispAtom*, LispBuiltin*, LispArgList*);
d269 1
a269 1
void LispRemAtomBuiltinProperty(LispAtom*);
d271 1
a271 1
void LispSetAtomSetfProperty(LispAtom*, LispObj*, LispArgList*);
d273 1
a273 1
void LispRemAtomSetfProperty(LispAtom*);
d275 1
a275 1
void LispSetAtomStructProperty(LispAtom*, LispObj*, int);
d277 1
a277 30
void LispRemAtomStructProperty(LispAtom*);

void LispProclaimSpecial(LispObj*, LispObj*, LispObj*);
void LispDefconstant(LispObj*, LispObj*, LispObj*);

void LispAddDocumentation(LispObj*, LispObj*, LispDocType_t);
void LispRemDocumentation(LispObj*, LispDocType_t);
LispObj *LispGetDocumentation(LispObj*, LispDocType_t);

/* increases storage for functions returning multiple values */
void LispMoreReturns(void);

/* increases storage for temporarily protected data */
void LispMoreProtects(void);

/* Initialization */
extern int LispArgList_t;
extern LispCharInfo LispChars[256];

/* This function will return if the interpreter cannot be stopped */
extern void LispSignal(int);

void LispDisableInterrupts(void);
void LispEnableInterrupts(void);
#define DISABLE_INTERRUPTS()	LispDisableInterrupts()
#define ENABLE_INTERRUPTS()	LispEnableInterrupts()

/* Value returned by LispBegin, used everywhere in the code.
 * Only one interpreter instance allowed. */
extern LispMac lisp__data;
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/private.h,v 1.42 2003/12/17 17:45:33 dawes Exp $ */
a34 1
#include <X11/Xos.h>
a37 2
#if defined(X_POSIX_C_SOURCE)
#define _POSIX_C_SOURCE X_POSIX_C_SOURCE
a38 4
#undef _POSIX_C_SOURCE
#else
#include <setjmp.h>
#endif
d41 1
a41 1
#include "lisp/internal.h"
d43 1
a43 1
#include "lisp/core.h"
d45 1
a45 1
#include "lisp/debugger.h"
d47 3
a49 3
#include "lisp/helper.h"
#include "lisp/string.h"
#include "lisp/struct.h"
d58 4
a61 4
#define FEATURES							\
    (lisp__data.features->data.atom->a_object ?				\
	(LispObj *)lisp__data.features->data.atom->property->value :	\
	NIL)
@


