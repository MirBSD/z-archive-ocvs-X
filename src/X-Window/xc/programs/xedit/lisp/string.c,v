head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.10.19;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.39.51;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.18.39.27;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.28.33;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 2001 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *  
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE XFREE86 PROJECT BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the XFree86 Project shall
 * not be used in advertising or otherwise to promote the sale, use or other
 * dealings in this Software without prior written authorization from the
 * XFree86 Project.
 *
 * Author: Paulo César Pereira de Andrade
 */

/* $XFree86: xc/programs/xedit/lisp/string.c,v 1.3 2001/10/28 03:34:31 tsi Exp $ */

#include "string.h"
#include "private.h"
#include <ctype.h>

LispObj *
Lisp_Char(LispMac *mac, LispObj *list, char *fname)
{
    int c, pos;
    LispObj *str = CAR(list), *idx = CAR(CDR(list));

    if (!STRING_P(str))
	LispDestroy(mac, "%s is not a string, at %s",
		    LispStrObj(mac, str), fname);
    if (!NUMBER_P(idx))
	LispDestroy(mac, "%s is not a number, at %s",
		    LispStrObj(mac, str), fname);

    if (INDEX_P(idx))
	LispDestroy(mac, "bad index %s, at %s", LispStrObj(mac, idx), fname);

    if ((pos = NUMBER_VALUE(idx)) >= strlen(STRPTR(str)))
	LispDestroy(mac, "index %d is too large, at %s", pos, fname);

    c = *(unsigned char*)(STRPTR(str) + pos);

    return (CHAR(c));
}

/* helper function for setf
 *	DONT explicitly call. Non standard function
 */
LispObj *
Lisp_XeditCharStore(LispMac *mac, LispObj *list, char *fname)
{
    char *string;
    int c, pos, len;
    LispObj *str, *idx, *value;

    str = CAR(list);
    if (!STRING_P(str))
	LispDestroy(mac, "%s is not a string, at %s",
		    LispStrObj(mac, str), fname);
    list = CDR(list);
    idx = CAR(list);
    if (idx->type != LispReal_t)
	LispDestroy(mac, "%s is not a number, at %s",
		    LispStrObj(mac, str), fname);
    if (!INDEX_P(idx))
	LispDestroy(mac, "bad index %s, at %s", LispStrObj(mac, idx), fname);
    if ((pos = NUMBER_VALUE(idx)) >= (len = strlen(STRPTR(str))))
	LispDestroy(mac, "index %d is too large, at %s", pos, fname);
    list = CDR(list);
    value = CAR(list);
    if (value->type != LispCharacter_t)
	LispDestroy(mac, "%s is not a character, at %s",
		    LispStrObj(mac, value), fname);

    c = value->data.integer;

    if (c < 0 || c > 255)
	LispDestroy(mac, "cannot represent character %d, at %s", c, fname);

    string = LispStrdup(mac, STRPTR(str));
    string[pos] = c;

    str->data.atom = LispDoGetAtom(mac, string, 0, 0);
    LispFree(mac, string);

    return (value);
}

LispObj *
Lisp_CharLess(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispCharBoolCond(mac, list, fname, LESS, 0));
}

LispObj *
Lisp_CharLessEqual(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispCharBoolCond(mac, list, fname, LESS_EQUAL, 0));
}

LispObj *
Lisp_CharEqual_(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispCharBoolCond(mac, list, fname, EQUAL, 0));
}

LispObj *
Lisp_CharGreater(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispCharBoolCond(mac, list, fname, GREATER, 0));
}

LispObj *
Lisp_CharGreaterEqual(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispCharBoolCond(mac, list, fname, GREATER_EQUAL, 0));
}

LispObj *
Lisp_CharNotEqual_(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispCharBoolCond(mac, list, fname, NOT_EQUAL, 0));
}

LispObj *
Lisp_CharLessp(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispCharBoolCond(mac, list, fname, LESS, 1));
}

LispObj *
Lisp_CharNotGreaterp(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispCharBoolCond(mac, list, fname, LESS_EQUAL, 1));
}

LispObj *
Lisp_CharEqual(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispCharBoolCond(mac, list, fname, EQUAL, 1));
}

LispObj *
Lisp_CharGreaterp(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispCharBoolCond(mac, list, fname, GREATER, 1));
}

LispObj *
Lisp_CharNotLessp(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispCharBoolCond(mac, list, fname, GREATER_EQUAL, 1));
}

LispObj *
Lisp_CharNotEqual(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispCharBoolCond(mac, list, fname, NOT_EQUAL, 1));
}

LispObj *
Lisp_Character(LispMac *mac, LispObj *list, char *fname)
{
    LispObj *obj = CAR(list);

    if (obj->type == LispCharacter_t)
	return (obj);
    else if ((SYMBOL_P(obj) || STRING_P(obj)) &&
	     STRPTR(obj)[1] == '\0')
	return (CHAR((unsigned char)STRPTR(obj)[0]));
    else if (INDEX_P(obj)) {
	int c = NUMBER_VALUE(obj);

	if (c <= 0xffff)
	    return (CHAR(c));
    }

    LispDestroy(mac, "cannot convert %s to character, at %s",
		LispStrObj(mac, obj), fname);

    /*NOTREACHED*/
    return (NIL);
}

LispObj *
Lisp_CharDowncase(LispMac *mac, LispObj *list, char *fname)
{
    int c;
    LispObj *obj = CAR(list);

    if (obj->type != LispCharacter_t)
	LispDestroy(mac, "%s is not a character, at %s",
		    LispStrObj(mac, obj), fname);

    c = tolower((int)obj->data.integer);
    if (c == obj->data.integer)
	return (obj);

    return (CHAR(c));
}

LispObj *
Lisp_CharInt(LispMac *mac, LispObj *list, char *fname)
{
    LispObj *obj = CAR(list);

    if (obj->type != LispCharacter_t)
	LispDestroy(mac, "%s is not a character, at %s",
		    LispStrObj(mac, obj), fname);

    return (REAL(obj->data.integer));
}

LispObj *
Lisp_CharUpcase(LispMac *mac, LispObj *list, char *fname)
{
    int c;
    LispObj *obj = CAR(list);

    if (obj->type != LispCharacter_t)
	LispDestroy(mac, "%s is not a character, at %s",
		    LispStrObj(mac, obj), fname);

    c = toupper((int)obj->data.integer);
    if (c == obj->data.integer)
	return (obj);

    return (CHAR(c));
}

LispObj *
Lisp_IntChar(LispMac *mac, LispObj *list, char *fname)
{
    long character = 0;
    LispObj *obj = CAR(list);

    if (INTEGER_P(obj))
	character = NUMBER_VALUE(obj);
    else
	LispDestroy(mac, "cannot convert %s to character, at %s",
		    LispStrObj(mac, obj), fname);

    return (character >= 0 && character < 0xffff ? CHAR(character) : NIL);
}

LispObj *
Lisp_String(LispMac *mac, LispObj *list, char *fname)
{
    LispObj *obj = CAR(list);

    if (STRING_P(obj))
	return (obj);
    else if (SYMBOL_P(obj))
	return (STRING(STRPTR(obj)));
    else if (obj->type == LispCharacter_t) {
	char string[2];

	string[0] = obj->data.integer;
	string[1] = '\0';
	return (STRING(string));
    }
    else
	LispDestroy(mac, "expecting string, symbol or character, at %s", fname);
    /*NOTREACHED*/
    return (NIL);
}

LispObj *
Lisp_ReadFromString(LispMac *mac, LispObj *list, char *fname)
{
    char *str;
    int level, length, start, end;
    LispObj *res, *eof_error, *eof_value, *ostart, *oend, *preserve;

    if (!STRING_P(CAR(list)))
	LispDestroy(mac, "expecting string, at %s", fname);
    str = STRPTR(CAR(list));

    length = strlen(str);
    eof_error = eof_value = ostart = oend = preserve = NIL;

    list = CDR(list);
    if (list != NIL) {
	eof_error = CAR(list);
	list = CDR(list);
	if (list != NIL) {
	    eof_value = CAR(list);
	    list = CDR(list);
	    if (list != NIL)
		LispGetKeys(mac, fname, "START:END:PRESERVE-WHITESPACE", list,
			    &ostart, &oend, &preserve);
	}
    }

    if (ostart == NIL)
	start = 0;
    else {
	if (!INDEX_P(ostart))
	    LispDestroy(mac, "expecting positive integer, at %s", fname);
	start = NUMBER_VALUE(ostart);
    }
    if (oend == NIL)
	end = length;
    else {
	if (!INDEX_P(oend))
	    LispDestroy(mac, "expecting positive integer, at %s", fname);
	end = NUMBER_VALUE(oend);
    }
    if (start >= end || end > length)
	LispDestroy(mac, "bad string index or length, at %s", fname);

    if (mac->stream.stream_level + 1 >= mac->stream.stream_size) {
	LispStream *stream = (LispStream*)
	    realloc(mac->stream.stream, sizeof(LispStream) *
		    (mac->stream.stream_size + 1));

	if (stream == NULL) {
	    fprintf(lisp_stderr, "out of memory");
	    return (NIL);
	}

	mac->stream.stream = stream;
	++mac->stream.stream_size;
    }
    mac->stream.stream[mac->stream.stream_level].fp = mac->fp;
    mac->stream.stream[mac->stream.stream_level].st = mac->st;
    mac->stream.stream[mac->stream.stream_level].cp = mac->cp;
    mac->stream.stream[mac->stream.stream_level].tok = mac->tok;
    ++mac->stream.stream_level;
    memset(mac->stream.stream + mac->stream.stream_level, 0, sizeof(LispStream));
    mac->stream.stream[mac->stream.stream_level].fp = NULL;
    mac->fp = NULL;
    length = end - start;
    mac->st = mac->cp = LispMalloc(mac, length + 1);
    strncpy(mac->st, str + start, length);
    mac->st[length] = '\0';
    mac->tok = 0;

    level = mac->level;
    mac->level = 0;

    res = LispRun(mac);

    LispFree(mac, mac->st);
    mac->level = level;
    --mac->stream.stream_level;

    mac->fp = mac->stream.stream[mac->stream.stream_level].fp;
    mac->st = mac->stream.stream[mac->stream.stream_level].st;
    mac->cp = mac->stream.stream[mac->stream.stream_level].cp;
    mac->tok = mac->stream.stream[mac->stream.stream_level].tok;

    if (res == EOLIST)
	LispDestroy(mac, "object cannot start with #\\)");
    if (res == NULL)
	LispDestroy(mac, "unexpected end of input, at %s", fname);

    return (res);
}

LispObj *
Lisp_StringTrim(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispStringDoTrim(mac, list, fname, 1, 1));
}

LispObj *
Lisp_StringLeftTrim(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispStringDoTrim(mac, list, fname, 1, 0));
}

LispObj *
Lisp_StringRightTrim(LispMac *mac, LispObj *list, char *fname)
{
    return (_LispStringDoTrim(mac, list, fname, 0, 1));
}

LispObj *
Lisp_StringEqual_(LispMac *mac, LispObj *list, char *fname)
{
    char *string1, *string2;
    int start1, end1, start2, end2, len;

    _LispGetStringArgs(mac, list, fname, &string1, &string2,
		       &start1, &end1, &start2, &end2);

    len = end1 - start1;

    if (len != (end2 - start2) ||
	strncmp(string1 + start1, string2 + start2, len))
	return (NIL);

    return (T);
}

/* Note, most functions bellow also compare with the ending '\0'.
 * This is expected, to avoid an extra if */
LispObj *
Lisp_StringLess(LispMac *mac, LispObj *list, char *fname)
{
    char *string1, *string2;
    int start1, end1, start2, end2, c1, c2;

    _LispGetStringArgs(mac, list, fname, &string1, &string2,
		       &start1, &end1, &start2, &end2);

    string1 += start1;
    string2 += start2;

    for (c1 = start1, c2 = start2; c1 <= end1 && c2 <= end2;
	 c1++, c2++, string1++, string2++)
	if (*string1 < *string2)
	    return (REAL(c1));
	else if (*string1 != *string2)
	    break;

    return (NIL);
}

LispObj *
Lisp_StringGreater(LispMac *mac, LispObj *list, char *fname)
{
    char *string1, *string2;
    int start1, end1, start2, end2, c1, c2;

    _LispGetStringArgs(mac, list, fname, &string1, &string2,
		       &start1, &end1, &start2, &end2);

    string1 += start1;
    string2 += start2;

    for (c1 = start1, c2 = start2; c1 <= end1 && c2 <= end2;
	 c1++, c2++, string1++, string2++)
	if (*string1 > *string2)
	    return (REAL(c1));
	else if (*string1 != *string2)
	    break;

    return (NIL);
}

LispObj *
Lisp_StringLessEqual(LispMac *mac, LispObj *list, char *fname)
{
    char *string1, *string2;
    int start1, end1, start2, end2, c1, c2;

    _LispGetStringArgs(mac, list, fname, &string1, &string2,
		       &start1, &end1, &start2, &end2);

    string1 += start1;
    string2 += start2;

    for (c1 = start1, c2 = start2; c1 <= end1 && c2 <= end2;
	 c1++, c2++, string1++, string2++)
	if (*string1 < *string2)
	    return (REAL(c1));
	else if (*string1 != *string2)
	    return (NIL);
	else if (!*string1)
	    break;

    return (REAL(c1));
}

LispObj *
Lisp_StringGreaterEqual(LispMac *mac, LispObj *list, char *fname)
{
    char *string1, *string2;
    int start1, end1, start2, end2, c1, c2;

    _LispGetStringArgs(mac, list, fname, &string1, &string2,
		       &start1, &end1, &start2, &end2);

    string1 += start1;
    string2 += start2;

    for (c1 = start1, c2 = start2; c1 <= end1 && c2 <= end2;
	 c1++, c2++, string1++, string2++)
	if (*string1 > *string2)
	    return (REAL(c1));
	else if (*string1 != *string2)
	    return (NIL);
	else if (!*string1)
	    break;

    return (REAL(c1));
}

LispObj *
Lisp_StringNotEqual_(LispMac *mac, LispObj *list, char *fname)
{
    char *string1, *string2;
    int start1, end1, start2, end2, c1, c2;

    _LispGetStringArgs(mac, list, fname, &string1, &string2,
		       &start1, &end1, &start2, &end2);

    string1 += start1;
    string2 += start2;

    for (c1 = start1, c2 = start2; c1 <= end1 && c2 <= end2;
	 c1++, c2++, string1++, string2++)
	if (*string1 != *string2)
	    return (REAL(c1));

    return (NIL);
}

LispObj *
Lisp_StringEqual(LispMac *mac, LispObj *list, char *fname)
{
    char *string1, *string2;
    int start1, end1, start2, end2, len;

    _LispGetStringArgs(mac, list, fname, &string1, &string2,
		       &start1, &end1, &start2, &end2);

    len = end1 - start1;

    if (len != (end2 - start2) ||
	strncasecmp(string1 + start1, string2 + start2, len))
	return (NIL);

    return (T);
}

LispObj *
Lisp_StringLessp(LispMac *mac, LispObj *list, char *fname)
{
    char *string1, *string2;
    int start1, end1, start2, end2, c1, c2, ch1, ch2;

    _LispGetStringArgs(mac, list, fname, &string1, &string2,
		       &start1, &end1, &start2, &end2);

    string1 += start1;
    string2 += start2;

    for (c1 = start1, c2 = start2; c1 <= end1 && c2 <= end2;
	 c1++, c2++, string1++, string2++) {
	ch1 = toupper(*string1);
	ch2 = toupper(*string2);
	if (ch1 < ch2)
	    return (REAL(c1));
	else if (ch1 != ch2)
	    break;
    }

    return (NIL);
}

LispObj *
Lisp_StringGreaterp(LispMac *mac, LispObj *list, char *fname)
{
    char *string1, *string2;
    int start1, end1, start2, end2, c1, c2, ch1, ch2;

    _LispGetStringArgs(mac, list, fname, &string1, &string2,
		       &start1, &end1, &start2, &end2);

    string1 += start1;
    string2 += start2;

    for (c1 = start1, c2 = start2; c1 <= end1 && c2 <= end2;
	 c1++, c2++, string1++, string2++) {
	ch1 = toupper(*string1);
	ch2 = toupper(*string2);
	if (ch1 > ch2)
	    return (REAL(c1));
	else if (ch1 != ch2)
	    break;
    }

    return (NIL);
}

LispObj *
Lisp_StringNotGreaterp(LispMac *mac, LispObj *list, char *fname)
{
    char *string1, *string2;
    int start1, end1, start2, end2, c1, c2, ch1, ch2;

    _LispGetStringArgs(mac, list, fname, &string1, &string2,
		       &start1, &end1, &start2, &end2);

    string1 += start1;
    string2 += start2;

    for (c1 = start1, c2 = start2; c1 <= end1 && c2 <= end2;
	 c1++, c2++, string1++, string2++) {
	ch1 = toupper(*string1);
	ch2 = toupper(*string2);
	if (ch1 < ch2)
	    return (REAL(c1));
	else if (ch1 != ch2)
	    return (NIL);
	else if (!*string1)
	    break;
    }

    return (REAL(c1));
}

LispObj *
Lisp_StringNotLessp(LispMac *mac, LispObj *list, char *fname)
{
    char *string1, *string2;
    int start1, end1, start2, end2, c1, c2, ch1, ch2;

    _LispGetStringArgs(mac, list, fname, &string1, &string2,
		       &start1, &end1, &start2, &end2);

    string1 += start1;
    string2 += start2;

    for (c1 = start1, c2 = start2; c1 <= end1 && c2 <= end2;
	 c1++, c2++, string1++, string2++) {
	ch1 = toupper(*string1);
	ch2 = toupper(*string2);
	if (ch1 > ch2)
	    return (REAL(c1));
	else if (ch1 != ch2)
	    return (NIL);
	else if (!*string1)
	    break;
    }

    return (REAL(c1));
}

LispObj *
Lisp_StringNotEqual(LispMac *mac, LispObj *list, char *fname)
{
    char *string1, *string2;
    int start1, end1, start2, end2, c1, c2;

    _LispGetStringArgs(mac, list, fname, &string1, &string2,
		       &start1, &end1, &start2, &end2);

    string1 += start1;
    string2 += start2;

    for (c1 = start1, c2 = start2; c1 <= end1 && c2 <= end2;
	 c1++, c2++, string1++, string2++)
	if (toupper(*string1) != toupper(*string2))
	    return (REAL(c1));

    return (NIL);
}

LispObj *
Lisp_StringUpcase(LispMac *mac, LispObj *list, char *fname)
{
    LispObj *res;
    char *string, *str;
    int start, end, c, done;

    _LispGetStringCaseArgs(mac, list, fname, &string, &start, &end);

    /* first check if something need to be done */
    for (done = 1, c = start; c < end; c++)
	if (string[c] != toupper(string[c])) {
	    done = 0;
	    break;
	}

    if (done)
	return (CAR(list));

    /* upcase a copy of argument */
    str = LispStrdup(mac, string);
    for (c = start; c < end; c++)
	str[c] = toupper(str[c]);

    res = STRING(str);
    LispFree(mac, str);

    return (res);
}

LispObj *
Lisp_StringDowncase(LispMac *mac, LispObj *list, char *fname)
{
    LispObj *res;
    char *string, *str;
    int start, end, c, done;

    _LispGetStringCaseArgs(mac, list, fname, &string, &start, &end);

    /* first check if something need to be done */
    for (done = 1, c = start; c < end; c++)
	if (string[c] != tolower(string[c])) {
	    done = 0;
	    break;
	}

    if (done)
	return (CAR(list));

    /* downcase a copy of argument */
    str = LispStrdup(mac, string);
    for (c = start; c < end; c++)
	str[c] = tolower(str[c]);

    res = STRING(str);
    LispFree(mac, str);

    return (res);
}

LispObj *
Lisp_StringCapitalize(LispMac *mac, LispObj *list, char *fname)
{
    LispObj *res;
    char *string, *str;
    int start, end, c, done, up;

    _LispGetStringCaseArgs(mac, list, fname, &string, &start, &end);

    /* first check if something need to be done */
    for (done = up = 1, c = start; c < end; c++) {
	if (up) {
	    if (!isalpha(string[c]))
		continue;
	    if (string[c] != toupper(string[c])) {
		done = 0;
		break;
	    }
	    up = 0;
	}
	else {
	    if (isalpha(string[c])) {
		if (string[c] != tolower(string[c])) {
		    done = 0;
		    break;
		}
	    }
	    else
		up = 1;
	}
    }

    if (done)
	return (CAR(list));

    /* capitalize a copy of argument */
    str = LispStrdup(mac, string);
    for (up = 1, c = start; c < end; c++) {
	if (up) {
	    if (!isalpha(str[c]))
		continue;
	    str[c] = toupper(str[c]);
	    up = 0;
	}
	else {
	    if (isalpha(string[c]))
		str[c] = tolower(str[c]);
	    else
		up = 1;
	}
    }

    res = STRING(str);
    LispFree(mac, str);

    return (res);
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/string.c,v 1.26 2003/11/27 17:28:43 paulo Exp $ */
d32 2
a33 4
#include "lisp/helper.h"
#include "lisp/read.h"
#include "lisp/string.h"
#include "lisp/private.h"
d36 20
a55 19
#define CHAR_LESS		1
#define CHAR_LESS_EQUAL		2
#define CHAR_EQUAL		3
#define CHAR_GREATER_EQUAL	4
#define CHAR_GREATER		5
#define CHAR_NOT_EQUAL		6

#define CHAR_ALPHAP		1
#define CHAR_DOWNCASE		2
#define CHAR_UPCASE		3
#define CHAR_INT		4
#define CHAR_BOTHP		5
#define CHAR_UPPERP		6
#define CHAR_LOWERP		7
#define CHAR_GRAPHICP		8

#ifndef MIN
#define MIN(a, b)		((a) < (b) ? (a) : (b))
#endif
d57 2
a58 10
/*
 * Prototypes
 */
static LispObj *LispCharCompare(LispBuiltin*, int, int);
static LispObj *LispStringCompare(LispBuiltin*, int, int);
static LispObj *LispCharOp(LispBuiltin*, int);
static LispObj *LispStringTrim(LispBuiltin*, int, int, int);
static LispObj *LispStringUpcase(LispBuiltin*, int);
static LispObj *LispStringDowncase(LispBuiltin*, int);
static LispObj *LispStringCapitalize(LispBuiltin*, int);
d60 2
a61 2
/*
 * Implementation
d63 2
a64 2
static LispObj *
LispCharCompare(LispBuiltin *builtin, int operation, int ignore_case)
d66 3
a68 2
    LispObj *object;
    int cmp, value, next_value;
d70 18
a87 1
    LispObj *character, *more_characters;
d89 1
a89 32
    more_characters = ARGUMENT(1);
    character = ARGUMENT(0);

    CHECK_SCHAR(character);
    value = SCHAR_VALUE(character);
    if (ignore_case && islower(value))
	value = toupper(value);

    if (!CONSP(more_characters))
	return (T);

    /* First check if all parameters are characters */
    for (object = more_characters; CONSP(object); object = CDR(object))
	CHECK_SCHAR(CAR(object));

    /* All characters in list must be different */
    if (operation == CHAR_NOT_EQUAL) {
	/* Compare all characters */
	do {
	    for (object = more_characters; CONSP(object); object = CDR(object)) {
		character = CAR(object);
		next_value = SCHAR_VALUE(character);
		if (ignore_case && islower(next_value))
		    next_value = toupper(next_value);
		if (value == next_value)
		    return (NIL);
	    }
	    value = SCHAR_VALUE(CAR(more_characters));
	    if (ignore_case && islower(value))
		value = toupper(value);
	    more_characters = CDR(more_characters);
	} while (CONSP(more_characters));
d91 2
a92 2
	return (T);
    }
d94 2
a95 15
    /* Linearly compare characters */
    for (; CONSP(more_characters); more_characters = CDR(more_characters)) {
	character = CAR(more_characters);
	next_value = SCHAR_VALUE(character);
	if (ignore_case && islower(next_value))
	    next_value = toupper(next_value);

	switch (operation) {
	    case CHAR_LESS:		cmp = value < next_value;	break;
	    case CHAR_LESS_EQUAL:	cmp = value <= next_value;	break;
	    case CHAR_EQUAL:		cmp = value == next_value;	break;
	    case CHAR_GREATER_EQUAL:	cmp = value >= next_value;	break;
	    case CHAR_GREATER:		cmp = value > next_value;	break;
	    default:			cmp = 0;			break;
	}
d97 2
a98 4
	if (!cmp)
	    return (NIL);
	value = next_value;
    }
d100 1
a100 1
    return (T);
d104 1
a104 4
Lisp_CharLess(LispBuiltin *builtin)
/*
 char< character &rest more-characters
 */
d106 1
a106 1
    return (LispCharCompare(builtin, CHAR_LESS, 0));
d110 1
a110 4
Lisp_CharLessEqual(LispBuiltin *builtin)
/*
 char<= character &rest more-characters
 */
d112 1
a112 1
    return (LispCharCompare(builtin, CHAR_LESS_EQUAL, 0));
d116 1
a116 4
Lisp_CharEqual_(LispBuiltin *builtin)
/*
 char= character &rest more-characters
 */
d118 1
a118 1
    return (LispCharCompare(builtin, CHAR_EQUAL, 0));
d122 1
a122 4
Lisp_CharGreater(LispBuiltin *builtin)
/*
 char> character &rest more-characters
 */
d124 1
a124 1
    return (LispCharCompare(builtin, CHAR_GREATER, 0));
d128 1
a128 4
Lisp_CharGreaterEqual(LispBuiltin *builtin)
/*
 char>= character &rest more-characters
 */
d130 1
a130 1
    return (LispCharCompare(builtin, CHAR_GREATER_EQUAL, 0));
d134 1
a134 4
Lisp_CharNotEqual_(LispBuiltin *builtin)
/*
 char/= character &rest more-characters
 */
d136 1
a136 1
    return (LispCharCompare(builtin, CHAR_NOT_EQUAL, 0));
d140 1
a140 4
Lisp_CharLessp(LispBuiltin *builtin)
/*
 char-lessp character &rest more-characters
 */
d142 1
a142 1
    return (LispCharCompare(builtin, CHAR_LESS, 1));
d146 1
a146 4
Lisp_CharNotGreaterp(LispBuiltin *builtin)
/*
 char-not-greaterp character &rest more-characters
 */
d148 1
a148 1
    return (LispCharCompare(builtin, CHAR_LESS_EQUAL, 1));
d152 1
a152 4
Lisp_CharEqual(LispBuiltin *builtin)
/*
 char-equalp character &rest more-characters
 */
d154 1
a154 1
    return (LispCharCompare(builtin, CHAR_EQUAL, 1));
d158 1
a158 4
Lisp_CharGreaterp(LispBuiltin *builtin)
/*
 char-greaterp character &rest more-characters
 */
d160 1
a160 1
    return (LispCharCompare(builtin, CHAR_GREATER, 1));
d164 1
a164 4
Lisp_CharNotLessp(LispBuiltin *builtin)
/*
 char-not-lessp &rest more-characters
 */
d166 1
a166 1
    return (LispCharCompare(builtin, CHAR_GREATER_EQUAL, 1));
d170 1
a170 4
Lisp_CharNotEqual(LispBuiltin *builtin)
/*
 char-not-equal character &rest more-characters
 */
d172 1
a172 1
    return (LispCharCompare(builtin, CHAR_NOT_EQUAL, 1));
d175 2
a176 2
static LispObj *
LispCharOp(LispBuiltin *builtin, int operation)
d178 1
a178 2
    int value;
    LispObj *result, *character;
d180 7
a186 3
    character = ARGUMENT(0);
    CHECK_SCHAR(character);
    value = (int)SCHAR_VALUE(character);
d188 2
a189 28
    switch (operation) {
	case CHAR_ALPHAP:
	    result = isalpha(value) ? T : NIL;
	    break;
	case CHAR_DOWNCASE:
	    result = SCHAR(tolower(value));
	    break;
	case CHAR_UPCASE:
	    result = SCHAR(toupper(value));
	    break;
	case CHAR_INT:
	    result = FIXNUM(value);
	    break;
	case CHAR_BOTHP:
	    result = isupper(value) || islower(value) ? T : NIL;
	    break;
	case CHAR_UPPERP:
	    result = isupper(value) ? T : NIL;
	    break;
	case CHAR_LOWERP:
	    result = islower(value) ? T : NIL;
	    break;
	case CHAR_GRAPHICP:
	    result = value == ' ' || isgraph(value) ? T : NIL;
	    break;
	default:
	    result = NIL;
	    break;
d192 5
a196 1
    return (result);
d200 1
a200 4
Lisp_AlphaCharP(LispBuiltin *builtin)
/*
 alpha-char-p char
 */
d202 12
a213 1
    return (LispCharOp(builtin, CHAR_ALPHAP));
d217 1
a217 4
Lisp_CharDowncase(LispBuiltin *builtin)
/*
 char-downcase character
 */
d219 7
a225 1
    return (LispCharOp(builtin, CHAR_DOWNCASE));
d229 1
a229 5
Lisp_CharInt(LispBuiltin *builtin)
/*
 char-int character
 char-code character
 */
d231 12
a242 1
    return (LispCharOp(builtin, CHAR_INT));
d246 1
a246 4
Lisp_CharUpcase(LispBuiltin *builtin)
/*
 char-upcase character
 */
d248 8
a255 2
    return (LispCharOp(builtin, CHAR_UPCASE));
}
d257 1
a257 7
LispObj *
Lisp_BothCaseP(LispBuiltin *builtin)
/*
 both-case-p character
 */
{
    return (LispCharOp(builtin, CHAR_BOTHP));
d261 1
a261 4
Lisp_UpperCaseP(LispBuiltin *builtin)
/*
 upper-case-p character
 */
d263 1
a263 2
    return (LispCharOp(builtin, CHAR_UPPERP));
}
d265 6
a270 8
LispObj *
Lisp_LowerCaseP(LispBuiltin *builtin)
/*
 upper-case-p character
 */
{
    return (LispCharOp(builtin, CHAR_LOWERP));
}
d272 8
a279 7
LispObj *
Lisp_GraphicCharP(LispBuiltin *builtin)
/*
 graphic-char-p char
 */
{
    return (LispCharOp(builtin, CHAR_GRAPHICP));
d283 1
a283 5
Lisp_Char(LispBuiltin *builtin)
/*
 char string index
 schar simple-string index
 */
d285 23
a307 2
    unsigned char *string;
    long offset, length;
d309 21
a329 1
    LispObj *ostring, *oindex;
d331 4
a334 2
    oindex = ARGUMENT(1);
    ostring = ARGUMENT(0);
d336 16
a351 12
    CHECK_STRING(ostring);
    CHECK_INDEX(oindex);
    offset = FIXNUM_VALUE(oindex);
    string = (unsigned char*)THESTR(ostring);
    length = STRLEN(ostring);

    if (offset >= length)
	LispDestroy("%s: index %ld too large for string length %ld",
		    STRFUN(builtin), offset, length);

    return (SCHAR(string[offset]));
}
d353 2
a354 12
/* helper function for setf
 *	DONT explicitly call. Non standard function
 */
LispObj *
Lisp_XeditCharStore(LispBuiltin *builtin)
/*
 xedit::char-store string index value
 */
{
    int character;
    long offset, length;
    LispObj *ostring, *oindex, *ovalue;
d356 1
a356 3
    ovalue = ARGUMENT(2);
    oindex = ARGUMENT(1);
    ostring = ARGUMENT(0);
d358 3
a360 9
    CHECK_STRING(ostring);
    CHECK_INDEX(oindex);
    length = STRLEN(ostring);
    offset = FIXNUM_VALUE(oindex);
    if (offset >= length)
	LispDestroy("%s: index %ld too large for string length %ld",
		    STRFUN(builtin), offset, length);
    CHECK_SCHAR(ovalue);
    CHECK_STRING_WRITABLE(ostring);
d362 4
a365 1
    character = SCHAR_VALUE(ovalue);
d367 4
a370 3
    if (character < 0 || character > 255)
	LispDestroy("%s: cannot represent character %d",
		    STRFUN(builtin), character);
d372 2
a373 1
    THESTR(ostring)[offset] = character;
d375 4
a378 1
    return (ovalue);
d382 1
a382 4
Lisp_Character(LispBuiltin *builtin)
/*
 character object
 */
d384 1
a384 5
    LispObj *object;

    object = ARGUMENT(0);

    return (LispCharacterCoerce(builtin, object));
d388 1
a388 4
Lisp_Characterp(LispBuiltin *builtin)
/*
 characterp object
 */
d390 1
a390 5
    LispObj *object;

    object = ARGUMENT(0);

    return (SCHARP(object) ? T : NIL);
d394 1
a394 4
Lisp_DigitChar(LispBuiltin *builtin)
/*
 digit-char weight &optional radix
 */
d396 2
a397 2
    long radix = 10, weight;
    LispObj *oweight, *oradix, *result = NIL;
d399 2
a400 2
    oradix = ARGUMENT(1);
    oweight = ARGUMENT(0);
d402 1
a402 2
    CHECK_FIXNUM(oweight);
    weight = FIXNUM_VALUE(oweight);
d404 3
a406 15
    if (oradix != UNSPEC) {
	CHECK_INDEX(oradix);
	radix = FIXNUM_VALUE(oradix);
    }
    if (radix < 2 || radix > 36)
	LispDestroy("%s: radix must be >= 2 and <= 36, not %ld",
		    STRFUN(builtin), radix);

    if (weight >= 0 && weight < radix) {
	if (weight < 9)
	    weight += '0';
	else
	    weight += 'A' - 10;
	result = SCHAR(weight);
    }
d408 1
a408 1
    return (result);
d411 2
d414 1
a414 4
Lisp_DigitCharP(LispBuiltin *builtin)
/*
 digit-char-p character &optional radix
 */
d416 2
a417 2
    long radix = 10, character;
    LispObj *ochar, *oradix, *result = NIL;
d419 2
a420 2
    oradix = ARGUMENT(1);
    ochar = ARGUMENT(0);
d422 11
a432 20
    CHECK_SCHAR(ochar);
    character = SCHAR_VALUE(ochar);
    if (oradix != UNSPEC) {
	CHECK_INDEX(oradix);
	radix = FIXNUM_VALUE(oradix);
    }
    if (radix < 2 || radix > 36)
	LispDestroy("%s: radix must be >= 2 and <= 36, not %ld",
		    STRFUN(builtin), radix);

    if (character >= '0' && character <= '9')
	character -= '0';
    else if (character >= 'A' && character <= 'Z')
	character -= 'A' - 10;
    else if (character >= 'a' && character <= 'z')
	character -= 'a' - 10;
    if (character < radix)
	result = FIXNUM(character);

    return (result);
d436 1
a436 5
Lisp_IntChar(LispBuiltin *builtin)
/*
 int-char integer
 code-char integer
 */
d438 2
a439 2
    long character = 0;
    LispObj *integer;
d441 2
a442 1
    integer = ARGUMENT(0);
d444 2
a445 2
    CHECK_FIXNUM(integer);
    character = FIXNUM_VALUE(integer);
d447 8
a454 1
    return (character >= 0 && character < 0xff ? SCHAR(character) : NIL);
a456 1
/* XXX ignoring element-type */
d458 1
a458 4
Lisp_MakeString(LispBuiltin *builtin)
/*
 make-string size &key initial-element element-type
 */
d460 2
a461 2
    long length;
    char *string, initial;
d463 2
a464 1
    LispObj *size, *initial_element;
d466 2
a467 2
    initial_element = ARGUMENT(1);
    size = ARGUMENT(0);
d469 8
a476 12
    CHECK_INDEX(size);
    length = FIXNUM_VALUE(size);
    if (initial_element != UNSPEC) {
	CHECK_SCHAR(initial_element);
	initial = SCHAR_VALUE(initial_element);
    }
    else
	initial = 0;

    string = LispMalloc(length + 1);
    memset(string, initial, length);
    string[length] = '\0';
d478 1
a478 1
    return (LSTRING2(string, length));
d482 1
a482 4
Lisp_ParseInteger(LispBuiltin *builtin)
/*
 parse-integer string &key start end radix junk-allowed
 */
d484 5
a488 45
    GC_ENTER();
    char *ptr, *string;
    int character, junk, sign, overflow;
    long i, start, end, radix, length, integer, check;
    LispObj *result;

    LispObj *ostring, *ostart, *oend, *oradix, *junk_allowed;

    junk_allowed = ARGUMENT(4);
    oradix = ARGUMENT(3);
    oend = ARGUMENT(2);
    ostart = ARGUMENT(1);
    ostring = ARGUMENT(0);

    start = end = radix = 0;
    result = NIL;

    CHECK_STRING(ostring);
    LispCheckSequenceStartEnd(builtin, ostring, ostart, oend,
			      &start, &end, &length);
    string = THESTR(ostring);
    if (oradix == UNSPEC)
	radix = 10;
    else {
	CHECK_INDEX(oradix);
	radix = FIXNUM_VALUE(oradix);
    }
    if (radix < 2 || radix > 36)
	LispDestroy("%s: :RADIX %ld must be in the range 2 to 36",
		    STRFUN(builtin), radix);

    integer = check = 0;
    ptr = string + start;
    sign = overflow = 0;

    /* Skip leading white spaces */
    for (i = start; i < end && *ptr && isspace(*ptr); ptr++, i++)
	;

    /* Check for sign specification */
    if (i < end && (*ptr == '-' || *ptr == '+')) {
	sign = *ptr == '-';
	++ptr;
	++i;
    }
d490 2
a491 25
    for (junk = 0; i < end; i++, ptr++) {
	character = *ptr;
	if (islower(character))
	    character = toupper(character);
	if (character >= '0' && character <= '9') {
	    if (character - '0' >= radix)
		junk = 1;
	    else {
		check = integer;
		integer = integer * radix + character - '0';
	    }
	}
	else if (character >= 'A' && character <= 'Z') {
	    if (character - 'A' + 10 >= radix)
		junk = 1;
	    else {
		check = integer;
		integer = integer * radix + character - 'A' + 10;
	    }
	}
	else {
	    if (isspace(character))
		break;
	    junk = 1;
	}
d493 7
a499 1
	if (junk)
d502 1
a502 39
	if (!overflow && check > integer)
	    overflow = 1;
	/* keep looping just to count read bytes */
    }

    if (!junk)
	/* Skip white spaces */
	for (; i < end && *ptr && isspace(*ptr); ptr++, i++)
	    ;

    if ((junk || ptr == string) &&
	(junk_allowed == UNSPEC || junk_allowed == NIL))
	LispDestroy("%s: %s has a bad integer representation",
		    STRFUN(builtin), STROBJ(ostring));
    else if (ptr == string)
	result = NIL;
    else if (overflow) {
	mpi *bigi = LispMalloc(sizeof(mpi));
	char *str;

	length = end - start + sign;
	str = LispMalloc(length + 1);

	strncpy(str, string - sign, length + sign);
	str[length + sign] = '\0';
	mpi_init(bigi);
	mpi_setstr(bigi, str, radix);
	LispFree(str);
	result = BIGNUM(bigi);
    }
    else
	result = INTEGER(sign ? -integer : integer);

    GC_PROTECT(result);
    RETURN(0) = FIXNUM(i);
    RETURN_COUNT = 1;
    GC_LEAVE();

    return (result);
d506 1
a506 4
Lisp_String(LispBuiltin *builtin)
/*
 string object
 */
d508 2
a509 1
    LispObj *object;
d511 2
a512 1
    object = ARGUMENT(0);
d514 2
a515 2
    return (LispStringCoerce(builtin, object));
}
d517 4
a520 7
LispObj *
Lisp_Stringp(LispBuiltin *builtin)
/*
 stringp object
 */
{
    LispObj *object;
d522 1
a522 3
    object = ARGUMENT(0);

    return (STRINGP(object) ? T : NIL);
a524 1
/* XXX preserve-whitespace is being ignored */
d526 1
a526 4
Lisp_ReadFromString(LispBuiltin *builtin)
/*
 read-from-string string &optional eof-error-p eof-value &key start end preserve-whitespace
 */
d528 2
a529 4
    GC_ENTER();
    char *string;
    LispObj *stream, *result;
    long length, start, end, bytes_read;
d531 2
a532 1
    LispObj *ostring, *eof_error_p, *eof_value, *ostart, *oend;
d534 1
a534 31
    oend = ARGUMENT(4);
    ostart = ARGUMENT(3);
    eof_value = ARGUMENT(2);
    eof_error_p = ARGUMENT(1);
    ostring = ARGUMENT(0);

    CHECK_STRING(ostring);
    string = THESTR(ostring);
    LispCheckSequenceStartEnd(builtin, ostring, ostart, oend,
			      &start, &end, &length);

    if (start > 0 || end < length)
	length = end - start;
    stream = LSTRINGSTREAM(string + start, STREAM_READ, length);

    if (eof_value == UNSPEC)
	eof_value = NIL;

    LispPushInput(stream);
    result = LispRead();
    /* stream->data.stream.source.string->input is
     * the offset of the last byte read in string */
    bytes_read = stream->data.stream.source.string->input;
    LispPopInput(stream);

    if (result == NULL) {
	if (eof_error_p == NIL)
	    result = eof_value;
	else
	    LispDestroy("%s: unexpected end of input", STRFUN(builtin));
    }
d536 3
a538 30
    GC_PROTECT(result);
    RETURN(0) = FIXNUM(start + bytes_read);
    RETURN_COUNT = 1;
    GC_LEAVE();

    return (result);
}

static LispObj *
LispStringTrim(LispBuiltin *builtin, int left, int right, int inplace)
/*
 string-{,left-,right-}trim character-bag string
*/
{
    unsigned char *string;
    long start, end, length;

    LispObj *ochars, *ostring;

    ostring = ARGUMENT(1);
    ochars = ARGUMENT(0);

    if (!POINTERP(ochars) || !(XSTRINGP(ochars) || XCONSP(ochars))) {
	if (ARRAYP(ochars) && ochars->data.array.rank == 1)
	    ochars = ochars->data.array.list;
	else
	    LispDestroy("%s: %s is not a sequence",
			STRFUN(builtin), STROBJ(ochars));
    }
    CHECK_STRING(ostring);
d540 2
a541 2
    string = (unsigned char*)THESTR(ostring);
    length = STRLEN(ostring);
d543 5
a547 54
    start = 0;
    end = length;

    if (XSTRINGP(ochars)) {
	unsigned char *chars = (unsigned char*)THESTR(ochars);
	long i, clength = STRLEN(ochars);

	if (left) {
	    for (; start < end; start++) {
		for (i = 0; i < clength; i++)
		    if (string[start] == chars[i])
			break;
		if (i >= clength)
		    break;
	    }
	}
	if (right) {
	    for (--end; end >= 0; end--) {
		for (i = 0; i < clength; i++)
		    if (string[end] == chars[i])
			break;
		if (i >= clength)
		    break;
	    }
	    ++end;
	}
    }
    else {
	LispObj *ochar, *list;

	if (left) {
	    for (; start < end; start++) {
		for (list = ochars; CONSP(list); list = CDR(list)) {
		    ochar = CAR(list);
		    if (SCHARP(ochar) && string[start] == SCHAR_VALUE(ochar))
			break;
		}
		if (!CONSP(list))
		    break;
	    }
	}
	if (right) {
	    for (--end; end >= 0; end--) {
		for (list = ochars; CONSP(list); list = CDR(list)) {
		    ochar = CAR(list);
		    if (SCHARP(ochar) && string[end] == SCHAR_VALUE(ochar))
			break;
		}
		if (!CONSP(list))
		    break;
	    }
	    ++end;
	}
    }
d549 2
a550 2
    if (start == 0 && end == length)
	return (ostring);
d552 2
a553 1
    length = end - start;
d555 8
a562 11
    if (inplace) {
	CHECK_STRING_WRITABLE(ostring);
	memmove(string, string + start, length);
	string[length] = '\0';
	STRLEN(ostring) = length;
    }
    else {
	string = LispMalloc(length + 1);
	memcpy(string, THESTR(ostring) + start, length);
	string[length] = '\0';
	ostring = LSTRING2((char*)string, length);
d565 1
a565 1
    return (ostring);
d569 1
a569 4
Lisp_StringTrim(LispBuiltin *builtin)
/*
 string-trim character-bag string
 */
d571 2
a572 2
    return (LispStringTrim(builtin, 1, 1, 0));
}
d574 2
a575 8
LispObj *
Lisp_NstringTrim(LispBuiltin *builtin)
/*
 ext::nstring-trim character-bag string
 */
{
    return (LispStringTrim(builtin, 1, 1, 1));
}
d577 2
a578 8
LispObj *
Lisp_StringLeftTrim(LispBuiltin *builtin)
/*
 string-left-trim character-bag string
 */
{
    return (LispStringTrim(builtin, 1, 0, 0));
}
d580 9
a588 8
LispObj *
Lisp_NstringLeftTrim(LispBuiltin *builtin)
/*
 ext::nstring-left-trim character-bag string
 */
{
    return (LispStringTrim(builtin, 1, 0, 1));
}
d590 1
a590 7
LispObj *
Lisp_StringRightTrim(LispBuiltin *builtin)
/*
 string-right-trim character-bag string
 */
{
    return (LispStringTrim(builtin, 0, 1, 0));
d594 1
a594 10
Lisp_NstringRightTrim(LispBuiltin *builtin)
/*
 ext::nstring-right-trim character-bag string
 */
{
    return (LispStringTrim(builtin, 0, 1, 1));
}

static LispObj *
LispStringCompare(LispBuiltin *builtin, int function, int ignore_case)
d596 2
a597 4
    int cmp1, cmp2;
    LispObj *fixnum;
    unsigned char *string1, *string2;
    long start1, end1, start2, end2, offset, length;
d599 2
a600 2
    LispGetStringArgs(builtin, (char**)&string1, (char**)&string2,
		      &start1, &end1, &start2, &end2);
d605 7
a611 4
    if (function == CHAR_EQUAL) {
	length = end1 - start1;

	if (length != (end2 - start2))
d613 2
a614 8

	if (!ignore_case)
	    return (memcmp(string1, string2, length) ? NIL : T);

	for (; length; length--, string1++, string2++)
	    if (toupper(*string1) != toupper(*string2))
		return (NIL);
	return (T);
d617 1
a617 53
    end1 -= start1;
    end2 -= start2;
    length = MIN(end1, end2);
    for (offset = 0;
	 offset < length;
	 string1++, string2++, offset++, start1++, start2++) {
	cmp1 = *string1;
	cmp2 = *string2;
	if (ignore_case) {
	    cmp1 = toupper(cmp1);
	    cmp2 = toupper(cmp2);
	}
	if (cmp1 != cmp2) {
	    fixnum = FIXNUM(start1);
	    switch (function) {
		case CHAR_LESS:
		    return ((cmp1 < cmp2) ? fixnum : NIL);
		case CHAR_LESS_EQUAL:
		    return ((cmp1 <= cmp2) ? fixnum : NIL);
		case CHAR_NOT_EQUAL:
		    return (fixnum);
		case CHAR_GREATER_EQUAL:
		    return ((cmp1 >= cmp2) ? fixnum : NIL);
		case CHAR_GREATER:
		    return ((cmp1 > cmp2) ? fixnum : NIL);
	    }
	}
    }

    fixnum = FIXNUM(start1);
    switch (function) {
	case CHAR_LESS:
	    return (start1 >= end1 && start2 < end2 ? fixnum : NIL);
	case CHAR_LESS_EQUAL:
	    return (start1 >= end1 ? fixnum : NIL);
	case CHAR_NOT_EQUAL:
	    return (start1 >= end1 && start2 >= end2 ? NIL : fixnum);
	case CHAR_GREATER_EQUAL:
	    return (start2 >= end2 ? fixnum : NIL);
	case CHAR_GREATER:
	    return (start2 >= end2 && start1 < end1 ? fixnum : NIL);
    }

    return (NIL);
}

LispObj *
Lisp_StringEqual_(LispBuiltin *builtin)
/*
 string= string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_EQUAL, 0));
d621 1
a621 4
Lisp_StringLess(LispBuiltin *builtin)
/*
 string< string1 string2 &key start1 end1 start2 end2
 */
d623 2
a624 2
    return (LispStringCompare(builtin, CHAR_LESS, 0));
}
d626 2
a627 8
LispObj *
Lisp_StringGreater(LispBuiltin *builtin)
/*
 string> string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_GREATER, 0));
}
d629 2
a630 8
LispObj *
Lisp_StringLessEqual(LispBuiltin *builtin)
/*
 string<= string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_LESS_EQUAL, 0));
}
d632 11
a642 8
LispObj *
Lisp_StringGreaterEqual(LispBuiltin *builtin)
/*
 string>= string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_GREATER_EQUAL, 0));
}
d644 1
a644 7
LispObj *
Lisp_StringNotEqual_(LispBuiltin *builtin)
/*
 string/= string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_NOT_EQUAL, 0));
d648 1
a648 4
Lisp_StringEqual(LispBuiltin *builtin)
/*
 string-equal string1 string2 &key start1 end1 start2 end2
 */
d650 2
a651 2
    return (LispStringCompare(builtin, CHAR_EQUAL, 1));
}
d653 2
a654 8
LispObj *
Lisp_StringLessp(LispBuiltin *builtin)
/*
 string-lessp string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_LESS, 1));
}
d656 2
a657 8
LispObj *
Lisp_StringGreaterp(LispBuiltin *builtin)
/*
 string-greaterp string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_GREATER, 1));
}
d659 4
a662 8
LispObj *
Lisp_StringNotGreaterp(LispBuiltin *builtin)
/*
 string-not-greaterp string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_LESS_EQUAL, 1));
}
d664 1
a664 7
LispObj *
Lisp_StringNotLessp(LispBuiltin *builtin)
/*
 string-not-lessp string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_GREATER_EQUAL, 1));
d668 1
a668 4
Lisp_StringNotEqual(LispBuiltin *builtin)
/*
 string-not-equal string1 string2 &key start1 end1 start2 end2
 */
d670 3
a672 2
    return (LispStringCompare(builtin, CHAR_NOT_EQUAL, 1));
}
d674 1
a674 22
LispObj *
LispStringUpcase(LispBuiltin *builtin, int inplace)
/*
 string-upcase string &key start end
 nstring-upcase string &key start end
 */
{
    LispObj *result;
    char *string, *newstring;
    long start, end, length, offset;

    LispObj *ostring, *ostart, *oend;

    oend = ARGUMENT(2);
    ostart = ARGUMENT(1);
    ostring = ARGUMENT(0);
    CHECK_STRING(ostring);
    LispCheckSequenceStartEnd(builtin, ostring, ostart, oend,
			      &start, &end, &offset);
    result = ostring;
    string = THESTR(ostring);
    length = STRLEN(ostring);
d677 3
a679 2
    for (offset = start; offset < end; offset++)
	if (string[offset] != toupper(string[offset]))
d681 1
d683 2
a684 2
    if (offset >= end)
	return (result);
d686 4
a689 13
    if (inplace) {
	CHECK_STRING_WRITABLE(ostring);
	newstring = string;
    }
    else {
	/* upcase a copy of argument */
	newstring = LispMalloc(length + 1);
	if (offset)
	    memcpy(newstring, string, offset);
	if (length > end)
	    memcpy(newstring + end, string + end, length - end);
	newstring[length] = '\0';
    }
d691 2
a692 2
    for (; offset < end; offset++)
	newstring[offset] = toupper(string[offset]);
d694 1
a694 4
    if (!inplace)
	result = LSTRING2(newstring, length);

    return (result);
d698 1
a698 4
Lisp_StringUpcase(LispBuiltin *builtin)
/*
 string-upcase string &key start end
 */
d700 3
a702 11
    return (LispStringUpcase(builtin, 0));
}

LispObj *
Lisp_NstringUpcase(LispBuiltin *builtin)
/*
 nstring-upcase string &key start end
 */
{
    return (LispStringUpcase(builtin, 1));
}
d704 1
a704 22
LispObj *
LispStringDowncase(LispBuiltin *builtin, int inplace)
/*
 string-downcase string &key start end
 nstring-downcase string &key start end
 */
{
    LispObj *result;
    char *string, *newstring;
    long start, end, length, offset;

    LispObj *ostring, *ostart, *oend;

    oend = ARGUMENT(2);
    ostart = ARGUMENT(1);
    ostring = ARGUMENT(0);
    CHECK_STRING(ostring);
    LispCheckSequenceStartEnd(builtin, ostring, ostart, oend,
			      &start, &end, &offset);
    result = ostring;
    string = THESTR(ostring);
    length = STRLEN(ostring);
d707 3
a709 2
    for (offset = start; offset < end; offset++)
	if (string[offset] != tolower(string[offset]))
d711 1
d713 2
a714 2
    if (offset >= end)
	return (result);
d716 4
a719 15
    if (inplace) {
	CHECK_STRING_WRITABLE(ostring);
	newstring = string;
    }
    else {
	/* downcase a copy of argument */
	newstring = LispMalloc(length + 1);
	if (offset)
	    memcpy(newstring, string, offset);
	if (length > end)
	    memcpy(newstring + end, string + end, length - end);
	newstring[length] = '\0';
    }
    for (; offset < end; offset++)
	newstring[offset] = tolower(string[offset]);
d721 2
a722 2
    if (!inplace)
	result = LSTRING2(newstring, length);
d724 1
a724 1
    return (result);
d728 1
a728 4
Lisp_StringDowncase(LispBuiltin *builtin)
/*
 string-downcase string &key start end
 */
d730 3
a732 2
    return (LispStringDowncase(builtin, 0));
}
d734 1
a734 31
LispObj *
Lisp_NstringDowncase(LispBuiltin *builtin)
/*
 nstring-downcase string &key start end
 */
{
    return (LispStringDowncase(builtin, 1));
}

LispObj *
LispStringCapitalize(LispBuiltin *builtin, int inplace)
/*
 string-capitalize string &key start end
 nstring-capitalize string &key start end
 */
{
    LispObj *result;
    char *string, *newstring;
    long start, end, length, offset, upcase;

    LispObj *ostring, *ostart, *oend;

    oend = ARGUMENT(2);
    ostart = ARGUMENT(1);
    ostring = ARGUMENT(0);
    CHECK_STRING(ostring);
    LispCheckSequenceStartEnd(builtin, ostring, ostart, oend,
			      &start, &end, &offset);
    result = ostring;
    string = THESTR(ostring);
    length = STRLEN(ostring);
d737 3
a739 3
    for (upcase = 1, offset = start; offset < end; offset++) {
	if (upcase) {
	    if (!isalnum(string[offset]))
d741 2
a742 1
	    if (string[offset] != toupper(string[offset]))
d744 2
a745 1
	    upcase = 0;
d748 3
a750 2
	    if (isalnum(string[offset])) {
		if (string[offset] != tolower(string[offset]))
d752 1
d755 1
a755 1
		upcase = 1;
d759 2
a760 2
    if (offset >= end)
	return (result);
d762 5
a766 13
    if (inplace) {
	CHECK_STRING_WRITABLE(ostring);
	newstring = string;
    }
    else {
	/* capitalize a copy of argument */
	newstring = LispMalloc(length + 1);
	memcpy(newstring, string, length);
	newstring[length] = '\0';
    }
    for (; offset < end; offset++) {
	if (upcase) {
	    if (!isalnum(string[offset]))
d768 2
a769 2
	    newstring[offset] = toupper(string[offset]);
	    upcase = 0;
d772 2
a773 2
	    if (isalnum(newstring[offset]))
		newstring[offset] = tolower(string[offset]);
d775 1
a775 1
		upcase = 1;
d779 2
a780 57
    if (!inplace)
	result = LSTRING2(newstring, length);

    return (result);
}

LispObj *
Lisp_StringCapitalize(LispBuiltin *builtin)
/*
 string-capitalize string &key start end
 */
{
    return (LispStringCapitalize(builtin, 0));
}

LispObj *
Lisp_NstringCapitalize(LispBuiltin *builtin)
/*
 nstring-capitalize string &key start end
 */
{
    return (LispStringCapitalize(builtin, 1));
}

LispObj *
Lisp_StringConcat(LispBuiltin *builtin)
/*
 string-concat &rest strings
 */
{
    char *buffer;
    long size, length;
    LispObj *object, *string;

    LispObj *strings;

    strings = ARGUMENT(0);

    if (strings == NIL)
	return (STRING(""));

    for (length = 1, object = strings; CONSP(object); object = CDR(object)) {
	string = CAR(object);
	CHECK_STRING(string);
	length += STRLEN(string);
    }

    buffer = LispMalloc(length);

    for (length = 0, object = strings; CONSP(object); object = CDR(object)) {
	string = CAR(object);
	size = STRLEN(string);
	memcpy(buffer + length, THESTR(string), size);
	length += size;
    }
    buffer[length] = '\0';
    object = LSTRING2(buffer, length);
d782 1
a782 1
    return (object);
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/string.c,v 1.22 2002/12/04 05:27:58 paulo Exp $ */
a31 2
#include "helper.h"
#include "read.h"
d36 20
a55 19
#define CHAR_LESS		1
#define CHAR_LESS_EQUAL		2
#define CHAR_EQUAL		3
#define CHAR_GREATER_EQUAL	4
#define CHAR_GREATER		5
#define CHAR_NOT_EQUAL		6

#define CHAR_ALPHAP		1
#define CHAR_DOWNCASE		2
#define CHAR_UPCASE		3
#define CHAR_INT		4
#define CHAR_BOTHP		5
#define CHAR_UPPERP		6
#define CHAR_LOWERP		7
#define CHAR_GRAPHICP		8

#ifndef MIN
#define MIN(a, b)		((a) < (b) ? (a) : (b))
#endif
d57 2
a58 10
/*
 * Prototypes
 */
static LispObj *LispCharCompare(LispBuiltin*, int, int);
static LispObj *LispStringCompare(LispBuiltin*, int, int);
static LispObj *LispCharOp(LispBuiltin*, int);
static LispObj *LispStringTrim(LispBuiltin*, int, int, int);
static LispObj *LispStringUpcase(LispBuiltin*, int);
static LispObj *LispStringDowncase(LispBuiltin*, int);
static LispObj *LispStringCapitalize(LispBuiltin*, int);
d60 2
a61 2
/*
 * Implementation
d63 2
a64 2
static LispObj *
LispCharCompare(LispBuiltin *builtin, int operation, int ignore_case)
d66 3
a68 2
    LispObj *object;
    int cmp, value, next_value;
d70 18
a87 1
    LispObj *character, *more_characters;
d89 1
a89 32
    more_characters = ARGUMENT(1);
    character = ARGUMENT(0);

    CHECK_SCHAR(character);
    value = SCHAR_VALUE(character);
    if (ignore_case && islower(value))
	value = toupper(value);

    if (!CONSP(more_characters))
	return (T);

    /* First check if all parameters are characters */
    for (object = more_characters; CONSP(object); object = CDR(object))
	CHECK_SCHAR(CAR(object));

    /* All characters in list must be different */
    if (operation == CHAR_NOT_EQUAL) {
	/* Compare all characters */
	do {
	    for (object = more_characters; CONSP(object); object = CDR(object)) {
		character = CAR(object);
		next_value = SCHAR_VALUE(character);
		if (ignore_case && islower(next_value))
		    next_value = toupper(next_value);
		if (value == next_value)
		    return (NIL);
	    }
	    value = SCHAR_VALUE(CAR(more_characters));
	    if (ignore_case && islower(value))
		value = toupper(value);
	    more_characters = CDR(more_characters);
	} while (CONSP(more_characters));
d91 2
a92 2
	return (T);
    }
d94 2
a95 15
    /* Linearly compare characters */
    for (; CONSP(more_characters); more_characters = CDR(more_characters)) {
	character = CAR(more_characters);
	next_value = SCHAR_VALUE(character);
	if (ignore_case && islower(next_value))
	    next_value = toupper(next_value);

	switch (operation) {
	    case CHAR_LESS:		cmp = value < next_value;	break;
	    case CHAR_LESS_EQUAL:	cmp = value <= next_value;	break;
	    case CHAR_EQUAL:		cmp = value == next_value;	break;
	    case CHAR_GREATER_EQUAL:	cmp = value >= next_value;	break;
	    case CHAR_GREATER:		cmp = value > next_value;	break;
	    default:			cmp = 0;			break;
	}
d97 2
a98 4
	if (!cmp)
	    return (NIL);
	value = next_value;
    }
d100 1
a100 1
    return (T);
d104 1
a104 4
Lisp_CharLess(LispBuiltin *builtin)
/*
 char< character &rest more-characters
 */
d106 1
a106 1
    return (LispCharCompare(builtin, CHAR_LESS, 0));
d110 1
a110 4
Lisp_CharLessEqual(LispBuiltin *builtin)
/*
 char<= character &rest more-characters
 */
d112 1
a112 1
    return (LispCharCompare(builtin, CHAR_LESS_EQUAL, 0));
d116 1
a116 4
Lisp_CharEqual_(LispBuiltin *builtin)
/*
 char= character &rest more-characters
 */
d118 1
a118 1
    return (LispCharCompare(builtin, CHAR_EQUAL, 0));
d122 1
a122 4
Lisp_CharGreater(LispBuiltin *builtin)
/*
 char> character &rest more-characters
 */
d124 1
a124 1
    return (LispCharCompare(builtin, CHAR_GREATER, 0));
d128 1
a128 4
Lisp_CharGreaterEqual(LispBuiltin *builtin)
/*
 char>= character &rest more-characters
 */
d130 1
a130 1
    return (LispCharCompare(builtin, CHAR_GREATER_EQUAL, 0));
d134 1
a134 4
Lisp_CharNotEqual_(LispBuiltin *builtin)
/*
 char/= character &rest more-characters
 */
d136 1
a136 1
    return (LispCharCompare(builtin, CHAR_NOT_EQUAL, 0));
d140 1
a140 4
Lisp_CharLessp(LispBuiltin *builtin)
/*
 char-lessp character &rest more-characters
 */
d142 1
a142 1
    return (LispCharCompare(builtin, CHAR_LESS, 1));
d146 1
a146 4
Lisp_CharNotGreaterp(LispBuiltin *builtin)
/*
 char-not-greaterp character &rest more-characters
 */
d148 1
a148 1
    return (LispCharCompare(builtin, CHAR_LESS_EQUAL, 1));
d152 1
a152 4
Lisp_CharEqual(LispBuiltin *builtin)
/*
 char-equalp character &rest more-characters
 */
d154 1
a154 1
    return (LispCharCompare(builtin, CHAR_EQUAL, 1));
d158 1
a158 4
Lisp_CharGreaterp(LispBuiltin *builtin)
/*
 char-greaterp character &rest more-characters
 */
d160 1
a160 1
    return (LispCharCompare(builtin, CHAR_GREATER, 1));
d164 1
a164 4
Lisp_CharNotLessp(LispBuiltin *builtin)
/*
 char-not-lessp &rest more-characters
 */
d166 1
a166 1
    return (LispCharCompare(builtin, CHAR_GREATER_EQUAL, 1));
d170 1
a170 4
Lisp_CharNotEqual(LispBuiltin *builtin)
/*
 char-not-equal character &rest more-characters
 */
d172 1
a172 1
    return (LispCharCompare(builtin, CHAR_NOT_EQUAL, 1));
d175 2
a176 2
static LispObj *
LispCharOp(LispBuiltin *builtin, int operation)
d178 1
a178 2
    int value;
    LispObj *result, *character;
d180 7
a186 3
    character = ARGUMENT(0);
    CHECK_SCHAR(character);
    value = (int)SCHAR_VALUE(character);
d188 2
a189 28
    switch (operation) {
	case CHAR_ALPHAP:
	    result = isalpha(value) ? T : NIL;
	    break;
	case CHAR_DOWNCASE:
	    result = SCHAR(tolower(value));
	    break;
	case CHAR_UPCASE:
	    result = SCHAR(toupper(value));
	    break;
	case CHAR_INT:
	    result = FIXNUM(value);
	    break;
	case CHAR_BOTHP:
	    result = isupper(value) || islower(value) ? T : NIL;
	    break;
	case CHAR_UPPERP:
	    result = isupper(value) ? T : NIL;
	    break;
	case CHAR_LOWERP:
	    result = islower(value) ? T : NIL;
	    break;
	case CHAR_GRAPHICP:
	    result = value == ' ' || isgraph(value) ? T : NIL;
	    break;
	default:
	    result = NIL;
	    break;
d192 5
a196 1
    return (result);
d200 1
a200 4
Lisp_AlphaCharP(LispBuiltin *builtin)
/*
 alpha-char-p char
 */
d202 12
a213 1
    return (LispCharOp(builtin, CHAR_ALPHAP));
d217 1
a217 4
Lisp_CharDowncase(LispBuiltin *builtin)
/*
 char-downcase character
 */
d219 7
a225 1
    return (LispCharOp(builtin, CHAR_DOWNCASE));
d229 1
a229 5
Lisp_CharInt(LispBuiltin *builtin)
/*
 char-int character
 char-code character
 */
d231 12
a242 1
    return (LispCharOp(builtin, CHAR_INT));
d246 1
a246 4
Lisp_CharUpcase(LispBuiltin *builtin)
/*
 char-upcase character
 */
d248 8
a255 2
    return (LispCharOp(builtin, CHAR_UPCASE));
}
d257 1
a257 7
LispObj *
Lisp_BothCaseP(LispBuiltin *builtin)
/*
 both-case-p character
 */
{
    return (LispCharOp(builtin, CHAR_BOTHP));
d261 1
a261 4
Lisp_UpperCaseP(LispBuiltin *builtin)
/*
 upper-case-p character
 */
d263 1
a263 2
    return (LispCharOp(builtin, CHAR_UPPERP));
}
d265 6
a270 8
LispObj *
Lisp_LowerCaseP(LispBuiltin *builtin)
/*
 upper-case-p character
 */
{
    return (LispCharOp(builtin, CHAR_LOWERP));
}
d272 8
a279 7
LispObj *
Lisp_GraphicCharP(LispBuiltin *builtin)
/*
 graphic-char-p char
 */
{
    return (LispCharOp(builtin, CHAR_GRAPHICP));
d283 1
a283 5
Lisp_Char(LispBuiltin *builtin)
/*
 char string index
 schar simple-string index
 */
d285 23
a307 2
    char *string;
    long offset, length;
d309 21
a329 1
    LispObj *ostring, *oindex;
d331 4
a334 2
    oindex = ARGUMENT(1);
    ostring = ARGUMENT(0);
d336 16
a351 5
    CHECK_STRING(ostring);
    CHECK_INDEX(oindex);
    offset = FIXNUM_VALUE(oindex);
    string = THESTR(ostring);
    length = STRLEN(ostring);
d353 2
a354 3
    if (offset >= length)
	LispDestroy("%s: index %ld too large for string length %ld",
		    STRFUN(builtin), offset, length);
d356 1
a356 2
    return (SCHAR(string[offset]));
}
d358 3
a360 12
/* helper function for setf
 *	DONT explicitly call. Non standard function
 */
LispObj *
Lisp_XeditCharStore(LispBuiltin *builtin)
/*
 xedit::char-store string index value
 */
{
    int character;
    long offset, length;
    LispObj *ostring, *oindex, *ovalue;
d362 4
a365 3
    ovalue = ARGUMENT(2);
    oindex = ARGUMENT(1);
    ostring = ARGUMENT(0);
d367 4
a370 9
    CHECK_STRING(ostring);
    CHECK_INDEX(oindex);
    length = STRLEN(ostring);
    offset = FIXNUM_VALUE(oindex);
    if (offset >= length)
	LispDestroy("%s: index %ld too large for string length %ld",
		    STRFUN(builtin), offset, length);
    CHECK_SCHAR(ovalue);
    CHECK_STRING_WRITABLE(ostring);
d372 2
a373 1
    character = SCHAR_VALUE(ovalue);
d375 4
a378 7
    if (character < 0 || character > 255)
	LispDestroy("%s: cannot represent character %d",
		    STRFUN(builtin), character);

    THESTR(ostring)[offset] = character;

    return (ovalue);
d382 1
a382 4
Lisp_Character(LispBuiltin *builtin)
/*
 character object
 */
d384 1
a384 5
    LispObj *object;

    object = ARGUMENT(0);

    return (LispCharacterCoerce(builtin, object));
d388 1
a388 4
Lisp_Characterp(LispBuiltin *builtin)
/*
 characterp object
 */
d390 1
a390 5
    LispObj *object;

    object = ARGUMENT(0);

    return (SCHARP(object) ? T : NIL);
d394 1
a394 4
Lisp_DigitChar(LispBuiltin *builtin)
/*
 digit-char weight &optional radix
 */
d396 2
a397 2
    long radix = 10, weight;
    LispObj *oweight, *oradix, *result = NIL;
d399 2
a400 2
    oradix = ARGUMENT(1);
    oweight = ARGUMENT(0);
d402 1
a402 2
    CHECK_FIXNUM(oweight);
    weight = FIXNUM_VALUE(oweight);
d404 3
a406 15
    if (oradix != UNSPEC) {
	CHECK_INDEX(oradix);
	radix = FIXNUM_VALUE(oradix);
    }
    if (radix < 2 || radix > 36)
	LispDestroy("%s: radix must be >= 2 and <= 36, not %ld",
		    STRFUN(builtin), radix);

    if (weight >= 0 && weight < radix) {
	if (weight < 9)
	    weight += '0';
	else
	    weight += 'A' - 10;
	result = SCHAR(weight);
    }
d408 1
a408 1
    return (result);
d411 2
d414 1
a414 4
Lisp_DigitCharP(LispBuiltin *builtin)
/*
 digit-char-p character &optional radix
 */
d416 8
a423 2
    long radix = 10, character;
    LispObj *ochar, *oradix, *result = NIL;
d425 6
a430 2
    oradix = ARGUMENT(1);
    ochar = ARGUMENT(0);
d432 1
a432 20
    CHECK_SCHAR(ochar);
    character = SCHAR_VALUE(ochar);
    if (oradix != UNSPEC) {
	CHECK_INDEX(oradix);
	radix = FIXNUM_VALUE(oradix);
    }
    if (radix < 2 || radix > 36)
	LispDestroy("%s: radix must be >= 2 and <= 36, not %ld",
		    STRFUN(builtin), radix);

    if (character >= '0' && character <= '9')
	character -= '0';
    else if (character >= 'A' && character <= 'Z')
	character -= 'A' - 10;
    else if (character >= 'a' && character <= 'z')
	character -= 'a' - 10;
    if (character < radix)
	result = FIXNUM(character);

    return (result);
d436 1
a436 5
Lisp_IntChar(LispBuiltin *builtin)
/*
 int-char integer
 code-char integer
 */
d438 2
a439 2
    long character = 0;
    LispObj *integer;
d441 2
a442 1
    integer = ARGUMENT(0);
d444 9
a452 2
    CHECK_FIXNUM(integer);
    character = FIXNUM_VALUE(integer);
d454 1
a454 1
    return (character >= 0 && character < 0xff ? SCHAR(character) : NIL);
a456 1
/* XXX ignoring element-type */
d458 1
a458 4
Lisp_MakeString(LispBuiltin *builtin)
/*
 make-string size &key initial-element element-type
 */
d460 2
a461 2
    long length;
    char *string, initial;
d463 2
a464 1
    LispObj *size, *initial_element, *element_type;
d466 2
a467 12
    element_type = ARGUMENT(2);
    initial_element = ARGUMENT(1);
    size = ARGUMENT(0);

    CHECK_INDEX(size);
    length = FIXNUM_VALUE(size);
    if (initial_element != UNSPEC) {
	CHECK_SCHAR(initial_element);
	initial = SCHAR_VALUE(initial_element);
    }
    else
	initial = 0;
d469 8
a476 3
    string = LispMalloc(length + 1);
    memset(string, initial, length);
    string[length] = '\0';
d478 1
a478 1
    return (LSTRING2(string, length));
d482 1
a482 4
Lisp_ParseInteger(LispBuiltin *builtin)
/*
 parse-integer string &key start end radix junk-allowed
 */
d484 5
a488 39
    GC_ENTER();
    char *ptr, *string;
    int character, junk, sign, overflow;
    long i, start, end, radix, length, integer, check;
    LispObj *result;

    LispObj *ostring, *ostart, *oend, *oradix, *junk_allowed;

    junk_allowed = ARGUMENT(4);
    oradix = ARGUMENT(3);
    oend = ARGUMENT(2);
    ostart = ARGUMENT(1);
    ostring = ARGUMENT(0);

    start = end = radix = 0;
    result = NIL;

    CHECK_STRING(ostring);
    LispCheckSequenceStartEnd(builtin, ostring, ostart, oend,
			      &start, &end, &length);
    string = THESTR(ostring);
    if (radix < 2 || radix > 36)
	LispDestroy("%s: :RADIX %ld must be in the range 2 to 36",
		    STRFUN(builtin), radix);

    integer = check = 0;
    ptr = string + start;
    sign = overflow = 0;

    /* Skip leading white spaces */
    for (i = start; i < end && *ptr && isspace(*ptr); ptr++, i++)
	;

    /* Check for sign specification */
    if (i < end && (*ptr == '-' || *ptr == '+')) {
	sign = *ptr == '-';
	++ptr;
	++i;
    }
d490 2
a491 25
    for (junk = 0; i < end; i++, ptr++) {
	character = *ptr;
	if (islower(character))
	    character = toupper(character);
	if (character >= '0' && character <= '9') {
	    if (character - '0' >= radix)
		junk = 1;
	    else {
		check = integer;
		integer = integer * radix + character - '0';
	    }
	}
	else if (character >= 'A' && character <= 'Z') {
	    if (character - 'A' + 10 >= radix)
		junk = 1;
	    else {
		check = integer;
		integer = integer * radix + character - 'A' + 10;
	    }
	}
	else {
	    if (isspace(character))
		break;
	    junk = 1;
	}
d493 7
a499 1
	if (junk)
d502 1
a502 39
	if (!overflow && check > integer)
	    overflow = 1;
	/* keep looping just to count read bytes */
    }

    if (!junk)
	/* Skip white spaces */
	for (; i < end && *ptr && isspace(*ptr); ptr++, i++)
	    ;

    if ((junk || ptr == string) &&
	(junk_allowed == UNSPEC || junk_allowed == NIL))
	LispDestroy("%s: %s has a bad integer representation",
		    STRFUN(builtin), STROBJ(ostring));
    else if (ptr == string)
	result = NIL;
    else if (overflow) {
	mpi *bigi = LispMalloc(sizeof(mpi));
	char *str;

	length = end - start + sign;
	str = LispMalloc(length + 1);

	strncpy(str, string - sign, length + sign);
	str[length + sign] = '\0';
	mpi_init(bigi);
	mpi_setstr(bigi, str, radix);
	LispFree(str);
	result = BIGNUM(bigi);
    }
    else
	result = INTEGER(sign ? -integer : integer);

    GC_PROTECT(result);
    RETURN(0) = FIXNUM(i);
    RETURN_COUNT = 1;
    GC_LEAVE();

    return (result);
d506 1
a506 4
Lisp_String(LispBuiltin *builtin)
/*
 string object
 */
d508 2
a509 1
    LispObj *object;
d511 2
a512 1
    object = ARGUMENT(0);
d514 2
a515 2
    return (LispStringCoerce(builtin, object));
}
d517 4
a520 7
LispObj *
Lisp_Stringp(LispBuiltin *builtin)
/*
 stringp object
 */
{
    LispObj *object;
d522 1
a522 3
    object = ARGUMENT(0);

    return (STRINGP(object) ? T : NIL);
a524 1
/* XXX preserve-whitespace is being ignored */
d526 1
a526 4
Lisp_ReadFromString(LispBuiltin *builtin)
/*
 read-from-string string &optional eof-error-p eof-value &key start end preserve-whitespace
 */
d528 2
a529 4
    GC_ENTER();
    char *string;
    LispObj *stream, *result;
    long length, start, end, bytes_read;
d531 2
a532 2
    LispObj *ostring, *eof_error_p, *eof_value,
	    *ostart, *oend, *preserve_white_space;
d534 1
a534 32
    preserve_white_space = ARGUMENT(5);
    oend = ARGUMENT(4);
    ostart = ARGUMENT(3);
    eof_value = ARGUMENT(2);
    eof_error_p = ARGUMENT(1);
    ostring = ARGUMENT(0);

    CHECK_STRING(ostring);
    string = THESTR(ostring);
    LispCheckSequenceStartEnd(builtin, ostring, ostart, oend,
			      &start, &end, &length);

    if (start > 0 || end < length)
	length = end - start;
    stream = LSTRINGSTREAM(string + start, STREAM_READ, length);

    if (eof_value == UNSPEC)
	eof_value = NIL;

    LispPushInput(stream);
    result = LispRead();
    /* stream->data.stream.source.string->input is
     * the offset of the last byte read in string */
    bytes_read = stream->data.stream.source.string->input;
    LispPopInput(stream);

    if (result == NULL) {
	if (eof_error_p == NIL)
	    result = eof_value;
	else
	    LispDestroy("%s: unexpected end of input", STRFUN(builtin));
    }
d536 3
a538 30
    GC_PROTECT(result);
    RETURN(0) = FIXNUM(start + bytes_read);
    RETURN_COUNT = 1;
    GC_LEAVE();

    return (result);
}

static LispObj *
LispStringTrim(LispBuiltin *builtin, int left, int right, int inplace)
/*
 string-{,left-,right-}trim character-bag string
*/
{
    unsigned char *string;
    long start, end, length;

    LispObj *ochars, *ostring;

    ostring = ARGUMENT(1);
    ochars = ARGUMENT(0);

    if (!POINTERP(ochars) || !(XSTRINGP(ochars) || XCONSP(ochars))) {
	if (ARRAYP(ochars) && ochars->data.array.rank == 1)
	    ochars = ochars->data.array.list;
	else
	    LispDestroy("%s: %s is not a sequence",
			STRFUN(builtin), STROBJ(ochars));
    }
    CHECK_STRING(ostring);
d540 2
a541 2
    string = (unsigned char*)THESTR(ostring);
    length = STRLEN(ostring);
d543 5
a547 54
    start = 0;
    end = length;

    if (XSTRINGP(ochars)) {
	unsigned char *chars = (unsigned char*)THESTR(ochars);
	long i, clength = STRLEN(ochars);

	if (left) {
	    for (; start < end; start++) {
		for (i = 0; i < clength; i++)
		    if (string[start] == chars[i])
			break;
		if (i >= clength)
		    break;
	    }
	}
	if (right) {
	    for (--end; end >= 0; end--) {
		for (i = 0; i < clength; i++)
		    if (string[end] == chars[i])
			break;
		if (i >= clength)
		    break;
	    }
	    ++end;
	}
    }
    else {
	LispObj *ochar, *list;

	if (left) {
	    for (; start < end; start++) {
		for (list = ochars; CONSP(list); list = CDR(list)) {
		    ochar = CAR(list);
		    if (SCHARP(ochar) && string[start] == SCHAR_VALUE(ochar))
			break;
		}
		if (!CONSP(list))
		    break;
	    }
	}
	if (right) {
	    for (--end; end >= 0; end--) {
		for (list = ochars; CONSP(list); list = CDR(list)) {
		    ochar = CAR(list);
		    if (SCHARP(ochar) && string[end] == SCHAR_VALUE(ochar))
			break;
		}
		if (!CONSP(list))
		    break;
	    }
	    ++end;
	}
    }
d549 2
a550 2
    if (start == 0 && end == length)
	return (ostring);
d552 2
a553 1
    length = end - start;
d555 8
a562 11
    if (inplace) {
	CHECK_STRING_WRITABLE(ostring);
	memmove(string, string + start, length);
	string[length] = '\0';
	STRLEN(ostring) = length;
    }
    else {
	string = LispMalloc(length + 1);
	memcpy(string, THESTR(ostring) + start, length);
	string[length] = '\0';
	ostring = LSTRING2((char*)string, length);
d565 1
a565 1
    return (ostring);
d569 1
a569 4
Lisp_StringTrim(LispBuiltin *builtin)
/*
 string-trim character-bag string
 */
d571 2
a572 2
    return (LispStringTrim(builtin, 1, 1, 0));
}
d574 2
a575 8
LispObj *
Lisp_NstringTrim(LispBuiltin *builtin)
/*
 ext::nstring-trim character-bag string
 */
{
    return (LispStringTrim(builtin, 1, 1, 1));
}
d577 2
a578 8
LispObj *
Lisp_StringLeftTrim(LispBuiltin *builtin)
/*
 string-left-trim character-bag string
 */
{
    return (LispStringTrim(builtin, 1, 0, 0));
}
d580 9
a588 8
LispObj *
Lisp_NstringLeftTrim(LispBuiltin *builtin)
/*
 ext::nstring-left-trim character-bag string
 */
{
    return (LispStringTrim(builtin, 1, 0, 1));
}
d590 1
a590 7
LispObj *
Lisp_StringRightTrim(LispBuiltin *builtin)
/*
 string-right-trim character-bag string
 */
{
    return (LispStringTrim(builtin, 0, 1, 0));
d594 1
a594 10
Lisp_NstringRightTrim(LispBuiltin *builtin)
/*
 ext::nstring-right-trim character-bag string
 */
{
    return (LispStringTrim(builtin, 0, 1, 1));
}

static LispObj *
LispStringCompare(LispBuiltin *builtin, int function, int ignore_case)
d596 2
a597 4
    int cmp1, cmp2;
    LispObj *fixnum;
    unsigned char *string1, *string2;
    long start1, end1, start2, end2, offset, length;
d599 2
a600 2
    LispGetStringArgs(builtin, (char**)&string1, (char**)&string2,
		      &start1, &end1, &start2, &end2);
d605 7
a611 4
    if (function == CHAR_EQUAL) {
	length = end1 - start1;

	if (length != (end2 - start2))
d613 2
a614 8

	if (!ignore_case)
	    return (memcmp(string1, string2, length) ? NIL : T);

	for (; length; length--, string1++, string2++)
	    if (toupper(*string1) != toupper(*string2))
		return (NIL);
	return (T);
d617 1
a617 44
    end1 -= start1;
    end2 -= start2;
    length = MIN(end1, end2);
    for (offset = 0;
	 offset < length;
	 string1++, string2++, offset++, start1++, start2++) {
	cmp1 = *string1;
	cmp2 = *string2;
	if (ignore_case) {
	    cmp1 = toupper(cmp1);
	    cmp2 = toupper(cmp2);
	}
	if (cmp1 != cmp2) {
	    fixnum = FIXNUM(start1);
	    switch (function) {
		case CHAR_LESS:
		    return ((cmp1 < cmp2) ? fixnum : NIL);
		case CHAR_LESS_EQUAL:
		    return ((cmp1 <= cmp2) ? fixnum : NIL);
		case CHAR_NOT_EQUAL:
		    return (fixnum);
		case CHAR_GREATER_EQUAL:
		    return ((cmp1 >= cmp2) ? fixnum : NIL);
		case CHAR_GREATER:
		    return ((cmp1 > cmp2) ? fixnum : NIL);
	    }
	}
    }

    fixnum = FIXNUM(start1);
    switch (function) {
	case CHAR_LESS:
	    return (start1 >= end1 && start2 < end2 ? fixnum : NIL);
	case CHAR_LESS_EQUAL:
	    return (start1 >= end1 ? fixnum : NIL);
	case CHAR_NOT_EQUAL:
	    return (start1 >= end1 && start2 >= end2 ? NIL : fixnum);
	case CHAR_GREATER_EQUAL:
	    return (start2 >= end2 ? fixnum : NIL);
	case CHAR_GREATER:
	    return (start2 >= end2 && start1 < end1 ? fixnum : NIL);
    }

    return (NIL);
d621 1
a621 4
Lisp_StringEqual_(LispBuiltin *builtin)
/*
 string= string1 string2 &key start1 end1 start2 end2
 */
d623 2
a624 2
    return (LispStringCompare(builtin, CHAR_EQUAL, 0));
}
d626 2
a627 8
LispObj *
Lisp_StringLess(LispBuiltin *builtin)
/*
 string< string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_LESS, 0));
}
d629 2
a630 8
LispObj *
Lisp_StringGreater(LispBuiltin *builtin)
/*
 string> string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_GREATER, 0));
}
d632 11
a642 8
LispObj *
Lisp_StringLessEqual(LispBuiltin *builtin)
/*
 string<= string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_LESS_EQUAL, 0));
}
d644 1
a644 7
LispObj *
Lisp_StringGreaterEqual(LispBuiltin *builtin)
/*
 string>= string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_GREATER_EQUAL, 0));
d648 1
a648 4
Lisp_StringNotEqual_(LispBuiltin *builtin)
/*
 string/= string1 string2 &key start1 end1 start2 end2
 */
d650 2
a651 2
    return (LispStringCompare(builtin, CHAR_NOT_EQUAL, 0));
}
d653 2
a654 8
LispObj *
Lisp_StringEqual(LispBuiltin *builtin)
/*
 string-equal string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_EQUAL, 1));
}
d656 2
a657 8
LispObj *
Lisp_StringLessp(LispBuiltin *builtin)
/*
 string-lessp string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_LESS, 1));
}
d659 4
a662 8
LispObj *
Lisp_StringGreaterp(LispBuiltin *builtin)
/*
 string-greaterp string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_GREATER, 1));
}
d664 1
a664 16
LispObj *
Lisp_StringNotGreaterp(LispBuiltin *builtin)
/*
 string-not-greaterp string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_LESS_EQUAL, 1));
}

LispObj *
Lisp_StringNotLessp(LispBuiltin *builtin)
/*
 string-not-lessp string1 string2 &key start1 end1 start2 end2
 */
{
    return (LispStringCompare(builtin, CHAR_GREATER_EQUAL, 1));
d668 1
a668 4
Lisp_StringNotEqual(LispBuiltin *builtin)
/*
 string-not-equal string1 string2 &key start1 end1 start2 end2
 */
d670 3
a672 2
    return (LispStringCompare(builtin, CHAR_NOT_EQUAL, 1));
}
d674 1
a674 22
LispObj *
LispStringUpcase(LispBuiltin *builtin, int inplace)
/*
 string-upcase string &key start end
 nstring-upcase string &key start end
 */
{
    LispObj *result;
    char *string, *newstring;
    long start, end, length, offset;

    LispObj *ostring, *ostart, *oend;

    oend = ARGUMENT(2);
    ostart = ARGUMENT(1);
    ostring = ARGUMENT(0);
    CHECK_STRING(ostring);
    LispCheckSequenceStartEnd(builtin, ostring, ostart, oend,
			      &start, &end, &offset);
    result = ostring;
    string = THESTR(ostring);
    length = STRLEN(ostring);
d677 3
a679 2
    for (offset = start; offset < end; offset++)
	if (string[offset] != toupper(string[offset]))
d681 1
d683 2
a684 2
    if (offset >= end)
	return (result);
d686 4
a689 13
    if (inplace) {
	CHECK_STRING_WRITABLE(ostring);
	newstring = string;
    }
    else {
	/* upcase a copy of argument */
	newstring = LispMalloc(length + 1);
	if (offset)
	    memcpy(newstring, string, offset);
	if (length > end)
	    memcpy(newstring + end, string + end, length - end);
	newstring[length] = '\0';
    }
d691 2
a692 2
    for (; offset < end; offset++)
	newstring[offset] = toupper(string[offset]);
d694 1
a694 4
    if (!inplace)
	result = LSTRING2(newstring, length);

    return (result);
d698 1
a698 4
Lisp_StringUpcase(LispBuiltin *builtin)
/*
 string-upcase string &key start end
 */
d700 3
a702 11
    return (LispStringUpcase(builtin, 0));
}

LispObj *
Lisp_NstringUpcase(LispBuiltin *builtin)
/*
 nstring-upcase string &key start end
 */
{
    return (LispStringUpcase(builtin, 1));
}
d704 1
a704 22
LispObj *
LispStringDowncase(LispBuiltin *builtin, int inplace)
/*
 string-downcase string &key start end
 nstring-downcase string &key start end
 */
{
    LispObj *result;
    char *string, *newstring;
    long start, end, length, offset;

    LispObj *ostring, *ostart, *oend;

    oend = ARGUMENT(2);
    ostart = ARGUMENT(1);
    ostring = ARGUMENT(0);
    CHECK_STRING(ostring);
    LispCheckSequenceStartEnd(builtin, ostring, ostart, oend,
			      &start, &end, &offset);
    result = ostring;
    string = THESTR(ostring);
    length = STRLEN(ostring);
d707 3
a709 2
    for (offset = start; offset < end; offset++)
	if (string[offset] != tolower(string[offset]))
d711 1
d713 2
a714 2
    if (offset >= end)
	return (result);
d716 4
a719 15
    if (inplace) {
	CHECK_STRING_WRITABLE(ostring);
	newstring = string;
    }
    else {
	/* downcase a copy of argument */
	newstring = LispMalloc(length + 1);
	if (offset)
	    memcpy(newstring, string, offset);
	if (length > end)
	    memcpy(newstring + end, string + end, length - end);
	newstring[length] = '\0';
    }
    for (; offset < end; offset++)
	newstring[offset] = tolower(string[offset]);
d721 2
a722 2
    if (!inplace)
	result = LSTRING2(newstring, length);
d724 1
a724 1
    return (result);
d728 1
a728 4
Lisp_StringDowncase(LispBuiltin *builtin)
/*
 string-downcase string &key start end
 */
d730 3
a732 2
    return (LispStringDowncase(builtin, 0));
}
d734 1
a734 31
LispObj *
Lisp_NstringDowncase(LispBuiltin *builtin)
/*
 nstring-downcase string &key start end
 */
{
    return (LispStringDowncase(builtin, 1));
}

LispObj *
LispStringCapitalize(LispBuiltin *builtin, int inplace)
/*
 string-capitalize string &key start end
 nstring-capitalize string &key start end
 */
{
    LispObj *result;
    char *string, *newstring;
    long start, end, length, offset, upcase;

    LispObj *ostring, *ostart, *oend;

    oend = ARGUMENT(2);
    ostart = ARGUMENT(1);
    ostring = ARGUMENT(0);
    CHECK_STRING(ostring);
    LispCheckSequenceStartEnd(builtin, ostring, ostart, oend,
			      &start, &end, &offset);
    result = ostring;
    string = THESTR(ostring);
    length = STRLEN(ostring);
d737 3
a739 3
    for (upcase = 1, offset = start; offset < end; offset++) {
	if (upcase) {
	    if (!isalnum(string[offset]))
d741 2
a742 1
	    if (string[offset] != toupper(string[offset]))
d744 2
a745 1
	    upcase = 0;
d748 3
a750 2
	    if (isalnum(string[offset])) {
		if (string[offset] != tolower(string[offset]))
d752 1
d755 1
a755 1
		upcase = 1;
d759 2
a760 2
    if (offset >= end)
	return (result);
d762 5
a766 13
    if (inplace) {
	CHECK_STRING_WRITABLE(ostring);
	newstring = string;
    }
    else {
	/* capitalize a copy of argument */
	newstring = LispMalloc(length + 1);
	memcpy(newstring, string, length);
	newstring[length] = '\0';
    }
    for (; offset < end; offset++) {
	if (upcase) {
	    if (!isalnum(string[offset]))
d768 2
a769 2
	    newstring[offset] = toupper(string[offset]);
	    upcase = 0;
d772 2
a773 2
	    if (isalnum(newstring[offset]))
		newstring[offset] = tolower(string[offset]);
d775 1
a775 1
		upcase = 1;
d779 2
a780 57
    if (!inplace)
	result = LSTRING2(newstring, length);

    return (result);
}

LispObj *
Lisp_StringCapitalize(LispBuiltin *builtin)
/*
 string-capitalize string &key start end
 */
{
    return (LispStringCapitalize(builtin, 0));
}

LispObj *
Lisp_NstringCapitalize(LispBuiltin *builtin)
/*
 nstring-capitalize string &key start end
 */
{
    return (LispStringCapitalize(builtin, 1));
}

LispObj *
Lisp_StringConcat(LispBuiltin *builtin)
/*
 string-concat &rest strings
 */
{
    char *buffer;
    long size, length;
    LispObj *object, *string;

    LispObj *strings;

    strings = ARGUMENT(0);

    if (strings == NIL)
	return (STRING(""));

    for (length = 1, object = strings; CONSP(object); object = CDR(object)) {
	string = CAR(object);
	CHECK_STRING(string);
	length += STRLEN(string);
    }

    buffer = LispMalloc(length);

    for (length = 0, object = strings; CONSP(object); object = CDR(object)) {
	string = CAR(object);
	size = STRLEN(string);
	memcpy(buffer + length, THESTR(string), size);
	length += size;
    }
    buffer[length] = '\0';
    object = LSTRING2(buffer, length);
d782 1
a782 1
    return (object);
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xedit/lisp/string.c,v 1.26 2003/11/27 17:28:43 paulo Exp $ */
d32 4
a35 4
#include "lisp/helper.h"
#include "lisp/read.h"
#include "lisp/string.h"
#include "lisp/private.h"
d371 1
a371 1
    unsigned char *string;
d382 1
a382 1
    string = (unsigned char*)THESTR(ostring);
d552 1
a552 1
    LispObj *size, *initial_element;
d554 1
a600 6
    if (oradix == UNSPEC)
	radix = 10;
    else {
	CHECK_INDEX(oradix);
	radix = FIXNUM_VALUE(oradix);
    }
d728 2
a729 1
    LispObj *ostring, *eof_error_p, *eof_value, *ostart, *oend;
d731 1
@


