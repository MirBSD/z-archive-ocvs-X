head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.10.22;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.10.22;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.39.58;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.18.40.07;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.28.44;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*

Copyright (c) 1988  X Consortium

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of the X Consortium shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from the X Consortium.

*/
/* $XFree86: xc/programs/xfs/os/daemon.c,v 1.8 2001/11/16 16:47:58 dawes Exp $ */

#include <X11/Xos.h>
#include <stdio.h>
#include <stdlib.h>

#if defined(SVR4) || defined(USG)
#include <termios.h>
#else
#include <sys/ioctl.h>
#endif
#if defined(__osf__) || defined(linux) || defined(__GNU__) || defined(__CYGWIN__)
#define setpgrp setpgid
#endif
#ifdef hpux
#include <sys/ptyio.h>
#endif
#include <errno.h>
#include <sys/types.h>
#ifdef X_NOT_POSIX
#define Pid_t int
#else
#define Pid_t pid_t
#endif

#include "os.h"

void
BecomeOrphan ()
{
    Pid_t child_id;
    int stat;

    /*
     * fork so that the process goes into the background automatically. Also
     * has a nice side effect of having the child process get inherited by
     * init (pid 1).
     * Separate the child into its own process group before the parent
     * exits.  This eliminates the possibility that the child might get
     * killed when the init script that's running xfs exits.
     */

    child_id = fork();
    switch (child_id) {
    case 0:
	/* child */
	break;
    case -1:
	/* error */
	FatalError("daemon fork failed, errno = %d\n", errno);
	break;

    default:
	/* parent */

#if !defined(CSRG_BASED) && !defined(__QNXNTO__)
#if defined(SVR4)
	stat = setpgid(child_id, child_id);
	/* This gets error EPERM.  Why? */
#else
#if defined(SYSV)
	stat = 0;	/* don't know how to set child's process group */
#else
	stat = setpgrp(child_id, child_id);
	if (stat != 0)
	    FatalError("setting process grp for daemon failed, errno = %d\n",
		     errno);
#endif
#endif
#endif /* !CSRG_BASED */
	exit (0);
    }
}

void
BecomeDaemon ()
{
    register int i;

    /*
     * Close standard file descriptors and get rid of controlling tty
     */

#if defined(CSRG_BASED) || defined(__QNXNTO__)
    daemon (0, 0);
#else
#if defined(SYSV) || defined(SVR4)
    setpgrp ();
#else
    setpgrp (0, getpid());
#endif

    close (0); 
    close (1);
    close (2);

#if !defined(__EMX__) && !defined(__CYGWIN__)
#if !((defined(SYSV) || defined(SVR4)) && defined(i386))
    if ((i = open ("/dev/tty", O_RDWR)) >= 0) {	/* did open succeed? */
#if defined(USG) && defined(TCCLRCTTY)
	int zero = 0;
	(void) ioctl (i, TCCLRCTTY, &zero);
#else
#if (defined(SYSV) || defined(SVR4)) && defined(TIOCTTY)
	int zero = 0;
	(void) ioctl (i, TIOCTTY, &zero);
#else
	(void) ioctl (i, TIOCNOTTY, (char *) 0);    /* detach, BSD style */
#endif
#endif
	(void) close (i);
    }
#endif /* !((SYSV || SVR4) && i386) */
#endif /* !__EMX__ */

    /*
     * Set up the standard file descriptors.
     */
    (void) open ("/", O_RDONLY);	/* root inode already in core */
    (void) dup2 (0, 1);
    (void) dup2 (0, 2);
#endif /* CSRG_BASED */
}

#if defined(linux) || defined(CSRG_BASED) || defined(__QNXNTO__)
FILE *pidFilePtr;
static int pidFd;
char *pidFile = "/var/run/xfs.pid";
#endif

int
StorePid ()
{
#if defined(linux) || defined(CSRG_BASED) || defined(__QNXNTO__)
    int         oldpid;

    if (pidFile[0] != '\0') {
        pidFd = open (pidFile, 2);
        if (pidFd == -1 && errno == ENOENT)
            pidFd = open (pidFile, O_RDWR|O_CREAT, 0666);
        if (pidFd == -1 || !(pidFilePtr = fdopen (pidFd, "r+")))
        {
            ErrorF ("process-id file %s cannot be opened\n",
                      pidFile);
            return -1;
        }
        if (fscanf (pidFilePtr, "%d\n", &oldpid) != 1)
            oldpid = -1;
        fseek (pidFilePtr, 0l, 0);
        fprintf (pidFilePtr, "%5d\n", getpid ());
        (void) fflush (pidFilePtr);
    }
#endif
    return 0;
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xfs/os/daemon.c,v 1.13 2004/01/07 03:47:36 dawes Exp $ */
d33 1
a33 2
#include <sys/types.h>
#include <errno.h>
d36 2
a37 2
#if defined(USG)
# include <termios.h>
d39 4
a42 1
# include <sys/ioctl.h>
d45 1
a45 1
# include <sys/ptyio.h>
d47 2
a48 1

d50 1
a50 1
# define Pid_t int
d52 1
a52 1
# define Pid_t pid_t
d57 5
a61 3
#if defined(__GLIBC__) || defined(CSRG_BASED)
#define HAS_DAEMON
#endif
d63 8
a70 3
#ifndef X_NOT_POSIX
#define HAS_SETSID
#endif
d72 9
a80 1
#ifndef HAS_SETSID
d82 2
a83 1
#define setsid() MySetsid()
d85 12
a96 5
static Pid_t
MySetsid(void)
{
#if defined(TIOCNOTTY) || defined(TCCLRCTTY) || defined(TIOCTTY)
    int fd;
a97 12
    int stat;

    fd = open("/dev/tty", O_RDWR);
    if (fd >= 0) {
#if defined(USG) && defined(TCCLRCTTY)
	int zero = 0;
	(void) ioctl (fd, TCCLRCTTY, &zero);
#elif (defined(SYSV) || defined(SVR4)) && defined(TIOCTTY)
	int zero = 0;
	(void) ioctl (i, TIOCTTY, &zero);
#elif defined(TIOCNOTTY)
	(void) ioctl (i, TIOCNOTTY, (char *) 0);    /* detach, BSD style */
d99 2
a100 1
        close(fd);
a101 6

#if defined(SYSV) || defined(__QNXNTO__)
    return setpgrp();
#else
    return setpgid(0, getpid());
#endif
a103 4
#endif /* !HAS_SETSID */


/* detach */
d107 7
a113 2
    /* If our C library has the daemon() function, just use it. */
#ifdef HAS_DAEMON
d116 5
d122 1
a122 20
    switch (fork()) {
    case -1:
	/* error */
	FatalError("daemon fork failed, %s\n", strerror(errno));
	break;
    case 0:
	/* child */
	break;
    default:
	/* parent */
	exit(0);
    }

    if (setsid() == -1)
	FatalError("setting session id for daemon failed: %s\n",
		   strerror(errno));

    chdir("/");

    close (0);
d126 19
d148 1
a148 1
    (void) open ("/dev/null", O_RDWR);
d151 8
d160 24
a183 1
#endif /* HAS_DAEMON */
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xfs/os/daemon.c,v 1.12 2002/10/20 21:42:50 tsi Exp $ */
d33 1
a33 2
#include <sys/types.h>
#include <errno.h>
d36 4
a39 7
#ifndef __GLIBC__
# if defined(__osf__) || \
     defined(__GNU__) || \
     defined(__CYGWIN__) || \
     defined(linux)
#  define setpgrp setpgid
# endif
d41 2
a42 5

#if defined(SVR4) || defined(USG) || defined(__GLIBC__)
# include <termios.h>
#else
# include <sys/ioctl.h>
d45 1
a45 1
# include <sys/ptyio.h>
d47 2
a48 1

d50 1
a50 1
# define Pid_t int
d52 1
a52 1
# define Pid_t pid_t
d61 1
a62 1
    chdir("/");
d79 1
a79 1
	FatalError("daemon fork failed, %s\n", strerror(errno));
d85 15
a99 23
#if defined(CSRG_BASED) || \
    defined(SYSV) || \
    defined(SVR4) || \
    defined(__QNXNTO__) || \
    defined(__GLIBC__) || \
    defined(linux)
	{
	    int stat;
# if defined(SVR4) || defined(__QNXNTO__)
	    /* This gets error EPERM.  Why? */
	    stat = setpgid (child_id, child_id);
# elif defined(SYSV)
	    stat = 0;	/* don't know how to set child's process group */
# elif defined(__GLIBC__)
	    stat = setpgrp ();
# else
	    stat = setpgrp (child_id, child_id);
# endif
	    if (stat != 0)
		FatalError("setting process group for daemon failed: %s\n",
			   strerror(errno));
	}
#endif /* ! (CSRG_BASED || SYSV || SVR4 || __QNXNTO__ || __GLIBC__) */
d107 2
d110 1
a110 1
     * Close standard file descriptors and get rid of controlling tty.
d113 1
a113 2
    /* If our C library has the daemon() function, just use it. */
#if defined(__GLIBC__) || defined(CSRG_BASED)
d116 1
a116 3
    register int i;

# if defined(SYSV) || defined(SVR4) || defined(__QNXNTO__)
d118 1
a118 1
# else
d120 1
a120 1
# endif
d122 1
a122 1
    close (0);
d126 2
a127 2
# if !defined(__UNIXOS2__) && !defined(__CYGWIN__)
#  if !((defined(SYSV) || defined(SVR4)) && defined(i386))
d129 1
a129 1
#   if defined(USG) && defined(TCCLRCTTY)
d132 2
a133 2
#   else
#    if (defined(SYSV) || defined(SVR4)) && defined(TIOCTTY)
d136 1
a136 1
#    else
d138 2
a139 2
#    endif
#   endif
d142 2
a143 2
#  endif /* !((SYSV || SVR4) && i386) */
# endif /* !__UNIXOS2__ && !__CYGWIN__ */
d151 31
d183 1
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d30 1
a30 1
/* $XFree86: xc/programs/xfs/os/daemon.c,v 1.13 2004/01/07 03:47:36 dawes Exp $ */
d37 10
a46 1
#if defined(USG)
d63 4
a66 3
#if defined(__GLIBC__) || defined(CSRG_BASED)
#define HAS_DAEMON
#endif
d68 9
a76 3
#ifndef X_NOT_POSIX
#define HAS_SETSID
#endif
d78 9
a86 1
#ifndef HAS_SETSID
d88 2
a89 9
#define setsid() MySetsid()

static Pid_t
MySetsid(void)
{
#if defined(TIOCNOTTY) || defined(TCCLRCTTY) || defined(TIOCTTY)
    int fd;
#endif
    int stat;
d91 24
a114 12
    fd = open("/dev/tty", O_RDWR);
    if (fd >= 0) {
#if defined(USG) && defined(TCCLRCTTY)
	int zero = 0;
	(void) ioctl (fd, TCCLRCTTY, &zero);
#elif (defined(SYSV) || defined(SVR4)) && defined(TIOCTTY)
	int zero = 0;
	(void) ioctl (i, TIOCTTY, &zero);
#elif defined(TIOCNOTTY)
	(void) ioctl (i, TIOCNOTTY, (char *) 0);    /* detach, BSD style */
#endif
        close(fd);
a115 6

#if defined(SYSV) || defined(__QNXNTO__)
    return setpgrp();
#else
    return setpgid(0, getpid());
#endif
a117 4
#endif /* !HAS_SETSID */


/* detach */
d121 4
d126 1
a126 1
#ifdef HAS_DAEMON
d129 1
d131 5
a135 18
    switch (fork()) {
    case -1:
	/* error */
	FatalError("daemon fork failed, %s\n", strerror(errno));
	break;
    case 0:
	/* child */
	break;
    default:
	/* parent */
	exit(0);
    }

    if (setsid() == -1)
	FatalError("setting session id for daemon failed: %s\n",
		   strerror(errno));

    chdir("/");
d141 19
d163 1
a163 1
    (void) open ("/dev/null", O_RDWR);
d166 1
a166 2

#endif /* HAS_DAEMON */
@


