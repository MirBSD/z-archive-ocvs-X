head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.09.38;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.09.38;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.38.23;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.26.40;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * $XFree86: xc/programs/Xserver/render/miindex.c,v 1.4 2001/07/31 21:06:56 alanh Exp $
 *
 * Copyright © 2001 Keith Packard, member of The XFree86 Project, Inc.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _MIINDEX_H_
#define _MIINDEX_H_

#include "scrnintstr.h"
#include "gcstruct.h"
#include "pixmapstr.h"
#include "windowstr.h"
#include "mi.h"
#include "picturestr.h"
#include "mipict.h"
#include "colormapst.h"

Bool
miBuildRenderColormap (ColormapPtr  pColormap,
		       int	    num,
		       Pixel	    *first,
		       Pixel	    *last)
{
    int		cube, ramp;
    int		r, g, b;
    unsigned short  red, green, blue;
    Pixel	pix;
    
    cube = 0;
    if ((pColormap->pVisual->class | DynamicClass) == PseudoColor)
    {
	for (cube = 0; cube * cube * cube < num; cube++)
	    ;
	cube--;
    }
    if (cube == 1)
	cube = 0;
    ramp = num - (cube * cube * cube);
    *first = MI_MAX_INDEXED;
    *last = 0;
    for (r = 0; r < cube; r++)
	for (g = 0; g < cube; g++)
	    for (b = 0; b < cube; b++)
	    {
		red = r * 65535 / (cube - 1);
		green = g * 65535 / (cube - 1);
		blue = b * 65535 / (cube - 1);
		if (AllocColor (pColormap, &red, &green, &blue, &pix, 0) != Success)
		    return FALSE;
		if (pix < *first)
		    *first = pix;
		if (pix > *last)
		    *last = pix;
	    }
    for (g = 0; g < ramp; g++)
    {
	red = 
	green = 
	blue = g * 65535 / (ramp - 1);
	if (AllocColor (pColormap, &red, &green, &blue, &pix, 0) != Success)
	    return FALSE;
	if (pix < *first)
	    *first = pix;
	if (pix > *last)
	    *last = pix;
    }

    return TRUE;
}

/* 0 <= red, green, blue < 32 */
static Pixel
FindBestColor (miIndexedPtr pIndexed, int first, int num,
	       int red, int green, int blue)
{
    Pixel   best = first;
    int	    bestDist = 1 << 30;
    int	    dist;
    int	    dr, dg, db;
    while (num--)
    {
	CARD32	v = pIndexed->rgba[first];

	dr = ((v >> 19) & 0x1f);
	dg = ((v >> 11) & 0x1f);
	db = ((v >> 3) & 0x1f);
	dr = dr - red;
	dg = dg - green;
	db = db - blue;
	dist = dr * dr + dg * dg + db * db;
	if (dist < bestDist)
	{
	    bestDist = dist;
	    best = first;
	}
	first++;
    }
    return best;
}

/* 0 <= gray < 32768 */
static Pixel
FindBestGray (miIndexedPtr pIndexed, int first, int num, int gray)
{
    Pixel   best = first;
    int	    bestDist = 1 << 30;
    int	    dist;
    int	    dr;
    int	    r;
    
    while (num--)
    {
	CARD32	v = pIndexed->rgba[first];

	r = v & 0xff;
	r = r | (r << 8);
	dr = gray - (r >> 1);
	dist = dr * dr;
	if (dist < bestDist)
	{
	    bestDist = dist;
	    best = first;
	}
	first++;
    }
    return best;
}

Bool
miInitIndexed (ScreenPtr	pScreen,
	       PictFormatPtr	pFormat)
{
    miIndexedPtr    pIndexed;
    int		    num;
    Pixel	    first, last;
    Pixel	    pix[MI_MAX_INDEXED];
    xrgb	    rgb[MI_MAX_INDEXED];
    Pixel	    p, r, g, b;

    if (pFormat->pVisual->ColormapEntries > MI_MAX_INDEXED)
	return FALSE;
    pIndexed = xalloc (sizeof (miIndexedRec));
    if (!pIndexed)
	return FALSE;
    num = pFormat->pVisual->ColormapEntries;
    first = 0;
    last = num - 1;
    if (pFormat->pVisual->class & DynamicClass)
    {
	if (pFormat->pVisual->vid == pScreen->rootVisual)
	{
	    if (num > 100)
		num = num - 10;
	    else
		num = num / 2;
	}
	if (!miBuildRenderColormap (pFormat->pColormap, num, &first, &last))
	{
	    xfree (pIndexed);
	    return FALSE;
	}
    }
    /*
     * Build mapping from pixel value to ARGB
     */
    for (p = 0; p < pFormat->pVisual->ColormapEntries; p++)
	pix[p] = p;
    QueryColors (pFormat->pColormap, pFormat->pVisual->ColormapEntries,
		 pix, rgb);
    for (p = 0; p < pFormat->pVisual->ColormapEntries; p++)
	pIndexed->rgba[p] = (0xff000000 |
			     ((rgb[p].red   & 0xff00) << 8) |
			     ((rgb[p].green & 0xff00)     ) |
			     ((rgb[p].blue  & 0xff00) >> 8));
    /*
     * Build mapping from RGB to pixel value.  This could probably be
     * done a bit quicker...
     */
    switch (pFormat->pVisual->class | DynamicClass) {
    case GrayScale:
	pIndexed->color = FALSE;
	for (r = 0; r < 32768; r++)
	    pIndexed->ent[r] = FindBestGray (pIndexed, first, last-first+1, r);
	break;
    case PseudoColor:
	pIndexed->color = TRUE;
	p = 0;
	for (r = 0; r < 32; r++)
	    for (g = 0; g < 32; g++)
		for (b = 0; b < 32; b++)
		{
		    pIndexed->ent[p] = FindBestColor (pIndexed, first, last-first+1, r, g, b);
		    p++;
		}
	break;
    }
    pFormat->indexed = pIndexed;
    return TRUE;
}

void
miCloseIndexed (ScreenPtr	pScreen,
		PictFormatPtr	pFormat)
{
    if (pFormat->indexed)
    {
	xfree (pFormat->indexed);
	pFormat->indexed = 0;
    }
}

void
miUpdateIndexed (ScreenPtr	pScreen,
		 PictFormatPtr	pFormat,
		 int		ndef,
		 xColorItem	*pdef)
{
    miIndexedPtr pIndexed = pFormat->indexed;

    if (pIndexed)
    {
	while (ndef--)
	{
	    pIndexed->rgba[pdef->pixel] = (0xff000000 |
					   ((pdef->red   & 0xff00) << 8) |
					   ((pdef->green & 0xff00)     ) |
					   ((pdef->blue  & 0xff00) >> 8));
	    pdef++;
	}
    }
}

#endif /* _MIINDEX_H_ */
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d2 1
a2 1
 * $XFree86: xc/programs/Xserver/render/miindex.c,v 1.8 2002/11/06 22:45:36 keithp Exp $
d37 5
a41 5
#define NUM_CUBE_LEVELS	4
#define NUM_GRAY_LEVELS	13

static Bool
miBuildRenderColormap (ColormapPtr  pColormap, Pixel *pixels, int *nump)
d43 1
d46 1
a46 6
    Pixel	pixel;
    Bool	used[MI_MAX_INDEXED];
    int		needed;
    int		policy;
    int		cube, gray;
    int		i, n;
d48 2
a49 5
    if (pColormap->mid != pColormap->pScreen->defColormap)
    {
	policy = PictureCmapPolicyAll;
    }
    else
d51 9
a59 85
	int	avail = pColormap->pVisual->ColormapEntries;
	policy = PictureCmapPolicy;
	if (policy == PictureCmapPolicyDefault)
	{
	    if (avail >= 256 && (pColormap->pVisual->class|DynamicClass) == PseudoColor)
		policy = PictureCmapPolicyColor;
	    else if (avail >= 64)
		policy = PictureCmapPolicyGray;
	    else
		policy = PictureCmapPolicyMono;
	}
    }
    /*
     * Make sure enough cells are free for the chosen policy
     */
    for (;;)
    {
	switch (policy) {
	case PictureCmapPolicyAll:
	    needed = 0;
	    break;
	case PictureCmapPolicyColor:
	    needed = 71;
	    break;
	case PictureCmapPolicyGray:
	    needed = 11;
	    break;
	case PictureCmapPolicyMono:
	default:
	    needed = 0;
	    break;
	}
	if (needed <= pColormap->freeRed)
	    break;
	policy--;
    } 
    
    /*
     * Compute size of cube and gray ramps
     */
    cube = gray = 0;
    switch (policy) {
    case PictureCmapPolicyAll:
	/*
	 * Allocate as big a cube as possible
	 */
	if ((pColormap->pVisual->class|DynamicClass) == PseudoColor)
	{
	    for (cube = 1; cube * cube * cube < pColormap->pVisual->ColormapEntries; cube++)
		;
	    cube--;
	    if (cube == 1)
		cube = 0;
	}
	else
	    cube = 0;
	/*
	 * Figure out how many gray levels to use so that they
	 * line up neatly with the cube
	 */
	if (cube)
	{
	    needed = pColormap->pVisual->ColormapEntries - (cube*cube*cube);
	    /* levels to fill in with */
	    gray = needed / (cube - 1);
	    /* total levels */
	    gray = (gray + 1) * (cube - 1) + 1;
	}
	else
	    gray = pColormap->pVisual->ColormapEntries;
	break;
		
    case PictureCmapPolicyColor:
	cube = NUM_CUBE_LEVELS;
	/* fall through ... */
    case PictureCmapPolicyGray:
	gray = NUM_GRAY_LEVELS;
	break;
    case PictureCmapPolicyMono:
    default:
	gray = 2;
	break;
    }
    
    memset (used, '\0', pColormap->pVisual->ColormapEntries * sizeof (Bool));
d64 4
a67 5
		red = (r * 65535 + (cube-1)/2) / (cube - 1);
		green = (g * 65535 + (cube-1)/2) / (cube - 1);
		blue = (b * 65535 + (cube-1)/2) / (cube - 1);
		if (AllocColor (pColormap, &red, &green, 
				&blue, &pixel, 0) != Success)
d69 4
a72 1
		used[pixel] = TRUE;
d74 1
a74 1
    for (g = 0; g < gray; g++)
d76 4
a79 2
	red = green = blue = (g * 65535 + (gray-1)/2) / (gray - 1);
	if (AllocColor (pColormap, &red, &green, &blue, &pixel, 0) != Success)
d81 4
a84 1
	used[pixel] = TRUE;
a85 4
    n = 0;
    for (i = 0; i < pColormap->pVisual->ColormapEntries; i++)
	if (used[i])
	    pixels[n++] = i;
a86 2
    *nump = n;
    
d92 1
a92 1
FindBestColor (miIndexedPtr pIndexed, Pixel *pixels, int num,
d95 1
a95 1
    Pixel   best = pixels[0];
d101 1
a101 2
	Pixel	pixel = *pixels++;
	CARD32	v = pIndexed->rgba[pixel];
d113 1
a113 1
	    best = pixel;
d115 1
d122 1
a122 1
FindBestGray (miIndexedPtr pIndexed, Pixel *pixels, int num, int gray)
d124 1
a124 1
    Pixel   best = pixels[0];
d132 1
a132 2
	Pixel   pixel = *pixels++;
	CARD32	v = pIndexed->rgba[pixel];
d141 1
a141 1
	    best = pixel;
d143 1
a151 2
    ColormapPtr	    pColormap = pFormat->index.pColormap;
    VisualPtr	    pVisual = pColormap->pVisual;
d153 3
a155 1
    Pixel	    pixels[MI_MAX_INDEXED];
a156 2
    int		    num;
    int		    i;
d159 1
a159 1
    if (pVisual->ColormapEntries > MI_MAX_INDEXED)
a160 13
    
    if (pVisual->class & DynamicClass)
    {
	if (!miBuildRenderColormap (pColormap, pixels, &num))
	    return FALSE;
    }
    else
    {
	num = pVisual->ColormapEntries;
	for (p = 0; p < num; p++)
	    pixels[p] = p;
    }
    
d164 4
a167 4
    
    pFormat->index.nvalues = num;
    pFormat->index.pValues = xalloc (num * sizeof (xIndexValue));
    if (!pFormat->index.pValues)
d169 12
a180 2
	xfree (pIndexed);
	return FALSE;
a181 2
    
    
d185 5
a189 9
    QueryColors (pColormap, num, pixels, rgb);
    for (i = 0; i < num; i++)
    {
	p = pixels[i];
	pFormat->index.pValues[i].pixel = p;
	pFormat->index.pValues[i].red   = rgb[i].red;
	pFormat->index.pValues[i].green = rgb[i].green;
	pFormat->index.pValues[i].blue  = rgb[i].blue;
	pFormat->index.pValues[i].alpha = 0xffff;
d191 3
a193 5
			     ((rgb[i].red   & 0xff00) << 8) |
			     ((rgb[i].green & 0xff00)     ) |
			     ((rgb[i].blue  & 0xff00) >> 8));
    }

d198 1
a198 1
    switch (pVisual->class | DynamicClass) {
d202 1
a202 1
	    pIndexed->ent[r] = FindBestGray (pIndexed, pixels, num, r);
d211 1
a211 2
		    pIndexed->ent[p] = FindBestColor (pIndexed, pixels, num,
						      r, g, b);
d216 1
a216 1
    pFormat->index.devPrivate = pIndexed;
d224 1
a224 6
    if (pFormat->index.devPrivate)
    {
	xfree (pFormat->index.devPrivate);
	pFormat->index.devPrivate = 0;
    }
    if (pFormat->index.pValues)
d226 2
a227 2
	xfree (pFormat->index.pValues);
	pFormat->index.pValues = 0;
d237 1
a237 1
    miIndexedPtr pIndexed = pFormat->index.devPrivate;
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d2 1
a2 1
 * $XFree86: xc/programs/Xserver/render/miindex.c,v 1.8 2002/11/06 22:45:36 keithp Exp $
d37 5
a41 5
#define NUM_CUBE_LEVELS	4
#define NUM_GRAY_LEVELS	13

static Bool
miBuildRenderColormap (ColormapPtr  pColormap, Pixel *pixels, int *nump)
d43 1
d46 1
a46 6
    Pixel	pixel;
    Bool	used[MI_MAX_INDEXED];
    int		needed;
    int		policy;
    int		cube, gray;
    int		i, n;
d48 2
a49 5
    if (pColormap->mid != pColormap->pScreen->defColormap)
    {
	policy = PictureCmapPolicyAll;
    }
    else
d51 9
a59 85
	int	avail = pColormap->pVisual->ColormapEntries;
	policy = PictureCmapPolicy;
	if (policy == PictureCmapPolicyDefault)
	{
	    if (avail >= 256 && (pColormap->pVisual->class|DynamicClass) == PseudoColor)
		policy = PictureCmapPolicyColor;
	    else if (avail >= 64)
		policy = PictureCmapPolicyGray;
	    else
		policy = PictureCmapPolicyMono;
	}
    }
    /*
     * Make sure enough cells are free for the chosen policy
     */
    for (;;)
    {
	switch (policy) {
	case PictureCmapPolicyAll:
	    needed = 0;
	    break;
	case PictureCmapPolicyColor:
	    needed = 71;
	    break;
	case PictureCmapPolicyGray:
	    needed = 11;
	    break;
	case PictureCmapPolicyMono:
	default:
	    needed = 0;
	    break;
	}
	if (needed <= pColormap->freeRed)
	    break;
	policy--;
    } 
    
    /*
     * Compute size of cube and gray ramps
     */
    cube = gray = 0;
    switch (policy) {
    case PictureCmapPolicyAll:
	/*
	 * Allocate as big a cube as possible
	 */
	if ((pColormap->pVisual->class|DynamicClass) == PseudoColor)
	{
	    for (cube = 1; cube * cube * cube < pColormap->pVisual->ColormapEntries; cube++)
		;
	    cube--;
	    if (cube == 1)
		cube = 0;
	}
	else
	    cube = 0;
	/*
	 * Figure out how many gray levels to use so that they
	 * line up neatly with the cube
	 */
	if (cube)
	{
	    needed = pColormap->pVisual->ColormapEntries - (cube*cube*cube);
	    /* levels to fill in with */
	    gray = needed / (cube - 1);
	    /* total levels */
	    gray = (gray + 1) * (cube - 1) + 1;
	}
	else
	    gray = pColormap->pVisual->ColormapEntries;
	break;
		
    case PictureCmapPolicyColor:
	cube = NUM_CUBE_LEVELS;
	/* fall through ... */
    case PictureCmapPolicyGray:
	gray = NUM_GRAY_LEVELS;
	break;
    case PictureCmapPolicyMono:
    default:
	gray = 2;
	break;
    }
    
    memset (used, '\0', pColormap->pVisual->ColormapEntries * sizeof (Bool));
d64 4
a67 5
		red = (r * 65535 + (cube-1)/2) / (cube - 1);
		green = (g * 65535 + (cube-1)/2) / (cube - 1);
		blue = (b * 65535 + (cube-1)/2) / (cube - 1);
		if (AllocColor (pColormap, &red, &green, 
				&blue, &pixel, 0) != Success)
d69 4
a72 1
		used[pixel] = TRUE;
d74 1
a74 1
    for (g = 0; g < gray; g++)
d76 4
a79 2
	red = green = blue = (g * 65535 + (gray-1)/2) / (gray - 1);
	if (AllocColor (pColormap, &red, &green, &blue, &pixel, 0) != Success)
d81 4
a84 1
	used[pixel] = TRUE;
a85 4
    n = 0;
    for (i = 0; i < pColormap->pVisual->ColormapEntries; i++)
	if (used[i])
	    pixels[n++] = i;
a86 2
    *nump = n;
    
d92 1
a92 1
FindBestColor (miIndexedPtr pIndexed, Pixel *pixels, int num,
d95 1
a95 1
    Pixel   best = pixels[0];
d101 1
a101 2
	Pixel	pixel = *pixels++;
	CARD32	v = pIndexed->rgba[pixel];
d113 1
a113 1
	    best = pixel;
d115 1
d122 1
a122 1
FindBestGray (miIndexedPtr pIndexed, Pixel *pixels, int num, int gray)
d124 1
a124 1
    Pixel   best = pixels[0];
d132 1
a132 2
	Pixel   pixel = *pixels++;
	CARD32	v = pIndexed->rgba[pixel];
d141 1
a141 1
	    best = pixel;
d143 1
a151 2
    ColormapPtr	    pColormap = pFormat->index.pColormap;
    VisualPtr	    pVisual = pColormap->pVisual;
d153 3
a155 1
    Pixel	    pixels[MI_MAX_INDEXED];
a156 2
    int		    num;
    int		    i;
d159 1
a159 1
    if (pVisual->ColormapEntries > MI_MAX_INDEXED)
a160 13
    
    if (pVisual->class & DynamicClass)
    {
	if (!miBuildRenderColormap (pColormap, pixels, &num))
	    return FALSE;
    }
    else
    {
	num = pVisual->ColormapEntries;
	for (p = 0; p < num; p++)
	    pixels[p] = p;
    }
    
d164 4
a167 4
    
    pFormat->index.nvalues = num;
    pFormat->index.pValues = xalloc (num * sizeof (xIndexValue));
    if (!pFormat->index.pValues)
d169 12
a180 2
	xfree (pIndexed);
	return FALSE;
a181 2
    
    
d185 5
a189 9
    QueryColors (pColormap, num, pixels, rgb);
    for (i = 0; i < num; i++)
    {
	p = pixels[i];
	pFormat->index.pValues[i].pixel = p;
	pFormat->index.pValues[i].red   = rgb[i].red;
	pFormat->index.pValues[i].green = rgb[i].green;
	pFormat->index.pValues[i].blue  = rgb[i].blue;
	pFormat->index.pValues[i].alpha = 0xffff;
d191 3
a193 5
			     ((rgb[i].red   & 0xff00) << 8) |
			     ((rgb[i].green & 0xff00)     ) |
			     ((rgb[i].blue  & 0xff00) >> 8));
    }

d198 1
a198 1
    switch (pVisual->class | DynamicClass) {
d202 1
a202 1
	    pIndexed->ent[r] = FindBestGray (pIndexed, pixels, num, r);
d211 1
a211 2
		    pIndexed->ent[p] = FindBestColor (pIndexed, pixels, num,
						      r, g, b);
d216 1
a216 1
    pFormat->index.devPrivate = pIndexed;
d224 1
a224 6
    if (pFormat->index.devPrivate)
    {
	xfree (pFormat->index.devPrivate);
	pFormat->index.devPrivate = 0;
    }
    if (pFormat->index.pValues)
d226 2
a227 2
	xfree (pFormat->index.pValues);
	pFormat->index.pValues = 0;
d237 1
a237 1
    miIndexedPtr pIndexed = pFormat->index.devPrivate;
@

