head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.09.25;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.09.25;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.18.28.55;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.26.07;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 *Copyright (C) 1994-2000 The XFree86 Project, Inc. All Rights Reserved.
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL THE XFREE86 PROJECT BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of the XFree86 Project
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from the XFree86 Project.
 *
 * Authors:	Harold L Hunt II
 */
/* $XFree86: xc/programs/Xserver/hw/xwin/wingetsp.c,v 1.7 2001/11/01 12:19:40 alanh Exp $ */

#include "win.h"

/* See Porting Layer Definition - p. 55 */
void
winGetSpansNativeGDI (DrawablePtr	pDrawable, 
		      int		nMax, 
		      DDXPointPtr	pPoints, 
		      int		*piWidths, 
		      int		iSpans, 
		      char		*pDsts)
{
  PixmapPtr		pPixmap = NULL;
  winPrivPixmapPtr	pPixmapPriv = NULL;
  int			iSpan;
  DDXPointPtr		pPoint = NULL;
  int			*piWidth = NULL;
  char			*pDst = pDsts;
  int			iBytesToCopy;
  HBITMAP		hbmpWindow, hbmpOrig;
  BYTE			*pbWindow = NULL;
  HDC			hdcMem;
  ScreenPtr		pScreen = pDrawable->pScreen;
  winScreenPriv(pScreen);
  int			iByteWidth;

  /* Branch on the drawable type */
  switch (pDrawable->type)
    {
    case DRAWABLE_PIXMAP:
      ErrorF ("winGetSpans - DRAWABLE_PIXMAP %08x\n",
	      pDrawable);

      pPixmap = (PixmapPtr) pDrawable;
      pPixmapPriv = winGetPixmapPriv (pPixmap);

      /* Loop through spans */
      for (iSpan = 0; iSpan < iSpans; ++iSpan)
	{
	  pPoint = pPoints + iSpan;
	  piWidth = piWidths + iSpan;
	  
	  iBytesToCopy = PixmapBytePad (*piWidth, pDrawable->depth);

	  memcpy (pDst,
		  pPixmapPriv->pbBits
		  + pPixmapPriv->dwScanlineBytes * pPoint->y,
		  iBytesToCopy);

	  ErrorF ("(%dx%dx%d) (%d,%d) w: %d\n",
		  pDrawable->width, pDrawable->height, pDrawable->depth,
		  pPoint->x, pPoint->y, *piWidth);

	  /* Calculate offset of next bit destination */
	  pDst += 4 * ((*piWidth + 31) / 32);
	}
      break;

    case DRAWABLE_WINDOW:
      ErrorF ("winGetSpans - DRAWABLE_WINDOW\n");

      /*
       * FIXME: Making huge assumption here that we are copying the
       * area behind where the cursor will be displayed.  We already
       * know the size of the cursor, so this works, for now.
       */

      /* Create a bitmap to blit the window data to */
      hbmpWindow = winCreateDIBNativeGDI (*piWidths,
					  *piWidths,
					  pDrawable->depth,
					  &pbWindow,
					  NULL);

      /* Open a memory HDC */
      hdcMem = CreateCompatibleDC (NULL);

      /* Select the window bitmap */
      hbmpOrig = SelectObject (hdcMem, hbmpWindow);
			       
      /* Transfer the window bits to the window bitmap */
      BitBlt (hdcMem,
	      0, 0,
	      *piWidths, *piWidths, /* FIXME: Assuming square region */
	      pScreenPriv->hdcScreen,
	      pPoints->x, pPoints->y,
	      SRCCOPY);

      /* Pop the window bitmap out of the HDC */
      SelectObject (hdcMem, hbmpOrig);
      
      /* Delete the memory HDC */
      DeleteDC (hdcMem);
      hdcMem = NULL;

      iByteWidth = PixmapBytePad (*piWidths, pDrawable->depth);

      /* Loop through spans */
      for (iSpan = 0; iSpan < iSpans; ++iSpan)
	{
	  pPoint = pPoints + iSpan;
	  piWidth = piWidths + iSpan;

	  iBytesToCopy = PixmapBytePad (*piWidth, pDrawable->depth);

	  memcpy (pDst,
		  pbWindow + iByteWidth * (pPoint->y - pPoints->y),
		  iBytesToCopy);
	  
	  ErrorF ("(%dx%dx%d) (%d,%d) w: %d\n",
		  pDrawable->width, pDrawable->height, pDrawable->depth,
		  pPoint->x, pPoint->y, *piWidth);

	  /* Calculate offset of next bit destination */
	  pDst += 4 * ((*piWidth + 31) / 32);
	}

      /* Delete the window bitmap */
      DeleteObject (hbmpWindow);
      break;

    case UNDRAWABLE_WINDOW:
      FatalError ("winGetSpans - UNDRAWABLE_WINDOW\n");
      break;

    case DRAWABLE_BUFFER:
      FatalError ("winGetSpans - DRAWABLE_BUFFER\n");
      break;
      
    default:
      FatalError ("winGetSpans - Unknown drawable type\n");
      break;
    }
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@a28 1
 * 		Alan Hourihane <alanh@@fairlite.demon.co.uk>
d30 1
a30 1
/* $XFree86: xc/programs/Xserver/hw/xwin/wingetsp.c,v 1.8 2003/08/07 23:47:58 alanh Exp $ */
d49 2
a50 1
  HBITMAP		hbmpWindow, hbmpOrig, hbmpOrig1;
d52 1
a52 1
  HDC			hdcMem, hdcMem1;
d55 1
a60 1
#if 0
a62 1
#endif
a66 11
      /* Open a memory HDC */
      hdcMem1 = CreateCompatibleDC (NULL);
      hdcMem = CreateCompatibleDC (NULL);

      /* Select the drawable pixmap into a DC */
      hbmpOrig1 = SelectObject (hdcMem1, pPixmapPriv->hBitmap);

      if (hbmpOrig1 == NULL)
	FatalError ("winGetSpans - DRAWABLE_PIXMAP - SelectObject () "
		    "failed on pPixmapPriv->hBitmap\n");

d72 2
a73 15

      	  hbmpWindow = winCreateDIBNativeGDI (*piWidth, 1,
					      pDrawable->depth,
					      &pbWindow,
					      NULL);

      	  hbmpOrig = SelectObject (hdcMem, hbmpWindow);
			       
          /* Transfer the window bits to the window bitmap */
          BitBlt (hdcMem,
		  0, 0,
		  *piWidth, 1, 
		  hdcMem1,
		  pPoint->x, pPoint->y,
		  SRCCOPY);
d76 3
a78 6
		  (char*) pbWindow,
		  PixmapBytePad (*piWidth, pDrawable->depth));

      	  /* Pop the window bitmap out of the HDC and delete the bitmap */
      	  SelectObject (hdcMem, hbmpOrig);
	  DeleteObject (hbmpWindow);
a79 1
#if 0
a82 1
#endif
d85 1
a85 1
	  pDst += PixmapBytePad (*piWidth, pDrawable->depth);
a86 7
      
      /* Pop the pixmap's bitmap out of the HDC */
      SelectObject (hdcMem1, hbmpOrig1);

      /* Delete the HDCs */
      DeleteDC (hdcMem1);
      DeleteDC (hdcMem);
a89 1
#if 0
d91 13
a103 1
#endif
d108 20
d134 1
a134 14
      	  hbmpWindow = winCreateDIBNativeGDI (*piWidth, 1,
					      pDrawable->depth,
					      &pbWindow,
					      NULL);

      	  hbmpOrig = SelectObject (hdcMem, hbmpWindow);

          /* Transfer the window bits to the window bitmap */
          BitBlt (hdcMem,
		  0, 0,
		  *piWidth, 1, 
		  pScreenPriv->hdcScreen,
		  pPoint->x, pPoint->y,
		  SRCCOPY);
d137 3
a139 9
		  (char*) pbWindow,
		  PixmapBytePad (*piWidth, pDrawable->depth));

      	  /* Pop the window bitmap out of the HDC */
      	  SelectObject (hdcMem, hbmpOrig);

	  DeleteObject (hbmpWindow);

#if 0
a142 1
#endif
d145 1
a145 1
	  pDst += PixmapBytePad (*piWidth, pDrawable->depth);
d149 1
a149 1
      DeleteDC (hdcMem);
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@a28 1
 * 		Alan Hourihane <alanh@@fairlite.demon.co.uk>
d30 1
a30 1
/* $XFree86: xc/programs/Xserver/hw/xwin/wingetsp.c,v 1.8 2003/08/07 23:47:58 alanh Exp $ */
d49 2
a50 1
  HBITMAP		hbmpWindow, hbmpOrig, hbmpOrig1;
d52 1
a52 1
  HDC			hdcMem, hdcMem1;
d55 1
a60 1
#if 0
a62 1
#endif
a66 11
      /* Open a memory HDC */
      hdcMem1 = CreateCompatibleDC (NULL);
      hdcMem = CreateCompatibleDC (NULL);

      /* Select the drawable pixmap into a DC */
      hbmpOrig1 = SelectObject (hdcMem1, pPixmapPriv->hBitmap);

      if (hbmpOrig1 == NULL)
	FatalError ("winGetSpans - DRAWABLE_PIXMAP - SelectObject () "
		    "failed on pPixmapPriv->hBitmap\n");

d72 2
a73 15

      	  hbmpWindow = winCreateDIBNativeGDI (*piWidth, 1,
					      pDrawable->depth,
					      &pbWindow,
					      NULL);

      	  hbmpOrig = SelectObject (hdcMem, hbmpWindow);
			       
          /* Transfer the window bits to the window bitmap */
          BitBlt (hdcMem,
		  0, 0,
		  *piWidth, 1, 
		  hdcMem1,
		  pPoint->x, pPoint->y,
		  SRCCOPY);
d76 3
a78 6
		  (char*) pbWindow,
		  PixmapBytePad (*piWidth, pDrawable->depth));

      	  /* Pop the window bitmap out of the HDC and delete the bitmap */
      	  SelectObject (hdcMem, hbmpOrig);
	  DeleteObject (hbmpWindow);
a79 1
#if 0
a82 1
#endif
d85 1
a85 1
	  pDst += PixmapBytePad (*piWidth, pDrawable->depth);
a86 7
      
      /* Pop the pixmap's bitmap out of the HDC */
      SelectObject (hdcMem1, hbmpOrig1);

      /* Delete the HDCs */
      DeleteDC (hdcMem1);
      DeleteDC (hdcMem);
a89 1
#if 0
d91 13
a103 1
#endif
d108 20
d134 1
a134 14
      	  hbmpWindow = winCreateDIBNativeGDI (*piWidth, 1,
					      pDrawable->depth,
					      &pbWindow,
					      NULL);

      	  hbmpOrig = SelectObject (hdcMem, hbmpWindow);

          /* Transfer the window bits to the window bitmap */
          BitBlt (hdcMem,
		  0, 0,
		  *piWidth, 1, 
		  pScreenPriv->hdcScreen,
		  pPoint->x, pPoint->y,
		  SRCCOPY);
d137 3
a139 9
		  (char*) pbWindow,
		  PixmapBytePad (*piWidth, pDrawable->depth));

      	  /* Pop the window bitmap out of the HDC */
      	  SelectObject (hdcMem, hbmpOrig);

	  DeleteObject (hbmpWindow);

#if 0
a142 1
#endif
d145 1
a145 1
	  pDst += PixmapBytePad (*piWidth, pDrawable->depth);
d149 1
a149 1
      DeleteDC (hdcMem);
@

