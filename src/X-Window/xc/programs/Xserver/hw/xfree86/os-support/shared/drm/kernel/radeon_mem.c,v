head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407221130:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.04.08.18.37.42;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.37.42;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.18.26.14;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.25.26;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* radeon_mem.c -- Simple agp/fb memory manager for radeon -*- linux-c -*-
 *
 * Copyright (C) The Weather Channel, Inc.  2002.  All Rights Reserved.
 * 
 * The Weather Channel (TM) funded Tungsten Graphics to develop the
 * initial release of the Radeon 8500 driver under the XFree86 license.
 * This notice must be preserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keith@@tungstengraphics.com>
 */

#include "radeon.h"
#include "drmP.h"
#include "drm.h"
#include "radeon_drm.h"
#include "radeon_drv.h"

/* Very simple allocator for agp memory, working on a static range
 * already mapped into each client's address space.  
 */

static struct mem_block *split_block(struct mem_block *p, int start, int size,
				     int pid )
{
	/* Maybe cut off the start of an existing block */
	if (start > p->start) {
		struct mem_block *newblock = DRM_MALLOC(sizeof(*newblock));
		if (!newblock) 
			goto out;
		newblock->start = start;
		newblock->size = p->size - (start - p->start);
		newblock->pid = 0;
		newblock->next = p->next;
		newblock->prev = p;
		p->next->prev = newblock;
		p->next = newblock;
		p->size -= newblock->size;
		p = newblock;
	}
   
	/* Maybe cut off the end of an existing block */
	if (size < p->size) {
		struct mem_block *newblock = DRM_MALLOC(sizeof(*newblock));
		if (!newblock)
			goto out;
		newblock->start = start + size;
		newblock->size = p->size - size;
		newblock->pid = 0;
		newblock->next = p->next;
		newblock->prev = p;
		p->next->prev = newblock;
		p->next = newblock;
		p->size = size;
	}

 out:
	/* Our block is in the middle */
	p->pid = pid;
	return p;
}

static struct mem_block *alloc_block( struct mem_block *heap, int size, 
				      int align2, int pid )
{
	struct mem_block *p;
	int mask = (1 << align2)-1;

	for (p = heap->next ; p != heap ; p = p->next) {
		int start = (p->start + mask) & ~mask;
		if (p->pid == 0 && start + size <= p->start + p->size)
			return split_block( p, start, size, pid );
	}

	return NULL;
}

static struct mem_block *find_block( struct mem_block *heap, int start )
{
	struct mem_block *p;

	for (p = heap->next ; p != heap ; p = p->next) 
		if (p->start == start)
			return p;

	return NULL;
}


static void free_block( struct mem_block *p )
{
	p->pid = 0;

	/* Assumes a single contiguous range.  Needs a special pid in
	 * 'heap' to stop it being subsumed.
	 */
	if (p->next->pid == 0) {
		struct mem_block *q = p->next;
		p->size += q->size;
		p->next = q->next;
		p->next->prev = p;
		DRM_FREE(q);
	}

	if (p->prev->pid == 0) {
		struct mem_block *q = p->prev;
		q->size += p->size;
		q->next = p->next;
		q->next->prev = q;
		DRM_FREE(p);
	}
}

static void print_heap( struct mem_block *heap )
{
	struct mem_block *p;

	for (p = heap->next ; p != heap ; p = p->next) 
		DRM_DEBUG("0x%x..0x%x (0x%x) -- owner %d\n",
			  p->start, p->start + p->size,
			  p->size, p->pid);
}

/* Initialize.  How to check for an uninitialized heap?
 */
static int init_heap(struct mem_block **heap, int start, int size)
{
	struct mem_block *blocks = DRM_MALLOC(sizeof(*blocks));

	if (!blocks) 
		return -ENOMEM;
	
	*heap = DRM_MALLOC(sizeof(**heap));
	if (!*heap) {
		DRM_FREE( blocks );
		return -ENOMEM;
	}

	blocks->start = start;
	blocks->size = size;
	blocks->pid = 0;
	blocks->next = blocks->prev = *heap;

	memset( *heap, 0, sizeof(**heap) );
	(*heap)->pid = -1;
	(*heap)->next = (*heap)->prev = blocks;
	return 0;
}


/* Free all blocks associated with the releasing pid.
 */
void radeon_mem_release( struct mem_block *heap )
{
	int pid = DRM_CURRENTPID;
	struct mem_block *p;

	if (!heap || !heap->next)
		return;

	for (p = heap->next ; p != heap ; p = p->next) {
		if (p->pid == pid) 
			p->pid = 0;
	}

	/* Assumes a single contiguous range.  Needs a special pid in
	 * 'heap' to stop it being subsumed.
	 */
	for (p = heap->next ; p != heap ; p = p->next) {
		while (p->pid == 0 && p->next->pid == 0) {
			struct mem_block *q = p->next;
			p->size += q->size;
			p->next = q->next;
			p->next->prev = p;
			DRM_FREE(q);
		}
	}
}

/* Shutdown.
 */
void radeon_mem_takedown( struct mem_block **heap )
{
	struct mem_block *p;
	
	if (!*heap)
		return;

	for (p = (*heap)->next ; p != *heap ; ) {
		struct mem_block *q = p;
		p = p->next;
		DRM_FREE(q);
	}

	DRM_FREE( *heap );
	*heap = 0;
}



/* IOCTL HANDLERS */

static struct mem_block **get_heap( drm_radeon_private_t *dev_priv,
				   int region )
{
	switch( region ) {
	case RADEON_MEM_REGION_AGP:
 		return &dev_priv->agp_heap; 
	case RADEON_MEM_REGION_FB:
		return &dev_priv->fb_heap;
	default:
		return 0;
	}
}

int radeon_mem_alloc( DRM_IOCTL_ARGS )
{
	DRM_DEVICE;
	drm_radeon_private_t *dev_priv = dev->dev_private;
	drm_radeon_mem_alloc_t alloc;
	struct mem_block *block, **heap;

	if ( !dev_priv ) {
		DRM_ERROR( "%s called with no initialization\n", __FUNCTION__ );
		return DRM_ERR(EINVAL);
	}

	DRM_COPY_FROM_USER_IOCTL( alloc, (drm_radeon_mem_alloc_t *)data,
				  sizeof(alloc) );

	heap = get_heap( dev_priv, alloc.region );
	if (!heap || !*heap)
		return DRM_ERR(EFAULT);
	
	/* Make things easier on ourselves: all allocations at least
	 * 4k aligned.
	 */
	if (alloc.alignment < 12)
		alloc.alignment = 12;

	block = alloc_block( *heap, alloc.size, alloc.alignment,
			     DRM_CURRENTPID );

	if (!block) 
		return DRM_ERR(ENOMEM);

	if ( DRM_COPY_TO_USER( alloc.region_offset, &block->start, 
			       sizeof(int) ) ) {
		DRM_ERROR( "copy_to_user\n" );
		return DRM_ERR(EFAULT);
	}
	
	return 0;
}



int radeon_mem_free( DRM_IOCTL_ARGS )
{
	DRM_DEVICE;
	drm_radeon_private_t *dev_priv = dev->dev_private;
	drm_radeon_mem_free_t memfree;
	struct mem_block *block, **heap;

	if ( !dev_priv ) {
		DRM_ERROR( "%s called with no initialization\n", __FUNCTION__ );
		return DRM_ERR(EINVAL);
	}

	DRM_COPY_FROM_USER_IOCTL( memfree, (drm_radeon_mem_free_t *)data,
				  sizeof(memfree) );

	heap = get_heap( dev_priv, memfree.region );
	if (!heap || !*heap)
		return DRM_ERR(EFAULT);
	
	block = find_block( *heap, memfree.region_offset );
	if (!block)
		return DRM_ERR(EFAULT);

	if (block->pid != DRM_CURRENTPID)
		return DRM_ERR(EPERM);

	free_block( block );	
	return 0;
}

int radeon_mem_init_heap( DRM_IOCTL_ARGS )
{
	DRM_DEVICE;
	drm_radeon_private_t *dev_priv = dev->dev_private;
	drm_radeon_mem_init_heap_t initheap;
	struct mem_block **heap;

	if ( !dev_priv ) {
		DRM_ERROR( "%s called with no initialization\n", __FUNCTION__ );
		return DRM_ERR(EINVAL);
	}

	DRM_COPY_FROM_USER_IOCTL( initheap, (drm_radeon_mem_init_heap_t *)data,
				  sizeof(initheap) );

	heap = get_heap( dev_priv, initheap.region );
	if (!heap) 
		return DRM_ERR(EFAULT);
	
	if (*heap) {
		DRM_ERROR("heap already initialized?");
		return DRM_ERR(EFAULT);
	}
		
	return init_heap( heap, initheap.start, initheap.size );
}


@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d1 1
a1 1
/* radeon_mem.c -- Simple GART/fb memory manager for radeon -*- linux-c -*-
d38 1
a38 1
/* Very simple allocator for GART memory, working on a static range
d43 1
a43 1
				     DRMFILE filp )
d52 1
a52 1
		newblock->filp = 0;
d68 1
a68 1
		newblock->filp = 0;
d78 1
a78 1
	p->filp = filp;
d83 1
a83 1
				      int align2, DRMFILE filp )
d90 2
a91 2
		if (p->filp == 0 && start + size <= p->start + p->size)
			return split_block( p, start, size, filp );
d111 1
a111 1
	p->filp = 0;
d113 1
a113 1
	/* Assumes a single contiguous range.  Needs a special filp in
d116 1
a116 1
	if (p->next->filp == 0) {
d121 1
a121 1
		DRM_FREE(q, sizeof(*q));
d124 1
a124 1
	if (p->prev->filp == 0) {
d129 1
a129 1
		DRM_FREE(p, sizeof(*q));
d133 10
d154 1
a154 1
		DRM_FREE( blocks, sizeof(*blocks) );
d160 1
a160 1
	blocks->filp = 0;
d164 1
a164 1
	(*heap)->filp = (DRMFILE) -1;
d170 1
a170 1
/* Free all blocks associated with the releasing file.
d172 1
a172 1
void radeon_mem_release( DRMFILE filp, struct mem_block *heap )
d174 1
d181 2
a182 2
		if (p->filp == filp) 
			p->filp = 0;
d185 1
a185 1
	/* Assumes a single contiguous range.  Needs a special filp in
d189 1
a189 1
		while (p->filp == 0 && p->next->filp == 0) {
d194 1
a194 1
			DRM_FREE(q, sizeof(*q));
d211 1
a211 1
		DRM_FREE(q, sizeof(*q));
d214 1
a214 1
	DRM_FREE( *heap, sizeof(**heap) );
d226 2
a227 2
	case RADEON_MEM_REGION_GART:
 		return &dev_priv->gart_heap; 
d261 1
a261 1
			     filp );
d300 1
a300 1
	if (block->filp != filp)
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d1 1
a1 1
/* radeon_mem.c -- Simple GART/fb memory manager for radeon -*- linux-c -*-
d38 1
a38 1
/* Very simple allocator for GART memory, working on a static range
d43 1
a43 1
				     DRMFILE filp )
d52 1
a52 1
		newblock->filp = 0;
d68 1
a68 1
		newblock->filp = 0;
d78 1
a78 1
	p->filp = filp;
d83 1
a83 1
				      int align2, DRMFILE filp )
d90 2
a91 2
		if (p->filp == 0 && start + size <= p->start + p->size)
			return split_block( p, start, size, filp );
d111 1
a111 1
	p->filp = 0;
d113 1
a113 1
	/* Assumes a single contiguous range.  Needs a special filp in
d116 1
a116 1
	if (p->next->filp == 0) {
d121 1
a121 1
		DRM_FREE(q, sizeof(*q));
d124 1
a124 1
	if (p->prev->filp == 0) {
d129 1
a129 1
		DRM_FREE(p, sizeof(*q));
d133 10
d154 1
a154 1
		DRM_FREE( blocks, sizeof(*blocks) );
d160 1
a160 1
	blocks->filp = 0;
d164 1
a164 1
	(*heap)->filp = (DRMFILE) -1;
d170 1
a170 1
/* Free all blocks associated with the releasing file.
d172 1
a172 1
void radeon_mem_release( DRMFILE filp, struct mem_block *heap )
d174 1
d181 2
a182 2
		if (p->filp == filp) 
			p->filp = 0;
d185 1
a185 1
	/* Assumes a single contiguous range.  Needs a special filp in
d189 1
a189 1
		while (p->filp == 0 && p->next->filp == 0) {
d194 1
a194 1
			DRM_FREE(q, sizeof(*q));
d211 1
a211 1
		DRM_FREE(q, sizeof(*q));
d214 1
a214 1
	DRM_FREE( *heap, sizeof(**heap) );
d226 2
a227 2
	case RADEON_MEM_REGION_GART:
 		return &dev_priv->gart_heap; 
d261 1
a261 1
			     filp );
d300 1
a300 1
	if (block->filp != filp)
@

