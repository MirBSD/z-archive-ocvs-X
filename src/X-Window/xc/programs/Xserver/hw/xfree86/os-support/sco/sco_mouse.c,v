head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407221130:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.08.54;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.08.54;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.37.37;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.25.22;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $XFree86: xc/programs/Xserver/hw/xfree86/os-support/sco/sco_mouse.c,v 3.12 2001/06/30 22:41:49 tsi Exp $ */
/*
 * Copyright 2001 by J. Kean Johnston <jkj@@sco.com>
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name J. Kean Johnston not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  J. Kean Johnston makes no
 * representations about the suitability of this software for any purpose.
 * It is provided "as is" without express or implied warranty.
 *
 * J. KEAN JOHNSTON DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL J. KEAN JOHNSTON BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
 * USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

/* $XConsortium$ */

#include "X.h"
#include "compiler.h"

#include "xf86.h"
#include "xf86Priv.h"
#include "xf86_OSlib.h"
#include "xf86Xinput.h"
#include "xf86OSmouse.h"
#include "mipointer.h"
#include <sys/event.h>
#include <mouse.h>

static int
SupportedInterfaces (void)
{
  /* FIXME: Is this correct? Should we just return MSE_MISC? */
  return MSE_SERIAL | MSE_BUS | MSE_PS2 | MSE_XPS2 | MSE_MISC | MSE_AUTO;
}

static const char *internalNames[] = {
  "OSMouse",
  NULL
};

static const char **
BuiltinNames (void)
{
  return internalNames;
}

static Bool
CheckProtocol (const char *protocol)
{
  int i;

  for (i = 0; internalNames[i]; i++) {
    if (xf86NameCmp (protocol, internalNames[i]) == 0)
      return TRUE;
  }

  return FALSE;
}

static const char *
DefaultProtocol (void)
{
  return "OSMouse";
}

static const char *
evtErrStr (int evterr)
{
  switch (evterr) {
  case -1: return "error in config files";
  case -2: return "no mouse devices to attach";
  case -3: return "unable to open device";
  case -4: return "unable to open event queue";
  case -999: return "unable to initialize event driver";
  default: return "unknown event driver error";
  }
}

static int
OsMouseProc (DeviceIntPtr pPointer, int what)
{
  InputInfoPtr pInfo;
  MouseDevPtr pMse;
  unsigned char map[9];
  dmask_t dmask;
  struct devinfo *di;
  MessageType from = X_CONFIG;
  int evi;

  pInfo = pPointer->public.devicePrivate;
  pMse = pInfo->private;
  pMse->device = pPointer;

  switch (what) {
  case DEVICE_INIT: 
    pPointer->public.on = FALSE;

    dmask = D_REL | D_BUTTON;
    if ((evi = ev_init()) < 0) {
      FatalError ("OsMouseProc: Event driver initialization failed (%s)\n",
          evtErrStr(evi));
    }
    pInfo->fd = ev_open (&dmask);
    if (pInfo->fd < 0) {
      FatalError ("OsMouseProc: DEVICE_INIT failed (%s)\n", evtErrStr(pInfo->fd));
    }

    /*
     * We need to loop here since we will accept either relative device
     * types (mice) or absolute ones (bitpads / lightpens).
     */
    di = (struct devinfo *)0;
    di = ev_getdev(D_REL|D_BUTTON, di);
    if (di == (struct devinfo *)0) {
      FatalError ("OsMouseProc: Could not extract mouse device info\n");
    }
    pMse->buttons = xf86SetIntOption (pInfo->options, "Buttons", 0);
    if (pMse->buttons == 0) {
      pMse->buttons = (int)di->buttons;
      from = X_PROBED;
      if (pMse->buttons <= 0) {
        pMse->buttons = MSE_DFLTBUTTONS;
        from = X_DEFAULT;
      }
    }
    xf86Msg (from, "%s: Buttons: %d\n", pInfo->name, pMse->buttons);

    map[1] = 1;
    map[2] = 2;
    map[3] = 3;
    map[4] = 6;
    map[5] = 7;
    map[6] = 8;
    map[7] = 4;
    map[8] = 5; /* Compatibile with SCO X server */

    InitPointerDeviceStruct((DevicePtr)pPointer, map, 8,
        miPointerGetMotionEvents, pMse->Ctrl,
        miPointerGetMotionBufferSize());

    /* X valuator */
    xf86InitValuatorAxisStruct(pPointer, 0, 0, -1, 1, 0, 1);
    xf86InitValuatorDefaults(pPointer, 0);

    /* Y valuator */
    xf86InitValuatorAxisStruct(pPointer, 1, 0, -1, 1, 0, 1);
    xf86InitValuatorDefaults(pPointer, 1);

    xf86MotionHistoryAllocate(pInfo);

    ev_flush();
    ev_suspend();
    break;

  case DEVICE_ON:
    pMse->lastButtons = 0;
    pMse->emulateState = 0;
    pPointer->public.on = TRUE;
    ev_resume();
    AddEnabledDevice (pInfo->fd);
    break;

  case DEVICE_OFF:
  case DEVICE_CLOSE:
    pPointer->public.on = TRUE;
    RemoveEnabledDevice (pInfo->fd);
    if (what == DEVICE_CLOSE) {
      ev_close();
      pInfo->fd = -1;
    } else {
      ev_suspend();
    }
    break;
  }

  return Success;
}

static void
OsMouseReadInput (InputInfoPtr pInfo)
{
  MouseDevPtr pMse;
  EVENT *evp;

  pMse = pInfo->private;

  while ((evp = ev_read()) != (EVENT *)0) {
    pMse->PostEvent (pInfo, EV_BUTTONS(*evp), EV_DX(*evp), -(EV_DY(*evp)),0,0);
    ev_pop();
  }
}

static Bool
OsMousePreInit(InputInfoPtr pInfo, const char *protocol, int flags)
{
  MouseDevPtr pMse;

  /* This is called when the protocol is "OSMouse". */

  pMse = pInfo->private;
  pMse->protocol = protocol;
  xf86Msg(X_CONFIG, "%s: Protocol: %s\n", pInfo->name, protocol);

  /* Collect the options, and process the common options. */
  xf86CollectInputOptions(pInfo, NULL, NULL);
  xf86ProcessCommonOptions(pInfo, pInfo->options);

  /* Check if the device can be opened. */
  pInfo->fd = ev_init();
  if (pInfo->fd != -1) {
    dmask_t dmask = (D_REL | D_BUTTON);
    pInfo->fd = ev_open(&dmask);
  } else {
    pInfo->fd = -999;
  }

  if (pInfo->fd < 0) {
    if (xf86GetAllowMouseOpenFail())
      xf86Msg(X_WARNING, "%s: cannot open event manager (%s)\n",
          pInfo->name, evtErrStr(pInfo->fd));
    else {
      xf86Msg(X_ERROR, "%s: cannot open event manager (%s)\n",
          pInfo->name, evtErrStr(pInfo->fd));
      xfree(pMse);
      return FALSE;
    }
  }
  ev_close();
  pInfo->fd = -1;

  /* Process common mouse options (like Emulate3Buttons, etc). */
  pMse->CommonOptions(pInfo);

  /* Setup the local procs. */
  pInfo->device_control = OsMouseProc;
  pInfo->read_input = OsMouseReadInput;
    
  pInfo->flags |= XI86_CONFIGURED;
  return TRUE;
}

OSMouseInfoPtr
xf86OSMouseInit (int flags)
{
  OSMouseInfoPtr p;

  p = xcalloc(sizeof(OSMouseInfoRec), 1);
  if (!p)
    return NULL;

  p->SupportedInterfaces        = SupportedInterfaces;
  p->BuiltinNames               = BuiltinNames;
  p->DefaultProtocol            = DefaultProtocol;
  p->CheckProtocol              = CheckProtocol;
  p->PreInit                    = OsMousePreInit;

  return p;
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/os-support/sco/sco_mouse.c,v 3.13 2002/11/20 23:07:50 dawes Exp $ */
d95 1
d117 9
d128 6
a133 2
      pMse->buttons = 8;
      from = X_DEFAULT;
d197 1
a197 13
    int buttons = EV_BUTTONS(*evp);
    int dx = EV_DX(*evp), dy = -(EV_DY(*evp)), dz = 0, dw = 0;

    if (EV_TAG(*evp) & T_WHEEL) {
      dz = (dy & 0x08) ? (dy & 0x0f) - 16 : (dy & 0x0f);
      dx = dy = 0;
      pMse->PostEvent (pInfo, buttons, dx, dy, dz, dw);
      /* Simulate button release */
      dz = 0;
      buttons &= ~(WHEEL_FWD | WHEEL_BACK);
    }

    pMse->PostEvent (pInfo, buttons, dx, dy, dz, dw);
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/os-support/sco/sco_mouse.c,v 3.13 2002/11/20 23:07:50 dawes Exp $ */
d95 1
d117 9
d128 6
a133 2
      pMse->buttons = 8;
      from = X_DEFAULT;
d197 1
a197 13
    int buttons = EV_BUTTONS(*evp);
    int dx = EV_DX(*evp), dy = -(EV_DY(*evp)), dz = 0, dw = 0;

    if (EV_TAG(*evp) & T_WHEEL) {
      dz = (dy & 0x08) ? (dy & 0x0f) - 16 : (dy & 0x0f);
      dx = dy = 0;
      pMse->PostEvent (pInfo, buttons, dx, dy, dz, dw);
      /* Simulate button release */
      dz = 0;
      buttons &= ~(WHEEL_FWD | WHEEL_BACK);
    }

    pMse->PostEvent (pInfo, buttons, dx, dy, dz, dw);
@

