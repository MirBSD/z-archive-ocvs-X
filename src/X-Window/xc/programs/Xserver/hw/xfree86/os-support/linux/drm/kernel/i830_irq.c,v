head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407221130:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.04.08.18.37.35;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.37.35;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.18.25.26;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.25.17;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* i830_dma.c -- DMA support for the I830 -*- linux-c -*-
 *
 * Copyright 2002 Tungsten Graphics, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors: Keith Whitwell <keith@@tungstengraphics.com>
 *
 */

#define __NO_VERSION__
#include "i830.h"
#include "drmP.h"
#include "drm.h"
#include "i830_drm.h"
#include "i830_drv.h"
#include <linux/interrupt.h>	/* For task queue support */
#include <linux/delay.h>


void DRM(dma_service)(int irq, void *device, struct pt_regs *regs)
{
	drm_device_t	 *dev = (drm_device_t *)device;
      	drm_i830_private_t *dev_priv = (drm_i830_private_t *)dev->dev_private;
   	u16 temp;
   
      	temp = I830_READ16(I830REG_INT_IDENTITY_R);
	printk("%s: %x\n", __FUNCTION__, temp);
	
   	if(temp == 0) 
	   return;

	I830_WRITE16(I830REG_INT_IDENTITY_R, temp); 

	if (temp & 2) {
		atomic_inc(&dev_priv->irq_received);
		wake_up_interruptible(&dev_priv->irq_queue); 
	}
}


int i830_emit_irq(drm_device_t *dev)
{
	drm_i830_private_t *dev_priv = dev->dev_private;
	RING_LOCALS;

	DRM_DEBUG("%s\n", __FUNCTION__);

	atomic_inc(&dev_priv->irq_emitted);

   	BEGIN_LP_RING(2);
      	OUT_RING( 0 );
      	OUT_RING( GFX_OP_USER_INTERRUPT );
      	ADVANCE_LP_RING();

	return atomic_read(&dev_priv->irq_emitted);
}


int i830_wait_irq(drm_device_t *dev, int irq_nr)
{
  	drm_i830_private_t *dev_priv = 
	   (drm_i830_private_t *)dev->dev_private;
	DECLARE_WAITQUEUE(entry, current);
	unsigned long end = jiffies + HZ*3;
	int ret = 0;

	DRM_DEBUG("%s\n", __FUNCTION__);

 	if (atomic_read(&dev_priv->irq_received) >= irq_nr)  
 		return 0; 

	dev_priv->sarea_priv->perf_boxes |= I830_BOX_WAIT;

	add_wait_queue(&dev_priv->irq_queue, &entry);

	for (;;) {
		current->state = TASK_INTERRUPTIBLE;
	   	if (atomic_read(&dev_priv->irq_received) >= irq_nr) 
		   break;
		if((signed)(end - jiffies) <= 0) {
			DRM_ERROR("timeout iir %x imr %x ier %x hwstam %x\n",
				  I830_READ16( I830REG_INT_IDENTITY_R ),
				  I830_READ16( I830REG_INT_MASK_R ),
				  I830_READ16( I830REG_INT_ENABLE_R ),
				  I830_READ16( I830REG_HWSTAM ));

		   	ret = -EBUSY;	/* Lockup?  Missed irq? */
			break;
		}
	      	schedule_timeout(HZ*3);
	      	if (signal_pending(current)) {
		   	ret = -EINTR;
			break;
		}
	}

	current->state = TASK_RUNNING;
	remove_wait_queue(&dev_priv->irq_queue, &entry);
	return ret;
}


/* Needs the lock as it touches the ring.
 */
int i830_irq_emit( struct inode *inode, struct file *filp, unsigned int cmd,
		   unsigned long arg )
{
	drm_file_t	  *priv	    = filp->private_data;
	drm_device_t	  *dev	    = priv->dev;
	drm_i830_private_t *dev_priv = dev->dev_private;
	drm_i830_irq_emit_t emit;
	int result;

   	if(!_DRM_LOCK_IS_HELD(dev->lock.hw_lock->lock)) {
		DRM_ERROR("i830_irq_emit called without lock held\n");
		return -EINVAL;
	}

	if ( !dev_priv ) {
		DRM_ERROR( "%s called with no initialization\n", __FUNCTION__ );
		return -EINVAL;
	}

	if (copy_from_user( &emit, (drm_i830_irq_emit_t *)arg, sizeof(emit) ))
		return -EFAULT;

	result = i830_emit_irq( dev );

	if ( copy_to_user( emit.irq_seq, &result, sizeof(int) ) ) {
		DRM_ERROR( "copy_to_user\n" );
		return -EFAULT;
	}

	return 0;
}


/* Doesn't need the hardware lock.
 */
int i830_irq_wait( struct inode *inode, struct file *filp, unsigned int cmd,
		   unsigned long arg )
{
	drm_file_t	  *priv	    = filp->private_data;
	drm_device_t	  *dev	    = priv->dev;
	drm_i830_private_t *dev_priv = dev->dev_private;
	drm_i830_irq_wait_t irqwait;

	if ( !dev_priv ) {
		DRM_ERROR( "%s called with no initialization\n", __FUNCTION__ );
		return -EINVAL;
	}

	if (copy_from_user( &irqwait, (drm_i830_irq_wait_t *)arg, 
			    sizeof(irqwait) ))
		return -EFAULT;

	return i830_wait_irq( dev, irqwait.irq_seq );
}

@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d39 1
a39 1
irqreturn_t DRM(irq_handler)( DRM_IRQ_ARGS )
d41 1
a41 1
	drm_device_t	 *dev = (drm_device_t *)arg;
d44 1
a44 1

d46 4
a49 4
	DRM_DEBUG("%x\n", temp);

   	if ( !( temp & 2 ) ) 
		return IRQ_NONE;
d53 4
a56 4
	atomic_inc(&dev_priv->irq_received);
	wake_up_interruptible(&dev_priv->irq_queue); 

	return IRQ_HANDLED;
a178 31

/* drm_dma.h hooks
*/
void DRM(driver_irq_preinstall)( drm_device_t *dev ) {
	drm_i830_private_t *dev_priv =
		(drm_i830_private_t *)dev->dev_private;

	I830_WRITE16( I830REG_HWSTAM, 0xffff );
	I830_WRITE16( I830REG_INT_MASK_R, 0x0 );
	I830_WRITE16( I830REG_INT_ENABLE_R, 0x0 );
}

void DRM(driver_irq_postinstall)( drm_device_t *dev ) {
	drm_i830_private_t *dev_priv =
		(drm_i830_private_t *)dev->dev_private;

	I830_WRITE16( I830REG_INT_ENABLE_R, 0x2 );
	atomic_set(&dev_priv->irq_received, 0);
	atomic_set(&dev_priv->irq_emitted, 0);
	init_waitqueue_head(&dev_priv->irq_queue);
}

void DRM(driver_irq_uninstall)( drm_device_t *dev ) {
	drm_i830_private_t *dev_priv =
		(drm_i830_private_t *)dev->dev_private;
	if (!dev_priv)
		return;

	I830_WRITE16( I830REG_INT_MASK_R, 0xffff );
	I830_WRITE16( I830REG_INT_ENABLE_R, 0x0 );
}
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d39 1
a39 1
irqreturn_t DRM(irq_handler)( DRM_IRQ_ARGS )
d41 1
a41 1
	drm_device_t	 *dev = (drm_device_t *)arg;
d44 1
a44 1

d46 4
a49 4
	DRM_DEBUG("%x\n", temp);

   	if ( !( temp & 2 ) ) 
		return IRQ_NONE;
d53 4
a56 4
	atomic_inc(&dev_priv->irq_received);
	wake_up_interruptible(&dev_priv->irq_queue); 

	return IRQ_HANDLED;
a178 31

/* drm_dma.h hooks
*/
void DRM(driver_irq_preinstall)( drm_device_t *dev ) {
	drm_i830_private_t *dev_priv =
		(drm_i830_private_t *)dev->dev_private;

	I830_WRITE16( I830REG_HWSTAM, 0xffff );
	I830_WRITE16( I830REG_INT_MASK_R, 0x0 );
	I830_WRITE16( I830REG_INT_ENABLE_R, 0x0 );
}

void DRM(driver_irq_postinstall)( drm_device_t *dev ) {
	drm_i830_private_t *dev_priv =
		(drm_i830_private_t *)dev->dev_private;

	I830_WRITE16( I830REG_INT_ENABLE_R, 0x2 );
	atomic_set(&dev_priv->irq_received, 0);
	atomic_set(&dev_priv->irq_emitted, 0);
	init_waitqueue_head(&dev_priv->irq_queue);
}

void DRM(driver_irq_uninstall)( drm_device_t *dev ) {
	drm_i830_private_t *dev_priv =
		(drm_i830_private_t *)dev->dev_private;
	if (!dev_priv)
		return;

	I830_WRITE16( I830REG_INT_MASK_R, 0xffff );
	I830_WRITE16( I830REG_INT_ENABLE_R, 0x0 );
}
@

