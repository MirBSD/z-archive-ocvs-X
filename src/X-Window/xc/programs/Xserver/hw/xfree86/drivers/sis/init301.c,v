head	1.2;
access;
symbols
	tg-mergetmp-2:1.2
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407221130:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.2
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.03.07.18.37.11;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2003.04.08.18.36.38;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.36.38;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.18.19.27;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.27.16.32.44;	author tg;	state Exp;
branches;
next	;

1.1.9.1
date	2004.02.14.19.23.48;	author tg;	state Exp;
branches;
next	1.1.9.2;

1.1.9.2
date	2004.03.05.22.29.55;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@semi-automagic merge of these files (ie, I've skipped through the diffs,
and most of that was done by cvs or that weird script of some minutes ago)
@
text
@/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/sis/init301.c,v 1.74 2004/02/25 22:40:42 twini Exp $ */
/*
 * Mode initializing code (CRT2 section)
 * for SiS 300/305/540/630/730 and
 *     SiS 315/550/650/M650/651/661FX/M661xX/740/741/M741/330/660/M660/760/M760
 * (Universal module for Linux kernel framebuffer and XFree86 4.x)
 *
 * Copyright (C) 2001-2004 by Thomas Winischhofer, Vienna, Austria
 *
 * If distributed as part of the Linux kernel, the following license terms
 * apply:
 *
 * * This program is free software; you can redistribute it and/or modify
 * * it under the terms of the GNU General Public License as published by
 * * the Free Software Foundation; either version 2 of the named License,
 * * or any later version.
 * *
 * * This program is distributed in the hope that it will be useful,
 * * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * * GNU General Public License for more details.
 * *
 * * You should have received a copy of the GNU General Public License
 * * along with this program; if not, write to the Free Software
 * * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
 *
 * Otherwise, the following license terms apply:
 *
 * * Redistribution and use in source and binary forms, with or without
 * * modification, are permitted provided that the following conditions
 * * are met:
 * * 1) Redistributions of source code must retain the above copyright
 * *    notice, this list of conditions and the following disclaimer.
 * * 2) Redistributions in binary form must reproduce the above copyright
 * *    notice, this list of conditions and the following disclaimer in the
 * *    documentation and/or other materials provided with the distribution.
 * * 3) The name of the author may not be used to endorse or promote products
 * *    derived from this software without specific prior written permission.
 * *
 * * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESSED OR
 * * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: 	Thomas Winischhofer <thomas@@winischhofer.net>
 *
 * Formerly based on non-functional code-fragements for 300 series by SiS, Inc.
 * Used by permission.
 *
 * TW says: This code looks awful, I know. But please don't do anything about
 * this otherwise debugging will be hell.
 * The code is extremely fragile as regards the different chipsets, different
 * video bridges and combinations thereof. If anything is changed, extreme
 * care has to be taken that that change doesn't break it for other chipsets,
 * bridges or combinations thereof.
 * All comments in this file are by me, regardless if marked TW or not.
 *
 */

#if 1
#define SET_EMI		/* 302LV/ELV: Set EMI values */
#endif

#define COMPAL_HACK	/* Needed for Compal 1400x1050 (EMI) */
#define COMPAQ_HACK	/* Needed for Inventec/Compaq 1280x1024 (EMI) */
#define ASUS_HACK	/* Needed for Asus A2H 1024x768 (EMI) */

#include "init301.h"

#ifdef SIS300
#include "oem300.h"
#endif

#ifdef SIS315H
#include "oem310.h"
#endif

#define SiS_I2CDELAY      1000
#define SiS_I2CDELAYSHORT  150

static USHORT SiS_GetBIOSLCDResInfo(SiS_Private *SiS_Pr);

/*********************************************/
/*         HELPER: Lock/Unlock CRT2          */
/*********************************************/

void
SiS_UnLockCRT2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   if(HwInfo->jChipType >= SIS_315H)
      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2f,0x01);
   else
      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x24,0x01);
}

void
SiS_LockCRT2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   if(HwInfo->jChipType >= SIS_315H)
      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2F,0xFE);
   else
      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x24,0xFE);
}

/*********************************************/
/*            HELPER: Write SR11             */
/*********************************************/

static void
SiS_SetRegSR11ANDOR(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT DataAND, USHORT DataOR)
{
   if(HwInfo->jChipType >= SIS_661) DataAND &= 0x0f;
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,DataAND,DataOR);
}

/*********************************************/
/*    HELPER: Get Pointer to LCD structure   */
/*********************************************/

#ifdef SIS315H
static UCHAR *
GetLCDStructPtr661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
   UCHAR  *myptr = NULL;
   USHORT romindex = 0;

   /* Use the BIOS tables only for LVDS panels; DVI is unreliable
    * due to the variaty of panels the BIOS doesn't know about.
    */

   if((SiS_Pr->SiS_ROMNew) && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {
      myptr = (UCHAR *)SiS_LCDStruct661;
      romindex = SISGETROMW(0x100);  /* 10c, 0.93: 10e */
      if(romindex) {
         romindex += ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x7d) & 0x1f) * 26);
         myptr = &ROMAddr[romindex];
      }
   }
   return myptr;
}

static USHORT
GetLCDStructPtr661_2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
   USHORT romptr = 0;

   /* Use the BIOS tables only for LVDS panels; DVI is unreliable
    * due to the variaty of panels the BIOS doesn't know about.
    */

   if((SiS_Pr->SiS_ROMNew) && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {
      romptr = SISGETROMW(0x102);  /* 2ad */
      romptr += ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4) * SiS_Pr->SiS661LCD2TableSize);
   }

   return(romptr);
}
#endif

/*********************************************/
/*           Adjust Rate for CRT2            */
/*********************************************/

static BOOLEAN
SiS_AdjustCRT2Rate(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex, USHORT *i,
		   PSIS_HW_INFO HwInfo)
{
  USHORT checkmask=0,modeid,infoflag;

  modeid = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].ModeID;

  if(SiS_Pr->SiS_VBType & VB_SISVB) {

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {

      	checkmask |= SupportRAMDAC2;
	if(HwInfo->jChipType >= SIS_315H) {
	   checkmask |= SupportRAMDAC2_135;
	   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	      checkmask |= SupportRAMDAC2_162;
	      if(SiS_Pr->SiS_VBType & VB_SIS301C) {
		 checkmask |= SupportRAMDAC2_202;
	      }
	   }
	}

     } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {

     	checkmask |= SupportLCD;
	if(HwInfo->jChipType >= SIS_315H) {
	   if(SiS_Pr->SiS_VBType & VB_SISVB) {
	      if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (SiS_Pr->SiS_LCDInfo & LCDPass11)) {
	         if(modeid == 0x2e) checkmask |= Support64048060Hz;
	      }
	   }
	}

     } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {

      	checkmask |= SupportHiVision;

     } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToYPbPr525750|SetCRT2ToAVIDEO|SetCRT2ToSVIDEO|SetCRT2ToSCART)) {

        checkmask |= SupportTV;
	if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	   checkmask |= SupportTV1024;
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
	         checkmask |= SupportYPbPr750p;
	      }
	   }
	}

     }

  } else {	/* LVDS */

     if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
     	if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
           checkmask |= SupportCHTV;
      	}
     }

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     	checkmask |= SupportLCD;
     }

  }

  /* Look backwards in table for matching CRT2 mode */
  for(; SiS_Pr->SiS_RefIndex[RefreshRateTableIndex+(*i)].ModeID == modeid; (*i)--) {
     infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].Ext_InfoFlag;
     if(infoflag & checkmask) return TRUE;
     if((*i) == 0) break;
  }

  /* Look through the whole mode-section of the table from the beginning
   * for a matching CRT2 mode if no mode was found yet.
   */
  for((*i) = 0; ; (*i)++) {
     if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].ModeID != modeid) {
     	return FALSE;
     }
     infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].Ext_InfoFlag;
     if(infoflag & checkmask) return TRUE;
  }
  return TRUE;
}

/*********************************************/
/*              Get rate index               */
/*********************************************/

USHORT
SiS_GetRatePtr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
               PSIS_HW_INFO HwInfo)
{
  SHORT  LCDRefreshIndex[] = { 0x00, 0x00, 0x01, 0x01,
                               0x01, 0x01, 0x01, 0x01,
			       0x01, 0x01, 0x01, 0x01,
			       0x01, 0x01, 0x01, 0x01,
			       0x00, 0x00, 0x00, 0x00 };
  USHORT RefreshRateTableIndex,i,backup_i;
  USHORT modeflag,index,temp,backupindex;

  /* Do NOT check for UseCustomMode here, will skrew up FIFO */
  if(ModeNo == 0xfe) return 0;

  if(ModeNo <= 0x13)
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  else
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;

  if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     	if(modeflag & HalfDCLK) return 0;
     }
  }

  if(ModeNo < 0x14) return 0xFFFF;

  index = (SiS_GetReg(SiS_Pr->SiS_P3d4,0x33) >> SiS_Pr->SiS_SelectCRT2Rate) & 0x0F;
  backupindex = index;

  if(index > 0) index--;

  if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	   if(SiS_Pr->SiS_VBType & VB_NoLCD)		index = 0;
	   else if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) index = backupindex = 0;
	}
	if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
	   if(!(SiS_Pr->SiS_VBType & VB_NoLCD)) {
              temp = LCDRefreshIndex[SiS_GetBIOSLCDResInfo(SiS_Pr)];
              if(index > temp) index = temp;
	   }
	}
     } else {
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) index = 0;
	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
           if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) index = 0;
        }
     }
  }

  RefreshRateTableIndex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].REFindex;
  ModeNo = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].ModeID;

  if(HwInfo->jChipType >= SIS_315H) {
     if(!(SiS_Pr->SiS_VBInfo & DriverMode)) {
        if( (SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_VESAID == 0x105) ||
            (SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_VESAID == 0x107) ) {
           if(backupindex <= 1) RefreshRateTableIndex++;
        }
     }
  }

  i = 0;
  do {
     if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + i].ModeID != ModeNo) break;
     temp = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + i].Ext_InfoFlag;
     temp &= ModeInfoFlag;
     if(temp < SiS_Pr->SiS_ModeType) break;
     i++;
     index--;
  } while(index != 0xFFFF);

  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
      	temp = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + i - 1].Ext_InfoFlag;
      	if(temp & InterlaceMode) i++;
     }
  }

  i--;

  if((SiS_Pr->SiS_SetFlag & ProgrammingCRT2) && (!(SiS_Pr->SiS_VBInfo & DisableCRT2Display))) {
     backup_i = i;
     if(!(SiS_AdjustCRT2Rate(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, &i, HwInfo))) {
	i = backup_i;
     }
  }

  return(RefreshRateTableIndex + i);
}

/*********************************************/
/*            STORE CRT2 INFO in CR34        */
/*********************************************/

static void
SiS_SaveCRT2Info(SiS_Private *SiS_Pr, USHORT ModeNo)
{
  USHORT temp1,temp2;

  /* Store CRT1 ModeNo in CR34 */
  SiS_SetReg(SiS_Pr->SiS_P3d4,0x34,ModeNo);
  temp1 = (SiS_Pr->SiS_VBInfo & SetInSlaveMode) >> 8;
  temp2 = ~(SetInSlaveMode >> 8);
  SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x31,temp2,temp1);
}

/*********************************************/
/*    HELPER: GET SOME DATA FROM BIOS ROM    */
/*********************************************/

#ifdef SIS300
static BOOLEAN
SiS_CR36BIOSWord23b(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR *ROMAddr = (UCHAR *)HwInfo->pjVirtualRomBase;
  USHORT temp,temp1;

  if(SiS_Pr->SiS_UseROM) {
     if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
        temp = 1 << ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xff) >> 4);
        temp1 = SISGETROMW(0x23b);
        if(temp1 & temp) return TRUE;
     }
  }
  return FALSE;
}

static BOOLEAN
SiS_CR36BIOSWord23d(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR *ROMAddr = (UCHAR *)HwInfo->pjVirtualRomBase;
  USHORT temp,temp1;

  if(SiS_Pr->SiS_UseROM) {
     if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
        temp = 1 << ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xff) >> 4);
        temp1 = SISGETROMW(0x23d);
        if(temp1 & temp) return TRUE;
     }
  }
  return FALSE;
}
#endif

/*********************************************/
/*          HELPER: DELAY FUNCTIONS          */
/*********************************************/

void
SiS_DDC2Delay(SiS_Private *SiS_Pr, USHORT delaytime)
{
  USHORT i, j;

  for(i=0; i<delaytime; i++) {
     j += SiS_GetReg(SiS_Pr->SiS_P3c4,0x05);
  }
}

static void
SiS_GenericDelay(SiS_Private *SiS_Pr, USHORT delay)
{
  USHORT temp,flag;

  flag = SiS_GetRegByte(0x61) & 0x10;

  while(delay) {
     temp = SiS_GetRegByte(0x61) & 0x10;
     if(temp == flag) continue;
     flag = temp;
     delay--;
  }
}

#ifdef SIS315H
static void
SiS_LongDelay(SiS_Private *SiS_Pr, USHORT delay)
{
  while(delay--) {
     SiS_GenericDelay(SiS_Pr,0x19df);
  }
}
#endif

static void
SiS_ShortDelay(SiS_Private *SiS_Pr, USHORT delay)
{
  while(delay--) {
     SiS_GenericDelay(SiS_Pr,0x42);
  }
}

static void
SiS_PanelDelay(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT DelayTime)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT PanelID, DelayIndex, Delay=0;

  if(HwInfo->jChipType < SIS_315H) {

#ifdef SIS300

      PanelID = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36);
      if(SiS_Pr->SiS_VBType & VB_SISVB) {
         if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x18) & 0x10)) PanelID = 0x12;
      }
      DelayIndex = PanelID >> 4;
      if((DelayTime >= 2) && ((PanelID & 0x0f) == 1))  {
         Delay = 3;
      } else {
         if(DelayTime >= 2) DelayTime -= 2;

         if(!(DelayTime & 0x01)) {
       	    Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[0];
         } else {
       	    Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[1];
         }
	 if(SiS_Pr->SiS_UseROM) {
            if(ROMAddr[0x220] & 0x40) {
               if(!(DelayTime & 0x01)) {
	          Delay = (USHORT)ROMAddr[0x225];
               } else {
	    	  Delay = (USHORT)ROMAddr[0x226];
               }
            }
         }
      }
      SiS_ShortDelay(SiS_Pr,Delay);

#endif  /* SIS300 */

   } else {

#ifdef SIS315H

      if(HwInfo->jChipType >= SIS_661) {

         if(!(DelayTime & 0x01)) {
	    SiS_DDC2Delay(SiS_Pr, 0x1000);
         } else {
	    SiS_DDC2Delay(SiS_Pr, 0x4000);
         }

      } else if(HwInfo->jChipType >= SIS_330) return;

      if((SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
         (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
	 (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {			/* 315 series, LVDS; Special */

         if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
            PanelID = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36);
	    if(SiS_Pr->SiS_CustomT == CUT_CLEVO1400) {
	       if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x1b) & 0x10)) PanelID = 0x12;
	    }
	    if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
	       DelayIndex = PanelID & 0x0f;
	    } else {
	       DelayIndex = PanelID >> 4;
	    }
	    if((DelayTime >= 2) && ((PanelID & 0x0f) == 1))  {
               Delay = 3;
            } else {
               if(DelayTime >= 2) DelayTime -= 2;
               if(!(DelayTime & 0x01)) {
       		  Delay = SiS_Pr->SiS_PanelDelayTblLVDS[DelayIndex].timer[0];
               } else {
       		  Delay = SiS_Pr->SiS_PanelDelayTblLVDS[DelayIndex].timer[1];
               }
	       if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
                  if(ROMAddr[0x13c] & 0x40) {
                     if(!(DelayTime & 0x01)) {
	    	        Delay = (USHORT)ROMAddr[0x17e];
                     } else {
	    	        Delay = (USHORT)ROMAddr[0x17f];
                     }
                  }
               }
            }
	    SiS_ShortDelay(SiS_Pr,Delay);
	 }

      } else if(SiS_Pr->SiS_VBType & VB_SISVB) {			/* 315 series, all bridges */

	 DelayIndex = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4;
         if(!(DelayTime & 0x01)) {
       	    Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[0];
         } else {
       	    Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[1];
         }
	 Delay <<= 8;
	 SiS_DDC2Delay(SiS_Pr, Delay);

      }

#endif /* SIS315H */

   }
}

#ifdef SIS315H
static void
SiS_PanelDelayLoop(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                      USHORT DelayTime, USHORT DelayLoop)
{
   int i;
   for(i=0; i<DelayLoop; i++) {
      SiS_PanelDelay(SiS_Pr, HwInfo, DelayTime);
   }
}
#endif

/*********************************************/
/*    HELPER: WAIT-FOR-RETRACE FUNCTIONS     */
/*********************************************/

void
SiS_WaitRetrace1(SiS_Private *SiS_Pr)
{
  USHORT watchdog;

  if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x1f) & 0xc0) return;

  if(!(SiS_GetReg(SiS_Pr->SiS_P3d4,0x17) & 0x80)) return;

  watchdog = 65535;
  while((SiS_GetRegByte(SiS_Pr->SiS_P3da) & 0x08) && --watchdog);
  watchdog = 65535;
  while((!(SiS_GetRegByte(SiS_Pr->SiS_P3da) & 0x08)) && --watchdog);
}

static void
SiS_WaitRetrace2(SiS_Private *SiS_Pr, USHORT reg)
{
  USHORT watchdog;

  watchdog = 65535;
  while((SiS_GetReg(SiS_Pr->SiS_Part1Port,reg) & 0x02) && --watchdog);
  watchdog = 65535;
  while((!(SiS_GetReg(SiS_Pr->SiS_Part1Port,reg) & 0x02)) && --watchdog);
}

static void
SiS_WaitVBRetrace(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
        if(!(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x20)) return;
     }
     if(!(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x80)) {
        SiS_WaitRetrace1(SiS_Pr);
     } else {
        SiS_WaitRetrace2(SiS_Pr, 0x25);
     }
#endif
  } else {
#ifdef SIS315H
     if(!(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x40)) {
        SiS_WaitRetrace1(SiS_Pr);
     } else {
        SiS_WaitRetrace2(SiS_Pr, 0x30);
     }
#endif
  }
}

static void
SiS_VBWait(SiS_Private *SiS_Pr)
{
  USHORT tempal,temp,i,j;

  temp = 0;
  for(i=0; i<3; i++) {
    for(j=0; j<100; j++) {
       tempal = SiS_GetRegByte(SiS_Pr->SiS_P3da);
       if(temp & 0x01) {
          if((tempal & 0x08))  continue;
          if(!(tempal & 0x08)) break;
       } else {
          if(!(tempal & 0x08)) continue;
          if((tempal & 0x08))  break;
       }
    }
    temp ^= 0x01;
  }
}

static void
SiS_VBLongWait(SiS_Private *SiS_Pr)
{
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     SiS_VBWait(SiS_Pr);
  } else {
     SiS_WaitRetrace1(SiS_Pr);
  }
}

/*********************************************/
/*               HELPER: MISC                */
/*********************************************/

static BOOLEAN
SiS_Is301B(SiS_Private *SiS_Pr)
{
  if(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x01) >= 0xb0) return TRUE;
  return FALSE;
}

static BOOLEAN
SiS_CRT2IsLCD(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;

  if(HwInfo->jChipType == SIS_730) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3c4,0x13);
     if(flag & 0x20) return TRUE;
  }
  flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
  if(flag & 0x20) return TRUE;
  return FALSE;
}

BOOLEAN
SiS_IsDualEdge(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
#ifdef SIS315H
  USHORT flag;

  if(HwInfo->jChipType >= SIS_315H) {
     if((HwInfo->jChipType != SIS_650) || (SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f) & 0xf0)) {
        flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
        if(flag & EnableDualEdge) return TRUE;
     }
  }
#endif
  return FALSE;
}

BOOLEAN
SiS_IsVAMode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
#ifdef SIS315H
  USHORT flag;

  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if((flag & EnableDualEdge) && (flag & SetToLCDA)) return TRUE;
  }
#endif
  return FALSE;
}

static BOOLEAN
SiS_IsDualLink(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
#ifdef SIS315H
  if(HwInfo->jChipType >= SIS_315H) {
     if((SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ||
        (SiS_IsVAMode(SiS_Pr, HwInfo))) {
        if(SiS_Pr->SiS_LCDInfo & LCDDualLink) return TRUE;
     }
  }
#endif
  return FALSE;
}

#ifdef SIS315H
static BOOLEAN
SiS_TVEnabled(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  if((SiS_GetReg(SiS_Pr->SiS_Part2Port,0x00) & 0x0f) != 0x0c) return TRUE;
  if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS301LV302LV)) {
     if(SiS_GetReg(SiS_Pr->SiS_Part2Port,0x4d) & 0x10) return TRUE;
  }
  return FALSE;
}
#endif

#ifdef SIS315H
static BOOLEAN
SiS_LCDAEnabled(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x13) & 0x04) return TRUE;
  return FALSE;
}
#endif

#ifdef SIS315H
static BOOLEAN
SiS_WeHaveBacklightCtrl(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;

  if((HwInfo->jChipType >= SIS_315H) && (HwInfo->jChipType < SIS_661)) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x79);
     if(flag & 0x10) return TRUE;
  }
  return FALSE;
}
#endif

#ifdef SIS315H
static BOOLEAN
SiS_IsNotM650orLater(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;

  if(HwInfo->jChipType == SIS_650) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f);
     flag &= 0xF0;
     /* Check for revision != A0 only */
     if((flag == 0xe0) || (flag == 0xc0) ||
        (flag == 0xb0) || (flag == 0x90)) return FALSE;
  } else if(HwInfo->jChipType >= SIS_661) return FALSE;
  return TRUE;
}
#endif

#ifdef SIS315H
static BOOLEAN
SiS_IsYPbPr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;

  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if(flag & EnableCHYPbPr) return TRUE;  /* = YPrPb = 0x08 */
  }
  return FALSE;
}
#endif

#ifdef SIS315H
static BOOLEAN
SiS_IsChScart(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;

  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if(flag & EnableCHScart) return TRUE;  /* = Scart = 0x04 */
  }
  return FALSE;
}
#endif

#ifdef SIS315H
static BOOLEAN
SiS_IsTVOrYPbPrOrScart(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;

  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToTV)        return TRUE;
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if(flag & EnableCHYPbPr)      return TRUE;  /* = YPrPb = 0x08 */
     if(flag & EnableCHScart)      return TRUE;  /* = Scart = 0x04 - TW */
  } else {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToTV)        return TRUE;
  }
  return FALSE;
}
#endif

#ifdef SIS315H
static BOOLEAN
SiS_IsLCDOrLCDA(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;

  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToLCD) return TRUE;
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if(flag & SetToLCDA)    return TRUE;
  } else {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToLCD) return TRUE;
  }
  return FALSE;
}
#endif

static BOOLEAN
SiS_BridgeIsOn(SiS_Private *SiS_Pr)
{
  USHORT flag;

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     return FALSE;
  } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
     flag = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x00);
     if((flag == 1) || (flag == 2)) return FALSE;
  }
  return TRUE;
}

static BOOLEAN
SiS_BridgeIsEnabled(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;

  if(!(SiS_BridgeIsOn(SiS_Pr))) {
     flag = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
     if(HwInfo->jChipType < SIS_315H) {
       flag &= 0xa0;
       if((flag == 0x80) || (flag == 0x20)) return FALSE;
     } else {
       flag &= 0x50;
       if((flag == 0x40) || (flag == 0x10)) return FALSE;
     }
  }
  return TRUE;
}

static BOOLEAN
SiS_BridgeInSlave(SiS_Private *SiS_Pr)
{
  USHORT flag1;

  flag1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x31);
  if(flag1 & (SetInSlaveMode >> 8)) return TRUE;
  return FALSE;
}

/*********************************************/
/*       GET VIDEO BRIDGE CONFIG INFO        */
/*********************************************/

/* Setup general purpose IO for Chrontel communication */
void
SiS_SetChrontelGPIO(SiS_Private *SiS_Pr, USHORT myvbinfo)
{
   unsigned long  acpibase;
   unsigned short temp;

   if(!(SiS_Pr->SiS_ChSW)) return;

#ifndef LINUX_XF86
   SiS_SetRegLong(0xcf8,0x80000874);		       /* get ACPI base */
   acpibase = SiS_GetRegLong(0xcfc);
#else
   acpibase = pciReadLong(0x00000800, 0x74);
#endif
   acpibase &= 0xFFFF;
   temp = SiS_GetRegShort((USHORT)(acpibase + 0x3c));  /* ACPI register 0x3c: GP Event 1 I/O mode select */
   temp &= 0xFEFF;
   SiS_SetRegShort((USHORT)(acpibase + 0x3c), temp);
   temp = SiS_GetRegShort((USHORT)(acpibase + 0x3c));
   temp = SiS_GetRegShort((USHORT)(acpibase + 0x3a));  /* ACPI register 0x3a: GP Pin Level (low/high) */
   temp &= 0xFEFF;
   if(!(myvbinfo & SetCRT2ToTV)) temp |= 0x0100;
   SiS_SetRegShort((USHORT)(acpibase + 0x3a), temp);
   temp = SiS_GetRegShort((USHORT)(acpibase + 0x3a));
}

void
SiS_GetVBInfo(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
              PSIS_HW_INFO HwInfo, int checkcrt2mode)
{
  USHORT tempax,tempbx,temp;
  USHORT modeflag, resinfo=0;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }

  SiS_Pr->SiS_SetFlag = 0;

  SiS_Pr->SiS_ModeType = modeflag & ModeInfoFlag;

  tempbx = 0;
  if(SiS_BridgeIsOn(SiS_Pr) == 0) {
    	temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
#if 0
   	if(HwInfo->jChipType < SIS_661) {
	   /* NO - YPbPr not set yet ! */
	   if(SiS_Pr->SiS_YPbPr & <all ypbpr except 525i>) {
	      temp &= (SetCRT2ToHiVision | SwitchCRT2 | SetSimuScanMode); 	/* 0x83 */
	      temp |= SetCRT2ToHiVision;   					/* 0x80 */
   	   }
	   if(SiS_Pr->SiS_YPbPr & <ypbpr525i>) {
	      temp &= (SetCRT2ToHiVision | SwitchCRT2 | SetSimuScanMode); 	/* 0x83 */
	      temp |= SetCRT2ToSVIDEO;  					/* 0x08 */
	   }
	}
#endif
    	tempbx |= temp;
    	tempax = SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) << 8;
        tempax &= (DriverMode | LoadDACFlag | SetNotSimuMode | SetPALTV);
    	tempbx |= tempax;

#ifdef SIS315H
	if(HwInfo->jChipType >= SIS_315H) {
    	   if(SiS_Pr->SiS_VBType & (VB_SIS301C|VB_SIS302B|VB_SIS301LV|VB_SIS302LV|VB_SIS302ELV)) {
	      if(ModeNo == 0x03) {
	         /* Mode 0x03 is never in driver mode */
		 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x31,0xbf);
	      }
	      if(!(SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) & (DriverMode >> 8))) {
	         /* Reset LCDA setting */
		 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0xfc);
	      }
	      if(IS_SIS650) {
	         if(SiS_Pr->SiS_UseLCDA) {
		    if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f) & 0xF0) {
		       if((ModeNo <= 0x13) || (!(SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) & (DriverMode >> 8)))) {
		          SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x38,(EnableDualEdge | SetToLCDA));
		       }
		    }
		 }
	      }
	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
       	      if((temp & (EnableDualEdge | SetToLCDA)) == (EnableDualEdge | SetToLCDA)) {
          	 tempbx |= SetCRT2ToLCDA;
	      }
	   }

	   if(SiS_Pr->SiS_VBType & (VB_SIS301LV|VB_SIS302LV|VB_SIS302ELV)) {
	      tempbx &= ~(SetCRT2ToRAMDAC);
	   }

	   if(HwInfo->jChipType >= SIS_661) {
	      tempbx &= ~(SetCRT2ToYPbPr525750 | SetCRT2ToHiVision);
	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
	      if(SiS_Pr->SiS_VBType & (VB_SIS301C|VB_SIS301LV|VB_SIS302LV|VB_SIS302ELV)) {
	         if(temp & 0x04) {
		    temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35) & 0xe0;
		    if(temp == 0x60) tempbx |= SetCRT2ToHiVision;
		    else             tempbx |= SetCRT2ToYPbPr525750;
		 }
	      } else if(SiS_Pr->SiS_VBType & (VB_SIS301 | VB_SIS301B | VB_SIS302B)) {
	         if(temp & 0x04) {
		    temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35) & 0xe0;
		    if(temp == 0x60) tempbx |= SetCRT2ToHiVision;
		 }
	      }
  	   }

	   if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
	      if(temp & SetToLCDA) {
		 tempbx |= SetCRT2ToLCDA;
	      }
	      if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	         if(temp & EnableCHYPbPr) {
		    tempbx |= SetCRT2ToCHYPbPr;
		 }
	      }
	   }
	}

#endif  /* SIS315H */

    	if(SiS_Pr->SiS_VBType & VB_SISVB) {
	   temp = SetCRT2ToSVIDEO   |
	          SetCRT2ToAVIDEO   |
	          SetCRT2ToSCART    |
	          SetCRT2ToLCDA     |
	          SetCRT2ToLCD      |
	          SetCRT2ToRAMDAC   |
                  SetCRT2ToHiVision |
		  SetCRT2ToYPbPr525750;
    	} else {
           if(HwInfo->jChipType >= SIS_315H) {
              if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
        	 temp = SetCRT2ToAVIDEO |
		        SetCRT2ToSVIDEO |
		        SetCRT2ToSCART  |
		        SetCRT2ToLCDA   |
		        SetCRT2ToLCD    |
		        SetCRT2ToCHYPbPr;
      	      } else {
        	 temp = SetCRT2ToLCDA   |
		        SetCRT2ToLCD;
	      }
	   } else {
      	      if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
          	 temp = SetCRT2ToTV | SetCRT2ToLCD;
              } else {
        	 temp = SetCRT2ToLCD;
	      }
	   }
    	}

    	if(!(tempbx & temp)) {
      	   tempax = DisableCRT2Display;
      	   tempbx = 0;
    	}

   	if(SiS_Pr->SiS_VBType & VB_SISVB) {
	   USHORT clearmask = ( DriverMode 	   |
				DisableCRT2Display |
				LoadDACFlag 	   |
				SetNotSimuMode 	   |
				SetInSlaveMode 	   |
				SetPALTV 	   |
				SwitchCRT2	   |
				SetSimuScanMode );
      	   if(tempbx & SetCRT2ToLCDA)        tempbx &= (clearmask | SetCRT2ToLCDA);
	   if(tempbx & SetCRT2ToRAMDAC)      tempbx &= (clearmask | SetCRT2ToRAMDAC);
	   if(tempbx & SetCRT2ToLCD)         tempbx &= (clearmask | SetCRT2ToLCD);
	   if(tempbx & SetCRT2ToSCART)       tempbx &= (clearmask | SetCRT2ToSCART);
	   if(tempbx & SetCRT2ToHiVision)    tempbx &= (clearmask | SetCRT2ToHiVision);
	   if(tempbx & SetCRT2ToYPbPr525750) tempbx &= (clearmask | SetCRT2ToYPbPr525750);
   	} else {
	   if(HwInfo->jChipType >= SIS_315H) {
	      if(tempbx & SetCRT2ToLCDA) {
	         tempbx &= (0xFF00|SwitchCRT2|SetSimuScanMode);
	      }
	   }
      	   if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
              if(tempbx & SetCRT2ToTV) {
          	 tempbx &= (0xFF00|SetCRT2ToTV|SwitchCRT2|SetSimuScanMode);
	      }
      	   }
      	   if(tempbx & SetCRT2ToLCD) {
              tempbx &= (0xFF00|SetCRT2ToLCD|SwitchCRT2|SetSimuScanMode);
	   }
	   if(HwInfo->jChipType >= SIS_315H) {
	      if(tempbx & SetCRT2ToLCDA) {
	         tempbx |= SetCRT2ToLCD;
	      }
	   }
	}

    	if(tempax & DisableCRT2Display) {
      	   if(!(tempbx & (SwitchCRT2 | SetSimuScanMode))) {
              tempbx = SetSimuScanMode | DisableCRT2Display;
      	   }
    	}

    	if(!(tempbx & DriverMode)) tempbx |= SetSimuScanMode;

	/* LVDS/CHRONTEL (LCD/TV) and 301BDH (LCD) can only be slave in 8bpp modes */
	if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	   if( (SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
	       ((SiS_Pr->SiS_VBType & VB_NoLCD) && (tempbx & SetCRT2ToLCD)) ) {
	       modeflag &= (~CRT2Mode);
	   }
	}

    	if(!(tempbx & SetSimuScanMode)) {
      	   if(tempbx & SwitchCRT2) {
              if((!(modeflag & CRT2Mode)) && (checkcrt2mode)) {
		 if( (HwInfo->jChipType >= SIS_315H) &&
		     (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) ) {
		    if(resinfo != SIS_RI_1600x1200) {
                       tempbx |= SetSimuScanMode;
		    }
		 } else {
            	    tempbx |= SetSimuScanMode;
	         }
              }
      	   } else {
              if(!(SiS_BridgeIsEnabled(SiS_Pr,HwInfo))) {
          	 if(!(tempbx & DriverMode)) {
            	    if(SiS_BridgeInSlave(SiS_Pr)) {
		       tempbx |= SetSimuScanMode;
            	    }
                 }
              }
      	   }
    	}

    	if(!(tempbx & DisableCRT2Display)) {
           if(tempbx & DriverMode) {
              if(tempbx & SetSimuScanMode) {
          	 if((!(modeflag & CRT2Mode)) && (checkcrt2mode)) {
	            if( (HwInfo->jChipType >= SIS_315H) &&
		        (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) ) {
		       if(resinfo != SIS_RI_1600x1200) {
		          tempbx |= SetInSlaveMode;
		       }
		    } else {
            	       tempbx |= SetInSlaveMode;
                    }
	         }
              }
           } else {
              tempbx |= SetInSlaveMode;
      	   }
    	}

  }

  SiS_Pr->SiS_VBInfo = tempbx;

  if(HwInfo->jChipType == SIS_630) {
     SiS_SetChrontelGPIO(SiS_Pr, SiS_Pr->SiS_VBInfo);
  }

#ifdef TWDEBUG
#ifdef LINUX_KERNEL
  printk(KERN_DEBUG "sisfb: (VBInfo= 0x%04x, SetFlag=0x%04x)\n",
      SiS_Pr->SiS_VBInfo, SiS_Pr->SiS_SetFlag);
#endif
#ifdef LINUX_XF86
  xf86DrvMsgVerb(0, X_PROBED, 3, "(init301: VBInfo=0x%04x, SetFlag=0x%04x)\n",
      SiS_Pr->SiS_VBInfo, SiS_Pr->SiS_SetFlag);
#endif
#endif
}

/*********************************************/
/*           DETERMINE YPbPr MODE            */
/*********************************************/

void
SiS_SetYPbPr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{

  UCHAR temp;

  /* Note: This variable is only used on 30xLV systems.
   * CR38 has a different meaning on LVDS/CH7019 systems.
   * On 661 and later, these bits moved to CR35.
   *
   * On 301, 301B, only HiVision 1080i is supported.
   * On 30xLV, 301C, only YPbPr 1080i is supported.
   */

  SiS_Pr->SiS_YPbPr = 0;
  if(HwInfo->jChipType >= SIS_661) return;

  if(SiS_Pr->SiS_VBType) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	SiS_Pr->SiS_YPbPr = YPbPrHiVision;
     }
  }

  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_VBType & (VB_SIS301LV302LV | VB_SIS301C)) {
        temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
	if(temp & 0x08) {
	   switch((temp >> 4)) {
	   case 0x00: SiS_Pr->SiS_YPbPr = YPbPr525i;     break;
	   case 0x01: SiS_Pr->SiS_YPbPr = YPbPr525p;     break;
	   case 0x02: SiS_Pr->SiS_YPbPr = YPbPr750p;     break;
	   case 0x03: SiS_Pr->SiS_YPbPr = YPbPrHiVision; break;
	   }
	}
     }
  }

}

/*********************************************/
/*           DETERMINE TVMode flag           */
/*********************************************/

void
SiS_SetTVMode(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT temp, temp1, resinfo = 0, romindex = 0;
  UCHAR  OutputSelect = *SiS_Pr->pSiS_OutputSelect;

  SiS_Pr->SiS_TVMode = 0;

  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) return;
  if(SiS_Pr->UseCustomMode) return;

  if(ModeNo > 0x13) {
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }

  if(HwInfo->jChipType < SIS_661) {

     if(SiS_Pr->SiS_VBInfo & SetPALTV) SiS_Pr->SiS_TVMode |= TVSetPAL;

     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        temp = 0;
        if((HwInfo->jChipType == SIS_630) ||
           (HwInfo->jChipType == SIS_730)) {
           temp = 0x35;
	   romindex = 0xfe;
        } else if(HwInfo->jChipType >= SIS_315H) {
           temp = 0x38;
	   romindex = 0xf3;
	   if(HwInfo->jChipType >= SIS_330) romindex = 0x11b;
        }
        if(temp) {
           if(romindex && SiS_Pr->SiS_UseROM && (!(SiS_Pr->SiS_ROMNew))) {
	      OutputSelect = ROMAddr[romindex];
	      if(!(OutputSelect & EnablePALMN)) {
                 SiS_SetRegAND(SiS_Pr->SiS_P3d4,temp,0x3F);
	      }
	   }
	   temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,temp);
	   if(SiS_Pr->SiS_TVMode & TVSetPAL) {
              if(temp1 & EnablePALM) {		/* 0x40 */
                 SiS_Pr->SiS_TVMode |= TVSetPALM;
	         SiS_Pr->SiS_TVMode &= ~TVSetPAL;
	      } else if(temp1 & EnablePALN) {	/* 0x80 */
	         SiS_Pr->SiS_TVMode |= TVSetPALN;
              }
	   } else {
              if(temp1 & EnableNTSCJ) {		/* 0x40 */
	         SiS_Pr->SiS_TVMode |= TVSetNTSCJ;
  	      }
	   }
        }
	/* Translate HiVision/YPbPr to our new flags */
	if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	   if(SiS_Pr->SiS_YPbPr == YPbPr750p)          SiS_Pr->SiS_TVMode |= TVSetYPbPr750p;
	   else if(SiS_Pr->SiS_YPbPr == YPbPr525p)     SiS_Pr->SiS_TVMode |= TVSetYPbPr525p;
	   else	if(SiS_Pr->SiS_YPbPr == YPbPrHiVision) SiS_Pr->SiS_TVMode |= TVSetHiVision;
	   else					       SiS_Pr->SiS_TVMode |= TVSetYPbPr525i;
	   if(SiS_Pr->SiS_TVMode & (TVSetYPbPr750p | TVSetYPbPr525p | TVSetYPbPr525i)) {
	      SiS_Pr->SiS_VBInfo &= ~SetCRT2ToHiVision;
	      SiS_Pr->SiS_VBInfo |= SetCRT2ToYPbPr525750;
	   } else if(SiS_Pr->SiS_TVMode & TVSetHiVision) {
	      SiS_Pr->SiS_TVMode |= TVSetPAL;
	   }
	}
     } else if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
        if(SiS_Pr->SiS_CHOverScan) {
           if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
              temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
              if((temp & TVOverScan) || (SiS_Pr->SiS_CHOverScan == 1)) {
	         SiS_Pr->SiS_TVMode |= TVSetCHOverScan;
              }
           } else if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
      	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x79);
      	      if((temp & 0x80) || (SiS_Pr->SiS_CHOverScan == 1)) {
	         SiS_Pr->SiS_TVMode |= TVSetCHOverScan;
 	      }
	   }
           if(SiS_Pr->SiS_CHSOverScan) {
              SiS_Pr->SiS_TVMode |= TVSetCHOverScan;
           }
        }
        if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
	   temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     	   if(SiS_Pr->SiS_TVMode & TVSetPAL) {
              if(temp & EnablePALM)      SiS_Pr->SiS_TVMode |= TVSetPALM;
	      else if(temp & EnablePALN) SiS_Pr->SiS_TVMode |= TVSetPALN;
           } else {
	      if(temp & EnableNTSCJ) {
	         SiS_Pr->SiS_TVMode |= TVSetNTSCJ;
  	      }
	   }
	}
     }

  } else {  /* 661 and later */

     temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
     if(temp1 & 0x01) {
        SiS_Pr->SiS_TVMode |= TVSetPAL;
	if(temp1 & 0x08) {
	   SiS_Pr->SiS_TVMode |= TVSetPALN;
	} else if(temp1 & 0x04) {
	   if(SiS_Pr->SiS_VBType & VB_SISVB) {
	      SiS_Pr->SiS_TVMode &= ~TVSetPAL;
	   }
	   SiS_Pr->SiS_TVMode |= TVSetPALM;
	}
     } else {
        if(temp1 & 0x02) {
	   SiS_Pr->SiS_TVMode |= TVSetNTSCJ;
	}
     }
     if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
        if(SiS_Pr->SiS_CHOverScan) {
           if((temp1 & 0x10) || (SiS_Pr->SiS_CHOverScan == 1)) {
	      SiS_Pr->SiS_TVMode |= TVSetCHOverScan;
	   }
	}
     }
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	   temp1 &= 0xe0;
	   if(temp1 == 0x00)      SiS_Pr->SiS_TVMode |= TVSetYPbPr525i;
	   else if(temp1 == 0x20) SiS_Pr->SiS_TVMode |= TVSetYPbPr525p;
	   else if(temp1 == 0x40) SiS_Pr->SiS_TVMode |= TVSetYPbPr750p;
	} else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	   SiS_Pr->SiS_TVMode |= (TVSetHiVision | TVSetPAL);
	}
	if(SiS_Pr->SiS_VBInfo & (SetCRT2ToYPbPr525750 | SetCRT2ToHiVision)) {
	   if(resinfo == SIS_RI_800x480 || resinfo == SIS_RI_1024x576 || resinfo == SIS_RI_1280x720) {
	      SiS_Pr->SiS_TVMode |= TVAspect169;
	   } else {
	      temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x39);
	      if(temp1 & 0x02) {
		 if(SiS_Pr->SiS_TVMode & (TVSetYPbPr750p | TVSetHiVision)) {
		    SiS_Pr->SiS_TVMode |= TVAspect169;
		 } else {
		    SiS_Pr->SiS_TVMode |= TVAspect43LB;
		 }
	      } else {
		 SiS_Pr->SiS_TVMode |= TVAspect43;
	      }
	   }
	}
     }
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToSCART) SiS_Pr->SiS_TVMode |= TVSetPAL;

  if(SiS_Pr->SiS_VBType & VB_SISVB) {

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
        SiS_Pr->SiS_TVMode |= TVSetPAL;
	SiS_Pr->SiS_TVMode &= ~(TVSetPALM | TVSetPALN | TVSetNTSCJ);
     } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
        if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525i | TVSetYPbPr525p | TVSetYPbPr750p)) {
	   SiS_Pr->SiS_TVMode &= ~(TVSetPAL | TVSetNTSCJ | TVSetPALM | TVSetPALN);
	}
     }

     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
           SiS_Pr->SiS_TVMode |= TVSetTVSimuMode;
        }
     }

     if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
        /* BIOS sets TVNTSC1024 without checking 525p here. Wrong? */
        if(!(SiS_Pr->SiS_TVMode & (TVSetHiVision | TVSetYPbPr525p | TVSetYPbPr750p))) {
           if(resinfo == SIS_RI_1024x768) {
              SiS_Pr->SiS_TVMode |= TVSetNTSC1024;
	   }
        }
     }

     SiS_Pr->SiS_TVMode |= TVRPLLDIV2XO;
     if((SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) &&
        (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
	SiS_Pr->SiS_TVMode &= ~TVRPLLDIV2XO;
     } else if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p | TVSetYPbPr750p)) {
        SiS_Pr->SiS_TVMode &= ~TVRPLLDIV2XO;
     } else if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
        if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
           SiS_Pr->SiS_TVMode &= ~TVRPLLDIV2XO;
        }
     }

  }

  SiS_Pr->SiS_VBInfo &= ~SetPALTV;

#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "(init301: TVMode %x, VBInfo %x)\n", SiS_Pr->SiS_TVMode, SiS_Pr->SiS_VBInfo);
#endif 
}

/*********************************************/
/*               GET LCD INFO                */
/*********************************************/

static USHORT
SiS_GetBIOSLCDResInfo(SiS_Private *SiS_Pr)
{
   USHORT temp = SiS_Pr->SiS_LCDResInfo;
   /* Translate my LCDResInfo to BIOS value */
   if(temp == Panel_1280x768_2)  temp = Panel_1280x768;
   if(temp == Panel_1280x768_3)  temp = Panel_1280x768;
   return temp;
}

static void
SiS_GetLCDInfoBIOS(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
#ifdef SIS315H
   UCHAR  *ROMAddr;

   if((ROMAddr = GetLCDStructPtr661(SiS_Pr, HwInfo))) {
      SiS_Pr->PanelHT  = SISGETROMW(6);
      SiS_Pr->PanelVT  = SISGETROMW(8);
      SiS_Pr->PanelHRS = SISGETROMW(10);
      SiS_Pr->PanelHRE = SISGETROMW(12);
      SiS_Pr->PanelVRS = SISGETROMW(14);
      SiS_Pr->PanelVRE = SISGETROMW(16);
      SiS_Pr->PanelVCLKIdx315 = VCLK_CUSTOM_315;
      SiS_Pr->SiS_VCLKData[VCLK_CUSTOM_315].CLOCK =
	 SiS_Pr->SiS_VBVCLKData[VCLK_CUSTOM_315].CLOCK = (USHORT)ROMAddr[18];
      SiS_Pr->SiS_VCLKData[VCLK_CUSTOM_315].SR2B =
	 SiS_Pr->SiS_VBVCLKData[VCLK_CUSTOM_315].Part4_A = ROMAddr[19];
      SiS_Pr->SiS_VCLKData[VCLK_CUSTOM_315].SR2B =
	 SiS_Pr->SiS_VBVCLKData[VCLK_CUSTOM_315].Part4_B = ROMAddr[20];
   }
#endif
}

void
SiS_GetLCDResInfo(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
		  PSIS_HW_INFO HwInfo)
{
#ifdef SIS300
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
#endif
#ifdef SIS315H
  UCHAR  *myptr = NULL;
#endif  
  USHORT temp,modeflag,resinfo=0;
  const unsigned char SiS300SeriesLCDRes[] =
         { 0,  1,  2,  3,  7,  4,  5,  8,
	   0,  0, 10,  0,  0,  0,  0, 15 };

  SiS_Pr->SiS_LCDResInfo  = 0;
  SiS_Pr->SiS_LCDTypeInfo = 0;
  SiS_Pr->SiS_LCDInfo     = 0;
  SiS_Pr->PanelHRS        = 999; /* HSync start */
  SiS_Pr->PanelHRE        = 999; /* HSync end */
  SiS_Pr->PanelVRS        = 999; /* VSync start */
  SiS_Pr->PanelVRE        = 999; /* VSync end */

  if(!(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA))) return;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }

  temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36);

  if((HwInfo->jChipType >= SIS_661) || (SiS_Pr->SiS_ROMNew)) {
     SiS_Pr->SiS_LCDTypeInfo = (SiS_GetReg(SiS_Pr->SiS_P3d4,0x39) & 0x7c) >> 2;
  } else if((HwInfo->jChipType < SIS_315H) || (HwInfo->jChipType >= SIS_661)) {
     SiS_Pr->SiS_LCDTypeInfo = temp >> 4;
  } else {
     SiS_Pr->SiS_LCDTypeInfo = (temp & 0x0F) - 1;
  }
  temp &= 0x0f;
  if(HwInfo->jChipType < SIS_315H) {
     /* Translate 300 series LCDRes to 315 series for unified usage */
     temp = SiS300SeriesLCDRes[temp];
  }

  if(HwInfo->jChipType == SIS_550) {
     if(temp == Panel310_640x480_2) temp = Panel_640x480_2;
     if(temp == Panel310_640x480_3) temp = Panel_640x480_3;
  }

  if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {	/* SiS LVDS */
     if(temp == Panel310_1280x768) {
        temp = Panel_1280x768_2;
#ifdef SIS315H
	if((myptr = GetLCDStructPtr661(SiS_Pr, HwInfo))) {
	   if((myptr[8] | (myptr[9] << 8)) == 798) temp = Panel_1280x768_3;
	}
#endif
     }
  } 

  SiS_Pr->SiS_LCDResInfo = temp;

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
        SiS_Pr->SiS_LCDResInfo = Panel_Barco1366;
     } else if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
        SiS_Pr->SiS_LCDResInfo = Panel_848x480;
     }
  }

  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(SiS_Pr->SiS_LCDResInfo < SiS_Pr->SiS_PanelMin301)
	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_PanelMin301;
  } else {
     if(SiS_Pr->SiS_LCDResInfo < SiS_Pr->SiS_PanelMinLVDS)
	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_PanelMinLVDS;
  }

  SiS_Pr->PanelVCLKIdx300 = VCLK65_300;
  SiS_Pr->PanelVCLKIdx315 = VCLK108_2_315;

  switch(SiS_Pr->SiS_LCDResInfo) {
     case Panel_320x480:    SiS_Pr->PanelXRes =  320; SiS_Pr->PanelYRes =  480;
     			    SiS_Pr->PanelHT   =  400; SiS_Pr->PanelVT   =  525;
			    SiS_Pr->PanelVCLKIdx300 = VCLK28;
			    SiS_Pr->PanelVCLKIdx315 = VCLK28;
			    break;
     case Panel_640x480_2:
     case Panel_640x480_3:  SiS_Pr->PanelXRes =  640; SiS_Pr->PanelYRes =  480;
     			    SiS_Pr->PanelVRS  =   24; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx300 = VCLK28;
			    SiS_Pr->PanelVCLKIdx315 = VCLK28;
			    break;
     case Panel_640x480:    SiS_Pr->PanelXRes =  640; SiS_Pr->PanelYRes =  480;
     			    			      SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx300 = VCLK28;
			    SiS_Pr->PanelVCLKIdx315 = VCLK28;
			    break;
     case Panel_800x600:    SiS_Pr->PanelXRes =  800; SiS_Pr->PanelYRes =  600;
     			    SiS_Pr->PanelHT   = 1056; SiS_Pr->PanelVT   =  628;
			    SiS_Pr->PanelHRS  =   40; SiS_Pr->PanelHRE  =  128;
			    SiS_Pr->PanelVRS  =    1; SiS_Pr->PanelVRE  =    4;
			    SiS_Pr->PanelVCLKIdx300 = VCLK40;
			    SiS_Pr->PanelVCLKIdx315 = VCLK40;
			    break;
     case Panel_1024x600:   SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  600;
     			    SiS_Pr->PanelHT   = 1344; SiS_Pr->PanelVT   =  800;
			    SiS_Pr->PanelHRS  =   24; SiS_Pr->PanelHRE  =  136;
			    SiS_Pr->PanelVRS  =   88; SiS_Pr->PanelVRE  =    6;
     			    SiS_Pr->PanelVCLKIdx300 = VCLK65_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK65_315;
     			    break;
     case Panel_1024x768:   SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1344; SiS_Pr->PanelVT   =  806;
			    SiS_Pr->PanelHRS  =   24; SiS_Pr->PanelHRE  =  136;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    if(HwInfo->jChipType < SIS_315H) {
			       SiS_Pr->PanelHRS = 23;
			       			      SiS_Pr->PanelVRE  =    5;
			    }
			    SiS_Pr->PanelVCLKIdx300 = VCLK65_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK65_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1152x768:   SiS_Pr->PanelXRes = 1152; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1344; SiS_Pr->PanelVT   =  806;
			    SiS_Pr->PanelHRS  =   24;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    if(HwInfo->jChipType < SIS_315H) {
			       SiS_Pr->PanelHRS = 23;
			       			      SiS_Pr->PanelVRE  =    5;
			    }
     			    SiS_Pr->PanelVCLKIdx300 = VCLK65_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK65_315;
     			    break;
     case Panel_1152x864:   SiS_Pr->PanelXRes = 1152; SiS_Pr->PanelYRes =  864;
     			    break;
     case Panel_1280x720:   SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  720;
     			    SiS_Pr->PanelHT   = 1650; SiS_Pr->PanelVT   =  750;
			    SiS_Pr->PanelHRS  =  110; SiS_Pr->PanelHRE  =   40;
			    SiS_Pr->PanelVRS  =    5; SiS_Pr->PanelVRE  =    5;
			    SiS_Pr->PanelVCLKIdx315 = VCLK_1280x720;
			    /* Data above for TMDS (projector); get from BIOS for LVDS */
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1280x768:   SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1688; SiS_Pr->PanelVT   =  802;
			    SiS_Pr->PanelHRS  =   48; SiS_Pr->PanelHRS  =  112;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    SiS_Pr->PanelVCLKIdx300 = VCLK81_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK81_315;
			    break;
     case Panel_1280x768_2: SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1408; SiS_Pr->PanelVT   =  806;
			    SiS_Pr->PanelHRS  =   16; SiS_Pr->PanelHRE  =   64;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    SiS_Pr->PanelVCLKIdx315 = VCLK_1280x768_2;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1280x768_3: SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1664; SiS_Pr->PanelVT   =  798;
			    SiS_Pr->PanelHRS   =  64; SiS_Pr->PanelHRE  =  128;
			    SiS_Pr->PanelVRS   =   3; SiS_Pr->PanelVRE  =    7;
			    SiS_Pr->PanelVCLKIdx315 = VCLK_1280x768_3;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1280x800:   SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  800;
     			    SiS_Pr->PanelHT   = 1408; SiS_Pr->PanelVT   =  816;
			    SiS_Pr->PanelHRS   =  21; SiS_Pr->PanelHRE  =   24;
			    SiS_Pr->PanelVRS   =   4; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx315 = VCLK69_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1280x960:   SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  960;
     			    SiS_Pr->PanelHT   = 1800; SiS_Pr->PanelVT   = 1000;
			    SiS_Pr->PanelVCLKIdx300 = VCLK108_3_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK108_3_315;
		 	    if(resinfo == SIS_RI_1280x1024) {
			       SiS_Pr->PanelVCLKIdx300 = VCLK100_300;
			       SiS_Pr->PanelVCLKIdx315 = VCLK100_315;
			    }
			    break;
     case Panel_1280x1024:  SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes = 1024;
     			    SiS_Pr->PanelHT   = 1688; SiS_Pr->PanelVT   = 1066;
			    SiS_Pr->PanelHRS  =   48; SiS_Pr->PanelHRE  =  112;
			    SiS_Pr->PanelVRS  =    1; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx300 = VCLK108_3_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK108_2_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1400x1050:  SiS_Pr->PanelXRes = 1400; SiS_Pr->PanelYRes = 1050;
     			    SiS_Pr->PanelHT   = 1688; SiS_Pr->PanelVT   = 1066;
			    SiS_Pr->PanelHRS  =   48; SiS_Pr->PanelHRE  =  112; /* HRE OK for LVDS, not for LCDA */
			    SiS_Pr->PanelVRS  =    1; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx315 = VCLK108_2_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1600x1200:  SiS_Pr->PanelXRes = 1600; SiS_Pr->PanelYRes = 1200;
     			    SiS_Pr->PanelHT   = 2160; SiS_Pr->PanelVT   = 1250;
			    SiS_Pr->PanelHRS  =   64; SiS_Pr->PanelHRE  =  192;
			    SiS_Pr->PanelVRS  =    1; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx315 = VCLK162_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1680x1050:  SiS_Pr->PanelXRes = 1680; SiS_Pr->PanelYRes = 1050;
     			    SiS_Pr->PanelHT   = 1900; SiS_Pr->PanelVT   = 1066;
			    SiS_Pr->PanelHRS  =   26; SiS_Pr->PanelHRE  =   76;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    SiS_Pr->PanelVCLKIdx315 = VCLK121_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_Custom:     SiS_Pr->PanelXRes = SiS_Pr->CP_MaxX;
    			    SiS_Pr->PanelYRes = SiS_Pr->CP_MaxY;
			    SiS_Pr->PanelHT   = SiS_Pr->CHTotal;
			    SiS_Pr->PanelVT   = SiS_Pr->CVTotal;
			    if(SiS_Pr->CP_PreferredIndex != -1) {
			       SiS_Pr->PanelXRes = SiS_Pr->CP_HDisplay[SiS_Pr->CP_PreferredIndex];
    			       SiS_Pr->PanelYRes = SiS_Pr->CP_VDisplay[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelHT   = SiS_Pr->CP_HTotal[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelVT   = SiS_Pr->CP_VTotal[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelHRS  = SiS_Pr->CP_HSyncStart[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelHRE  = SiS_Pr->CP_HSyncEnd[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelVRS  = SiS_Pr->CP_VSyncStart[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelVRE  = SiS_Pr->CP_VSyncEnd[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelHRS -= SiS_Pr->PanelXRes;
			       SiS_Pr->PanelHRE -= SiS_Pr->PanelHRS;
			       SiS_Pr->PanelVRS -= SiS_Pr->PanelYRes;
			       SiS_Pr->PanelVRE -= SiS_Pr->PanelVRS;
			    }
			    break;
     case Panel_Barco1366:  SiS_Pr->PanelXRes = 1360; SiS_Pr->PanelYRes = 1024;
     			    SiS_Pr->PanelHT   = 1688; SiS_Pr->PanelVT   = 1066;
     			    break;
     case Panel_848x480:    SiS_Pr->PanelXRes =  848; SiS_Pr->PanelYRes =  480;
     			    SiS_Pr->PanelHT   = 1088; SiS_Pr->PanelVT   =  525;
     			    break;
     default:		    SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1344; SiS_Pr->PanelVT   =  806;
			    break;
  }

  temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
  SiS_Pr->SiS_LCDInfo = temp & ~0x000e;

  if(!(SiS_Pr->UsePanelScaler))        SiS_Pr->SiS_LCDInfo &= ~DontExpandLCD;
  else if(SiS_Pr->UsePanelScaler == 1) SiS_Pr->SiS_LCDInfo |= DontExpandLCD;

#ifdef SIS315H
  if(HwInfo->jChipType >= SIS_661) {
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        if(temp & 0x08) SiS_Pr->SiS_LCDInfo |= LCDPass11;
     }
     if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
        if(SiS_Pr->SiS_ROMNew) {
	   if(temp & 0x02) SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	} else if((myptr = GetLCDStructPtr661(SiS_Pr, HwInfo))) {
           if(myptr[2] & 0x01) SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	}
     }
  } else if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x39) & 0x01) SiS_Pr->SiS_LCDInfo |= LCDPass11;
     }
     if((SiS_Pr->SiS_ROMNew) && (!(SiS_Pr->PanelSelfDetected))) {
        SiS_Pr->SiS_LCDInfo &= ~(LCDRGB18Bit);
	temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
        if(temp & 0x01) SiS_Pr->SiS_LCDInfo |= LCDRGB18Bit;
	if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	   if(temp & 0x02) SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	}
     }
  }
#endif

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     /* Always center screen on LVDS (if scaling is disabled) */
     SiS_Pr->SiS_LCDInfo &= ~LCDPass11;
  } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
        /* Always center screen on SiS LVDS (if scaling is disabled) */
        SiS_Pr->SiS_LCDInfo &= ~LCDPass11;
     } else {
        /* By default, pass 1:1 on SiS TMDS (if scaling is disabled) */
        SiS_Pr->SiS_LCDInfo |= LCDPass11;
        if(SiS_Pr->CenterScreen == 1) SiS_Pr->SiS_LCDInfo &= ~LCDPass11;
     }
  }

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
        SiS_Pr->SiS_LCDInfo = 0x80 | 0x40 | 0x20;   /* neg h/v sync, RGB24(D0 = 0) */
     }
  }

  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
        switch(SiS_Pr->SiS_LCDResInfo) {
        case Panel_Custom:
		/* For non-standard LCD resolution, we let the panel scale */
           	SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
		break;
	case Panel_1280x720:
	      	if(SiS_Pr->PanelHT == 1650) {
		   SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
		}
	case Panel_1280x768:	/* TMDS only */
		/* No idea about the timing and zoom factors */
           	SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
		break;
	case Panel_1280x960:
	 	SiS_Pr->SiS_LCDInfo &= ~DontExpandLCD;
		break;
	case Panel_1280x1024:
	        if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
		   if(ModeNo == 0x7c || ModeNo == 0x7d || ModeNo == 0x7e ||
		      ModeNo == 0x79 || ModeNo == 0x75 || ModeNo == 0x78 ||
		      ModeNo == 0x14 || ModeNo == 0x15 || ModeNo == 0x16) {
	      	      /* We do not scale to 1280x720/800/960 (B/C bridges only) */
                      SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	           }
	           if(((HwInfo->jChipType >= SIS_315H) &&
		       (ModeNo == 0x23 || ModeNo == 0x24 || ModeNo == 0x25)) ||
	              ((HwInfo->jChipType < SIS_315H)  &&
		       (ModeNo == 0x55 || ModeNo == 0x5a || ModeNo == 0x5b))) {
	              /* We do not scale to 1280x768 (B/C bridges only) */
                      SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	           }
		}
		break;
	case Panel_1400x1050:
		if(ModeNo == 0x3a || ModeNo == 0x4d || ModeNo == 0x65) {
	      	   /* We do not scale to 1280x1024 (all bridges) */
	      	   SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   	}
		break;
	case Panel_1600x1200:
		if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	      	   /* No idea about the timing and zoom factors (C bridge only) */
	      	   SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   	}
		break;
	}
     }
  }

#ifdef SIS300
  if(HwInfo->jChipType < SIS_315H) {
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        if(SiS_Pr->SiS_UseROM) {
	   if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
              if(!(ROMAddr[0x235] & 0x02)) {
	         SiS_Pr->SiS_LCDInfo &= (~DontExpandLCD);
 	      }
	   }
        }
     } else if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	if((SiS_Pr->SiS_SetFlag & SetDOSMode) && ((ModeNo == 0x03) || (ModeNo == 0x10))) {
           SiS_Pr->SiS_LCDInfo &= (~DontExpandLCD);
	}
     }
  }
#endif

  /* Special cases */
  if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
     SiS_Pr->SiS_LCDInfo |= (DontExpandLCD | LCDPass11);
  }

  if(SiS_Pr->SiS_LCDResInfo == Panel_640x480) {
     SiS_Pr->SiS_LCDInfo |= LCDPass11;
  }

  /* (In)validate LCDPass11 flag */
  if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
     SiS_Pr->SiS_LCDInfo &= ~LCDPass11;
  }

  /* Special cases */
  if( (SiS_Pr->SiS_IF_DEF_FSTN)              ||
      (SiS_Pr->SiS_IF_DEF_DSTN)              ||
      (SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
      (SiS_Pr->SiS_CustomT == CUT_BARCO1024) ||
      (SiS_Pr->SiS_CustomT == CUT_PANEL848) ) {
     SiS_Pr->PanelHRS = 999;
     SiS_Pr->PanelHRE = 999;
  }

  if( (SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
      (SiS_Pr->SiS_CustomT == CUT_BARCO1024) ||
      (SiS_Pr->SiS_CustomT == CUT_PANEL848) ) {
     SiS_Pr->PanelVRS = 999;
     SiS_Pr->PanelVRE = 999;
  }

#ifdef SIS315H
  if((HwInfo->jChipType >= SIS_315H) && (HwInfo->jChipType < SIS_661)) {
     if(!(SiS_Pr->SiS_ROMNew)) {
        if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	   /* Enable 302LV/302ELV dual link mode.
	    * For 661, this is done above.
	    */
           if((SiS_Pr->SiS_CustomT == CUT_CLEVO1024) &&
	      (SiS_Pr->SiS_LCDResInfo == Panel_1024x768)) {
	      /* (Sets this in SenseLCD; new paneltypes) */
	      SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	   }
           if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
	      (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
              (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) ||
	      (SiS_Pr->SiS_LCDResInfo == Panel_1680x1050)) {
	      SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	   }
        }
     }
  }
#endif

  if(!((HwInfo->jChipType < SIS_315H) && (SiS_Pr->SiS_SetFlag & SetDOSMode))) {

     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
	if(SiS_Pr->SiS_IF_DEF_TRUMPION == 0) {
	   if(ModeNo == 0x12) {
	      if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
	         SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	      }
	   }
	}
     }

     if(modeflag & HalfDCLK) {
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
	   SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	} else if(SiS_Pr->SiS_LCDResInfo == Panel_640x480) {
	   SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	} else if(ModeNo > 0x13) {
           if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
              if(resinfo == SIS_RI_512x384) SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	   } else if(SiS_Pr->SiS_LCDResInfo == Panel_1024x600) {
	      if((resinfo == SIS_RI_800x600) || (resinfo == SIS_RI_400x300)) {
                 SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	      }
           } else if(SiS_Pr->SiS_LCDResInfo == Panel_800x600) {
              if(resinfo == SIS_RI_400x300) SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
           }
	}
     }

  }

  if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
     if(SiS_Pr->SiS_VBInfo & SetNotSimuMode) {
     	SiS_Pr->SiS_SetFlag |= LCDVESATiming;
     }
  } else {
     SiS_Pr->SiS_SetFlag |= LCDVESATiming;
  }

#ifdef LINUX_KERNEL
#ifdef TWDEBUG
  printk(KERN_DEBUG "sisfb: (LCDInfo=0x%04x LCDResInfo=0x%02x LCDTypeInfo=0x%02x)\n",
	SiS_Pr->SiS_LCDInfo, SiS_Pr->SiS_LCDResInfo, SiS_Pr->SiS_LCDTypeInfo);
#endif
#endif
#ifdef LINUX_XF86
  xf86DrvMsgVerb(0, X_PROBED, 4,
  	"(init301: LCDInfo=0x%04x LCDResInfo=0x%02x LCDTypeInfo=0x%02x SetFlag=0x%04x)\n",
	SiS_Pr->SiS_LCDInfo, SiS_Pr->SiS_LCDResInfo, SiS_Pr->SiS_LCDTypeInfo, SiS_Pr->SiS_SetFlag);
#endif
}

/*********************************************/
/*                 GET VCLK                  */
/*********************************************/

USHORT
SiS_GetVCLK2Ptr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
  USHORT CRT2Index,VCLKIndex=0,VCLKIndexGEN=0;
  USHORT modeflag,resinfo,tempbx;
  const UCHAR *CHTVVCLKPtr = NULL;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
     CRT2Index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
     VCLKIndexGEN = (SiS_GetRegByte((SiS_Pr->SiS_P3ca+0x02)) >> 2) & 0x03;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     CRT2Index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
     VCLKIndexGEN = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
     if(HwInfo->jChipType < SIS_315H) VCLKIndexGEN &= 0x3f;
  }

  if(SiS_Pr->SiS_VBType & VB_SISVB) {    /* 30x/B/LV */

     if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {

        CRT2Index >>= 6;
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {      	/*  LCD */

           if(HwInfo->jChipType < SIS_315H) {
	      VCLKIndex = SiS_Pr->PanelVCLKIdx300;
	   } else {
	      VCLKIndex = SiS_Pr->PanelVCLKIdx315;
	      if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (SiS_Pr->SiS_LCDInfo & LCDPass11)) {
	         VCLKIndex = VCLKIndexGEN;
		 if(resinfo == SIS_RI_1280x720) VCLKIndex = VCLK_1280x720;
		 if(SiS_Pr->SiS_LCDResInfo == Panel_1280x720) {
		    if(SiS_Pr->PanelHT == 1344) VCLKIndex = VCLK_1280x720_2;
		 }
		 if(ModeNo <= 0x13) {
		    if(HwInfo->jChipType <= SIS_315PRO) {
		       if(SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC == 1) VCLKIndex = 0x42;
	            } else {
		       if(SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC == 1) VCLKIndex = 0x00;
		    }
		 }
		 if(HwInfo->jChipType <= SIS_315PRO) {
		    if(VCLKIndex == 0) VCLKIndex = 0x41;
		    if(VCLKIndex == 1) VCLKIndex = 0x43;
		    if(VCLKIndex == 4) VCLKIndex = 0x44;
		 }
	      }
	   }

        } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {                 	/*  TV */

	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
              if(SiS_Pr->SiS_TVMode & TVRPLLDIV2XO) 		VCLKIndex = HiTVVCLKDIV2;
     	      else                                  		VCLKIndex = HiTVVCLK;
              if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
            	 if(modeflag & Charx8Dot) 	    		VCLKIndex = HiTVSimuVCLK;
            	 else 			  	    		VCLKIndex = HiTVTextVCLK;
              }
           } else if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) 	VCLKIndex = YPbPr750pVCLK;
	   else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p)   	VCLKIndex = TVVCLKDIV2;
	   else if(SiS_Pr->SiS_TVMode & TVRPLLDIV2XO)     	VCLKIndex = TVVCLKDIV2;
           else         		            	  	VCLKIndex = TVVCLK;

	   if(HwInfo->jChipType < SIS_315H) VCLKIndex += TVCLKBASE_300;
  	   else 	                    VCLKIndex += TVCLKBASE_315;

        } else {         						/* VGA2 */

	   VCLKIndex = VCLKIndexGEN;
	   if(HwInfo->jChipType < SIS_315H) {
              if(ModeNo > 0x13) {
		 if( (HwInfo->jChipType == SIS_630) &&
		     (HwInfo->jChipRevision >= 0x30)) {
		    if(VCLKIndex == 0x14) VCLKIndex = 0x34;
		 }
		 /* Better VGA2 clock for 1280x1024@@75 */
		 if(VCLKIndex == 0x17) VCLKIndex = 0x45;
	      }
           }
        }

     } else {   /* If not programming CRT2 */

        VCLKIndex = VCLKIndexGEN;
	if(HwInfo->jChipType < SIS_315H) {
           if(ModeNo > 0x13) {
	      if( (HwInfo->jChipType != SIS_630) &&
		  (HwInfo->jChipType != SIS_300) ) {
		 if(VCLKIndex == 0x1b) VCLKIndex = 0x35;
	      }
	   }
        }
     }

  } else {       /*   LVDS  */

     VCLKIndex = CRT2Index;

     if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {

        if( (SiS_Pr->SiS_IF_DEF_CH70xx != 0) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV) ) {

	   VCLKIndex &= 0x1f;
           tempbx = 0;
	   if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
           if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	      tempbx += 2;
	      if(SiS_Pr->SiS_ModeType > ModeVGA) {
		 if(SiS_Pr->SiS_CHSOverScan) tempbx = 8;
	      }
	      if(SiS_Pr->SiS_TVMode & TVSetPALM) {
		 tempbx = 4;
		 if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	      } else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
		 tempbx = 6;
		 if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	      }
	   }
       	   switch(tempbx) {
             case  0: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUNTSC;  break;
             case  1: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKONTSC;  break;
             case  2: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUPAL;   break;
             case  3: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPAL;   break;
	     case  4: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUPALM;  break;
             case  5: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPALM;  break;
             case  6: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUPALN;  break;
             case  7: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPALN;  break;
	     case  8: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKSOPAL;  break;
	     default: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPAL;   break;
           }
           VCLKIndex = CHTVVCLKPtr[VCLKIndex];

        } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {

	   if(HwInfo->jChipType < SIS_315H) {
	      VCLKIndex = SiS_Pr->PanelVCLKIdx300;
	   } else {
	      VCLKIndex = SiS_Pr->PanelVCLKIdx315;
	   }

	   /* Special Timing: Barco iQ Pro R series */
	   if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) VCLKIndex = 0x44;

	   /* Special Timing: 848x480 parallel lvds */
	   if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
	      if(HwInfo->jChipType < SIS_315H) {
		 VCLKIndex = VCLK34_300;
	         /* if(resinfo == SIS_RI_1360x768) VCLKIndex = ?; */
	      } else {
		 VCLKIndex = VCLK34_315;
		 /* if(resinfo == SIS_RI_1360x768) VCLKIndex = ?; */
	      }
	   }

        } else {

	   VCLKIndex = VCLKIndexGEN;
	   if(HwInfo->jChipType < SIS_315H) {
              if(ModeNo > 0x13) {
		 if( (HwInfo->jChipType == SIS_630) &&
                     (HwInfo->jChipRevision >= 0x30) ) {
		    if(VCLKIndex == 0x14) VCLKIndex = 0x2e;
	         }
              }
	   }
        }

     } else {  /* if not programming CRT2 */

        VCLKIndex = VCLKIndexGEN;
	if(HwInfo->jChipType < SIS_315H) {
           if(ModeNo > 0x13) {
	      if( (HwInfo->jChipType != SIS_630) &&
	          (HwInfo->jChipType != SIS_300) ) {
		 if(VCLKIndex == 0x1b) VCLKIndex = 0x35;
	      }
#if 0
	      if(HwInfo->jChipType == SIS_730) {
		 if(VCLKIndex == 0x0b) VCLKIndex = 0x40;   /* 1024x768-70 */
		 if(VCLKIndex == 0x0d) VCLKIndex = 0x41;   /* 1024x768-75 */
	      }
#endif
	   }
        }

     }

  }
  
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "VCLKIndex %d (0x%x)\n", VCLKIndex, VCLKIndex);
#endif

  return(VCLKIndex);
}

/*********************************************/
/*        SET CRT2 MODE TYPE REGISTERS       */
/*********************************************/

static void
SiS_SetCRT2ModeRegs(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                    PSIS_HW_INFO HwInfo)
{
  USHORT i,j,modeflag;
  USHORT tempcl,tempah=0;
#ifdef SIS300
  USHORT temp;
#endif
#ifdef SIS315H
  USHORT tempbl, tempah2, tempbl2;
#endif

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }
  
  /* BIOS does not do this (neither 301 nor LVDS) */
  /* (But it's harmless; see SetCRT2Offset) */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x03,0x00);   /* fix write part1 index 0  BTDRAM bit Bug */

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {

     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x00,0xAF,0x40);
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2E,0xF7);

  } else {

     for(i=0,j=4; i<3; i++,j++) SiS_SetReg(SiS_Pr->SiS_Part1Port,j,0);

     tempcl = SiS_Pr->SiS_ModeType;

     if(HwInfo->jChipType < SIS_315H) {

#ifdef SIS300    /* ---- 300 series ---- */

        /* For 301BDH: (with LCD via LVDS) */
        if(SiS_Pr->SiS_VBType & VB_NoLCD) {
	   temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32);
	   temp &= 0xef;
	   temp |= 0x02;
	   if((SiS_Pr->SiS_VBInfo & SetCRT2ToTV) || (SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
	      temp |= 0x10;
	      temp &= 0xfd;
	   }
	   SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
        }

        if(ModeNo > 0x13) {
           tempcl -= ModeVGA;
           if((tempcl > 0) || (tempcl == 0)) {      /* tempcl is USHORT -> always true! */
              tempah = ((0x10 >> tempcl) | 0x80);
           }
        } else tempah = 0x80;

        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode)  tempah ^= 0xA0;

#endif  /* SIS300 */

     } else {

#ifdef SIS315H    /* ------- 315/330 series ------ */

        if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
           if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x08);
           }
        }

        if(ModeNo > 0x13) {
           tempcl -= ModeVGA;
           if((tempcl > 0) || (tempcl == 0)) {  /* tempcl is USHORT -> always true! */
              tempah = (0x08 >> tempcl);
              if (tempah == 0) tempah = 1;
              tempah |= 0x40;
           }
        } else tempah = 0x40;

        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) tempah ^= 0x50;

#endif  /* SIS315H */

     }

     if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) tempah = 0;

     if(HwInfo->jChipType < SIS_315H) {
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,tempah);
     } else {
        if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x00,0xa0,tempah);
        } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
           if(IS_SIS740) {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,tempah);
	   } else {
              SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x00,0xa0,tempah);
	   }
        }
     }

     if(SiS_Pr->SiS_VBType & VB_SISVB) {

        tempah = 0x01;
        if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
      	   tempah |= 0x02;
        }
        if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
      	   tempah ^= 0x05;
      	   if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
              tempah ^= 0x01;
      	   }
        }

        if(SiS_Pr->SiS_VBInfo & DisableCRT2Display)  tempah = 0;

        if(HwInfo->jChipType < SIS_315H) {

      	   tempah = (tempah << 5) & 0xFF;
      	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x01,tempah);
      	   tempah = (tempah >> 5) & 0xFF;

        } else {

      	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2E,0xF8,tempah);

        }

        if((SiS_Pr->SiS_ModeType == ModeVGA) && (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode))) {
      	   tempah |= 0x10;
        }

        if((HwInfo->jChipType < SIS_315H) && (SiS_Pr->SiS_VBType & VB_SIS301)) {
	   if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
	      (SiS_Pr->SiS_LCDResInfo == Panel_1280x960)) {
	      tempah |= 0x80;
	   }
        } else {
	   tempah |= 0x80;
        }

        if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	   if(!(SiS_Pr->SiS_TVMode & (TVSetYPbPr750p | TVSetYPbPr525p))) {
      	      if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
                 tempah |= 0x20;
	      }
      	   }
        }

        SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0D,0x40,tempah);

        tempah = 0;

	if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempah |= 0x40;

        if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	   if(SiS_Pr->SiS_TVMode & TVRPLLDIV2XO) {
              tempah |= 0x40;
       	   }
        }

	if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
	   (SiS_Pr->SiS_LCDResInfo == Panel_1280x960)  ||
	   ((SiS_Pr->SiS_LCDResInfo == Panel_Custom) &&
	    (SiS_Pr->CP_MaxX >= 1280) && (SiS_Pr->CP_MaxY >= 960))) {
	   tempah |= 0x80;
        }

        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0C,tempah);

     } else {  /* LVDS */

        if(HwInfo->jChipType >= SIS_315H) {

	   /* LVDS can only be slave in 8bpp modes */
	   tempah = 0x80;
	   if((modeflag & CRT2Mode) && (SiS_Pr->SiS_ModeType > ModeVGA)) {
	      if(SiS_Pr->SiS_VBInfo & DriverMode) {
	         tempah |= 0x02;
	      }
	   }

	   if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
              tempah |= 0x02;
    	   }

	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	      tempah ^= 0x01;
	   }

	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      tempah = 1;
	   }

    	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2e,0xF0,tempah);

        } else {

	   tempah = 0;
	   if( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) && (SiS_Pr->SiS_ModeType > ModeVGA) ) {
              tempah |= 0x02;
    	   }
	   tempah <<= 5;

	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display)  tempah = 0;

	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x01,tempah);

        }

     }

  }  /* LCDA */

  if(SiS_Pr->SiS_VBType & VB_SISVB) {

     if(HwInfo->jChipType >= SIS_315H) {

#ifdef SIS315H

        unsigned char bridgerev = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x01);;

	/* The following is nearly unpreditable and varies from machine
	 * to machine. Especially the 301DH seems to be a real trouble
	 * maker. Some BIOSes simply set the registers (like in the
	 * NoLCD-if-statements here), some set them according to the
	 * LCDA stuff. It is very likely that some machines are not
	 * treated correctly in the following, very case-orientated
	 * code. What do I do then...?
	 */

	/* 740 variants match for 30xB, 301B-DH, 30xLV */

        if(!(IS_SIS740)) {
           tempah = 0x04;						   /* For all bridges */
           tempbl = 0xfb;
           if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
              tempah = 0x00;
	      if(SiS_IsDualEdge(SiS_Pr, HwInfo)) {
	         tempbl = 0xff;
	      }
           }
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,tempbl,tempah);
	}

	/* The following two are responsible for eventually wrong colors
	 * in TV output. The DH (VB_NoLCD) conditions are unknown; the
	 * b0 was found in some 651 machine (Pim; P4_23=0xe5); the b1 version
	 * in a 650 box (Jake). What is the criteria?
	 */

	if((IS_SIS740) || (HwInfo->jChipType >= SIS_661)) {
	   tempah = 0x30;
	   tempbl = 0xc0;
	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      tempah = 0x00;
	      tempbl = 0x00;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2c,0xcf,tempah);
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x21,0x3f,tempbl);
	} else if(SiS_Pr->SiS_VBType & VB_SIS301) {
	   /* Fixes "TV-blue-bug" on 315+301 */
	   SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2c,0xcf);     /* For 301   */
	   SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x21,0x3f);
	} else if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2c,0x30);      /* For 30xLV */
	   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x21,0xc0);
	} else if((SiS_Pr->SiS_VBType & VB_NoLCD) && (bridgerev == 0xb0)) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2c,0x30);      /* For 30xB-DH rev b0 (or "DH on 651"?) */
	   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x21,0xc0);
	} else {
	   tempah = 0x30; tempah2 = 0xc0;		       /* For 30xB (and 301BDH rev b1) */
	   tempbl = 0xcf; tempbl2 = 0x3f;
	   if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
	      tempah = tempah2 = 0x00;
	      if(SiS_IsDualEdge(SiS_Pr, HwInfo)) {
		 tempbl = tempbl2 = 0xff;
	      }
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2c,tempbl,tempah);
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x21,tempbl2,tempah2);
	}

	if(IS_SIS740) {
	   tempah = 0x80;
	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      tempah = 0x00;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x23,0x7f,tempah);
	} else {
	   tempah = 0x00;
           tempbl = 0x7f;
           if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
              tempbl = 0xff;
	      if(!(SiS_IsDualEdge(SiS_Pr, HwInfo))) {
	         tempah = 0x80;
	      }
           }
           SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x23,tempbl,tempah);
	}

	/* 661: Sets p4 27 and 34 here, done in SetGroup4 here (old BIOS) */

#endif /* SIS315H */

     } else if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {

        SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x21,0x3f);

        if((SiS_Pr->SiS_VBInfo & DisableCRT2Display) ||
           (   (SiS_Pr->SiS_VBType & VB_NoLCD) &&
	       (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) ) ) {
	   SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x23,0x7F);
	} else {
	   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x23,0x80);
	}

     }

  } else {  /* LVDS */

#ifdef SIS315H
     if(HwInfo->jChipType >= SIS_315H) {

        if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {

           tempah = 0x04;
	   tempbl = 0xfb;
           if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
              tempah = 0x00;
	      if(SiS_IsDualEdge(SiS_Pr, HwInfo)) {
	         tempbl = 0xff;
	      }
           }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,tempbl,tempah);

	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	   }

	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2c,0x30);

	} else if(HwInfo->jChipType == SIS_550) {

	   SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2c,0x30);

	}

     }
#endif

  }

}

/*********************************************/
/*            GET RESOLUTION DATA            */
/*********************************************/

USHORT
SiS_GetResInfo(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex)
{
  if(ModeNo <= 0x13) return((USHORT)SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo);
  else               return((USHORT)SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO);
}

static void
SiS_GetCRT2ResInfo(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
                   PSIS_HW_INFO HwInfo)
{
  USHORT xres,yres,modeflag=0,resindex;

  if(SiS_Pr->UseCustomMode) {
     xres = SiS_Pr->CHDisplay;
     if(SiS_Pr->CModeFlag & HalfDCLK) xres *= 2;
     SiS_Pr->SiS_VGAHDE = SiS_Pr->SiS_HDE = xres;
     yres = SiS_Pr->CVDisplay;
     if(SiS_Pr->CModeFlag & DoubleScanMode) yres *= 2;
     SiS_Pr->SiS_VGAVDE = SiS_Pr->SiS_VDE = yres;
     return;
  }

  resindex = SiS_GetResInfo(SiS_Pr,ModeNo,ModeIdIndex);

  if(ModeNo <= 0x13) {
     xres = SiS_Pr->SiS_StResInfo[resindex].HTotal;
     yres = SiS_Pr->SiS_StResInfo[resindex].VTotal;
  } else {
     xres = SiS_Pr->SiS_ModeResInfo[resindex].HTotal;
     yres = SiS_Pr->SiS_ModeResInfo[resindex].VTotal;
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }

  if(!SiS_Pr->SiS_IF_DEF_DSTN && !SiS_Pr->SiS_IF_DEF_FSTN) {

     if((HwInfo->jChipType >= SIS_315H) && (SiS_Pr->SiS_IF_DEF_LVDS == 1)) {
        if((ModeNo != 0x03) && (SiS_Pr->SiS_SetFlag & SetDOSMode)) {
           if(yres == 350) yres = 400;
        }
        if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x3a) & 0x01) {
 	   if(ModeNo == 0x12) yres = 400;
        }
     }

     if(modeflag & HalfDCLK)       xres *= 2;
     if(modeflag & DoubleScanMode) yres *= 2;

  }

  if((SiS_Pr->SiS_VBType & VB_SISVB) && (!(SiS_Pr->SiS_VBType & VB_NoLCD))) {

        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCDA | SetCRT2ToLCD | SetCRT2ToHiVision)) {
           if(xres == 720) xres = 640;
	}

	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	   switch(SiS_Pr->SiS_LCDResInfo) {
	   case Panel_1024x768:
	      if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
                 if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
          	    if(yres == 350) yres = 357;
          	    if(yres == 400) yres = 420;
            	    if(yres == 480) yres = 525;
        	 }
      	      }
	      break;
	   case Panel_1280x1024:
	      if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
		 /* BIOS bug - does this regardless of scaling */
      		 if(yres == 400) yres = 405;
	      }
      	      if(yres == 350) yres = 360;
      	      if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
                 if(yres == 360) yres = 375;
      	      }
	      break;
	   case Panel_1600x1200:
	      if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        	 if(yres == 1024) yres = 1056;
      	      }
	      break;
	   }
	}

  } else {

     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToHiVision)) {
           if(xres == 720) xres = 640;
	}
     } else if(xres == 720) xres = 640;

     if(SiS_Pr->SiS_SetFlag & SetDOSMode) {
	yres = 400;
        if(HwInfo->jChipType >= SIS_315H) {
           if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x17) & 0x80) yres = 480;
        } else {
           if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) yres = 480;
        }
        if(SiS_Pr->SiS_IF_DEF_DSTN || SiS_Pr->SiS_IF_DEF_FSTN)  yres = 480;
     }

  }
  SiS_Pr->SiS_VGAHDE = SiS_Pr->SiS_HDE = xres;
  SiS_Pr->SiS_VGAVDE = SiS_Pr->SiS_VDE = yres;
}

/*********************************************/
/*           GET CRT2 TIMING DATA            */
/*********************************************/

static BOOLEAN
SiS_GetLVDSCRT1Ptr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
		   USHORT RefreshRateTableIndex, USHORT *ResIndex,
		   USHORT *DisplayType)
 {
  USHORT modeflag=0;

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
        if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) return FALSE;
     }
  } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode))    return FALSE;
  } else
     return FALSE;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     (*ResIndex) = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     (*ResIndex) = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }

  (*ResIndex) &= 0x3F;

  if((SiS_Pr->SiS_IF_DEF_CH70xx) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
     (*DisplayType) = 18;
     if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) (*DisplayType)++;
     if(SiS_Pr->SiS_TVMode & TVSetPAL) {
      	(*DisplayType) += 2;
	if(SiS_Pr->SiS_ModeType > ModeVGA) {
	   if(SiS_Pr->SiS_CHSOverScan) (*DisplayType) = 99;
	}
	if(SiS_Pr->SiS_TVMode & TVSetPALM) {
	   (*DisplayType) = 18;  /* PALM uses NTSC data */
	   if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) (*DisplayType)++;
	} else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
	   (*DisplayType) = 20;  /* PALN uses PAL data  */
	   if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) (*DisplayType)++;
	}
     }
  } else {
     switch(SiS_Pr->SiS_LCDResInfo) {
     case Panel_640x480:   (*DisplayType) = 50; break;
     case Panel_640x480_2: (*DisplayType) = 52; break;
     case Panel_640x480_3: (*DisplayType) = 54; break;
     case Panel_800x600:   (*DisplayType) =  0; break;
     case Panel_1024x600:  (*DisplayType) = 23; break;
     case Panel_1024x768:  (*DisplayType) =  4; break;
     case Panel_1152x768:  (*DisplayType) = 27; break;
     case Panel_1280x768:  (*DisplayType) = 40; break;
     case Panel_1280x1024: (*DisplayType) =  8; break;
     case Panel_1400x1050: (*DisplayType) = 14; break;
     case Panel_1600x1200: (*DisplayType) = 36; break;
     default: return FALSE;
     }

     if(modeflag & HalfDCLK) (*DisplayType)++;

     switch(SiS_Pr->SiS_LCDResInfo) {
     case Panel_640x480:
     case Panel_640x480_2:
     case Panel_640x480_3:
        break;
     default:
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) (*DisplayType) += 2;
     }

     if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
        (*DisplayType) = 12;
	if(modeflag & HalfDCLK) (*DisplayType)++;
     }
  }

#if 0
  if(SiS_Pr->SiS_IF_DEF_FSTN) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel320x480){
        (*DisplayType) = 22;
     }
  }
#endif

  return TRUE;
}

static void
SiS_GetCRT2Ptr(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
	       USHORT RefreshRateTableIndex,USHORT *CRT2Index,USHORT *ResIndex,
	       PSIS_HW_INFO HwInfo)
{
  USHORT tempbx=0,tempal=0,resinfo=0;

  if(ModeNo <= 0x13) {
     tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }

  if((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_IF_DEF_LVDS == 0)) {

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {                            /* LCD */

        tempbx = SiS_Pr->SiS_LCDResInfo;
	if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx += 32;

  	if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {  /* Pass 1:1 only (center-screen handled outside) */
	   tempbx = 100;
	   if(ModeNo >= 0x13) {
	      tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC_NS;
	      if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes == 1280) &&
	         (SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes ==  768)) {
	         /* Special for Fujitsu 7911 (VL-17WDX8), others custom */
	         if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768)        tempal = 0x08;
		 else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768_2) tempal = 0x0f;
		 else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768_3) tempal = 0x10;
	      }
	   }
	}

#ifdef SIS315H
	if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
	   if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
	      if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
	         tempbx = 200;
	         if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx++;
	      }
	   }
	}
#endif

     } else {						  	/* TV */

     	if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
           /* if(SiS_Pr->SiS_VGAVDE > 480) SiS_Pr->SiS_TVMode &= (~TVSetTVSimuMode); */
           tempbx = 2;
           if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
	      tempbx = 13;
              if(!(SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) tempbx = 14;
           }
	} else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	   if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p)      tempbx = 7;
	   else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) tempbx = 6;
	   else 					tempbx = 5;
	   if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode)     tempbx += 5;
       	} else {
           if(SiS_Pr->SiS_TVMode & TVSetPAL) 		tempbx = 3;
           else 					tempbx = 4;
           if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) 	tempbx += 5;
       	}

     }

     tempal &= 0x3F;

     if(ModeNo > 0x13) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision) {
      	   if(tempal == 6) tempal = 7;
           if((resinfo == SIS_RI_720x480) ||
	      (resinfo == SIS_RI_720x576) ||
	      (resinfo == SIS_RI_768x576)) {
	      tempal = 6;
	   }
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
              if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) {
	         if(resinfo == SIS_RI_1024x768) tempal = 8;
	      }
	      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
	         if(resinfo == SIS_RI_1280x720) tempal = 8;
	      }
	   }
	}
     }

     *CRT2Index = tempbx;
     *ResIndex = tempal;

  } else {   /* LVDS, 301B-DH (if running on LCD) */

     tempbx = 0;
     if((SiS_Pr->SiS_IF_DEF_CH70xx) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
        tempbx = 10;
	if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
        if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	   tempbx += 2;
	   if(SiS_Pr->SiS_ModeType > ModeVGA) {
	      if(SiS_Pr->SiS_CHSOverScan) tempbx = 99;
	   }
	   if(SiS_Pr->SiS_TVMode & TVSetPALM) {
	      tempbx = 90;
	      if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	   } else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
	      tempbx = 92;
	      if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	   }
        }
     } else {
        switch(SiS_Pr->SiS_LCDResInfo) {
	case Panel_640x480:   tempbx = 6;  break;
	case Panel_640x480_2: tempbx = 30; break;
	case Panel_640x480_3: tempbx = 30; break;
	case Panel_800x600:   tempbx = 0;  break;
	case Panel_1024x600:  tempbx = 15; break;
	case Panel_1024x768:  tempbx = 2;  break;
	case Panel_1152x768:  tempbx = 17; break;
	case Panel_1280x768:  tempbx = 18; break;
	case Panel_1280x1024: tempbx = 4;  break;
	case Panel_1400x1050: tempbx = 8;  break;
	case Panel_1600x1200: tempbx = 21; break;
	case Panel_Barco1366: tempbx = 80; break;
	}

	switch(SiS_Pr->SiS_LCDResInfo) {
	case Panel_640x480:
	case Panel_640x480_2:
	case Panel_640x480_3:
	   break;
	default:
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
	}

	if(SiS_Pr->SiS_LCDInfo & LCDPass11) tempbx = 7;

	if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
	   tempbx = 82;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	} else if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
	   tempbx = 84;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	}

     }

     if(SiS_Pr->SiS_SetFlag & SetDOSMode) {
        if(SiS_Pr->SiS_LCDResInfo != Panel_640x480) tempal = 7;
  	if(HwInfo->jChipType < SIS_315H) {
	   if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) tempal++;
	}
     }

     (*CRT2Index) = tempbx;
     (*ResIndex) = tempal & 0x1F;
  }
}

static void
SiS_GetRAMDAC2DATA(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex,PSIS_HW_INFO HwInfo)
{
  USHORT tempax=0,tempbx=0;
  USHORT temp1=0,modeflag=0,tempcx=0;
  USHORT index;

  SiS_Pr->SiS_RVBHCMAX  = 1;
  SiS_Pr->SiS_RVBHCFACT = 1;

  if(ModeNo <= 0x13) {

     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     index = SiS_GetModePtr(SiS_Pr,ModeNo,ModeIdIndex);

     tempax = SiS_Pr->SiS_StandTable[index].CRTC[0];
     tempbx = SiS_Pr->SiS_StandTable[index].CRTC[6];
     temp1 = SiS_Pr->SiS_StandTable[index].CRTC[7];

  } else {

     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;

     tempax = SiS_Pr->SiS_CRT1Table[index].CR[0];
     tempax |= (SiS_Pr->SiS_CRT1Table[index].CR[14] << 8);
     tempax &= 0x03FF;
     tempbx = SiS_Pr->SiS_CRT1Table[index].CR[6];
     tempcx = SiS_Pr->SiS_CRT1Table[index].CR[13] << 8;
     tempcx &= 0x0100;
     tempcx <<= 2;
     tempbx |= tempcx;
     temp1  = SiS_Pr->SiS_CRT1Table[index].CR[7];

  }

  if(temp1 & 0x01) tempbx |= 0x0100;
  if(temp1 & 0x20) tempbx |= 0x0200;
  
  tempax += 5;

  /* Charx8Dot is no more used (and assumed), so we set it */
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     modeflag |= Charx8Dot;
  }

  if(modeflag & Charx8Dot) tempax *= 8;
  else                     tempax *= 9;

  if(modeflag & HalfDCLK)  tempax <<= 1;

  tempbx++;

  SiS_Pr->SiS_VGAHT = SiS_Pr->SiS_HT = tempax;
  SiS_Pr->SiS_VGAVT = SiS_Pr->SiS_VT = tempbx;
}

static void
SiS_GetCRT2DataLVDS(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
                    USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
   USHORT CRT2Index, ResIndex;
   const SiS_LVDSDataStruct *LVDSData = NULL;

   SiS_GetCRT2ResInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);

   if(SiS_Pr->SiS_VBType & VB_SISVB) {
      SiS_Pr->SiS_RVBHCMAX  = 1;
      SiS_Pr->SiS_RVBHCFACT = 1;
      SiS_Pr->SiS_NewFlickerMode = 0;
      SiS_Pr->SiS_RVBHRS = 50;
      SiS_Pr->SiS_RY1COE = 0;
      SiS_Pr->SiS_RY2COE = 0;
      SiS_Pr->SiS_RY3COE = 0;
      SiS_Pr->SiS_RY4COE = 0;
   }

   if((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {

#ifdef SIS315H
      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
         if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
	    if(SiS_Pr->UseCustomMode) {
	       SiS_Pr->SiS_VGAHT = SiS_Pr->SiS_HT = SiS_Pr->CHTotal;
	       SiS_Pr->SiS_VGAVT = SiS_Pr->SiS_VT = SiS_Pr->CVTotal;
	    } else {
	       if(ModeNo < 0x13) {
	          ResIndex = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
	       } else {
	          ResIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC_NS;
		  /* Special for our 3 types, others custom (works with default) */
		  if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes == 1280) &&
	             (SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes ==  768)) {
	             if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768)        ResIndex = 0x08;
		     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768_2) ResIndex = 0x0f;
		     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768_3) ResIndex = 0x10;
	          }
		  /* Special for 1280x720 TMDS <> LVDS */
		  if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes == 1280) &&
	             (SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes ==  720)) {
		     if(SiS_Pr->SiS_LCDResInfo == Panel_1280x720) {
		        if(SiS_Pr->PanelHT == 1344) ResIndex = 0x12;
		     }
	          }
	       }
	       SiS_Pr->SiS_VGAHT = SiS_Pr->SiS_NoScaleData[ResIndex].VGAHT;
               SiS_Pr->SiS_VGAVT = SiS_Pr->SiS_NoScaleData[ResIndex].VGAVT;
               SiS_Pr->SiS_HT    = SiS_Pr->SiS_NoScaleData[ResIndex].LCDHT;
               SiS_Pr->SiS_VT    = SiS_Pr->SiS_NoScaleData[ResIndex].LCDVT;
	    }
	 } else {
     	    SiS_Pr->SiS_VGAHT = SiS_Pr->SiS_HT = SiS_Pr->PanelHT;
            SiS_Pr->SiS_VGAVT = SiS_Pr->SiS_VT = SiS_Pr->PanelVT;
	 }
      } else {
	 /* This handles custom modes and custom panels */
	 SiS_Pr->SiS_HDE = SiS_Pr->PanelXRes;
         SiS_Pr->SiS_VDE = SiS_Pr->PanelYRes;
         SiS_Pr->SiS_HT  = SiS_Pr->PanelHT;
         SiS_Pr->SiS_VT  = SiS_Pr->PanelVT;
	 SiS_Pr->SiS_VGAHT = SiS_Pr->PanelHT - (SiS_Pr->PanelXRes - SiS_Pr->SiS_VGAHDE);
	 SiS_Pr->SiS_VGAVT = SiS_Pr->PanelVT - (SiS_Pr->PanelYRes - SiS_Pr->SiS_VGAVDE);
      }

      SiS_CalcLCDACRT1Timing(SiS_Pr,ModeNo,ModeIdIndex);

#endif

   } else {

      /* 301BDH needs LVDS Data */
      if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
	 SiS_Pr->SiS_IF_DEF_LVDS = 1;
      }

      SiS_GetCRT2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                     		&CRT2Index, &ResIndex, HwInfo);

      /* 301BDH needs LVDS Data */
      if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
         SiS_Pr->SiS_IF_DEF_LVDS = 0;
      }

      switch (CRT2Index) {
      	 case  0: LVDSData = SiS_Pr->SiS_LVDS800x600Data_1;    break;
	 case  1: LVDSData = SiS_Pr->SiS_LVDS800x600Data_2;    break;
      	 case  2: LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;   break;
	 case  3: LVDSData = SiS_Pr->SiS_LVDS1024x768Data_2;   break;
      	 case  4: LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_1;  break;
      	 case  5: LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_2;  break;
	 case  6: LVDSData = SiS_Pr->SiS_LVDS640x480Data_1;    break;
         case  7: LVDSData = SiS_Pr->SiS_LVDSXXXxXXXData_1;    break;
	 case  8: LVDSData = SiS_Pr->SiS_LVDS1400x1050Data_1;  break;
	 case  9: LVDSData = SiS_Pr->SiS_LVDS1400x1050Data_2;  break;
      	 case 10: LVDSData = SiS_Pr->SiS_CHTVUNTSCData;        break;
      	 case 11: LVDSData = SiS_Pr->SiS_CHTVONTSCData;        break;
      	 case 12: LVDSData = SiS_Pr->SiS_CHTVUPALData;         break;
      	 case 13: LVDSData = SiS_Pr->SiS_CHTVOPALData;         break;
      	 case 14: LVDSData = SiS_Pr->SiS_LVDS320x480Data_1;    break;
	 case 15: LVDSData = SiS_Pr->SiS_LVDS1024x600Data_1;   break;
	 case 16: LVDSData = SiS_Pr->SiS_LVDS1024x600Data_2;   break;
	 case 17: LVDSData = SiS_Pr->SiS_LVDS1152x768Data_1;   break;
	 case 18: LVDSData = SiS_Pr->SiS_LVDS1152x768Data_2;   break;
	 case 19: LVDSData = SiS_Pr->SiS_LVDS1280x768Data_1;   break;
	 case 20: LVDSData = SiS_Pr->SiS_LVDS1280x768Data_2;   break;
	 case 21: LVDSData = SiS_Pr->SiS_LVDS1600x1200Data_1;  break;
	 case 22: LVDSData = SiS_Pr->SiS_LVDS1600x1200Data_2;  break;
	 case 30: LVDSData = SiS_Pr->SiS_LVDS640x480Data_2;    break;
	 case 80: LVDSData = SiS_Pr->SiS_LVDSBARCO1366Data_1;  break;
	 case 81: LVDSData = SiS_Pr->SiS_LVDSBARCO1366Data_2;  break;
	 case 82: LVDSData = SiS_Pr->SiS_LVDSBARCO1024Data_1;  break;
	 case 83: LVDSData = SiS_Pr->SiS_LVDSBARCO1024Data_2;  break;
	 case 84: LVDSData = SiS_Pr->SiS_LVDS848x480Data_1;    break;
	 case 85: LVDSData = SiS_Pr->SiS_LVDS848x480Data_2;    break;
	 case 90: LVDSData = SiS_Pr->SiS_CHTVUPALMData;        break;
      	 case 91: LVDSData = SiS_Pr->SiS_CHTVOPALMData;        break;
      	 case 92: LVDSData = SiS_Pr->SiS_CHTVUPALNData;        break;
      	 case 93: LVDSData = SiS_Pr->SiS_CHTVOPALNData;        break;
	 case 99: LVDSData = SiS_Pr->SiS_CHTVSOPALData;	       break;  /* Super Overscan */
	 default: LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;   break;
      }

      SiS_Pr->SiS_VGAHT = (LVDSData+ResIndex)->VGAHT;
      SiS_Pr->SiS_VGAVT = (LVDSData+ResIndex)->VGAVT;
      SiS_Pr->SiS_HT    = (LVDSData+ResIndex)->LCDHT;
      SiS_Pr->SiS_VT    = (LVDSData+ResIndex)->LCDVT;

      if(!(SiS_Pr->SiS_VBType & VB_SISVB)) {
         if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
            if((!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) || (SiS_Pr->SiS_SetFlag & SetDOSMode)) {
	       SiS_Pr->SiS_HDE = SiS_Pr->PanelXRes;
               SiS_Pr->SiS_VDE = SiS_Pr->PanelYRes;
	       if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
		  if(ResIndex < 0x08) {
		     SiS_Pr->SiS_HDE = 1280;
                     SiS_Pr->SiS_VDE = 1024;
                  }
               }
            }
         }
      }
   }
}

static void
SiS_GetCRT2Data301(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex,
		   PSIS_HW_INFO HwInfo)
{
  USHORT tempax,tempbx,modeflag;
  USHORT resinfo;
  USHORT CRT2Index,ResIndex;
  const SiS_LCDDataStruct *LCDPtr = NULL;
  const SiS_TVDataStruct  *TVPtr  = NULL;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }
  
  SiS_Pr->SiS_NewFlickerMode = 0;
  SiS_Pr->SiS_RVBHRS = 50;
  SiS_Pr->SiS_RY1COE = 0;
  SiS_Pr->SiS_RY2COE = 0;
  SiS_Pr->SiS_RY3COE = 0;
  SiS_Pr->SiS_RY4COE = 0;

  SiS_GetCRT2ResInfo(SiS_Pr,ModeNo,ModeIdIndex,HwInfo);

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC){

     if(SiS_Pr->UseCustomMode) {

        SiS_Pr->SiS_RVBHCMAX  = 1;
        SiS_Pr->SiS_RVBHCFACT = 1;
        SiS_Pr->SiS_VGAHT     = SiS_Pr->CHTotal;
        SiS_Pr->SiS_VGAVT     = SiS_Pr->CVTotal;
        SiS_Pr->SiS_HT        = SiS_Pr->CHTotal;
        SiS_Pr->SiS_VT        = SiS_Pr->CVTotal;
	SiS_Pr->SiS_HDE       = SiS_Pr->SiS_VGAHDE;
        SiS_Pr->SiS_VDE       = SiS_Pr->SiS_VGAVDE;

     } else {

        SiS_GetRAMDAC2DATA(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);

     }

  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {

     SiS_GetCRT2Ptr(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                    &CRT2Index,&ResIndex,HwInfo);

     switch(CRT2Index) {
        case  2: TVPtr = SiS_Pr->SiS_ExtHiTVData;   break;
        case  3: TVPtr = SiS_Pr->SiS_ExtPALData;    break;
        case  4: TVPtr = SiS_Pr->SiS_ExtNTSCData;   break;
        case  5: TVPtr = SiS_Pr->SiS_Ext525iData;   break;
        case  6: TVPtr = SiS_Pr->SiS_Ext525pData;   break;
        case  7: TVPtr = SiS_Pr->SiS_Ext750pData;   break;
        case  8: TVPtr = SiS_Pr->SiS_StPALData;     break;
        case  9: TVPtr = SiS_Pr->SiS_StNTSCData;    break;
        case 10: TVPtr = SiS_Pr->SiS_St525iData;    break;
        case 11: TVPtr = SiS_Pr->SiS_St525pData;    break;
        case 12: TVPtr = SiS_Pr->SiS_St750pData;    break;
        case 13: TVPtr = SiS_Pr->SiS_St1HiTVData;   break;
        case 14: TVPtr = SiS_Pr->SiS_St2HiTVData;   break;
        default: TVPtr = SiS_Pr->SiS_StPALData;     break;
     }

     SiS_Pr->SiS_RVBHCMAX  = (TVPtr+ResIndex)->RVBHCMAX;
     SiS_Pr->SiS_RVBHCFACT = (TVPtr+ResIndex)->RVBHCFACT;
     SiS_Pr->SiS_VGAHT     = (TVPtr+ResIndex)->VGAHT;
     SiS_Pr->SiS_VGAVT     = (TVPtr+ResIndex)->VGAVT;
     SiS_Pr->SiS_HDE       = (TVPtr+ResIndex)->TVHDE;
     SiS_Pr->SiS_VDE       = (TVPtr+ResIndex)->TVVDE;
     SiS_Pr->SiS_RVBHRS    = (TVPtr+ResIndex)->RVBHRS;
     SiS_Pr->SiS_NewFlickerMode = (TVPtr+ResIndex)->FlickerMode;
     if(modeflag & HalfDCLK) {
        SiS_Pr->SiS_RVBHRS = (TVPtr+ResIndex)->HALFRVBHRS;
     }

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {

        if((resinfo == SIS_RI_1024x768)  ||
           (resinfo == SIS_RI_1280x1024) ||
           (resinfo == SIS_RI_1280x720)) {
	   SiS_Pr->SiS_NewFlickerMode = 0x40;
	}

        if(SiS_Pr->SiS_VGAVDE == 350) SiS_Pr->SiS_TVMode |= TVSetTVSimuMode;

        SiS_Pr->SiS_HT = ExtHiTVHT;
        SiS_Pr->SiS_VT = ExtHiTVVT;
        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
           if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
              SiS_Pr->SiS_HT = StHiTVHT;
              SiS_Pr->SiS_VT = StHiTVVT;
#if 0
              if(!(modeflag & Charx8Dot)) {
                 SiS_Pr->SiS_HT = StHiTextTVHT;
                 SiS_Pr->SiS_VT = StHiTextTVVT;
              }
#endif
           }
        }

     } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {

        if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
           SiS_Pr->SiS_HT = 1650;
           SiS_Pr->SiS_VT = 750;
	} else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) {
	   SiS_Pr->SiS_HT = NTSCHT;
	   SiS_Pr->SiS_VT = NTSCVT;
        } else {
           SiS_Pr->SiS_HT = NTSCHT;
	   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) SiS_Pr->SiS_HT = NTSC2HT;
           SiS_Pr->SiS_VT = NTSCVT;
        }

     } else {

        SiS_Pr->SiS_RY1COE = (TVPtr+ResIndex)->RY1COE;
        SiS_Pr->SiS_RY2COE = (TVPtr+ResIndex)->RY2COE;
        SiS_Pr->SiS_RY3COE = (TVPtr+ResIndex)->RY3COE;
        SiS_Pr->SiS_RY4COE = (TVPtr+ResIndex)->RY4COE;

        if(modeflag & HalfDCLK) {
           SiS_Pr->SiS_RY1COE = 0x00;
           SiS_Pr->SiS_RY2COE = 0xf4;
           SiS_Pr->SiS_RY3COE = 0x10;
           SiS_Pr->SiS_RY4COE = 0x38;
        }

        if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
           SiS_Pr->SiS_HT = NTSCHT;
	   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) SiS_Pr->SiS_HT = NTSC2HT;
           SiS_Pr->SiS_VT = NTSCVT;
        } else {
           SiS_Pr->SiS_HT = PALHT;
           SiS_Pr->SiS_VT = PALVT;
        }

     }

  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {

     SiS_Pr->SiS_RVBHCMAX  = 1;
     SiS_Pr->SiS_RVBHCFACT = 1;

     if(SiS_Pr->UseCustomMode) {

        SiS_Pr->SiS_VGAHT     = SiS_Pr->CHTotal;
        SiS_Pr->SiS_VGAVT     = SiS_Pr->CVTotal;
        SiS_Pr->SiS_HT        = SiS_Pr->CHTotal;
        SiS_Pr->SiS_VT        = SiS_Pr->CVTotal;
	SiS_Pr->SiS_HDE       = SiS_Pr->SiS_VGAHDE;
        SiS_Pr->SiS_VDE       = SiS_Pr->SiS_VGAVDE;

     } else {

        if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {

           SiS_Pr->SiS_VGAHT     = SiS_Pr->PanelHT;
           SiS_Pr->SiS_VGAVT     = SiS_Pr->PanelVT;
           SiS_Pr->SiS_HT        = SiS_Pr->PanelHT;
           SiS_Pr->SiS_VT        = SiS_Pr->PanelVT;

	} else {

           SiS_GetCRT2Ptr(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                          &CRT2Index,&ResIndex,HwInfo);

           switch(CRT2Index) {
	      case Panel_1024x768      : LCDPtr = SiS_Pr->SiS_ExtLCD1024x768Data;   break;
	      case Panel_1024x768  + 32: LCDPtr = SiS_Pr->SiS_St2LCD1024x768Data;   break;
	      case Panel_1280x720      :
	      case Panel_1280x720  + 32: LCDPtr = SiS_Pr->SiS_LCD1280x720Data;      break;
	      case Panel_1280x768_2    : LCDPtr = SiS_Pr->SiS_ExtLCD1280x768_2Data; break;
              case Panel_1280x768_2+ 32: LCDPtr = SiS_Pr->SiS_StLCD1280x768_2Data;  break;
	      case Panel_1280x768_3    :
	      case Panel_1280x768_3+ 32: LCDPtr = SiS_Pr->SiS_LCD1280x768_3Data;    break;
	      case Panel_1280x800      :
	      case Panel_1280x800  + 32: LCDPtr = SiS_Pr->SiS_LCD1280x800Data;      break;
	      case Panel_1280x960      :
	      case Panel_1280x960  + 32: LCDPtr = SiS_Pr->SiS_LCD1280x960Data;      break;
              case Panel_1280x1024     : LCDPtr = SiS_Pr->SiS_ExtLCD1280x1024Data;  break;
              case Panel_1280x1024 + 32: LCDPtr = SiS_Pr->SiS_St2LCD1280x1024Data;  break;
              case Panel_1400x1050     : LCDPtr = SiS_Pr->SiS_ExtLCD1400x1050Data;  break;
              case Panel_1400x1050 + 32: LCDPtr = SiS_Pr->SiS_StLCD1400x1050Data;   break;
              case Panel_1600x1200     : LCDPtr = SiS_Pr->SiS_ExtLCD1600x1200Data;  break;
              case Panel_1600x1200 + 32: LCDPtr = SiS_Pr->SiS_StLCD1600x1200Data;   break;
	      case Panel_1680x1050     :
	      case Panel_1680x1050 + 32: LCDPtr = SiS_Pr->SiS_LCD1680x1050Data;     break;
	      case 100		       : LCDPtr = SiS_Pr->SiS_NoScaleData;	    break;
#ifdef SIS315H
	      case 200                 : LCDPtr = SiS310_ExtCompaq1280x1024Data;    break;
	      case 201                 : LCDPtr = SiS_Pr->SiS_St2LCD1280x1024Data;  break;
#endif
              default                  : LCDPtr = SiS_Pr->SiS_ExtLCD1024x768Data;   break;
           }

#ifdef TWDEBUG
           xf86DrvMsg(0, X_INFO, "GetCRT2Data: Index %d ResIndex %d\n", CRT2Index, ResIndex);
#endif

           SiS_Pr->SiS_RVBHCMAX  = (LCDPtr+ResIndex)->RVBHCMAX;
           SiS_Pr->SiS_RVBHCFACT = (LCDPtr+ResIndex)->RVBHCFACT;
           SiS_Pr->SiS_VGAHT     = (LCDPtr+ResIndex)->VGAHT;
           SiS_Pr->SiS_VGAVT     = (LCDPtr+ResIndex)->VGAVT;
           SiS_Pr->SiS_HT        = (LCDPtr+ResIndex)->LCDHT;
           SiS_Pr->SiS_VT        = (LCDPtr+ResIndex)->LCDVT;

        }

	tempax = SiS_Pr->PanelXRes;
        tempbx = SiS_Pr->PanelYRes;

	if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
           if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
              if(HwInfo->jChipType < SIS_315H) {
                 if     (SiS_Pr->SiS_VGAVDE == 350) tempbx = 560;
                 else if(SiS_Pr->SiS_VGAVDE == 400) tempbx = 640;
              }
           } else {
              if     (SiS_Pr->SiS_VGAVDE == 357) tempbx = 527;
              else if(SiS_Pr->SiS_VGAVDE == 420) tempbx = 620;
              else if(SiS_Pr->SiS_VGAVDE == 525) tempbx = 775;
              else if(SiS_Pr->SiS_VGAVDE == 600) tempbx = 775;
              else if(SiS_Pr->SiS_VGAVDE == 350) tempbx = 560;
              else if(SiS_Pr->SiS_VGAVDE == 400) tempbx = 640;
           }
	} else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x960) {
           if     (SiS_Pr->SiS_VGAVDE == 350)  tempbx = 700;
           else if(SiS_Pr->SiS_VGAVDE == 400)  tempbx = 800;
           else if(SiS_Pr->SiS_VGAVDE == 1024) tempbx = 960;
	} else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
           if     (SiS_Pr->SiS_VGAVDE == 360) tempbx = 768;
           else if(SiS_Pr->SiS_VGAVDE == 375) tempbx = 800;
           else if(SiS_Pr->SiS_VGAVDE == 405) tempbx = 864;
        } else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) {
	   if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
              if     (SiS_Pr->SiS_VGAVDE == 350)  tempbx = 875;
              else if(SiS_Pr->SiS_VGAVDE == 400)  tempbx = 1000;
           }
        }

        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
           tempax = SiS_Pr->SiS_VGAHDE;
           tempbx = SiS_Pr->SiS_VGAVDE;
        }

        SiS_Pr->SiS_HDE = tempax;
        SiS_Pr->SiS_VDE = tempbx;
     }
  }
}

static void
SiS_GetCRT2Data(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{

  if(SiS_Pr->SiS_VBType & VB_SISVB) {

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
        SiS_GetCRT2DataLVDS(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
     } else {
	if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
	   /* Need LVDS Data for LCD on 301B-DH */
	   SiS_GetCRT2DataLVDS(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
	} else {
	   SiS_GetCRT2Data301(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
        }
     }

  } else {

     SiS_GetCRT2DataLVDS(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);

  }
}

/*********************************************/
/*         GET LVDS DES (SKEW) DATA          */
/*********************************************/

static void
SiS_GetLVDSDesPtr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                  USHORT RefreshRateTableIndex, USHORT *PanelIndex,
		  USHORT *ResIndex, PSIS_HW_INFO HwInfo)
{
  USHORT modeflag;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     (*ResIndex) = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     (*ResIndex) = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }

  (*ResIndex) &= 0x1F;
  (*PanelIndex) = 0;

  if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        (*PanelIndex) = 50;
        if((SiS_Pr->SiS_TVMode & TVSetPAL) && (!(SiS_Pr->SiS_TVMode & TVSetPALM))) (*PanelIndex) += 2;
        if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) (*PanelIndex) += 1;
        /* Nothing special needed for SOverscan    */
        /* PALM uses NTSC data, PALN uses PAL data */
     }
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     *PanelIndex = SiS_Pr->SiS_LCDTypeInfo;
     if(HwInfo->jChipType >= SIS_661) {
        /* As long as we don's use the BIOS tables, we
	 * need to convert the TypeInfo as for 315 series
	 */
        (*PanelIndex) = SiS_Pr->SiS_LCDResInfo - 1;
     }
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        (*PanelIndex) += 16;
        if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
           (*PanelIndex) = 32;
           if(modeflag & HalfDCLK) (*PanelIndex)++;
	}
     }
  }

  if(SiS_Pr->SiS_SetFlag & SetDOSMode) {
     if(SiS_Pr->SiS_LCDResInfo != Panel_640x480) {
        (*ResIndex) = 7;
        if(HwInfo->jChipType < SIS_315H) {
           if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) (*ResIndex)++;
        }
     }
  }
}

static void
SiS_GetLVDSDesData(SiS_Private *SiS_Pr, USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
  USHORT modeflag;
  USHORT PanelIndex,ResIndex;
  const  SiS_LVDSDesStruct *PanelDesPtr = NULL;

  SiS_Pr->SiS_LCDHDES = 0;
  SiS_Pr->SiS_LCDVDES = 0;

  if( (SiS_Pr->UseCustomMode) 		         ||
      (SiS_Pr->SiS_LCDResInfo == Panel_Custom)   ||
      (SiS_Pr->SiS_CustomT == CUT_PANEL848)      ||
      ((SiS_Pr->SiS_VBType & VB_SISVB) &&
       (SiS_Pr->SiS_LCDInfo & DontExpandLCD) &&
       (SiS_Pr->SiS_LCDInfo & LCDPass11)) ) {
     return;
  }

  if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {

#ifdef SIS315H
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        /* non-pass 1:1 only, see above */
        if(SiS_Pr->SiS_VGAVDE != SiS_Pr->PanelYRes) {
           SiS_Pr->SiS_LCDHDES = SiS_Pr->SiS_HT - ((SiS_Pr->PanelXRes - SiS_Pr->SiS_VGAHDE) / 2);
	   SiS_Pr->SiS_LCDVDES = SiS_Pr->SiS_VT - ((SiS_Pr->PanelYRes - SiS_Pr->SiS_VGAVDE) / 2);
	}
     }
     if(SiS_Pr->SiS_VGAVDE == SiS_Pr->PanelYRes) {
        switch(SiS_Pr->SiS_CustomT) {
        case CUT_UNIWILL1024:
        case CUT_UNIWILL10242:
        case CUT_CLEVO1400:
	   if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	      SiS_Pr->SiS_LCDVDES = SiS_Pr->PanelVT - 1;
	   }
	   break;
	}
	if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
	   if(SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) {
	      SiS_Pr->SiS_LCDVDES = SiS_Pr->PanelVT - 1;
	   }
	}
     }
#endif

  } else {

     SiS_GetLVDSDesPtr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                       &PanelIndex, &ResIndex, HwInfo);

     switch(PanelIndex) {
     	case  0: PanelDesPtr = SiS_Pr->SiS_PanelType00_1;    break;   /* ---  */
     	case  1: PanelDesPtr = SiS_Pr->SiS_PanelType01_1;    break;
     	case  2: PanelDesPtr = SiS_Pr->SiS_PanelType02_1;    break;
     	case  3: PanelDesPtr = SiS_Pr->SiS_PanelType03_1;    break;
     	case  4: PanelDesPtr = SiS_Pr->SiS_PanelType04_1;    break;
     	case  5: PanelDesPtr = SiS_Pr->SiS_PanelType05_1;    break;
     	case  6: PanelDesPtr = SiS_Pr->SiS_PanelType06_1;    break;
     	case  7: PanelDesPtr = SiS_Pr->SiS_PanelType07_1;    break;
     	case  8: PanelDesPtr = SiS_Pr->SiS_PanelType08_1;    break;
     	case  9: PanelDesPtr = SiS_Pr->SiS_PanelType09_1;    break;
     	case 10: PanelDesPtr = SiS_Pr->SiS_PanelType0a_1;    break;
     	case 11: PanelDesPtr = SiS_Pr->SiS_PanelType0b_1;    break;
     	case 12: PanelDesPtr = SiS_Pr->SiS_PanelType0c_1;    break;
     	case 13: PanelDesPtr = SiS_Pr->SiS_PanelType0d_1;    break;
     	case 14: PanelDesPtr = SiS_Pr->SiS_PanelType0e_1;    break;
     	case 15: PanelDesPtr = SiS_Pr->SiS_PanelType0f_1;    break;
     	case 16: PanelDesPtr = SiS_Pr->SiS_PanelType00_2;    break;    /* --- */
     	case 17: PanelDesPtr = SiS_Pr->SiS_PanelType01_2;    break;
     	case 18: PanelDesPtr = SiS_Pr->SiS_PanelType02_2;    break;
     	case 19: PanelDesPtr = SiS_Pr->SiS_PanelType03_2;    break;
     	case 20: PanelDesPtr = SiS_Pr->SiS_PanelType04_2;    break;
     	case 21: PanelDesPtr = SiS_Pr->SiS_PanelType05_2;    break;
     	case 22: PanelDesPtr = SiS_Pr->SiS_PanelType06_2;    break;
     	case 23: PanelDesPtr = SiS_Pr->SiS_PanelType07_2;    break;
     	case 24: PanelDesPtr = SiS_Pr->SiS_PanelType08_2;    break;
     	case 25: PanelDesPtr = SiS_Pr->SiS_PanelType09_2;    break;
     	case 26: PanelDesPtr = SiS_Pr->SiS_PanelType0a_2;    break;
     	case 27: PanelDesPtr = SiS_Pr->SiS_PanelType0b_2;    break;
     	case 28: PanelDesPtr = SiS_Pr->SiS_PanelType0c_2;    break;
     	case 29: PanelDesPtr = SiS_Pr->SiS_PanelType0d_2;    break;
     	case 30: PanelDesPtr = SiS_Pr->SiS_PanelType0e_2;    break;
     	case 31: PanelDesPtr = SiS_Pr->SiS_PanelType0f_2;    break;
	case 32: PanelDesPtr = SiS_Pr->SiS_PanelTypeNS_1;    break;    /* pass 1:1 */
	case 33: PanelDesPtr = SiS_Pr->SiS_PanelTypeNS_2;    break;
     	case 50: PanelDesPtr = SiS_Pr->SiS_CHTVUNTSCDesData; break;    /* TV */
     	case 51: PanelDesPtr = SiS_Pr->SiS_CHTVONTSCDesData; break;
     	case 52: PanelDesPtr = SiS_Pr->SiS_CHTVUPALDesData;  break;
     	case 53: PanelDesPtr = SiS_Pr->SiS_CHTVOPALDesData;  break;
	default: return;
     }

     SiS_Pr->SiS_LCDHDES = (PanelDesPtr+ResIndex)->LCDHDES;
     SiS_Pr->SiS_LCDVDES = (PanelDesPtr+ResIndex)->LCDVDES;

     if((ModeNo <= 0x13) && (SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
        modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
        if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
	   if(!(modeflag & HalfDCLK)) SiS_Pr->SiS_LCDHDES = 632;
        } else if(!(SiS_Pr->SiS_SetFlag & SetDOSMode)) {
           if(SiS_Pr->SiS_LCDResInfo != Panel_1280x1024) {
              if(SiS_Pr->SiS_LCDResInfo >= Panel_1024x768) {
	         if(HwInfo->jChipType < SIS_315H) {
	            if(!(modeflag & HalfDCLK)) SiS_Pr->SiS_LCDHDES = 320;
	         } else {
	            if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)  SiS_Pr->SiS_LCDHDES = 480;
                    if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) SiS_Pr->SiS_LCDHDES = 804;
		    if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) SiS_Pr->SiS_LCDHDES = 704;
                    if(!(modeflag & HalfDCLK)) {
                       SiS_Pr->SiS_LCDHDES = 320;
	               if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) SiS_Pr->SiS_LCDHDES = 632;
		       if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) SiS_Pr->SiS_LCDHDES = 542;
                    }
                 }
              }
           }
        }
     }
  }
}

/*********************************************/
/*           DISABLE VIDEO BRIDGE            */
/*********************************************/

/* NEVER use any variables (VBInfo), this will be called
 * from outside the context of modeswitch!
 * MUST call getVBType before calling this
 */
void
SiS_DisableBridge(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
#ifdef SIS315H
  USHORT tempah,pushax=0,modenum;
#endif
  USHORT temp=0;

  if(SiS_Pr->SiS_VBType & VB_SISVB) {

      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {   /* ===== For 30xB/LV ===== */

        if(HwInfo->jChipType < SIS_315H) {

#ifdef SIS300	   /* 300 series */

           if(HwInfo->jChipType == SIS_300) {  /* For 300+301LV (A907) */

	      if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	         if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	            SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFE);
		    SiS_PanelDelay(SiS_Pr, HwInfo, 3);
		 }
	      }
	      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,0x3f);
	      SiS_ShortDelay(SiS_Pr,1);
	      SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);
	      SiS_DisplayOff(SiS_Pr);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	      if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	         if( (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ||
	             (!(SiS_CR36BIOSWord23d(SiS_Pr, HwInfo))) ) {
	            SiS_PanelDelay(SiS_Pr, HwInfo, 2);
                    SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFD);
		 }
	      }

	   } else {

	      if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	         SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	         SiS_PanelDelay(SiS_Pr, HwInfo, 3);
	      }
	      if(SiS_Is301B(SiS_Pr)) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,0x3f);
	         SiS_ShortDelay(SiS_Pr,1);
	      }
	      SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);
	      SiS_DisplayOff(SiS_Pr);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	      SiS_UnLockCRT2(SiS_Pr,HwInfo);
	      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x80);
	      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40);
	      if( (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ||
	          (!(SiS_CR36BIOSWord23d(SiS_Pr, HwInfo))) ) {
	         SiS_PanelDelay(SiS_Pr, HwInfo, 2);
                 SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x04);
	      }
	   }

#endif  /* SIS300 */

        } else {

#ifdef SIS315H	   /* 315 series */

           if(IS_SIS550650740660) {		/* 550, 650, 740, 660 */

	      modenum = SiS_GetReg(SiS_Pr->SiS_P3d4,0x34) & 0x7f;

              if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {			/* LV */
#ifdef SET_EMI
	         if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
		    if(SiS_Pr->SiS_CustomT != CUT_CLEVO1400) {
	               SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
		    }
		 }
#endif
		 if( (modenum <= 0x13) ||
		     (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
		     (SiS_IsVAMode(SiS_Pr,HwInfo)) ) {
	     	    SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFE);
		    if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		       (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
		       SiS_PanelDelay(SiS_Pr, HwInfo, 3);
		    }
	         }

		 if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
		    (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
		    SiS_DDC2Delay(SiS_Pr,0xff00);
		    SiS_DDC2Delay(SiS_Pr,0xe000);

	            SiS_SetRegByte(SiS_Pr->SiS_P3c6,0x00);

                    pushax = SiS_GetReg(SiS_Pr->SiS_P3c4,0x06);

		    if(IS_SIS740) {
		       SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x06,0xE3);
		    }

	            SiS_PanelDelay(SiS_Pr, HwInfo, 3);

		    if(!(SiS_IsNotM650orLater(SiS_Pr, HwInfo))) {
	               tempah = 0xef;
	               if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	                  tempah = 0xf7;
                       }
	               SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x4c,tempah);
	            }
		 }

              } else if(SiS_Pr->SiS_VBType & VB_NoLCD) {			/* B-DH */

	         if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x4c,0xef);
	         }

	      }

	      if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
	         (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,0xef);
	      }

              if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	         (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		 (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
	         tempah = 0x3f;
	         if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	            tempah = 0x7f;
	            if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
		       tempah = 0xbf;
                    }
	         }
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,tempah);
	      }

              if((SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	         ((SiS_Pr->SiS_VBType & VB_SIS301LV302LV) && (modenum <= 0x13))) {

	         if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
		    (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		    (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
		    SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1E,0xDF);
		    SiS_DisplayOff(SiS_Pr);
		    SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
		 } else {
	            SiS_DisplayOff(SiS_Pr);
	            SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	            SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1E,0xDF);
		    if((SiS_Pr->SiS_VBType & VB_SIS301LV302LV) && (modenum <= 0x13)) {
		       SiS_DisplayOff(SiS_Pr);
	               SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	               SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	               SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	               temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
                       SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	               SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	               SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,temp);
		    }
		 }

	      } else {

	         if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
		    (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		    (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
		    if(!(SiS_IsDualEdge(SiS_Pr,HwInfo))) {
		       SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xdf);
		       SiS_DisplayOff(SiS_Pr);
		    }
		    SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
		 } else {
                    SiS_DisplayOff(SiS_Pr);
	            SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	            SiS_PanelDelay(SiS_Pr, HwInfo, 2);
		 }

		 SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	         temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
                 SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	         SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,temp);

	      }

	      if((SiS_Pr->SiS_VBType & VB_SIS301LV302LV) &&
	         (SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
		 (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {

		 SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,~0x10);

	         tempah = 0x3f;
	         if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	            tempah = 0x7f;
	            if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
		       tempah = 0xbf;
                    }
	         }
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,tempah);

		 if(SiS_IsNotM650orLater(SiS_Pr,HwInfo)) {
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
		 }

	         if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
	            SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xdf);
	            if(!(SiS_CRT2IsLCD(SiS_Pr,HwInfo))) {
	               if(!(SiS_IsDualEdge(SiS_Pr,HwInfo))) {
		          SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFD);
                       }
                    }
	         }

	         SiS_SetReg(SiS_Pr->SiS_P3c4,0x06,pushax);

		 if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	            if( (SiS_IsVAMode(SiS_Pr, HwInfo)) ||
	                (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
		       SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 20);
		    }
	         }

  	      } else if(SiS_Pr->SiS_VBType & VB_NoLCD) {

	         /* NIL */

	      } else if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	                (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
			(SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {

		 if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	            tempah = 0xef;
	            if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
		       if(modenum > 0x13) {
	                  tempah = 0xf7;
		       }
                    }
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x4c,tempah);
		 }
		 if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		    (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
		    if((SiS_IsVAMode(SiS_Pr,HwInfo)) ||
		       (!(SiS_IsDualEdge(SiS_Pr,HwInfo)))) {
		       if((!(SiS_WeHaveBacklightCtrl(SiS_Pr, HwInfo))) ||
		          (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo)))) {
			  SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	     	          SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFD);
			  SiS_PanelDelay(SiS_Pr, HwInfo, 4);
	               }
		    }
		 }

	      }

	  } else {			/* 315, 330 - all bridge types */

	     if(SiS_Is301B(SiS_Pr)) {
	        tempah = 0x3f;
	        if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	           tempah = 0x7f;
	           if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
		      tempah = 0xbf;
                   }
	        }
	        SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,tempah);
	        if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	           SiS_DisplayOff(SiS_Pr);
		   SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	        }
	     }
	     if( (!(SiS_Is301B(SiS_Pr))) ||
	         (!(SiS_IsVAMode(SiS_Pr,HwInfo))) ) {

 	 	if( (!(SiS_Is301B(SiS_Pr))) ||
		    (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ) {

	           SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);
	           SiS_DisplayOff(SiS_Pr);

		}

                SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);

                SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);

	        temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
                SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,temp);

	     }

	  }    /* 315/330 */

#endif /* SIS315H */

	}

      } else {     /* ============ For 301 ================ */

        if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
           if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	      SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	      SiS_PanelDelay(SiS_Pr, HwInfo, 3);
	   }
#endif
	}

        SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);           /* disable VB */
        SiS_DisplayOff(SiS_Pr);

        if(HwInfo->jChipType >= SIS_315H) {
           SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	}

        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);                /* disable lock mode */

	if(HwInfo->jChipType >= SIS_315H) {
            temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
            SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	    SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
	    SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,temp);
	} else {
#ifdef SIS300
            SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);            /* disable CRT2 */
	    if( (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ||
	        (!(SiS_CR36BIOSWord23d(SiS_Pr,HwInfo))) ) {
		SiS_PanelDelay(SiS_Pr, HwInfo, 2);
		SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x04);
	    }
#endif
	}

      }

  } else {     /* ============ For LVDS =============*/

    if(HwInfo->jChipType < SIS_315H) {

#ifdef SIS300	/* 300 series */

	if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
	   SiS_SetCH700x(SiS_Pr,0x090E);
	}

	if(HwInfo->jChipType == SIS_730) {
	   if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x11) & 0x08)) {
	      SiS_WaitVBRetrace(SiS_Pr,HwInfo);
	   }
	   if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	      SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	      SiS_PanelDelay(SiS_Pr, HwInfo, 3);
	   }
	} else {
	   if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x11) & 0x08)) {
	      if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x40)) {
  	         if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
                    SiS_WaitVBRetrace(SiS_Pr,HwInfo);
		    if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x06) & 0x1c)) {
		       SiS_DisplayOff(SiS_Pr);
	            }
	            SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	            SiS_PanelDelay(SiS_Pr, HwInfo, 3);
                 }
              }
	   }
	}

	SiS_DisplayOff(SiS_Pr);

	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);

	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	SiS_UnLockCRT2(SiS_Pr,HwInfo);
	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x80);
	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40);

	if( (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ||
	    (!(SiS_CR36BIOSWord23d(SiS_Pr,HwInfo))) ) {
	   SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	   SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x04);
	}

#endif  /* SIS300 */

    } else {

#ifdef SIS315H	/* 315 series */

	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {

	   if(HwInfo->jChipType == SIS_740) {
	      temp = SiS_GetCH701x(SiS_Pr,0x61);
	      if(temp < 1) {
	         SiS_SetCH701x(SiS_Pr,0xac76);
	         SiS_SetCH701x(SiS_Pr,0x0066);
	      }

	      if( (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	          (SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwInfo)) ) {
	  	 SiS_SetCH701x(SiS_Pr,0x3e49);
	      }
	   }

	   if( (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	       (SiS_IsVAMode(SiS_Pr,HwInfo)) ) {
	      SiS_Chrontel701xBLOff(SiS_Pr);
	      SiS_Chrontel701xOff(SiS_Pr,HwInfo);
	   }

	   if(HwInfo->jChipType != SIS_740) {
	      if( (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	          (SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwInfo)) ) {
	   	 SiS_SetCH701x(SiS_Pr,0x0149);
  	      } 
	   }

	}

	if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	   SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	   SiS_PanelDelay(SiS_Pr, HwInfo, 3);
	}

	if( (SiS_Pr->SiS_IF_DEF_CH70xx == 0)   ||
	    (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	    (!(SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwInfo))) ) {
	   SiS_DisplayOff(SiS_Pr);
	}

	if( (SiS_Pr->SiS_IF_DEF_CH70xx == 0)   ||
	    (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	    (!(SiS_IsVAMode(SiS_Pr,HwInfo))) ) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	}

	if(HwInfo->jChipType == SIS_740) {
	   SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
	}

	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);

	if( (SiS_Pr->SiS_IF_DEF_CH70xx == 0)   ||
	    (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	    (!(SiS_IsVAMode(SiS_Pr,HwInfo))) ) {
	   SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	}

	if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	   if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xdf);
	      if(HwInfo->jChipType == SIS_550) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xbf);
	         SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xef);
	      }
	   }
	} else {
	   if(HwInfo->jChipType == SIS_740) {
	      if(SiS_IsLCDOrLCDA(SiS_Pr,HwInfo)) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xdf);
	      }
	   } else if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xdf);
	   }
	}

	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	   if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	      /* SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xff); */
	   } else {
	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	   }
	}

	SiS_UnLockCRT2(SiS_Pr,HwInfo);

	if(HwInfo->jChipType == SIS_550) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x80); /* DirectDVD PAL?*/
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40); /* VB clock / 4 ? */
	} else if( (SiS_Pr->SiS_IF_DEF_CH70xx == 0)   ||
	           (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
		   (!(SiS_IsVAMode(SiS_Pr,HwInfo))) ) {
	   SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0xf7);
	}

        if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	   if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	      if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	 	 SiS_PanelDelay(SiS_Pr, HwInfo, 2);
		 SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x04);
	      }
	   }
        }

#endif  /* SIS315H */

    }  /* 315 series */

  }  /* LVDS */

}

/*********************************************/
/*            ENABLE VIDEO BRIDGE            */
/*********************************************/

/* NEVER use any variables (VBInfo), this will be called
 * from outside the context of a mode switch!
 * MUST call getVBType before calling this
 */
void
SiS_EnableBridge(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT temp=0,tempah;
#ifdef SIS315H
  USHORT temp1,pushax=0;
  BOOLEAN delaylong = FALSE;
#endif


  if(SiS_Pr->SiS_VBType & VB_SISVB) {

    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {   /* ====== For 301B et al  ====== */

      if(HwInfo->jChipType < SIS_315H) {

#ifdef SIS300     /* 300 series */

         if(HwInfo->jChipType == SIS_300) {

	    if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	       if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	          SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
	          if(!(SiS_CR36BIOSWord23d(SiS_Pr, HwInfo))) {
	             SiS_PanelDelay(SiS_Pr, HwInfo, 0);
	          }
	       }
	    }
	    temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;             /* lock mode */
            if(SiS_BridgeInSlave(SiS_Pr)) {
               tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
               if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
            }
            SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
	    SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1F,0x20);        /* enable VB processor */
	    SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,0xC0);
	    SiS_DisplayOn(SiS_Pr);
	    if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	       if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	          if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x10)) {
		     if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
		        SiS_PanelDelay(SiS_Pr, HwInfo, 1);
                     }
		     SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
	 	  }
	       }
	    }

	 } else {

	    if((SiS_Pr->SiS_VBType & VB_NoLCD) &&
	       (SiS_CRT2IsLCD(SiS_Pr, HwInfo))) {
	       /* This is only for LCD output on 301B-DH via LVDS */
	       SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x00);
	       if(!(SiS_CR36BIOSWord23d(SiS_Pr,HwInfo))) {
	          SiS_PanelDelay(SiS_Pr, HwInfo, 0);
	       }
	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);   /* Enable CRT2 */
               SiS_DisplayOn(SiS_Pr);
	       SiS_UnLockCRT2(SiS_Pr,HwInfo);
	       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x02,0xBF);
	       if(SiS_BridgeInSlave(SiS_Pr)) {
      		  SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x01,0x1F);
      	       } else {
      		  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x01,0x1F,0x40);
               }
	       if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x40)) {
	           if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x10)) {
		       if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
		           SiS_PanelDelay(SiS_Pr, HwInfo, 1);
                       }
		       SiS_WaitVBRetrace(SiS_Pr,HwInfo);
                       SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x00);
                   }
	       }
            } else {
	       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;             /* lock mode */
               if(SiS_BridgeInSlave(SiS_Pr)) {
                  tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
                  if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
               }
               SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
	       SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1F,0x20);        /* enable VB processor */
	       SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,0xC0);
	       SiS_DisplayOn(SiS_Pr);
	    }

         }
#endif /* SIS300 */

      } else {

#ifdef SIS315H    /* 315 series */

	 if(IS_SIS550650740660) {		/* 550, 650, 740, 660 */

	    UCHAR r30=0, r31=0, r32=0, r33=0, cr36=0;

	    if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {

	       if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
	          (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
	          SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,0xef);
#ifdef SET_EMI
		  if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	             SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
		  }
#endif
	       }

               if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	          tempah = 0x10;
		  if(SiS_LCDAEnabled(SiS_Pr, HwInfo)) {
		     if(SiS_TVEnabled(SiS_Pr, HwInfo)) tempah = 0x18;
		     else 			       tempah = 0x08;
		  }
		  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x4c,tempah);
	       }

	       if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
	          (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
	          SiS_SetRegByte(SiS_Pr->SiS_P3c6,0x00);
	          SiS_DisplayOff(SiS_Pr);
	          pushax = SiS_GetReg(SiS_Pr->SiS_P3c4,0x06);
	          if(IS_SIS740) {
	             SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x06,0xE3);
	          }
	       }

	       if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	           (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
                  if(!(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x26) & 0x02)) {
		     if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
		        (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
		        SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 2);
			SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
			if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
			   SiS_GenericDelay(SiS_Pr, 0x4500);
			}
	                SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 2);
		     } else {
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
			SiS_PanelDelay(SiS_Pr, HwInfo, 0);
		     }
	          }
	       }

               if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
	          (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
	          if(!(SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) & 0x40)) {
                     SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 10);
		     delaylong = TRUE;
		  }
	       }

	    } else if(SiS_Pr->SiS_VBType & VB_NoLCD) {

	       if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	          SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x4c,0x10);
	       }

  	    } else if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {

	       if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	          tempah = 0x10;
		  if(SiS_LCDAEnabled(SiS_Pr, HwInfo)) {
		     if(SiS_TVEnabled(SiS_Pr, HwInfo)) tempah = 0x18;
		     else 			       tempah = 0x08;
		  }
		  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x4c,tempah);
	       }
	       
	    }

	    if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
               temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;
	       if(SiS_BridgeInSlave(SiS_Pr)) {
                  tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
                  if(!(tempah & SetCRT2ToRAMDAC)) {
		     if(!(SiS_LCDAEnabled(SiS_Pr, HwInfo))) temp |= 0x20;
		  }
               }
               SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);

	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);                   /* enable CRT2 */
	       
	       if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	          (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		  (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
	          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
		  temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2e);
		  if(!(temp & 0x80)) {
		     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x80);
		  }
	       } else {
	          SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	       }
	    } else {
	       SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x20);
	    }

	    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1f,0x20);

	    if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	       (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
	       (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
	       temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2e);
	       if(!(temp & 0x80)) {
		  SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x80);
	       }
	    }

	    tempah = 0xc0;
	    if(SiS_IsDualEdge(SiS_Pr, HwInfo)) {
	       tempah = 0x80;
	       if(!(SiS_IsVAMode(SiS_Pr, HwInfo))) {
	          tempah = 0x40;
               }
	    }
            SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,tempah);

	    if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	       (((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
	         (SiS_Pr->SiS_CustomT == CUT_CLEVO1400))     &&
	        (!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))))) {
               SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
	    }

	    if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {

	       if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
	          (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
	          SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	       }
#ifdef COMPAQ_HACK
	       if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
	          SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	       }
#endif

	       SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1f,0x10);

	       if(SiS_Pr->SiS_CustomT != CUT_CLEVO1400) {
#ifdef SET_EMI
	          if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	             SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
		  }
#endif
	          SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x27,0x0c);
#ifdef SET_EMI
	          if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {

		     cr36 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36);

		     /*                                              (P4_30|0x40)  */
		     /* Compal 1400x1050: 0x05, 0x60, 0x00                YES  (1.10.7w;  CR36=69)      */
		     /* Compal 1400x1050: 0x0d, 0x70, 0x40                YES  (1.10.7x;  CR36=69)      */
		     /* Acer   1280x1024: 0x12, 0xd0, 0x6b                NO   (1.10.9k;  CR36=73)      */
		     /* Compaq 1280x1024: 0x0d, 0x70, 0x6b                YES  (1.12.04b; CR36=03)      */
		     /* Clevo   1024x768: 0x05, 0x60, 0x33                NO   (1.10.8e;  CR36=12, DL!) */
		     /* Clevo   1024x768: 0x0d, 0x70, 0x40 (if type == 3) YES  (1.10.8y;  CR36=?2)      */
		     /* Clevo   1024x768: 0x05, 0x60, 0x33 (if type != 3) YES  (1.10.8y;  CR36=?2)      */
		     /* Asus    1024x768: ?                                ?   (1.10.8o;  CR36=?2)      */
		     /* Asus    1024x768: 0x08, 0x10, 0x3c (problematic)  YES  (1.10.8q;  CR36=22)      */

		     if(SiS_Pr->HaveEMI) {
		        r30 = SiS_Pr->EMI_30;
			r31 = SiS_Pr->EMI_31;
			r32 = SiS_Pr->EMI_32;
			r33 = SiS_Pr->EMI_33;
		     } else {
		        r30 = 0;
		     }

		     /* EMI_30 is read at driver start; however, the BIOS sets this
		      * (if it is used) only if the LCD is in use. In case we caught
		      * the machine while on TV output, this bit is not set and we
		      * don't know if it should be set - hence our detection is wrong.
		      * Work-around this here:
		      */

		     if((!SiS_Pr->HaveEMI) || (!SiS_Pr->HaveEMILCD)) {
		        if((cr36 & 0x0f) == 0x02) {			/* 1024x768 */
		           r30 |= 0x40;
			   if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
			      r30 &= ~0x40;
			   }
		        } else if((cr36 & 0x0f) == 0x03) {		/* 1280x1024 */
		           r30 |= 0x40;
			   if(SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) {
			      r30 &= ~0x40;
			   }
		        } else if((cr36 & 0x0f) == 0x09) {		/* 1400x1050 */
		           r30 |= 0x40;
		        } else if((cr36 & 0x0f) == 0x0b) {		/* 1600x1200 - unknown */
		           r30 |= 0x40;
		        }
                     }

		     if(!SiS_Pr->HaveEMI) {
		        if((cr36 & 0x0f) == 0x02) {
			   if((cr36 & 0xf0) == 0x30) {
			      r31 = 0x0d; r32 = 0x70; r33 = 0x40;
			   } else {
			      r31 = 0x05; r32 = 0x60; r33 = 0x33;
			   }
		        } else if((cr36 & 0x0f) == 0x03) {
			   if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
			      r31 = 0x0d; r32 = 0x70; r33 = 0x6b;
			   } else {
			      r31 = 0x12; r32 = 0xd0; r33 = 0x6b;
			   }
			} else if((cr36 & 0x0f) == 0x09) {
			   if(SiS_Pr->SiS_CustomT == CUT_COMPAL1400_2) {
			      r31 = 0x0d; r32 = 0x70; r33 = 0x40;  /* BIOS values */
			   } else {
			      r31 = 0x05; r32 = 0x60; r33 = 0x00;
			   }
			} else {
			   r31 = 0x05; r32 = 0x60; r33 = 0x00;
			}
		     }

		     /* BIOS values don't work so well sometimes */
		     if(!SiS_Pr->OverruleEMI) {
#ifdef COMPAL_HACK
		        if(SiS_Pr->SiS_CustomT == CUT_COMPAL1400_2) {
		           if((cr36 & 0x0f) == 0x09) {
			      r30 = 0x60; r31 = 0x05; r32 = 0x60; r33 = 0x00;
			   }
 		        }
#endif
#ifdef COMPAQ_HACK
		        if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
		           if((cr36 & 0x0f) == 0x03) {
			      r30 = 0x20; r31 = 0x12; r32 = 0xd0; r33 = 0x6b;     /* rev 1 */
			   }
			}
#endif
#ifdef ASUS_HACK
		        if(SiS_Pr->SiS_CustomT == CUT_ASUSA2H_2) {
		           if((cr36 & 0x0f) == 0x02) {
			      /* r30 = 0x60; r31 = 0x05; r32 = 0x60; r33 = 0x33;  */   /* rev 2 */
			      /* r30 = 0x20; r31 = 0x05; r32 = 0x60; r33 = 0x33;  */   /* rev 3 */
			      /* r30 = 0x60; r31 = 0x0d; r32 = 0x70; r33 = 0x40;  */   /* rev 4 */
			      /* r30 = 0x20; r31 = 0x0d; r32 = 0x70; r33 = 0x40;  */   /* rev 5 */
			   }
			}
#endif
 		     }
		     if(!(SiS_Pr->OverruleEMI && (!r30) && (!r31) && (!r32) && (!r33))) {
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x30,0x20);
		     }
		     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x31,r31);
		     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x32,r32);
		     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x33,r33);
		     if(!(SiS_Pr->OverruleEMI && (!r30) && (!r31) && (!r32) && (!r33))) {
		        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x10);
		     } else {
		        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x00);
		     }
		     if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	                 (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
	                if(r30 & 0x40) {
		           SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 5);
			   if(delaylong) {
			      SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 5);
			      delaylong = FALSE;
			   }
			   SiS_WaitVBRetrace(SiS_Pr,HwInfo);
			   if(SiS_Pr->SiS_CustomT == CUT_ASUSA2H_2) {
			      SiS_GenericDelay(SiS_Pr, 0x500);
			   }
	                   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x30,0x40);
	                }
		     }
		  }
#endif
	       }

	       if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {

	          if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	              (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
		     SiS_DisplayOn(SiS_Pr);
		     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
		     SiS_WaitVBRetrace(SiS_Pr, HwInfo);
		     SiS_PanelDelay(SiS_Pr, HwInfo, 3);
		     if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
	  	     }
		  }

	       } else if(SiS_Pr->SiS_CustomT == CUT_CLEVO1400) {

	          if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	             if( (SiS_IsVAMode(SiS_Pr, HwInfo)) ||
	                 (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
		        SiS_DisplayOn(SiS_Pr);
		        SiS_PanelDelay(SiS_Pr, HwInfo, 1);
		        SiS_WaitVBRetrace(SiS_Pr,HwInfo);
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
		     }
		  }

	       } else {

	          SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x80);
	          if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	             if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	                 ((SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ) {
		        SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 10);
		        if(delaylong) {
			   SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 10);
		        }
                        SiS_WaitVBRetrace(SiS_Pr,HwInfo);
			if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
			   SiS_GenericDelay(SiS_Pr, 0x500);
			}
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
	             }
	          }

	          SiS_SetReg(SiS_Pr->SiS_P3c4,0x06,pushax);
	          SiS_DisplayOn(SiS_Pr);
	          SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xff);

	          if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	             SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
	          }

	       }

	    }

	 } else {			/* 315, 330 */

	    if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
	       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;
	       if(SiS_BridgeInSlave(SiS_Pr)) {
                  tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
                  if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
               }
               SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);

	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);                   /* enable CRT2 */

	       temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2E);
               if(!(temp & 0x80))
                  SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);
            }

	    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1f,0x20);

	    if(SiS_Is301B(SiS_Pr)) {

	       temp=SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2E);
               if(!(temp & 0x80))
                  SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);

	       tempah = 0xc0;
	       if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	          tempah = 0x80;
	          if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
	             tempah = 0x40;
                  }
	       }
               SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,tempah);

	       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);

	    } else {

	       SiS_VBLongWait(SiS_Pr);
               SiS_DisplayOn(SiS_Pr);
	       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7F);
               SiS_VBLongWait(SiS_Pr);

	    }

	 }   /* 315, 330 */

#endif /* SIS315H */

      }

    } else {	/* ============  For 301 ================ */

       if(HwInfo->jChipType < SIS_315H) {
          if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
             SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x00);
	     SiS_PanelDelay(SiS_Pr, HwInfo, 0);
	  }
       }

       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;          /* lock mode */
       if(SiS_BridgeInSlave(SiS_Pr)) {
          tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
          if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
       }
       SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);

       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);                  /* enable CRT2 */

       if(HwInfo->jChipType >= SIS_315H) {
          temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2E);
          if(!(temp & 0x80)) {
             SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);         /* BVBDOENABLE=1 */
	  }
       }

       SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1F,0x20);     /* enable VB processor */

       SiS_VBLongWait(SiS_Pr);
       SiS_DisplayOn(SiS_Pr);
       if(HwInfo->jChipType >= SIS_315H) {
          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
       }
       SiS_VBLongWait(SiS_Pr);

       if(HwInfo->jChipType < SIS_315H) {
          if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
             SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x00);
	  }
       }

    }

  } else {   /* =================== For LVDS ================== */

    if(HwInfo->jChipType < SIS_315H) {

#ifdef SIS300    /* 300 series */

       if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
          if(HwInfo->jChipType == SIS_730) {
	     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
	     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
	     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
	  }
          SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x00);
	  if(!(SiS_CR36BIOSWord23d(SiS_Pr,HwInfo))) {
	     SiS_PanelDelay(SiS_Pr, HwInfo, 0);
	  }
       }

       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
       SiS_DisplayOn(SiS_Pr);
       SiS_UnLockCRT2(SiS_Pr,HwInfo);
       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x02,0xBF);
       if(SiS_BridgeInSlave(SiS_Pr)) {
      	  SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x01,0x1F);
       } else {
      	  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x01,0x1F,0x40);
       }

       if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
          if(!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) {
	     SiS_WaitVBRetrace(SiS_Pr, HwInfo);
	     SiS_SetCH700x(SiS_Pr,0x0B0E);
          }
       }

       if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
          if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x40)) {
             if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x10)) {
	        if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	 	   SiS_PanelDelay(SiS_Pr, HwInfo, 1);
        	   SiS_PanelDelay(SiS_Pr, HwInfo, 1);
	        }
	        SiS_WaitVBRetrace(SiS_Pr, HwInfo);
                SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x00);
             }
	  }
       }

#endif  /* SIS300 */

    } else {

#ifdef SIS315H    /* 315 series */

       if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	  if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	     SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x00);
	     SiS_PanelDelay(SiS_Pr, HwInfo, 0);
          }
       }

       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
       SiS_UnLockCRT2(SiS_Pr,HwInfo);

       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0xf7);

       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
          temp = SiS_GetCH701x(SiS_Pr,0x66);
	  temp &= 0x20;
	  SiS_Chrontel701xBLOff(SiS_Pr);
       }

       if(HwInfo->jChipType != SIS_550) {
          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
       }

       if(HwInfo->jChipType == SIS_740) {
          if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
             if(SiS_IsLCDOrLCDA(SiS_Pr, HwInfo)) {
	   	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x20);
	     }
	  }
       }

       temp1 = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2E);
       if(!(temp1 & 0x80)) {
          SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);
       }

       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
          if(temp) {
	     SiS_Chrontel701xBLOn(SiS_Pr, HwInfo);
	  }
       }

       if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
          if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x20);
	     if(HwInfo->jChipType == SIS_550) {
		SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x40);
		SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x10);
	     }
	  }
       } else if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
          if(HwInfo->jChipType != SIS_740) {
             SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x20);
	  }
       }

       if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
       }

       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
       	  if(SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwInfo)) {
             SiS_Chrontel701xOn(SiS_Pr,HwInfo);
          }
          if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	      (SiS_IsLCDOrLCDA(SiS_Pr,HwInfo)) ) {
             SiS_ChrontelDoSomething1(SiS_Pr,HwInfo);
          }
       }

       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
       	  if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
 	     if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	         (SiS_IsLCDOrLCDA(SiS_Pr,HwInfo)) ) {
	     	SiS_Chrontel701xBLOn(SiS_Pr, HwInfo);
	     	SiS_ChrontelInitTVVSync(SiS_Pr,HwInfo);
             }
       	  }
       } else if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
       	  if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	     if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
		SiS_PanelDelay(SiS_Pr, HwInfo, 1);
		SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x00);
	     }
	  }
       }

#endif  /* SIS315H */

    } /* 310 series */

  }  /* LVDS */

}

/*********************************************/
/*         SET PART 1 REGISTER GROUP         */
/*********************************************/

/* Set CRT2 OFFSET / PITCH */
static void
SiS_SetCRT2Offset(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
	          USHORT RRTI, PSIS_HW_INFO HwInfo)
{
  USHORT offset;
  UCHAR temp;

  if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) return;

  offset = SiS_GetOffset(SiS_Pr,ModeNo,ModeIdIndex,RRTI,HwInfo);

  if((SiS_Pr->SiS_LCDResInfo == Panel_640x480_2) ||
     (SiS_Pr->SiS_LCDResInfo == Panel_640x480_3)) {
     offset >>= 1;
  }

  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x07,(offset & 0xFF));
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x09,(offset >> 8));
  temp = (UCHAR)(((offset >> 3) & 0xFF) + 1);
  if(offset % 8) temp++;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x03,temp);
}

/* Set CRT2 sync and PanelLink mode */
static void
SiS_SetCRT2Sync(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT RefreshRateTableIndex,
                PSIS_HW_INFO HwInfo)
{
  USHORT tempah=0,tempbl,infoflag;

  tempbl = 0xC0;

  if(SiS_Pr->UseCustomMode) {
     infoflag = SiS_Pr->CInfoFlag;
  } else {
     infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
  }

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {					/* LVDS */

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        tempah = 0;
     } else if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (SiS_Pr->SiS_LCDInfo & LCDSync)) {
        tempah = SiS_Pr->SiS_LCDInfo;
     } else tempah = infoflag >> 8;
     tempah &= 0xC0;
     tempah |= 0x20;
     if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
           (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
	   tempah |= 0xf0;
        }
	if( (SiS_Pr->SiS_IF_DEF_FSTN) ||
            (SiS_Pr->SiS_IF_DEF_DSTN) ||
            (SiS_Pr->SiS_IF_DEF_TRUMPION) ||
            (SiS_Pr->SiS_CustomT == CUT_PANEL848) ) {
           tempah |= 0x30;
        }
     }
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        if(HwInfo->jChipType >= SIS_315H) {
           tempah >>= 3;
	   tempah &= 0x18;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xE7,tempah);
	   /* Don't care about 12/18/24 bit mode - TV is via VGA, not PL */
        } else {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,0xe0);
        }
     } else {
        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
     }

  } else if(SiS_Pr->SiS_VBType & VB_SISVB) {

     if(HwInfo->jChipType < SIS_315H) {

#ifdef SIS300  /* ---- 300 series --- */

        if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {			/* 630 - 301B(-DH) */

	   tempah = infoflag >> 8;
	   tempbl = 0;
           if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	      if(SiS_Pr->SiS_LCDInfo & LCDSync) {
	         tempah = SiS_Pr->SiS_LCDInfo;
		 tempbl = (tempah >> 6) & 0x03;
              }
           }
           tempah &= 0xC0;
           tempah |= 0x20;
           if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
  	   tempah |= 0xc0;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
	   if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (!(SiS_Pr->SiS_VBType & VB_NoLCD))) {
	      SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xf0,tempbl);
	   }

        } else {							/* 630 - 301 */

           tempah = infoflag >> 8;
           tempah &= 0xC0;
           tempah |= 0x20;
	   if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);

        }

#endif /* SIS300 */

     } else {

#ifdef SIS315H  /* ------- 315 series ------ */

        if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {	  		/* 315 - LVDS */

	   tempbl = 0;
	   if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) &&
	      (SiS_Pr->SiS_LCDResInfo == Panel_1280x1024)) {
	      tempah = infoflag >> 8;
	      if(SiS_Pr->SiS_LCDInfo & LCDSync) {
	        tempbl = ((SiS_Pr->SiS_LCDInfo & 0xc0) >> 6);
	      }
	   } else if((SiS_Pr->SiS_CustomT == CUT_CLEVO1400)  &&
	             (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050)) {
       	      tempah = infoflag >> 8;
	      tempbl = 0x03;
	   } else {
              tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
	      tempbl = (tempah >> 6) & 0x03;
	      tempbl |= 0x08;
	      if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempbl |= 0x04;
	   }
	   tempah &= 0xC0;
           tempah |= 0x20;
           if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)   tempah |= 0xc0;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
	   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	         SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xf0,tempbl);
	      }
	   }

        } else {							/* 315 - TMDS */

           tempah = tempbl = infoflag >> 8;
	   if(!SiS_Pr->UseCustomMode) {
	      tempbl = 0;
	      if((SiS_Pr->SiS_VBType & VB_SIS301C) && (SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
	         if(ModeNo <= 0x13) {
	            tempah = SiS_GetRegByte((SiS_Pr->SiS_P3ca+0x02));
  	         }
	      }
	      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
	         if(SiS_Pr->SiS_LCDInfo & LCDSync) {
	            tempah = SiS_Pr->SiS_LCDInfo;
		    tempbl = (tempah >> 6) & 0x03;
	         }
	      }
	   }
	   tempah &= 0xC0;
           tempah |= 0x20;
           if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
	   if(SiS_Pr->SiS_VBType & VB_NoLCD) {
	      /* Imitate BIOS bug */
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)  tempah |= 0xc0;
	   }
	   if((SiS_Pr->SiS_VBType & VB_SIS301C) && (SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
	      tempah >>= 3;
	      tempah &= 0x18;
	      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xe7,tempah);
	   } else {
              SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
	      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	         if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	            SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xf0,tempbl);
		 }
	      }
	   }

        }
#endif  /* SIS315H */
      }
   }
}

/* Set CRT2 FIFO on 300/630/730 */
#ifdef SIS300
static void
SiS_SetCRT2FIFO_300(SiS_Private *SiS_Pr,USHORT ModeNo,
                    PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
  USHORT temp,index;
  USHORT modeidindex,refreshratetableindex;
  USHORT VCLK=0,MCLK,colorth=0,data2=0;
  USHORT tempal, tempah, tempbx, tempcl, tempax;
  USHORT CRT1ModeNo,CRT2ModeNo;
  USHORT SelectRate_backup;
  ULONG  data,eax;
  const UCHAR  LatencyFactor[] = {
  	97, 88, 86, 79, 77, 00,       /*; 64  bit    BQ=2   */
        00, 87, 85, 78, 76, 54,       /*; 64  bit    BQ=1   */
        97, 88, 86, 79, 77, 00,       /*; 128 bit    BQ=2   */
        00, 79, 77, 70, 68, 48,       /*; 128 bit    BQ=1   */
        80, 72, 69, 63, 61, 00,       /*; 64  bit    BQ=2   */
        00, 70, 68, 61, 59, 37,       /*; 64  bit    BQ=1   */
        86, 77, 75, 68, 66, 00,       /*; 128 bit    BQ=2   */
        00, 68, 66, 59, 57, 37        /*; 128 bit    BQ=1   */
  };
  const UCHAR  LatencyFactor730[] = {
         69, 63, 61,
	 86, 79, 77,
	103, 96, 94,
	120,113,111,
	137,130,128,    /* <-- last entry, data below */
	137,130,128,	/* to avoid using illegal values */
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
  };
  const UCHAR ThLowB[]   = {
  	81, 4, 72, 6, 88, 8,120,12,
        55, 4, 54, 6, 66, 8, 90,12,
        42, 4, 45, 6, 55, 8, 75,12
  };
  const UCHAR ThTiming[] = {
  	1, 2, 2, 3, 0, 1, 1, 2
  };

  SelectRate_backup = SiS_Pr->SiS_SelectCRT2Rate;

  if(!SiS_Pr->CRT1UsesCustomMode) {

     CRT1ModeNo = SiS_Pr->SiS_CRT1Mode;                                 /* get CRT1 ModeNo */
     SiS_SearchModeID(SiS_Pr, &CRT1ModeNo, &modeidindex);
     SiS_Pr->SiS_SetFlag &= (~ProgrammingCRT2);
     SiS_Pr->SiS_SelectCRT2Rate = 0;
     refreshratetableindex = SiS_GetRatePtr(SiS_Pr, CRT1ModeNo, modeidindex, HwInfo);

     if(CRT1ModeNo >= 0x13) {
        index = SiS_Pr->SiS_RefIndex[refreshratetableindex].Ext_CRTVCLK;
        index &= 0x3F;
        VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;			/* Get VCLK */

	colorth = SiS_GetColorDepth(SiS_Pr,CRT1ModeNo,modeidindex); 	/* Get colordepth */
        colorth >>= 1;
        if(!colorth) colorth++;
     }

  } else {

     CRT1ModeNo = 0xfe;
     VCLK = SiS_Pr->CSRClock_CRT1;					/* Get VCLK */
     data2 = (SiS_Pr->CModeFlag_CRT1 & ModeInfoFlag) - 2;
     switch(data2) {							/* Get color depth */
        case 0 : colorth = 1; break;
        case 1 : colorth = 1; break;
        case 2 : colorth = 2; break;
        case 3 : colorth = 2; break;
        case 4 : colorth = 3; break;
        case 5 : colorth = 4; break;
        default: colorth = 2;
     }

  }

  if(CRT1ModeNo >= 0x13) {
    if(HwInfo->jChipType == SIS_300) {
       index = SiS_GetReg(SiS_Pr->SiS_P3c4,0x3A);
    } else {
       index = SiS_GetReg(SiS_Pr->SiS_P3c4,0x1A);
    }
    index &= 0x07;
    MCLK = SiS_Pr->SiS_MCLKData_0[index].CLOCK;				/* Get MCLK */

    data2 = (colorth * VCLK) / MCLK;

    temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
    temp = ((temp & 0x00FF) >> 6) << 1;
    if(temp == 0) temp = 1;
    temp <<= 2;
    temp &= 0xff;

    data2 = temp - data2;

    if((28 * 16) % data2) {
      	data2 = (28 * 16) / data2;
      	data2++;
    } else {
      	data2 = (28 * 16) / data2;
    }

    if(HwInfo->jChipType == SIS_300) {

	tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x18);
	tempah &= 0x62;
	tempah >>= 1;
	tempal = tempah;
	tempah >>= 3;
	tempal |= tempah;
	tempal &= 0x07;
	tempcl = ThTiming[tempal];
	tempbx = SiS_GetReg(SiS_Pr->SiS_P3c4,0x16);
	tempbx >>= 6;
	tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
	tempah >>= 4;
	tempah &= 0x0c;
	tempbx |= tempah;
	tempbx <<= 1;
	tempal = ThLowB[tempbx + 1];
	tempal *= tempcl;
	tempal += ThLowB[tempbx];
	data = tempal;

    } else if(HwInfo->jChipType == SIS_730) {

#ifndef LINUX_XF86
       SiS_SetRegLong(0xcf8,0x80000050);
       eax = SiS_GetRegLong(0xcfc);
#else
       eax = pciReadLong(0x00000000, 0x50);
#endif
       tempal = (USHORT)(eax >> 8);
       tempal &= 0x06;
       tempal <<= 5;

#ifndef LINUX_XF86
       SiS_SetRegLong(0xcf8,0x800000A0);
       eax = SiS_GetRegLong(0xcfc);
#else
       eax = pciReadLong(0x00000000, 0xA0);
#endif
       temp = (USHORT)(eax >> 28);
       temp &= 0x0F;
       tempal |= temp;

       tempbx = tempal;   /* BIOS BUG (2.04.5d, 2.04.6a use ah here, which is unset!) */
       tempbx = 0;        /* -- do it like the BIOS anyway... */
       tempax = tempbx;
       tempbx &= 0xc0;
       tempbx >>= 6;
       tempax &= 0x0f;
       tempax *= 3;
       tempbx += tempax;

       data = LatencyFactor730[tempbx];
       data += 15;
       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
       if(!(temp & 0x80)) data += 5;

    } else {

       index = 0;
       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
       if(temp & 0x0080) index += 12;

#ifndef LINUX_XF86
       SiS_SetRegLong(0xcf8,0x800000A0);
       eax = SiS_GetRegLong(0xcfc);
#else
       /* We use pci functions X offers. We use tag 0, because
        * we want to read/write to the host bridge (which is always
        * 00:00.0 on 630, 730 and 540), not the VGA device.
        */
       eax = pciReadLong(0x00000000, 0xA0);
#endif
       temp = (USHORT)(eax >> 24);
       if(!(temp&0x01)) index += 24;

#ifndef LINUX_XF86
       SiS_SetRegLong(0xcf8,0x80000050);
       eax = SiS_GetRegLong(0xcfc);
#else
       eax = pciReadLong(0x00000000, 0x50);
#endif
       temp=(USHORT)(eax >> 24);
       if(temp & 0x01) index += 6;

       temp = (temp & 0x0F) >> 1;
       index += temp;

       data = LatencyFactor[index];
       data += 15;
       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
       if(!(temp & 0x80)) data += 5;
    }

    data += data2;				/* CRT1 Request Period */

    SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
    SiS_Pr->SiS_SelectCRT2Rate = SelectRate_backup;

    if(!SiS_Pr->UseCustomMode) {

       CRT2ModeNo = ModeNo;
       SiS_SearchModeID(SiS_Pr, &CRT2ModeNo, &modeidindex);

       refreshratetableindex = SiS_GetRatePtr(SiS_Pr, CRT2ModeNo, modeidindex, HwInfo);

       index = SiS_GetVCLK2Ptr(SiS_Pr,CRT2ModeNo,modeidindex,
                               refreshratetableindex,HwInfo);
       VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;                /* Get VCLK  */

       if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) || (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
          if(SiS_Pr->SiS_UseROM) {
	     if(ROMAddr[0x220] & 0x01) {
                VCLK = ROMAddr[0x229] | (ROMAddr[0x22a] << 8);
	     }
          }
       }

    } else {

       CRT2ModeNo = 0xfe;
       VCLK = SiS_Pr->CSRClock;					/* Get VCLK */

    }

    colorth = SiS_GetColorDepth(SiS_Pr,CRT2ModeNo,modeidindex); /* Get colordepth */
    colorth >>= 1;
    if(!colorth) colorth++;

    data = data * VCLK * colorth;
    if(data % (MCLK << 4)) {
      	data = data / (MCLK << 4);
      	data++;
    } else {
      	data = data / (MCLK << 4);
    }

    if(data <= 6) data = 6;
    if(data > 0x14) data = 0x14;

    temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x01);
    if(HwInfo->jChipType == SIS_300) {
       if(data <= 0x0f) temp = (temp & (~0x1F)) | 0x13;
       else             temp = (temp & (~0x1F)) | 0x16;
       if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
       	  temp = (temp & (~0x1F)) | 0x13;
       }
    } else {
       if( ( (HwInfo->jChipType == SIS_630) ||
             (HwInfo->jChipType == SIS_730) )  &&
           (HwInfo->jChipRevision >= 0x30) ) /* 630s or 730(s?) */
      {
	  temp = (temp & (~0x1F)) | 0x1b;
      } else {
	  temp = (temp & (~0x1F)) | 0x16;
      }
    }
    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x01,0xe0,temp);

    if( (HwInfo->jChipType == SIS_630) &&
        (HwInfo->jChipRevision >= 0x30) ) /* 630s, NOT 730 */
    {
   	if(data > 0x13) data = 0x13;
    }
    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x02,0xe0,data);

  } else {  /* If mode <= 0x13, we just restore everything */

    SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
    SiS_Pr->SiS_SelectCRT2Rate = SelectRate_backup;

  }
}
#endif

/* Set CRT2 FIFO on 315/330 series */
#ifdef SIS315H
static void
SiS_SetCRT2FIFO_310(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT temp;

  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x01,0x3B);
  temp = 0x04;
  if(HwInfo->jChipType >= SIS_661) {
     if((SiS_GetReg(SiS_Pr->SiS_P3d4,0x5c) & 0xf8) == 0x80) temp = 0x44;
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x02,~0x3f,temp);
}
#endif

static USHORT
SiS_GetVGAHT2(SiS_Private *SiS_Pr)
{
  ULONG tempax,tempbx;

  tempbx = ((SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE) * SiS_Pr->SiS_RVBHCMAX) & 0xFFFF;
  tempax = (SiS_Pr->SiS_VT - SiS_Pr->SiS_VDE) * SiS_Pr->SiS_RVBHCFACT;
  tempax = (tempax * SiS_Pr->SiS_HT) / tempbx;
  return((USHORT) tempax);
}

/* Set Part 1 / SiS bridge slave mode */
static void
SiS_SetGroup1_301(SiS_Private *SiS_Pr, USHORT ModeNo,USHORT ModeIdIndex,
                  PSIS_HW_INFO HwInfo,USHORT RefreshRateTableIndex)
{
  USHORT  push1,push2;
  USHORT  tempax,tempbx,tempcx,temp;
  USHORT  resinfo,modeflag,xres=0;
  unsigned char p1_7, p1_8;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
     xres = SiS_Pr->CHDisplay;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     xres = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes;
  }

  /* The following is only done if bridge is in slave mode: */

  if((HwInfo->jChipType >= SIS_661) && (ModeNo > 0x13)) {
     if(xres >= 1600) {
        SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x31,0x04);
     }
  }

  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x03,0xff);                  /* set MAX HT */

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)  modeflag |= Charx8Dot;

  if(modeflag & Charx8Dot) tempcx = 0x08;
  else                     tempcx = 0x09;

  tempax = SiS_Pr->SiS_VGAHDE;                                 	/* 0x04 Horizontal Display End */
  if(modeflag & HalfDCLK) tempax >>= 1;
  tempax = ((tempax / tempcx) - 1) & 0xff;
  tempbx = tempax;

  temp = tempax;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x04,temp);

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
        temp += 2;
     }
  }
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     if(resinfo == SIS_RI_800x600) temp -= 2;
  }
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x05,temp);                 /* 0x05 Horizontal Display Start */

  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x06,0x03);                 /* 0x06 Horizontal Blank end     */

  tempax = 0xFFFF;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) tempax = SiS_GetVGAHT2(SiS_Pr);
  if(tempax >= SiS_Pr->SiS_VGAHT) tempax = SiS_Pr->SiS_VGAHT;
  if(modeflag & HalfDCLK)         tempax >>= 1;
  tempax = (tempax / tempcx) - 5;
  tempcx = tempax;

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     temp = tempcx - 1;
     if(!(modeflag & HalfDCLK)) {
        temp -= 6;
        if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
           temp -= 2;
           if(ModeNo > 0x13) temp -= 10;
        }
     }
  } else {
     tempcx = (tempcx + tempbx) >> 1;
     temp = (tempcx & 0x00FF) + 2;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        temp--;
        if(!(modeflag & HalfDCLK)) {
           if((modeflag & Charx8Dot)) {
              temp += 4;
              if(SiS_Pr->SiS_VGAHDE >= 800) temp -= 6;
              if(HwInfo->jChipType >= SIS_315H) {
	         if(SiS_Pr->SiS_VGAHDE == 800) temp += 2;
              }
           }
        }
     } else {
        if(!(modeflag & HalfDCLK)) {
           temp -= 4;
           if((SiS_Pr->SiS_LCDResInfo != Panel_1280x960) &&
	      (SiS_Pr->SiS_LCDResInfo != Panel_1600x1200)) {
              if(SiS_Pr->SiS_VGAHDE >= 800) {
                 temp -= 7;
	         if(HwInfo->jChipType < SIS_315H) {
                    if(SiS_Pr->SiS_ModeType == ModeEGA) {
                       if(SiS_Pr->SiS_VGAVDE == 1024) {
                          temp += 15;
                          if(SiS_Pr->SiS_LCDResInfo != Panel_1280x1024)
		  	     temp += 7;
                       }
                    }
	         }
		 if(SiS_Pr->SiS_LCDResInfo != Panel_1400x1050) {
                    if(SiS_Pr->SiS_VGAHDE >= 1280) {
                       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) temp += 28;
		    }
                 }
              }
           }
        }
     }
  }

  p1_7 = temp;
  p1_8 = 0x00;

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
        if(ModeNo <= 0x01) {
	   p1_7 = 0x2a;
	   if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) p1_8 = 0x61;
	   else 	      			p1_8 = 0x41;
	} else if(SiS_Pr->SiS_ModeType == ModeText) {
	   if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) p1_7 = 0x54;
	   else 	    			p1_7 = 0x55;
	   p1_8 = 0x00;
	} else if(ModeNo <= 0x13) {
	   if(modeflag & HalfDCLK) {
	      if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
		 p1_7 = 0x30;
		 p1_8 = 0x03;
	      } else {
	 	 p1_7 = 0x2f;
		 p1_8 = 0x02;
	      }
	   } else {
	      p1_7 = 0x5b;
	      p1_8 = 0x03;
	   }
	} else if( ((HwInfo->jChipType >= SIS_315H) &&
	            ((ModeNo == 0x50) || (ModeNo == 0x56) || (ModeNo == 0x53))) ||
	           ((HwInfo->jChipType < SIS_315H) &&
		    (resinfo == SIS_RI_320x200 || resinfo == SIS_RI_320x240)) ) {
	   if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
	      p1_7 = 0x30,
	      p1_8 = 0x03;
	   } else {
	      p1_7 = 0x2f;
	      p1_8 = 0x03;
	   }
        }
     }
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
     if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p|TVSetYPbPr750p)) {
        p1_7 = 0x63;
	if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) p1_7 = 0x55;
     }
     if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
        if(!(modeflag & HalfDCLK)) {
	   p1_7 = 0xb2;
	   if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
	      p1_7 = 0xab;
	   }
	}
     } else {
        if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) {
	   if(modeflag & HalfDCLK) p1_7 = 0x30;
	}
     }
  }

  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x07,p1_7);			/* 0x07 Horizontal Retrace Start */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x08,p1_8);			/* 0x08 Horizontal Retrace End   */

  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x03);                	/* 0x18 SR08 (FIFO Threshold?)   */

  SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x19,0xF0);

  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x09,0xFF);                	/* 0x09 Set Max VT    */

  tempcx = 0x121;
  tempbx = SiS_Pr->SiS_VGAVDE;                               	/* 0x0E Vertical Display End */
  if     (tempbx == 357) tempbx = 350;
  else if(tempbx == 360) tempbx = 350;
  else if(tempbx == 375) tempbx = 350;
  else if(tempbx == 405) tempbx = 400;
  else if(tempbx == 420) tempbx = 400;
  else if(tempbx == 525) tempbx = 480;
  push2 = tempbx;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
      	if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
           if     (tempbx == 350) tempbx += 5;
           else if(tempbx == 480) tempbx += 5;
      	}
     }
  }
  tempbx -= 2;
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x10,temp);        		/* 0x10 vertical Blank Start */

  tempbx = push2;
  tempbx--;
  temp = tempbx & 0x00FF;
#if 0
  /* Missing code from 630/301B 2.04.5a and 650/302LV 1.10.6s (calles int 2f) */
  if(xxx()) {
      if(temp == 0xdf) temp = 0xda;
  }
#endif
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0E,temp);

  temp = 0;
  if(modeflag & DoubleScanMode) temp |= 0x80;
  if(HwInfo->jChipType >= SIS_661) {
     if(tempbx & 0x0200)        temp |= 0x20;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x0B,0x5F,temp);
     if(tempbx & 0x0100)  tempcx |= 0x000a;
     if(tempbx & 0x0400)  tempcx |= 0x1200;
  } else {
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0B,temp);
     if(tempbx & 0x0100)  tempcx |= 0x0002;
     if(tempbx & 0x0400)  tempcx |= 0x0600;
  }

  if(tempbx & 0x0200)  tempcx |= 0x0040;

  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x11,0x00);                	/* 0x11 Vertical Blank End */

  tempax = (SiS_Pr->SiS_VGAVT - tempbx) >> 2;

  if((ModeNo > 0x13) || (HwInfo->jChipType < SIS_315H)) {
     if(resinfo != SIS_RI_1280x1024) {
	tempbx += (tempax << 1);
     }
  } else if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_LCDResInfo != Panel_1400x1050) {
	tempbx += (tempax << 1);
     }
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     tempbx -= 10;
  } else {
     if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
        if(SiS_Pr->SiS_TVMode & TVSetPAL) {
           tempbx += 40;
	   if(HwInfo->jChipType >= SIS_315H) {
	      if(SiS_Pr->SiS_VGAHDE == 800) tempbx += 10;
	   }
	}
     }
  }
  tempax >>= 2;
  tempax++;
  tempax += tempbx;
  push1 = tempax;
  if(SiS_Pr->SiS_TVMode & TVSetPAL) {
     if(tempbx <= 513)  {
     	if(tempax >= 513) tempbx = 513;
     }
  }
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0C,temp);			/* 0x0C Vertical Retrace Start */

  tempbx--;
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x10,temp);

  if(tempbx & 0x0100) tempcx |= 0x0008;

  if(tempbx & 0x0200) {
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x0B,0x20);
  }
  tempbx++;

  if(tempbx & 0x0100) tempcx |= 0x0004;
  if(tempbx & 0x0200) tempcx |= 0x0080;
  if(tempbx & 0x0400) {
     if(HwInfo->jChipType >= SIS_661)        tempcx |= 0x0800;
     else if(SiS_Pr->SiS_VBType & VB_SIS301) tempcx |= 0x0800;
     else                                    tempcx |= 0x0C00;
  }

  tempbx = push1;
  temp = tempbx & 0x000F;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0D,temp);        		/* 0x0D vertical Retrace End */

  if(tempbx & 0x0010) tempcx |= 0x2000;

  temp = tempcx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0A,temp);              	/* 0x0A CR07 */

  temp = (tempcx & 0xFF00) >> 8;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,temp);              	/* 0x17 SR0A */

  tempax = modeflag;
  temp = (tempax & 0xFF00) >> 8;
  temp = (temp >> 1) & 0x09;
  if(!(SiS_Pr->SiS_VBType & VB_SIS301)) temp |= 0x01;		/* Always 8 dotclock */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,temp);              	/* 0x16 SR01 */

  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0F,0x00);              	/* 0x0F CR14 */

  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x12,0x00);              	/* 0x12 CR17 */

  temp = 0x00;
  if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
     if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x01) {
	temp = 0x80;
     }
  }
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1A,temp);                	/* 0x1A SR0E */

  temp = SiS_GetRegByte((SiS_Pr->SiS_P3ca+0x02));
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,temp);
}

/* Setup panel link
 * This is used for LVDS, LCDA and Chrontel TV output
 * 300/LVDS+TV, 300/301B-DH, 315/LVDS+TV, 315/LCDA
 */
static void
SiS_SetGroup1_LVDS(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                   PSIS_HW_INFO HwInfo, USHORT RefreshRateTableIndex)
{
  USHORT modeflag,resinfo;
  USHORT push2,tempax,tempbx,tempcx,temp;
  ULONG tempeax=0,tempebx,tempecx,tempvcfact=0;
  BOOLEAN islvds = FALSE, issis  = FALSE, chkdclkfirst = FALSE;
#ifdef SIS300
  USHORT crt2crtc;
#endif
#ifdef SIS315H
  USHORT pushcx;
#endif

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
#ifdef SIS300
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
#endif
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
#ifdef SIS300
     crt2crtc = 0;
#endif
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
#ifdef SIS300
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
#endif
  }

  /* is lvds if really LVDS, or SiS 301B-DH with external LVDS transmitter */
  if((SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
     ((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBType & VB_NoLCD))) {
     islvds = TRUE;
  }

  /* is really sis if sis bridge, but not 301B-DH */
  if((SiS_Pr->SiS_VBType & VB_SISVB) && (!(SiS_Pr->SiS_VBType & VB_NoLCD))) {
     issis = TRUE;
  }

  if((HwInfo->jChipType >= SIS_315H) && (islvds) && (!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA))) {
     if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
        chkdclkfirst = TRUE;
     }
  }

#ifdef SIS315H
  if((HwInfo->jChipType >= SIS_315H) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
     if(IS_SIS330) {
        SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x10);
     } else if(IS_SIS740) {
        if(islvds) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xfb,0x04);
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x03);
        } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
           SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x10);
        }
     } else {
        if(islvds) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xfb,0x04);
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x00);
        } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
           SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2D,0x0f);
	   if(SiS_Pr->SiS_VBType & VB_SIS301C) {
	      if((SiS_Pr->SiS_LCDResInfo == Panel_1024x768) ||
	         (SiS_Pr->SiS_LCDResInfo == Panel_1280x1024)) {
	         SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x20);
	      }
	   }
        }
     }
  }
#endif

  /* Horizontal */

  tempax = SiS_Pr->SiS_LCDHDES;
  if(islvds) {
     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
        if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
           if((SiS_Pr->SiS_LCDResInfo == Panel_640x480) &&
              (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode))) {
  	      tempax -= 8;
	   }
	}
     }
  }

  temp = (tempax & 0x0007);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1A,temp);			/* BPLHDESKEW[2:0]   */
  temp = (tempax >> 3) & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,temp);			/* BPLHDESKEW[10:3]  */

  tempbx = SiS_Pr->SiS_HDE;
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if((SiS_Pr->SiS_LCDResInfo == Panel_640x480_2) ||
        (SiS_Pr->SiS_LCDResInfo == Panel_640x480_3)) {
        tempbx >>= 1;
     }
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        tempbx = SiS_Pr->PanelXRes;
     }
  }

  tempax += tempbx;
  if(tempax >= SiS_Pr->SiS_HT) tempax -= SiS_Pr->SiS_HT;

  temp = tempax;
#if 0
  /* TEST 2 */
  if((HwInfo->jChipType >= SIS_315H) && (islvds) && (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050)) {
  } else
  /* /TEST2 */
#endif
  if(temp & 0x07) temp += 8;
  temp >>= 3;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,temp);			/* BPLHDEE  */

  tempcx = (SiS_Pr->SiS_HT - tempbx) >> 2;

  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        if(SiS_Pr->PanelHRS != 999) tempcx = SiS_Pr->PanelHRS;
     }
  }

  tempcx += tempax;
  if(tempcx >= SiS_Pr->SiS_HT) tempcx -= SiS_Pr->SiS_HT;

  temp = (tempcx >> 3) & 0x00FF;
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
           switch(ModeNo) {
           case 0x04:
           case 0x05:
           case 0x0d: temp = 0x56; break;
           case 0x10: temp = 0x60; break;
           case 0x13: temp = 0x5f; break;
           case 0x40:
           case 0x41:
           case 0x4f:
           case 0x43:
           case 0x44:
           case 0x62:
           case 0x56:
           case 0x53:
           case 0x5d:
           case 0x5e: temp = 0x54; break;
           }
        }
     }
  }
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,temp);			/* BPLHRS */

  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     temp += 2;
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        temp += 8;
#if 0
        /* TEST 1 */
	if((HwInfo->jChipType >= SIS_315H) && (islvds) && (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050)) {
	   temp -= 16;
	} else
	/* /test1 */
#endif
        if(SiS_Pr->PanelHRE != 999) {
           temp = tempcx + SiS_Pr->PanelHRE;
	   if(temp >= SiS_Pr->SiS_HT) temp -= SiS_Pr->SiS_HT;
	   temp >>= 3;
        }
     }
  } else {
     temp += 10;
  }

  temp &= 0x1F;
  temp |= ((tempcx & 0x07) << 5);
#if 0
  if(SiS_Pr->SiS_IF_DEF_FSTN) temp = 0x20;       		/* WRONG? BIOS loads cl, not ah */
#endif
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,temp);			/* BPLHRE */

  /* Vertical */

  tempax = SiS_Pr->SiS_VGAVDE;
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
	tempax = SiS_Pr->PanelYRes;
     }
  }

  tempbx = SiS_Pr->SiS_LCDVDES + tempax;
  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;

  push2 = tempbx;

  tempcx = SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE;
  if(HwInfo->jChipType < SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
        if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
	   tempcx = SiS_Pr->SiS_VGAVT - SiS_Pr->PanelYRes;
	}
     }
  }
  if(islvds) tempcx >>= 1;
  else       tempcx >>= 2;

  if( (SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) &&
      (!(SiS_Pr->SiS_LCDInfo & LCDPass11)) 		    &&
      (SiS_Pr->PanelVRS != 999) ) {
     tempcx = SiS_Pr->PanelVRS;
     tempbx += tempcx;
     if(issis) tempbx++;
  } else {
     tempbx += tempcx;
     if(HwInfo->jChipType < SIS_315H) tempbx++;
     else if(issis)                   tempbx++;
  }

  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;	/* BPLVRS  */

  temp = tempbx & 0x00FF;
  if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
        if(ModeNo == 0x10) temp = 0xa9;
     }
  }
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,temp);

  tempcx >>= 3;
  tempcx++;

  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        if(SiS_Pr->PanelVRE != 999) tempcx = SiS_Pr->PanelVRE;
     }
  }

  tempcx += tempbx;
  temp = tempcx & 0x000F;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0xF0,temp);	/* BPLVRE  */

  temp = ((tempbx >> 8) & 0x07) << 3;
  if(SiS_Pr->SiS_IF_DEF_FSTN || SiS_Pr->SiS_IF_DEF_DSTN) {
     if(SiS_Pr->SiS_HDE != 640) {
        if(SiS_Pr->SiS_VGAVDE != SiS_Pr->SiS_VDE)  temp |= 0x40;
     }
  } else if(SiS_Pr->SiS_VGAVDE != SiS_Pr->SiS_VDE) temp |= 0x40;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)          temp |= 0x40;
  tempbx = 0x87;
  if((HwInfo->jChipType >= SIS_315H) ||
     (HwInfo->jChipRevision >= 0x30)) {
     tempbx = 0x07;
     if((SiS_Pr->SiS_IF_DEF_CH70xx == 1) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
	if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x03)    temp |= 0x80;
     }
     /* Chrontel 701x operates in 24bit mode (8-8-8, 2x12bit mutliplexed) via VGA2 */
     if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	   if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x06) & 0x10)      temp |= 0x80;
	} else {
	   if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x01) temp |= 0x80;
	}
     }
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1A,tempbx,temp);

  tempbx = push2;                                      		/* BPLVDEE */

  tempcx = SiS_Pr->SiS_LCDVDES;                        		/* BPLVDES */

  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     switch(SiS_Pr->SiS_LCDResInfo) {
     case Panel_640x480:
        tempbx = SiS_Pr->SiS_VGAVDE - 1;
        tempcx = SiS_Pr->SiS_VGAVDE;
	break;
     case Panel_800x600:
        if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
           if(resinfo == SIS_RI_800x600) tempcx++;
        }
	break;
     case Panel_1024x600:
        if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
           if(resinfo == SIS_RI_1024x600) tempcx++;
           if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
	      if(resinfo == SIS_RI_800x600) tempcx++;
	   }
        }
	break;
     case Panel_1024x768:
        if(HwInfo->jChipType < SIS_315H) {
           if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
              if(resinfo == SIS_RI_1024x768) tempcx++;
	   }
        }
	break;
     }
  }

  temp = ((tempbx >> 8) & 0x07) << 3;
  temp = temp | ((tempcx >> 8) & 0x07);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1D,temp);
  /* if(SiS_Pr->SiS_IF_DEF_FSTN) tempbx++;  */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1C,tempbx);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1B,tempcx);

  /* Vertical scaling */

  if(HwInfo->jChipType < SIS_315H) {

#ifdef SIS300      /* 300 series */
     tempeax = SiS_Pr->SiS_VGAVDE << 6;
     temp = (tempeax % (ULONG)SiS_Pr->SiS_VDE);
     tempeax = tempeax / (ULONG)SiS_Pr->SiS_VDE;
     if(temp) tempeax++;

     if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA) tempeax = 0x3F;

     temp = (USHORT)(tempeax & 0x00FF);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1E,temp);      	/* BPLVCFACT */
     tempvcfact = temp;
#endif /* SIS300 */

  } else {

#ifdef SIS315H  /* 315 series */
     tempeax = SiS_Pr->SiS_VGAVDE << 18;
     tempebx = SiS_Pr->SiS_VDE;
     temp = (tempeax % tempebx);
     tempeax = tempeax / tempebx;
     if(temp) tempeax++;
     tempvcfact = tempeax;

     temp = (USHORT)(tempeax & 0x00FF);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x37,temp);
     temp = (USHORT)((tempeax & 0x00FF00) >> 8);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x36,temp);
     temp = (USHORT)((tempeax & 0x00030000) >> 16);
     if(SiS_Pr->SiS_VDE == SiS_Pr->SiS_VGAVDE) temp |= 0x04;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x35,temp);

     if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) {
        temp = (USHORT)(tempeax & 0x00FF);
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x3c,temp);
        temp = (USHORT)((tempeax & 0x00FF00) >> 8);
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x3b,temp);
        temp = (USHORT)(((tempeax & 0x00030000) >> 16) << 6);
        SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x3a,0x3f,temp);
        temp = 0;
        if(SiS_Pr->SiS_VDE != SiS_Pr->SiS_VGAVDE) temp |= 0x08;
        SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x30,0xf3,temp);
     }
#endif

  }

  /* Horizontal scaling */

  tempeax = SiS_Pr->SiS_VGAHDE;		/* 1f = ( (VGAHDE * 65536) / ( (VGAHDE * 65536) / HDE ) ) - 1*/
  if(chkdclkfirst) {
     if(modeflag & HalfDCLK) tempeax >>= 1;
  }
  tempebx = tempeax << 16;
  if(SiS_Pr->SiS_HDE == tempeax) {
     tempecx = 0xFFFF;
  } else {
     tempecx = tempebx / SiS_Pr->SiS_HDE;
     if(HwInfo->jChipType >= SIS_315H) {
        if(tempebx % SiS_Pr->SiS_HDE) tempecx++;
     }
  }

  if(HwInfo->jChipType >= SIS_315H) {
     tempeax = (tempebx / tempecx) - 1;
  } else {
     tempeax = ((SiS_Pr->SiS_VGAHT << 16) / tempecx) - 1;
  }
  tempecx = (tempecx << 16) | (tempeax & 0xFFFF);
  temp = (USHORT)(tempecx & 0x00FF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1F,temp);

  if(HwInfo->jChipType >= SIS_315H) {
     tempeax = (SiS_Pr->SiS_VGAVDE << 18) / tempvcfact;
     tempbx = (USHORT)(tempeax & 0xFFFF);
  } else {
     tempeax = SiS_Pr->SiS_VGAVDE << 6;
     tempbx = tempvcfact & 0x3f;
     if(tempbx == 0) tempbx = 64;
     tempeax /= tempbx;
     tempbx = (USHORT)(tempeax & 0xFFFF);
  }
  if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) tempbx--;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA) {
     if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) tempbx = 1;
     else if(SiS_Pr->SiS_LCDResInfo != Panel_640x480)             tempbx = 1;
  }

  temp = ((tempbx >> 8) & 0x07) << 3;
  temp = temp | ((tempecx >> 8) & 0x07);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x20,temp);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x21,tempbx);

  tempecx >>= 16;   	                                  	/* BPLHCFACT  */
  if(!chkdclkfirst) {
     if(modeflag & HalfDCLK) tempecx >>= 1;
  }
  temp = (USHORT)((tempecx & 0xFF00) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x22,temp);
  temp = (USHORT)(tempecx & 0x00FF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x23,temp);

#ifdef SIS315H
  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
        if((islvds) || (SiS_Pr->SiS_VBInfo & VB_SIS301LV302LV)) {
           SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1e,0x20);
	}
     } else {
        if(islvds) {
           if(HwInfo->jChipType == SIS_740) {
              SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x03);
           } else {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1e,0x23);
           }
        }
     }
  }
#endif

#ifdef SIS300
  if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
     int i;
     UCHAR TrumpMode13[4]   = { 0x01, 0x10, 0x2c, 0x00 };
     UCHAR TrumpMode10_1[4] = { 0x01, 0x10, 0x27, 0x00 };
     UCHAR TrumpMode10_2[4] = { 0x01, 0x16, 0x10, 0x00 };

     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x02,0xbf);
     for(i=0; i<5; i++) {
        SiS_SetTrumpionBlock(SiS_Pr, &SiS300_TrumpionData[crt2crtc][0]);
     }
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
        if(ModeNo == 0x13) {
	   for(i=0; i<4; i++) {
	      SiS_SetTrumpionBlock(SiS_Pr, &TrumpMode13[0]);
	   }
	} else if(ModeNo == 0x10) {
	   for(i=0; i<4; i++) {
	      SiS_SetTrumpionBlock(SiS_Pr, &TrumpMode10_1[0]);
	      SiS_SetTrumpionBlock(SiS_Pr, &TrumpMode10_2[0]);
	   }
	}
     }
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40);
  }
#endif

#ifdef SIS315H
  if(SiS_Pr->SiS_IF_DEF_FSTN || SiS_Pr->SiS_IF_DEF_DSTN) {
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x25,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x26,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x27,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x28,0x87);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x29,0x5A);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2A,0x4B);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x44,~0x07,0x03);
     tempax = SiS_Pr->SiS_HDE;                       		/* Blps = lcdhdee(lcdhdes+HDE) + 64 */
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempax >>= 1;
     tempax += 64;
     temp = tempax & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x38,temp);
     temp = ((tempax & 0xFF00) >> 8) << 3;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,~0x078,temp);
     tempax += 32;		                     		/* Blpe=lBlps+32 */
     temp = tempax & 0x00FF;
     if(SiS_Pr->SiS_IF_DEF_FSTN) temp = 0;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x39,temp);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3A,0x00);        	/* Bflml=0 */
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x007,0x00);

     tempax = SiS_Pr->SiS_VDE;
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempax >>= 1;
     tempax >>= 1;
     temp = tempax & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3B,temp);
     temp = ((tempax & 0xFF00) >> 8) << 3;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x038,temp);

     tempeax = SiS_Pr->SiS_HDE;
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempeax >>= 1;
     tempeax <<= 2;                       			/* BDxFIFOSTOP = (HDE*4)/128 */
     tempebx = 128;
     temp = (USHORT)(tempeax % tempebx);
     tempeax = tempeax / tempebx;
     if(temp) tempeax++;
     temp = (USHORT)(tempeax & 0x003F);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x45,~0x0FF,temp);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3F,0x00);         	/* BDxWadrst0 */
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3E,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3D,0x10);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x040,0x00);

     tempax = SiS_Pr->SiS_HDE;
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempax >>= 1;
     tempax >>= 4;                        			/* BDxWadroff = HDE*4/8/8 */
     pushcx = tempax;
     temp = tempax & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x43,temp);
     temp = ((tempax & 0xFF00) >> 8) << 3;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x44,~0x0F8,temp);

     tempax = SiS_Pr->SiS_VDE;                             	/* BDxWadrst1 = BDxWadrst0 + BDxWadroff * VDE */
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempax >>= 1;
     tempeax = (tempax * pushcx);
     tempebx = 0x00100000 + tempeax;
     temp = (USHORT)tempebx & 0x000000FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x42,temp);
     temp = (USHORT)((tempebx & 0x0000FF00) >> 8);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x41,temp);
     temp = (USHORT)((tempebx & 0x00FF0000) >> 16);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x40,temp);
     temp = (USHORT)(((tempebx & 0x01000000) >> 24) << 7);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x080,temp);

     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2F,0x03);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x03,0x50);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x04,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2F,0x01);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0x38);

     if(SiS_Pr->SiS_IF_DEF_FSTN) {
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2b,0x02);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2c,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2d,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x35,0x0c);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x36,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x37,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x38,0x80);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x39,0xA0);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3a,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3b,0xf0);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3c,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3d,0x10);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3e,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3f,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x40,0x10);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x41,0x25);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x42,0x80);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x43,0x14);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x44,0x03);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x45,0x0a);
     }
  }
#endif  /* SIS315H */
}

/* Set Part 1 */
static void
SiS_SetGroup1(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
              PSIS_HW_INFO HwInfo, USHORT RefreshRateTableIndex)
{
  UCHAR   *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT  temp=0, tempax=0, tempbx=0, tempcx=0;
  USHORT  pushbx=0, CRT1Index=0, modeflag, resinfo=0;
#ifdef SIS315H
  USHORT  tempbl=0;
#endif

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
     SiS_SetGroup1_LVDS(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
     return;
  }

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     CRT1Index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }

  SiS_SetCRT2Offset(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);

  if( ! ((HwInfo->jChipType >= SIS_315H) &&
         (SiS_Pr->SiS_IF_DEF_LVDS == 1) &&
         (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ) {

     if(HwInfo->jChipType < SIS_315H ) {
#ifdef SIS300
  	SiS_SetCRT2FIFO_300(SiS_Pr, ModeNo, HwInfo);
#endif
     } else {
#ifdef SIS315H
        SiS_SetCRT2FIFO_310(SiS_Pr, HwInfo);
#endif
     }

     /* 1. Horizontal setup */

     if(HwInfo->jChipType < SIS_315H ) {

#ifdef SIS300   /* ------------- 300 series --------------*/

    	temp = (SiS_Pr->SiS_VGAHT - 1) & 0x0FF;   		  /* BTVGA2HT 0x08,0x09 */
    	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x08,temp);              /* CRT2 Horizontal Total */

    	temp = (((SiS_Pr->SiS_VGAHT - 1) & 0xFF00) >> 8) << 4;
    	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0x0f,temp);    /* CRT2 Horizontal Total Overflow [7:4] */

    	temp = (SiS_Pr->SiS_VGAHDE + 12) & 0x0FF;                 /* BTVGA2HDEE 0x0A,0x0C */
    	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0A,temp);              /* CRT2 Horizontal Display Enable End */

	pushbx = SiS_Pr->SiS_VGAHDE + 12;                         /* bx  BTVGA2HRS 0x0B,0x0C */
    	tempcx = (SiS_Pr->SiS_VGAHT - SiS_Pr->SiS_VGAHDE) >> 2;
    	tempbx = pushbx + tempcx;
    	tempcx <<= 1;
    	tempcx += tempbx;

    	if(SiS_Pr->SiS_VBType & VB_SISVB) {

	   if(SiS_Pr->UseCustomMode) {
	      tempbx = SiS_Pr->CHSyncStart + 12;
	      tempcx = SiS_Pr->CHSyncEnd + 12;
	   }

      	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
	      unsigned char cr4, cr14, cr5, cr15;
	      if(SiS_Pr->UseCustomMode) {
	         cr4  = SiS_Pr->CCRT1CRTC[4];
		 cr14 = SiS_Pr->CCRT1CRTC[14];
		 cr5  = SiS_Pr->CCRT1CRTC[5];
		 cr15 = SiS_Pr->CCRT1CRTC[15];
	      } else {
	         cr4  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[4];
		 cr14 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14];
		 cr5  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[5];
		 cr15 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[15];
	      }
              tempbx = ((cr4 | ((cr14 & 0xC0) << 2)) - 1) << 3;
              tempcx = (((cr5 & 0x1F) | ((cr15 & 0x04) << (6-2))) - 1) << 3;
      	   }

    	   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
      	      tempbx = 1040;
      	      tempcx = 1044;
    	   }

	}

    	temp = tempbx & 0x00FF;
    	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0B,temp);              /* CRT2 Horizontal Retrace Start */

#endif /* SIS300 */

     } else {

#ifdef SIS315H  /* ------------------- 315/330 series --------------- */

	tempcx = SiS_Pr->SiS_VGAHT;				  /* BTVGA2HT 0x08,0x09 */
	if(modeflag & HalfDCLK) {
	   if(SiS_Pr->SiS_VBType & VB_SISVB) {
	      tempcx >>= 1;
	   } else {
	      tempax = SiS_Pr->SiS_VGAHDE >> 1;
	      tempcx = SiS_Pr->SiS_HT - SiS_Pr->SiS_HDE + tempax;
	      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
	         tempcx = SiS_Pr->SiS_HT - tempax;
	      }
	   }
	}
	tempcx--;

	temp = tempcx & 0xff;
	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x08,temp);              /* CRT2 Horizontal Total */

	temp = ((tempcx & 0xff00) >> 8) << 4;
	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0x0F,temp);    /* CRT2 Horizontal Total Overflow [7:4] */

	tempcx = SiS_Pr->SiS_VGAHT;				  /* BTVGA2HDEE 0x0A,0x0C */
	tempbx = SiS_Pr->SiS_VGAHDE;
	tempcx -= tempbx;
	tempcx >>= 2;
	if(modeflag & HalfDCLK) {
	   tempbx >>= 1;
	   tempcx >>= 1;
	}
	tempbx += 16;

	temp = tempbx & 0xff;
	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0A,temp);              /* CRT2 Horizontal Display Enable End */

	pushbx = tempbx;
	tempcx >>= 1;
	tempbx += tempcx;
	tempcx += tempbx;

	if(SiS_Pr->SiS_VBType & VB_SISVB) {

	   if(HwInfo->jChipType >= SIS_661) {
	      if((SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) ||
		 (SiS_Pr->SiS_LCDResInfo == Panel_1280x1024)) {
		 if(resinfo == SIS_RI_1280x1024) {
		    tempcx = 0x30;
		 } else if(resinfo == SIS_RI_1600x1200) {
		    tempcx = 0xff;
		 }
	      }
	   }

	   if(SiS_Pr->UseCustomMode) {
	      tempbx = SiS_Pr->CHSyncStart + 16;
	      tempcx = SiS_Pr->CHSyncEnd + 16;
	      tempax = SiS_Pr->SiS_VGAHT;
	      if(modeflag & HalfDCLK) tempax >>= 1;
	      tempax--;
	      if(tempcx > tempax)  tempcx = tempax;
	   }

           if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
	      unsigned char cr4, cr14, cr5, cr15;
	      if(SiS_Pr->UseCustomMode) {
	         cr4  = SiS_Pr->CCRT1CRTC[4];
		 cr14 = SiS_Pr->CCRT1CRTC[14];
		 cr5  = SiS_Pr->CCRT1CRTC[5];
		 cr15 = SiS_Pr->CCRT1CRTC[15];
	      } else {
	         cr4  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[4];
		 cr14 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14];
		 cr5  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[5];
		 cr15 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[15];
	      }
              tempbx = ((cr4 | ((cr14 & 0xC0) << 2)) - 3) << 3; 		/* (VGAHRS-3)*8 */
              tempcx = (((cr5 & 0x1f) | ((cr15 & 0x04) << (5-2))) - 3) << 3; 	/* (VGAHRE-3)*8 */
	      tempcx &= 0x00FF;
	      tempcx |= (tempbx & 0xFF00);
              tempbx += 16;
              tempcx += 16;
	      tempax = SiS_Pr->SiS_VGAHT;
	      if(modeflag & HalfDCLK) tempax >>= 1;
	      tempax--;
	      if(tempcx > tempax)  tempcx = tempax;
           }

	   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
      	      tempbx = 1040;
      	      tempcx = 1044;   /* HWCursor bug! */
      	   }

        }

	temp = tempbx & 0xff;
	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0B,temp);              /* CRT2 Horizontal Retrace Start */
#endif  /* SIS315H */

     }  /* 315/330 series */

     tempax = tempbx & 0xFF00;
     tempbx = pushbx;
     tempbx = (tempbx & 0x00FF) | ((tempbx & 0xFF00) << 4);
     tempax |= (tempbx & 0xFF00);
     temp = (tempax & 0xFF00) >> 8;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0C,temp);

     temp = tempcx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0D,temp);                 /* CRT2 Horizontal Retrace End */

     /* 2. Vertical setup */

     tempcx = SiS_Pr->SiS_VGAVT - 1;
     temp = tempcx & 0x00FF;

     if(HwInfo->jChipType < SIS_661) {
        if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
	   if(HwInfo->jChipType < SIS_315H) {
	      if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	         if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSVIDEO | SetCRT2ToAVIDEO)) {
	            temp--;
	         }
              }
	   } else {
 	      temp--;
           }
        } else if(HwInfo->jChipType >= SIS_315H) {
	   temp--;
	}
     }
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0E,temp);                 /* CRT2 Vertical Total */

     tempbx = SiS_Pr->SiS_VGAVDE - 1;
     temp = tempbx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0F,temp);                 /* CRT2 Vertical Display Enable End */

     temp = ((tempbx & 0xFF00) << 3) >> 8;
     temp |= ((tempcx & 0xFF00) >> 8);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x12,temp);                 /* Overflow (and HWCursor Test Mode) */

     if((HwInfo->jChipType >= SIS_315H) && (HwInfo->jChipType < SIS_661)) {
        tempbx++;
   	tempax = tempbx;
	tempcx++;
	tempcx -= tempax;
	tempcx >>= 2;
	tempbx += tempcx;
	if(tempcx < 4) tempcx = 4;
	tempcx >>= 2;
	tempcx += tempbx;
	tempcx++;
     } else {
  	tempbx = (SiS_Pr->SiS_VGAVT + SiS_Pr->SiS_VGAVDE) >> 1;                 /*  BTVGA2VRS     0x10,0x11   */
  	tempcx = ((SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE) >> 4) + tempbx + 1;  /*  BTVGA2VRE     0x11        */
     }

     if(SiS_Pr->SiS_VBType & VB_SISVB) {

	if(SiS_Pr->UseCustomMode) {
	   tempbx = SiS_Pr->CVSyncStart;
	   tempcx = (tempcx & 0xFF00) | (SiS_Pr->CVSyncEnd & 0x00FF);
	}

        if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
	   unsigned char cr8, cr7, cr13, cr9;
	   if(SiS_Pr->UseCustomMode) {
	      cr8  = SiS_Pr->CCRT1CRTC[8];
	      cr7  = SiS_Pr->CCRT1CRTC[7];
	      cr13 = SiS_Pr->CCRT1CRTC[13];
	      cr9  = SiS_Pr->CCRT1CRTC[9];
	   } else {
	      cr8  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[8];
	      cr7  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[7];
	      cr13 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[13];
	      cr9  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[9];
	   }
      	   tempbx = cr8;
      	   if(cr7 & 0x04)  tempbx |= 0x0100;
      	   if(cr7 & 0x80)  tempbx |= 0x0200;
      	   if(cr13 & 0x08) tempbx |= 0x0400;
      	   tempcx = (tempcx & 0xFF00) | (cr9 & 0x00FF);
    	}
     }
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x10,tempbx);               /* CRT2 Vertical Retrace Start */

     temp = ((tempbx & 0xFF00) >> 8) << 4;
     temp |= (tempcx & 0x000F);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x11,temp);                 /* CRT2 Vert. Retrace End; Overflow; "Enable CRTC Check" */

     /* 3. Panel delay compensation */

     if(HwInfo->jChipType < SIS_315H) {

#ifdef SIS300  /* ---------- 300 series -------------- */

	if(SiS_Pr->SiS_VBType & VB_SISVB) {
	   temp = 0x20;

	   if(HwInfo->jChipType == SIS_300) {
	      temp = 0x10;
	      if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)  temp = 0x2c;
	      if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) temp = 0x20;
	   }
	   if(SiS_Pr->SiS_VBType & VB_SIS301) {
	      if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) temp = 0x20;
	   }
	   if(SiS_Pr->SiS_LCDResInfo == Panel_1280x960)     temp = 0x24;
	   if(SiS_Pr->SiS_LCDResInfo == Panel_Custom)       temp = 0x2c;
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) 		temp = 0x08;
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
      	      if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) 	temp = 0x2c;
      	      else 					temp = 0x20;
    	   }
	   if(SiS_Pr->SiS_UseROM) {
	      if(ROMAddr[0x220] & 0x80) {
	         if(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoYPbPrHiVision)
	   	    temp = ROMAddr[0x221];
		 else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision)
		    temp = ROMAddr[0x222];
		 else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024)
		    temp = ROMAddr[0x223];
		 else
		    temp = ROMAddr[0x224];
		 temp &= 0x3c;
	      }
	   }
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	      if(SiS_Pr->PDC != -1)  temp = SiS_Pr->PDC & 0x3c;
	   }

	} else {
	   temp = 0x20;
	   if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
	      if(SiS_Pr->SiS_LCDResInfo == Panel_640x480) temp = 0x04;
	   }
	   if(SiS_Pr->SiS_UseROM) {
	      if(ROMAddr[0x220] & 0x80) {
	         temp = ROMAddr[0x220] & 0x3c;
	      }
	   }
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	      if(SiS_Pr->PDC != -1) temp = SiS_Pr->PDC & 0x3c;
	   }
        }

    	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,~0x3C,temp);   /* Panel Link Delay Compensation; (Software Command Reset; Power Saving) */

#endif  /* SIS300 */

     } else {

#ifdef SIS315H   /* --------------- 315/330 series ---------------*/

        if(HwInfo->jChipType < SIS_661) {

	   if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {

	      if(HwInfo->jChipType == SIS_740) temp = 0x03;
	      else 		               temp = 0x00;

	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) temp = 0x0a;
	      tempbl = 0xF0;
	      if(HwInfo->jChipType == SIS_650) {
		 if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
		    if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) tempbl = 0x0F;
		 }
	      }

	      if(SiS_Pr->SiS_IF_DEF_DSTN || SiS_Pr->SiS_IF_DEF_FSTN) {
		 temp = 0x08;
		 tempbl = 0;
		 if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
		    if(ROMAddr[0x13c] & 0x80) tempbl = 0xf0;
		 }
	      }

	      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,tempbl,temp);	    /* Panel Link Delay Compensation */
	   }

	} /* < 661 */

    	tempax = 0;
    	if (modeflag & DoubleScanMode) tempax |= 0x80;
    	if (modeflag & HalfDCLK)       tempax |= 0x40;
    	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2C,0x3f,tempax);

#endif  /* SIS315H */

     }

  }  /* Slavemode */

  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
        /* For 301BDH with LCD, we set up the Panel Link */
	SiS_SetGroup1_LVDS(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
     } else if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
    	SiS_SetGroup1_301(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
     }
  } else {
     if(HwInfo->jChipType < SIS_315H) {
	SiS_SetGroup1_LVDS(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
     } else {
	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
           if((!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) || (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
    	      SiS_SetGroup1_LVDS(SiS_Pr, ModeNo,ModeIdIndex, HwInfo,RefreshRateTableIndex);
           }
	} else {
	   SiS_SetGroup1_LVDS(SiS_Pr, ModeNo,ModeIdIndex, HwInfo,RefreshRateTableIndex);
	}
     }
  }
}

/*********************************************/
/*         SET PART 2 REGISTER GROUP         */
/*********************************************/

#ifdef SIS315H
static UCHAR *
SiS_GetGroup2CLVXPtr(SiS_Private *SiS_Pr, int tabletype, PSIS_HW_INFO HwInfo)
{
   const UCHAR  *tableptr = NULL;
   USHORT       a, b, p = 0;

   a = SiS_Pr->SiS_VGAHDE;
   b = SiS_Pr->SiS_HDE;
   if(tabletype) {
      a = SiS_Pr->SiS_VGAVDE;
      b = SiS_Pr->SiS_VDE;
   }

   if(a < b) {
      tableptr = SiS_Part2CLVX_1;
   } else if(a == b) {
      tableptr = SiS_Part2CLVX_2;
   } else {
      if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	 tableptr = SiS_Part2CLVX_4;
      } else {
	 tableptr = SiS_Part2CLVX_3;
      }
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	 if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) 	tableptr = SiS_Part2CLVX_3;
	 else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) 	tableptr = SiS_Part2CLVX_3;
	 else 				         	tableptr = SiS_Part2CLVX_5;

      } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	 tableptr = SiS_Part2CLVX_6;
      }
      do {
	 if((tableptr[p] | tableptr[p+1] << 8) == a) break;
	 p += 0x42;
      } while((tableptr[p] | tableptr[p+1] << 8) != 0xffff);
      if((tableptr[p] | tableptr[p+1] << 8) == 0xffff) p -= 0x42;
   }
   p += 2;
   return((UCHAR *)&tableptr[p]);
}

static void
SiS_SetGroup2_C_ELV(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
	      	    USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
   UCHAR *tableptr;
   int i, j;
   UCHAR temp;

   if(!(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV))) return; 

   tableptr = SiS_GetGroup2CLVXPtr(SiS_Pr, 0, HwInfo);
   for(i = 0x80, j = 0; i <= 0xbf; i++, j++) {
      SiS_SetReg(SiS_Pr->SiS_Part2Port, i, tableptr[j]);
   }
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
      tableptr = SiS_GetGroup2CLVXPtr(SiS_Pr, 1, HwInfo);
      for(i = 0xc0, j = 0; i <= 0xff; i++, j++) {
         SiS_SetReg(SiS_Pr->SiS_Part2Port, i, tableptr[j]);
      }
   }
   temp = 0x10;
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) temp |= 0x04;
   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x4e,0xeb,temp);
}

static BOOLEAN
SiS_GetCRT2Part2Ptr(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
		    USHORT RefreshRateTableIndex,USHORT *CRT2Index,
		    USHORT *ResIndex,PSIS_HW_INFO HwInfo)
{
  
  if(HwInfo->jChipType < SIS_315H) return FALSE;
  
  if(ModeNo <= 0x13)
     (*ResIndex) = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  else
     (*ResIndex) = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;

  (*ResIndex) &= 0x3f;
  (*CRT2Index) = 0;

  if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
     if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        (*CRT2Index) = 200;
     }
  }

  if(SiS_Pr->SiS_CustomT == CUT_ASUSA2H_2) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
        if(SiS_Pr->SiS_SetFlag & LCDVESATiming) (*CRT2Index) = 206;
     }
  }
  return(((*CRT2Index) != 0));
}
#endif

#ifdef SIS300
static void
SiS_Group2LCDSpecial(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo, USHORT crt2crtc)
{
   USHORT tempcx;
   const UCHAR atable[] = {
       0xc3,0x9e,0xc3,0x9e,0x02,0x02,0x02,
       0xab,0x87,0xab,0x9e,0xe7,0x02,0x02
   };

   if(!SiS_Pr->UseCustomMode) {
      if( ( ( (HwInfo->jChipType == SIS_630) ||
              (HwInfo->jChipType == SIS_730) ) &&
            (HwInfo->jChipRevision > 2) )  &&
          (SiS_Pr->SiS_LCDResInfo == Panel_1024x768) &&
          (!(SiS_Pr->SiS_SetFlag & LCDVESATiming))  &&
          (!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) ) {
         if(ModeNo == 0x13) {
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,0xB9);
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,0xCC);
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xA6);
         } else {
            if((crt2crtc & 0x3F) == 4) {
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x2B);
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x13);
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,0xE5);
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,0x08);
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xE2);
            }
         }
      }

      if(HwInfo->jChipType < SIS_315H) {
         if(SiS_Pr->SiS_LCDTypeInfo == 0x0c) {
            crt2crtc &= 0x1f;
            tempcx = 0;
            if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
               if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
                  tempcx += 7;
               }
            }
            tempcx += crt2crtc;
            if(crt2crtc >= 4) {
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xff);
            }

            if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
               if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
                  if(crt2crtc == 4) {
                     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x28);
                  }
               }
            }
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x18);
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,atable[tempcx]);
         }
      }
   }
}

/* For ECS A907. Highly preliminary. */
static void
SiS_Set300Part2Regs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
    		    USHORT ModeIdIndex, USHORT RefreshRateTableIndex,
		    USHORT ModeNo)
{
  USHORT crt2crtc, resindex;
  int    i,j;
  const  SiS_Part2PortTblStruct *CRT2Part2Ptr = NULL;

  if(HwInfo->jChipType != SIS_300) return;
  if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) return;
  if(SiS_Pr->UseCustomMode) return;

  if(ModeNo <= 0x13) {
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     crt2crtc = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }

  resindex = crt2crtc & 0x3F;
  if(SiS_Pr->SiS_SetFlag & LCDVESATiming) CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_1;
  else                                    CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_2;

  /* The BIOS code (1.16.51,56) is obviously a fragment! */
  if(ModeNo > 0x13) {
     CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_1;
     resindex = 4;
  }

  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x01,0x80,(CRT2Part2Ptr+resindex)->CR[0]);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x02,0x80,(CRT2Part2Ptr+resindex)->CR[1]);
  for(i = 2, j = 0x04; j <= 0x06; i++, j++ ) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
  }
  for(j = 0x1c; j <= 0x1d; i++, j++ ) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
  }
  for(j = 0x1f; j <= 0x21; i++, j++ ) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
  }
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x23,(CRT2Part2Ptr+resindex)->CR[10]);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x25,0x0f,(CRT2Part2Ptr+resindex)->CR[11]);
}
#endif

static void
SiS_SetTVSpecial(SiS_Private *SiS_Pr, USHORT ModeNo)
{
  if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) return;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision)) return;
  if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p | TVSetYPbPr750p)) return;

  if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
     if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
        const UCHAR specialtv[] = {
		0xa7,0x07,0xf2,0x6e,0x17,0x8b,0x73,0x53,
		0x13,0x40,0x34,0xf4,0x63,0xbb,0xcc,0x7a,
		0x58,0xe4,0x73,0xda,0x13
	};
	int i, j;
	for(i = 0x1c, j = 0; i <= 0x30; i++, j++) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,i,specialtv[j]);
	}
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x43,0x72);
	if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750)) {
	   if(SiS_Pr->SiS_TVMode & TVSetPALM) {
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x14);
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x1b);
	   } else {
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x14);  /* 15 */
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x1a);  /* 1b */
	   }
	}
     }
  } else {
     if((ModeNo == 0x38) || (ModeNo == 0x4a) || (ModeNo == 0x64) ||
        (ModeNo == 0x52) || (ModeNo == 0x58) || (ModeNo == 0x5c)) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x1b);  /* 21 */
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x54);  /* 5a */
     } else {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x1a);  /* 21 */
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x53);  /* 5a */
     }
  }
}

static void
SiS_SetGroup2_Tail(SiS_Private *SiS_Pr, USHORT ModeNo)
{
  USHORT temp;

  if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
     if(SiS_Pr->SiS_VGAVDE == 525) {
	temp = 0xc3;
	if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	   temp++;
	   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) temp += 2;
	}
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2f,temp);
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x30,0xb3);
     } else if(SiS_Pr->SiS_VGAVDE == 420) {
	temp = 0x4d;
	if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	   temp++;
	   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) temp++;
	}
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2f,temp);
     }
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) {
	if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part2Port,0x1a,0x03);
	   /* Not always for LV, see SetGrp2 */
	}
	temp = 1;
	if(ModeNo <= 0x13) temp = 3;
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x0b,temp);
     }
#if 0
     /* 651+301C, for 1280x768 - do I really need that? */
     if((SiS_Pr->SiS_PanelXRes == 1280) && (SiS_Pr->SiS_PanelYRes == 768)) {
        if(SiS_Pr->SiS_VBInfo & SetSimuScanMode) {
	   if(((SiS_Pr->SiS_HDE == 640) && (SiS_Pr->SiS_VDE == 480)) ||
	      ((SiS_Pr->SiS_HDE == 320) && (SiS_Pr->SiS_VDE == 240))) {
	      SiS_SetReg(SiS_Part2Port,0x01,0x2b);
	      SiS_SetReg(SiS_Part2Port,0x02,0x13);
	      SiS_SetReg(SiS_Part2Port,0x04,0xe5);
	      SiS_SetReg(SiS_Part2Port,0x05,0x08);
	      SiS_SetReg(SiS_Part2Port,0x06,0xe2);
	      SiS_SetReg(SiS_Part2Port,0x1c,0x21);
	      SiS_SetReg(SiS_Part2Port,0x1d,0x45);
	      SiS_SetReg(SiS_Part2Port,0x1f,0x0b);
	      SiS_SetReg(SiS_Part2Port,0x20,0x00);
	      SiS_SetReg(SiS_Part2Port,0x21,0xa9);
	      SiS_SetReg(SiS_Part2Port,0x23,0x0b);
	      SiS_SetReg(SiS_Part2Port,0x25,0x04);
	   }
	}
     }
#endif
  }
}

static void
SiS_SetGroup2(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,USHORT RefreshRateTableIndex,
	      PSIS_HW_INFO HwInfo)
{
  USHORT      i, j, tempax, tempbx, tempcx, temp;
  USHORT      push1, push2, modeflag, crt2crtc, bridgeoffset;
  ULONG       longtemp, tempeax;
  const       UCHAR *PhasePoint;
  const       UCHAR *TimingPoint;
#ifdef SIS315H
  USHORT      resindex, CRT2Index;
  const       SiS_Part2PortTblStruct *CRT2Part2Ptr = NULL;

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) return;
#endif

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     crt2crtc = 0;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     crt2crtc = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }

  temp = 0;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToAVIDEO)) temp |= 0x08;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToSVIDEO)) temp |= 0x04;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToSCART)     temp |= 0x02;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision)  temp |= 0x01;

  if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) 	      temp |= 0x10;

  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x00,temp);

  PhasePoint  = SiS_Pr->SiS_PALPhase;
  TimingPoint = SiS_Pr->SiS_PALTiming;

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {

     TimingPoint = SiS_Pr->SiS_HiTVExtTiming;
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        TimingPoint = SiS_Pr->SiS_HiTVSt2Timing;
        if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
	   TimingPoint = SiS_Pr->SiS_HiTVSt1Timing;
#if 0
           if(!(modeflag & Charx8Dot))  TimingPoint = SiS_Pr->SiS_HiTVTextTiming;
#endif
        }
     }

  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {

     if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p)      TimingPoint = &SiS_YPbPrTable[2][0];
     else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) TimingPoint = &SiS_YPbPrTable[1][0];
     else					  TimingPoint = &SiS_YPbPrTable[0][0];

     PhasePoint = SiS_Pr->SiS_NTSCPhase;

  } else if(SiS_Pr->SiS_TVMode & TVSetPAL) {

     if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
         ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	   (SiS_Pr->SiS_TVMode & TVSetTVSimuMode) ) ) {
        PhasePoint = SiS_Pr->SiS_PALPhase2;
     }

  } else {

     TimingPoint = SiS_Pr->SiS_NTSCTiming;
     PhasePoint  = SiS_Pr->SiS_NTSCPhase;
     if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
	PhasePoint = SiS_Pr->SiS_PALPhase;
     }

     if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
	 ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	   (SiS_Pr->SiS_TVMode & TVSetTVSimuMode) ) ) {
        PhasePoint = SiS_Pr->SiS_NTSCPhase2;
	if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
	   PhasePoint = SiS_Pr->SiS_PALPhase2;
	}
     }

  }

  if(SiS_Pr->SiS_TVMode & TVSetPALM) {
     PhasePoint = SiS_Pr->SiS_PALMPhase;
     if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
	 ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	   (SiS_Pr->SiS_TVMode & TVSetTVSimuMode) ) ) {
        PhasePoint = SiS_Pr->SiS_PALMPhase2;
     }
  }

  if(SiS_Pr->SiS_TVMode & TVSetPALN) {
     PhasePoint = SiS_Pr->SiS_PALNPhase;
     if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
	 ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	   (SiS_Pr->SiS_TVMode & TVSetTVSimuMode) ) ) {
	PhasePoint = SiS_Pr->SiS_PALNPhase2;
     }
  }

  if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
     PhasePoint = SiS_Pr->SiS_SpecialPhase;
     if(SiS_Pr->SiS_TVMode & TVSetPALM) {
        PhasePoint = SiS_Pr->SiS_SpecialPhaseM;
     } else if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
        PhasePoint = SiS_Pr->SiS_SpecialPhaseJ;
     }
  }

  for(i=0x31, j=0; i<=0x34; i++, j++) {
     SiS_SetReg(SiS_Pr->SiS_Part2Port,i,PhasePoint[j]);
  }

  for(i=0x01, j=0; i<=0x2D; i++, j++) {
     SiS_SetReg(SiS_Pr->SiS_Part2Port,i,TimingPoint[j]);
  }
  for(i=0x39; i<=0x45; i++, j++) {
     SiS_SetReg(SiS_Pr->SiS_Part2Port,i,TimingPoint[j]);
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(SiS_Pr->SiS_ModeType != ModeText) {
        SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x3A,0x1F);
     }
  }

  SiS_SetRegOR(SiS_Pr->SiS_Part2Port,0x0A,SiS_Pr->SiS_NewFlickerMode);

  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x35,SiS_Pr->SiS_RY1COE);
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x36,SiS_Pr->SiS_RY2COE);
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x37,SiS_Pr->SiS_RY3COE);
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x38,SiS_Pr->SiS_RY4COE);

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) 	tempax = 950;
  else if(SiS_Pr->SiS_TVMode & TVSetPAL)      	tempax = 520;
  else 			            		tempax = 440;

  if( ( (!(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision)) && (SiS_Pr->SiS_VDE <= tempax) ) ||
      ( (SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision) &&
        ((SiS_Pr->SiS_VGAHDE == 1024) || (SiS_Pr->SiS_VDE <= tempax)) ) ) {

     tempax -= SiS_Pr->SiS_VDE;
     tempax >>= 2;
     tempax &= 0x00ff;

     temp = tempax + (USHORT)TimingPoint[0];
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,temp);

     temp = tempax + (USHORT)TimingPoint[1];
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,temp);

     if((SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision) && (SiS_Pr->SiS_VGAHDE >= 1024)) {
        if(SiS_Pr->SiS_TVMode & TVSetPAL) {
           SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x1b);  /* 19 */
           SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x54);  /* 52 */
        } else {
           SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x17);
           SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x1d);
        }
     }

  }

  tempcx = SiS_Pr->SiS_HT;
  if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempcx >>= 1;
  tempcx--;
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) tempcx--;
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1B,(tempcx & 0xff));
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1D,0xF0,((tempcx >> 8) & 0x0f));

  tempcx++;
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) tempcx++;
  tempcx >>= 1;

  push1 = tempcx;

  tempcx += 7;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) tempcx -= 4;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x22,0x0F,((tempcx << 4) & 0xf0));

  tempbx = TimingPoint[j] | (TimingPoint[j+1] << 8);
  tempbx += tempcx;

  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x24,tempbx);
  temp = ((tempbx & 0xFF00) >> 8) << 4;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x25,0x0F,temp);

  tempbx += 8;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     tempbx -= 4;
     tempcx = tempbx;
  }
  temp = (tempbx & 0x00FF) << 4;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x29,0x0F,temp);

  j += 2;
  tempcx += (TimingPoint[j] | (TimingPoint[j+1] << 8));
  temp = tempcx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x27,temp);
  temp = ((tempcx & 0xFF00) >> 8) << 4;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x28,0x0F,temp);

  tempcx += 8;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) tempcx -= 4;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x2A,0x0F,((tempcx << 4) & 0xf0));

  tempcx = push1;

  j += 2;
  tempcx -= (TimingPoint[j] | ((TimingPoint[j+1]) << 8));
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x2D,0x0F,((tempcx << 4) & 0xf0));

  tempcx -= 11;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
     tempcx = SiS_GetVGAHT2(SiS_Pr) - 1;
  }
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2E,tempcx);

  tempbx = SiS_Pr->SiS_VDE;
  if(SiS_Pr->SiS_VGAVDE == 360) tempbx = 746;
  if(SiS_Pr->SiS_VGAVDE == 375) tempbx = 746;
  if(SiS_Pr->SiS_VGAVDE == 405) tempbx = 853;
  if(HwInfo->jChipType < SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) tempbx >>= 1;
  } else {
     if( (SiS_Pr->SiS_VBInfo & SetCRT2ToTV) &&
         (!(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p|TVSetYPbPr750p))) ) {
	tempbx >>= 1;
	if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
	   if(ModeNo <= 0x13) {
	      if(crt2crtc == 1) tempbx++;
	   }
	} else if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
	   if(crt2crtc == 4) {
              if(SiS_Pr->SiS_ModeType <= 3) tempbx++;
	   }
	}
     }
  }
  tempbx -= 2;
  temp = tempbx & 0x00FF;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        if((ModeNo == 0x2f) || (ModeNo == 0x5d) || (ModeNo == 0x5e)) temp++;
     }
  }

  if(HwInfo->jChipType < SIS_661) {
     /* From 1.10.7w - doesn't make sense */
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
           if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
	      if(ModeNo == 0x03) temp++;
	   }
        }
     }
  }
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2F,temp);

  temp = (tempcx >> 8) & 0x0F;
  temp |= (((tempbx >> 8) << 6) & 0xC0);
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSVIDEO | SetCRT2ToAVIDEO)) {
     temp |= 0x10;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToAVIDEO) temp |= 0x20;
  }
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x30,temp);

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     tempbx = SiS_Pr->SiS_VDE;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        if(!(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p | TVSetYPbPr750p))) {
           tempbx >>= 1;
	}
     }
     tempbx -= 3;
     if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302LV | VB_SIS302ELV)) {  /* Why not 301B/LV? */
        if(HwInfo->jChipType >= SIS_661) {
           temp = 0;
	   if(tempcx & 0x0400) temp |= 0x20;
	   if(tempbx & 0x0400) temp |= 0x40;
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x10,temp);
	} else {
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
              if((SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
                 (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) ||
	         (SiS_Pr->SiS_LCDResInfo == Panel_1680x1050)) {
                 SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x10,0x60);
	      }
           }
	}
     }
     tempbx &= 0x03ff;
     temp = ((tempbx & 0xFF00) >> 8) << 5;
     temp |= 0x18;
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x46,temp);
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x47,tempbx);
  }

  tempbx = 0;
  if(!(modeflag & HalfDCLK)) {
     if(SiS_Pr->SiS_VGAHDE >= SiS_Pr->SiS_HDE) {
        tempax = 0;
        tempbx |= 0x2000;
     }
  }

  tempcx = 0x0101;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(SiS_Pr->SiS_VGAHDE >= 1024) {
        if((!(modeflag & HalfDCLK)) || (HwInfo->jChipType < SIS_315H)) {
           tempcx = 0x1920;
           if(SiS_Pr->SiS_VGAHDE >= 1280) {
              tempcx = 0x1420;
              tempbx &= ~0x2000;
           }
        }
     }
  }

  if(!(tempbx & 0x2000)) {
     if(modeflag & HalfDCLK) {
        tempcx = (tempcx & 0xFF00) | ((tempcx << 1) & 0x00FF);
     }
     longtemp = (SiS_Pr->SiS_VGAHDE * ((tempcx & 0xFF00) >> 8)) / (tempcx & 0x00FF);
     longtemp <<= 13;
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     	longtemp <<= 3;
     }
     tempeax = longtemp / SiS_Pr->SiS_HDE;
     if(longtemp % SiS_Pr->SiS_HDE) tempeax++;
     tempax = (USHORT)tempeax;
     tempbx |= (tempax & 0x1F00);
     tempcx = (tempax & 0xFF00) >> (8 + 5);
  }

  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x44,tempax);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x45,0xC0,(tempbx >> 8));

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {

     temp = tempcx & 0x0007;
     if(tempbx & 0x2000) temp = 0;
     if((HwInfo->jChipType < SIS_661) || (!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD))) {
        temp |= 0x18;
     }
     SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x46,0xE0,temp);

     if(SiS_Pr->SiS_TVMode & TVSetPAL) {
        tempbx = 0x0382;
        tempcx = 0x007e;
     } else {
        tempbx = 0x0369;
        tempcx = 0x0061;
     }
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x4B,tempbx);
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x4C,tempcx);
     temp = (tempcx & 0x0300) >> (8 - 2);
     temp |= ((tempbx >> 8) & 0x03);
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
        temp |= 0x10;
	if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p)      temp |= 0x20;
	else if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) temp |= 0x40;
     }
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x4D,temp);

     temp = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x43);
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x43,(USHORT)(temp - 3));

     SiS_SetTVSpecial(SiS_Pr, ModeNo);

     if(SiS_Pr->SiS_VBType & VB_SIS301C) {
        temp = 0;
        if(SiS_Pr->SiS_TVMode & TVSetPALM) temp = 8;
        SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x4e,0xf7,temp);
     }

  }

  if(SiS_Pr->SiS_TVMode & TVSetPALM) {
     if(!(SiS_Pr->SiS_TVMode & TVSetNTSC1024)) {
        temp = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x01);
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,temp - 1);
     }
     SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xEF);
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x0B,0x00);
     }
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) return;

  /* From here: Part2 LCD setup */

  tempbx = SiS_Pr->SiS_HDE;
  if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
  tempbx--;			         	/* RHACTE = HDE - 1 */
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2C,tempbx);
  temp = (tempbx & 0xFF00) >> 4;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x2B,0x0F,temp);

  temp = 0x01;
  if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
     if(SiS_Pr->SiS_ModeType == ModeEGA) {
        if(SiS_Pr->SiS_VGAHDE >= 1024) {
           temp = 0x02;
	   if(HwInfo->jChipType >= SIS_315H) {
              if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
                 temp = 0x01;
	      }
	   }
        }
     }
  }
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x0B,temp);

  tempbx = SiS_Pr->SiS_VDE - 1;
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x03,tempbx);
  temp = ((tempbx & 0xFF00) >> 8) & 0x07;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x0C,0xF8,temp);

  tempcx = SiS_Pr->SiS_VT - 1;
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x19,tempcx);

  temp = ((tempcx & 0xFF00) >> 8) << 5;

  /* Enable dithering; only do this for 32bpp mode */
  if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
     if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x01) {
        temp |= 0x10;
     }
  }

  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1A,0x0f,temp);

  SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x09,0xF0);
  SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x0A,0xF0);

  SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x17,0xFB);
  SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x18,0xDF);

#ifdef SIS315H
  if(SiS_GetCRT2Part2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                          			&CRT2Index, &resindex, HwInfo)) {
      switch(CRT2Index) {
        case 200: CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_1;   break;
	case 206: CRT2Part2Ptr = SiS310_CRT2Part2_Asus1024x768_3;    break;
	default:  CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_3;   break;
      }

      SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x01,0x80,(CRT2Part2Ptr+resindex)->CR[0]);
      SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x02,0x80,(CRT2Part2Ptr+resindex)->CR[1]);
      for(i = 2, j = 0x04; j <= 0x06; i++, j++ ) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
      }
      for(j = 0x1c; j <= 0x1d; i++, j++ ) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
      }
      for(j = 0x1f; j <= 0x21; i++, j++ ) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
      }
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x23,(CRT2Part2Ptr+resindex)->CR[10]);
      SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x25,0x0f,(CRT2Part2Ptr+resindex)->CR[11]);

      SiS_SetGroup2_Tail(SiS_Pr, ModeNo);

      
  } else {
#endif
	  
    /* Checked for 1024x768, 1280x1024, 1400x1050, 1600x1200 */
    /*             Clevo dual-link 1024x768 */
    /* 		   Compaq 1280x1024 has HT 1696 sometimes (calculation OK, if given HT is correct)  */
    /*		   Acer: OK, but uses different setting for VESA timing at 640/800/1024 and 640x400 */

    if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
       if((SiS_Pr->SiS_LCDInfo & LCDPass11) || (SiS_Pr->PanelYRes == SiS_Pr->SiS_VDE)) {
          tempbx = SiS_Pr->SiS_VDE - 1;
          tempcx = SiS_Pr->SiS_VT - 1;
       } else {
          tempbx = SiS_Pr->SiS_VDE + ((SiS_Pr->PanelYRes - SiS_Pr->SiS_VDE) / 2);
	  tempcx = SiS_Pr->SiS_VT - ((SiS_Pr->PanelYRes - SiS_Pr->SiS_VDE) / 2);
       }
    } else {
       tempbx = SiS_Pr->PanelYRes;
       tempcx = SiS_Pr->SiS_VT;
       tempax = 1;
       if(SiS_Pr->PanelYRes != SiS_Pr->SiS_VDE) {
          tempax = SiS_Pr->PanelYRes;
	  /* if(SiS_Pr->SiS_VGAVDE == 525) tempax += 0x3c;   */  /* 651+301C */
          if(SiS_Pr->PanelYRes < SiS_Pr->SiS_VDE) {
             tempax = tempcx = 0;
          } else {
             tempax -= SiS_Pr->SiS_VDE;
          }
          tempax >>= 1;
       }
       tempcx -= tempax; /* lcdvdes */
       tempbx -= tempax; /* lcdvdee */
    }

    /* Non-expanding: lcdvdees = tempcx = VT-1; lcdvdee = tempbx = VDE-1 */

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdvdes 0x%x lcdvdee 0x%x\n", tempcx, tempbx);
#endif

    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,tempcx);	/* lcdvdes  */
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,tempbx);	/* lcdvdee  */

    temp = ((tempbx & 0xFF00) >> 8) << 3;
    temp |= ((tempcx & 0xFF00) >> 8);
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,temp);

    tempax = SiS_Pr->SiS_VDE;
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       tempax = SiS_Pr->PanelYRes;
    }
    tempcx = (SiS_Pr->SiS_VT - tempax) >> 4;
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       if(SiS_Pr->PanelYRes != SiS_Pr->SiS_VDE) {
	  tempcx = (SiS_Pr->SiS_VT - tempax) / 10;
       }
    }

    tempbx = ((SiS_Pr->SiS_VT + SiS_Pr->SiS_VDE) >> 1) - 1;
    if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
       if(SiS_Pr->PanelYRes != SiS_Pr->SiS_VDE) {
          if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) { /* ? */
             tempax = SiS_Pr->SiS_VT - SiS_Pr->PanelYRes;
	     if(tempax % 4) { tempax >>= 2; tempax++; }
	     else           { tempax >>= 2;           }
             tempbx -= (tempax - 1);
	  } else tempbx -= 10;
       }
    }
    if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
       tempbx++;
       if((!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) || (crt2crtc == 6)) {
          if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
	     tempbx = 770;
	     tempcx = 3;
	  }
       }
    }

    /* non-expanding: lcdvrs = ((VT + VDE) / 2) - 10 */

    if(SiS_Pr->UseCustomMode) {
       tempbx = SiS_Pr->CVSyncStart;
    }

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdvrs 0x%x\n", tempbx);
#endif

    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,tempbx);	    /* lcdvrs */

    temp = ((tempbx & 0xFF00) >> 8) << 4;
    tempbx += (tempcx + 1);
    temp |= (tempbx & 0x000F);

    if(SiS_Pr->UseCustomMode) {
       temp &= 0xf0;
       temp |= (SiS_Pr->CVSyncEnd & 0x0f);
    }

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdvre[3:0] 0x%x\n", (temp & 0x0f));
#endif

    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,temp);

#ifdef SIS300
    SiS_Group2LCDSpecial(SiS_Pr, HwInfo, ModeNo, crt2crtc);
#endif

    bridgeoffset = 7;
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)          bridgeoffset += 2;
    if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) bridgeoffset++;
    if(SiS_IsDualLink(SiS_Pr, HwInfo))        		 bridgeoffset++;

    temp = 0;
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       if(SiS_Pr->PanelXRes != SiS_Pr->SiS_HDE) {
          temp = SiS_Pr->SiS_HT - ((SiS_Pr->PanelXRes - SiS_Pr->SiS_HDE) / 2);
	  if(SiS_IsDualLink(SiS_Pr, HwInfo)) temp >>= 1;
       }
    }
    temp += bridgeoffset;
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1F,temp);  	    /* lcdhdes[7:0] */
    temp = (temp >> 4) & 0xf0;
    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x20,0x0F,temp);  /* lcdhdes [11:8] */

    tempcx = SiS_Pr->SiS_HT;
    tempax = tempbx = SiS_Pr->SiS_HDE;
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       if(SiS_Pr->PanelXRes != SiS_Pr->SiS_HDE) {
          tempax = SiS_Pr->PanelXRes;
          tempbx = SiS_Pr->PanelXRes - ((SiS_Pr->PanelXRes - SiS_Pr->SiS_HDE) / 2);
       }
    }
    if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
       tempcx >>= 1;
       tempbx >>= 1;
       tempax >>= 1;		
    }

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdhdee 0x%x\n", tempbx);
#endif

    tempbx += bridgeoffset;

    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x23,tempbx);	    /* lcdhdee */
    temp = (tempbx >> 8) & 0x0f;
    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x25,0xF0,temp);

    tempcx = (tempcx - tempax) >> 2;

    tempbx += tempcx;
    push2 = tempbx;

    if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
          if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
             if(SiS_Pr->SiS_HDE == 1280) tempbx = (tempbx & 0xff00) | 0x47;
	  }
       }
    }

    if(SiS_Pr->UseCustomMode) {
       tempbx = SiS_Pr->CHSyncStart;
       if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
       tempbx += bridgeoffset;
    }

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdhrs 0x%x\n", tempbx);
#endif

    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1C,tempbx);	    /* lcdhrs */
    temp = (tempbx & 0x0F00) >> 4;
    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1D,0x0F,temp);

    tempbx = push2;

    tempcx <<= 1;
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       if(SiS_Pr->PanelXRes != SiS_Pr->SiS_HDE) tempcx >>= 2;
    }
    tempbx += tempcx;

    if(SiS_Pr->UseCustomMode) {
       tempbx = SiS_Pr->CHSyncEnd;
       if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
       tempbx += bridgeoffset;
    }

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdhre 0x%x\n", tempbx);
#endif

    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x21,tempbx);	    /* lcdhre */

    SiS_SetGroup2_Tail(SiS_Pr, ModeNo);

#ifdef SIS300
    SiS_Set300Part2Regs(SiS_Pr, HwInfo, ModeIdIndex, RefreshRateTableIndex, ModeNo);
#endif
#ifdef SIS315H
  } /* CRT2-LCD from table */
#endif  
}

/*********************************************/
/*         SET PART 3 REGISTER GROUP         */
/*********************************************/

static void
SiS_SetGroup3(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
              PSIS_HW_INFO HwInfo)
{
  USHORT modeflag, i;
  const UCHAR  *tempdi;

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) return;

  if(ModeNo<=0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }

#ifndef SIS_CP
  SiS_SetReg(SiS_Pr->SiS_Part3Port,0x00,0x00);
#endif

#ifdef SIS_CP
  SIS_CP_INIT301_CP
#endif

  if(SiS_Pr->SiS_TVMode & TVSetPAL) {
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x13,0xFA);
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x14,0xC8);
  } else {
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x13,0xF5);
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x14,0xB7);
  }

  if(SiS_Pr->SiS_TVMode & TVSetPALM) {
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x13,0xFA);
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x14,0xC8);
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x3D,0xA8);
  }

  tempdi = NULL;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     tempdi = SiS_Pr->SiS_HiTVGroup3Data;
     if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
        tempdi = SiS_Pr->SiS_HiTVGroup3Simu;
#if 0
        if(!(modeflag & Charx8Dot)) {
           tempdi = SiS_Pr->SiS_HiTVGroup3Text;
        }
#endif	
     }
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
     if(!(SiS_Pr->SiS_TVMode & TVSetYPbPr525i)) {
        tempdi = SiS_HiTVGroup3_1;
        if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) tempdi = SiS_HiTVGroup3_2;
     }
  }
  if(tempdi) {
     for(i=0; i<=0x3E; i++) {
        SiS_SetReg(SiS_Pr->SiS_Part3Port,i,tempdi[i]);
     }
     if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) {
	if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) {
	   SiS_SetReg(SiS_Pr->SiS_Part3Port,0x28,0x3f);
	}
     }
  }

#ifdef SIS_CP
  SIS_CP_INIT301_CP2
#endif
}

/*********************************************/
/*         SET PART 4 REGISTER GROUP         */
/*********************************************/

#ifdef SIS315H
static void
SiS_ShiftXPos(SiS_Private *SiS_Pr, int shift)
{
   USHORT temp, temp1, temp2;

   temp1 = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x1f);
   temp2 = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x20);
   temp = (USHORT)((int)((temp1 | ((temp2 & 0xf0) << 4))) + shift);
   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1f,temp);
   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x20,0x0f,((temp >> 4) & 0xf0));
   temp = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x2b) & 0x0f;
   temp = (USHORT)((int)(temp) + shift);
   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x2b,0xf0,(temp & 0x0f));
   temp1 = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x43);
   temp2 = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x42);
   temp = (USHORT)((int)((temp1 | ((temp2 & 0xf0) << 4))) + shift);
   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x43,temp);
   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x42,0x0f,((temp >> 4) & 0xf0));
}

static void
SiS_SetGroup4_C_ELV(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                    USHORT ModeNo, USHORT ModeIdIndex)
{
   USHORT temp, temp1, resinfo = 0;

   if(!(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV))) return;

   if(ModeNo > 0x13) {
      resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
   }

   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x3a,0x08);
   temp = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x3a);
   if(!(temp & 0x01)) {
      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x3a,0xdf);
      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x25,0xfc);
      if(HwInfo->jChipType < SIS_661) {
         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x25,0xf8);
      }
      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x0f,0xfb);
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p)      temp = 0x0000;
      else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) temp = 0x0002;
      else if(SiS_Pr->SiS_TVMode & TVSetHiVision)  temp = 0x0400;
      else					   temp = 0x0402;
      if(HwInfo->jChipType >= SIS_661) {
         temp1 = 0;
	 if(SiS_Pr->SiS_TVMode & TVAspect43) temp1 = 4;
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0f,0xfb,temp1);
	 if(SiS_Pr->SiS_TVMode & TVAspect43LB) temp |= 0x01;
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0x7c,(temp & 0xff));
      } else {
         temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x3b) & 0x03;
	 if(temp1 == 0x01) temp |= 0x01;
	 if(temp1 == 0x03) temp |= 0x04;  /* ? why not 0x10? */
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xf8,(temp & 0xff));
      }
      SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x3a,0xfb,(temp >> 8));

      if(HwInfo->jChipType >= SIS_661) { 		/* ? */
         if(SiS_Pr->SiS_TVMode & TVAspect43) {
            if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
	       if(resinfo == SIS_RI_1024x768) {
	          SiS_ShiftXPos(SiS_Pr, 97);
	       } else {
	          SiS_ShiftXPos(SiS_Pr, 111);
	       }
	    } else if(SiS_Pr->SiS_TVMode & TVSetHiVision) {
	       SiS_ShiftXPos(SiS_Pr, 136);
	    }
         }
      }
   }
}
#endif

static void
SiS_SetCRT2VCLK(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                 USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
  USHORT vclkindex;
  USHORT temp, reg1, reg2;

  if(SiS_Pr->UseCustomMode) {
     reg1 = SiS_Pr->CSR2B;
     reg2 = SiS_Pr->CSR2C;
  } else {
     vclkindex = SiS_GetVCLK2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                                 HwInfo);
     reg1 = SiS_Pr->SiS_VBVCLKData[vclkindex].Part4_A;
     reg2 = SiS_Pr->SiS_VBVCLKData[vclkindex].Part4_B;
  }

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0a,0x57);
 	SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0b,0x46);
	SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1f,0xf6);
     } else {
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0a,reg1);
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0b,reg2);
     }
  } else {
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0a,0x01);
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0b,reg2);
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0a,reg1);
  }
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x12,0x00);
  temp = 0x08;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) temp |= 0x20;
  SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x12,temp);
}

static void
SiS_SetGroup4(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
  	      USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
  USHORT tempax,tempcx,tempbx,modeflag,temp,temp2,resinfo;
  ULONG tempebx,tempeax,templong;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }

  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
           SiS_SetReg(SiS_Pr->SiS_Part4Port,0x24,0x0e);
        }
     }
  }

  if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302LV)) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x10,0x9f);
     }
  }

  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
        if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	   if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
	      SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x27,0x2c);
	   }
#ifdef SET_EMI
	   if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	      SiS_SetReg(SiS_Pr->SiS_Part4Port,0x2a,0x00);
	      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
	      SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x10);
	   }
#endif
	}
   	return;
     }
  }

  temp = SiS_Pr->SiS_RVBHCFACT;
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x13,temp);

  tempbx = SiS_Pr->SiS_RVBHCMAX;
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x14,tempbx);

  temp2 = (tempbx >> 1) & 0x0080;

  tempcx = SiS_Pr->SiS_VGAHT - 1;
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x16,tempcx);

  temp2 |= (((tempcx & 0xFF00) >> 8) << 3) & 0x00ff;

  tempcx = SiS_Pr->SiS_VGAVT - 1;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) tempcx -= 5;
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x17,tempcx);

  temp = temp2 | (tempcx >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x15,temp);

  tempbx = SiS_Pr->SiS_VGAHDE;
  if(modeflag & HalfDCLK) tempbx >>= 1;
  if(HwInfo->jChipType >= SIS_661) {
     if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
  }

  temp = 0xA0;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     temp = 0;
     if(tempbx > 800) {
        temp = 0xA0;
        if(tempbx != 1024) {
           temp = 0xC0;
           if(tempbx != 1280) temp = 0;
	}
     }
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(tempbx <= 800) {
        temp = 0x80;
     }
  } else {
     temp = 0x80;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        temp = 0;
        if(tempbx > 800) temp = 0x60;
     }
  }

  if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p | TVSetYPbPr750p)) {
     temp = 0;
     if(SiS_Pr->SiS_VGAHDE == 1024) temp = 0x20;
  }

  if(HwInfo->jChipType < SIS_661) {
     if(SiS_IsDualLink(SiS_Pr, HwInfo)) temp = 0;
  }

  if(SiS_Pr->SiS_VBType & VB_SIS301) {
     if(SiS_Pr->SiS_LCDResInfo != Panel_1280x1024)
        temp |= 0x0A;
  }

  SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0E,0x10,temp);

  tempebx = SiS_Pr->SiS_VDE;

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     if(!(temp & 0xE0)) tempebx >>=1;
  }

  tempcx = SiS_Pr->SiS_RVBHRS;
  temp = tempcx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x18,temp);

  tempeax = SiS_Pr->SiS_VGAVDE;
  tempcx |= 0x4000;
  if(tempeax <= tempebx) {
     tempcx ^= 0x4000;
  } else {
     tempeax -= tempebx;
  }

  templong = (tempeax * 256 * 1024) % tempebx;
  tempeax = (tempeax * 256 * 1024) / tempebx;
  tempebx = tempeax;
  if(templong != 0) tempebx++;

  temp = (USHORT)(tempebx & 0x000000FF);
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1B,temp);
  temp = (USHORT)((tempebx & 0x0000FF00) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1A,temp);

  tempbx = (USHORT)(tempebx >> 16);
  temp = tempbx & 0x00FF;
  temp <<= 4;
  temp |= ((tempcx & 0xFF00) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x19,temp);

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {

     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1C,0x28);

     tempbx = 0;
     tempax = SiS_Pr->SiS_VGAHDE;
     if(modeflag & HalfDCLK) 		tempax >>= 1;
     if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempax >>= 1;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	if(tempax > 800) tempax -= 800;
     } else /* if(SiS_Pr->SiS_VBInfo & TvNoHiviNoYPbPr) */ {    /* 651+301C */
        if(tempax > 800) {
	   tempbx = 8;
           if(tempax == 1024) tempax *= 25;
           else	              tempax *= 20;
	   temp = tempax % 32;
	   tempax /= 32;
	   tempax--;
	   if (temp!=0) tempax++;
        }
     }
     tempax--;
     temp = ((tempax & 0xFF00) >> 8) & 0x03;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoYPbPrHiVision) {	/* From 1.10.7w */
	if(ModeNo > 0x13) {					/* From 1.10.7w */
	   if(resinfo == SIS_RI_1024x768) tempax = 0x1f;	/* From 1.10.7w */
	   /* ax normally 0x1e */				/* From 1.10.7w */
	}							/* From 1.10.7w */
     }								/* From 1.10.7w */
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1D,tempax & 0x00FF);
     temp <<= 4;
     temp |= tempbx;
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1E,temp);

     if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	if(IS_SIS550650740660) {
	   temp = 0x0026;  /* 1.10.7w; 1.10.8r; needs corresponding code in Dis/EnableBridge! */
	} else {
	   temp = 0x0036;
	}
     } else {
	temp = 0x0036;
     }
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        if(!(SiS_Pr->SiS_TVMode & (TVSetNTSC1024 | TVSetHiVision | TVSetYPbPr750p | TVSetYPbPr525p))) {
	   temp |= 0x01;
	   if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
	      if(!(SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) {
  	         temp &= 0xFE;
	      }
	   }
	}
     }
     SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x1F,0xC0,temp);

     tempbx = SiS_Pr->SiS_HT;
     if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
     tempbx >>= 1;
     tempbx -= 2;
     temp = ((tempbx & 0x0700) >> 8) << 3;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x21,0xC0,temp);
     temp = tempbx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x22,temp);

     if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
           SiS_SetReg(SiS_Pr->SiS_Part4Port,0x24,0x0e);
	   /* LCD-too-dark-error-source, see FinalizeLCD() */
	}
	if(HwInfo->jChipType >= SIS_315H) {
	   if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
	      SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x27,0x2c);
	   }
	}
#ifdef SET_EMI
	if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x2a,0x00);
	   SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x10);
	}
#endif
     }

  }  /* 301B */

  SiS_SetCRT2VCLK(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
}

/*********************************************/
/*         SET PART 5 REGISTER GROUP         */
/*********************************************/

static void
SiS_SetGroup5(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
              PSIS_HW_INFO HwInfo)
{

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)  return;

  if(SiS_Pr->SiS_ModeType == ModeVGA) {
     if(!(SiS_Pr->SiS_VBInfo & (SetInSlaveMode | LoadDACFlag))) {
        SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
        SiS_LoadDAC(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
     }
  }
}

/*********************************************/
/*     MODIFY CRT1 GROUP FOR SLAVE MODE      */
/*********************************************/

static void
SiS_ModCRT1CRTC(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
  USHORT tempah,i,modeflag,j;
  USHORT ResIndex,DisplayType;
  const SiS_LVDSCRT1DataStruct *LVDSCRT1Ptr=NULL;

  if(ModeNo <= 0x13) modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  else               modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;

  if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
     (SiS_Pr->SiS_CustomT == CUT_BARCO1024) ||
     (SiS_Pr->SiS_CustomT == CUT_PANEL848))
     return;

  if(!(SiS_GetLVDSCRT1Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                          &ResIndex, &DisplayType))) {
     return;
  }

  if(HwInfo->jChipType < SIS_315H) {
     if(SiS_Pr->SiS_SetFlag & SetDOSMode) return;
  }

  switch(DisplayType) {
    case 0 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_1;           break;
    case 1 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_1_H;         break;
    case 2 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_2;           break;
    case 3 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_2_H;         break;
    case 4 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1;          break;
    case 5 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1_H;        break;
    case 6 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_2;          break;
    case 7 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_2_H;        break;
    case 8 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_1;         break;
    case 9 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_1_H;       break;
    case 10: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_2;         break;
    case 11: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_2_H;       break;
    case 12: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1XXXxXXX_1;           break;
    case 13: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1XXXxXXX_1_H;         break;
    case 14: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11400x1050_1;         break;
    case 15: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11400x1050_1_H;       break;
    case 16: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11400x1050_2;         break;
    case 17: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11400x1050_2_H;       break;
    case 18: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1UNTSC;               break;
    case 19: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1ONTSC;               break;
    case 20: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1UPAL;                break;
    case 21: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1OPAL;                break;
    case 22: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1320x480_1;           break; /* FSTN */
    case 23: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x600_1;          break;
    case 24: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x600_1_H;        break;
    case 25: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x600_2;          break;
    case 26: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x600_2_H;        break;
    case 27: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11152x768_1;          break;
    case 28: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11152x768_1_H;        break;
    case 29: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11152x768_2;          break;
    case 30: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11152x768_2_H;        break;
    case 36: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11600x1200_1;         break;
    case 37: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11600x1200_1_H;       break;
    case 38: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11600x1200_2;         break;
    case 39: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11600x1200_2_H;       break;
    case 40: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x768_1;          break;
    case 41: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x768_1_H;        break;
    case 42: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x768_2;          break;
    case 43: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x768_2_H;        break;
    case 50: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_1;           break;
    case 51: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_1_H;         break;
    case 52: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_2;           break;
    case 53: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_2_H;         break;
    case 54: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_3;           break;
    case 55: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_3_H;         break;
    case 99: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1SOPAL;               break;
    default: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1;          break;
  }

  SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);

  tempah = (LVDSCRT1Ptr + ResIndex)->CR[0];
  SiS_SetReg(SiS_Pr->SiS_P3d4,0x00,tempah);

  for(i=0x02,j=1;i<=0x05;i++,j++){
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3d4,i,tempah);
  }
  for(i=0x06,j=5;i<=0x07;i++,j++){
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3d4,i,tempah);
  }
  for(i=0x10,j=7;i<=0x11;i++,j++){
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3d4,i,tempah);
  }
  for(i=0x15,j=9;i<=0x16;i++,j++){
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3d4,i,tempah);
  }
  for(i=0x0A,j=11;i<=0x0C;i++,j++){
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3c4,i,tempah);
  }

  tempah = (LVDSCRT1Ptr + ResIndex)->CR[14];
  tempah &= 0xE0;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0x1f,tempah);

  tempah = (LVDSCRT1Ptr + ResIndex)->CR[14];
  tempah &= 0x01;
  tempah <<= 5;
  if(modeflag & DoubleScanMode)  tempah |= 0x080;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,~0x020,tempah);
}

/*********************************************/
/*              SET CRT2 ECLK                */
/*********************************************/

static void
SiS_SetCRT2ECLK(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
           USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT clkbase, vclkindex=0;
  UCHAR  sr2b, sr2c;

  if((SiS_Pr->SiS_LCDResInfo == Panel_640x480) || (SiS_Pr->SiS_LCDInfo & LCDPass11)) {
	SiS_Pr->SiS_SetFlag &= (~ProgrammingCRT2);
        if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK & 0x3f) == 2) {
	   RefreshRateTableIndex--;
	}
	vclkindex = SiS_GetVCLK2Ptr(SiS_Pr, ModeNo, ModeIdIndex,
                                    RefreshRateTableIndex, HwInfo);
	SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
  } else {
        vclkindex = SiS_GetVCLK2Ptr(SiS_Pr, ModeNo, ModeIdIndex,
                                    RefreshRateTableIndex, HwInfo);
  }

  sr2b = SiS_Pr->SiS_VCLKData[vclkindex].SR2B;
  sr2c = SiS_Pr->SiS_VCLKData[vclkindex].SR2C;

  if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) || (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
     if(SiS_Pr->SiS_UseROM) {
	if(ROMAddr[0x220] & 0x01) {
           sr2b = ROMAddr[0x227];
	   sr2c = ROMAddr[0x228];
	}
     }
  }

  clkbase = 0x02B;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
     if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
    	clkbase += 3;
     }
  }

  SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x20);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase,sr2b);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase+1,sr2c);
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x10);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase,sr2b);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase+1,sr2c);
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x00);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase,sr2b);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase+1,sr2c);
}

/*********************************************/
/*           SET UP CHRONTEL CHIPS           */
/*********************************************/

static void
SiS_SetCHTVReg(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
               USHORT RefreshRateTableIndex)
{
  USHORT temp, tempbx, tempcl;
  USHORT TVType, resindex;
  const SiS_CHTVRegDataStruct *CHTVRegData = NULL;

  if(ModeNo <= 0x13)
     tempcl = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  else
     tempcl = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;

  TVType = 0;
  if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) TVType += 1;
  if(SiS_Pr->SiS_TVMode & TVSetPAL) {
  	TVType += 2;
	if(SiS_Pr->SiS_ModeType > ModeVGA) {
	   if(SiS_Pr->SiS_CHSOverScan) TVType = 8;
	}
	if(SiS_Pr->SiS_TVMode & TVSetPALM) {
		TVType = 4;
		if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) TVType += 1;
	} else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
		TVType = 6;
		if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) TVType += 1;
	}
  }
  switch(TVType) {
     case  0: CHTVRegData = SiS_Pr->SiS_CHTVReg_UNTSC; break;
     case  1: CHTVRegData = SiS_Pr->SiS_CHTVReg_ONTSC; break;
     case  2: CHTVRegData = SiS_Pr->SiS_CHTVReg_UPAL;  break;
     case  3: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPAL;  break;
     case  4: CHTVRegData = SiS_Pr->SiS_CHTVReg_UPALM; break;
     case  5: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPALM; break;
     case  6: CHTVRegData = SiS_Pr->SiS_CHTVReg_UPALN; break;
     case  7: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPALN; break;
     case  8: CHTVRegData = SiS_Pr->SiS_CHTVReg_SOPAL; break;
     default: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPAL;  break;
  }
  resindex = tempcl & 0x3F;

  if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {

#ifdef SIS300

     /* Chrontel 7005 - I assume that it does not come with a 315 series chip */

     /* We don't support modes >800x600 */
     if (resindex > 5) return;

     if(SiS_Pr->SiS_TVMode & TVSetPAL) {
    	SiS_SetCH700x(SiS_Pr,0x4304);   /* 0x40=76uA (PAL); 0x03=15bit non-multi RGB*/
    	SiS_SetCH700x(SiS_Pr,0x6909);	/* Black level for PAL (105)*/
     } else {
    	SiS_SetCH700x(SiS_Pr,0x0304);   /* upper nibble=71uA (NTSC), 0x03=15bit non-multi RGB*/
    	SiS_SetCH700x(SiS_Pr,0x7109);	/* Black level for NTSC (113)*/
     }

     temp = CHTVRegData[resindex].Reg[0];
     tempbx=((temp&0x00FF)<<8)|0x00;	/* Mode register */
     SiS_SetCH700x(SiS_Pr,tempbx);
     temp = CHTVRegData[resindex].Reg[1];
     tempbx=((temp&0x00FF)<<8)|0x07;	/* Start active video register */
     SiS_SetCH700x(SiS_Pr,tempbx);
     temp = CHTVRegData[resindex].Reg[2];
     tempbx=((temp&0x00FF)<<8)|0x08;	/* Position overflow register */
     SiS_SetCH700x(SiS_Pr,tempbx);
     temp = CHTVRegData[resindex].Reg[3];
     tempbx=((temp&0x00FF)<<8)|0x0A;	/* Horiz Position register */
     SiS_SetCH700x(SiS_Pr,tempbx);
     temp = CHTVRegData[resindex].Reg[4];
     tempbx=((temp&0x00FF)<<8)|0x0B;	/* Vertical Position register */
     SiS_SetCH700x(SiS_Pr,tempbx);

     /* Set minimum flicker filter for Luma channel (SR1-0=00),
                minimum text enhancement (S3-2=10),
   	        maximum flicker filter for Chroma channel (S5-4=10)
	        =00101000=0x28 (When reading, S1-0->S3-2, and S3-2->S1-0!)
      */
     SiS_SetCH700x(SiS_Pr,0x2801);

     /* Set video bandwidth
            High bandwith Luma composite video filter(S0=1)
            low bandwith Luma S-video filter (S2-1=00)
	    disable peak filter in S-video channel (S3=0)
	    high bandwidth Chroma Filter (S5-4=11)
	    =00110001=0x31
     */
     SiS_SetCH700x(SiS_Pr,0xb103);       /* old: 3103 */

     /* Register 0x3D does not exist in non-macrovision register map
            (Maybe this is a macrovision register?)
      */
#ifndef SIS_CP
     SiS_SetCH70xx(SiS_Pr,0x003D);
#endif

     /* Register 0x10 only contains 1 writable bit (S0) for sensing,
            all other bits a read-only. Macrovision?
      */
     SiS_SetCH70xxANDOR(SiS_Pr,0x0010,0x1F);

     /* Register 0x11 only contains 3 writable bits (S0-S2) for
            contrast enhancement (set to 010 -> gain 1 Yout = 17/16*(Yin-30) )
      */
     SiS_SetCH70xxANDOR(SiS_Pr,0x0211,0xF8);

     /* Clear DSEN
      */
     SiS_SetCH70xxANDOR(SiS_Pr,0x001C,0xEF);

     if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {		/* ---- NTSC ---- */
       if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) {
         if(resindex == 0x04) {   			/* 640x480 overscan: Mode 16 */
      	   SiS_SetCH70xxANDOR(SiS_Pr,0x0020,0xEF);   	/* loop filter off */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0121,0xFE);      /* ACIV on, no need to set FSCI */
         } else if(resindex == 0x05) {    		/* 800x600 overscan: Mode 23 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0118,0xF0);	/* 0x18-0x1f: FSCI 469,762,048 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0C19,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001A,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001B,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001C,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001D,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001E,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001F,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x0120,0xEF);       /* Loop filter on for mode 23 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0021,0xFE);       /* ACIV off, need to set FSCI */
         }
       } else {
         if(resindex == 0x04) {     			 /* ----- 640x480 underscan; Mode 17 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0020,0xEF); 	 /* loop filter off */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0121,0xFE);
         } else if(resindex == 0x05) {   		 /* ----- 800x600 underscan: Mode 24 */
#if 0
           SiS_SetCH70xxANDOR(SiS_Pr,0x0118,0xF0);       /* (FSCI was 0x1f1c71c7 - this is for mode 22) */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0919,0xF0);	 /* FSCI for mode 24 is 428,554,851 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x081A,0xF0);       /* 198b3a63 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0b1B,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x041C,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x011D,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x061E,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x051F,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x0020,0xEF);       /* loop filter off for mode 24 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0021,0xFE);	 /* ACIV off, need to set FSCI */
#endif     /* All alternatives wrong (datasheet wrong?), don't use FSCI */
	   SiS_SetCH70xxANDOR(SiS_Pr,0x0020,0xEF); 	 /* loop filter off */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0121,0xFE);
         }
       }
     } else {						/* ---- PAL ---- */
           /* We don't play around with FSCI in PAL mode */
         if(resindex == 0x04) {
           SiS_SetCH70xxANDOR(SiS_Pr,0x0020,0xEF); 	/* loop filter off */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0121,0xFE);      /* ACIV on */
         } else {
           SiS_SetCH70xxANDOR(SiS_Pr,0x0020,0xEF); 	/* loop filter off */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0121,0xFE);      /* ACIV on */
         }
     }
     
#endif  /* 300 */

  } else {

     /* Chrontel 7019 - assumed that it does not come with a 300 series chip */

#ifdef SIS315H

     /* We don't support modes >1024x768 */
     if (resindex > 6) return;

     temp = CHTVRegData[resindex].Reg[0];
     if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
        temp |= 0x10;
     }
     tempbx=((temp & 0x00FF) << 8) | 0x00;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[1];
     tempbx=((temp & 0x00FF) << 8) | 0x01;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[2];
     tempbx=((temp & 0x00FF) << 8) | 0x02;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[3];
     tempbx=((temp & 0x00FF) << 8) | 0x04;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[4];
     tempbx=((temp & 0x00FF) << 8) | 0x03;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[5];
     tempbx=((temp & 0x00FF) << 8) | 0x05;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[6];
     tempbx=((temp & 0x00FF) << 8) | 0x06;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[7];
     if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
	temp = 0x66;
     }
     tempbx=((temp & 0x00FF) << 8) | 0x07;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[8];
     tempbx=((temp & 0x00FF) << 8) | 0x08;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[9];
     tempbx=((temp & 0x00FF) << 8) | 0x15;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[10];
     tempbx=((temp & 0x00FF) << 8) | 0x1f;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[11];
     tempbx=((temp & 0x00FF) << 8) | 0x0c;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[12];
     tempbx=((temp & 0x00FF) << 8) | 0x0d;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[13];
     tempbx=((temp & 0x00FF) << 8) | 0x0e;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[14];
     tempbx=((temp & 0x00FF) << 8) | 0x0f;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[15];
     tempbx=((temp & 0x00FF) << 8) | 0x10;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = SiS_GetCH701x(SiS_Pr,0x21) & ~0x02;
     /* D1 should be set for PAL, PAL-N and NTSC-J,
        but I won't do that for PAL unless somebody
	tells me to do so. Since the BIOS uses
	non-default CIV values and blacklevels,
	this might be compensated anyway.
      */
     if(SiS_Pr->SiS_TVMode & (TVSetPALN | TVSetNTSCJ)) temp |= 0x02;
     SiS_SetCH701x(SiS_Pr,((temp << 8) | 0x21));

#endif	/* 315 */

  }

#ifdef SIS_CP
  SIS_CP_INIT301_CP3
#endif

}

void
SiS_Chrontel701xBLOn(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT temp;

  /* Enable Chrontel 7019 LCD panel backlight */
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
     if(HwInfo->jChipType == SIS_740) {
        SiS_SetCH701x(SiS_Pr,0x6566);
     } else {
        temp = SiS_GetCH701x(SiS_Pr,0x66);
        temp |= 0x20;
	SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
     }
  }
}

void
SiS_Chrontel701xBLOff(SiS_Private *SiS_Pr)
{
  USHORT temp;

  /* Disable Chrontel 7019 LCD panel backlight */
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
     temp = SiS_GetCH701x(SiS_Pr,0x66);
     temp &= 0xDF;
     SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
  }
}

#ifdef SIS315H  /* ----------- 315 series only ---------- */

static void
SiS_ChrontelPowerSequencing(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR regtable[]      = { 0x67, 0x68, 0x69, 0x6a, 0x6b };
  UCHAR table1024_740[] = { 0x01, 0x02, 0x01, 0x01, 0x01 };
  UCHAR table1400_740[] = { 0x01, 0x6e, 0x01, 0x01, 0x01 };
  UCHAR asus1024_740[]  = { 0x19, 0x6e, 0x01, 0x19, 0x09 };
  UCHAR asus1400_740[]  = { 0x19, 0x6e, 0x01, 0x19, 0x09 };
  UCHAR table1024_650[] = { 0x01, 0x02, 0x01, 0x01, 0x02 };
  UCHAR table1400_650[] = { 0x01, 0x02, 0x01, 0x01, 0x02 };
  UCHAR *tableptr = NULL;
  int i;

  /* Set up Power up/down timing */

  if(HwInfo->jChipType == SIS_740) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
        if(SiS_Pr->SiS_CustomT == CUT_ASUSL3000D) tableptr = asus1024_740;
        else    			          tableptr = table1024_740;
     } else if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
               (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
	       (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200)) {
	if(SiS_Pr->SiS_CustomT == CUT_ASUSL3000D) tableptr = asus1400_740;
        else					  tableptr = table1400_740;
     } else return;
  } else {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
        tableptr = table1024_650;
     } else if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
               (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
	       (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200)) {
        tableptr = table1400_650;
     } else return;
  }

  for(i=0; i<5; i++) {
     SiS_SetCH701x(SiS_Pr,(tableptr[i] << 8) | regtable[i]);
  }
}

static void
SiS_SetCH701xForLCD(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR regtable[]      = { 0x1c, 0x5f, 0x64, 0x6f, 0x70, 0x71,
                            0x72, 0x73, 0x74, 0x76, 0x78, 0x7d, 0x66 };
  UCHAR table1024_740[] = { 0x60, 0x02, 0x00, 0x07, 0x40, 0xed,
                            0xa3, 0xc8, 0xc7, 0xac, 0xe0, 0x02, 0x44 };
  UCHAR table1280_740[] = { 0x60, 0x03, 0x11, 0x00, 0x40, 0xe3,
   			    0xad, 0xdb, 0xf6, 0xac, 0xe0, 0x02, 0x44 };
  UCHAR table1400_740[] = { 0x60, 0x03, 0x11, 0x00, 0x40, 0xe3,
                            0xad, 0xdb, 0xf6, 0xac, 0xe0, 0x02, 0x44 };
  UCHAR table1600_740[] = { 0x60, 0x04, 0x11, 0x00, 0x40, 0xe3,
  			    0xad, 0xde, 0xf6, 0xac, 0x60, 0x1a, 0x44 };
  UCHAR table1024_650[] = { 0x60, 0x02, 0x00, 0x07, 0x40, 0xed,
                            0xa3, 0xc8, 0xc7, 0xac, 0x60, 0x02 };
  UCHAR table1280_650[] = { 0x60, 0x03, 0x11, 0x00, 0x40, 0xe3,
   		   	    0xad, 0xdb, 0xf6, 0xac, 0xe0, 0x02 };
  UCHAR table1400_650[] = { 0x60, 0x03, 0x11, 0x00, 0x40, 0xef,
                            0xad, 0xdb, 0xf6, 0xac, 0x60, 0x02 };
  UCHAR table1600_650[] = { 0x60, 0x04, 0x11, 0x00, 0x40, 0xe3,
  			    0xad, 0xde, 0xf6, 0xac, 0x60, 0x1a };
  UCHAR *tableptr = NULL;
  USHORT tempbh;
  int i;

  if(HwInfo->jChipType == SIS_740) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)       tableptr = table1024_740;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) tableptr = table1280_740;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) tableptr = table1400_740;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) tableptr = table1600_740;
     else return;
  } else {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)       tableptr = table1024_650;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) tableptr = table1280_650;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) tableptr = table1400_650;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) tableptr = table1600_650;
     else return;
  }

  tempbh = SiS_GetCH701x(SiS_Pr,0x74);
  if((tempbh == 0xf6) || (tempbh == 0xc7)) {
     tempbh = SiS_GetCH701x(SiS_Pr,0x73);
     if(tempbh == 0xc8) {
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) return;
     } else if(tempbh == 0xdb) {
        if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) return;
	if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) return;
     } else if(tempbh == 0xde) {
        if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) return;
     }
  }

  if(HwInfo->jChipType == SIS_740) tempbh = 0x0d;
  else     			   tempbh = 0x0c;

  for(i = 0; i < tempbh; i++) {
     SiS_SetCH701x(SiS_Pr,(tableptr[i] << 8) | regtable[i]);
  }
  SiS_ChrontelPowerSequencing(SiS_Pr,HwInfo);
  tempbh = SiS_GetCH701x(SiS_Pr,0x1e);
  tempbh |= 0xc0;
  SiS_SetCH701x(SiS_Pr,(tempbh << 8) | 0x1e);

  if(HwInfo->jChipType == SIS_740) {
     tempbh = SiS_GetCH701x(SiS_Pr,0x1c);
     tempbh &= 0xfb;
     SiS_SetCH701x(SiS_Pr,(tempbh << 8) | 0x1c);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2d,0x03);
     tempbh = SiS_GetCH701x(SiS_Pr,0x64);
     tempbh |= 0x40;
     SiS_SetCH701x(SiS_Pr,(tempbh << 8) | 0x64);
     tempbh = SiS_GetCH701x(SiS_Pr,0x03);
     tempbh &= 0x3f;
     SiS_SetCH701x(SiS_Pr,(tempbh << 8) | 0x03);
  }
}

static void
SiS_ChrontelResetVSync(SiS_Private *SiS_Pr)
{
  unsigned char temp, temp1;

  temp1 = SiS_GetCH701x(SiS_Pr,0x49);
  SiS_SetCH701x(SiS_Pr,0x3e49);
  temp = SiS_GetCH701x(SiS_Pr,0x47);
  temp &= 0x7f;	/* Use external VSYNC */
  SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
  SiS_LongDelay(SiS_Pr,3);
  temp = SiS_GetCH701x(SiS_Pr,0x47);
  temp |= 0x80;	/* Use internal VSYNC */
  SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
  SiS_SetCH701x(SiS_Pr,(temp1 << 8) | 0x49);
}

void
SiS_Chrontel701xOn(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT temp;

  if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
     if(HwInfo->jChipType == SIS_740) {
        temp = SiS_GetCH701x(SiS_Pr,0x1c);
        temp |= 0x04;	/* Invert XCLK phase */
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x1c);
     }
     if(SiS_IsYPbPr(SiS_Pr, HwInfo)) {
        temp = SiS_GetCH701x(SiS_Pr,0x01);
	temp &= 0x3f;
	temp |= 0x80;	/* Enable YPrPb (HDTV) */
	SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x01);
     }
     if(SiS_IsChScart(SiS_Pr, HwInfo)) {
        temp = SiS_GetCH701x(SiS_Pr,0x01);
	temp &= 0x3f;
	temp |= 0xc0;	/* Enable SCART + CVBS */
	SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x01);
     }
     if(HwInfo->jChipType == SIS_740) {
        SiS_ChrontelResetVSync(SiS_Pr);
        SiS_SetCH701x(SiS_Pr,0x2049);   /* Enable TV path */
     } else {
        SiS_SetCH701x(SiS_Pr,0x2049);   /* Enable TV path */
        temp = SiS_GetCH701x(SiS_Pr,0x49);
        if(SiS_IsYPbPr(SiS_Pr,HwInfo)) {
           temp = SiS_GetCH701x(SiS_Pr,0x73);
	   temp |= 0x60;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x73);
        }
        temp = SiS_GetCH701x(SiS_Pr,0x47);
        temp &= 0x7f;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
        SiS_LongDelay(SiS_Pr,2);
        temp = SiS_GetCH701x(SiS_Pr,0x47);
        temp |= 0x80;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
     }
  }
}

void
SiS_Chrontel701xOff(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT temp;

  /* Complete power down of LVDS */
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
     if(HwInfo->jChipType == SIS_740) {
        SiS_LongDelay(SiS_Pr,1);
	SiS_GenericDelay(SiS_Pr,0x16ff);
	SiS_SetCH701x(SiS_Pr,0xac76);
	SiS_SetCH701x(SiS_Pr,0x0066);
     } else {
        SiS_LongDelay(SiS_Pr,2);
	temp = SiS_GetCH701x(SiS_Pr,0x76);
	temp &= 0xfc;
	SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x76);
	SiS_SetCH701x(SiS_Pr,0x0066);
     }
  }
}

static void
SiS_ChrontelResetDB(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
     USHORT temp;

     if(HwInfo->jChipType == SIS_740) {

        temp = SiS_GetCH701x(SiS_Pr,0x4a);  /* Version ID */
        temp &= 0x01;
        if(!temp) {

           if(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo)) {
	      temp = SiS_GetCH701x(SiS_Pr,0x49);
	      SiS_SetCH701x(SiS_Pr,0x3e49);
	   }
	   /* Reset Chrontel 7019 datapath */
           SiS_SetCH701x(SiS_Pr,0x1048);
           SiS_LongDelay(SiS_Pr,1);
           SiS_SetCH701x(SiS_Pr,0x1848);

	   if(SiS_WeHaveBacklightCtrl(SiS_Pr, HwInfo)) {
	      SiS_ChrontelResetVSync(SiS_Pr);
	      SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x49);
	   }

        } else {

	   /* Clear/set/clear GPIO */
           temp = SiS_GetCH701x(SiS_Pr,0x5c);
	   temp &= 0xef;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x5c);
	   temp = SiS_GetCH701x(SiS_Pr,0x5c);
	   temp |= 0x10;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x5c);
	   temp = SiS_GetCH701x(SiS_Pr,0x5c);
	   temp &= 0xef;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x5c);
	   temp = SiS_GetCH701x(SiS_Pr,0x61);
	   if(!temp) {
	      SiS_SetCH701xForLCD(SiS_Pr, HwInfo);
	   }
        }

     } else { /* 650 */
        /* Reset Chrontel 7019 datapath */
        SiS_SetCH701x(SiS_Pr,0x1048);
        SiS_LongDelay(SiS_Pr,1);
        SiS_SetCH701x(SiS_Pr,0x1848);
     }
}

void
SiS_ChrontelInitTVVSync(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
     USHORT temp;

     if(HwInfo->jChipType == SIS_740) {

        if(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo)) {
           SiS_ChrontelResetVSync(SiS_Pr);
        }

     } else {

        SiS_SetCH701x(SiS_Pr,0xaf76);  /* Power up LVDS block */
        temp = SiS_GetCH701x(SiS_Pr,0x49);
        temp &= 1;
        if(temp != 1) {  /* TV block powered? (0 = yes, 1 = no) */
	   temp = SiS_GetCH701x(SiS_Pr,0x47);
	   temp &= 0x70;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);  /* enable VSYNC */
	   SiS_LongDelay(SiS_Pr,3);
	   temp = SiS_GetCH701x(SiS_Pr,0x47);
	   temp |= 0x80;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);  /* disable VSYNC */
        }

     }
}

static void
SiS_ChrontelDoSomething3(SiS_Private *SiS_Pr, USHORT ModeNo, PSIS_HW_INFO HwInfo)
{
     USHORT temp,temp1;

     if(HwInfo->jChipType == SIS_740) {

        temp = SiS_GetCH701x(SiS_Pr,0x61);
        if(temp < 1) {
           temp++;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x61);
        }
        SiS_SetCH701x(SiS_Pr,0x4566);  /* Panel power on */
        SiS_SetCH701x(SiS_Pr,0xaf76);  /* All power on */
        SiS_LongDelay(SiS_Pr,1);
        SiS_GenericDelay(SiS_Pr,0x16ff);

     } else {  /* 650 */

        temp1 = 0;
        temp = SiS_GetCH701x(SiS_Pr,0x61);
        if(temp < 2) {
           temp++;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x61);
	   temp1 = 1;
        }
        SiS_SetCH701x(SiS_Pr,0xac76);
        temp = SiS_GetCH701x(SiS_Pr,0x66);
        temp |= 0x5f;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
        if(ModeNo > 0x13) {
           if(SiS_WeHaveBacklightCtrl(SiS_Pr, HwInfo)) {
	      SiS_GenericDelay(SiS_Pr,0x3ff);
	   } else {
	      SiS_GenericDelay(SiS_Pr,0x2ff);
	   }
        } else {
           if(!temp1)
	      SiS_GenericDelay(SiS_Pr,0x2ff);
        }
        temp = SiS_GetCH701x(SiS_Pr,0x76);
        temp |= 0x03;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x76);
        temp = SiS_GetCH701x(SiS_Pr,0x66);
        temp &= 0x7f;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
        SiS_LongDelay(SiS_Pr,1);

     }
}

static void
SiS_ChrontelDoSomething2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
     USHORT temp,tempcl,tempch;

     SiS_LongDelay(SiS_Pr, 1);
     tempcl = 3;
     tempch = 0;

     do {
       temp = SiS_GetCH701x(SiS_Pr,0x66);
       temp &= 0x04;  /* PLL stable? -> bail out */
       if(temp == 0x04) break;

       if(HwInfo->jChipType == SIS_740) {
          /* Power down LVDS output, PLL normal operation */
          SiS_SetCH701x(SiS_Pr,0xac76);
       }

       SiS_SetCH701xForLCD(SiS_Pr,HwInfo);

       if(tempcl == 0) {
           if(tempch == 3) break;
	   SiS_ChrontelResetDB(SiS_Pr,HwInfo);
	   tempcl = 3;
	   tempch++;
       }
       tempcl--;
       temp = SiS_GetCH701x(SiS_Pr,0x76);
       temp &= 0xfb;  /* Reset PLL */
       SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x76);
       SiS_LongDelay(SiS_Pr,2);
       temp = SiS_GetCH701x(SiS_Pr,0x76);
       temp |= 0x04;  /* PLL normal operation */
       SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x76);
       if(HwInfo->jChipType == SIS_740) {
          SiS_SetCH701x(SiS_Pr,0xe078);	/* PLL loop filter */
       } else {
          SiS_SetCH701x(SiS_Pr,0x6078);
       }
       SiS_LongDelay(SiS_Pr,2);
    } while(0);

    SiS_SetCH701x(SiS_Pr,0x0077);  /* MV? */
}

void
SiS_ChrontelDoSomething1(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
     USHORT temp;

     temp = SiS_GetCH701x(SiS_Pr,0x03);
     temp |= 0x80;	/* Set datapath 1 to TV   */
     temp &= 0xbf;	/* Set datapath 2 to LVDS */
     SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x03);

     if(HwInfo->jChipType == SIS_740) {

        temp = SiS_GetCH701x(SiS_Pr,0x1c);
        temp &= 0xfb;	/* Normal XCLK phase */
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x1c);

        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2d,0x03);

        temp = SiS_GetCH701x(SiS_Pr,0x64);
        temp |= 0x40;	/* ? Bit not defined */
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x64);

        temp = SiS_GetCH701x(SiS_Pr,0x03);
        temp &= 0x3f;	/* D1 input to both LVDS and TV */
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x03);

	if(SiS_Pr->SiS_CustomT == CUT_ASUSL3000D) {
	   SiS_SetCH701x(SiS_Pr,0x4063); /* LVDS off */
	   SiS_LongDelay(SiS_Pr, 1);
	   SiS_SetCH701x(SiS_Pr,0x0063); /* LVDS on */
	   SiS_ChrontelResetDB(SiS_Pr, HwInfo);
	   SiS_ChrontelDoSomething2(SiS_Pr, HwInfo);
	   SiS_ChrontelDoSomething3(SiS_Pr, 0, HwInfo);
	} else {
           temp = SiS_GetCH701x(SiS_Pr,0x66);
           if(temp != 0x45) {
              SiS_ChrontelResetDB(SiS_Pr, HwInfo);
              SiS_ChrontelDoSomething2(SiS_Pr, HwInfo);
              SiS_ChrontelDoSomething3(SiS_Pr, 0, HwInfo);
           }
	}

     } else { /* 650 */

        SiS_ChrontelResetDB(SiS_Pr,HwInfo);
        SiS_ChrontelDoSomething2(SiS_Pr,HwInfo);
        temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x34);
        SiS_ChrontelDoSomething3(SiS_Pr,temp,HwInfo);
        SiS_SetCH701x(SiS_Pr,0xaf76);  /* All power on, LVDS normal operation */

     }

}
#endif  /* 315 series  */

/*********************************************/
/*      MAIN: SET CRT2 REGISTER GROUP        */
/*********************************************/

BOOLEAN
SiS_SetCRT2Group(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo)
{
#ifdef SIS300
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
#endif
   USHORT ModeIdIndex, RefreshRateTableIndex;
#if 0
   USHORT temp;
#endif   

   SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;

   if(!SiS_Pr->UseCustomMode) {
      SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex);
   } else {
      ModeIdIndex = 0;
   }

   /* Used for shifting CR33 */
   SiS_Pr->SiS_SelectCRT2Rate = 4;

   SiS_UnLockCRT2(SiS_Pr, HwInfo);

   RefreshRateTableIndex = SiS_GetRatePtr(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);

   SiS_SaveCRT2Info(SiS_Pr,ModeNo);

   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_DisableBridge(SiS_Pr,HwInfo);
      if((SiS_Pr->SiS_IF_DEF_LVDS == 1) && (HwInfo->jChipType == SIS_730)) {
         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,0x80);
      }
      SiS_SetCRT2ModeRegs(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   }

   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
      SiS_LockCRT2(SiS_Pr, HwInfo);
      SiS_DisplayOn(SiS_Pr);
      return TRUE;
   }

   SiS_GetCRT2Data(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);

   /* Set up Panel Link for LVDS and LCDA */
   SiS_Pr->SiS_LCDHDES = SiS_Pr->SiS_LCDVDES = 0;
   if( (SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
       ((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) ||
       ((HwInfo->jChipType >= SIS_315H) && (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) ) {
      SiS_GetLVDSDesData(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
   }

#ifdef LINUX_XF86
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "(init301: LCDHDES 0x%03x LCDVDES 0x%03x)\n", SiS_Pr->SiS_LCDHDES, SiS_Pr->SiS_LCDVDES);
  xf86DrvMsg(0, X_INFO, "(init301: HDE     0x%03x VDE     0x%03x)\n", SiS_Pr->SiS_HDE, SiS_Pr->SiS_VDE);
  xf86DrvMsg(0, X_INFO, "(init301: VGAHDE  0x%03x VGAVDE  0x%03x)\n", SiS_Pr->SiS_VGAHDE, SiS_Pr->SiS_VGAVDE);
  xf86DrvMsg(0, X_INFO, "(init301: HT      0x%03x VT      0x%03x)\n", SiS_Pr->SiS_HT, SiS_Pr->SiS_VT);
  xf86DrvMsg(0, X_INFO, "(init301: VGAHT   0x%03x VGAVT   0x%03x)\n", SiS_Pr->SiS_VGAHT, SiS_Pr->SiS_VGAVT);
#endif
#endif

   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_SetGroup1(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
   }

   if(SiS_Pr->SiS_VBType & VB_SISVB) {

        if(SiS_Pr->SiS_SetFlag & LowModeTests) {

	   SiS_SetGroup2(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
#ifdef SIS315H
	   SiS_SetGroup2_C_ELV(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
#endif
      	   SiS_SetGroup3(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
      	   SiS_SetGroup4(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
#ifdef SIS315H
	   SiS_SetGroup4_C_ELV(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
#endif
      	   SiS_SetGroup5(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);

	   SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex, HwInfo);

	   /* For 301BDH (Panel link initialization): */
	   if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
	      if(SiS_Pr->SiS_LCDResInfo != Panel_640x480) {
		 if(!((SiS_Pr->SiS_SetFlag & SetDOSMode) && ((ModeNo == 0x03) || (ModeNo == 0x10)))) {
		    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
		       SiS_ModCRT1CRTC(SiS_Pr,ModeNo,ModeIdIndex,
		                       RefreshRateTableIndex,HwInfo);
		    }
                 }
	      }
	      SiS_SetCRT2ECLK(SiS_Pr,ModeNo,ModeIdIndex,
		              RefreshRateTableIndex,HwInfo);
	   }
        }

   } else {

        SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex, HwInfo);

        if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
    	   SiS_ModCRT1CRTC(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,HwInfo);
	}

        SiS_SetCRT2ECLK(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,HwInfo);

	if(SiS_Pr->SiS_SetFlag & LowModeTests) {
     	   if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
	         if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
#ifdef SIS315H
		    SiS_SetCH701xForLCD(SiS_Pr,HwInfo);
#endif
		 }
	      }
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
       		 SiS_SetCHTVReg(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex);
	      }
     	   }
	}

   }

#ifdef SIS300
   if(HwInfo->jChipType < SIS_315H) {
      if(SiS_Pr->SiS_SetFlag & LowModeTests) {
	 if(SiS_Pr->SiS_UseOEM) {
	    if((SiS_Pr->SiS_UseROM) && (SiS_Pr->SiS_UseOEM == -1)) {
	       if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
	          SiS_OEM300Setting(SiS_Pr,HwInfo,ModeNo,ModeIdIndex,
	       			    RefreshRateTableIndex);
	       }
	    } else {
       	       SiS_OEM300Setting(SiS_Pr,HwInfo,ModeNo,ModeIdIndex,
	       			 RefreshRateTableIndex);
	    }
	 }
	 if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
            if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
	       (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
	       SetOEMLCDData2(SiS_Pr, HwInfo, ModeNo, ModeIdIndex,RefreshRateTableIndex);
	    }
            if(HwInfo->jChipType == SIS_730) {
               SiS_DisplayOn(SiS_Pr);
	    }
         }
      }
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
          if(HwInfo->jChipType != SIS_730) {
             SiS_DisplayOn(SiS_Pr);
	  }
      }
   }
#endif

#ifdef SIS315H
   if(HwInfo->jChipType >= SIS_315H) {
      if(SiS_Pr->SiS_SetFlag & LowModeTests) {
	 if(HwInfo->jChipType < SIS_661) {
	    SiS_FinalizeLCD(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
            SiS_OEM310Setting(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
	 } else {
	    SiS_OEM661Setting(SiS_Pr, HwInfo, ModeNo, ModeIdIndex, RefreshRateTableIndex);
	 }
         SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x40);
      }
   }
#endif

   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_EnableBridge(SiS_Pr, HwInfo);
   }

   SiS_DisplayOn(SiS_Pr);

   if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	 /* Disable LCD panel when using TV */
	 SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFF,0x0C);
      } else {
	 /* Disable TV when using LCD */
	 SiS_SetCH70xxANDOR(SiS_Pr,0x010E,0xF8);
      }
   }

   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_LockCRT2(SiS_Pr,HwInfo);
   }

   return TRUE;
}


/*********************************************/
/*     ENABLE/DISABLE LCD BACKLIGHT (SIS)    */
/*********************************************/

void
SiS_SiS30xBLOn(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  /* Switch on LCD backlight on SiS30xLV */
  SiS_DDC2Delay(SiS_Pr,0xff00);
  if(!(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x26) & 0x02)) {
     SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
     SiS_WaitVBRetrace(SiS_Pr,HwInfo);
  }
  if(!(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x26) & 0x01)) {
     SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
  }
}

void
SiS_SiS30xBLOff(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  /* Switch off LCD backlight on SiS30xLV */
  SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFE);
  SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFD);
  SiS_DDC2Delay(SiS_Pr,0xe000);
}

/*********************************************/
/*          DDC RELATED FUNCTIONS            */
/*********************************************/

static void
SiS_SetupDDCN(SiS_Private *SiS_Pr)
{
  SiS_Pr->SiS_DDC_NData = ~SiS_Pr->SiS_DDC_Data;
  SiS_Pr->SiS_DDC_NClk  = ~SiS_Pr->SiS_DDC_Clk;
  if((SiS_Pr->SiS_DDC_Index == 0x11) && (SiS_Pr->SiS_SensibleSR11)) {
     SiS_Pr->SiS_DDC_NData &= 0x0f;
     SiS_Pr->SiS_DDC_NClk  &= 0x0f;
  }
}

#ifdef SIS300
static UCHAR *
SiS_SetTrumpBlockLoop(SiS_Private *SiS_Pr, UCHAR *dataptr)
{
  int i, j, num;
  USHORT tempah,temp;
  UCHAR *mydataptr;

  for(i=0; i<20; i++) {				/* Do 20 attempts to write */
     mydataptr = dataptr;
     num = *mydataptr++;
     if(!num) return mydataptr;
     if(i) {
        SiS_SetStop(SiS_Pr);
	SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT*2);
     }
     if(SiS_SetStart(SiS_Pr)) continue;		/* Set start condition */
     tempah = SiS_Pr->SiS_DDC_DeviceAddr;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write DAB (S0=0=write) */
     if(temp) continue;				/*    (ERROR: no ack) */
     tempah = *mydataptr++;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write register number */
     if(temp) continue;				/*    (ERROR: no ack) */
     for(j=0; j<num; j++) {
        tempah = *mydataptr++;
        temp = SiS_WriteDDC2Data(SiS_Pr,tempah);/* Write DAB (S0=0=write) */
	if(temp) break;
     }
     if(temp) continue;
     if(SiS_SetStop(SiS_Pr)) continue;
     return mydataptr;
  }
  return NULL;
}

static BOOLEAN
SiS_SetTrumpionBlock(SiS_Private *SiS_Pr, UCHAR *dataptr)
{
  SiS_Pr->SiS_DDC_DeviceAddr = 0xF0;  		/* DAB (Device Address Byte) */
  SiS_Pr->SiS_DDC_Index = 0x11;			/* Bit 0 = SC;  Bit 1 = SD */
  SiS_Pr->SiS_DDC_Data  = 0x02;              	/* Bitmask in IndexReg for Data */
  SiS_Pr->SiS_DDC_Clk   = 0x01;              	/* Bitmask in IndexReg for Clk */
  SiS_SetupDDCN(SiS_Pr);

  SiS_SetSwitchDDC2(SiS_Pr);

  while(*dataptr) {
     dataptr = SiS_SetTrumpBlockLoop(SiS_Pr, dataptr);
     if(!dataptr) return FALSE;
  }
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "Trumpion block success\n");
#endif
  return TRUE;
}
#endif

/* The Chrontel 700x is connected to the 630/730 via
 * the 630/730's DDC/I2C port.
 *
 * On 630(S)T chipset, the index changed from 0x11 to
 * 0x0a, possibly for working around the DDC problems
 */

static BOOLEAN
SiS_SetChReg(SiS_Private *SiS_Pr, USHORT tempbx, USHORT myor)
{
  USHORT tempah,temp,i;

  for(i=0; i<20; i++) {				/* Do 20 attempts to write */
     if(i) {
        SiS_SetStop(SiS_Pr);
	SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT);
     }
     if(SiS_SetStart(SiS_Pr)) continue;		/* Set start condition */
     tempah = SiS_Pr->SiS_DDC_DeviceAddr;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write DAB (S0=0=write) */
     if(temp) continue;				/*    (ERROR: no ack) */
     tempah = tempbx & 0x00FF;			/* Write RAB */
     tempah |= myor;                            /* (700x: set bit 7, see datasheet) */
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);
     if(temp) continue;				/*    (ERROR: no ack) */
     tempah = (tempbx & 0xFF00) >> 8;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write data */
     if(temp) continue;				/*    (ERROR: no ack) */
     if(SiS_SetStop(SiS_Pr)) continue;		/* Set stop condition */
     SiS_Pr->SiS_ChrontelInit = 1;
     return TRUE;
  }
  return FALSE;
}

#ifdef SIS300
/* Write Trumpion register */
void
SiS_SetTrumpReg(SiS_Private *SiS_Pr, USHORT tempbx)
{
  SiS_Pr->SiS_DDC_DeviceAddr = 0xF0;  		/* DAB (Device Address Byte) */
  SiS_Pr->SiS_DDC_Index = 0x11;			/* Bit 0 = SC;  Bit 1 = SD */
  SiS_Pr->SiS_DDC_Data  = 0x02;              	/* Bitmask in IndexReg for Data */
  SiS_Pr->SiS_DDC_Clk   = 0x01;              	/* Bitmask in IndexReg for Clk */
  SiS_SetupDDCN(SiS_Pr);
  SiS_SetChReg(SiS_Pr, tempbx, 0);
}
#endif

/* Write to Chrontel 700x */
/* Parameter is [Data (S15-S8) | Register no (S7-S0)] */
void
SiS_SetCH700x(SiS_Private *SiS_Pr, USHORT tempbx)
{
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;  		/* DAB (Device Address Byte) */

  if(!(SiS_Pr->SiS_ChrontelInit)) {
     SiS_Pr->SiS_DDC_Index = 0x11;		/* Bit 0 = SC;  Bit 1 = SD */
     SiS_Pr->SiS_DDC_Data  = 0x02;              /* Bitmask in IndexReg for Data */
     SiS_Pr->SiS_DDC_Clk   = 0x01;              /* Bitmask in IndexReg for Clk */
     SiS_SetupDDCN(SiS_Pr);
  }

  if( (!(SiS_SetChReg(SiS_Pr, tempbx, 0x80))) &&
      (!(SiS_Pr->SiS_ChrontelInit)) ) {
     SiS_Pr->SiS_DDC_Index = 0x0a;		/* Bit 7 = SC;  Bit 6 = SD */
     SiS_Pr->SiS_DDC_Data  = 0x80;              /* Bitmask in IndexReg for Data */
     SiS_Pr->SiS_DDC_Clk   = 0x40;              /* Bitmask in IndexReg for Clk */
     SiS_SetupDDCN(SiS_Pr);

     SiS_SetChReg(SiS_Pr, tempbx, 0x80);
  }
}

/* Write to Chrontel 701x */
/* Parameter is [Data (S15-S8) | Register no (S7-S0)] */
void
SiS_SetCH701x(SiS_Private *SiS_Pr, USHORT tempbx)
{
  SiS_Pr->SiS_DDC_Index = 0x11;			/* Bit 0 = SC;  Bit 1 = SD */
  SiS_Pr->SiS_DDC_Data  = 0x08;                 /* Bitmask in IndexReg for Data */
  SiS_Pr->SiS_DDC_Clk   = 0x04;                 /* Bitmask in IndexReg for Clk */
  SiS_SetupDDCN(SiS_Pr);
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;  		/* DAB (Device Address Byte) */
  SiS_SetChReg(SiS_Pr, tempbx, 0);
}

void
SiS_SetCH70xx(SiS_Private *SiS_Pr, USHORT tempbx)
{
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 1)
     SiS_SetCH700x(SiS_Pr,tempbx);
  else
     SiS_SetCH701x(SiS_Pr,tempbx);
}

static USHORT
SiS_GetChReg(SiS_Private *SiS_Pr, USHORT myor)
{
  USHORT tempah,temp,i;

  for(i=0; i<20; i++) {				/* Do 20 attempts to read */
     if(i) {
        SiS_SetStop(SiS_Pr);
	SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT);
     }
     if(SiS_SetStart(SiS_Pr)) continue;		/* Set start condition */
     tempah = SiS_Pr->SiS_DDC_DeviceAddr;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write DAB (S0=0=write) */
     if(temp) continue;				/*        (ERROR: no ack) */
     tempah = SiS_Pr->SiS_DDC_ReadAddr | myor;	/* Write RAB (700x: | 0x80) */
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);
     if(temp) continue;				/*        (ERROR: no ack) */
     if (SiS_SetStart(SiS_Pr)) continue;	/* Re-start */
     tempah = SiS_Pr->SiS_DDC_DeviceAddr | 0x01;/* DAB | 0x01 = Read */
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* DAB (S0=1=read) */
     if(temp) continue;				/*        (ERROR: no ack) */
     tempah = SiS_ReadDDC2Data(SiS_Pr,tempah);	/* Read byte */
     if(SiS_SetStop(SiS_Pr)) continue;		/* Stop condition */
     SiS_Pr->SiS_ChrontelInit = 1;
     return(tempah);
  }
  return 0xFFFF;
}

#ifdef SIS300
/* Read from Trumpion */
USHORT
SiS_GetTrumpReg(SiS_Private *SiS_Pr, USHORT tempbx)
{
  SiS_Pr->SiS_DDC_DeviceAddr = 0xF0;	/* DAB */
  SiS_Pr->SiS_DDC_Index = 0x11;		/* Bit 0 = SC;  Bit 1 = SD */
  SiS_Pr->SiS_DDC_Data  = 0x02;         /* Bitmask in IndexReg for Data */
  SiS_Pr->SiS_DDC_Clk   = 0x01;         /* Bitmask in IndexReg for Clk */
  SiS_SetupDDCN(SiS_Pr);
  SiS_Pr->SiS_DDC_ReadAddr = tempbx;
  return(SiS_GetChReg(SiS_Pr,0));
}
#endif

/* Read from Chrontel 700x */
/* Parameter is [Register no (S7-S0)] */
USHORT
SiS_GetCH700x(SiS_Private *SiS_Pr, USHORT tempbx)
{
  USHORT result;

  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;		/* DAB */

  if(!(SiS_Pr->SiS_ChrontelInit)) {
     SiS_Pr->SiS_DDC_Index = 0x11;		/* Bit 0 = SC;  Bit 1 = SD */
     SiS_Pr->SiS_DDC_Data  = 0x02;              /* Bitmask in IndexReg for Data */
     SiS_Pr->SiS_DDC_Clk   = 0x01;              /* Bitmask in IndexReg for Clk */
     SiS_SetupDDCN(SiS_Pr);
  }

  SiS_Pr->SiS_DDC_ReadAddr = tempbx;

  if( ((result = SiS_GetChReg(SiS_Pr,0x80)) == 0xFFFF) &&
      (!SiS_Pr->SiS_ChrontelInit) ) {

     SiS_Pr->SiS_DDC_Index = 0x0a;
     SiS_Pr->SiS_DDC_Data  = 0x80;
     SiS_Pr->SiS_DDC_Clk   = 0x40;
     SiS_SetupDDCN(SiS_Pr);

     result = SiS_GetChReg(SiS_Pr,0x80);
  }
  return(result);
}

/* Read from Chrontel 701x */
/* Parameter is [Register no (S7-S0)] */
USHORT
SiS_GetCH701x(SiS_Private *SiS_Pr, USHORT tempbx)
{
  SiS_Pr->SiS_DDC_Index = 0x11;			/* Bit 0 = SC;  Bit 1 = SD */
  SiS_Pr->SiS_DDC_Data  = 0x08;                 /* Bitmask in IndexReg for Data */
  SiS_Pr->SiS_DDC_Clk   = 0x04;                 /* Bitmask in IndexReg for Clk */
  SiS_SetupDDCN(SiS_Pr);
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;		/* DAB */

  SiS_Pr->SiS_DDC_ReadAddr = tempbx;

  return(SiS_GetChReg(SiS_Pr,0));
}

/* Read from Chrontel 70xx */
/* Parameter is [Register no (S7-S0)] */
USHORT
SiS_GetCH70xx(SiS_Private *SiS_Pr, USHORT tempbx)
{
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 1)
     return(SiS_GetCH700x(SiS_Pr, tempbx));
  else
     return(SiS_GetCH701x(SiS_Pr, tempbx));
}

/* Our own DDC functions */
USHORT
SiS_InitDDCRegs(SiS_Private *SiS_Pr, unsigned long VBFlags, int VGAEngine,
                USHORT adaptnum, USHORT DDCdatatype, BOOLEAN checkcr32)
{
     unsigned char ddcdtype[] = { 0xa0, 0xa0, 0xa0, 0xa2, 0xa6 };
     unsigned char flag, cr32;
     USHORT        temp = 0, myadaptnum = adaptnum;

     if(adaptnum != 0) {
        if(!(VBFlags & (VB_301|VB_301B|VB_301C|VB_302B))) return 0xFFFF;
	if((VBFlags & VB_30xBDH) && (adaptnum == 1)) return 0xFFFF;
     }	
     
     /* adapternum for SiS bridges: 0 = CRT1, 1 = LCD, 2 = VGA2 */
     
     SiS_Pr->SiS_ChrontelInit = 0;   /* force re-detection! */

     SiS_Pr->SiS_DDC_SecAddr = 0;
     SiS_Pr->SiS_DDC_DeviceAddr = ddcdtype[DDCdatatype];
     SiS_Pr->SiS_DDC_Port = SiS_Pr->SiS_P3c4;
     SiS_Pr->SiS_DDC_Index = 0x11;
     flag = 0xff;

     cr32 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x32);

#if 0
     if(VBFlags & VB_SISBRIDGE) {
	if(myadaptnum == 0) {
	   if(!(cr32 & 0x20)) {
	      myadaptnum = 2;
	      if(!(cr32 & 0x10)) {
	         myadaptnum = 1;
		 if(!(cr32 & 0x08)) {
		    myadaptnum = 0;
		 }
	      }
	   }
        }
     }
#endif

     if(VGAEngine == SIS_300_VGA) {		/* 300 series */
	
        if(myadaptnum != 0) {
	   flag = 0;
	   if(VBFlags & VB_SISBRIDGE) {
	      SiS_Pr->SiS_DDC_Port = SiS_Pr->SiS_Part4Port;
              SiS_Pr->SiS_DDC_Index = 0x0f;
	   }
        }

	if(!(VBFlags & VB_301)) {
	   if((cr32 & 0x80) && (checkcr32)) {
              if(myadaptnum >= 1) {
	         if(!(cr32 & 0x08)) {
	             myadaptnum = 1;
		     if(!(cr32 & 0x10)) return 0xFFFF;
                 }
	      }
	   }
	}

	temp = 4 - (myadaptnum * 2);
	if(flag) temp = 0;

     } else {						/* 315/330 series */

     	/* here we simplify: 0 = CRT1, 1 = CRT2 (VGA, LCD) */

	if(VBFlags & VB_SISBRIDGE) {
	   if(myadaptnum == 2) {
	      myadaptnum = 1;
           }
	}

        if(myadaptnum == 1) {
     	   flag = 0;
	   if(VBFlags & VB_SISBRIDGE) {
	      SiS_Pr->SiS_DDC_Port = SiS_Pr->SiS_Part4Port;
              SiS_Pr->SiS_DDC_Index = 0x0f;
	   }
        }

        if((cr32 & 0x80) && (checkcr32)) {
           if(myadaptnum >= 1) {
	      if(!(cr32 & 0x08)) {
	         myadaptnum = 1;
		 if(!(cr32 & 0x10)) return 0xFFFF;
	      }
	   }
        }

        temp = myadaptnum;
        if(myadaptnum == 1) {
           temp = 0;
	   if(VBFlags & VB_LVDS) flag = 0xff;
        }

	if(flag) temp = 0;
    }
    
    SiS_Pr->SiS_DDC_Data = 0x02 << temp;
    SiS_Pr->SiS_DDC_Clk  = 0x01 << temp;

    SiS_SetupDDCN(SiS_Pr);

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "DDC Port %x Index %x Shift %d\n",
    		SiS_Pr->SiS_DDC_Port, SiS_Pr->SiS_DDC_Index, temp);
#endif
    
    return 0;
}

USHORT
SiS_WriteDABDDC(SiS_Private *SiS_Pr)
{
   if(SiS_SetStart(SiS_Pr)) return 0xFFFF;
   if(SiS_WriteDDC2Data(SiS_Pr, SiS_Pr->SiS_DDC_DeviceAddr)) {
  	return 0xFFFF;
   }
   if(SiS_WriteDDC2Data(SiS_Pr, SiS_Pr->SiS_DDC_SecAddr)) {
   	return 0xFFFF;
   }
   return(0);
}

USHORT
SiS_PrepareReadDDC(SiS_Private *SiS_Pr)
{
   if(SiS_SetStart(SiS_Pr)) return 0xFFFF;
   if(SiS_WriteDDC2Data(SiS_Pr, (SiS_Pr->SiS_DDC_DeviceAddr | 0x01))) {
   	return 0xFFFF;
   }
   return(0);
}

USHORT
SiS_PrepareDDC(SiS_Private *SiS_Pr)
{
   if(SiS_WriteDABDDC(SiS_Pr)) SiS_WriteDABDDC(SiS_Pr);
   if(SiS_PrepareReadDDC(SiS_Pr)) return(SiS_PrepareReadDDC(SiS_Pr));
   return(0);
}

void
SiS_SendACK(SiS_Private *SiS_Pr, USHORT yesno)
{
   SiS_SetSCLKLow(SiS_Pr);
   if(yesno) {
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
      		      SiS_Pr->SiS_DDC_Index,
                      SiS_Pr->SiS_DDC_NData,
		      SiS_Pr->SiS_DDC_Data);
   } else {
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
      		      SiS_Pr->SiS_DDC_Index,
                      SiS_Pr->SiS_DDC_NData,
		      0);
   }
   SiS_SetSCLKHigh(SiS_Pr);
}

USHORT
SiS_DoProbeDDC(SiS_Private *SiS_Pr)
{
    unsigned char mask, value;
    USHORT  temp, ret=0;
    BOOLEAN failed = FALSE;

    SiS_SetSwitchDDC2(SiS_Pr);
    if(SiS_PrepareDDC(SiS_Pr)) {
         SiS_SetStop(SiS_Pr);
#ifdef TWDEBUG
         xf86DrvMsg(0, X_INFO, "Probe: Prepare failed\n");
#endif
         return(0xFFFF);
    }
    mask = 0xf0;
    value = 0x20;
    if(SiS_Pr->SiS_DDC_DeviceAddr == 0xa0) {
       temp = (unsigned char)SiS_ReadDDC2Data(SiS_Pr, 0);
       SiS_SendACK(SiS_Pr, 0);
       if(temp == 0) {
           mask = 0xff;
	   value = 0xff;
       } else {
           failed = TRUE;
	   ret = 0xFFFF;
#ifdef TWDEBUG
           xf86DrvMsg(0, X_INFO, "Probe: Read 1 failed\n");
#endif
       }
    }
    if(failed == FALSE) {
       temp = (unsigned char)SiS_ReadDDC2Data(SiS_Pr, 0);
       SiS_SendACK(SiS_Pr, 1);
       temp &= mask;
       if(temp == value) ret = 0;
       else {
          ret = 0xFFFF;
#ifdef TWDEBUG
          xf86DrvMsg(0, X_INFO, "Probe: Read 2 failed\n");
#endif
          if(SiS_Pr->SiS_DDC_DeviceAddr == 0xa0) {
             if(temp == 0x30) ret = 0;
          }
       }
    }
    SiS_SetStop(SiS_Pr);
    return(ret);
}

USHORT
SiS_ProbeDDC(SiS_Private *SiS_Pr)
{
   USHORT flag;

   flag = 0x180;
   SiS_Pr->SiS_DDC_DeviceAddr = 0xa0;
   if(!(SiS_DoProbeDDC(SiS_Pr))) flag |= 0x02;
   SiS_Pr->SiS_DDC_DeviceAddr = 0xa2;
   if(!(SiS_DoProbeDDC(SiS_Pr))) flag |= 0x08;
   SiS_Pr->SiS_DDC_DeviceAddr = 0xa6;
   if(!(SiS_DoProbeDDC(SiS_Pr))) flag |= 0x10;
   if(!(flag & 0x1a)) flag = 0;
   return(flag);
}

USHORT
SiS_ReadDDC(SiS_Private *SiS_Pr, USHORT DDCdatatype, unsigned char *buffer)
{
   USHORT flag, length, i;
   unsigned char chksum,gotcha;

   if(DDCdatatype > 4) return 0xFFFF;  

   flag = 0;
   SiS_SetSwitchDDC2(SiS_Pr);
   if(!(SiS_PrepareDDC(SiS_Pr))) {
      length = 127;
      if(DDCdatatype != 1) length = 255;
      chksum = 0;
      gotcha = 0;
      for(i=0; i<length; i++) {
         buffer[i] = (unsigned char)SiS_ReadDDC2Data(SiS_Pr, 0);
	 chksum += buffer[i];
	 gotcha |= buffer[i];
	 SiS_SendACK(SiS_Pr, 0);
      }
      buffer[i] = (unsigned char)SiS_ReadDDC2Data(SiS_Pr, 0);
      chksum += buffer[i];
      SiS_SendACK(SiS_Pr, 1);
      if(gotcha) flag = (USHORT)chksum;
      else flag = 0xFFFF;
   } else {
      flag = 0xFFFF;
   }
   SiS_SetStop(SiS_Pr);
   return(flag);
}

/* Our private DDC functions

   It complies somewhat with the corresponding VESA function
   in arguments and return values.

   Since this is probably called before the mode is changed,
   we use our pre-detected pSiS-values instead of SiS_Pr as
   regards chipset and video bridge type.

   Arguments:
       adaptnum: 0=CRT1, 1=LCD, 2=VGA2
                 CRT2 DDC is only supported on SiS301, 301B, 302B.
       DDCdatatype: 0=Probe, 1=EDID, 2=EDID+VDIF, 3=EDID V2 (P&D), 4=EDID V2 (FPDI-2)
       buffer: ptr to 256 data bytes which will be filled with read data.

   Returns 0xFFFF if error, otherwise
       if DDCdatatype > 0:  Returns 0 if reading OK (included a correct checksum)
       if DDCdatatype = 0:  Returns supported DDC modes

 */
USHORT
SiS_HandleDDC(SiS_Private *SiS_Pr, unsigned long VBFlags, int VGAEngine,
              USHORT adaptnum, USHORT DDCdatatype, unsigned char *buffer)
{
   unsigned char sr1f,cr17=1;
   USHORT result;

   if(adaptnum > 2) return 0xFFFF;
   if(DDCdatatype > 4) return 0xFFFF;
   if((!(VBFlags & VB_VIDEOBRIDGE)) && (adaptnum > 0)) return 0xFFFF;
   if(SiS_InitDDCRegs(SiS_Pr, VBFlags, VGAEngine, adaptnum, DDCdatatype, FALSE) == 0xFFFF) return 0xFFFF;

   sr1f = SiS_GetReg(SiS_Pr->SiS_P3c4,0x1f);
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x1f,0x3f,0x04);
   if(VGAEngine == SIS_300_VGA) {
      cr17 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x17) & 0x80;
      if(!cr17) {
         SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x17,0x80);
         SiS_SetReg(SiS_Pr->SiS_P3c4,0x00,0x01);
         SiS_SetReg(SiS_Pr->SiS_P3c4,0x00,0x03);
      }
   }
   if((sr1f) || (!cr17)) {
      SiS_WaitRetrace1(SiS_Pr);
      SiS_WaitRetrace1(SiS_Pr);
      SiS_WaitRetrace1(SiS_Pr);
      SiS_WaitRetrace1(SiS_Pr);
   }

   if(DDCdatatype == 0) {
      result = SiS_ProbeDDC(SiS_Pr);
   } else {
      result = SiS_ReadDDC(SiS_Pr, DDCdatatype, buffer);
   }
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x1f,sr1f);
   if(VGAEngine == SIS_300_VGA) {
      SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x17,0x7f,cr17);
   }
   return result;
}

#ifdef LINUX_XF86

static BOOLEAN
checkedid1(unsigned char *buffer)
{
   /* Check header */
   if((buffer[0] != 0x00) ||
      (buffer[1] != 0xff) ||
      (buffer[2] != 0xff) ||
      (buffer[3] != 0xff) ||
      (buffer[4] != 0xff) ||
      (buffer[5] != 0xff) ||
      (buffer[6] != 0xff) ||
      (buffer[7] != 0x00))
      return FALSE;

   /* Check EDID version and revision */
   if((buffer[0x12] != 1) || (buffer[0x13] > 4)) return FALSE;

   /* Check week of manufacture for sanity */
   if(buffer[0x10] > 53) return FALSE;

   /* Check year of manufacture for sanity */
   if(buffer[0x11] > 40) return FALSE;

   return TRUE;
}

static BOOLEAN
checkedid2(unsigned char *buffer)
{
   USHORT year = buffer[6] | (buffer[7] << 8);

   /* Check EDID version */
   if((buffer[0] & 0xf0) != 0x20) return FALSE;

   /* Check week of manufacture for sanity */
   if(buffer[5] > 53) return FALSE;

   /* Check year of manufacture for sanity */
   if((year != 0) && ((year < 1990) || (year > 2030))) return FALSE;

   return TRUE;
}

/* Sense the LCD parameters (CR36, CR37) via DDC */
/* SiS30x(B) only */
USHORT
SiS_SenseLCDDDC(SiS_Private *SiS_Pr, SISPtr pSiS)
{
   USHORT DDCdatatype, paneltype, flag, xres=0, yres=0;
   USHORT index, myindex, lumsize, numcodes;
   unsigned char cr37=0, seekcode;
   BOOLEAN checkexpand = FALSE;
   int retry, i;
   unsigned char buffer[256];

   for(i=0; i<7; i++) SiS_Pr->CP_DataValid[i] = FALSE;
   SiS_Pr->CP_HaveCustomData = FALSE;
   SiS_Pr->CP_MaxX = SiS_Pr->CP_MaxY = SiS_Pr->CP_MaxClock = 0;
   SiS_Pr->CP_PreferredX = SiS_Pr->CP_PreferredY = 0;
   SiS_Pr->CP_PreferredIndex = -1;

   if(!(pSiS->VBFlags & (VB_301|VB_301B|VB_301C|VB_302B))) return 0;
   if(pSiS->VBFlags & VB_30xBDH) return 0;
  
   if(SiS_InitDDCRegs(SiS_Pr, pSiS->VBFlags, pSiS->VGAEngine, 1, 0, FALSE) == 0xFFFF) return 0;
   
   SiS_Pr->SiS_DDC_SecAddr = 0x00;
   
   /* Probe supported DA's */
   flag = SiS_ProbeDDC(SiS_Pr);
#ifdef TWDEBUG
   xf86DrvMsg(pSiS->pScrn->scrnIndex, X_INFO,
   	"CRT2 DDC capabilities 0x%x\n", flag);
#endif	
   if(flag & 0x10) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa6;	/* EDID V2 (FP) */
      DDCdatatype = 4;
   } else if(flag & 0x08) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa2;	/* EDID V2 (P&D-D Monitor) */
      DDCdatatype = 3;
   } else if(flag & 0x02) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa0;	/* EDID V1 */
      DDCdatatype = 1;
   } else return 0;				/* no DDC support (or no device attached) */
   
   /* Read the entire EDID */
   retry = 2;
   do {
      if(SiS_ReadDDC(SiS_Pr, DDCdatatype, buffer)) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: DDC read failed (attempt %d), %s\n",
		(3-retry), (retry == 1) ? "giving up" : "retrying");
	 retry--;
	 if(retry == 0) return 0xFFFF;
      } else break;
   } while(1);

#ifdef TWDEBUG
   for(i=0; i<256; i+=16) {
       xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
       	"%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x\n",
	buffer[i],    buffer[i+1], buffer[i+2], buffer[i+3],
	buffer[i+4],  buffer[i+5], buffer[i+6], buffer[i+7],
	buffer[i+8],  buffer[i+9], buffer[i+10], buffer[i+11],
	buffer[i+12], buffer[i+13], buffer[i+14], buffer[i+15]);
   }
#endif   
   
   /* Analyze EDID and retrieve LCD panel information */
   paneltype = 0;
   switch(DDCdatatype) {
   case 1:							/* Analyze EDID V1 */
      /* Catch a few clear cases: */
      if(!(checkedid1(buffer))) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: EDID corrupt\n");
	 return 0;
      }

      if(!(buffer[0x14] & 0x80)) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	        "CRT2: Attached display expects analog input (0x%02x)\n",
		buffer[0x14]);
      	 return 0;
      }
      
      if((buffer[0x18] & 0x18) != 0x08) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: Attached display is not of RGB but of %s type (0x%02x)\n", 
		((buffer[0x18] & 0x18) == 0x00) ? "monochrome/greyscale" :
		  ( ((buffer[0x18] & 0x18) == 0x10) ? "non-RGB multicolor" : 
		     "undefined"),
		buffer[0x18]);
	 return 0;
      }

      /* Now analyze the first Detailed Timing Block and see
       * if the preferred timing mode is stored there. If so,
       * check if this is a standard panel for which we already
       * know the timing.
       */

      paneltype = Panel_Custom;
      checkexpand = FALSE;

      if(buffer[0x18] & 0x02) {

         xres = buffer[0x38] | ((buffer[0x3a] & 0xf0) << 4);
         yres = buffer[0x3b] | ((buffer[0x3d] & 0xf0) << 4);

	 SiS_Pr->CP_PreferredX = xres;
	 SiS_Pr->CP_PreferredY = yres;

         switch(xres) {
#if 0	    /* Treat as custom */
            case 800:
	        if(yres == 600) {
	     	   paneltype = Panel_800x600;
	     	   checkexpand = TRUE;
	        }
	        break;
#endif
            case 1024:
	        if(yres == 768) {
	     	   paneltype = Panel_1024x768;
	     	   checkexpand = TRUE;
	        }
	        break;
	    case 1280:
	        if(yres == 1024) {
	     	   paneltype = Panel_1280x1024;
		   checkexpand = TRUE;
	        } else if(yres == 960) {
	           if(pSiS->VGAEngine == SIS_300_VGA) {
		      paneltype = Panel300_1280x960;
		   } else {
		      paneltype = Panel310_1280x960;
		   }
	        } else if(yres == 768) {
		   if( ((buffer[0x36] | (buffer[0x37] << 8)) == 8100) &&
		       ((buffer[0x39] | ((buffer[0x3a] & 0x0f) << 8)) == (1688 - 1280)) &&
		       ((buffer[0x3c] | ((buffer[0x3d] & 0x0f) << 8)) == (802 - 768)) ) {
	       	      paneltype = Panel_1280x768;
		      checkexpand = FALSE;
		      cr37 |= 0x10;
		   }
	        }
	        break;
	    case 1400:
	        if(pSiS->VGAEngine == SIS_315_VGA) {
	           if(yres == 1050) {
	              paneltype = Panel310_1400x1050;
		      checkexpand = TRUE;
	           }
	        }
      	        break;
#if 0	    /* Treat this as custom, as we have no valid timing data yet */
	    case 1600:
	        if(pSiS->VGAEngine == SIS_315_VGA) {
		   if(pSiS->VBFlags & VB_301C) {
	              if(yres == 1200) {
	                 paneltype = Panel310_1600x1200;
		         checkexpand = TRUE;
		      }
	           }
	        }
      	        break;
#endif
         }

	 if(paneltype != Panel_Custom) {
	    if((buffer[0x47] & 0x18) == 0x18) {
	       cr37 |= ((((buffer[0x47] & 0x06) ^ 0x06) << 5) | 0x20);
	    } else {
	       /* What now? There is no digital separate output timing... */
	       xf86DrvMsg(pSiS->pScrn->scrnIndex, X_WARNING,
	       	   "CRT2: Unable to retrieve Sync polarity information\n");
	       cr37 |= 0xc0;  /* Default */
	    }
	 }

      }

      /* If we still don't know what panel this is, we take it
       * as a custom panel and derive the timing data from the
       * detailed timing blocks
       */
      if(paneltype == Panel_Custom) {

         BOOLEAN havesync = FALSE;
	 int i, temp, base = 0x36;
	 unsigned long estpack;
	 unsigned short estx[] = {
	 	720, 720, 640, 640, 640, 640, 800, 800,
		800, 800, 832,1024,1024,1024,1024,1280,
		1152
	 };
	 unsigned short esty[] = {
	 	400, 400, 480, 480, 480, 480, 600, 600,
		600, 600, 624, 768, 768, 768, 768,1024,
		870
	 };

	 paneltype = 0;
	 SiS_Pr->CP_Supports64048075 = TRUE;

	 /* Find the maximum resolution */

	 /* 1. From Established timings */
	 estpack = (buffer[0x23] << 9) | (buffer[0x24] << 1) | ((buffer[0x25] >> 7) & 0x01);
	 for(i=16; i>=0; i--) {
	     if(estpack & (1 << i)) {
	        if(estx[16 - i] > SiS_Pr->CP_MaxX) SiS_Pr->CP_MaxX = estx[16 - i];
		if(esty[16 - i] > SiS_Pr->CP_MaxY) SiS_Pr->CP_MaxY = esty[16 - i];
	     }
	 }

	 /* 2. From Standard Timings */
	 for(i=0x26; i < 0x36; i+=2) {
	    if((buffer[i] != 0x01) && (buffer[i+1] != 0x01)) {
	       temp = (buffer[i] + 31) * 8;
	       if(temp > SiS_Pr->CP_MaxX) SiS_Pr->CP_MaxX = temp;
	       switch((buffer[i+1] & 0xc0) >> 6) {
	       case 0x03: temp = temp * 9 / 16; break;
	       case 0x02: temp = temp * 4 / 5;  break;
	       case 0x01: temp = temp * 3 / 4;  break;
	       }
	       if(temp > SiS_Pr->CP_MaxY) SiS_Pr->CP_MaxY = temp;
	    }
	 }

	 /* Now extract the Detailed Timings and convert them into modes */

         for(i = 0; i < 4; i++, base += 18) {

	    /* Is this a detailed timing block or a monitor descriptor? */
	    if(buffer[base] || buffer[base+1] || buffer[base+2]) {

      	       xres = buffer[base+2] | ((buffer[base+4] & 0xf0) << 4);
               yres = buffer[base+5] | ((buffer[base+7] & 0xf0) << 4);

	       SiS_Pr->CP_HDisplay[i] = xres;
	       SiS_Pr->CP_HSyncStart[i] = xres + (buffer[base+8] | ((buffer[base+11] & 0xc0) << 2));
               SiS_Pr->CP_HSyncEnd[i]   = SiS_Pr->CP_HSyncStart[i] + (buffer[base+9] | ((buffer[base+11] & 0x30) << 4));
	       SiS_Pr->CP_HTotal[i] = xres + (buffer[base+3] | ((buffer[base+4] & 0x0f) << 8));
	       SiS_Pr->CP_HBlankStart[i] = xres + 1;
	       SiS_Pr->CP_HBlankEnd[i] = SiS_Pr->CP_HTotal[i];

	       SiS_Pr->CP_VDisplay[i] = yres;
               SiS_Pr->CP_VSyncStart[i] = yres + (((buffer[base+10] & 0xf0) >> 4) | ((buffer[base+11] & 0x0c) << 2));
               SiS_Pr->CP_VSyncEnd[i] = SiS_Pr->CP_VSyncStart[i] + ((buffer[base+10] & 0x0f) | ((buffer[base+11] & 0x03) << 4));
	       SiS_Pr->CP_VTotal[i] = yres + (buffer[base+6] | ((buffer[base+7] & 0x0f) << 8));
	       SiS_Pr->CP_VBlankStart[i] = yres + 1;
	       SiS_Pr->CP_VBlankEnd[i] = SiS_Pr->CP_VTotal[i];

	       SiS_Pr->CP_Clock[i] = (buffer[base] | (buffer[base+1] << 8)) * 10;

	       SiS_Pr->CP_DataValid[i] = TRUE;

	       /* Sort out invalid timings, interlace and too high clocks */
	       if((SiS_Pr->CP_HDisplay[i] & 7)						||
	          (SiS_Pr->CP_HDisplay[i] > SiS_Pr->CP_HSyncStart[i])  			||
	          (SiS_Pr->CP_HDisplay[i] >= SiS_Pr->CP_HSyncEnd[i])   			||
	          (SiS_Pr->CP_HDisplay[i] >= SiS_Pr->CP_HTotal[i])     			||
	          (SiS_Pr->CP_HSyncStart[i] >= SiS_Pr->CP_HSyncEnd[i]) 			||
	          (SiS_Pr->CP_HSyncStart[i] > SiS_Pr->CP_HTotal[i])    			||
	          (SiS_Pr->CP_HSyncEnd[i] > SiS_Pr->CP_HTotal[i])      			||
	          (SiS_Pr->CP_VDisplay[i] > SiS_Pr->CP_VSyncStart[i])  			||
	          (SiS_Pr->CP_VDisplay[i] >= SiS_Pr->CP_VSyncEnd[i])   			||
	          (SiS_Pr->CP_VDisplay[i] >= SiS_Pr->CP_VTotal[i])     			||
	          (SiS_Pr->CP_VSyncStart[i] > SiS_Pr->CP_VSyncEnd[i])  			||
	          (SiS_Pr->CP_VSyncStart[i] > SiS_Pr->CP_VTotal[i])    			||
	          (SiS_Pr->CP_VSyncEnd[i] > SiS_Pr->CP_VTotal[i])      			||
		  (((pSiS->VBFlags & VB_301C) && (SiS_Pr->CP_Clock[i] > 162500)) ||
	           ((!(pSiS->VBFlags & VB_301C)) && (SiS_Pr->CP_Clock[i] > 108200)))	||
		  (buffer[base+17] & 0x80)) {

	          SiS_Pr->CP_DataValid[i] = FALSE;

	       } else {

	          paneltype = Panel_Custom;

		  SiS_Pr->CP_HaveCustomData = TRUE;

		  if(xres > SiS_Pr->CP_MaxX) SiS_Pr->CP_MaxX = xres;
	          if(yres > SiS_Pr->CP_MaxY) SiS_Pr->CP_MaxY = yres;
		  if(SiS_Pr->CP_Clock[i] > SiS_Pr->CP_MaxClock) SiS_Pr->CP_MaxClock = SiS_Pr->CP_Clock[i];

		  if((SiS_Pr->CP_PreferredX == xres) && (SiS_Pr->CP_PreferredY == yres)) {
	             SiS_Pr->CP_PreferredIndex = i;
	          }

		  SiS_Pr->CP_Vendor = buffer[9] | (buffer[8] << 8);
		  SiS_Pr->CP_Product = buffer[10] | (buffer[11] << 8);

		  /* By default we drive the LCD at 75Hz in 640x480 mode; if
		   * the panel does not provide this mode, use 60hz
		   */
		  if(!(buffer[0x23] & 0x04)) SiS_Pr->CP_Supports64048075 = FALSE;

	          /* We must assume the panel can scale, since we have
	           * no scaling data
		   */
	          checkexpand = FALSE;
	          cr37 |= 0x10;

	          /* Extract the sync polarisation information. This only works
	           * if the Flags indicate a digital separate output.
	           */
	          if((buffer[base+17] & 0x18) == 0x18) {
		     SiS_Pr->CP_HSync_P[i] = (buffer[base+17] & 0x02) ? TRUE : FALSE;
		     SiS_Pr->CP_VSync_P[i] = (buffer[base+17] & 0x04) ? TRUE : FALSE;
		     SiS_Pr->CP_SyncValid[i] = TRUE;
		     if(!havesync) {
	                cr37 |= ((((buffer[base+17] & 0x06) ^ 0x06) << 5) | 0x20);
			havesync = TRUE;
	   	     }
	          } else {
		     SiS_Pr->CP_SyncValid[i] = FALSE;
		  }
	       }
            }
	 }
	 if(!havesync) {
	    xf86DrvMsg(pSiS->pScrn->scrnIndex, X_WARNING,
	       	   "CRT2: Unable to retrieve Sync polarity information\n");
   	 }
      }

      if(paneltype && checkexpand) {
         /* If any of the Established low-res modes is supported, the
	  * panel can scale automatically. For 800x600 panels, we only 
	  * check the even lower ones.
	  */
	 if(paneltype == Panel_800x600) {
	    if(buffer[0x23] & 0xfc) cr37 |= 0x10;
	 } else {
            if(buffer[0x23])	    cr37 |= 0x10;
	 }
      }
       
      break;
      
   case 3:							/* Analyze EDID V2 */
   case 4:
      index = 0;

      if(!(checkedid2(buffer))) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: EDID corrupt\n");
	 return 0;
      }

      if((buffer[0x41] & 0x0f) == 0x03) {
         index = 0x42 + 3;
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: Display supports TMDS input on primary interface\n");
      } else if((buffer[0x41] & 0xf0) == 0x30) {
         index = 0x46 + 3;
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: Display supports TMDS input on secondary interface\n");
      } else {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: Display does not support TMDS video interface (0x%02x)\n", 
		buffer[0x41]);
	 return 0;
      }

      paneltype = Panel_Custom;
      SiS_Pr->CP_MaxX = xres = buffer[0x76] | (buffer[0x77] << 8);
      SiS_Pr->CP_MaxY = yres = buffer[0x78] | (buffer[0x79] << 8);
      switch(xres) {
#if 0
         case 800:
	     if(yres == 600) {
	     	paneltype = Panel_800x600;
	     	checkexpand = TRUE;
	     }
	     break;
#endif
         case 1024:
	     if(yres == 768) {
	     	paneltype = Panel_1024x768;
	     	checkexpand = TRUE;
	     }
	     break;
	 case 1280:
	     if(yres == 960) {
	        if(pSiS->VGAEngine == SIS_315_VGA) {
	     	   paneltype = Panel310_1280x960;
		} else {
		   paneltype = Panel300_1280x960;
		}
	     } else if(yres == 1024) {
	     	paneltype = Panel_1280x1024;
		checkexpand = TRUE;
	     }
	     /* 1280x768 treated as custom here */
	     break;
	 case 1400:
	     if(pSiS->VGAEngine == SIS_315_VGA) {
	        if(yres == 1050) {
	           paneltype = Panel310_1400x1050;
		   checkexpand = TRUE;
	        }
	     }
      	     break;
#if 0    /* Treat this one as custom since we have no timing data yet */
	 case 1600:
	     if(pSiS->VGAEngine == SIS_315_VGA) {
	        if(pSiS->VBFlags & VB_301C) {
	           if(yres == 1200) {
	              paneltype = Panel310_1600x1200;
		      checkexpand = TRUE;
		   }
	        }
	     }
      	     break;
#endif
      }

      /* Determine if RGB18 or RGB24 */
      if(index) {
         if((buffer[index] == 0x20) || (buffer[index] == 0x34)) {
	    cr37 |= 0x01;
	 }
      }

      if(checkexpand) {
         /* TODO - for now, we let the panel scale */
	 cr37 |= 0x10;
      }

      /* Now seek 4-Byte Timing codes and extract sync pol info */
      index = 0x80;
      if(buffer[0x7e] & 0x20) {			    /* skip Luminance Table (if provided) */
         lumsize = buffer[0x80] & 0x1f;
	 if(buffer[0x80] & 0x80) lumsize *= 3;
	 lumsize++;  /* luminance header byte */
	 index += lumsize;
      }
      index += (((buffer[0x7e] & 0x1c) >> 2) * 8);   /* skip Frequency Ranges */
      index += ((buffer[0x7e] & 0x03) * 27);         /* skip Detailed Range Limits */
      numcodes = (buffer[0x7f] & 0xf8) >> 3;
      if(numcodes) {
         myindex = index;
 	 seekcode = (xres - 256) / 16;
     	 for(i=0; i<numcodes; i++) {
	    if(buffer[myindex] == seekcode) break;
	    myindex += 4;
	 }
	 if(buffer[myindex] == seekcode) {
	    cr37 |= ((((buffer[myindex + 1] & 0x0c) ^ 0x0c) << 4) | 0x20);
	 } else {
	    xf86DrvMsg(pSiS->pScrn->scrnIndex, X_WARNING,
	        "CRT2: Unable to retrieve Sync polarity information\n");
	 }
      } else {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_WARNING,
	     "CRT2: Unable to retrieve Sync polarity information\n");
      }

      /* Now seek the detailed timing descriptions for custom panels */
      if(paneltype == Panel_Custom) {

         SiS_Pr->CP_Supports64048075 = TRUE;

         index += (numcodes * 4);
	 numcodes = buffer[0x7f] & 0x07;
	 for(i=0; i<numcodes; i++, index += 18) {
	    xres = buffer[index+2] | ((buffer[index+4] & 0xf0) << 4);
            yres = buffer[index+5] | ((buffer[index+7] & 0xf0) << 4);

	    SiS_Pr->CP_HDisplay[i] = xres;
	    SiS_Pr->CP_HSyncStart[i] = xres + (buffer[index+8] | ((buffer[index+11] & 0xc0) << 2));
            SiS_Pr->CP_HSyncEnd[i] = SiS_Pr->CP_HSyncStart[i] + (buffer[index+9] | ((buffer[index+11] & 0x30) << 4));
	    SiS_Pr->CP_HTotal[i] = xres + (buffer[index+3] | ((buffer[index+4] & 0x0f) << 8));
	    SiS_Pr->CP_HBlankStart[i] = xres + 1;
	    SiS_Pr->CP_HBlankEnd[i] = SiS_Pr->CP_HTotal[i];

	    SiS_Pr->CP_VDisplay[i] = yres;
            SiS_Pr->CP_VSyncStart[i] = yres + (((buffer[index+10] & 0xf0) >> 4) | ((buffer[index+11] & 0x0c) << 2));
            SiS_Pr->CP_VSyncEnd[i] = SiS_Pr->CP_VSyncStart[i] + ((buffer[index+10] & 0x0f) | ((buffer[index+11] & 0x03) << 4));
	    SiS_Pr->CP_VTotal[i] = yres + (buffer[index+6] | ((buffer[index+7] & 0x0f) << 8));
	    SiS_Pr->CP_VBlankStart[i] = yres + 1;
	    SiS_Pr->CP_VBlankEnd[i] = SiS_Pr->CP_VTotal[i];

	    SiS_Pr->CP_Clock[i] = (buffer[index] | (buffer[index+1] << 8)) * 10;

	    SiS_Pr->CP_DataValid[i] = TRUE;

	    if((SiS_Pr->CP_HDisplay[i] & 7)						||
	       (SiS_Pr->CP_HDisplay[i] > SiS_Pr->CP_HSyncStart[i])  			||
	       (SiS_Pr->CP_HDisplay[i] >= SiS_Pr->CP_HSyncEnd[i])   			||
	       (SiS_Pr->CP_HDisplay[i] >= SiS_Pr->CP_HTotal[i])     			||
	       (SiS_Pr->CP_HSyncStart[i] >= SiS_Pr->CP_HSyncEnd[i]) 			||
	       (SiS_Pr->CP_HSyncStart[i] > SiS_Pr->CP_HTotal[i])    			||
	       (SiS_Pr->CP_HSyncEnd[i] > SiS_Pr->CP_HTotal[i])      			||
	       (SiS_Pr->CP_VDisplay[i] > SiS_Pr->CP_VSyncStart[i])  			||
	       (SiS_Pr->CP_VDisplay[i] >= SiS_Pr->CP_VSyncEnd[i])   			||
	       (SiS_Pr->CP_VDisplay[i] >= SiS_Pr->CP_VTotal[i])     			||
	       (SiS_Pr->CP_VSyncStart[i] > SiS_Pr->CP_VSyncEnd[i])  			||
	       (SiS_Pr->CP_VSyncStart[i] > SiS_Pr->CP_VTotal[i])    			||
	       (SiS_Pr->CP_VSyncEnd[i] > SiS_Pr->CP_VTotal[i])      			||
	       (((pSiS->VBFlags & VB_301C) && (SiS_Pr->CP_Clock[i] > 162500)) ||
	        ((!(pSiS->VBFlags & VB_301C)) && (SiS_Pr->CP_Clock[i] > 108200)))	||
	       (buffer[index + 17] & 0x80)) {

	       SiS_Pr->CP_DataValid[i] = FALSE;

	    } else {

	       SiS_Pr->CP_HaveCustomData = TRUE;

	       if(SiS_Pr->CP_Clock[i] > SiS_Pr->CP_MaxClock) SiS_Pr->CP_MaxClock = SiS_Pr->CP_Clock[i];

	       if((SiS_Pr->CP_MaxX == xres) && (SiS_Pr->CP_MaxY == yres)) {
	          SiS_Pr->CP_PreferredIndex = i;
	       }

	       SiS_Pr->CP_HSync_P[i] = (buffer[index + 17] & 0x02) ? TRUE : FALSE;
	       SiS_Pr->CP_VSync_P[i] = (buffer[index + 17] & 0x04) ? TRUE : FALSE;
	       SiS_Pr->CP_SyncValid[i] = TRUE;

	       SiS_Pr->CP_Vendor = buffer[2] | (buffer[1] << 8);
	       SiS_Pr->CP_Product = buffer[3] | (buffer[4] << 8);

	       /* We must assume the panel can scale, since we have
	        * no scaling data
    	        */
	       cr37 |= 0x10;

	    }
	 }

      }

      break;

   }

   /* 1280x960 panels are always RGB24, unable to scale and use
    * high active sync polarity
    */
   if(pSiS->VGAEngine == SIS_315_VGA) {
      if(paneltype == Panel310_1280x960) cr37 &= 0x0e;
   } else {
      if(paneltype == Panel300_1280x960) cr37 &= 0x0e;
   }

   for(i = 0; i < 7; i++) {
      if(SiS_Pr->CP_DataValid[i]) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
            "Non-standard LCD timing data no. %d:\n", i);
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	    "   HDisplay %d HSync %d HSyncEnd %d HTotal %d\n",
	    SiS_Pr->CP_HDisplay[i], SiS_Pr->CP_HSyncStart[i],
	    SiS_Pr->CP_HSyncEnd[i], SiS_Pr->CP_HTotal[i]);
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
            "   VDisplay %d VSync %d VSyncEnd %d VTotal %d\n",
            SiS_Pr->CP_VDisplay[i], SiS_Pr->CP_VSyncStart[i],
   	    SiS_Pr->CP_VSyncEnd[i], SiS_Pr->CP_VTotal[i]);
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	    "   Pixel clock: %3.3fMhz\n", (float)SiS_Pr->CP_Clock[i] / 1000);
	 xf86DrvMsg(pSiS->pScrn->scrnIndex, X_INFO,
	    "   To use this, add \"%dx%d\" to the list of Modes in the Screen section\n",
	    SiS_Pr->CP_HDisplay[i],
	    SiS_Pr->CP_VDisplay[i]);
      }
   }

   if(paneltype) {
       if(!SiS_Pr->CP_PreferredX) SiS_Pr->CP_PreferredX = SiS_Pr->CP_MaxX;
       if(!SiS_Pr->CP_PreferredY) SiS_Pr->CP_PreferredY = SiS_Pr->CP_MaxY;
       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x32,0x08);
       SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x36,0xf0,paneltype);
       cr37 &= 0xf1;
       SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,0xf3,cr37);
       SiS_Pr->PanelSelfDetected = TRUE;
#ifdef TWDEBUG
       xf86DrvMsgVerb(pSiS->pScrn->scrnIndex, X_PROBED, 3, 
       	"CRT2: [DDC LCD results: 0x%02x, 0x%02x]\n", paneltype, cr37);
#endif	
   }
   return 0;
}
   
USHORT
SiS_SenseVGA2DDC(SiS_Private *SiS_Pr, SISPtr pSiS)
{
   USHORT DDCdatatype,flag;
   BOOLEAN foundcrt = FALSE;
   int retry;
   unsigned char buffer[256];

   if(!(pSiS->VBFlags & (VB_301|VB_301B|VB_301C|VB_302B))) return 0;

   if(SiS_InitDDCRegs(SiS_Pr, pSiS->VBFlags, pSiS->VGAEngine, 2, 0, FALSE) == 0xFFFF) return 0;
   
   SiS_Pr->SiS_DDC_SecAddr = 0x00;
   
   /* Probe supported DA's */
   flag = SiS_ProbeDDC(SiS_Pr);
   if(flag & 0x10) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa6;	/* EDID V2 (FP) */
      DDCdatatype = 4;
   } else if(flag & 0x08) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa2;	/* EDID V2 (P&D-D Monitor) */
      DDCdatatype = 3;
   } else if(flag & 0x02) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa0;	/* EDID V1 */
      DDCdatatype = 1;
   } else {
   	xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
		"Do DDC answer\n");
   	return 0;				/* no DDC support (or no device attached) */
   }

   /* Read the entire EDID */
   retry = 2;
   do {
      if(SiS_ReadDDC(SiS_Pr, DDCdatatype, buffer)) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: DDC read failed (attempt %d), %s\n", 
		(3-retry), (retry == 1) ? "giving up" : "retrying");
	 retry--;
	 if(retry == 0) return 0xFFFF;
      } else break;
   } while(1);
   
   /* Analyze EDID. We don't have many chances to 
    * distinguish a flat panel from a CRT...
    */
   switch(DDCdatatype) {
   case 1:
      if(!(checkedid1(buffer))) {
          xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	  	"CRT2: EDID corrupt\n");
      	  return 0;
      }
      if(buffer[0x14] & 0x80) {			/* Display uses digital input */
          xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	  	"CRT2: Attached display expects digital input\n");
      	  return 0;
      }
      SiS_Pr->CP_Vendor = buffer[9] | (buffer[8] << 8);
      SiS_Pr->CP_Product = buffer[10] | (buffer[11] << 8);
      foundcrt = TRUE;
      break;
   case 3:
   case 4:
      if(!(checkedid2(buffer))) {
          xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	  	"CRT2: EDID corrupt\n");
      	  return 0;
      }
      if( ((buffer[0x41] & 0x0f) != 0x01) &&  	/* Display does not support analog input */
          ((buffer[0x41] & 0x0f) != 0x02) &&
	  ((buffer[0x41] & 0xf0) != 0x10) &&
	  ((buffer[0x41] & 0xf0) != 0x20) ) {
	  xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	     	"CRT2: Attached display does not support analog input (0x%02x)\n",
		buffer[0x41]);
	  return 0;
      }
      SiS_Pr->CP_Vendor = buffer[2] | (buffer[1] << 8);
      SiS_Pr->CP_Product = buffer[3] | (buffer[4] << 8);
      foundcrt = TRUE;
      break;
   }

   if(foundcrt) {
      SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x32,0x10);
   }
   return(0);
}

#endif

void
SiS_SetCH70xxANDOR(SiS_Private *SiS_Pr, USHORT tempax,USHORT tempbh)
{
  USHORT tempbl;

  tempbl = SiS_GetCH70xx(SiS_Pr,(tempax & 0x00FF));
  tempbl = (((tempbl & tempbh) << 8) | tempax);
  SiS_SetCH70xx(SiS_Pr,tempbl);
}

/* Generic I2C functions for Chrontel & DDC --------- */

void
SiS_SetSwitchDDC2(SiS_Private *SiS_Pr)
{
  SiS_SetSCLKHigh(SiS_Pr);
  SiS_WaitRetrace1(SiS_Pr);

  SiS_SetSCLKLow(SiS_Pr);
  SiS_WaitRetrace1(SiS_Pr);
}

USHORT
SiS_ReadDDC1Bit(SiS_Private *SiS_Pr)
{
   SiS_WaitRetrace1(SiS_Pr);
   return((SiS_GetReg(SiS_Pr->SiS_P3c4,0x11) & 0x02) >> 1);
}

/* Set I2C start condition */
/* This is done by a SD high-to-low transition while SC is high */
USHORT
SiS_SetStart(SiS_Private *SiS_Pr)
{
  if(SiS_SetSCLKLow(SiS_Pr)) return 0xFFFF;			           /* (SC->low)  */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
    		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  SiS_Pr->SiS_DDC_Data);             			   /* SD->high */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* SC->high */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  0x00);                             			   /* SD->low = start condition */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* (SC->low) */
  return 0;
}

/* Set I2C stop condition */
/* This is done by a SD low-to-high transition while SC is high */
USHORT
SiS_SetStop(SiS_Private *SiS_Pr)
{
  if(SiS_SetSCLKLow(SiS_Pr)) return 0xFFFF;			           /* (SC->low) */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  	          SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  0x00);          		   			   /* SD->low   */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* SC->high  */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  SiS_Pr->SiS_DDC_Data);  	   			   /* SD->high = stop condition */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* (SC->high) */
  return 0;
}

/* Write 8 bits of data */
USHORT
SiS_WriteDDC2Data(SiS_Private *SiS_Pr, USHORT tempax)
{
  USHORT i,flag,temp;

  flag = 0x80;
  for(i=0; i<8; i++) {
    SiS_SetSCLKLow(SiS_Pr);				                      /* SC->low */
    if(tempax & flag) {
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
      		      SiS_Pr->SiS_DDC_Index,
                      SiS_Pr->SiS_DDC_NData,
		      SiS_Pr->SiS_DDC_Data);            		      /* Write bit (1) to SD */
    } else {
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
      		      SiS_Pr->SiS_DDC_Index,
                      SiS_Pr->SiS_DDC_NData,
		      0x00);                            		      /* Write bit (0) to SD */
    }
    SiS_SetSCLKHigh(SiS_Pr);				                      /* SC->high */
    flag >>= 1;
  }
  temp = SiS_CheckACK(SiS_Pr);				                      /* Check acknowledge */
  return(temp);
}

USHORT
SiS_ReadDDC2Data(SiS_Private *SiS_Pr, USHORT tempax)
{
  USHORT i,temp,getdata;

  getdata=0;
  for(i=0; i<8; i++) {
    getdata <<= 1;
    SiS_SetSCLKLow(SiS_Pr);
    SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
    		    SiS_Pr->SiS_DDC_Index,
                    SiS_Pr->SiS_DDC_NData,
		    SiS_Pr->SiS_DDC_Data);
    SiS_SetSCLKHigh(SiS_Pr);
    temp = SiS_GetReg(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index);
    if(temp & SiS_Pr->SiS_DDC_Data) getdata |= 0x01;
  }
  return(getdata);
}

USHORT
SiS_SetSCLKLow(SiS_Private *SiS_Pr)
{
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NClk,
		  0x00);      					/* SetSCLKLow()  */
  SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT);
  return 0;
}

USHORT
SiS_SetSCLKHigh(SiS_Private *SiS_Pr)
{
  USHORT temp, watchdog=1000;

  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NClk,
		  SiS_Pr->SiS_DDC_Clk);  			/* SetSCLKHigh()  */
  do {
    temp = SiS_GetReg(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index);
  } while((!(temp & SiS_Pr->SiS_DDC_Clk)) && --watchdog);
  if (!watchdog) {
#ifdef TWDEBUG
        xf86DrvMsg(0, X_INFO, "SetClkHigh failed\n");
#endif
  	return 0xFFFF;
  }
  SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT);
  return 0;
}

/* Check I2C acknowledge */
/* Returns 0 if ack ok, non-0 if ack not ok */
USHORT
SiS_CheckACK(SiS_Private *SiS_Pr)
{
  USHORT tempah;

  SiS_SetSCLKLow(SiS_Pr);				           /* (SC->low) */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  SiS_Pr->SiS_DDC_Data);     			   /* (SD->high) */
  SiS_SetSCLKHigh(SiS_Pr);				           /* SC->high = clock impulse for ack */
  tempah = SiS_GetReg(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index); /* Read SD */
  SiS_SetSCLKLow(SiS_Pr);				           /* SC->low = end of clock impulse */
  if(tempah & SiS_Pr->SiS_DDC_Data) return(1);			   /* Ack OK if bit = 0 */
  else return(0);
}

/* End of I2C functions ----------------------- */


/* =============== SiS 315/330 O.E.M. ================= */

#ifdef SIS315H

static USHORT
GetRAMDACromptr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT romptr;

  if(HwInfo->jChipType < SIS_330) {
     romptr = SISGETROMW(0x128);
     if(SiS_Pr->SiS_VBType & VB_SIS301B302B)
        romptr = SISGETROMW(0x12a);
  } else {
     romptr = SISGETROMW(0x1a8);
     if(SiS_Pr->SiS_VBType & VB_SIS301B302B)
        romptr = SISGETROMW(0x1aa);
  }
  return(romptr);
}

static USHORT
GetLCDromptr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT romptr;

  if(HwInfo->jChipType < SIS_330) {
     romptr = SISGETROMW(0x120);
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
        romptr = SISGETROMW(0x122);
  } else {
     romptr = SISGETROMW(0x1a0);
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
        romptr = SISGETROMW(0x1a2);
  }
  return(romptr);
}

static USHORT
GetTVromptr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT romptr;

  if(HwInfo->jChipType < SIS_330) {
     romptr = SISGETROMW(0x114);
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
        romptr = SISGETROMW(0x11a);
  } else {
     romptr = SISGETROMW(0x194);
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
        romptr = SISGETROMW(0x19a);
  }
  return(romptr);
}

static USHORT
GetLCDPtrIndexBIOS(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT index;

  if((IS_SIS650) && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {
     if(!(SiS_IsNotM650orLater(SiS_Pr, HwInfo))) {
        if((index = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xf0)) {
	   index >>= 4;
	   index *= 3;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) index += 2;
           else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) index++;
           return index;
	}
     }
  }

  index = SiS_GetBIOSLCDResInfo(SiS_Pr) & 0x0F;
  if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050)      index -= 5;
  else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) index -= 6;
  index--;
  index *= 3;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) index += 2;
  else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) index++;
  return index;
}

static USHORT
GetLCDPtrIndex(SiS_Private *SiS_Pr)
{
  USHORT index;

  index = ((SiS_GetBIOSLCDResInfo(SiS_Pr) & 0x0F) - 1) * 3;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)         index += 2;
  else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) index++;
  return index;
}

static USHORT
GetTVPtrIndex(SiS_Private *SiS_Pr)
{
  USHORT index;

  index = 0;
  if(SiS_Pr->SiS_TVMode & TVSetPAL) index = 1;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) index = 2;

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) index = 0;

  index <<= 1;

  if((SiS_Pr->SiS_VBInfo & SetInSlaveMode) &&
     (SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) {
     index++;
  }

  return index;
}

static ULONG
GetOEMTVPtr661_2_GEN(SiS_Private *SiS_Pr, int addme)
{
   USHORT index = 0, temp = 0;

   if(SiS_Pr->SiS_TVMode & TVSetPAL)   index = 1;
   if(SiS_Pr->SiS_TVMode & TVSetPALM)  index = 2;
   if(SiS_Pr->SiS_TVMode & TVSetPALN)  index = 3;
   if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) index = 6;
   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
      index = 4;
      if(SiS_Pr->SiS_TVMode & TVSetPALM)  index++;
      if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) index = 7;
   }

   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if((!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
         (SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) {
	 index += addme;
	 temp++;
      }
      temp += 0x0100;
   }
   return(ULONG)(index | (temp << 16));
}

static ULONG
GetOEMTVPtr661_2_OLD(SiS_Private *SiS_Pr)
{
   return(GetOEMTVPtr661_2_GEN(SiS_Pr, 8));
}

#if 0
static ULONG
GetOEMTVPtr661_2_NEW(SiS_Private *SiS_Pr)
{
   return(GetOEMTVPtr661_2_GEN(SiS_Pr, 6));
}
#endif

static int
GetOEMTVPtr661(SiS_Private *SiS_Pr)
{
   int index = 0;

   if(SiS_Pr->SiS_TVMode & TVSetPAL)          index = 2;
   if(SiS_Pr->SiS_ROMNew) {
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) index = 4;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) index = 6;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) index = 8;
      if(SiS_Pr->SiS_TVMode & TVSetHiVision)  index = 10;
   } else {
      if(SiS_Pr->SiS_TVMode & TVSetHiVision)  index = 4;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) index = 6;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) index = 8;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) index = 10;
   }

   if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) index++;

   return index;
}

static void
SetDelayComp(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT delay=0,index,myindex,temp,romptr=0;
  BOOLEAN dochiptest = TRUE;

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x20,0xbf);
  } else {
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x35,0x7f);
  }

  /* Find delay (from ROM, internal tables, PCI subsystem) */

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {			/* ------------ VGA */
     
     if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
        romptr = GetRAMDACromptr(SiS_Pr, HwInfo);
     }
     if(romptr) delay = ROMAddr[romptr];
     else {
        delay = 0x04;
        if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	   if(IS_SIS650) {
	      delay = 0x0a;
	   } else if(IS_SIS740) {
	      delay = 0x00;
	   } else if(HwInfo->jChipType < SIS_330) {
	      delay = 0x0c;
	   } else {
	      delay = 0x0c;
	   }
	} else if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
           delay = 0x00;
	}
     }

  } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD|SetCRT2ToLCDA)) {  /* ----------	LCD/LCDA */

     BOOLEAN gotitfrompci = FALSE;

     /* Could we detect a PDC for LCD or did we get a user-defined? If yes, use it */

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	if(SiS_Pr->PDC != -1) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,((SiS_Pr->PDC >> 1) & 0x0f));
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,0x7f,((SiS_Pr->PDC & 0x01) << 7));
	   return;
	}
     } else {
	if(SiS_Pr->PDCA != -1) {
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((SiS_Pr->PDCA << 3) & 0xf0));
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x20,0xbf,((SiS_Pr->PDCA & 0x01) << 6));
	   return;
	}
     }

     /* Custom Panel? */

     if(SiS_Pr->SiS_LCDResInfo == Panel_Custom) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	   delay = 0x00;
	   if((SiS_Pr->PanelXRes <= 1280) && (SiS_Pr->PanelYRes <= 1024)) {
	      delay = 0x20;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,delay);
	} else {
	   delay = 0x0c;
	   if(SiS_Pr->SiS_VBType & VB_SIS301C) delay = 0x03;
	   else if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	      if(IS_SIS740) delay = 0x01;
	      else          delay = 0x03;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,delay);
	}
        return;
     }

     /* This is a piece of typical SiS crap: They code the OEM LCD
      * delay into the code, at no defined place in the BIOS.
      * We now have to start doing a PCI subsystem check here.
      */

     switch(SiS_Pr->SiS_CustomT) {
     case CUT_COMPAQ1280:
     case CUT_COMPAQ12802:
	if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
	   gotitfrompci = TRUE;
	   dochiptest = FALSE;
	   delay = 0x03;
	}
	break;
     case CUT_CLEVO1400:
     case CUT_CLEVO14002:
	gotitfrompci = TRUE;
	dochiptest = FALSE;
	delay = 0x02;
	break;
     case CUT_CLEVO1024:
     case CUT_CLEVO10242:
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	   gotitfrompci = TRUE;
	   dochiptest = FALSE;
	   delay = 0x33;
	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2D,delay);
	   delay &= 0x0f;
	}
	break;
     }

     /* Could we find it through the PCI ID? If no, use ROM or table */

     if(!gotitfrompci) {

        index = GetLCDPtrIndexBIOS(SiS_Pr, HwInfo);
        myindex = GetLCDPtrIndex(SiS_Pr);

        if(IS_SIS650 && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {

           if(SiS_IsNotM650orLater(SiS_Pr, HwInfo)) {

              if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
	         /* Always use the second pointer on 650; some BIOSes */
                 /* still carry old 301 data at the first location    */
	         /* romptr = SISGETROMW(0x120);                       */
	         /* if(SiS_Pr->SiS_VBType & VB_SIS302LV)              */
	         romptr = SISGETROMW(0x122);
	         if(!romptr) return;
	         delay = ROMAddr[(romptr + index)];
	      } else {
                 delay = SiS310_LCDDelayCompensation_650301LV[myindex];
	      }

          } else {

             delay = SiS310_LCDDelayCompensation_651301LV[myindex];
	     if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV))
	        delay = SiS310_LCDDelayCompensation_651302LV[myindex];

          }

        } else if(SiS_Pr->SiS_UseROM 			      &&
		  (!(SiS_Pr->SiS_ROMNew))		      &&
	          (SiS_Pr->SiS_LCDResInfo != Panel_1280x1024) &&
		  (SiS_Pr->SiS_LCDResInfo != Panel_1280x768)  &&
		  (SiS_Pr->SiS_LCDResInfo != Panel_1280x960)) {

	   /* Data for 1280x1024 wrong in 301B BIOS */
           romptr = GetLCDromptr(SiS_Pr, HwInfo);
	   if(!romptr) return;
	   delay = ROMAddr[(romptr + index)];

        } else if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {

	   if(IS_SIS740) delay = 0x03;
	   else          delay = 0x00;

	} else {

           delay = SiS310_LCDDelayCompensation_301[myindex];
	   if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	      if(IS_SIS740) delay = 0x01;
	      else          delay = SiS310_LCDDelayCompensation_650301LV[myindex];
	   } else if(SiS_Pr->SiS_VBType & VB_SIS301C) {
	      if(IS_SIS740) delay = 0x01;  /* ? */
	      else          delay = 0x03;
	   } else if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	      if(IS_SIS740) delay = 0x01;
	      else          delay = SiS310_LCDDelayCompensation_3xx301B[myindex];
	   }

        }

     }  /* got it from PCI */

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0x0F,((delay << 4) & 0xf0));
	dochiptest = FALSE;
     }
     
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {			/* ------------ TV */

     index = GetTVPtrIndex(SiS_Pr);
     
     if(IS_SIS650 && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {

        if(SiS_IsNotM650orLater(SiS_Pr,HwInfo)) {

           if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
	      /* Always use the second pointer on 650; some BIOSes */
              /* still carry old 301 data at the first location    */
              /* romptr = SISGETROMW(0x114);			   */
	      /* if(SiS_Pr->SiS_VBType & VB_SIS302LV)              */
	      romptr = SISGETROMW(0x11a);
	      if(!romptr) return;
	      delay = ROMAddr[romptr + index];

	   } else {

	      delay = SiS310_TVDelayCompensation_301B[index];

	   }

        } else {

           switch(SiS_Pr->SiS_CustomT) {
	   case CUT_COMPAQ1280:
	   case CUT_COMPAQ12802:
	   case CUT_CLEVO1400:
	   case CUT_CLEVO14002:
	      delay = 0x02;
	      dochiptest = FALSE;
	      break;
	   case CUT_CLEVO1024:
	   case CUT_CLEVO10242:
	      delay = 0x03;
	      dochiptest = FALSE;
   	      break;
	   default:
              delay = SiS310_TVDelayCompensation_651301LV[index];
	      if(SiS_Pr->SiS_VBType & VB_SIS302LV) {
	         delay = SiS310_TVDelayCompensation_651302LV[index];
	      }
	   }
        }

     } else if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {

        romptr = GetTVromptr(SiS_Pr, HwInfo);
	if(!romptr) return;
	delay = ROMAddr[romptr + index];

     } else if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {

        delay = SiS310_TVDelayCompensation_LVDS[index];

     } else {

	delay = SiS310_TVDelayCompensation_301[index];
        if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	   if(IS_SIS740) {
	      delay = SiS310_TVDelayCompensation_740301B[index];
	      /* LV: use 301 data? BIOS bug? */
	   } else {
              delay = SiS310_TVDelayCompensation_301B[index];
	      if(SiS_Pr->SiS_VBType & VB_SIS301C) delay = 0x02;
	   }
	}

     }

     if(SiS_LCDAEnabled(SiS_Pr, HwInfo)) {
	delay &= 0x0f;
	dochiptest = FALSE;
     }
    
  } else return;

  /* Write delay */

  if(SiS_Pr->SiS_VBType & VB_SISVB) {

     if(IS_SIS650 && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV) && dochiptest) {

        temp = (SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xf0) >> 4;
        if(temp == 8) {		/* 1400x1050 BIOS (COMPAL) */
	   delay &= 0x0f;
	   delay |= 0xb0;
        } else if(temp == 6) {
           delay &= 0x0f;
	   delay |= 0xc0;
        } else if(temp > 7) {	/* 1280x1024 BIOS (which one?) */
	   delay = 0x35;
        }
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2D,delay);

     } else {

        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0xF0,delay);

     }

  } else {  /* LVDS */

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0xF0,delay);
     } else {
        if(IS_SIS650 && (SiS_Pr->SiS_IF_DEF_CH70xx != 0)) {
           delay <<= 4;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0x0F,delay);
        } else {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0xF0,delay);
        }
     }

  }

}

static void
SetAntiFlicker(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
               USHORT ModeNo,USHORT ModeIdIndex)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,temp1,romptr=0;

  if(SiS_Pr->SiS_TVMode & (TVSetYPbPr750p|TVSetYPbPr525p)) return;

  if(ModeNo<=0x13)
     index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].VB_StTVFlickerIndex;
  else
     index = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].VB_ExtTVFlickerIndex;

  temp = GetTVPtrIndex(SiS_Pr);
  temp >>= 1;  	  /* 0: NTSC/YPbPr, 1: PAL, 2: HiTV */
  temp1 = temp;

  if(SiS_Pr->SiS_UseROM && (!(SiS_Pr->SiS_ROMNew))) {
     if(HwInfo->jChipType >= SIS_661) {
        temp1 = GetOEMTVPtr661(SiS_Pr);
        temp1 >>= 1;
        romptr = SISGETROMW(0x260);
        if(HwInfo->jChipType >= SIS_760) {
	   romptr = SISGETROMW(0x360);
	}
     } else if(HwInfo->jChipType >= SIS_330) {
        romptr = SISGETROMW(0x192);
     } else {
        romptr = SISGETROMW(0x112);
     }
  }

  if(romptr) {
     temp1 <<= 1;
     temp = ROMAddr[romptr + temp1 + index];
  } else {
     temp = SiS310_TVAntiFlick1[temp][index];
  }
  temp <<= 4;

  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x0A,0x8f,temp);  /* index 0A D[6:4] */
}

static void
SetEdgeEnhance(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
               USHORT ModeNo,USHORT ModeIdIndex)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,temp1,romptr=0;

  temp = temp1 = GetTVPtrIndex(SiS_Pr) >> 1; 	/* 0: NTSC/YPbPr, 1: PAL, 2: HiTV */

  if(ModeNo <= 0x13)
     index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].VB_StTVEdgeIndex;
  else
     index = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].VB_ExtTVEdgeIndex;

  if(SiS_Pr->SiS_UseROM && (!(SiS_Pr->SiS_ROMNew))) {
     if(HwInfo->jChipType >= SIS_661) {
        romptr = SISGETROMW(0x26c);
        if(HwInfo->jChipType >= SIS_760) {
	   romptr = SISGETROMW(0x36c);
	}
	temp1 = GetOEMTVPtr661(SiS_Pr);
        temp1 >>= 1;
     } else if(HwInfo->jChipType >= SIS_330) {
        romptr = SISGETROMW(0x1a4);
     } else {
        romptr = SISGETROMW(0x124);
     }
  }

  if(romptr) {
     temp1 <<= 1;
     temp = ROMAddr[romptr + temp1 + index];
  } else {
     temp = SiS310_TVEdge1[temp][index];
  }
  temp <<= 5;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x3A,0x1F,temp);  /* index 0A D[7:5] */
}

static void
SetYFilter(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
           USHORT ModeNo,USHORT ModeIdIndex)
{
  USHORT index, temp, i, j;

  if(ModeNo <= 0x13) {
     index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].VB_StTVYFilterIndex;
  } else {
     index = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].VB_ExtTVYFilterIndex;
  }

  temp = GetTVPtrIndex(SiS_Pr) >> 1;  /* 0: NTSC/YPbPr, 1: PAL, 2: HiTV */

  if(SiS_Pr->SiS_TVMode & TVSetNTSCJ)	     temp = 1;  /* NTSC-J uses PAL */
  else if(SiS_Pr->SiS_TVMode & TVSetPALM)    temp = 3;  /* PAL-M */
  else if(SiS_Pr->SiS_TVMode & TVSetPALN)    temp = 4;  /* PAL-N */
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) temp = 1;  /* HiVision uses PAL */

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     for(i=0x35, j=0; i<=0x38; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter2[temp][index][j]);
     }
     for(i=0x48; i<=0x4A; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter2[temp][index][j]);
     }
  } else {
     for(i=0x35, j=0; i<=0x38; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter1[temp][index][j]);
     }
  }
}

static void
SetPhaseIncr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
             USHORT ModeNo,USHORT ModeIdIndex)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,i,j,resinfo,romptr=0;
  ULONG  lindex;

  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) return;

  /* NTSC-J data not in BIOS, and already set in SetGroup2 */
  if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) return;

  if((HwInfo->jChipType >= SIS_661) || SiS_Pr->SiS_ROMNew) {
     lindex = GetOEMTVPtr661_2_OLD(SiS_Pr) & 0xffff;
     lindex <<= 2;
     for(j=0, i=0x31; i<=0x34; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS661_TVPhase[lindex + j]);
     }
     return;
  }

  /* PAL-M, PAL-N not in BIOS, and already set in SetGroup2 */
  if(SiS_Pr->SiS_TVMode & (TVSetPALM | TVSetPALN)) return;

  if(ModeNo<=0x13) {
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  } else {
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }

  temp = GetTVPtrIndex(SiS_Pr);
  /* 0: NTSC Graphics, 1: NTSC Text,    2: PAL Graphics,
   * 3: PAL Text,      4: HiTV Graphics 5: HiTV Text
   */
  if(SiS_Pr->SiS_UseROM) {
     romptr = SISGETROMW(0x116);
     if(HwInfo->jChipType >= SIS_330) {
        romptr = SISGETROMW(0x196);
     }
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
        romptr = SISGETROMW(0x11c);
	if(HwInfo->jChipType >= SIS_330) {
	   romptr = SISGETROMW(0x19c);
	}
	if((SiS_Pr->SiS_VBInfo & SetInSlaveMode) && (!(SiS_Pr->SiS_TVMode & TVSetTVSimuMode))) {
	   romptr = SISGETROMW(0x116);
	   if(HwInfo->jChipType >= SIS_330) {
              romptr = SISGETROMW(0x196);
           }
	}
     }
  }
  if(romptr) {
     romptr += (temp << 2);
     for(j=0, i=0x31; i<=0x34; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
     }
  } else {
     index = temp % 2;
     temp >>= 1;          /* 0:NTSC, 1:PAL, 2:HiTV */
     for(j=0, i=0x31; i<=0x34; i++, j++) {
        if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV))
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr1[temp][index][j]);
        else if((!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) || (SiS_Pr->SiS_TVMode & TVSetTVSimuMode))
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr2[temp][index][j]);
        else
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr1[temp][index][j]);
     }
  }

  if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (!(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision))) {
     if((!(SiS_Pr->SiS_TVMode & (TVSetPAL | TVSetYPbPr525p | TVSetYPbPr750p))) && (ModeNo > 0x13)) {
        if((resinfo == SIS_RI_640x480) ||
	   (resinfo == SIS_RI_800x600)) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x31,0x21);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x32,0xf0);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x33,0xf5);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x34,0x7f);
	} else if(resinfo == SIS_RI_1024x768) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x31,0x1e);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x32,0x8b);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x33,0xfb);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x34,0x7b);
	}
     }
  }
}

void
SiS_OEM310Setting(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                  USHORT ModeNo,USHORT ModeIdIndex)
{
   SetDelayComp(SiS_Pr,HwInfo,ModeNo);

   if(SiS_Pr->UseCustomMode) return;

   if((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
      SetAntiFlicker(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
      SetPhaseIncr(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
      SetYFilter(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
      if(SiS_Pr->SiS_VBType & VB_SIS301) {
         SetEdgeEnhance(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
      }
   }
}

static void
SetDelayComp661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo,
                USHORT ModeIdIndex, USHORT RTI)
{
   USHORT delay = 0, romptr = 0, index;
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;

   if(!(SiS_Pr->SiS_VBInfo & (SetCRT2ToTV | SetCRT2ToLCD | SetCRT2ToLCDA | SetCRT2ToRAMDAC)))
      return;

   /* 1. New ROM: VGA2 and LCD/LCDA-Pass1:1 */

   if(SiS_Pr->SiS_ROMNew) {
      if((SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) 			||
         ((SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) &&
	  (SiS_Pr->SiS_LCDInfo & LCDPass11))) {
         index = 25;
         if(SiS_Pr->UseCustomMode) {
	    index = SiS_Pr->CSRClock;
         } else if(ModeNo > 0x13) {
            index = SiS_GetVCLK2Ptr(SiS_Pr,ModeNo,ModeIdIndex,RTI,HwInfo);
            index = SiS_Pr->SiS_VCLKData[index].CLOCK;
         }
	 if(index < 25) index = 25;
         index = ((index / 25) - 1) << 1;
         if(SiS_Pr->SiS_VBInfo & (SetCRT2ToRAMDAC | SetCRT2ToLCD)) index++;
	 romptr = SISGETROMW(0x104);  /* 0x4ae */
         delay = ROMAddr[romptr + index];
         if(SiS_Pr->SiS_VBInfo & (SetCRT2ToRAMDAC | SetCRT2ToLCD)) {
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,((delay >> 1) & 0x0f));
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,0x7f,((delay & 0x01) << 7));
         } else {
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((delay << 3) & 0xf0));
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x20,0xbf,((delay & 0x01) << 6));
         }
         return;
      }
   }

   /* 2. Old ROM: VGA2 and LCD/LCDA-Pass 1:1 */

   if(SiS_Pr->UseCustomMode) delay = 0x04;
   else if(ModeNo <= 0x13)   delay = 0x04;
   else                      delay = (SiS_Pr->SiS_RefIndex[RTI].Ext_PDC >> 4);
   delay |= (delay << 8);

   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {

      /* 3. TV */

      index = GetOEMTVPtr661(SiS_Pr);
      if(SiS_Pr->SiS_ROMNew) {
         romptr = SISGETROMW(0x106);  /* 0x4ba */
         delay = ROMAddr[romptr + index];
      } else {
         delay = 0x04;
      }

   } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {

      /* 4. LCD, LCDA (for new ROM only LV and non-Pass 1:1) */

      if( (SiS_Pr->SiS_LCDResInfo != Panel_Custom) &&
          ((romptr = GetLCDStructPtr661_2(SiS_Pr, HwInfo))) ) {

	 /* For LV, the BIOS must know about the correct value */
	 delay = ROMAddr[romptr + 0x0d];		/* LCD  */
	 delay |= (ROMAddr[romptr + 0x0c] << 8);	/* LCDA */

      } else {

         /* TMDS: Set our own, since BIOS has no idea - TODO: Find out about values */
         if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
            if((SiS_Pr->PanelXRes <= 1024) && (SiS_Pr->PanelYRes <= 768)) {
	       delay = 0x0404;
            } else if((SiS_Pr->PanelXRes <= 1280) && (SiS_Pr->PanelYRes <= 1024)) {
	       delay = 0x0404;
            } else if((SiS_Pr->PanelXRes <= 1400) && (SiS_Pr->PanelYRes <= 1050)) {
	       delay = 0x1004;
            } else
	       delay = 0x0000;
         }

      }

      /* Override by detected or user-set values */
      if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (SiS_Pr->PDC != -1)) {
         delay = SiS_Pr->PDC & 0x1f;
      }
      if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) && (SiS_Pr->PDCA != -1)) {
         delay = (SiS_Pr->PDCA & 0x1f) << 8;
      }
   }

   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      delay >>= 8;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((delay << 3) & 0xf0));
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x20,0xbf,((delay & 0x01) << 6));
   } else {
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,((delay >> 1) & 0x0f));
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,0x7f,((delay & 0x01) << 7));
   }
}

static void
SetCRT2SyncDither661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo, USHORT RTI)
{
   USHORT infoflag;
   UCHAR temp;

   if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {

      if(ModeNo <= 0x13) {
         infoflag = SiS_GetRegByte(SiS_Pr->SiS_P3ca+2);
      } else if(SiS_Pr->UseCustomMode) {
         infoflag = SiS_Pr->CInfoFlag;
      } else {
         infoflag = SiS_Pr->SiS_RefIndex[RTI].Ext_InfoFlag;
      }
      infoflag &= 0xc0;

      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
      if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
         temp &= 0x3f;
	 temp |= infoflag;
      } else {
         if(temp & 0x20) infoflag = temp;
      }
      if(temp & 0x01) infoflag |= 0x01;

      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
         temp = 0x0c;
         if(infoflag & 0x01) temp ^= 0x14;  /* BIOS: 18, wrong */
         temp |= (infoflag >> 6);
         SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xe0,temp);
      } else {
         temp = 0;
         if(infoflag & 0x01) temp |= 0x80;
         SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1a,0x7f,temp);
         temp = 0x30;
         if(infoflag & 0x01) temp = 0x20;
         infoflag &= 0xc0;
         temp |= infoflag;
         SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0f,temp);
      }

   }
}

static void
SetPanelParms661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
   USHORT romptr, temp1, temp2;

   if(SiS_Pr->SiS_VBType & (VB_SIS301LV | VB_SIS302LV | VB_SIS302ELV)) {
      if(SiS_Pr->LVDSHL != -1) {
         SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,SiS_Pr->LVDSHL);
      }
   }

   if(SiS_Pr->SiS_ROMNew) {

      if((romptr = GetLCDStructPtr661_2(SiS_Pr, HwInfo))) {
         if(SiS_Pr->SiS_VBType & (VB_SIS301LV | VB_SIS302LV | VB_SIS302ELV)) {
            temp1 = (ROMAddr[romptr] & 0x03) | 0x0c;
	    temp2 = 0xfc;
	    if(SiS_Pr->LVDSHL != -1) {
	      temp1 &= 0xfc;
	      temp2 = 0xf3;
	    }
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,temp2,temp1);
         }
         temp1 = (ROMAddr[romptr + 1] & 0x80) >> 1;
         SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0d,0xbf,temp1);
      }

   }
}

void
SiS_OEM661Setting(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                  USHORT ModeNo,USHORT ModeIdIndex, USHORT RRTI)
{
   if(SiS_Pr->SiS_VBType & VB_SISVB) {

      SetDelayComp661(SiS_Pr,HwInfo,ModeNo,ModeIdIndex,RRTI);

      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
         SetCRT2SyncDither661(SiS_Pr,HwInfo,ModeNo,RRTI);
         SetPanelParms661(SiS_Pr,HwInfo);
      }

      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
         SetPhaseIncr(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
         SetYFilter(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
         SetAntiFlicker(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
         if(SiS_Pr->SiS_VBType & VB_SIS301) {
            SetEdgeEnhance(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
         }
      }
   }
}

/* FinalizeLCD
 * This finalizes some CRT2 registers for the very panel used.
 * If we have a backup if these registers, we use it; otherwise
 * we set the register according to most BIOSes. However, this
 * function looks quite different in every BIOS, so you better
 * pray that we have a backup...
 */
void
SiS_FinalizeLCD(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                PSIS_HW_INFO HwInfo)
{
  USHORT tempcl,tempch,tempbl,tempbh,tempbx,tempax,temp;
  USHORT resinfo,modeflag;

  if(!(SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) return;

  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(SiS_Pr->LVDSHL != -1) {
        SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,SiS_Pr->LVDSHL);
     }
  }

  if(SiS_Pr->SiS_LCDResInfo == Panel_Custom) return;
  if(SiS_Pr->UseCustomMode) return;

  switch(SiS_Pr->SiS_CustomT) {
  case CUT_COMPAQ1280:
  case CUT_COMPAQ12802:
  case CUT_CLEVO1400:
  case CUT_CLEVO14002:
     return;
  }

  if(ModeNo <= 0x13) {
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
     modeflag =  SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else {
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     modeflag =  SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }

  if(IS_SIS650) {
     if(!(SiS_GetReg(SiS_Pr->SiS_P3d4, 0x5f) & 0xf0)) {
        if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x02);
	} else {
           SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x03);
	}
     }
  }

  if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
        /* Maybe all panels? */
        if(SiS_Pr->LVDSHL == -1) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,0x01);
	}
	return;
     }
  }

  if(SiS_Pr->SiS_CustomT == CUT_CLEVO10242) {
     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	   if(SiS_Pr->LVDSHL == -1) {
	      /* Maybe all panels? */
              SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,0x01);
	   }
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	      tempch = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4;
	      if(tempch == 3) {
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x25);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,0x00);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x1b);
	      }
	   }
	   return;
	}
     }
  }

  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
#ifdef SET_EMI
	if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x2a,0x00);
	   SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x10);
	}
#endif
     } else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
        if(SiS_Pr->LVDSHL == -1) {
           /* Maybe ACER only? */
           SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,0x01);
	}
     }
     tempch = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) {
	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1f,0x76);
	} else if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	   if(tempch == 0x03) {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x25);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,0x00);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x1b);
	   }
	   if((SiS_Pr->Backup == TRUE) && (SiS_Pr->Backup_Mode == ModeNo)) {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,SiS_Pr->Backup_14);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,SiS_Pr->Backup_15);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,SiS_Pr->Backup_16);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,SiS_Pr->Backup_17);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,SiS_Pr->Backup_18);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,SiS_Pr->Backup_19);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1a,SiS_Pr->Backup_1a);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,SiS_Pr->Backup_1b);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,SiS_Pr->Backup_1c);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,SiS_Pr->Backup_1d);
	   } else if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {	/* 1.10.8w */
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,0x90);
	      if(ModeNo <= 0x13) {
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x11);
		 if((resinfo == 0) || (resinfo == 2)) return;
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x18);
		 if((resinfo == 1) || (resinfo == 3)) return;
	      }
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);
	      if((ModeNo > 0x13) && (resinfo == SIS_RI_1024x768)) {
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);  /* 1.10.7u */
#if 0
	         tempbx = 806;  /* 0x326 */			 /* other older BIOSes */
		 tempbx--;
		 temp = tempbx & 0xff;
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,temp);
		 temp = (tempbx >> 8) & 0x03;
		 SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1d,0xf8,temp);
#endif
	      }
	   } else if(ModeNo <= 0x13) {
	      if(ModeNo <= 1) {
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x70);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0xff);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x48);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x12);
	      }
	      if(!(modeflag & HalfDCLK)) {
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,0x20);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,0x1a);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,0x28);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,0x00);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x4c);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0xdc);
		 if(ModeNo == 0x12) {
		    switch(tempch) {
		       case 0:
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x95);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0xdc);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1a,0x10);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x95);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,0x48);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x12);
			  break;
		       case 2:
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x95);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x48);
			  break;
		       case 3:
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x95);
			  break;
		    }
		 }
	      }
	   }
	}
     } else {
        tempcl = tempbh = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x01);
	tempcl &= 0x0f;
	tempbh &= 0x70;
	tempbh >>= 4;
	tempbl = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x04);
	tempbx = (tempbh << 8) | tempbl;
	if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	   if((resinfo == SIS_RI_1024x768) || (!(SiS_Pr->SiS_LCDInfo & DontExpandLCD))) {
	      if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
	      	 tempbx = 770;
	      } else {
	         if(tempbx > 770) tempbx = 770;
		 if(SiS_Pr->SiS_VGAVDE < 600) {
		    tempax = 768 - SiS_Pr->SiS_VGAVDE;
		    tempax >>= 4;  				 /* 1.10.7w; 1.10.6s: 3;  */
		    if(SiS_Pr->SiS_VGAVDE <= 480)  tempax >>= 4; /* 1.10.7w; 1.10.6s: < 480; >>=1; */
		    tempbx -= tempax;
		 }
	      }
	   } else return;
	}
	temp = tempbx & 0xff;
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,temp);
	temp = ((tempbx & 0xff00) >> 4) | tempcl;
	SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x01,0x80,temp);
     }
  }
}

#endif

/*  =================  SiS 300 O.E.M. ================== */

#ifdef SIS300

void
SetOEMLCDData2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
               USHORT ModeNo,USHORT ModeIdIndex, USHORT RefTabIndex)
{
  USHORT crt2crtc=0, modeflag, myindex=0;
  UCHAR  temp;
  int i;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     crt2crtc = SiS_Pr->SiS_RefIndex[RefTabIndex].Ext_CRT2CRTC;
  }

  crt2crtc &= 0x3f;

  if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xdf);
  }

  if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
     if(modeflag & HalfDCLK) myindex = 1;

     if(SiS_Pr->SiS_SetFlag & LowModeTests) {
        for(i=0; i<7; i++) {
           if(barco_p1[myindex][crt2crtc][i][0]) {
	      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,
	                      barco_p1[myindex][crt2crtc][i][0],
	   	   	      barco_p1[myindex][crt2crtc][i][2],
			      barco_p1[myindex][crt2crtc][i][1]);
	   }
        }
     }
     temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
     if(temp & 0x80) {
        temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x18);
        temp++;
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,temp);
     }
  }
}

static USHORT
GetOEMLCDPtr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, int Flag)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT tempbx=0,romptr=0;
  UCHAR customtable300[] = {
  	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  };
  UCHAR customtable630[] = {
  	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  };

  if(HwInfo->jChipType == SIS_300) {

    tempbx = (SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0x0f) - 2;
    if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx += 4;
    if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 3;
    }
    if(SiS_Pr->SiS_UseROM) {
       if(ROMAddr[0x235] & 0x80) {
          tempbx = SiS_Pr->SiS_LCDTypeInfo;
          if(Flag) {
	     romptr = SISGETROMW(0x255);
	     if(romptr) tempbx = ROMAddr[romptr + SiS_Pr->SiS_LCDTypeInfo];
	     else       tempbx = customtable300[SiS_Pr->SiS_LCDTypeInfo];
             if(tempbx == 0xFF) return 0xFFFF;
          }
	  tempbx <<= 1;
	  if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx++;
       }
    }

  } else {

    if(Flag) {
       if(SiS_Pr->SiS_UseROM) {
          romptr = SISGETROMW(0x255);
	  if(romptr) tempbx = ROMAddr[romptr + SiS_Pr->SiS_LCDTypeInfo];
	  else 	     tempbx = 0xff;
       } else {
          tempbx = customtable630[SiS_Pr->SiS_LCDTypeInfo];
       }
       if(tempbx == 0xFF) return 0xFFFF;
       tempbx <<= 2;
       if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) tempbx += 2;
       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
       return tempbx;
    }
    tempbx = SiS_Pr->SiS_LCDTypeInfo << 2;
    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) tempbx += 2;
    if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
  }
  return tempbx;
}

static void
SetOEMLCDDelay(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
               USHORT ModeNo,USHORT ModeIdIndex)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,romptr=0;

  if(SiS_Pr->SiS_LCDResInfo == Panel_Custom) return;

  if(SiS_Pr->SiS_UseROM) {
     if(!(ROMAddr[0x237] & 0x01)) return;
     if(!(ROMAddr[0x237] & 0x02)) return;
     romptr = SISGETROMW(0x24b);
  }

  /* The Panel Compensation Delay should be set according to tables
   * here. Unfortunately, various BIOS versions don't case about
   * a uniform way using eg. ROM byte 0x220, but use different
   * hard coded delays (0x04, 0x20, 0x18) in SetGroup1().
   * Thus we don't set this if the user select a custom pdc or if
   * we otherwise detected a valid pdc.
   */
  if(SiS_Pr->PDC != -1) return;

  temp = GetOEMLCDPtr(SiS_Pr,HwInfo, 0);

  if(SiS_Pr->UseCustomMode)
     index = 0;
  else
     index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].VB_LCDDelayIndex;

  if(HwInfo->jChipType != SIS_300) {
     if(romptr) {
	romptr += (temp * 2);
	romptr = SISGETROMW(romptr);
	romptr += index;
	temp = ROMAddr[romptr];
     } else {
	if(SiS_Pr->SiS_VBType & VB_SISVB) {
    	   temp = SiS300_OEMLCDDelay2[temp][index];
	} else {
           temp = SiS300_OEMLCDDelay3[temp][index];
        }
     }
  } else {
     if(SiS_Pr->SiS_UseROM && (ROMAddr[0x235] & 0x80)) {
	if(romptr) {
	   romptr += (temp * 2);
	   romptr = SISGETROMW(romptr);
	   romptr += index;
	   temp = ROMAddr[romptr];
	} else {
	   temp = SiS300_OEMLCDDelay5[temp][index];
	}
     } else {
        if(SiS_Pr->SiS_UseROM) {
	   romptr = ROMAddr[0x249] | (ROMAddr[0x24a] << 8);
	   if(romptr) {
	      romptr += (temp * 2);
	      romptr = SISGETROMW(romptr);
	      romptr += index;
	      temp = ROMAddr[romptr];
	   } else {
	      temp = SiS300_OEMLCDDelay4[temp][index];
	   }
	} else {
	   temp = SiS300_OEMLCDDelay4[temp][index];
	}
     }
  }
  temp &= 0x3c;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,~0x3C,temp);  /* index 0A D[6:4] */
}

static void
SetOEMLCDData(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
              USHORT ModeNo,USHORT ModeIdIndex)
{
#if 0  /* Unfinished; Data table missing */
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp;

  if((SiS_Pr->SiS_UseROM) {
     if(!(ROMAddr[0x237] & 0x01)) return;
     if(!(ROMAddr[0x237] & 0x04)) return;
     /* No rom pointer in BIOS header! */
  }

  temp = GetOEMLCDPtr(SiS_Pr,HwInfo, 1);
  if(temp = 0xFFFF) return;

  index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex]._VB_LCDHIndex;
  for(i=0x14, j=0; i<=0x17; i++, j++) {
      SiS_SetReg(SiS_Pr->SiS_Part1Port,i,SiS300_LCDHData[temp][index][j]);
  }
  SiS_SetRegANDOR(SiS_SiS_Part1Port,0x1a, 0xf8, (SiS300_LCDHData[temp][index][j] & 0x07));

  index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex]._VB_LCDVIndex;
  SiS_SetReg(SiS_SiS_Part1Port,0x18, SiS300_LCDVData[temp][index][0]);
  SiS_SetRegANDOR(SiS_SiS_Part1Port,0x19, 0xF0, SiS300_LCDVData[temp][index][1]);
  SiS_SetRegANDOR(SiS_SiS_Part1Port,0x1A, 0xC7, (SiS300_LCDVData[temp][index][2] & 0x38));
  for(i=0x1b, j=3; i<=0x1d; i++, j++) {
      SiS_SetReg(SiS_Pr->SiS_Part1Port,i,SiS300_LCDVData[temp][index][j]);
  }
#endif
}

static USHORT
GetOEMTVPtr(SiS_Private *SiS_Pr)
{
  USHORT index;

  index = 0;
  if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode))  index += 4;
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToSCART)  index += 2;
     else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) index += 3;
     else if(SiS_Pr->SiS_TVMode & TVSetPAL)   index += 1;
  } else {
     if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) index += 2;
     if(SiS_Pr->SiS_TVMode & TVSetPAL)        index += 1;
  }
  return index;
}

static void
SetOEMTVDelay(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
              USHORT ModeNo,USHORT ModeIdIndex)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,romptr=0;

  if(SiS_Pr->SiS_UseROM) {
     if(!(ROMAddr[0x238] & 0x01)) return;
     if(!(ROMAddr[0x238] & 0x02)) return;
     romptr = SISGETROMW(0x241);
  }

  temp = GetOEMTVPtr(SiS_Pr);

  index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].VB_TVDelayIndex;

  if(romptr) {
     romptr += (temp * 2);
     romptr = SISGETROMW(romptr);
     romptr += index;
     temp = ROMAddr[romptr];
  } else {
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        temp = SiS300_OEMTVDelay301[temp][index];
     } else {
        temp = SiS300_OEMTVDelayLVDS[temp][index];
     }
  }
  temp &= 0x3c;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,~0x3C,temp);
}

static void
SetOEMAntiFlicker(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                  USHORT ModeNo, USHORT ModeIdIndex)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,romptr=0;

  if(SiS_Pr->SiS_UseROM) {
     if(!(ROMAddr[0x238] & 0x01)) return;
     if(!(ROMAddr[0x238] & 0x04)) return;
     romptr = SISGETROMW(0x243);
  }

  temp = GetOEMTVPtr(SiS_Pr);

  index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].VB_TVFlickerIndex;

  if(romptr) {
     romptr += (temp * 2);
     romptr = SISGETROMW(romptr);
     romptr += index;
     temp = ROMAddr[romptr];
  } else {
     temp = SiS300_OEMTVFlicker[temp][index];
  }
  temp &= 0x70;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x0A,0x8F,temp);
}

static void
SetOEMPhaseIncr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                USHORT ModeNo,USHORT ModeIdIndex)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,i,j,temp,romptr=0;

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) return;

  if(SiS_Pr->SiS_TVMode & (TVSetNTSC1024 | TVSetNTSCJ | TVSetPALM | TVSetPALN)) return;

  if(SiS_Pr->SiS_UseROM) {
     if(!(ROMAddr[0x238] & 0x01)) return;
     if(!(ROMAddr[0x238] & 0x08)) return;
     romptr = SISGETROMW(0x245);
  }

  temp = GetOEMTVPtr(SiS_Pr);

  index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].VB_TVPhaseIndex;

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     for(i=0x31, j=0; i<=0x34; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Phase2[temp][index][j]);
     }
  } else {
     if(romptr) {
        romptr += (temp * 2);
	romptr = SISGETROMW(romptr);
	romptr += (index * 4);
        for(i=0x31, j=0; i<=0x34; i++, j++) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
	}
     } else {
        for(i=0x31, j=0; i<=0x34; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Phase1[temp][index][j]);
	}
     }
  }
}

static void
SetOEMYFilter(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
              USHORT ModeNo,USHORT ModeIdIndex)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,i,j,romptr=0;

  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSCART | SetCRT2ToHiVision | SetCRT2ToYPbPr525750)) return;

  if(SiS_Pr->SiS_UseROM) {
     if(!(ROMAddr[0x238] & 0x01)) return;
     if(!(ROMAddr[0x238] & 0x10)) return;
     romptr = SISGETROMW(0x247);
  }

  temp = GetOEMTVPtr(SiS_Pr);

  if(SiS_Pr->SiS_TVMode & TVSetPALM)      temp = 8;
  else if(SiS_Pr->SiS_TVMode & TVSetPALN) temp = 9;
  /* NTSCJ uses NTSC filters */

  index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].VB_TVYFilterIndex;

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      for(i=0x35, j=0; i<=0x38; i++, j++) {
       	SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Filter2[temp][index][j]);
      }
      for(i=0x48; i<=0x4A; i++, j++) {
     	SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Filter2[temp][index][j]);
      }
  } else {
      if((romptr) && (!(SiS_Pr->SiS_TVMode & (TVSetPALM|TVSetPALN)))) {
         romptr += (temp * 2);
	 romptr = SISGETROMW(romptr);
	 romptr += (index * 4);
	 for(i=0x35, j=0; i<=0x38; i++, j++) {
       	    SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
         }
      } else {
         for(i=0x35, j=0; i<=0x38; i++, j++) {
       	    SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Filter1[temp][index][j]);
         }
      }
  }
}

static USHORT
SiS_SearchVBModeID(SiS_Private *SiS_Pr, USHORT *ModeNo)
{
   USHORT ModeIdIndex;
   UCHAR VGAINFO = SiS_Pr->SiS_VGAINFO;

   if(*ModeNo <= 5) *ModeNo |= 1;

   for(ModeIdIndex=0; ; ModeIdIndex++) {
      if(SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].ModeID == *ModeNo) break;
      if(SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].ModeID == 0xFF)    return 0;
   }

   if(*ModeNo != 0x07) {
      if(*ModeNo > 0x03) return ModeIdIndex;
      if(VGAINFO & 0x80) return ModeIdIndex;
      ModeIdIndex++;
   }

   if(VGAINFO & 0x10) ModeIdIndex++;   /* 400 lines */
	                               /* else 350 lines */
   return ModeIdIndex;
}

void
SiS_OEM300Setting(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
		  USHORT ModeNo, USHORT ModeIdIndex, USHORT RefTableIndex)
{
  USHORT OEMModeIdIndex=0;

  if(!SiS_Pr->UseCustomMode) {
     OEMModeIdIndex = SiS_SearchVBModeID(SiS_Pr,&ModeNo);
     if(!(OEMModeIdIndex)) return;
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     SetOEMLCDDelay(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        SetOEMLCDData(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
     }
  }
  if(SiS_Pr->UseCustomMode) return;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     SetOEMTVDelay(SiS_Pr, HwInfo, ModeNo,OEMModeIdIndex);
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        SetOEMAntiFlicker(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
    	SetOEMPhaseIncr(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
       	SetOEMYFilter(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
     }
  }
}
#endif

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/sis/init301.c,v 1.10 2003/02/04 02:44:28 dawes Exp $ */
d3 4
a6 2
 * Mode switching code (CRT2 section) for SiS 300/540/630/730/315/550/650/740/330
 * (Universal module for Linux kernel framebuffer, XFree86 4.x)
d8 1
a8 3
 * Assembler-To-C translation
 * Copyright 2002, 2003 by Thomas Winischhofer <thomas@@winischhofer.net>
 * Minor parts Copyright SiS, Inc.
d10 2
a11 10
 * Based on BIOS
 *     1.10.07, 1.10a for SiS650/LVDS+CH7019
 *     1.11.05 for 650/LVDS (w/o Chrontel)
 *     1.07.1b, 1.10.6s, 1.11.6w, 1.11.7w, 1.11.8r for SiS650/301(B/LV), 650/301LVx
 *     2.04.50 (I) and 2.04.5c (II) for SiS630/301(B)
 *     2.02.3b, 2.03.02, 2.04.2c, 2.04.5c, 2.07a and 2.08.b3 for 630/LVDS/LVDS+CH7005
 *     2.04.5c, 2.04.6c for 730+LVDS+CH7005
 *     1.09b for 315/301(B)
 *     1.16.51 for 300+301LVX (ECS A907)
 *     1.01.03 for 330 (Xabre 400)
d13 13
a25 9
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of the copyright holder not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  The copyright holder makes no representations
 * about the suitability of this software for any purpose.  It is provided
 * "as is" without express or implied warranty.
d27 28
a54 7
 * THE COPYRIGHT HOLDER DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d62 1
a62 1
 * All comments in this file are by me, regardless if they are marked TW or not.
d66 3
a68 1
#include "init301.h"
d70 3
a72 3
#if 0
#define TWNEWPANEL
#endif
d74 1
a74 3
#if 1   /* TW: Emulate 650/301LVx BIOS 1.10.6s (should be set) */
#define SIS650301NEW
#endif
d85 1
a85 1
#define SiS_I2CDELAYSHORT  333
d87 1
a87 6
BOOLEAN
SiS_SetCRT2Group301(SiS_Private *SiS_Pr, USHORT BaseAddr,UCHAR *ROMAddr,USHORT ModeNo,
                    PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
   USHORT ModeIdIndex;
   USHORT RefreshRateTableIndex;
d89 3
a91 1
   SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
d93 8
a100 5
   if(!SiS_Pr->UseCustomMode) {
      SiS_SearchModeID(SiS_Pr,ROMAddr,&ModeNo,&ModeIdIndex);
   } else {
      ModeIdIndex = 0;
   }      
d102 8
a109 2
   /* TW: Used for shifting CR33 */
   SiS_Pr->SiS_SelectCRT2Rate = 4;
d111 3
a113 1
   SiS_UnLockCRT2(SiS_Pr, HwDeviceExtension, BaseAddr);
d115 6
a120 1
   RefreshRateTableIndex = SiS_GetRatePtrCRT2(SiS_Pr, ROMAddr,ModeNo,ModeIdIndex,HwDeviceExtension);
d122 3
a124 1
   SiS_SaveCRT2Info(SiS_Pr,ModeNo);
d126 18
a143 4
   if(SiS_LowModeStuff(SiS_Pr,ModeNo,HwDeviceExtension)) {
      SiS_DisableBridge(SiS_Pr,HwDeviceExtension,BaseAddr);
      if((SiS_Pr->SiS_IF_DEF_LVDS == 1) && (HwDeviceExtension->jChipType == SIS_730)) {
         SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x00,0x80);
a144 1
      SiS_SetCRT2ModeRegs(SiS_Pr,BaseAddr,ModeNo,ModeIdIndex,HwDeviceExtension);
d146 2
d149 13
a161 4
   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
      SiS_LockCRT2(SiS_Pr,HwDeviceExtension, BaseAddr);
      SiS_DisplayOn(SiS_Pr);
      return(TRUE);
d164 3
a166 4
   if(SiS_Pr->UseCustomMode) return(FALSE);
   
   SiS_GetCRT2Data(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                   HwDeviceExtension);
d168 3
a170 9
   /* LVDS, 650/301LV(LCDA) and 630/301B BIOS set up Panel Link */
   /* 300+LV does not */
   if((SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
      ((HwDeviceExtension->jChipType != SIS_300) && (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV))) {
   	SiS_GetLVDSDesData(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
	                   HwDeviceExtension);
   } else {
        SiS_Pr->SiS_LCDHDES = SiS_Pr->SiS_LCDVDES = 0;
   }
d172 6
a177 9
#ifdef LINUX_XF86
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "(init301: LCDHDES 0x%03x LCDVDES 0x%03x)\n", SiS_Pr->SiS_LCDHDES, SiS_Pr->SiS_LCDVDES);
  xf86DrvMsg(0, X_INFO, "(init301: HDE     0x%03x VDE     0x%03x)\n", SiS_Pr->SiS_HDE, SiS_Pr->SiS_VDE);
  xf86DrvMsg(0, X_INFO, "(init301: VGAHDE  0x%03x VGAVDE  0x%03x)\n", SiS_Pr->SiS_VGAHDE, SiS_Pr->SiS_VGAVDE);
  xf86DrvMsg(0, X_INFO, "(init301: HT      0x%03x VT      0x%03x)\n", SiS_Pr->SiS_HT, SiS_Pr->SiS_VT);
  xf86DrvMsg(0, X_INFO, "(init301: VGAHT   0x%03x VGAVT   0x%03x)\n", SiS_Pr->SiS_VGAHT, SiS_Pr->SiS_VGAVT);
#endif
#endif
d179 1
a179 34
   if(SiS_LowModeStuff(SiS_Pr,ModeNo,HwDeviceExtension)) {
      SiS_SetGroup1(SiS_Pr,BaseAddr,ROMAddr,ModeNo,ModeIdIndex,
                    HwDeviceExtension,RefreshRateTableIndex);
   }

   if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {

        if(SiS_LowModeStuff(SiS_Pr,ModeNo,HwDeviceExtension)) {

	   SiS_SetGroup2(SiS_Pr,BaseAddr,ROMAddr,ModeNo,ModeIdIndex,
	                 RefreshRateTableIndex,HwDeviceExtension);
      	   SiS_SetGroup3(SiS_Pr,BaseAddr,ROMAddr,ModeNo,ModeIdIndex,
	                 HwDeviceExtension);
      	   SiS_SetGroup4(SiS_Pr,BaseAddr,ROMAddr,ModeNo,ModeIdIndex,
	                 RefreshRateTableIndex,HwDeviceExtension);
      	   SiS_SetGroup5(SiS_Pr,HwDeviceExtension, BaseAddr,ROMAddr,
	                 ModeNo,ModeIdIndex);

	   /* TW: 630/301B BIOS does all this: */
	   if((HwDeviceExtension->jChipType < SIS_315H) &&
	      (HwDeviceExtension->jChipType != SIS_300))  {
	      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	         if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
		    if(!((SiS_Pr->SiS_SetFlag & CRT2IsVGA) && ((ModeNo == 0x03) || (ModeNo = 0x10)))) {
		       if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
		           SiS_ModCRT1CRTC(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
		                           RefreshRateTableIndex,HwDeviceExtension);
		       }
                    }
		 }
		 SiS_SetCRT2ECLK(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
		                 RefreshRateTableIndex,HwDeviceExtension);
              }
	   }
d181 1
a181 1
        }
d183 1
a183 1
   } else {
d185 9
a193 5
        if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
	        if (SiS_Pr->SiS_IF_DEF_TRUMPION == 0) {
    	 	        SiS_ModCRT1CRTC(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
		                        RefreshRateTableIndex,HwDeviceExtension);
	        }
d195 10
a204 18
        if(SiS_Pr->SiS_IF_DEF_FSTN == 0) {
     	 	SiS_SetCRT2ECLK(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
		          RefreshRateTableIndex,HwDeviceExtension);
	}
	if(SiS_LowModeStuff(SiS_Pr,ModeNo,HwDeviceExtension)) {
     	  if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	     /* TW: Inserted from 650/LVDS BIOS */
	     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
	        if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
		    SiS_SetCH701xForLCD(SiS_Pr,HwDeviceExtension,BaseAddr);
		}
	     }
	     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	        /* TW: Set Chrontel registers only if CRT2 is TV */
       		SiS_SetCHTVReg(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
		               RefreshRateTableIndex);
	     }
     	  }
d207 5
a211 1
   }
d213 6
a218 14
#ifdef SIS300
   if ( (HwDeviceExtension->jChipType == SIS_540) ||
        (HwDeviceExtension->jChipType == SIS_630) ||
        (HwDeviceExtension->jChipType == SIS_730) ||
        (HwDeviceExtension->jChipType == SIS_300) )
    {
	if(SiS_LowModeStuff(SiS_Pr,ModeNo,HwDeviceExtension)) {
	   if(SiS_Pr->SiS_UseOEM) {
	      if((SiS_Pr->SiS_UseROM) && ROMAddr && (SiS_Pr->SiS_UseOEM == -1)) {
	         if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
	            SiS_OEM300Setting(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo);
	         }
	      } else {
       	         SiS_OEM300Setting(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo);
a221 2
    }
#endif
d223 1
a223 22
#ifdef SIS315H
   if ( (HwDeviceExtension->jChipType == SIS_315H)  ||
        (HwDeviceExtension->jChipType == SIS_315)   ||
	(HwDeviceExtension->jChipType == SIS_315PRO)||
        (HwDeviceExtension->jChipType == SIS_550)   ||
        (HwDeviceExtension->jChipType == SIS_740)   ||
        (HwDeviceExtension->jChipType == SIS_650)   ||
	(HwDeviceExtension->jChipType == SIS_330) )
   {
        if(SiS_LowModeStuff(SiS_Pr,ModeNo,HwDeviceExtension)) {
#ifdef SIS650301NEW
	   SiS_FinalizeLCD(SiS_Pr,BaseAddr,ROMAddr,ModeNo,ModeIdIndex, HwDeviceExtension);
#else
	   SiS_OEMLCD(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo,ModeIdIndex);
#endif
           if(SiS_Pr->SiS_UseOEM) {
              SiS_OEM310Setting(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo,ModeIdIndex);
           }
           SiS_CRT2AutoThreshold(SiS_Pr,BaseAddr);
        }
   }
#endif
d225 1
a225 7
   if(HwDeviceExtension->jChipType < SIS_315H) {
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
          if(HwDeviceExtension->jChipType != SIS_730) {
             SiS_DisplayOn(SiS_Pr);
	  }
      }
   }
d227 5
a231 8
   if(SiS_LowModeStuff(SiS_Pr,ModeNo,HwDeviceExtension)) {
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
         if(HwDeviceExtension->jChipType == SIS_730) {
            SiS_DisplayOn(SiS_Pr);
	 }
      }
      SiS_EnableBridge(SiS_Pr,HwDeviceExtension,BaseAddr);
   }
d233 3
a235 1
   SiS_DisplayOn(SiS_Pr);
d237 1
a237 9
   if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
	if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	     /* TW: Disable LCD panel when using TV */
	     SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x11,0x0C);
	} else {
	     /* TW: Disable TV when using LCD */
	     SiS_SetCH70xxANDOR(SiS_Pr,0x010E,0xF8);
	}
   }
d239 6
a244 3
   if(SiS_LowModeStuff(SiS_Pr,ModeNo,HwDeviceExtension)) {
      SiS_LockCRT2(SiS_Pr,HwDeviceExtension, BaseAddr);
   }
d246 11
a256 1
   return 1;
d259 7
a265 4
/* TW: Checked with 330, 650/LVDS (1.10.07) and 630+301B/LVDS BIOS */
BOOLEAN
SiS_LowModeStuff(SiS_Private *SiS_Pr, USHORT ModeNo,
                 PSIS_HW_DEVICE_INFO HwDeviceExtension)
d267 7
a273 1
    USHORT temp,temp1,temp2;
d275 2
a276 21
    if((ModeNo != 0x03) && (ModeNo != 0x10) && (ModeNo != 0x12))
         return(1);
    temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x11);
    SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x11,0x80);
    temp1 = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x00);
    SiS_SetReg1(SiS_Pr->SiS_P3d4,0x00,0x55);
    temp2 = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x00);
    SiS_SetReg1(SiS_Pr->SiS_P3d4,0x00,temp1);
    SiS_SetReg1(SiS_Pr->SiS_P3d4,0x11,temp);
    if((HwDeviceExtension->jChipType >= SIS_315H) ||
       (HwDeviceExtension->jChipType == SIS_300)) {
       if(temp2 == 0x55) return(0);
       else return(1);
    } else {
       if(temp2 != 0x55) return(1);
       else {
          SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x35,0x01);
          return(0);
       }
    }
}
d278 4
a281 14
/* TW: Set Part1 registers */
/* TW: Checked with 650/LVDS (1.10.07), 650/301LV (II) and 630/301B (II) BIOS */
/* TW: Pass 2: Checked with 650/301LVx 1.10.6s, 630/301B 2.04.5a */
void
SiS_SetGroup1(SiS_Private *SiS_Pr,USHORT BaseAddr,UCHAR *ROMAddr,USHORT ModeNo,
              USHORT ModeIdIndex,PSIS_HW_DEVICE_INFO HwDeviceExtension,
	      USHORT RefreshRateTableIndex)
{
  USHORT  temp=0, tempax=0, tempbx=0, tempcx=0;
  USHORT  pushbx=0, CRT1Index=0;
#ifdef SIS315H
  USHORT  pushcx=0, tempbl=0;
#endif
  USHORT  modeflag, resinfo=0;
d283 4
a286 6
  if(ModeNo<=0x13) {
	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else {
    	CRT1Index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;
    	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d289 1
a289 2
  /* TW: LCDA exists with LVDS as well */
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
d291 2
a292 2
	   SiS_SetCRT2Sync(SiS_Pr,BaseAddr,ROMAddr,ModeNo,
                              RefreshRateTableIndex,HwDeviceExtension);
d294 1
a294 2
	   SiS_SetGroup1_LCDA(SiS_Pr,BaseAddr,ROMAddr,ModeNo,ModeIdIndex,
     	                      HwDeviceExtension,RefreshRateTableIndex);
d296 19
a314 1
  } else {
d316 2
a317 3
     if( (HwDeviceExtension->jChipType >= SIS_315H) &&
         (SiS_Pr->SiS_IF_DEF_LVDS == 1) &&
	 (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
d319 8
a326 2
        SiS_SetCRT2Sync(SiS_Pr,BaseAddr,ROMAddr,ModeNo,
                        RefreshRateTableIndex,HwDeviceExtension);
d328 9
a336 1
     } else {
d338 6
a343 2
        SiS_SetCRT2Offset(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
      		       RefreshRateTableIndex,HwDeviceExtension);
d345 1
a345 9
        if (HwDeviceExtension->jChipType < SIS_315H ) {
#ifdef SIS300
    	      SiS_SetCRT2FIFO_300(SiS_Pr,ROMAddr,ModeNo,HwDeviceExtension);
#endif
        } else {
#ifdef SIS315H
              SiS_SetCRT2FIFO_310(SiS_Pr,ROMAddr,ModeNo,HwDeviceExtension);
#endif
	}
d347 6
a352 2
        SiS_SetCRT2Sync(SiS_Pr,BaseAddr,ROMAddr,ModeNo,
                        RefreshRateTableIndex,HwDeviceExtension);
d354 2
a355 1
	/* 1. Horizontal setup */
d357 3
a359 1
        if (HwDeviceExtension->jChipType < SIS_315H ) {
d361 4
a364 1
#ifdef SIS300   /* ------------- 300 series --------------*/
d366 6
a371 2
    		temp = (SiS_Pr->SiS_VGAHT - 1) & 0x0FF;   			/* BTVGA2HT 0x08,0x09 */
    		SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x08,temp);                   /* TW: CRT2 Horizontal Total */
d373 3
a375 2
    		temp = (((SiS_Pr->SiS_VGAHT - 1) & 0xFF00) >> 8) << 4;
    		SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0x0f,temp);          /* TW: CRT2 Horizontal Total Overflow [7:4] */
d377 6
a382 2
    		temp = (SiS_Pr->SiS_VGAHDE + 12) & 0x0FF;                       /* BTVGA2HDEE 0x0A,0x0C */
    		SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0A,temp);                   /* TW: CRT2 Horizontal Display Enable End */
d384 9
a392 26
    		pushbx = SiS_Pr->SiS_VGAHDE + 12;                               /* bx  BTVGA@@HRS 0x0B,0x0C */
    		tempcx = (SiS_Pr->SiS_VGAHT - SiS_Pr->SiS_VGAHDE) >> 2;
    		tempbx = pushbx + tempcx;
    		tempcx <<= 1;
    		tempcx += tempbx;

    		if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
      			if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC){
			        /* CRT1Index &= 0x3F; - Not any longer */
        			tempbx = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[4];
        			tempbx |= ((SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14] & 0xC0) << 2);
        			tempbx = (tempbx - 1) << 3;
        			tempcx = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[5];
        			tempcx &= 0x1F;
        			temp = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[15];
        			temp = (temp & 0x04) << (6-2);
        			tempcx = ((tempcx | temp) - 1) << 3;
      			}

    			if((SiS_Pr->SiS_VBInfo & SetCRT2ToTV) && (resinfo == 0x08)){
        			if(!(SiS_Pr->SiS_VBInfo & SetPALTV)){
      					tempbx = 1040;
      					tempcx = 1042;
      				}
    			}
	        }
d394 5
a398 3
    		temp = tempbx & 0x00FF;
    		SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0B,temp);                   /* TW: CRT2 Horizontal Retrace Start */
#endif /* SIS300 */
d400 10
a409 1
 	} else {
d411 3
a413 1
#ifdef SIS315H  /* ----------------- 310/325 series ------------- */
d415 4
a418 14
	        tempcx = SiS_Pr->SiS_VGAHT;				       /* BTVGA2HT 0x08,0x09 */
		pushcx = tempcx;
		if(modeflag & HalfDCLK) {
		    if((SiS_Pr->SiS_IF_DEF_LVDS == 1) && (SiS_Pr->SiS_IF_DEF_CH70xx == 0)) {
		          tempax = SiS_Pr->SiS_VGAHDE >> 1;
			  tempcx = SiS_Pr->SiS_HT - SiS_Pr->SiS_HDE + tempax;
			  if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) {
			      tempcx = SiS_Pr->SiS_HT - tempax;
			  }
		    } else {
			  tempcx >>= 1;
		    }
		}
		tempcx--;
d420 4
a423 2
		temp = tempcx & 0xff;
		SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x08,temp);                  /* TW: CRT2 Horizontal Total */
d425 4
a428 2
		temp = ((tempcx & 0xff00) >> 8) << 4;
		SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0x0F,temp);         /* TW: CRT2 Horizontal Total Overflow [7:4] */
d430 1
a430 9
		tempcx = pushcx;					       /* BTVGA2HDEE 0x0A,0x0C */
		tempbx = SiS_Pr->SiS_VGAHDE;
		tempcx -= tempbx;
		tempcx >>= 2;
		if(modeflag & HalfDCLK) {
		    tempbx >>= 1;
		    tempcx >>= 1;
		}
		tempbx += 16;
d432 7
a438 2
		temp = tempbx & 0xff;
		SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0A,temp);                  /* TW: CRT2 Horizontal Display Enable End */
d440 9
a448 40
		pushbx = tempbx;
		tempcx >>= 1;
		tempbx += tempcx;
		tempcx += tempbx;

		if(SiS_Pr->SiS_IF_DEF_LVDS==0) {
             	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
                	tempbx = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[4];
                	tempbx |= ((SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14] & 0xC0) << 2);
                	tempbx = (tempbx - 3) << 3;         		/*(VGAHRS-3)*8 */
                	tempcx = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[5];
               		tempcx &= 0x1F;
                	temp = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[15];
                	temp = (temp & 0x04) << (5-2);      		/* VGAHRE D[5] */
                	tempcx = ((tempcx | temp) - 3) << 3;    	/* (VGAHRE-3)*8 */
			tempcx &= 0x00FF;
			tempcx |= (tempbx & 0xFF00);
                	tempbx += 16;
                	tempcx += 16;
			tempax = SiS_Pr->SiS_VGAHT;
			if (modeflag & HalfDCLK)  tempax >>= 1;
			tempax--;
			if (tempcx > tempax)  tempcx = tempax;
             	   }
         	   if((SiS_Pr->SiS_VBInfo & SetCRT2ToTV) && (resinfo == 0x08)){
             	      if(!(SiS_Pr->SiS_VBInfo & SetPALTV)){
      		 	 tempbx = 1040;
      		 	 tempcx = 1042;
      	     	      }
         	   }
		   /* TW: Makes no sense, but is in 650/301LVx 1.10.6s */
         	   if((SiS_Pr->SiS_VBInfo & SetCRT2ToTV) && (resinfo == 0x08)){
		      if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV)) {
             	         if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
      		 	    tempbx = 1040;
      		 	    tempcx = 1042;
      	     	         }
		      }
         	   }
                }
d450 7
a456 3
		temp = tempbx & 0xff;
	 	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0B,temp);                 /* TW: CRT2 Horizontal Retrace Start */
#endif  /* SIS315H */
d458 5
a462 1
     	}  /* 310 series */
d464 1
a464 1
  	/* TW: The following is done for all bridge/chip types/series */
d466 1
a466 6
  	tempax = tempbx & 0xFF00;
  	tempbx = pushbx;
  	tempbx = (tempbx & 0x00FF) | ((tempbx & 0xFF00) << 4);
  	tempax |= (tempbx & 0xFF00);
  	temp = (tempax & 0xFF00) >> 8;
  	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0C,temp);                        /* TW: Overflow */
d468 9
a476 2
  	temp = tempcx & 0x00FF;
  	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0D,temp);                        /* TW: CRT2 Horizontal Retrace End */
d478 16
a493 1
  	/* 2. Vertical setup */
d495 1
a495 2
  	tempcx = SiS_Pr->SiS_VGAVT - 1;
  	temp = tempcx & 0x00FF;
d497 1
a497 42
	/* TW: Matches 650/301LV, 650/LVDS, 630/LVDS(CLEVO), 630/LVDS(no-Ch7005) */
        if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
	     if(HwDeviceExtension->jChipType < SIS_315H) {
	          if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
		       if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSVIDEO|SetCRT2ToAVIDEO)) {
		           temp--;
		       }
                  }
	     } else {
 		      temp--;
             }
        } else if(HwDeviceExtension->jChipType >= SIS_315H) {
	    /* TW: Inserted from 650/301LVx 1.10.6s */
	    temp--;
	}
  	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0E,temp);                        /* TW: CRT2 Vertical Total */

  	tempbx = SiS_Pr->SiS_VGAVDE - 1;
  	temp = tempbx & 0x00FF;
  	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0F,temp);                        /* TW: CRT2 Vertical Display Enable End */

  	temp = ((tempbx & 0xFF00) << 3) >> 8;
  	temp |= ((tempcx & 0xFF00) >> 8);
  	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x12,temp);                        /* TW: Overflow (and HWCursor Test Mode) */

	/* TW: For 650/LVDS (1.10.07), 650/301LVx (1.10.6s) */
	if(HwDeviceExtension->jChipType >= SIS_315H) {
           tempbx++;
   	   tempax = tempbx;
	   tempcx++;
	   tempcx -= tempax;
	   tempcx >>= 2;
	   tempbx += tempcx;
	   if(tempcx < 4) tempcx = 4;
	   tempcx >>= 2;
	   tempcx += tempbx;
	   tempcx++;
	} else {
	   /* TW: For 300/630/LVDS/301B: */
  	   tempbx = (SiS_Pr->SiS_VGAVT + SiS_Pr->SiS_VGAVDE) >> 1;                 /*  BTVGA2VRS     0x10,0x11   */
  	   tempcx = ((SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE) >> 4) + tempbx + 1;  /*  BTVGA2VRE     0x11        */
	}
d499 1
a499 14
  	if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
    	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC){
      		tempbx = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[8];
      		temp = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[7];
      		if(temp & 0x04) tempbx |= 0x0100;
      		if(temp & 0x80) tempbx |= 0x0200;
      		temp = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[13];
      		if(temp & 0x08) tempbx |= 0x0400;
      		temp = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[9];
      		tempcx = (tempcx & 0xFF00) | (temp & 0x00FF);
    	   }
  	}
  	temp = tempbx & 0x00FF;
  	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x10,temp);           /* TW: CRT2 Vertical Retrace Start */
d501 1
a501 3
  	temp = ((tempbx & 0xFF00) >> 8) << 4;
  	temp |= (tempcx & 0x000F);
  	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x11,temp);           /* TW: CRT2 Vert. Retrace End; Overflow; "Enable CRTC Check" */
d503 5
a507 1
  	/* 3. Panel compensation delay */
d509 1
a509 1
  	if(HwDeviceExtension->jChipType < SIS_315H) {
d511 35
a545 1
#ifdef SIS300  /* ---------- 300 series -------------- */
d547 1
a547 2
	   if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
	        temp = 0x20;
d549 8
a556 51
		if(HwDeviceExtension->jChipType == SIS_300) {
		   temp = 0x10;
		   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)  temp = 0x2c;
		   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) temp = 0x20;
		   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960)  temp = 0x24;
		}
		if(SiS_Pr->SiS_VBType & VB_SIS301) {
		   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) temp = 0x20;
		}
#if 0           /* TW: Not in 630/301B BIOS */
		if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960) temp = 0x24;
#endif
		if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) temp = 0x08;
#ifdef oldHV    
		if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) {
      		    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) temp = 0x2c;
      		    else temp = 0x20;
    	        }
#endif
		if((ROMAddr) && (SiS_Pr->SiS_UseROM) && (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
		    if(ROMAddr[0x220] & 0x80) {
		        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToTV-SetCRT2ToHiVisionTV))
				temp = ROMAddr[0x221];
			else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV)
				temp = ROMAddr[0x222];
		        else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)
				temp = ROMAddr[0x223];
			else
				temp = ROMAddr[0x224];
			temp &= 0x3c;
		    }
		}
		if(HwDeviceExtension->pdc) {
			temp = HwDeviceExtension->pdc & 0x3c;
		}
	   } else {
	        temp = 0x20;
		if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
		   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) temp = 0x04;
		}
		if((ROMAddr) && SiS_Pr->SiS_UseROM) {
		    if(ROMAddr[0x220] & 0x80) {
		        temp = ROMAddr[0x220] & 0x3c;
		    }
		}
		if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
		   if(HwDeviceExtension->pdc) {
			temp = HwDeviceExtension->pdc & 0x3c;
		   }
		}
	   }
d558 1
a558 1
    	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,~0x03C,temp);         /* TW: Panel Link Delay Compensation; (Software Command Reset; Power Saving) */
d560 1
a560 1
#endif  /* SIS300 */
d562 2
a563 1
  	} else {
d565 10
a574 21
#ifdef SIS315H   /* ----------- 310/325 series ---------------*/

	   if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
                temp = 0x10;
                if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)  temp = 0x2c;
    	        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) temp = 0x20;
    	        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960)  temp = 0x24;
		if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)                     temp = 0x08;
		tempbl = 0xF0;
	   } else {
	        temp = 0x00;
		if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) temp = 0x0a;
		tempbl = 0xF0;
		if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
		   if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) tempbl = 0x0F;
		}
	   }
#if 0      /* TW: Not done in 650/301LVx 1.10.6s  */
           if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
                 temp >>= 2;
	   }
a575 1
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,tempbl,temp);	    /* TW: Panel Link Delay Compensation */
d577 3
a579 4
    	   tempax = 0;
    	   if (modeflag & DoubleScanMode) tempax |= 0x80;
    	   if (modeflag & HalfDCLK)       tempax |= 0x40;
    	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2C,0x3f,tempax);
d581 4
a584 1
#endif  /* SIS315H */
d586 1
a586 1
  	}
d588 1
a588 1
     }  /* Slavemode */
d590 5
a594 1
     if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
d596 4
a599 5
        /* TW: 630/301B BIOS sets up Panel Link, too! (300/301LV and 650/LV do not) */
        if( (HwDeviceExtension->jChipType < SIS_315H) &&
	    (HwDeviceExtension->jChipType != SIS_300) &&
	    (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
	    (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) ) {
d601 5
a605 8
	    SiS_SetGroup1_LVDS(SiS_Pr,BaseAddr,ROMAddr,ModeNo,ModeIdIndex,
	                       HwDeviceExtension,RefreshRateTableIndex);

        } else if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {                             

    	    SiS_SetGroup1_301(SiS_Pr,BaseAddr,ROMAddr,ModeNo,ModeIdIndex,
	                      HwDeviceExtension,RefreshRateTableIndex);
        }
d607 18
d626 5
d632 4
a635 15
        if(HwDeviceExtension->jChipType < SIS_315H) {
	     SiS_SetGroup1_LVDS(SiS_Pr,BaseAddr,ROMAddr,ModeNo,ModeIdIndex,
	                        HwDeviceExtension,RefreshRateTableIndex);
	} else {
	    /* TW: For 650/LVDS */
	    if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
                 if((!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) || (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
    	             SiS_SetGroup1_LVDS(SiS_Pr,BaseAddr,ROMAddr,ModeNo,ModeIdIndex,
	                               HwDeviceExtension,RefreshRateTableIndex);
                 }
	    } else {
	         SiS_SetGroup1_LVDS(SiS_Pr,BaseAddr,ROMAddr,ModeNo,ModeIdIndex,
	                               HwDeviceExtension,RefreshRateTableIndex);
	    }
	}
d637 14
a650 2
     }
   } /* LCDA */
d653 2
a654 5
/* TW: Checked against 650/301LV and 630/301B (II) BIOS */
/* TW: Pass 2: Checked with 650/301LVx (1.10.6s) and 630/301B (2.04.5a) */
void
SiS_SetGroup1_301(SiS_Private *SiS_Pr, USHORT  BaseAddr,UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                  PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT RefreshRateTableIndex)
d656 2
a657 7
  USHORT  push1,push2;
  USHORT  tempax,tempbx,tempcx,temp;
  USHORT  resinfo,modeflag;

  if(ModeNo<=0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
    	resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
d659 1
a659 2
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d661 1
d663 3
a665 1
  /* TW: The following is only done if bridge is in slave mode: */
d667 6
a672 2
  tempax = 0xFFFF;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV))  tempax = SiS_GetVGAHT2(SiS_Pr);
d674 4
a677 5
  /* TW: 630/301B, 300/301LV do not check this flag, assume it is set */
  /*     650/LV and 650/301LVx BIOS do not check this either; so we set it... */
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
  	modeflag |= Charx8Dot;
  }
d679 8
a686 2
  if(modeflag & Charx8Dot) tempcx = 0x08;
  else tempcx = 0x09;
d688 5
a692 1
  if(tempax >= SiS_Pr->SiS_VGAHT) tempax = SiS_Pr->SiS_VGAHT;
d694 9
a702 1
  if(modeflag & HalfDCLK) tempax >>= 1;
d704 5
a708 2
  tempax = (tempax / tempcx) - 5;
  tempbx = tempax & 0xFF;
d710 7
a716 2
  temp = 0xFF;                                                  /* set MAX HT */
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x03,temp);
d718 10
a727 16
  tempax = SiS_Pr->SiS_VGAHDE;                                 	/* 0x04 Horizontal Display End */
  if(modeflag & HalfDCLK) tempax >>= 1;
  tempax = (tempax / tempcx) - 1;
  tempbx |= ((tempax & 0x00FF) << 8);
  temp = tempax & 0xFF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x04,temp);

  temp = (tempbx & 0xFF00) >> 8;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {        
    	    temp += 2;
        }
#ifdef oldHV
    	if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) {
            if(resinfo == 7) temp -= 2;
    	}
d729 2
a730 2
  }
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x05,temp);                 /* 0x05 Horizontal Display Start */
d732 7
a738 55
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x06,0x03);                 /* 0x06 Horizontal Blank end     */

#ifdef oldHV
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) {
    temp = (tempbx & 0x00FF) - 1;
    if(!(modeflag & HalfDCLK)) {
      temp -= 6;
      if(SiS_Pr->SiS_SetFlag & TVSimuMode) {
        temp -= 2;
        if(ModeNo > 0x13) temp -= 10;
      }
    }
  } else {
#endif
    tempcx = tempbx & 0x00FF;
    tempbx = (tempbx & 0xFF00) >> 8;
    tempcx = (tempcx + tempbx) >> 1;
    temp = (tempcx & 0x00FF) + 2;
    if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV){
       temp--;
       if(!(modeflag & HalfDCLK)){
          if((modeflag & Charx8Dot)){
             temp += 4;
             if(SiS_Pr->SiS_VGAHDE >= 800) temp -= 6;
	     /* TW: Inserted from 650/301 BIOS, 630/301B/301 don't do this */
             if(HwDeviceExtension->jChipType >= SIS_315H) {
	         if(SiS_Pr->SiS_VGAHDE == 800) temp += 2;
             }
          }
       }
    } else {
       if(!(modeflag & HalfDCLK)) {
         temp -= 4;
         if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x960) {
           if(SiS_Pr->SiS_VGAHDE >= 800){
             temp -= 7;
	     if(HwDeviceExtension->jChipType < SIS_315H) {
	       /* 650/301LV(x) does not do this, 630/301B, 300/301LV do */
               if(SiS_Pr->SiS_ModeType == ModeEGA){
                 if(SiS_Pr->SiS_VGAVDE == 1024){
                   temp += 15;
                   if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024) temp += 7;
                 }
               }
	     }
             if(SiS_Pr->SiS_VGAHDE >= 1280){
               if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x960) {
                 if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) temp += 28;
               }
             }
           }
         }
       }
    }
#ifdef oldHV
d740 2
a742 1
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x07,temp);               	/* 0x07 Horizontal Retrace Start */
d744 8
a751 1
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x08,0x00);                 /* 0x08 Horizontal Retrace End   */
d753 5
a757 39
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(SiS_Pr->SiS_SetFlag & TVSimuMode) {
            if(ModeNo <= 1) {
	        SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x07,0x2a);
		if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
		    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x08,0x61);
		} else {
		    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x08,0x41);
		}
	    } else if(SiS_Pr->SiS_ModeType == ModeText) {
	        if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
		    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x07,0x54);
		} else {
		    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x07,0x55);
		}
		SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x08,0x00);
	    } else if(ModeNo <= 0x13) {
	        if(modeflag & HalfDCLK) {
		    if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
		        SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x07,0x30);
			SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x08,0x03);
		    } else {
		        SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x07,0x2f);
			SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x08,0x02);
		    }
		} else {
		    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x07,0x5b);
		    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x08,0x03);
		}
	    } else if( ((HwDeviceExtension->jChipType >= SIS_315H) && (ModeNo == 0x50)) ||
	               ((HwDeviceExtension->jChipType < SIS_315H) && (resinfo == 0 || resinfo == 1)) ) {
	        if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
		    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x07,0x30);
		    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x08,0x03);
		} else {
		    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x07,0x2f);
		    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x08,0x03);
		}
	    }
d759 3
a761 1
     }
d763 9
d773 10
a782 1
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x18,0x03);                	/* 0x18 SR08    */
d784 5
a788 1
  SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x19,0xF0);
d790 7
a796 2
  tempbx = SiS_Pr->SiS_VGAVT;
  push1 = tempbx;
d798 5
a802 1
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x09,0xFF);                	/* 0x09 Set Max VT    */
d804 3
a806 16
  tempcx = 0x121;
  tempbx = SiS_Pr->SiS_VGAVDE;                               	/* 0x0E Vertical Display End */
  if(tempbx == 357) tempbx = 350;
  if(tempbx == 360) tempbx = 350;
  if(tempbx == 375) tempbx = 350;
  if(tempbx == 405) tempbx = 400;
  if(tempbx == 420) tempbx = 400;
  if(tempbx == 525) tempbx = 480;
  push2 = tempbx;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
    	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
      		if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        		if(tempbx == 350) tempbx += 5;
        		if(tempbx == 480) tempbx += 5;
      		}
    	}
d808 9
a816 5
  tempbx--;
  temp = tempbx & 0x00FF;
  tempbx--;
  temp = tempbx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x10,temp);        		/* 0x10 vertical Blank Start */
d818 9
a826 7
  tempbx = push2;
  tempbx--;
  temp = tempbx & 0x00FF;
#if 0
  /* TW: Missing code from 630/301B 2.04.5a and 650/301LVx 1.10.6s (calles int 2f) */
  if(xxx()) {
      if(temp == 0xdf) temp = 0xda;
d828 2
a830 1
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0E,temp);
d832 14
a845 3
  if(tempbx & 0x0100) {
  	tempcx |= 0x0002;
	if(SiS_Pr->SiS_VBType & VB_SIS301) tempcx |= 0x000a;
d847 3
d851 4
a854 2
  tempax = 0x000B;
  if(modeflag & DoubleScanMode) tempax |= 0x8000;
d856 5
a860 3
  if(tempbx & 0x0200) {
  	tempcx |= 0x0040;
	if(SiS_Pr->SiS_VBType & VB_SIS301) tempax |= 0x2000;
d862 7
d870 9
a878 7
  if(SiS_Pr->SiS_VBType & VB_SIS301) {
        if(SiS_Pr->SiS_VBInfo & SetPALTV) {
	      if(SiS_Pr->SiS_VGAVDE == 480) {
	             tempax = (tempax & 0x00ff) | 0x2000;
		     if(modeflag & DoubleScanMode)  tempax |= 0x8000;
	      }
	}
d880 2
d883 4
a886 2
  temp = (tempax & 0xFF00) >> 8;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0B,temp);
d888 4
a891 1
  if(tempbx & 0x0400) tempcx |= 0x0600;
d893 3
a895 1
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x11,0x00);                	/* 0x11 Vertical Blank End */
d897 6
a902 4
  tempax = push1;
  tempax -= tempbx;
  tempax >>= 2;
  push1 = tempax;
d904 31
a934 20
  if(HwDeviceExtension->jChipType >= SIS_315H) {
        /* TW: Inserted from 650/301LVx 1.10.6s */
        if(ModeNo > 0x13) {
	    if(resinfo != 0x09) {
	        tempax <<= 1;
		tempbx += tempax;
	    }
	} else {
	    if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1400x1050) {
	        tempax <<= 1;
		tempbx += tempax;
	    }
	}
  } else if((resinfo != 0x09) || (SiS_Pr->SiS_VBType & VB_SIS301)) {
    	tempax <<= 1;
    	tempbx += tempax;
  }
#ifdef oldHV
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) {
    	tempbx -= 10;
d936 2
a937 23
#endif
    	if(SiS_Pr->SiS_SetFlag & TVSimuMode) {
      	   if(SiS_Pr->SiS_VBInfo & SetPALTV) {
	       if(!(SiS_Pr->SiS_HiVision & 0x03)) {
                    tempbx += 40;
		    if(HwDeviceExtension->jChipType >= SIS_315H) {
		       if(SiS_Pr->SiS_VGAHDE == 800) tempbx += 10;
		    }
      	       }
	   }
    	}
#ifdef oldHV
  }
#endif
  tempax = push1;
  tempax >>= 2;
  tempax++;
  tempax += tempbx;
  push1 = tempax;
  if(SiS_Pr->SiS_VBInfo & SetPALTV) {
    	if(tempbx <= 513)  {
      		if(tempax >= 513) tempbx = 513;
    	}
a938 2
  temp = tempbx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0C,temp);			/* 0x0C Vertical Retrace Start */
d940 1
a940 4
  if(!(SiS_Pr->SiS_VBType & VB_SIS301)) {
  	tempbx--;
  	temp = tempbx & 0x00FF;
  	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x10,temp);
d942 1
a942 1
	if(tempbx & 0x0100) tempcx |= 0x0008;
d944 14
a957 2
  	if(tempbx & 0x0200) {
    		SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x0B,0x20);
d959 5
d965 25
a989 8
  	tempbx++;
  }
  if(tempbx & 0x0100) tempcx |= 0x0004;
  if(tempbx & 0x0200) tempcx |= 0x0080;
  if(tempbx & 0x0400) {
        if(SiS_Pr->SiS_VBType & VB_SIS301) tempcx |= 0x0800;
  	else                               tempcx |= 0x0C00;
  }
d991 3
a993 4
  tempbx = push1;
  temp = tempbx & 0x00FF;
  temp &= 0x0F;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0D,temp);        		/* 0x0D vertical Retrace End */
d995 16
a1010 1
  if(tempbx & 0x0010) tempcx |= 0x2000;
d1012 11
a1022 4
  temp = tempcx & 0x00FF;
  if(SiS_Pr->SiS_VBType & VB_SIS301) {
	if(SiS_Pr->SiS_VBInfo & SetPALTV) {
	      if(SiS_Pr->SiS_VGAVDE == 480)  temp = 0xa3;
a1023 2
  }
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0A,temp);                    		/* 0x0A CR07 */
d1025 1
a1025 2
  temp = (tempcx & 0xFF00) >> 8;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x17,temp);                    		/* 0x17 SR0A */
d1027 30
a1056 8
  tempax = modeflag;
  temp = (tempax & 0xFF00) >> 8;
  temp = (temp >> 1) & 0x09;
  /* TW: Inserted from 630/301B and 650/301(LV/LVX) BIOS; not in 630/301 BIOS */
  if(!(SiS_Pr->SiS_VBType & VB_SIS301)) {
       temp |= 0x01;
  }
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x16,temp);                    		/* 0x16 SR01 */
d1058 4
a1061 1
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0F,0x00);                        		/* 0x0F CR14 */
d1063 33
a1095 7
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x12,0x00);                        		/* 0x12 CR17 */

  if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
       if(HwDeviceExtension->jChipType >= SIS_315H) {
           /* TW: Inserted from 650/301LVx 1.10.6s */
           if(SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00) & 0x01) {
	       temp = 0x80;
d1097 1
a1097 3
       } else temp = 0x80;
  } else  temp = 0x00;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1A,temp);                         	/* 0x1A SR0E */
d1099 5
a1103 15
  return;
}

/* TW: Checked against 650/LVDS 1.10.07, 630/301B (I,II) and 630/LVDS BIOS */
void
SiS_SetGroup1_LVDS(SiS_Private *SiS_Pr,USHORT  BaseAddr,UCHAR *ROMAddr,USHORT ModeNo,
		   USHORT ModeIdIndex,PSIS_HW_DEVICE_INFO HwDeviceExtension,
		   USHORT RefreshRateTableIndex)
{
  USHORT modeflag, resinfo;
  USHORT push1, push2, tempax, tempbx, tempcx, temp;
#ifdef SIS315H
  USHORT pushcx;
#endif
  ULONG  tempeax=0, tempebx, tempecx, tempvcfact=0;
d1105 1
a1105 7
  if(ModeNo<=0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
    	resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  } else {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }
d1107 7
a1113 1
  /* TW: Set up Panel Link */
d1115 22
a1136 1
  /* 1. Horizontal setup */
d1138 18
a1155 1
  tempax = SiS_Pr->SiS_LCDHDES;
a1156 2
  if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) && (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode))) {
  	tempax -= 8;
d1159 1
a1159 1
  tempcx = SiS_Pr->SiS_HT;    				  /* Horiz. Total */
d1161 2
a1162 11
  tempbx = SiS_Pr->SiS_HDE;                               /* Horiz. Display End */

  if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) {
    if(!SiS_Pr->SiS_IF_DEF_DSTN) {
 	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)        tempbx = 800;
    	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)  tempbx = 1024;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600)  tempbx = 1024;  /* TW: not done in BIOS */
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768)  tempbx = 1152;  /* TW: not done in BIOS */
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) tempbx = 1280;  /* TW */
        else if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480)   tempbx = 1400;  /* TW */
    }
a1163 1
  tempcx = (tempcx - tempbx) >> 2;		 /* HT-HDE / 4 */
d1165 11
a1175 1
  push1 = tempax;
d1177 3
a1179 1
  tempax += tempbx;
d1181 3
a1183 1
  if(tempax >= SiS_Pr->SiS_HT) tempax -= SiS_Pr->SiS_HT;
d1185 1
a1185 1
  push2 = tempax;
d1187 7
a1193 24
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
       if(!SiS_Pr->SiS_IF_DEF_DSTN){
     	  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)        tempcx = 0x0028;
     	  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) tempcx = 0x0030;
     	  else if( (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) ||
		   (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) ) {
	  	if(HwDeviceExtension->jChipType < SIS_315H) {
		     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
		           tempcx = 0x0017;
#ifdef TWNEWPANEL
			   tempcx = 0x0018;
#endif
		     } else {
		           tempcx = 0x0017;  /* A901; other 301B BIOS 0x0018; */
		     }
		} else {
		     tempcx = 0x0018;
		}
	  }
	  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600)  tempcx = 0x0018;
	  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) tempcx = 0x0040;
     	  else if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480)   tempcx = 0x0030;
       }
  }
d1195 2
a1196 2
  tempcx += tempax;                              /* lcdhrs  */
  if(tempcx >= SiS_Pr->SiS_HT) tempcx -= SiS_Pr->SiS_HT;
d1198 5
a1202 3
  tempax = tempcx >> 3;                          /* BPLHRS */
  temp = tempax & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x14,temp);		 /* Part1_14h; TW: Panel Link Horizontal Retrace Start  */
d1204 13
a1216 1
  temp = (tempax & 0x00FF) + 10;
d1218 1
a1218 19
  /* TW: Inserted this entire "if"-section from 650/LVDS BIOS */
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
      if(!SiS_Pr->SiS_IF_DEF_DSTN){
        if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
	  temp += 6;
          if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel800x600) {
	    temp++;
	    if(HwDeviceExtension->jChipType >= SIS_315H) {
	       if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1024x768) {
	          temp += 7;
		  if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1600x1200) {
		     temp -= 10;
		  }
	       }
	    }
	  }
        }
      }
  }
d1220 3
a1222 4
  temp &= 0x1F;
  temp |= ((tempcx & 0x0007) << 5);
  if(SiS_Pr->SiS_IF_DEF_FSTN) temp = 0x20;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x15,temp);    	 /* Part1_15h; TW: Panel Link Horizontal Retrace End/Skew */
d1224 6
a1229 2
  tempbx = push2;
  tempcx = push1;                                /* lcdhdes  */
d1231 1
a1231 2
  temp = (tempcx & 0x0007);                      /* BPLHDESKEW  */
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1A,temp);   	 /* Part1_1Ah; TW: Panel Link Vertical Retrace Start (2:0) */
d1233 2
a1234 4
  tempcx >>= 3;                                  /* BPLHDES */
  temp = (tempcx & 0x00FF);
  if(ModeNo == 0x5b) temp--;                     /* fix fstn mode=5b */
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x16,temp);    	 /* Part1_16h; TW: Panel Link Horizontal Display Enable Start  */
d1236 2
a1237 2
  if(HwDeviceExtension->jChipType < SIS_315H) {  /* TW: Not done in LVDS BIOS 1.10.07 */
     if(tempbx & 0x07) tempbx += 8;              /* TW: Done in 630/301B and 630/LVDS BIOSes */
a1238 4
  tempbx >>= 3;                                  /* BPLHDEE  */
  temp = tempbx & 0x00FF;
  if(ModeNo == 0x5b) temp--;			 /* fix fstn mode=5b */
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x17,temp);   	 /* Part1_17h; TW: Panel Link Horizontal Display Enable End  */
d1240 1
a1240 1
  /* 2. Vertical setup */
d1242 1
a1242 1
  if(HwDeviceExtension->jChipType < SIS_315H) {
d1244 74
a1317 16
      /* TW: This entire section from 630/301B and 630/LVDS/LVDS+CH BIOS */
      tempcx = SiS_Pr->SiS_VGAVT;
      tempbx = SiS_Pr->SiS_VGAVDE;
      if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) {
         if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
	    tempbx = 600;
	    if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel800x600) {
	       tempbx = 768;
	       if( (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1024x768) &&
	           (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1152x768) ) {
	 	    tempbx = 600;
	       }
	    }
         }
      }
      tempcx -= tempbx;
d1319 1
a1319 3
  } else {

      tempcx = SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE;          /* VGAVT-VGAVDE  */
d1321 49
d1372 1
a1372 2
  tempbx = SiS_Pr->SiS_LCDVDES;	   		 	 	/* VGAVDES  */
  push1 = tempbx;
d1374 1
a1374 1
  tempax = SiS_Pr->SiS_VGAVDE;
d1376 8
a1383 15
  if((SiS_Pr->SiS_IF_DEF_TRUMPION == 0) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))
                                && (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480)) {
    	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	    if(!SiS_Pr->SiS_IF_DEF_DSTN){
      		if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)        tempax = 600;
      		else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)  tempax = 768;
		else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600)  tempax = 600;   /* TW */
      		else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768)  tempax = 768;   /* TW */
		else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) tempax = 1024;  /* TW */
		else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) tempax = 1050;  /* TW */
		else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) tempax = 1200;  /* TW */
		else                                                          tempax = 600;
            }
    	}
  }
d1385 5
a1389 2
  tempbx += tempax;
  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;
d1391 8
a1398 1
  push2 = tempbx;
d1400 9
a1408 19
  tempcx >>= 1;

  if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480)){
     if(!SiS_Pr->SiS_IF_DEF_DSTN){
     	if( (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) ||
	    (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) ) {   /* TW: @@@@@@ TEST - not in BIOS! */
	     	tempcx = 0x0001;
     	} else if( (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) ||
	           (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) ) {
		if(HwDeviceExtension->jChipType < SIS_315H) {
		      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
			    tempcx = 0x0002;
#ifdef TWNEWPANEL
			    tempcx = 0x0003;
#endif
		      } else {
		            tempcx = 0x0002;   /* TW: A901; other 301B BIOS sets 0x0003; */
		      }
		} else tempcx = 0x0003;
a1409 5
     	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)  tempcx = 0x0003;
     	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) tempcx = 0x0001;
     	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) tempcx = 0x0001;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) tempcx = 0x0001;
     	else 				                              tempcx = 0x0057;
d1411 1
d1414 1
a1414 1
  tempbx += tempcx;			 	/* BPLVRS  */
d1416 4
a1419 3
  if(HwDeviceExtension->jChipType < SIS_315H) {
      tempbx++;
  }
d1421 3
a1423 1
  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;
d1425 9
a1433 2
  temp = tempbx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x18,temp);       	 /* Part1_18h; TW: Panel Link Vertical Retrace Start  */
d1435 5
a1439 1
  tempcx >>= 3;
d1441 15
a1455 14
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     if( (HwDeviceExtension->jChipType < SIS_315H) &&
         (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) )     tempcx = 0x0001;
     else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)  tempcx = 0x0002;
     else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)  tempcx = 0x0002;
     else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)    tempcx = 0x0003;
     else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600)   tempcx = 0x0005;
     else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768)   tempcx = 0x0005;
     else if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480)  {
     		if(HwDeviceExtension->jChipType < SIS_315H) {
		        if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
				tempcx = 0x0004;
#ifdef TWNEWPANEL
				tempcx = 0x0005;
d1457 1
a1457 8
		        } else {
				tempcx = 0x0004;   /* A901; Other BIOS sets 0x0005; */
			}
		} else {
			tempcx = 0x0005;
		}
     }
  }
d1459 24
a1482 3
  tempcx = tempcx + tempbx + 1;                  /* BPLVRE  */
  temp = tempcx & 0x000F;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0xf0,temp); /* Part1_19h; TW: Panel Link Vertical Retrace End (3:0); Misc.  */
d1484 7
a1490 16
  temp = ((tempbx & 0x0700) >> 8) << 3;          /* BPLDESKEW =0 */
  if(SiS_Pr->SiS_VGAVDE != SiS_Pr->SiS_VDE)  temp |= 0x40;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)    temp |= 0x40;
  if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
      if(HwDeviceExtension->jChipType >= SIS_315H) {
         if(SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00) & 0x01) {	/* TW: Inserted from 650/LVDS 1.10.07 */
            temp |= 0x80;
         }
      } else {
	 if( (HwDeviceExtension->jChipType == SIS_630) ||
	     (HwDeviceExtension->jChipType == SIS_730) ) {
	    if(HwDeviceExtension->jChipRevision >= 0x30) {
	       temp |= 0x80;
	    }
	 }
      }
a1491 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1A,0x87,temp);  /* Part1_1Ah; TW: Panel Link Control Signal (7:3); Vertical Retrace Start (2:0) */
d1493 1
a1493 1
  if (HwDeviceExtension->jChipType < SIS_315H) {
d1495 12
a1506 1
#ifdef SIS300      /* 300 series */
d1508 4
a1511 5
        tempeax = SiS_Pr->SiS_VGAVDE << 6;
        temp = (USHORT)(tempeax % (ULONG)SiS_Pr->SiS_VDE);
        tempeax = tempeax / (ULONG)SiS_Pr->SiS_VDE;
        if(temp != 0) tempeax++;
        tempebx = tempeax;                         /* BPLVCFACT  */
d1513 6
a1518 2
  	if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA) {
	     tempebx = 0x003F;
d1520 3
d1524 1
a1524 2
  	temp = (USHORT)(tempebx & 0x00FF);
  	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1E,temp);      /* Part1_1Eh; TW: Panel Link Vertical Scaling Factor */
d1526 7
a1532 1
#endif /* SIS300 */
d1534 3
d1538 3
d1542 2
a1543 1
#ifdef SIS315H  /* 310/325 series */
d1545 159
a1703 1
	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1E,0x23);
d1705 2
a1706 13
	tempeax = SiS_Pr->SiS_VGAVDE << 18;
    	temp = (USHORT)(tempeax % (ULONG)SiS_Pr->SiS_VDE);
    	tempeax = tempeax / SiS_Pr->SiS_VDE;
    	if(temp != 0) tempeax++;
    	tempebx = tempeax;                         /* BPLVCFACT  */
        tempvcfact = tempeax;
    	temp = (USHORT)(tempebx & 0x00FF);
    	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x37,temp);      /* Part1_37h; TW: Panel Link Vertical Scaling Factor */
    	temp = (USHORT)((tempebx & 0x00FF00) >> 8);
    	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x36,temp);      /* Part1_36h; TW: Panel Link Vertical Scaling Factor */
    	temp = (USHORT)((tempebx & 0x00030000) >> 16);
    	if(SiS_Pr->SiS_VDE == SiS_Pr->SiS_VGAVDE) temp |= 0x04;
    	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x35,temp);      /* Part1_35h; TW: Panel Link Vertical Scaling Factor */
d1708 2
a1709 1
#endif /* SIS315H */
d1711 24
d1736 1
d1738 13
a1750 2
  tempbx = push2;                                  /* p bx temppush1 BPLVDEE  */
  tempcx = push1;
d1752 5
a1756 1
  push1 = temp;					   /* TW: For 630/301B and 630/LVDS */
d1758 33
a1790 16
  if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
   	if(!SiS_Pr->SiS_IF_DEF_DSTN){
		if(HwDeviceExtension->jChipType < SIS_315H) {
			if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
      				if(resinfo == 15) tempcx++;
				if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) {
					if(resinfo == 7) tempcx++;
		    		}
			} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
      				if(resinfo == 7) tempcx++;
				if(resinfo == 8) tempcx++; /* TW: Doesnt make sense anyway... */
			} else  if(resinfo == 8) tempcx++;
		} else {
			if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
      				if(resinfo == 7) tempcx++;
			}
d1792 13
d1806 1
d1809 15
a1823 3
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
     tempcx = SiS_Pr->SiS_VGAVDE;
     tempbx = SiS_Pr->SiS_VGAVDE - 1;
d1825 1
d1827 4
a1830 3
  temp = ((tempbx & 0x0700) >> 8) << 3;
  temp |= ((tempcx & 0x0700) >> 8);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1D,temp);     	/* Part1_1Dh; TW: Vertical Display Overflow; Control Signal */
d1832 3
a1834 6
  temp = tempbx & 0x00FF;
  if(SiS_Pr->SiS_IF_DEF_FSTN) temp++;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1C,temp);      	/* Part1_1Ch; TW: Panel Link Vertical Display Enable End  */

  temp = tempcx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1B,temp);      	/* Part1_1Bh; TW: Panel Link Vertical Display Enable Start  */
d1836 3
a1838 17
  /* 3. Additional horizontal setup (scaling, etc) */

  tempecx = SiS_Pr->SiS_VGAHDE;
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     if(modeflag & HalfDCLK)
        tempecx >>= 1;
  }
  tempebx = SiS_Pr->SiS_HDE;
  if(tempecx == tempebx) tempeax = 0xFFFF;
  else {
     tempeax = tempecx;
     tempeax <<= 16;
     temp = (USHORT)(tempeax % tempebx);
     tempeax = tempeax / tempebx;
     if(HwDeviceExtension->jChipType >= SIS_315H) {
         if(temp) tempeax++;
     }
a1839 1
  tempecx = tempeax;
d1841 8
a1848 8
  if (HwDeviceExtension->jChipType >= SIS_315H) {
      tempeax = SiS_Pr->SiS_VGAHDE;
      if(modeflag & HalfDCLK)
          tempeax >>= 1;
      tempeax <<= 16;
      tempeax = (tempeax / tempecx) - 1;
  } else {
      tempeax = ((SiS_Pr->SiS_VGAHT << 16) / tempecx) - 1;
a1849 23
  tempecx <<= 16;
  tempecx |= (tempeax & 0xFFFF);
  temp = (USHORT)(tempecx & 0x00FF);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1F,temp);  	 /* Part1_1Fh; TW: Panel Link DDA Operational Number in each horiz. line */

  tempbx = SiS_Pr->SiS_VDE;
  if (HwDeviceExtension->jChipType >= SIS_315H) {
      tempeax = (SiS_Pr->SiS_VGAVDE << 18) / tempvcfact;
      tempbx = (USHORT)(tempeax & 0x0FFFF);
  } else {
      tempax = SiS_Pr->SiS_VGAVDE << 6;
      tempbx = push1;
      tempbx &= 0x3f;
      if(tempbx == 0) tempbx = 64;
      tempax = tempax / tempbx;
      tempbx = tempax;
  }
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) tempbx--;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)                 tempbx = 1;

  temp = ((tempbx & 0xFF00) >> 8) << 3;
  temp |= (USHORT)((tempecx & 0x0700) >> 8);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x20,temp);  	/* Part1_20h; TW: Overflow register */
d1851 5
a1855 6
  temp = tempbx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x21,temp);  	/* Part1_21h; TW: Panel Link Vertical Accumulator Register */

  tempecx >>= 16;                               /* BPLHCFACT  */
  if(HwDeviceExtension->jChipType < SIS_315H) {
      if(modeflag & HalfDCLK) tempecx >>= 1;
a1856 7
  temp = (USHORT)((tempecx & 0xFF00) >> 8);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x22,temp);     	/* Part1_22h; TW: Panel Link Horizontal Scaling Factor High */

  temp = (USHORT)(tempecx & 0x00FF);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x23,temp);         /* Part1_22h; TW: Panel Link Horizontal Scaling Factor Low */

  /* 630/301B and 630/LVDS do something for 640x480 panels here */
d1859 19
a1877 75
  /* TW: DSTN/FSTN initialisation - hardcoded for 320x480 panel */
  if(SiS_Pr->SiS_IF_DEF_DSTN) {
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1E,0x01);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x25,0x00);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x26,0x00);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x27,0x00);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x28,0x87);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x29,0x5A);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x2A,0x4B);
     	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x44,~0x007,0x03);
     	tempbx = SiS_Pr->SiS_HDE + 64;                       	/*Blps = lcdhdee(lcdhdes+HDE) + 64*/
     	temp = tempbx & 0x00FF;
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x38,temp);
     	temp=((tempbx & 0xFF00) >> 8) << 3;
     	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,~0x078,temp);
     	tempbx += 32;		                     		/*Blpe=lBlps+32*/
     	temp = tempbx & 0x00FF;
     	if(SiS_Pr->SiS_IF_DEF_FSTN)  temp=0;
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x39,temp);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x3A,0x00);        	/*Bflml=0*/
     	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x007,0x00);
     	tempbx = SiS_Pr->SiS_VDE / 2;
     	temp = tempbx & 0x00FF;
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x3B,temp);
     	temp = ((tempbx & 0xFF00) >> 8) << 3;
     	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x038,temp);
     	tempeax = SiS_Pr->SiS_HDE << 2;                       	/* BDxFIFOSTOP = (HDE*4)/128 */
     	tempebx = 128;
     	temp = (USHORT)(tempeax % tempebx);
     	tempeax = tempeax / tempebx;
     	if(temp != 0)  tempeax++;
     	temp = (USHORT)(tempeax & 0x003F);
     	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x45,~0x0FF,temp);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x3F,0x00);         	/* BDxWadrst0 */
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x3E,0x00);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x3D,0x10);
     	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x040,0x00);
     	tempax = SiS_Pr->SiS_HDE >> 4;                        	/* BDxWadroff = HDE*4/8/8 */
     	pushcx = tempax;
     	temp = tempax & 0x00FF;
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x43,temp);
     	temp = ((tempax & 0xFF00) >> 8) << 3;
     	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x44,~0x0F8,temp);
     	tempax = SiS_Pr->SiS_VDE;                             /*BDxWadrst1 = BDxWadrst0 + BDxWadroff * VDE */
     	tempeax = (tempax * pushcx);
     	tempebx = 0x00100000 + tempeax;
     	temp = (USHORT)tempebx & 0x000000FF;
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x42,temp);
     	temp = (USHORT)((tempebx & 0x0000FF00)>>8);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x41,temp);
     	temp = (USHORT)((tempebx & 0x00FF0000)>>16);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x40,temp);
     	temp = (USHORT)(((tempebx & 0x01000000)>>24) << 7);
     	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x080,temp);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x2F,0x03);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x03,0x50);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x04,0x00);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x2F,0x01);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x13,0x00);
     	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x05,0x86);        /* Unlock */
     	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x1e,0x62);
     	if(SiS_Pr->SiS_IF_DEF_FSTN){
         	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2b,0x1b);
         	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2c,0xe3);
         	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x1e,0x62);
         	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2e,0x04);
         	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2f,0x42);
         	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x32,0x01);
         	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x2b,0x02);
         	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x2c,0x00);
         	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x2d,0x00);
     	}
     	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0f,0x30);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1e,0x7d);
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x2e,0xe0);
a1878 12
#endif  /* SIS315H */

  return;

}

#ifdef SIS315H
void
SiS_CRT2AutoThreshold(SiS_Private *SiS_Pr, USHORT BaseAddr)
{
  SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x40);
}
d1881 1
d1883 9
a1891 9
/* TW: For LVDS / 302b/lv - LCDA (this must only be called on 310/325 series!) */
/* TW: Double-checked against 650/LVDS and 650/301 BIOS */
void
SiS_SetGroup1_LCDA(SiS_Private *SiS_Pr, USHORT  BaseAddr,UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                   PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT RefreshRateTableIndex)
{
  USHORT modeflag,resinfo;
  USHORT push1,push2,tempax,tempbx,tempcx,temp;
  ULONG tempeax=0,tempebx,tempecx,tempvcfact;
d1893 17
a1909 3
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {					/* TW: From 650/LVDS BIOS */
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xfb,0x04);      	/* TW: From 650/LVDS BIOS */
  }
a1910 4
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {					/* TW: From 650/LVDS 1.10.07 */
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x00);			/* TW: From 650/LVDS 1.10.07 */
  } else {
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2D,0x0f);			/* TW: From 650/301Lvx 1.10.6s */
d1913 4
a1916 3
  if(ModeNo<=0x13) {
    modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
    resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
d1918 1
a1918 2
    modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d1921 12
a1932 3
  tempax = SiS_Pr->SiS_LCDHDES;
  tempbx = SiS_Pr->SiS_HDE;
  tempcx = SiS_Pr->SiS_HT;
d1934 3
a1936 5
  if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)       tempbx = 1024;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) tempbx = 1400;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) tempbx = 1600;
	else 							      tempbx = 1280;
d1938 7
a1944 6
  }
  tempcx -= tempbx;                        	            	/* HT-HDE  */
  push1 = tempax;
  tempax += tempbx;	                                    	/* lcdhdee  */
  tempbx = SiS_Pr->SiS_HT;
  if(tempax >= tempbx)	tempax -= tempbx;
d1946 11
a1956 12
  push2 = tempax;						/* push ax   lcdhdee  */

  tempcx >>= 2;

  /* TW: Inserted from 650/301LVx 1.10.6s */
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
          if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)        tempcx = 0x28;
	  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) tempcx = 0x30;
	  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)  tempcx = 0x18;
	  else                                                          tempcx = 0x30;
      }
d1959 1
a1959 7
  tempcx += tempax;  	                                  	/* lcdhrs  */
  if(tempcx >= tempbx) tempcx -= tempbx;
                                                           	/* v ah,cl  */
  tempax = tempcx;
  tempax >>= 3;   	                                     	/* BPLHRS */
  temp = tempax & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x14,temp);                 	/* Part1_14h  */
d1961 1
a1961 4
  temp += 10;
  temp &= 0x1F;
  temp |= ((tempcx & 0x07) << 5);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x15,temp);                         /* Part1_15h  */
d1963 2
a1964 5
  tempbx = push2;                                          	/* lcdhdee  */
  tempcx = push1;                                          	/* lcdhdes  */
  temp = (tempcx & 0x00FF);
  temp &= 0x07;                                  		/* BPLHDESKEW  */
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1A,temp);                         /* Part1_1Ah  */
d1966 24
a1989 3
  tempcx >>= 3;   	                                     	/* BPLHDES */
  temp = tempcx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x16,temp);                         /* Part1_16h  */
d1991 1
a1991 4
  if(tempbx & 0x07) tempbx += 8;
  tempbx >>= 3;                                        		/* BPLHDEE  */
  temp = tempbx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x17,temp);                        	/* Part1_17h  */
d1993 29
a2021 19
  tempcx = SiS_Pr->SiS_VGAVT;
  tempbx = SiS_Pr->SiS_VGAVDE;
  tempcx -= tempbx; 	                                   	/* GAVT-VGAVDE  */
  tempbx = SiS_Pr->SiS_LCDVDES;                                	/* VGAVDES  */
  push1 = tempbx;                                      		/* push bx temppush1 */
  if(SiS_Pr->SiS_IF_DEF_TRUMPION == 0){
    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)        tempax = 768;
    else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)  tempax = 1024;
    else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)  tempax = 1050;
    else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)  tempax = 1200;
    else                                                           tempax = 960;
#if 0   /* TW: Removed (650/LVDS BIOS) */
    if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        tempax = SiS_Pr->SiS_VGAVDE;
      }
    }
#endif
  } else tempax = SiS_Pr->SiS_VGAVDE;  /* Trumpion */
d2023 1
a2023 3
  tempbx += tempax;
  tempax = SiS_Pr->SiS_VT;                                    	/* VT  */
  if(tempbx >= tempax)  tempbx -= tempax;
d2025 10
a2034 2
  push2 = tempbx;                                      		/* push bx  temppush2  */
  tempcx >>= 2;	/* TO CHECK - was 1 */
d2036 1
a2036 11
  /* TW: Inserted from 650/301LVx 1.10.6s */
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
          if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)         tempcx = 1;
	  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)   tempcx = 3;
	  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)   tempcx = 3;
	  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)  tempcx = 1;
	  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)  tempcx = 1;
	  else                                                           tempcx = 0x0057;
      }
  }
d2038 1
a2038 5
  tempbx += tempcx;
  tempbx++;                                                	/* BPLVRS  */
  if(tempbx >= tempax)   tempbx -= tempax;
  temp = tempbx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x18,temp);                         /* Part1_18h  */
d2040 1
a2040 13
  tempcx >>= 3;
  tempcx += tempbx;
  tempcx++;                                                	/* BPLVRE  */
  temp = tempcx & 0x00FF;
  temp &= 0x0F;
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     /* TW: Inserted from 650/LVDS BIOS */
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0xf0,temp);
  } else {
     /* TW: Inserted from 650/301LVx 1.10.6s */
     temp |= 0xC0;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0xF0,temp);             /* Part1_19h  */
  }
d2042 1
a2042 17
  temp = (tempbx & 0xFF00) >> 8;
  temp &= 0x07;
  temp <<= 3;  		                               		/* BPLDESKEW =0 */
  tempbx = SiS_Pr->SiS_VGAVDE;
  if(tempbx != SiS_Pr->SiS_VDE)              temp |= 0x40;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)    temp |= 0x40;
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
      /* TW: Inserted from 650/LVDS 1.10.07 */
      if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)  temp |= 0x80;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1A,0x87,temp);            /* Part1_1Ah */
  } else {
      /* TW: Inserted from 650/301LVx 1.10.6s */
      if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
          if(SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00) & 0x01) temp |= 0x80;
      }
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1A,0x87,temp);            /* Part1_1Ah */
  }
d2044 29
a2072 3
  tempbx = push2;                                      		/* p bx temppush2 BPLVDEE  */
  tempcx = push1;                                      		/* pop cx temppush1 NPLVDES */
  push1 = (USHORT)(tempeax & 0xFFFF);
d2074 1
a2074 11
  if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
      if(resinfo == 7) tempcx++;
    }
  }
  /* TW: Inserted from 650/301LVx+LVDS BIOSes */
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
    tempbx = SiS_Pr->SiS_VGAVDE;
    tempcx = tempbx;
    tempbx--;
  }
d2076 5
a2080 5
  temp = (tempbx & 0xFF00) >> 8;
  temp &= 0x07;
  temp <<= 3;
  temp = temp | (((tempcx & 0xFF00) >> 8) & 0x07);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1D,temp);                          /* Part1_1Dh */
d2082 2
a2083 2
  temp = tempbx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1C,temp);                          /* Part1_1Ch  */
d2085 10
a2094 2
  temp = tempcx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1B,temp);                          /* Part1_1Bh  */
d2096 1
a2096 37
  tempecx = SiS_Pr->SiS_VGAVT;
  tempebx = SiS_Pr->SiS_VDE;
  tempeax = SiS_Pr->SiS_VGAVDE;
  tempecx -= tempeax;    	                             	/* VGAVT-VGAVDE  */
  tempeax <<= 18;
  temp = (USHORT)(tempeax % tempebx);
  tempeax = tempeax / tempebx;
  if(temp)  tempeax++;
  tempebx = tempeax;                                        	/* BPLVCFACT  */
  tempvcfact = tempeax;
  temp = (USHORT)(tempebx & 0x00FF);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x37,temp);

  temp = (USHORT)((tempebx & 0x00FF00) >> 8);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x36,temp);

  temp = (USHORT)((tempebx & 0x00030000) >> 16);
  if(SiS_Pr->SiS_VDE == SiS_Pr->SiS_VGAVDE) temp |= 0x04;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x35,temp);

  tempecx = SiS_Pr->SiS_VGAHDE;
  tempebx = SiS_Pr->SiS_HDE;
  tempeax = tempecx;
  tempeax <<= 16;
  temp = tempeax % tempebx;
  tempeax = tempeax / tempebx;
  if(temp) tempeax++;
  if(tempebx == tempecx)  tempeax = 0xFFFF;
  tempecx = tempeax;
  tempeax = SiS_Pr->SiS_VGAHDE;
  tempeax <<= 16;
  tempeax = tempeax / tempecx;
  tempecx <<= 16;
  tempeax--;
  tempecx = tempecx | (tempeax & 0xFFFF);
  temp = (USHORT)(tempecx & 0x00FF);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1F,temp);                          /* Part1_1Fh  */
d2098 10
a2107 4
  tempeax = SiS_Pr->SiS_VGAVDE;
  tempeax <<= 18;
  tempeax = tempeax / tempvcfact;
  tempbx = (USHORT)(tempeax & 0x0FFFF);
d2109 1
a2109 1
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) tempbx--;
d2111 15
a2125 1
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)  tempbx = 1;
d2127 1
a2127 14
  temp = ((tempbx & 0xFF00) >> 8) << 3;
  temp = temp | (USHORT)(((tempecx & 0x0000FF00) >> 8) & 0x07);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x20,temp);                         /* Part1_20h */

  temp = tempbx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x21,temp);                         /* Part1_21h */

  tempecx >>= 16;   	                                  	/* BPLHCFACT  */
  if(modeflag & HalfDCLK) tempecx >>= 1;
  temp = (USHORT)((tempecx & 0x0000FF00) >> 8);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x22,temp);                         /* Part1_22h */

  temp=(USHORT)(tempecx & 0x000000FF);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x23,temp);
a2128 4
#if 0
  /* TW: Missing code (calles int 2f) (650/301LVx 1.10.6s; 1.10.7w doesn't do this) */
  if(xxx()) {
      SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x0e,0xda);
d2130 3
d2135 2
a2136 4
  /* TW: Only for 650/LVDS and 30xLV/30xLVX */
  if((SiS_Pr->SiS_IF_DEF_LVDS == 1) || (SiS_Pr->SiS_VBInfo & (VB_SIS30xLV|VB_SIS30xNEW))){
  	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1e,0x20);
  }
d2138 3
a2140 2
  return;
}
d2142 3
a2144 4
/* TW: Double-checked against 650/LVDS (1.10.07) and 650/301 BIOS */
void SiS_SetCRT2Offset(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,
                       USHORT ModeIdIndex ,USHORT RefreshRateTableIndex,
		       PSIS_HW_DEVICE_INFO HwDeviceExtension)
d2146 8
a2153 2
  USHORT offset;
  UCHAR temp;
d2155 11
a2165 1
  if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) return;
d2167 1
a2167 9
  offset = SiS_GetOffset(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                         HwDeviceExtension);
  temp = (UCHAR)(offset & 0xFF);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x07,temp);
  temp = (UCHAR)((offset & 0xFF00) >> 8);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x09,temp);
  temp = (UCHAR)(((offset >> 3) & 0xFF) + 1);
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x03,temp);
}
d2169 2
a2170 7
/* TW: Checked with 650/LVDS and 650/301 BIOS */
USHORT
SiS_GetOffset(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
              USHORT RefreshRateTableIndex,PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT temp,colordepth;
  USHORT modeinfo,index,infoflag;
a2171 3
  if(SiS_Pr->UseCustomMode) {
     infoflag = SiS_Pr->CInfoFlag;
     temp = SiS_Pr->CHDisplay / 16;
a2172 8
     infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
     modeinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeInfo;
  
     if(HwDeviceExtension->jChipType < SIS_315H ) {
    	index = (modeinfo >> 4) & 0xFF;
     } else {
    	index = (modeinfo >> 8) & 0xFF;
     }
d2174 19
a2192 4
     temp = SiS_Pr->SiS_ScreenOffset[index];
  }
  
  colordepth = SiS_GetColorDepth(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex);
d2194 6
a2199 1
  if(infoflag & InterlaceMode) temp <<= 1;
d2201 1
a2201 1
  temp *= colordepth;
d2203 1
a2203 9
  /* TW: For 1400x1050 and 856x480 */
  if( ( ((ModeNo >= 0x26) && (ModeNo <= 0x28)) || 
        ModeNo == 0x3f || 
	ModeNo == 0x42 || 
	ModeNo == 0x45 ) ||
      (SiS_Pr->UseCustomMode && (SiS_Pr->CHDisplay % 16)) ) {
        colordepth >>= 1;
	temp += colordepth;
  }
d2205 1
a2205 2
  return(temp);
}
d2207 1
a2207 7
/* TW: Checked with 650/LVDS BIOS */
USHORT
SiS_GetColorDepth(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
{
  USHORT ColorDepth[6] = { 1, 2, 4, 4, 6, 8};
  SHORT  index;
  USHORT modeflag;
d2209 5
a2213 13
  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     if(ModeNo <= 0x13)
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     else
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }	

  index = (modeflag & ModeInfoFlag) - ModeEGA;
  if(index < 0) index = 0;
  return(ColorDepth[index]);
}
d2215 8
a2222 6
/* TW: Checked against 630/301/301B/LVDS, 650/301LVx/LVDS */
void
SiS_SetCRT2Sync(SiS_Private *SiS_Pr, USHORT BaseAddr,UCHAR *ROMAddr,USHORT ModeNo,
                USHORT RefreshRateTableIndex,PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT tempah=0,tempbl,infoflag,flag;
d2224 1
a2224 2
  flag = 0;
  tempbl = 0xC0;
d2226 1
a2226 1
  infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
d2228 1
a2228 1
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {					/* LVDS */
d2230 1
a2230 13
    if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
      tempah = SiS_Pr->SiS_LCDInfo;
      if(HwDeviceExtension->jChipType >= SIS_315H) {
          tempbl = tempah & 0xc0;
      }
      if(SiS_Pr->SiS_LCDInfo & LCDSync) {
          flag = 1;
      }
    }
    if(flag != 1) tempah = infoflag >> 8;
    tempah &= 0xC0;
    tempah |= 0x20;
    if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
d2232 13
a2244 3
    if (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
		/* TW: BIOS does something here @@@@@@ */
    }
d2246 1
a2246 3
    tempah &= 0x3f;
    tempah |= tempbl;
    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
d2248 10
a2257 1
  } else {
d2259 1
a2259 1
     if(HwDeviceExtension->jChipType < SIS_315H) {
d2261 1
a2261 1
#ifdef SIS300  /* ---- 300 series --- */
d2263 3
a2265 1
        if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {			/* 630 - 301B */
d2267 1
a2267 9
            if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
               tempah = SiS_Pr->SiS_LCDInfo;
	       if(SiS_Pr->SiS_LCDInfo & LCDSync) {
                  flag = 1;
               }
            }
            if(flag != 1) tempah = infoflag >> 8;
            tempah &= 0xC0;
            tempah |= 0x20;
d2269 1
a2269 1
            if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
d2271 1
a2271 3
            if (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
	       	/* TW: BIOS does something here @@@@@@ */
            }
d2273 3
a2275 16
 	    tempah &= 0x3f;
  	    tempah |= tempbl;
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);

         } else {							/* 630 - 301 */

            if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
               tempah = SiS_Pr->SiS_LCDInfo;
	       if(SiS_Pr->SiS_LCDInfo & LCDNonExpandingShift) { /* ! */
	          flag = 1;
	       }
            }
            if(flag != 1) tempah = infoflag >> 8;
            tempah &= 0xC0;
            tempah |= 0x30;
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x3F,tempah);
d2277 8
a2284 1
         }
d2286 7
a2292 1
#endif /* SIS300 */
d2294 1
a2294 1
      } else {
d2296 1
a2296 1
#ifdef SIS315H  /* ----- 310/325 series ---- */
d2298 1
a2298 1
         if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {			/* 310/325 - 301LV/LVX */
d2300 5
a2304 5
            tempah = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x37);
            tempah &= 0xC0;
            tempah |= 0x20;
            if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
d2306 6
a2311 1
         } else {							/* 310/325 - 301, 301B */
d2313 1
a2313 3
            tempah = infoflag >> 8;
            tempah &= 0xC0;
            tempah |= 0x20;
d2315 1
a2315 1
            if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
d2317 1
a2317 3
            if (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
		/* TW: BIOS does something here @@@@@@ */
            }
d2319 7
a2325 3
            tempah &= 0x3f;
            tempah |= tempbl;
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
d2327 3
a2329 5
         }
#endif  /* SIS315H */
      }
   }
}
d2331 3
a2333 52
/* TW: Set CRT2 FIFO on 300/630/730 */
/* TW: Checked against 630/301B BIOS; BIOS does not set PCI registers */
#ifdef SIS300
void
SiS_SetCRT2FIFO_300(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,
                    PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT temp,index;
  USHORT modeidindex,refreshratetableindex;
  USHORT VCLK=0,MCLK,colorth=0,data2=0;
  USHORT tempal, tempah, tempbx, tempcl, tempax;
  USHORT CRT1ModeNo,CRT2ModeNo;
  USHORT SelectRate_backup;
  ULONG  data,eax;
  const UCHAR  LatencyFactor[] = {
  	97, 88, 86, 79, 77, 00,       /*; 64  bit    BQ=2   */
        00, 87, 85, 78, 76, 54,       /*; 64  bit    BQ=1   */
        97, 88, 86, 79, 77, 00,       /*; 128 bit    BQ=2   */
        00, 79, 77, 70, 68, 48,       /*; 128 bit    BQ=1   */
        80, 72, 69, 63, 61, 00,       /*; 64  bit    BQ=2   */
        00, 70, 68, 61, 59, 37,       /*; 64  bit    BQ=1   */
        86, 77, 75, 68, 66, 00,       /*; 128 bit    BQ=2   */
        00, 68, 66, 59, 57, 37        /*; 128 bit    BQ=1   */
  };
  const UCHAR  LatencyFactor730[] = {
         69, 63, 61, 
	 86, 79, 77,
	103, 96, 94,
	120,113,111,
	137,130,128,    /* <-- last entry, data below */
	137,130,128,	/* to avoid using illegal values */
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
  };
  const UCHAR ThLowB[]   = {
  	81, 4, 72, 6, 88, 8,120,12,
        55, 4, 54, 6, 66, 8, 90,12,
        42, 4, 45, 6, 55, 8, 75,12
  };
  const UCHAR ThTiming[] = {
  	1, 2, 2, 3, 0, 1, 1, 2
  };
  
  SelectRate_backup = SiS_Pr->SiS_SelectCRT2Rate;
d2335 3
a2337 8
  if(!SiS_Pr->CRT1UsesCustomMode) {
  
     CRT1ModeNo = SiS_Pr->SiS_CRT1Mode;                                 /* get CRT1 ModeNo */
     SiS_SearchModeID(SiS_Pr,ROMAddr,&CRT1ModeNo,&modeidindex);
     SiS_Pr->SiS_SetFlag &= (~ProgrammingCRT2);
     SiS_Pr->SiS_SelectCRT2Rate = 0;
     refreshratetableindex = SiS_GetRatePtrCRT2(SiS_Pr,ROMAddr,CRT1ModeNo,
						modeidindex,HwDeviceExtension);
d2339 1
a2339 39
     if(CRT1ModeNo >= 0x13) {
       index = SiS_Pr->SiS_RefIndex[refreshratetableindex].Ext_CRTVCLK;
       index &= 0x3F;
       VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;			/* Get VCLK */
       data2 = SiS_Pr->SiS_ModeType - 2;
     }
     
  } else {
  
     CRT1ModeNo = 0xfe;
     VCLK = SiS_Pr->CSRClock;						/* Get VCLK */
     data2 = (SiS_Pr->CModeFlag & ModeInfoFlag) - 2;
  
  }			
     
  if(CRT1ModeNo >= 0x13) {
    if(HwDeviceExtension->jChipType == SIS_300) {
       index = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x3A);
    } else {
       index = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1A);
    }
    index &= 0x07;
    MCLK = SiS_Pr->SiS_MCLKData_0[index].CLOCK;				/* Get MCLK */
    
#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "FIFO2: CRT1Mode 0x%x VCLK %d MCLK %d modetype-2 = %d\n",
    	CRT1ModeNo, VCLK, MCLK, data2);
#endif  
  
    switch(data2) {							/* Get color depth */
      case 0 : 	colorth = 1; break;
      case 1 : 	colorth = 1; break;
      case 2 : 	colorth = 2; break;
      case 3 : 	colorth = 2; break;
      case 4 : 	colorth = 3; break;
      case 5 : 	colorth = 4; break;
      default:  colorth = 2; break;
    }
    data2 = (colorth * VCLK) / MCLK;  
d2341 1
a2341 5
    temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
    temp = ((temp & 0x00FF) >> 6) << 1;
    if(temp == 0) temp = 1;
    temp <<= 2;
    temp &= 0xff;
d2343 5
a2347 6
    data2 = temp - data2;
    
#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "FIFO2: data2 (step1) = %d\n",
    	data2);
#endif    
d2349 1
a2349 11
    if((28 * 16) % data2) {
      	data2 = (28 * 16) / data2;
      	data2++;
    } else {
      	data2 = (28 * 16) / data2;
    }
    
#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "FIFO2: data2 (step2) = %d\n",
    	data2);
#endif
d2351 1
a2351 1
    if(HwDeviceExtension->jChipType == SIS_300) {
d2353 1
a2353 19
	tempah = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x18);
	tempah &= 0x62;
	tempah >>= 1;
	tempal = tempah;
	tempah >>= 3;
	tempal |= tempah;
	tempal &= 0x07;
	tempcl = ThTiming[tempal];
	tempbx = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x16);
	tempbx >>= 6;
	tempah = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
	tempah >>= 4;
	tempah &= 0x0c;
	tempbx |= tempah;
	tempbx <<= 1;
	tempal = ThLowB[tempbx + 1];
	tempal *= tempcl;
	tempal += ThLowB[tempbx];
	data = tempal;
d2355 1
a2355 11
    } else if(HwDeviceExtension->jChipType == SIS_730) {
       
#ifndef LINUX_XF86
       SiS_SetReg4(0xcf8,0x80000050);
       eax = SiS_GetReg3(0xcfc);
#else
       eax = pciReadLong(0x00000000, 0x50);
#endif
       tempal = (USHORT)(eax >> 8);
       tempal &= 0x06;
       tempal <<= 5;
d2357 1
a2357 9
#ifndef LINUX_XF86
       SiS_SetReg4(0xcf8,0x800000A0);
       eax = SiS_GetReg3(0xcfc);
#else
       eax = pciReadLong(0x00000000, 0xA0);
#endif
       temp = (USHORT)(eax >> 28);
       temp &= 0x0F;   
       tempal |= temp;
d2359 1
a2359 19
#ifdef TWDEBUG
       xf86DrvMsg(0, X_INFO, "FIFO2: Latencyfactorindex = 0x%x\n", tempal);
#endif
      
       tempbx = tempal;   /* BIOS BUG (2.04.5d, 2.04.6a use ah here, which is unset!) */
       tempbx = 0;        /* -- do it like the BIOS anyway... */
       tempax = tempbx;
       tempbx &= 0xc0;
       tempbx >>= 6;
       tempax &= 0x0f;
       tempax *= 3;
       tempbx += tempax;
       
       data = LatencyFactor730[tempbx];
       data += 15;
       temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
       if(!(temp & 0x80)) data += 5;
       
    } else {
d2361 1
a2361 3
       index = 0;
       temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
       if(temp & 0x0080) index += 12;
d2363 1
a2363 12
#ifndef LINUX_XF86
       SiS_SetReg4(0xcf8,0x800000A0);
       eax = SiS_GetReg3(0xcfc);
#else
       /* TW: We use pci functions X offers. We use tag 0, because
        * we want to read/write to the host bridge (which is always
        * 00:00.0 on 630, 730 and 540), not the VGA device.
        */
       eax = pciReadLong(0x00000000, 0xA0);
#endif
       temp = (USHORT)(eax >> 24);
       if(!(temp&0x01)) index += 24;
d2365 62
a2426 8
#ifndef LINUX_XF86
       SiS_SetReg4(0xcf8,0x80000050);
       eax = SiS_GetReg3(0xcfc);
#else
       eax = pciReadLong(0x00000000, 0x50);
#endif
       temp=(USHORT)(eax >> 24);
       if(temp & 0x01) index += 6;
d2428 17
a2444 12
       temp = (temp & 0x0F) >> 1;
       index += temp;
       
       data = LatencyFactor[index];
       data += 15;
       temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
       if(!(temp & 0x80)) data += 5;
    }
    
#ifdef TWDEBUG    
    xf86DrvMsg(0, X_INFO, "FIFO2: latencyfactor (CRT1) = %d\n", data);
#endif
d2446 1
a2446 5
    data += data2;				/* CRT1 Request Period */
    
#ifdef TWDEBUG    
    xf86DrvMsg(0, X_INFO, "FIFO2: CRT1 request period = %d\n", data);
#endif
d2448 1
a2448 4
    CRT2ModeNo = ModeNo;
    SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
    SiS_Pr->SiS_SelectCRT2Rate = SelectRate_backup;
    SiS_SearchModeID(SiS_Pr,ROMAddr,&CRT2ModeNo,&modeidindex);    
d2450 1
a2450 2
    refreshratetableindex = SiS_GetRatePtrCRT2(SiS_Pr,ROMAddr,CRT2ModeNo,
                                           modeidindex,HwDeviceExtension);
d2452 1
a2452 19
    index = SiS_GetVCLK2Ptr(SiS_Pr,ROMAddr,CRT2ModeNo,modeidindex,
                            refreshratetableindex,HwDeviceExtension);
    VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;                         	/* Get VCLK  */
    
    data2 = SiS_Pr->SiS_ModeType - 2;
    switch(data2) {							/* Get color depth */
      case 0 : 	colorth = 1; break;
      case 1 : 	colorth = 1; break;
      case 2 : 	colorth = 2; break;
      case 3 : 	colorth = 2; break;
      case 4 : 	colorth = 3; break;
      case 5 : 	colorth = 4; break;
      default:  colorth = 2; break;
    }
    
#ifdef TWDEBUG    
    xf86DrvMsg(0, X_INFO, "FIFO2: CRT2Mode 0x%x VCLK %d MCLK %d modetype-2 = %d, colorth %d\n",
    	CRT2ModeNo, VCLK, MCLK, data2, colorth);
#endif
d2454 7
a2460 14
    data = data * VCLK * colorth;
    if(data % (MCLK << 4)) {
      	data = data / (MCLK << 4);
      	data++;
    } else {
      	data = data / (MCLK << 4);
    }
    
#ifdef TWDEBUG    
    xf86DrvMsg(0, X_INFO, "FIFO2: data (unclipped) = 0x%x\n", data);
#endif    
    
    if(data <= 6) data = 6;
    if(data > 0x14) data = 0x14;
d2462 1
a2462 18
    temp = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x01);
    if(HwDeviceExtension->jChipType == SIS_300) {
       if(data <= 0x0f) temp = (temp & (~0x1F)) | 0x13;
       else             temp = (temp & (~0x1F)) | 0x16;
       if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
       		temp = (temp & (~0x1F)) | 0x13;
       }
    } else {
       if( ( (HwDeviceExtension->jChipType == SIS_630) ||
             (HwDeviceExtension->jChipType == SIS_730) )  &&
           (HwDeviceExtension->jChipRevision >= 0x30) ) /* 630s or 730(s?) */
      {
	  temp = (temp & (~0x1F)) | 0x1b;
      } else {
	  temp = (temp & (~0x1F)) | 0x16;
      }
    }
    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x01,0xe0,temp);
d2464 1
a2464 15
    if( (HwDeviceExtension->jChipType == SIS_630) &&
        (HwDeviceExtension->jChipRevision >= 0x30) ) /* 630s, NOT 730 */
    {
   	if(data > 0x13) data = 0x13;
    }
    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x02,0xe0,data);
    
  } else {  /* If mode <= 0x13, we just restore everything */
  
    SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
    SiS_Pr->SiS_SelectCRT2Rate = SelectRate_backup;
    
  }
}
#endif
a2465 1
/* TW: Set FIFO on 310 series */
d2467 3
a2469 4
void
SiS_SetCRT2FIFO_310(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,
                    PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
d2471 9
a2479 15
  UCHAR CombCode[]  = { 1, 1, 1, 4, 3, 1, 3, 4,
                        4, 1, 4, 4, 5, 1, 5, 4};
  UCHAR CRT2ThLow[] = { 39, 63, 55, 79, 78,102, 90,114,
                        55, 87, 84,116,103,135,119,151};
  USHORT temp3,tempax,tempbx,tempcx;
  USHORT tempcl, tempch;
  USHORT index;
  USHORT CRT1ModeNo,CRT2ModeNo;
  USHORT ModeIdIndex;
  USHORT RefreshRateTableIndex;
  USHORT SelectRate_backup;
  
  SelectRate_backup = SiS_Pr->SiS_SelectCRT2Rate;
  
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x01,0x3B);
d2481 3
a2483 4
  if(!SiS_Pr->CRT1UsesCustomMode) {
  
     CRT1ModeNo = SiS_Pr->SiS_CRT1Mode;                                 /* get CRT1 ModeNo */
     SiS_SearchModeID(SiS_Pr,ROMAddr,&CRT1ModeNo,&ModeIdIndex);
d2485 1
a2485 2
     SiS_Pr->SiS_SetFlag &= (~ProgrammingCRT2);   
     SiS_Pr->SiS_SelectCRT2Rate = 0;
d2487 1
a2487 29
     /* Get REFIndex for crt1 refreshrate */
     RefreshRateTableIndex = SiS_GetRatePtrCRT2(SiS_Pr,ROMAddr,CRT1ModeNo,
                                             ModeIdIndex,HwDeviceExtension);

     index = SiS_GetVCLK2Ptr(SiS_Pr,ROMAddr,CRT1ModeNo,ModeIdIndex,
                          RefreshRateTableIndex,HwDeviceExtension);
     tempax = SiS_Pr->SiS_VCLKData[index].CLOCK;                        /* Get VCLK */
     
     tempbx = SiS_GetColorDepth(SiS_Pr,ROMAddr,CRT1ModeNo,ModeIdIndex); /* Get colordepth */
     tempbx >>= 1;
     if(!tempbx) tempbx++; 
     
  } else {
  
     tempax = SiS_Pr->CSRClock;						/* Get VCLK */
     tempbx = (SiS_Pr->CModeFlag & ModeInfoFlag) - 2;
     switch(tempbx) {							/* Get color depth */
       case 0 : 	tempbx = 1; break;
       case 1 : 	tempbx = 1; break;
       case 2 : 	tempbx = 2; break;
       case 3 : 	tempbx = 2; break;
       case 4 : 	tempbx = 3; break;
       case 5 : 	tempbx = 4; break;
       default:  	tempbx = 2; break;
     }
  
  }
    
  tempax *= tempbx;
d2489 2
a2490 1
  tempbx = SiS_GetMCLK(SiS_Pr,ROMAddr, HwDeviceExtension);     		/* Get MCLK */
d2492 1
a2492 1
  tempax /= tempbx;
d2494 2
a2495 1
  tempbx = tempax;
a2496 5
#if 0 /* TW: BIOS code is skrewed */
  if(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14) & 0x02) {
   	tempax = 16;
  } else {
    	tempax = 8;
a2497 2
#endif
  tempax = 16;
d2499 1
a2499 1
  tempax -= tempbx;
d2501 3
a2503 1
  tempbx = tempax;    /* tempbx = 16-DRamBus - DCLK*BytePerPixel/MCLK */
d2505 6
a2510 1
  tempax = ((52 * 16) / tempbx);
d2512 5
a2516 5
  if ((52*16 % tempbx) != 0) {
    	tempax++;
  }
  tempcx = tempax;
  tempcx += 40;
d2518 8
a2525 8
  /* get DRAM latency */
  tempcl = (SiS_GetReg1(SiS_Pr->SiS_P3c4,0x17) >> 3) & 0x7;     /* SR17[5:3] DRAM Queue depth */
  tempch = (SiS_GetReg1(SiS_Pr->SiS_P3c4,0x17) >> 6) & 0x3;     /* SR17[7:6] DRAM Grant length */

  for (temp3 = 0; temp3 < 16; temp3 += 2) {
    if ((CombCode[temp3] == tempcl) && (CombCode[temp3+1] == tempch)) {
      temp3 = CRT2ThLow[temp3 >> 1];
    }
d2528 1
a2528 1
  tempcx +=  temp3;                                      /* CRT1 Request Period */
d2530 8
a2537 2
  CRT2ModeNo = ModeNo;                                   /* get CRT2 ModeNo */
  SiS_SearchModeID(SiS_Pr,ROMAddr,&CRT2ModeNo,&ModeIdIndex);    /* Get ModeID Table */
d2539 1
a2539 2
  SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
  SiS_Pr->SiS_SelectCRT2Rate = SelectRate_backup;
d2541 8
a2548 2
  RefreshRateTableIndex = SiS_GetRatePtrCRT2(SiS_Pr,ROMAddr,CRT2ModeNo,
                                           ModeIdIndex,HwDeviceExtension);
d2550 2
a2551 3
  index = SiS_GetVCLK2Ptr(SiS_Pr,ROMAddr,CRT2ModeNo,ModeIdIndex,
                          RefreshRateTableIndex,HwDeviceExtension);
  tempax = SiS_Pr->SiS_VCLKData[index].CLOCK;                          /* Get VCLK  */
d2553 1
a2553 3
  tempbx = SiS_GetColorDepth(SiS_Pr,ROMAddr,CRT2ModeNo,ModeIdIndex);   /* Get colordepth */
  tempbx >>= 1;
  if(!tempbx) tempbx++;
d2555 1
a2555 1
  tempax *= tempbx;
d2557 32
a2588 1
  tempax *= tempcx;
d2590 1
a2590 2
  tempbx = SiS_GetMCLK(SiS_Pr,ROMAddr, HwDeviceExtension);	       /* Get MCLK */
  tempbx <<= 4;
d2592 15
a2606 5
  tempcx = tempax;
  tempax /= tempbx;
  if(tempcx % tempbx) tempax++;		/* CRT1 Request period * TCLK * BytePerPixel / (MCLK*16) */

  if (tempax > 0x37)  tempax = 0x37;
a2607 3
  /* TW: 650/LVDS (1.10.07, 1.10.00), 650/301LV overrule calculated value; 315 does not */
  if(HwDeviceExtension->jChipType == SIS_650) {
  	tempax = 0x04;
d2609 3
d2613 10
a2622 2
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x02,~0x3F,tempax);
}
d2624 8
a2631 4
USHORT
SiS_GetMCLK(SiS_Private *SiS_Pr, UCHAR *ROMAddr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT index;
d2633 3
a2635 4
  index = SiS_Get310DRAMType(SiS_Pr,ROMAddr,HwDeviceExtension);
  if(index >= 4) {
    index -= 4;
    return(SiS_Pr->SiS_MCLKData_1[index].CLOCK);
d2637 2
a2638 1
    return(SiS_Pr->SiS_MCLKData_0[index].CLOCK);
a2639 12
}
#endif

/* TW: Checked against 650/LVDS 1.10.07 BIOS */
void
SiS_GetLVDSDesData(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex,
		   PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT modeflag;
  USHORT PanelIndex,ResIndex;
  const  SiS_LVDSDesStruct *PanelDesPtr = NULL;
d2641 1
a2641 1
  if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) ) {
d2643 15
a2657 13
     SiS_GetLVDSDesPtrA(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                        &PanelIndex,&ResIndex);
     switch (PanelIndex)
     {
     	case  0: PanelDesPtr = SiS_Pr->LVDS1024x768Des_1;   break;  /* --- expanding --- */
     	case  1: PanelDesPtr = SiS_Pr->LVDS1280x1024Des_1;  break;
	case  2: PanelDesPtr = SiS_Pr->LVDS1400x1050Des_1;  break;
	case  3: PanelDesPtr = SiS_Pr->LVDS1600x1200Des_1;  break;
     	case  4: PanelDesPtr = SiS_Pr->LVDS1024x768Des_2;   break;  /* --- non expanding --- */
     	case  5: PanelDesPtr = SiS_Pr->LVDS1280x1024Des_2;  break;
	case  6: PanelDesPtr = SiS_Pr->LVDS1400x1050Des_2;  break;
	case  7: PanelDesPtr = SiS_Pr->LVDS1600x1200Des_2;  break;
	default: PanelDesPtr = SiS_Pr->LVDS1024x768Des_1;   break;
a2658 1

d2660 31
d2692 4
a2695 47
     SiS_GetLVDSDesPtr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                       &PanelIndex,&ResIndex,HwDeviceExtension);

     switch (PanelIndex)
     {
     	case  0: PanelDesPtr = SiS_Pr->SiS_PanelType00_1;   break; /* --- expanding --- |  */
     	case  1: PanelDesPtr = SiS_Pr->SiS_PanelType01_1;   break;
     	case  2: PanelDesPtr = SiS_Pr->SiS_PanelType02_1;   break;
     	case  3: PanelDesPtr = SiS_Pr->SiS_PanelType03_1;   break;
     	case  4: PanelDesPtr = SiS_Pr->SiS_PanelType04_1;   break;
     	case  5: PanelDesPtr = SiS_Pr->SiS_PanelType05_1;   break;
     	case  6: PanelDesPtr = SiS_Pr->SiS_PanelType06_1;   break;
     	case  7: PanelDesPtr = SiS_Pr->SiS_PanelType07_1;   break;
     	case  8: PanelDesPtr = SiS_Pr->SiS_PanelType08_1;   break;
     	case  9: PanelDesPtr = SiS_Pr->SiS_PanelType09_1;   break;
     	case 10: PanelDesPtr = SiS_Pr->SiS_PanelType0a_1;   break;
     	case 11: PanelDesPtr = SiS_Pr->SiS_PanelType0b_1;   break;
     	case 12: PanelDesPtr = SiS_Pr->SiS_PanelType0c_1;   break;
     	case 13: PanelDesPtr = SiS_Pr->SiS_PanelType0d_1;   break;
     	case 14: PanelDesPtr = SiS_Pr->SiS_PanelType0e_1;   break;
     	case 15: PanelDesPtr = SiS_Pr->SiS_PanelType0f_1;   break;
     	case 16: PanelDesPtr = SiS_Pr->SiS_PanelType00_2;   break;  /* --- non-expanding --- */
     	case 17: PanelDesPtr = SiS_Pr->SiS_PanelType01_2;   break;
     	case 18: PanelDesPtr = SiS_Pr->SiS_PanelType02_2;   break;
     	case 19: PanelDesPtr = SiS_Pr->SiS_PanelType03_2;   break;
     	case 20: PanelDesPtr = SiS_Pr->SiS_PanelType04_2;   break;
     	case 21: PanelDesPtr = SiS_Pr->SiS_PanelType05_2;   break;
     	case 22: PanelDesPtr = SiS_Pr->SiS_PanelType06_2;   break;
     	case 23: PanelDesPtr = SiS_Pr->SiS_PanelType07_2;   break;
     	case 24: PanelDesPtr = SiS_Pr->SiS_PanelType08_2;   break;
     	case 25: PanelDesPtr = SiS_Pr->SiS_PanelType09_2;   break;
     	case 26: PanelDesPtr = SiS_Pr->SiS_PanelType0a_2;   break;
     	case 27: PanelDesPtr = SiS_Pr->SiS_PanelType0b_2;   break;
     	case 28: PanelDesPtr = SiS_Pr->SiS_PanelType0c_2;   break;
     	case 29: PanelDesPtr = SiS_Pr->SiS_PanelType0d_2;   break;
     	case 30: PanelDesPtr = SiS_Pr->SiS_PanelType0e_2;   break;
     	case 31: PanelDesPtr = SiS_Pr->SiS_PanelType0f_2;   break;
     	case 32: PanelDesPtr = SiS_Pr->SiS_CHTVUNTSCDesData;   break;
     	case 33: PanelDesPtr = SiS_Pr->SiS_CHTVONTSCDesData;   break;
     	case 34: PanelDesPtr = SiS_Pr->SiS_CHTVUPALDesData;    break;
     	case 35: PanelDesPtr = SiS_Pr->SiS_CHTVOPALDesData;    break;
	default:
		if(HwDeviceExtension->jChipType < SIS_315H)
		   PanelDesPtr = SiS_Pr->SiS_PanelType0e_1;
		else
		   PanelDesPtr = SiS_Pr->SiS_PanelType01_1;
		break;
d2698 1
a2698 2
  SiS_Pr->SiS_LCDHDES = (PanelDesPtr+ResIndex)->LCDHDES;
  SiS_Pr->SiS_LCDVDES = (PanelDesPtr+ResIndex)->LCDVDES;
d2700 1
a2700 41
  if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding){
    if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
      if(ModeNo <= 0x13) {
        modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
	if(!(modeflag & HalfDCLK)) {
	  SiS_Pr->SiS_LCDHDES = 632;
	}
      }
    } else {
      if(!(SiS_Pr->SiS_SetFlag & CRT2IsVGA)) {
        if((HwDeviceExtension->jChipType < SIS_315H) || (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024)) {  /* TW: New from 650/LVDS 1.10.07 */
          if(SiS_Pr->SiS_LCDResInfo >= SiS_Pr->SiS_Panel1024x768){
            if(ModeNo <= 0x13) {
	      modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
	      if(HwDeviceExtension->jChipType < SIS_315H) {
	         if(!(modeflag & HalfDCLK)) {
                     SiS_Pr->SiS_LCDHDES = 320;
		 }
	      } else {
	         /* TW: New from 650/LVDS 1.10.07 */
	         if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)
	             SiS_Pr->SiS_LCDHDES = 480;
                 if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)
	             SiS_Pr->SiS_LCDHDES = 804;
		 if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)
	             SiS_Pr->SiS_LCDHDES = 704;
                 if(!(modeflag & HalfDCLK)) {
                     SiS_Pr->SiS_LCDHDES = 320;
	             if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)
	                SiS_Pr->SiS_LCDHDES = 632;
		     else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)
	                SiS_Pr->SiS_LCDHDES = 542;
                 }
              }
            }
          }
        }
      }
    }
  }
  return;
d2703 4
a2706 5
/* TW: Checked against 630/LVDS (2.04.5c) and 650/LVDS (1.10.07) BIOS */
void
SiS_GetLVDSDesPtr(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                  USHORT RefreshRateTableIndex,USHORT *PanelIndex,
		  USHORT *ResIndex,PSIS_HW_DEVICE_INFO HwDeviceExtension)
d2708 1
a2708 1
  USHORT tempbx,tempal,modeflag;
d2710 2
a2711 3
  if(ModeNo<=0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
	tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d2713 2
a2714 2
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
	tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d2717 1
a2717 27
  tempbx = 0;
  if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
    if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
      tempbx = 32;
      if((SiS_Pr->SiS_VBInfo & SetPALTV) && (!SiS_Pr->SiS_CHPALM)) tempbx += 2;
      if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) tempbx += 1;
      /* TW: Nothing special needed for SOverscan    */
      /*     PALM uses NTSC data, PALN uses PAL data */
    }
  }
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
    tempbx = SiS_Pr->SiS_LCDTypeInfo;
    if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) tempbx += 16;
    /* TW: Inserted from 650/LVDS (1.10.07) BIOS */
    if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
       if(modeflag & HalfDCLK) tempbx += 16;
    }
  }
  /* TW: Inserted from 630/LVDS and 650/LVDS (1.10.07) BIOS */
  if(SiS_Pr->SiS_SetFlag & CRT2IsVGA) {
    if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480)  {
       tempal = 0x07;
       if(HwDeviceExtension->jChipType < SIS_315H) {
          if(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13) & 0x80) tempal++;
       }
    }
  }
d2719 1
a2719 3
  *PanelIndex = tempbx;
  *ResIndex = tempal & 0x1F;
}
d2721 2
a2722 12
void
SiS_GetLVDSDesPtrA(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex,USHORT *PanelIndex,
		   USHORT *ResIndex)
{
  USHORT tempbx=0,tempal;

  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
       tempbx = 3;
  } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
       tempbx = 4;
  } else tempbx = SiS_Pr->SiS_LCDResInfo - SiS_Pr->SiS_PanelMinLVDS;
d2724 13
a2736 1
  if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)  tempbx += 4;
d2738 10
a2747 4
  if(ModeNo<=0x13)
    	tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  else
    	tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d2749 1
a2749 3
  *PanelIndex = tempbx;
  *ResIndex = tempal & 0x1F;
}
d2751 17
a2767 13
/* TW: Checked against 650/LVDS (1.10.07), 650/301LV, 650/301LVx (!), 630/301 and 630/301B (II) BIOS */
void
SiS_SetCRT2ModeRegs(SiS_Private *SiS_Pr, USHORT BaseAddr, USHORT ModeNo, USHORT ModeIdIndex,
                    PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT i,j,modeflag;
  USHORT tempcl,tempah=0;
#ifdef SIS300
  USHORT temp;
#endif
#ifdef SIS315H
  USHORT tempbl;
#endif
a2768 7
  if(ModeNo<=0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else {
     if(SiS_Pr->UseCustomMode) {
        modeflag = SiS_Pr->CModeFlag;
     } else {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
a2769 5
  }
  
  /* TW: BIOS does not do this (neither 301 nor LVDS) */
  /*     (But it's harmless; see SetCRT2Offset) */
  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x03,0x00);   /* fix write part1 index 0  BTDRAM bit Bug */
d2771 1
a2771 2
  /* TW: Removed 301B302B301LV302LV check here to match 650/LVDS BIOS */
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
d2773 18
a2790 1
	/* TW:   1. for LVDS/302B/302LV **LCDA** */
d2792 2
a2793 2
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x00,0xAF,0x40); /* FUNCTION CONTROL */
      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2E,0xF7);
d2795 1
a2795 1
  } else {
d2797 41
a2837 1
    for(i=0,j=4; i<3; i++,j++) SiS_SetReg1(SiS_Pr->SiS_Part1Port,j,0);
d2839 1
a2839 1
    tempcl = SiS_Pr->SiS_ModeType;
d2841 7
a2847 1
    if(HwDeviceExtension->jChipType < SIS_315H) {
d2849 1
a2849 1
#ifdef SIS300    /* ---- 300 series ---- */
d2851 6
a2856 13
      /* TW: Inserted entire if-section from 630/301B BIOS */
      if((HwDeviceExtension->jChipType != SIS_300) &&
         (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
	  temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x32);
	  temp &= 0xef;
	  temp |= 0x02;
	  /* If 0x10 not set when using VGA2, monitor will stay black */
	  if((SiS_Pr->SiS_VBInfo & SetCRT2ToTV) || (SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
	     temp |= 0x10;
	     temp &= 0xfd;
	  }
	  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x32,temp);
      }
d2858 4
a2861 6
      if(ModeNo > 0x13) {
        tempcl -= ModeVGA;
        if((tempcl > 0) || (tempcl == 0)) {      /* TW: tempcl is USHORT -> always true! */
           tempah = ((0x10 >> tempcl) | 0x80);
        }
      } else  tempah = 0x80;
d2863 7
a2869 1
      if(SiS_Pr->SiS_VBInfo & SetInSlaveMode)  tempah ^= 0xA0;
d2871 2
a2872 1
#endif  /* SIS300 */
d2874 1
a2874 1
    } else {
d2876 2
a2877 1
#ifdef SIS315H    /* ---- 310 series ---- */
d2879 3
a2881 5
      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
        if(SiS_Pr->SiS_VBInfo & CRT2DisplayFlag) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x08);
        }
      }
d2883 1
a2883 8
      if(ModeNo > 0x13) {
        tempcl -= ModeVGA;
        if((tempcl > 0) || (tempcl == 0)) {  /* TW: tempcl is USHORT -> always true! */
           tempah = (0x08 >> tempcl);
           if (tempah == 0) tempah = 1;
           tempah |= 0x40;
        }
      } else  tempah = 0x40;
d2885 12
a2896 1
      if(SiS_Pr->SiS_VBInfo & SetInSlaveMode)  tempah ^= 0x50;
d2898 1
a2898 1
#endif  /* SIS315H */
d2900 4
a2903 1
    }
d2905 4
a2908 1
    if(SiS_Pr->SiS_VBInfo & CRT2DisplayFlag)  tempah = 0;
d2910 2
a2911 5
    if(HwDeviceExtension->jChipType < SIS_315H) {
        SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x00,tempah);  		/* FUNCTION CONTROL */
    } else {
        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x00,0xa0,tempah);  	/* FUNCTION CONTROL */
    }
d2913 1
a2913 1
    if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
d2915 1
a2915 1
	/* TW:   2. for 301 (301B, 302B 301LV, 302LV non-LCDA) */
d2917 3
a2919 10
    	tempah = 0x01;
    	if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
      		tempah |= 0x02;
    	}
    	if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
      		tempah ^= 0x05;
      		if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
        		tempah ^= 0x01;
      		}
    	}
d2921 6
a2926 1
	if(SiS_Pr->SiS_VBInfo & CRT2DisplayFlag)  tempah = 0;
d2928 1
a2928 1
    	if(HwDeviceExtension->jChipType < SIS_315H) {
d2930 10
a2939 1
		/* --- 300 series --- */
d2941 1
a2941 3
      		tempah = (tempah << 5) & 0xFF;
      		SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x01,tempah);
      		tempah = (tempah >> 5) & 0xFF;
d2943 44
a2986 1
    	} else {
d2988 1
a2988 1
		/* --- 310 series --- */
d2990 1
a2990 1
      		SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2E,0xF8,tempah);
d2992 1
a2992 1
    	}
d2994 4
a2997 3
    	if((SiS_Pr->SiS_ModeType == ModeVGA) && (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode))) {
      		tempah |= 0x10;
	}
d2999 2
a3000 8
	/* TW: Inserted from 630/301 BIOS */
	if((HwDeviceExtension->jChipType < SIS_315H) && (SiS_Pr->SiS_VBType & VB_SIS301)) {
		if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
			tempah |= 0x80;
		}
	} else {
		tempah |= 0x80;
	}
d3002 4
a3005 5
    	if(SiS_Pr->SiS_VBInfo & (SetCRT2ToTV - SetCRT2ToHiVisionTV)){
      		if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
          		tempah |= 0x20;
      		}
    	}
d3007 60
a3066 1
    	SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0D,0x40,tempah);
d3068 10
a3077 30
    	tempah = 0;
    	if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
      		if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
       			if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
            			SiS_Pr->SiS_SetFlag |= RPLLDIV2XO;
            			tempah |= 0x40;
       			} else {
        			if(!(SiS_Pr->SiS_SetFlag & TVSimuMode)) {
#ifdef oldHV
          				if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV)) {
#endif
            					SiS_Pr->SiS_SetFlag |= RPLLDIV2XO;
            					tempah |= 0x40;
#ifdef oldHV
          				}
#endif
        			}
      			}
     		} else {
        		SiS_Pr->SiS_SetFlag |= RPLLDIV2XO;
        		tempah |= 0x40;
      		}
    	}
	/* TW: Inserted from 630/301LVx BIOS 1.10.6s */
	if(HwDeviceExtension->jChipType >= SIS_315H) {
	    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	        if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x39) & 0x04)
		    tempah |= 0x40;
	    }
	}
d3079 17
a3095 4
	if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) ||
	   (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960)) {
		tempah |= 0x80;
	}
d3097 1
a3097 1
    	SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x0C,tempah);
d3099 1
a3099 1
    } else {
d3101 1
a3101 1
    	/* TW: 3. for LVDS */
d3103 8
a3110 2
	/* TW: Inserted if-statement - Part1Port 0x2e not assigned on 300 series */
	if(HwDeviceExtension->jChipType >= SIS_315H) {
d3112 1
a3112 9
	   /* TW: Inserted this entire section (BIOS 650/LVDS); added ModeType check
	    *     (LVDS can only be slave in 8bpp modes)
	    */
	   tempah = 0x80;
	   if( (modeflag & CRT2Mode) && (SiS_Pr->SiS_ModeType > ModeVGA) ) {
	       if (SiS_Pr->SiS_VBInfo & DriverMode) {
	           tempah |= 0x02;
	       }
	   }
d3114 1
a3114 3
	   if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
               tempah |= 0x02;
    	   }
d3116 1
a3116 3
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	       tempah ^= 0x01;
	   }
d3118 1
a3118 3
	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	       tempah = 1;
	   }
d3120 2
a3121 1
    	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2e,0xF0,tempah);
d3123 28
a3150 1
	} else {
d3152 1
a3152 6
	   /* TW: (added ModeType check) */
	   tempah = 0;
	   if( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) && (SiS_Pr->SiS_ModeType > ModeVGA) ) {
               	  tempah |= 0x02;
    	   }
	   tempah <<= 5;
d3154 5
a3158 1
	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display)  tempah = 0;
d3160 1
a3160 1
	   SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x01,tempah);
d3162 14
a3175 1
	}
d3177 1
a3177 1
    }
d3179 11
a3189 1
  }
d3191 1
a3191 1
  /* TW: Inserted the entire following section */
d3193 11
a3203 1
  if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
d3205 8
a3212 1
      if(HwDeviceExtension->jChipType >= SIS_315H) {
d3214 1
a3214 9
#ifdef SIS315H
         tempah = 0x04;							/* For all bridges */
         tempbl = 0xfb;
         if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
            tempah = 0x00;
	    if(SiS_IsDualEdge(SiS_Pr, HwDeviceExtension, BaseAddr))
	       tempbl = 0xff;
         }
         SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,tempbl,tempah);   
d3216 1
a3216 18
	 /* TW: This in order to fix "TV-blue-bug" on 315+301 */
         if(SiS_Pr->SiS_VBType & VB_SIS301) {
	    SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2c,0xCF);             /* For 301   */
	 } else {
	    if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	       SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2c,0xCF,0x30);   /* For 301LV */
	    } else {
	       tempah = 0x30;						/* For 301B  */
	       tempbl = 0xcf;
	       if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
	          tempah = 0x00;
		  if(SiS_IsDualEdge(SiS_Pr, HwDeviceExtension, BaseAddr)) {
		     tempbl = 0xff;
		  }
	       }
	       SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2c,tempbl,tempah);    
	    }
	 }
d3218 2
a3219 13
	 if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {			/* For 301LV */
	     SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x21,0x3f,0xc0);
	 } else {							/* For 301, 301B */
	     tempah = 0xc0;
	     tempbl = 0x3f;
	     if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
	        tempah = 0x00;
		if(SiS_IsDualEdge(SiS_Pr, HwDeviceExtension, BaseAddr)) {
		   tempbl = 0xff;
		}
	     }
	     SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x21,tempbl,tempah);     
	 }
d3221 1
a3221 8
	 tempah = 0x00;							/* For all bridges */
         tempbl = 0x7f;
         if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
            tempbl = 0xff;
	    if(!(SiS_IsDualEdge(SiS_Pr, HwDeviceExtension, BaseAddr)))
	       tempah |= 0x80;
         }
         SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x23,tempbl,tempah);
d3223 6
a3228 1
#endif /* SIS315H */
d3230 1
a3230 1
      } else if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
d3232 1
a3232 1
         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x21,0x3f);
d3234 4
a3237 7
         if((SiS_Pr->SiS_VBInfo & DisableCRT2Display) ||
            (   (HwDeviceExtension->jChipType != SIS_300) &&
	        (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) ) ) {
	    SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x23,0x7F);
	 } else {
	    SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x23,0x80);
	 }
d3239 1
a3239 1
      }
d3241 2
a3242 1
  } else {  /* LVDS */
d3244 22
d3267 5
a3271 1
      if(HwDeviceExtension->jChipType >= SIS_315H) {
d3273 3
a3275 1
         if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
d3277 6
a3282 8
            tempah = 0x04;
	    tempbl = 0xfb;
            if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
               tempah = 0x00;
	       if(SiS_IsDualEdge(SiS_Pr, HwDeviceExtension, BaseAddr))
	          tempbl = 0xff;
            }
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,tempbl,tempah);
d3284 1
a3284 2
	    if(SiS_Pr->SiS_VBInfo & DisableCRT2Display)
	       SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xfb,0x00);
d3286 2
a3287 1
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2c,0xcf,0x30);
d3289 28
a3316 1
	 }
d3318 4
a3321 2
      }
#endif
d3323 3
a3326 1

d3329 3
a3331 4
void
SiS_GetCRT2Data(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex,
		PSIS_HW_DEVICE_INFO HwDeviceExtension)
a3332 1
  if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
d3334 1
a3334 1
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
d3336 10
a3345 1
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
d3347 1
a3347 3
          SiS_GetCRT2DataLVDS(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
	                      HwDeviceExtension);
        } else {
d3349 1
a3349 3
	  if((HwDeviceExtension->jChipType < SIS_315H) &&
	     (HwDeviceExtension->jChipType != SIS_300) &&
	     (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
d3351 2
a3352 2
              SiS_GetCRT2Data301(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
	                         HwDeviceExtension);
d3354 3
a3356 3
	      /* TW: Need LVDS Data for LCD on 630/301B! */
	      SiS_GetCRT2DataLVDS(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
	                          HwDeviceExtension);
d3358 6
a3363 1
	  } else {
d3365 7
a3371 3
	      SiS_GetCRT2Data301(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
	                         HwDeviceExtension);
          }
d3373 2
a3374 1
        }
d3376 9
a3384 1
     } else {
d3386 14
a3399 2
     	SiS_GetCRT2Data301(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
	                   HwDeviceExtension);
d3401 1
d3403 7
a3409 4
  } else {
  
     SiS_GetCRT2DataLVDS(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                         HwDeviceExtension);
d3413 3
a3415 5
/* Checked with 650/LVDS 1.10.07 BIOS */
void
SiS_GetCRT2DataLVDS(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                    USHORT RefreshRateTableIndex,
		    PSIS_HW_DEVICE_INFO HwDeviceExtension)
d3417 3
a3419 2
   USHORT CRT2Index, ResIndex;
   const SiS_LVDSDataStruct *LVDSData = NULL;
d3421 2
a3422 1
   SiS_GetCRT2ResInfo(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,HwDeviceExtension);
d3424 8
a3431 1
   if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
d3433 1
a3433 6
      SiS_Pr->SiS_NewFlickerMode = 0;
      SiS_Pr->SiS_RVBHRS = 50;
      SiS_Pr->SiS_RY1COE = 0;
      SiS_Pr->SiS_RY2COE = 0;
      SiS_Pr->SiS_RY3COE = 0;
      SiS_Pr->SiS_RY4COE = 0;
d3435 25
a3459 2
      SiS_GetCRT2PtrA(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                      &CRT2Index,&ResIndex);
d3461 1
a3461 13
      switch (CRT2Index) {
      	case  0:  LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;    break;
      	case  1:  LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_1;   break;
        case  2:  LVDSData = SiS_Pr->SiS_LVDS1280x960Data_1;    break;
	case  3:  LVDSData = SiS_Pr->SiS_LCDA1400x1050Data_1;   break;
	case  4:  LVDSData = SiS_Pr->SiS_LCDA1600x1200Data_1;   break;
      	case  5:  LVDSData = SiS_Pr->SiS_LVDS1024x768Data_2;    break;
      	case  6:  LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_2;   break;
      	case  7:  LVDSData = SiS_Pr->SiS_LVDS1280x960Data_2;    break;
	case  8:  LVDSData = SiS_Pr->SiS_LCDA1400x1050Data_2;   break;
	case  9:  LVDSData = SiS_Pr->SiS_LCDA1600x1200Data_2;   break;
	default:  LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;    break;
      }
d3463 2
a3464 20
   } else {

      /* TW: SiS630/301B needs LVDS Data! */
      if( (HwDeviceExtension->jChipType < SIS_315H) &&
          (HwDeviceExtension->jChipType != SIS_300) &&
          (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
	  (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) ) {
	      SiS_Pr->SiS_IF_DEF_LVDS = 1;
      }

      SiS_GetCRT2Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                     &CRT2Index,&ResIndex,HwDeviceExtension);

      /* TW: SiS630/301B needs LVDS Data! */
      if( (HwDeviceExtension->jChipType < SIS_315H) &&
          (HwDeviceExtension->jChipType != SIS_300) &&
          (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
	  (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) ) {
              SiS_Pr->SiS_IF_DEF_LVDS = 0;
      }
d3466 40
a3505 28
      switch (CRT2Index) {
      	case  0:  LVDSData = SiS_Pr->SiS_LVDS800x600Data_1;    break;
      	case  1:  LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;   break;
      	case  2:  LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_1;  break;
      	case  3:  LVDSData = SiS_Pr->SiS_LVDS800x600Data_2;    break;
      	case  4:  LVDSData = SiS_Pr->SiS_LVDS1024x768Data_2;   break;
      	case  5:  LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_2;  break;
	case  6:  LVDSData = SiS_Pr->SiS_LVDS640x480Data_1;    break;
        case  7:  LVDSData = SiS_Pr->SiS_LVDSXXXxXXXData_1;    break;  /* TW: New */
	case  8:  LVDSData = SiS_Pr->SiS_LVDS1400x1050Data_1;  break;  /* TW: New */
	case  9:  LVDSData = SiS_Pr->SiS_LVDS1400x1050Data_2;  break;  /* TW: New */
      	case 10:  LVDSData = SiS_Pr->SiS_CHTVUNTSCData;        break;
      	case 11:  LVDSData = SiS_Pr->SiS_CHTVONTSCData;        break;
      	case 12:  LVDSData = SiS_Pr->SiS_CHTVUPALData;         break;
      	case 13:  LVDSData = SiS_Pr->SiS_CHTVOPALData;         break;
      	case 14:  LVDSData = SiS_Pr->SiS_LVDS320x480Data_1;    break;
	case 15:  LVDSData = SiS_Pr->SiS_LVDS1024x600Data_1;   break;  /* TW: New */
	case 16:  LVDSData = SiS_Pr->SiS_LVDS1152x768Data_1;   break;  /* TW: New */
	case 17:  LVDSData = SiS_Pr->SiS_LVDS1024x600Data_2;   break;  /* TW: New */
	case 18:  LVDSData = SiS_Pr->SiS_LVDS1152x768Data_2;   break;  /* TW: New */
	case 19:  LVDSData = SiS_Pr->SiS_LVDS1280x768Data_1;   break;  /* TW: New */
	case 20:  LVDSData = SiS_Pr->SiS_LVDS1280x768Data_2;   break;  /* TW: New */
	case 90:  LVDSData = SiS_Pr->SiS_CHTVUPALMData;        break;
      	case 91:  LVDSData = SiS_Pr->SiS_CHTVOPALMData;        break;
      	case 92:  LVDSData = SiS_Pr->SiS_CHTVUPALNData;        break;
      	case 93:  LVDSData = SiS_Pr->SiS_CHTVOPALNData;        break;
	case 99:  LVDSData = SiS_Pr->SiS_CHTVSOPALData;	       break;  /* TW: Super Overscan */
	default:  LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;   break;
a3506 1
   }
d3508 2
a3509 25
   SiS_Pr->SiS_VGAHT = (LVDSData+ResIndex)->VGAHT;
   SiS_Pr->SiS_VGAVT = (LVDSData+ResIndex)->VGAVT;
   SiS_Pr->SiS_HT = (LVDSData+ResIndex)->LCDHT;
   SiS_Pr->SiS_VT = (LVDSData+ResIndex)->LCDVT;

  if((SiS_Pr->SiS_IF_DEF_LVDS == 0) && (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {

    if(!(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)){
         if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768){
           SiS_Pr->SiS_HDE = 1024;
           SiS_Pr->SiS_VDE = 768;
         } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024){
           SiS_Pr->SiS_HDE = 1280;
           SiS_Pr->SiS_VDE = 1024;
	 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050){
           SiS_Pr->SiS_HDE = 1400;
           SiS_Pr->SiS_VDE = 1050;
	 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200){
           SiS_Pr->SiS_HDE = 1600;
           SiS_Pr->SiS_VDE = 1200;
         } else {
	   SiS_Pr->SiS_HDE = 1280;
	   SiS_Pr->SiS_VDE = 960;
	 }
    }
d3511 21
a3531 39
  } else {

    if(SiS_Pr->SiS_IF_DEF_TRUMPION == 0) {
      if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
        if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
          if((!(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)) || (SiS_Pr->SiS_SetFlag & CRT2IsVGA)) {
            if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
              SiS_Pr->SiS_HDE = 800;
              SiS_Pr->SiS_VDE = 600;
            } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
              SiS_Pr->SiS_HDE = 1024;
              SiS_Pr->SiS_VDE = 768;
            } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
              SiS_Pr->SiS_HDE = 1280;
              SiS_Pr->SiS_VDE = 1024;
            } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
	      SiS_Pr->SiS_HDE = 1024;
              SiS_Pr->SiS_VDE = 600;
	    } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
	      SiS_Pr->SiS_HDE = 1400;
              SiS_Pr->SiS_VDE = 1050;
	    } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) {
	      SiS_Pr->SiS_HDE = 1152;
	      SiS_Pr->SiS_VDE = 768;
	    } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x864) {
	      SiS_Pr->SiS_HDE = 1152;
	      SiS_Pr->SiS_VDE = 864;
	    } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
	      SiS_Pr->SiS_HDE = 1280;
	      SiS_Pr->SiS_VDE = 768;
	    } else {
	      SiS_Pr->SiS_HDE = 1600;
	      SiS_Pr->SiS_VDE = 1200;
	    }
            if(SiS_Pr->SiS_IF_DEF_FSTN) {
              SiS_Pr->SiS_HDE = 320;
              SiS_Pr->SiS_VDE = 480;
            }
          }
d3533 1
a3533 2
      }
    }
d3537 8
a3544 1
/* TW: Checked against 630/301B BIOS; does not check VDE values for LCD */
d3546 1
a3546 3
SiS_GetCRT2Data301(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex,
		   PSIS_HW_DEVICE_INFO HwDeviceExtension)
d3548 6
a3553 5
  USHORT tempax,tempbx,modeflag;
  USHORT resinfo;
  USHORT CRT2Index,ResIndex;
  const SiS_LCDDataStruct *LCDPtr = NULL;
  const SiS_TVDataStruct  *TVPtr  = NULL;
d3555 1
a3555 13
  if(ModeNo<=0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
    	resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  } else {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }
  SiS_Pr->SiS_NewFlickerMode = 0;
  SiS_Pr->SiS_RVBHRS = 50;
  SiS_Pr->SiS_RY1COE = 0;
  SiS_Pr->SiS_RY2COE = 0;
  SiS_Pr->SiS_RY3COE = 0;
  SiS_Pr->SiS_RY4COE = 0;
d3557 1
a3557 1
  SiS_GetCRT2ResInfo(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,HwDeviceExtension);
d3559 1
a3559 1
  /* TW: For VGA2 ("RAMDAC2") */
d3561 1
a3561 5
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC){
     SiS_GetRAMDAC2DATA(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                        HwDeviceExtension);
     return;
  }
d3563 19
a3581 1
  /* TW: For TV */
d3583 1
a3583 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
d3585 21
a3605 2
    SiS_GetCRT2Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                   &CRT2Index,&ResIndex,HwDeviceExtension);
d3607 1
a3607 12
    switch (CRT2Index) {
#ifdef oldHV
      case  2:  TVPtr = SiS_Pr->SiS_ExtHiTVData;   break;
      case  7:  TVPtr = SiS_Pr->SiS_St1HiTVData;   break;
      case 12:  TVPtr = SiS_Pr->SiS_St2HiTVData;   break;
#endif
      case  3:  TVPtr = SiS_Pr->SiS_ExtPALData;    break;
      case  4:  TVPtr = SiS_Pr->SiS_ExtNTSCData;   break;
      case  8:  TVPtr = SiS_Pr->SiS_StPALData;     break;
      case  9:  TVPtr = SiS_Pr->SiS_StNTSCData;    break;
      default:  TVPtr = SiS_Pr->SiS_StPALData;     break;  /* TW: Just to avoid a crash */
    }
d3609 1
a3609 11
    SiS_Pr->SiS_RVBHCMAX  = (TVPtr+ResIndex)->RVBHCMAX;
    SiS_Pr->SiS_RVBHCFACT = (TVPtr+ResIndex)->RVBHCFACT;
    SiS_Pr->SiS_VGAHT     = (TVPtr+ResIndex)->VGAHT;
    SiS_Pr->SiS_VGAVT     = (TVPtr+ResIndex)->VGAVT;
    SiS_Pr->SiS_HDE       = (TVPtr+ResIndex)->TVHDE;
    SiS_Pr->SiS_VDE       = (TVPtr+ResIndex)->TVVDE;
    SiS_Pr->SiS_RVBHRS    = (TVPtr+ResIndex)->RVBHRS;
    SiS_Pr->SiS_NewFlickerMode = (TVPtr+ResIndex)->FlickerMode;
    if(modeflag & HalfDCLK) {
	SiS_Pr->SiS_RVBHRS    = (TVPtr+ResIndex)->HALFRVBHRS;
    }
d3611 1
a3611 1
    if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) {   /* TW: NOT oldHV! */
d3613 1
a3613 3
      	if(resinfo == 0x08) SiS_Pr->SiS_NewFlickerMode = 0x40;
      	if(resinfo == 0x09) SiS_Pr->SiS_NewFlickerMode = 0x40;
	if(resinfo == 0x12) SiS_Pr->SiS_NewFlickerMode = 0x40;
d3615 1
a3615 1
        if(SiS_Pr->SiS_VGAVDE == 350) SiS_Pr->SiS_SetFlag |= TVSimuMode;
d3617 17
a3633 12
        SiS_Pr->SiS_HT = ExtHiTVHT;
        SiS_Pr->SiS_VT = ExtHiTVVT;
        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
          if(SiS_Pr->SiS_SetFlag & TVSimuMode) {
            SiS_Pr->SiS_HT = StHiTVHT;
            SiS_Pr->SiS_VT = StHiTVVT;
            if(!(modeflag & Charx8Dot)){
              SiS_Pr->SiS_HT = StHiTextTVHT;
              SiS_Pr->SiS_VT = StHiTextTVVT;
            }
          }
        }
d3635 4
a3638 1
    } else {
d3640 1
a3640 22
      SiS_Pr->SiS_RY1COE = (TVPtr+ResIndex)->RY1COE;
      SiS_Pr->SiS_RY2COE = (TVPtr+ResIndex)->RY2COE;
      SiS_Pr->SiS_RY3COE = (TVPtr+ResIndex)->RY3COE;
      SiS_Pr->SiS_RY4COE = (TVPtr+ResIndex)->RY4COE;

      if(modeflag & HalfDCLK) {
         SiS_Pr->SiS_RY1COE = 0x00;
         SiS_Pr->SiS_RY2COE = 0xf4;
         SiS_Pr->SiS_RY3COE = 0x10;
         SiS_Pr->SiS_RY4COE = 0x38;
      }

      if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
        SiS_Pr->SiS_HT = NTSCHT;
/*	if(SiS_Pr->SiS_VBType & (VB_SIS30xLV|VB_SIS30xNEW)) {  */  /* TW: ALL newer 650 BIOSes do this, no idea about 301B */
	   if((ModeNo == 0x4a) || (ModeNo == 0x38)) SiS_Pr->SiS_HT = NTSC2HT;
/*	}  */
        SiS_Pr->SiS_VT = NTSCVT;
      } else {
        SiS_Pr->SiS_HT = PALHT;
        SiS_Pr->SiS_VT = PALVT;
      }
d3642 1
a3642 1
    }
d3644 3
a3646 2
    return;
  }
d3648 1
a3648 2
  /* TW: For LCD */
  /* TW: Checked against 650/301LV; CRT2Index different (but does not matter) */
d3650 8
a3657 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
d3659 1
a3659 2
    SiS_GetCRT2Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                   &CRT2Index,&ResIndex,HwDeviceExtension);
d3661 3
a3663 18
    switch (CRT2Index) {
      case  0: LCDPtr = SiS_Pr->SiS_ExtLCD1024x768Data;        break; /* VESA Timing */
      case  1: LCDPtr = SiS_Pr->SiS_ExtLCD1280x1024Data;       break; /* VESA Timing */
      case  5: LCDPtr = SiS_Pr->SiS_StLCD1024x768Data;         break; /* Obviously unused */
      case  6: LCDPtr = SiS_Pr->SiS_StLCD1280x1024Data;        break; /* Obviously unused */
      case 10: LCDPtr = SiS_Pr->SiS_St2LCD1024x768Data;        break; /* Non-VESA Timing */
      case 11: LCDPtr = SiS_Pr->SiS_St2LCD1280x1024Data;       break; /* Non-VESA Timing */
      case 13: LCDPtr = SiS_Pr->SiS_NoScaleData1024x768;       break; /* Non-expanding */
      case 14: LCDPtr = SiS_Pr->SiS_NoScaleData1280x1024;      break; /* Non-expanding */
      case 15: LCDPtr = SiS_Pr->SiS_LCD1280x960Data;           break; /* 1280x960 */
      case 20: LCDPtr = SiS_Pr->SiS_ExtLCD1400x1050Data;       break; /* VESA Timing */
      case 21: LCDPtr = SiS_Pr->SiS_NoScaleData1400x1050;      break; /* Non-expanding */
      case 22: LCDPtr = SiS_Pr->SiS_StLCD1400x1050Data;	       break; /* Non-VESA Timing */
      case 23: LCDPtr = SiS_Pr->SiS_ExtLCD1600x1200Data;       break; /* VESA Timing */
      case 24: LCDPtr = SiS_Pr->SiS_NoScaleData1600x1200;      break; /* Non-expanding */
      case 25: LCDPtr = SiS_Pr->SiS_StLCD1600x1200Data;	       break; /* Non-VESA Timing */
      default: LCDPtr = SiS_Pr->SiS_ExtLCD1024x768Data;	       break; /* Just to avoid a crash */
    }
d3665 1
a3665 48
    SiS_Pr->SiS_RVBHCMAX  = (LCDPtr+ResIndex)->RVBHCMAX;
    SiS_Pr->SiS_RVBHCFACT = (LCDPtr+ResIndex)->RVBHCFACT;
    SiS_Pr->SiS_VGAHT     = (LCDPtr+ResIndex)->VGAHT;
    SiS_Pr->SiS_VGAVT     = (LCDPtr+ResIndex)->VGAVT;
    SiS_Pr->SiS_HT        = (LCDPtr+ResIndex)->LCDHT;
    SiS_Pr->SiS_VT        = (LCDPtr+ResIndex)->LCDVT;

    tempax = 1024;
    if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
      if     (SiS_Pr->SiS_VGAVDE == 350) tempbx = 560;
      else if(SiS_Pr->SiS_VGAVDE == 400) tempbx = 640;
      else                               tempbx = 768;
    } else {
      if     (SiS_Pr->SiS_VGAVDE == 357) tempbx = 527;
      else if(SiS_Pr->SiS_VGAVDE == 420) tempbx = 620;
      else if(SiS_Pr->SiS_VGAVDE == 525) tempbx = 775;
      else if(SiS_Pr->SiS_VGAVDE == 600) tempbx = 775;
      else if(SiS_Pr->SiS_VGAVDE == 350) tempbx = 560;
      else if(SiS_Pr->SiS_VGAVDE == 400) tempbx = 640;
      else                               tempbx = 768;
    }
    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024){
      tempax = 1280;
      if     (SiS_Pr->SiS_VGAVDE == 360) tempbx = 768;
      else if(SiS_Pr->SiS_VGAVDE == 375) tempbx = 800;
      else if(SiS_Pr->SiS_VGAVDE == 405) tempbx = 864;
      else                               tempbx = 1024;
    }
    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960){
      tempax = 1280;
      if     (SiS_Pr->SiS_VGAVDE == 350)  tempbx = 700;
      else if(SiS_Pr->SiS_VGAVDE == 400)  tempbx = 800;
      else if(SiS_Pr->SiS_VGAVDE == 1024) tempbx = 960;
      else                                tempbx = 960;
    }
    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050){
      tempax = 1400;
      tempbx = 1050;
    }
    if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) {
       tempax = SiS_Pr->SiS_VGAHDE;
       tempbx = SiS_Pr->SiS_VGAVDE;
    }
    SiS_Pr->SiS_HDE = tempax;
    SiS_Pr->SiS_VDE = tempbx;
    return;
  }
}
d3667 4
a3670 4
USHORT
SiS_GetResInfo(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
{
  USHORT resindex;
d3672 12
a3683 4
  if(ModeNo<=0x13)
    	resindex=SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  else
    	resindex=SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d3685 2
a3686 2
  return(resindex);
}
d3688 22
a3709 6
/* TW: Checked against 650/301LV, 650/LVDS, 630/LVDS, 630/301 and 630/301B BIOS */
void
SiS_GetCRT2ResInfo(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                   PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT xres,yres,modeflag=0,resindex;
d3711 1
a3711 1
  resindex = SiS_GetResInfo(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex);
d3713 13
a3725 19
  if(ModeNo <= 0x13) {
    	xres = SiS_Pr->SiS_StResInfo[resindex].HTotal;
    	yres = SiS_Pr->SiS_StResInfo[resindex].VTotal;
  } else {
	xres = SiS_Pr->SiS_ModeResInfo[resindex].HTotal;
    	yres = SiS_Pr->SiS_ModeResInfo[resindex].VTotal;
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }

  /* TW: Inserted entire if-section from 650/LVDS BIOS 1.10.07: */
  if((HwDeviceExtension->jChipType >= SIS_315H) && (SiS_Pr->SiS_IF_DEF_LVDS == 1)) {
      if((ModeNo != 0x03) && (SiS_Pr->SiS_SetFlag & CRT2IsVGA)) {
          if(yres == 350) yres = 400;
      }
      if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x3a) & 0x01) {
 	  if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x34) == 0x12)
	      yres = 400;
      }
  }
d3727 5
a3731 9
  if(ModeNo > 0x13) {
      if(SiS_Pr->SiS_IF_DEF_FSTN == 1){
            xres *= 2;
            yres *= 2;
      } else {
  	    if(modeflag & HalfDCLK)       xres *= 2;
  	    if(modeflag & DoubleScanMode) yres *= 2;
      }
  }
a3732 42
  if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
        /* TW: Inserted from 650/301LV BIOS */
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
                if(xres == 720) xres = 640;
	} else {
	   if((HwDeviceExtension->jChipType != SIS_300) ||
	      (SiS_Pr->SiS_VBInfo & (SetCRT2ToAVIDEO | SetCRT2ToSVIDEO |
	                             SetCRT2ToSCART  | SetCRT2ToLCD    | SetCRT2ToHiVisionTV))) {
	        if(xres == 720) xres = 640;
	   }
    	   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
      		if(yres == 400) yres = 405;
      		if(yres == 350) yres = 360;
      		if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
        		if(yres == 360) yres = 375;
      		}
   	   }
    	   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768){
      		if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        		if(!(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)) {
          			if(yres == 350) yres = 357;
          			if(yres == 400) yres = 420;
            			if(yres == 480) yres = 525;
        		}
      		}
    	   }
	   /* TW: Inserted for 630/301B */
	   if( ( (HwDeviceExtension->jChipType < SIS_315H) &&
	         (HwDeviceExtension->jChipType != SIS_300) ) &&
	       (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) ) {
                  if(xres == 720) xres = 640;
	   }
	}
  } else {
    	if(xres == 720) xres = 640;
	/* TW: Inserted from 650/LVDS and 630/LVDS BIOS */
	if(SiS_Pr->SiS_SetFlag & CRT2IsVGA) {
	      yres = 400;
	      if(HwDeviceExtension->jChipType >= SIS_315H) {
	          if(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x17) & 0x80) yres = 480;
	      } else {
	          if(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13) & 0x80) yres = 480;
a3733 5
	}
  }
  SiS_Pr->SiS_VGAHDE = SiS_Pr->SiS_HDE = xres;
  SiS_Pr->SiS_VGAVDE = SiS_Pr->SiS_VDE = yres;
}
d3735 18
a3752 9
/* TW: Checked against 650/301 and 650/LVDS (1.10.07) BIOS; modified for new panel resolutions */
/* TW: Done differently in 630/301B BIOS; but same effect; checked against 630/301 */
void
SiS_GetCRT2Ptr(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
	       USHORT RefreshRateTableIndex,USHORT *CRT2Index,USHORT *ResIndex,
	       PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT tempbx=0,tempal=0;
  USHORT Flag,resinfo=0;
d3754 8
a3761 1
  if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
d3763 1
a3763 1
    	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {                            /* LCD */
d3765 6
a3770 22
	        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960) {
			tempbx = 15;
		} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
		        tempbx = 20;
			if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) tempbx = 21;
			if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx = 22;
		} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
		        tempbx = 23;
			if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) tempbx = 24;
			if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx = 25;
		} else if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) {
			tempbx = 13;
			if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) tempbx++;
		} else {
      		   tempbx = SiS_Pr->SiS_LCDResInfo - SiS_Pr->SiS_Panel1024x768;
      		   if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        		tempbx += 5;
                        /* GetRevisionID();  */
			/* TW: BIOS only adds 5 once */
        		tempbx += 5;
       		   }
	        }
d3772 1
a3772 40
     	} else {						  	/* TV */
#ifdef oldHV
       		if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV){
         		if(SiS_Pr->SiS_VGAVDE > 480) SiS_Pr->SiS_SetFlag &= (~TVSimuMode); /* TW: Was "(!TVSimuMode)" - WRONG */
         		tempbx = 2;
         		if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
            			if(!(SiS_Pr->SiS_SetFlag & TVSimuMode)) tempbx = 12;  /* TW: Was 10! - WRONG */
         		}
       		} else {
#endif
         		if(SiS_Pr->SiS_VBInfo & SetPALTV) tempbx = 3;
         		else tempbx = 4;
         		if(SiS_Pr->SiS_SetFlag & TVSimuMode) tempbx += 5;
#ifdef oldHV
       		}
#endif
     	}

     	if(ModeNo <= 0x13) {
       		tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
     	} else {
       		tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
		resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
        }

     	tempal &= 0x3F;

      	if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
           (SiS_Pr->SiS_VBInfo & (SetCRT2ToTV-SetCRT2ToHiVisionTV))) {
      		if(tempal == 0x06) tempal = 0x07;
        }

	/* TW: Inserted from 300/301LV BIOS */
	if((HwDeviceExtension->jChipType == SIS_300) &&
	   (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
	    if(ModeNo > 0x13) {
	        if((resinfo == 0x0c) || (resinfo == 0x0d))  /* 720 (index diff. on 310/325!) */
		    tempal = 6;
	    }
	}
d3774 1
a3774 5
	if(HwDeviceExtension->jChipType != SIS_300) {
           if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
              if((ModeNo == 0x31) || (ModeNo == 0x32)) tempal = 6;
	   }
	}
d3776 3
a3778 26
     	*CRT2Index = tempbx;
     	*ResIndex = tempal;

  } else {   /* LVDS */

    	Flag = 1;
    	tempbx = 0;
    	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
      		if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
        		Flag = 0;
        		tempbx = 10;
			if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) tempbx += 1;
        		if(SiS_Pr->SiS_VBInfo & SetPALTV) {
				tempbx += 2;
				if(SiS_Pr->SiS_CHSOverScan) tempbx = 99;
				if(SiS_Pr->SiS_CHPALM) {
					tempbx = 90;
					if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) tempbx += 1;
				} else if(SiS_Pr->SiS_CHPALN) {
					tempbx = 92;
					if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) tempbx += 1;
				}
				
			}
      		}
    	}
d3780 19
a3798 27
    	if(Flag == 1) {
      		tempbx = SiS_Pr->SiS_LCDResInfo - SiS_Pr->SiS_PanelMinLVDS;
		if(SiS_Pr->SiS_LCDResInfo <= SiS_Pr->SiS_Panel1280x1024) {
   	      	    if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)  tempbx += 3;
		} else {
		    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
			tempbx = 8;
			if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)  tempbx++;
		    }
        	    if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
			tempbx = 7;
        	    }

     		    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480)  tempbx = 6;

		    /* TW: Inserted from 630/LVDS 2.04.5c BIOS */
		    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
			tempbx = 15;
  		        if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)  tempbx += 2;
		    }
		    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) {
		        tempbx = 16;
			if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)  tempbx += 2;
		    }
		    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
		        tempbx = 18;
			if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)  tempbx++;
a3800 1
	}
d3802 3
a3804 6
    	if(ModeNo <= 0x13)
      		tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
    	else {
      		tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
		resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
	}
d3806 16
a3821 6
	if(SiS_Pr->SiS_IF_DEF_FSTN){
       	 	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel320x480){
         		tempbx = 14;
         		tempal = 6;
        	}
    	}
d3823 2
a3824 7
	/* TW: Inserted from 650/LVDS BIOS */
	if(SiS_Pr->SiS_SetFlag & CRT2IsVGA) {
	        if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) tempal = 7;
		if(HwDeviceExtension->jChipType < SIS_315H) {
		    /* TW: Inserted from 630/LVDS (2.04.5c) and 630/301B (II) BIOS */
		    if(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13) & 0x80) tempal++;
		}
d3826 2
a3827 1
	}
a3828 9
	/* TW: Inserted from 630/301B BIOS */
	if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	    if(ModeNo > 0x13) {
	        if(HwDeviceExtension->jChipType < SIS_315H) {
	           if((resinfo == 0x0c) || (resinfo == 0x0d))  /* 720 */
		       tempal = 6;
	        } else {
		   if((resinfo == 0x0d) || (resinfo == 0x0e))  /* 720 */
		       tempal = 6;
a3829 2
	    }
	}
d3831 3
a3833 4
    	*CRT2Index = tempbx;
    	*ResIndex = tempal & 0x1F;
  }
}
d3835 4
a3838 6
void
SiS_GetCRT2PtrA(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
		USHORT RefreshRateTableIndex,USHORT *CRT2Index,
		USHORT *ResIndex)
{
  USHORT tempbx,tempal;
d3840 1
a3840 1
  tempbx = SiS_Pr->SiS_LCDResInfo;
d3842 1
a3842 9
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
       tempbx = 4;
  } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
       tempbx = 3;
  } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960) {
       tempbx = 2;
  } else {
       tempbx -= SiS_Pr->SiS_Panel1024x768;
  }
d3844 1
a3844 1
  if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)  tempbx += 5;
d3846 1
a3846 4
  if(ModeNo <= 0x13)
      	tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  else
      	tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d3848 1
a3848 3
  *CRT2Index = tempbx;
  *ResIndex = tempal & 0x1F;
}
d3850 8
a3857 7
/* TW: New from 650/301LVx BIOS */
void
SiS_GetCRT2Part2Ptr(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
		    USHORT RefreshRateTableIndex,USHORT *CRT2Index,
		    USHORT *ResIndex)
{
  USHORT tempbx,tempal;
d3859 2
a3860 4
  if(ModeNo <= 0x13)
      	tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  else
      	tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d3862 3
a3864 1
  tempbx = SiS_Pr->SiS_LCDResInfo;
d3866 1
a3866 2
  if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)    tempbx += 16;
  else if(SiS_Pr->SiS_SetFlag & LCDVESATiming) tempbx += 32;
d3868 15
a3882 3
  *CRT2Index = tempbx;
  *ResIndex = tempal & 0x3F;
}
d3884 1
a3884 11
/* TW: Checked against all (incl 650/LVDS (1.10.07), 630/301B, 630/301) BIOSes */
USHORT
SiS_GetRatePtrCRT2(SiS_Private *SiS_Pr, UCHAR *ROMAddr, USHORT ModeNo, USHORT ModeIdIndex,
                   PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  SHORT  LCDRefreshIndex[] = { 0x00, 0x00, 0x03, 0x01,
                               0x01, 0x01, 0x01, 0x01,
			       0x01, 0x01, 0x01, 0x01,
			       0x01, 0x01, 0x01, 0x01 };
  USHORT RefreshRateTableIndex,i,backup_i;
  USHORT modeflag,index,temp,backupindex;
d3886 1
a3886 6
  if(SiS_Pr->UseCustomMode) return 0;
  
  if(ModeNo <= 0x13)
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  else
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d3888 30
a3917 5
  if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
    	if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
      		if(modeflag & HalfDCLK) return(0);
    	}
  }
d3919 1
a3919 1
  if(ModeNo < 0x14) return(0xFFFF);
d3921 1
a3921 10
 /* TW: CR33 holds refresh rate index for CRT1 [3:0] and CRT2 [7:4].
  *     On LVDS machines, CRT2 index is always 0 and will be
  *     set to 0 by the following code; this causes the function
  *     to take the first non-interlaced mode in SiS_Ext2Struct
  */

  index = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x33);
  index >>= SiS_Pr->SiS_SelectCRT2Rate;
  index &= 0x0F;
  backupindex = index;
d3923 4
a3926 1
  if(index > 0) index--;
d3928 4
a3931 10
  if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA))  index = 0;
      } else {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	    if((HwDeviceExtension->jChipType < SIS_315H) &&
	       (HwDeviceExtension->jChipType != SIS_300))
	       	    index = 0;
	    else if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)
	    	    index = backupindex = 0;
a3932 2
      }
  }
d3934 26
a3959 16
  if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {
    	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
      		if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        		index = 0;
      		}
    	}
    	if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
      		if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
		        /* TW: This is not done in 630/301B BIOS */
           		temp = LCDRefreshIndex[SiS_Pr->SiS_LCDResInfo];
        		if(index > temp) index = temp;
      		} else {
        		index = 0;
      		}
    	}
  }
d3961 6
a3966 2
  RefreshRateTableIndex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].REFindex;
  ModeNo = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].ModeID;
d3968 1
a3968 10
  /* TW: Inserted from 650/LVDS 1.10.07, 650/301LVx 1.10.6s */
  if(HwDeviceExtension->jChipType >= SIS_315H) {
    if(!(SiS_Pr->SiS_VBInfo & DriverMode)) {
      if( (SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_VESAID == 0x105) ||
          (SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_VESAID == 0x107) ) {
            if(backupindex <= 1)
	       RefreshRateTableIndex++;
      }
    }
  }
d3970 4
a3973 9
  i = 0;
  do {
    	if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + i].ModeID != ModeNo) break;
    	temp = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + i].Ext_InfoFlag;
    	temp &= ModeInfoFlag;
    	if(temp < SiS_Pr->SiS_ModeType) break;
    	i++;
    	index--;
  } while(index != 0xFFFF);
d3975 5
a3979 8
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
    	if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
      		temp = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + i - 1].Ext_InfoFlag;
      		if(temp & InterlaceMode) {
        		i++;
      		}
    	}
  }
d3981 5
a3985 1
  i--;
d3987 2
a3988 9
  if((SiS_Pr->SiS_SetFlag & ProgrammingCRT2) && (!(SiS_Pr->SiS_VBInfo & DisableCRT2Display))) {
    	backup_i = i;
    	if (!(SiS_AdjustCRT2Rate(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
	                             RefreshRateTableIndex,&i,HwDeviceExtension))) {
		/* TW: This is for avoiding random data to be used; i is
		 *     in an undefined state if no matching CRT2 mode is
		 *     found.
		 */
		i = backup_i;
a3989 1
  }
d3991 7
a3997 2
  return(RefreshRateTableIndex + i);
}
d3999 17
a4015 7
/* Checked against all (incl 650/LVDS (1.10.07), 630/301) BIOSes */
BOOLEAN
SiS_AdjustCRT2Rate(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex,USHORT *i,PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT tempax,tempbx,resinfo;
  USHORT modeflag,infoflag;
d4017 7
a4023 4
  if (ModeNo <= 0x13)
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  else
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d4025 1
a4025 2
  resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  tempbx = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].ModeID;
d4027 16
a4042 171
  tempax = 0;
  if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
  	/* TW: For 301, 301B, 302B, 301LV, 302LV */
    	if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
      		tempax |= SupportRAMDAC2;
		if(HwDeviceExtension->jChipType >= SIS_315H) {
		    tempax |= SupportTV;
		    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
		        if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
			    if(resinfo == 0x0a) tempax |= SupportTV1024;
			}
		    }
		}
    	}
    	if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
      		tempax |= SupportLCD;
		if(HwDeviceExtension->jChipType >= SIS_315H) {
                   if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1600x1200) {
		      if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1400x1050) {
		         if((resinfo == 6) && (SiS_Pr->SiS_LCDInfo & LCDNonExpanding)) {
			    tempax |= SupportAllCRT2;
			    (*i) = 0;   /* TW: Restore RefreshTableIndex (BIOS 650/301LVx 1.10.6s) */
                            return(1);
		         } else {
      		            if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024) {
        		      if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x960) {
           			if((resinfo == 6) && (SiS_Pr->SiS_LCDInfo & LCDNonExpanding)) {
				    return(0);
				} else {
             			    if((resinfo >= 9) && (resinfo != 0x14)) {
               				tempax = 0;
               				return(0);
             			    }
           			}
        		      }
		            }
		         }
		      }
      		   }
		} else {
		  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
		     if((resinfo != 0x0f) && ((resinfo == 4) || (resinfo >= 8))) return(0);
		  } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) {
		     if((resinfo != 0x10) && (resinfo > 8)) return(0);
		  } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960) {
		     if((resinfo != 0x0e) && (resinfo > 8)) return(0);
		  } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
		     if(resinfo > 9) return(0);
		  } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
		     if(resinfo > 8) return(0);
		  } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
		     if((resinfo == 4) || (resinfo > 7)) return(0);
		  } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
		     if((resinfo == 4) || (resinfo == 3) || (resinfo > 6)) return(0);
		  }
		}
    	}
#ifdef oldHV
    	if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) {    /* for HiTV */
      		tempax |= SupportHiVisionTV;
      		if(SiS_Pr->SiS_VBInfo & SetInSlaveMode){
        		if(resinfo == 4) return(0);
        		if(resinfo == 3) {
          			if(SiS_Pr->SiS_SetFlag & TVSimuMode) return(0);
        		}
        		if(resinfo > 7) return(0);
      		}
    	} else {
#endif
      	if(SiS_Pr->SiS_VBInfo & (SetCRT2ToAVIDEO|SetCRT2ToSVIDEO|SetCRT2ToSCART)) {
        	tempax |= SupportTV;
		tempax |= SupportTV1024;
		if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
		    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
		        if((SiS_Pr->SiS_VBInfo & SetNotSimuMode) && (SiS_Pr->SiS_VBInfo & SetPALTV)) {
			     if(resinfo != 8) {
			         if( (!(SiS_Pr->SiS_VBInfo & SetPALTV)) ||
				     ((SiS_Pr->SiS_VBInfo & SetPALTV) && (resinfo != 4)) ) {
				     tempax &= ~(SupportTV1024);
				     if(HwDeviceExtension->jChipType >= SIS_315H) {
                                         if((modeflag & NoSupportSimuTV) && (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
				             if( (!(SiS_Pr->SiS_VBInfo & SetPALTV)) ||
			                         ((SiS_Pr->SiS_VBInfo & SetPALTV) && (resinfo != 7)) ) {
			                         if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) return(0);
		                             }
				         }
		                     } else {
				         if( (resinfo != 3) ||
					     (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
					     (SiS_Pr->SiS_VBInfo & SetNotSimuMode) ) {
					     if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
						 if((modeflag & NoSupportSimuTV) && (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
						     if(resinfo == 3) return(0);
						     if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) return (0);
						 }
		                             }
                                         } else return(0);
				     }
				 }
			     }
			} else {
			    tempax &= ~(SupportTV1024);
			    if(HwDeviceExtension->jChipType >= SIS_315H) {
			        if((modeflag & NoSupportSimuTV) && (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
			            if( (!(SiS_Pr->SiS_VBInfo & SetPALTV)) ||
			                ((SiS_Pr->SiS_VBInfo & SetPALTV) && (resinfo != 7)) ) {
			                if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) return(0);
		                    }
		                }
			    } else {
			        if( (resinfo != 3) ||
				    (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
				    (SiS_Pr->SiS_VBInfo & SetNotSimuMode) ) {
				     if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
					 if((modeflag & NoSupportSimuTV) && (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
					     if(resinfo == 3) return(0);
					     if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) return (0);
					 }
		                     }
                                } else return(0);
                            }
			}
		    } else {  /* slavemode */
			if(resinfo != 8) {
			    if( (!(SiS_Pr->SiS_VBInfo & SetPALTV)) ||
			        ((SiS_Pr->SiS_VBInfo & SetPALTV) && (resinfo != 4) ) ) {
				 tempax &= ~(SupportTV1024);
				 if(HwDeviceExtension->jChipType >= SIS_315H) {
				     if((modeflag & NoSupportSimuTV) && (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
				         if( (!(SiS_Pr->SiS_VBInfo & SetPALTV)) ||
			                     ((SiS_Pr->SiS_VBInfo & SetPALTV) && (resinfo != 7)) ) {
			                     if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode))  return(0);
		                         }
		                     }
			        } else {
				    if( (resinfo != 3) ||
				        (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
				        (SiS_Pr->SiS_VBInfo & SetNotSimuMode) ) {
				         if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
					     if((modeflag & NoSupportSimuTV) && (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
					         if(resinfo == 3) return(0);
					         if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) return (0);
					     }
		                         }
                                    } else return(0);
				}
			    }
			}
		    }
		} else {   /* 301 */
		    tempax &= ~(SupportTV1024);
		    if(HwDeviceExtension->jChipType >= SIS_315H) {
		        if((modeflag & NoSupportSimuTV) && (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
		            if( (!(SiS_Pr->SiS_VBInfo & SetPALTV)) ||
			        ((SiS_Pr->SiS_VBInfo & SetPALTV) && (resinfo != 7)) ) {
			        if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) return(0);
		            }
		        }
		    } else {
		        if( (resinfo != 3) ||
			    (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
			    (SiS_Pr->SiS_VBInfo & SetNotSimuMode) ) {
			    if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
			        if((modeflag & NoSupportSimuTV) && (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
				    if(resinfo == 3) return(0);
				    if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) return (0);
				}
		            }
                        } else return(0);
		    }
		}
a4043 4
#ifdef oldHV
    	}
#endif
  } else {	/* TW: for LVDS  */
d4045 6
a4050 46
    	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
      		if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        		tempax |= SupportCHTV;
      		}
    	}
    	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
      		tempax |= SupportLCD;
		if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
		     if((resinfo != 0x14) && (resinfo > 0x09)) return(0);
		} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
		     if((resinfo != 0x0f) && (resinfo > 0x08)) return(0);
		} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) {
		     if((resinfo != 0x10) && (resinfo > 0x08)) return(0);
		} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
		     if((resinfo != 0x15) && (resinfo > 0x09)) return(0);
		} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
                     if(resinfo > 0x09) return(0);
                } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
		     if(resinfo > 0x08) return(0);
		} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600){
		     if(resinfo > 0x07) return(0);
		     if(resinfo == 0x04) return(0);
		}
    	}
  }
  /* TW: Look backwards in table for matching CRT2 mode */
  for(; SiS_Pr->SiS_RefIndex[RefreshRateTableIndex+(*i)].ModeID == tempbx; (*i)--) {
     	infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].Ext_InfoFlag;
     	if(infoflag & tempax) {
       		return(1);
     	}
     	if ((*i) == 0) break;
  }
  /* TW: Look through the whole mode-section of the table from the beginning
   *     for a matching CRT2 mode if no mode was found yet.
   */
  for((*i) = 0; ; (*i)++) {
     	infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].Ext_InfoFlag;
     	if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].ModeID != tempbx) {
       		return(0);
     	}
     	if(infoflag & tempax) {
       		return(1);
     	}
  }
  return(1);
d4053 8
a4060 1
/* Checked against 650/LVDS (1.10.07) and 650/301LV BIOS */
d4062 1
a4062 1
SiS_SaveCRT2Info(SiS_Private *SiS_Pr, USHORT ModeNo)
d4064 47
a4110 1
  USHORT temp1,temp2;
d4112 37
a4148 6
  /* TW: We store CRT1 ModeNo in CR34 */
  SiS_SetReg1(SiS_Pr->SiS_P3d4,0x34,ModeNo);
  temp1 = (SiS_Pr->SiS_VBInfo & SetInSlaveMode) >> 8;
  temp2 = ~(SetInSlaveMode >> 8);
  SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x31,temp2,temp1);
}
d4150 2
a4151 9
/* TW: Checked against 650+301, 650/LVDS (1.10.07) and 650/301LVx (1.10.6s) BIOS */
void
SiS_GetVBInfo(SiS_Private *SiS_Pr, USHORT BaseAddr,UCHAR *ROMAddr,USHORT ModeNo,
              USHORT ModeIdIndex,PSIS_HW_DEVICE_INFO HwDeviceExtension,
	      int checkcrt2mode)
{
  USHORT tempax,tempbx,temp;
  USHORT modeflag, resinfo=0;
  UCHAR  OutputSelect = *SiS_Pr->pSiS_OutputSelect;
d4153 1
a4153 10
  if(SiS_Pr->UseCustomMode) {
        modeflag = SiS_Pr->CModeFlag;
  } else {
    if (ModeNo <= 0x13)
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
    else {
   	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
    }
  }    
d4155 1
a4155 1
  SiS_Pr->SiS_SetFlag = 0;
d4157 1
a4157 1
  SiS_Pr->SiS_ModeType = modeflag & ModeInfoFlag;
d4159 1
a4159 21
  tempbx = 0;
  if(SiS_BridgeIsOn(SiS_Pr,BaseAddr,HwDeviceExtension) == 0) {              /* TW: "== 0" inserted from 630/301B BIOS */
    	temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
	/* SiS_HiVision is only used on 310/325+30xB/LV/LVX */
	if(SiS_Pr->SiS_HiVision & 0x03) {	/* TW: New from 650/301LVx 1.10.6s */
	     temp &= (SetCRT2ToHiVisionTV | SwitchToCRT2 | SetSimuScanMode); 	/* 0x83 */
	     temp |= SetCRT2ToHiVisionTV;   					/* 0x80 */
	}
	if(SiS_Pr->SiS_HiVision & 0x04) {	/* TW: New from 650/301LVx 1.10.6s */
	     temp &= (SetCRT2ToHiVisionTV | SwitchToCRT2 | SetSimuScanMode); 	/* 0x83 */
	     temp |= SetCRT2ToSVIDEO;  						/* 0x08 */
	}
    	if(SiS_Pr->SiS_IF_DEF_FSTN) {   /* fstn must set CR30=0x21 */
       		temp = (SetCRT2ToLCD | SetSimuScanMode);
       		SiS_SetReg1(SiS_Pr->SiS_P3d4,0x30,temp);
    	}
    	tempbx |= temp;
    	tempax = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x31) << 8;
        tempax &= (LoadDACFlag | DriverMode | SetDispDevSwitch | SetNotSimuMode | SetPALTV);
    	tempbx |= tempax;
    	tempbx &= ~(SetCHTVOverScan | SetInSlaveMode | DisableCRT2Display);;
d4161 1
a4161 1
#ifdef SIS315H
d4163 7
a4169 6
	if(HwDeviceExtension->jChipType >= SIS_315H) {
    	   if(SiS_Pr->SiS_VBType & (VB_SIS302B | VB_SIS30xLV | VB_SIS30xNEW)) {
#if 0		/* Not in 1.10.8r */
	        if(ModeNo == 3) {
		    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x31,0xbf);
		}
d4171 30
a4200 11
#if 0		/* Not in 1.10.8r */
		if(!(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x31) & (DriverMode >> 8))) {
		    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0xfc);
		}
#endif
		if((tempbx & SetCRT2ToLCD) && (SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30) & SetCRT2ToLCD)) {
                    if((SiS_GetReg1(SiS_Pr->SiS_P3d4, 0x36) & 0x0f) == SiS_Pr->SiS_Panel1400x1050) {
		        if((ModeNo <= 0x13) || (!(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x31) & (DriverMode >> 8)))) {
		 	    if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x5f) & 0xF0) {
				SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x38,(EnableDualEdge | SetToLCDA));  /* 3 */
			    }
d4202 21
a4222 22
		    } else {
		       if((ModeNo <= 0x13) || (!(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x31) & (DriverMode >> 8)))) {
			   if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x5f) & 0xF0) {
			        SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x38,(EnableDualEdge | SetToLCDA));  /* 3 */
		           }
		       }
		    }
		}
		temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
       		if((temp & (EnableDualEdge | SetToLCDA)) == (EnableDualEdge | SetToLCDA)) {
          		tempbx |= SetCRT2ToLCDA;
		}
    	   }
	   /* TW: Inserted from 650/LVDS 1.10.07 BIOS: */
	   if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
	        temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
	        if(temp & SetToLCDA)
		        tempbx |= SetCRT2ToLCDA;
	        if(temp & EnableLVDSHiVision)
		        tempbx |= SetCRT2ToHiVisionTV;
	   }
	}
d4224 1
a4224 1
#endif  /* SIS315H */
d4226 10
a4235 20
    	if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
	        temp = SetCRT2ToLCDA   | SetCRT2ToSCART      | SetCRT2ToLCD |
		       SetCRT2ToRAMDAC | SetCRT2ToSVIDEO     | SetCRT2ToAVIDEO; /* = 0x807C; */
      		if(SiS_Pr->SiS_IF_DEF_HiVision == 1)
                     temp |= SetCRT2ToHiVisionTV; /* = 0x80FC; */
    	} else {
                if(HwDeviceExtension->jChipType >= SIS_315H) {
                    if(SiS_Pr->SiS_IF_DEF_CH70xx != 0)
        		temp = SetCRT2ToLCDA   | SetCRT2ToSCART |
			       SetCRT2ToLCD    | SetCRT2ToHiVisionTV |
			       SetCRT2ToAVIDEO | SetCRT2ToSVIDEO;  /* = 0x80bc */
      		    else
        		temp = SetCRT2ToLCDA | SetCRT2ToLCD;
		} else {
      		    if(SiS_Pr->SiS_IF_DEF_CH70xx != 0)
        		temp = SetCRT2ToTV | SetCRT2ToLCD;
      		    else
        		temp = SetCRT2ToLCD;
		}
    	}
d4237 9
a4245 4
    	if(!(tempbx & temp)) {
      		tempax = DisableCRT2Display;
      		tempbx = 0;
    	}
d4247 16
a4262 37
   	if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
      		if(tempbx & SetCRT2ToLCDA) {
        		tempbx &= (0xFF00|SwitchToCRT2|SetSimuScanMode);
      		}
		if(tempbx & SetCRT2ToRAMDAC) {
        		tempbx &= (0xFF00|SetCRT2ToRAMDAC|SwitchToCRT2|SetSimuScanMode);
      		}
		if((tempbx & SetCRT2ToLCD) && (!(SiS_Pr->SiS_VBType & VB_NoLCD))) {
        		tempbx &= (0xFF00|SetCRT2ToLCD|SwitchToCRT2|SetSimuScanMode);
      		}
		if(tempbx & SetCRT2ToSCART) {
        		tempbx &= (0xFF00|SetCRT2ToSCART|SwitchToCRT2|SetSimuScanMode);
        		tempbx |= SetPALTV;
		}
#if 0		/* TW: Not done in 650/301LVx 1.10.6s BIOS */
      		} else if(tempbx & SetCRT2ToHiVisionTV){
        		tempbx &= (0xFF00|SetCRT2ToHiVisionTV|SwitchToCRT2|SetSimuScanMode);
        		tempbx |= SetPALTV;
      		}
#endif
   	} else { /* LVDS */
	        if(HwDeviceExtension->jChipType >= SIS_315H) {
		    if(tempbx & SetCRT2ToLCDA)
		        tempbx &= (0xFF00|SwitchToCRT2|SetSimuScanMode);
		}
      		if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
        	    if(tempbx & SetCRT2ToTV)
          		 tempbx &= (0xFF00|SetCRT2ToTV|SwitchToCRT2|SetSimuScanMode);
      		}
      		if(tempbx & SetCRT2ToLCD) {
        		tempbx &= (0xFF00|SetCRT2ToLCD|SwitchToCRT2|SetSimuScanMode);
		}
	        if(HwDeviceExtension->jChipType >= SIS_315H) {
		    if(tempbx & SetCRT2ToLCDA)
		        tempbx |= SetCRT2ToLCD;
		}
	}
d4264 1
a4264 5
    	if(tempax & DisableCRT2Display) {
      		if(!(tempbx & (SwitchToCRT2 | SetSimuScanMode))) {
        		tempbx = SetSimuScanMode | DisableCRT2Display;
      		}
    	}
d4266 8
a4273 3
    	if(!(tempbx & DriverMode)){
      		tempbx |= SetSimuScanMode;
    	}
d4275 8
a4282 14
	/* TW: LVDS (LCD/TV) and 630+301B (LCD) can only be slave in 8bpp modes */
	if( (SiS_Pr->SiS_IF_DEF_LVDS == 1) && (SiS_Pr->SiS_ModeType <= ModeVGA) ) {
		modeflag &= (~CRT2Mode);
	}
	if( (HwDeviceExtension->jChipType < SIS_315H) &&
            (HwDeviceExtension->jChipType != SIS_300) &&
	    (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
	        if(SiS_Pr->SiS_ModeType <= ModeVGA) {
			if(tempbx & SetCRT2ToLCD) {
		    		modeflag &= (~CRT2Mode);
			}
	        }
	}
	/* TW end */
d4284 6
a4289 21
    	if(!(tempbx & SetSimuScanMode)){
      	    if(tempbx & SwitchToCRT2) {
        	if((!(modeflag & CRT2Mode)) && (checkcrt2mode)) {
		     if( (HwDeviceExtension->jChipType >= SIS_315H) &&
			 (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) ) {
			 if(resinfo != 0x0a)
                              tempbx |= SetSimuScanMode;
		     } else {
            		      tempbx |= SetSimuScanMode;
	             }
        	}
      	    } else {
        	if(!(SiS_BridgeIsEnable(SiS_Pr,BaseAddr,HwDeviceExtension))) {
          	     if(!(tempbx & DriverMode)) {
            		  if(SiS_BridgeInSlave(SiS_Pr)) {
			      tempbx |= SetSimuScanMode;
            		  }
                     }
                }
      	    }
    	}
d4291 1
a4291 50
    	if(!(tempbx & DisableCRT2Display)) {
            if(tempbx & DriverMode) {
                if(tempbx & SetSimuScanMode) {
          	    if((!(modeflag & CRT2Mode)) && (checkcrt2mode)) {
	                if( (HwDeviceExtension->jChipType >= SIS_315H) &&
			    (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) ) {
			     if(resinfo != 0x0a) {  /* TW: Inserted from 650/301 BIOS */
			          tempbx |= SetInSlaveMode;
            		          if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
              		 	     if(tempbx & SetCRT2ToTV) {
                		         if(!(tempbx & SetNotSimuMode))
					     SiS_Pr->SiS_SetFlag |= TVSimuMode;
              			     }
                                  }
			     }                      /* TW: Inserted from 650/301 BIOS */
		        } else {
            		    tempbx |= SetInSlaveMode;
            		    if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
              		        if(tempbx & SetCRT2ToTV) {
                		    if(!(tempbx & SetNotSimuMode))
					SiS_Pr->SiS_SetFlag |= TVSimuMode;
              			}
            		    }
                        }
	            }
                }
            } else {
                tempbx |= SetInSlaveMode;
        	if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
          	    if(tempbx & SetCRT2ToTV) {
            		if(!(tempbx & SetNotSimuMode))
			    SiS_Pr->SiS_SetFlag |= TVSimuMode;
          	    }
        	}
      	    }
    	}
	
	if(SiS_Pr->SiS_CHOverScan) {
    	   if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
      		temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x35);
      		if((temp & TVOverScan) || (SiS_Pr->SiS_CHOverScan == 1) )
		      tempbx |= SetCHTVOverScan;
    	   }
	   if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
      		temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x79);
      		if( (temp & 0x80) || (SiS_Pr->SiS_CHOverScan == 1) )
		      tempbx |= SetCHTVOverScan;
    	   }
	}
  }
d4293 8
a4300 16
  if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
#ifdef SIS300
     	if((HwDeviceExtension->jChipType==SIS_630) ||
           (HwDeviceExtension->jChipType==SIS_730)) {
	   	if(ROMAddr && SiS_Pr->SiS_UseROM) {
			OutputSelect = ROMAddr[0xfe];
                }
           	if(!(OutputSelect & EnablePALMN))
             		SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x35,0x3F);
           	if(tempbx & SetCRT2ToTV) {
              		if(tempbx & SetPALTV) {
                  		temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x35);
                  		if(temp & EnablePALM) tempbx &= (~SetPALTV);
             		}
          	}
      	}
d4302 8
a4309 17
#ifdef SIS315H
     	if(HwDeviceExtension->jChipType >= SIS_315H) {
	        if(ROMAddr && SiS_Pr->SiS_UseROM) {
		    OutputSelect = ROMAddr[0xf3];
		    if(HwDeviceExtension->jChipType == SIS_330) {
			OutputSelect = ROMAddr[0x11b];
		    }
                }
		if(!(OutputSelect & EnablePALMN))
        		SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0x3F);
   		if(tempbx & SetCRT2ToTV) {
    			if(tempbx & SetPALTV) {
               			temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
               			if(temp & EnablePALM) tempbx &= (~SetPALTV);
              		}
        	}
  	}
d4311 25
a4335 13
  }
  
  /* PALM/PALN on Chrontel 7019 */
  SiS_Pr->SiS_CHPALM = SiS_Pr->SiS_CHPALN = FALSE;
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
  	if(tempbx & SetCRT2ToTV) {
    		if(tempbx & SetPALTV) {
        		temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
        		if(temp & EnablePALM)      SiS_Pr->SiS_CHPALM = TRUE;
			else if(temp & EnablePALN) SiS_Pr->SiS_CHPALN = TRUE;
        	}
        }
  }
d4337 24
a4360 1
  SiS_Pr->SiS_VBInfo = tempbx;
d4362 23
a4384 3
  if(HwDeviceExtension->jChipType == SIS_630) {
       SiS_WhatIsThis(SiS_Pr, SiS_Pr->SiS_VBInfo);
  }
d4386 15
a4400 4
#ifdef TWDEBUG
#ifdef LINUX_KERNEL
  printk(KERN_DEBUG "sisfb: (VBInfo= 0x%04x, SetFlag=0x%04x)\n", 
      SiS_Pr->SiS_VBInfo, SiS_Pr->SiS_SetFlag);
d4402 9
a4410 3
#ifdef LINUX_XF86
  xf86DrvMsgVerb(0, X_PROBED, 3, "(init301: VBInfo=0x%04x, SetFlag=0x%04x)\n", 
      SiS_Pr->SiS_VBInfo, SiS_Pr->SiS_SetFlag);
d4412 28
d4441 1
d4443 1
a4443 20
#if 0  /* TW: Incomplete! (But does not seem to be required) */
  if(HwDeviceExtension->jChipType < SIS_315H) {
     /* TW: From A901/630+301B BIOS */
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
         if(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13) & 0x80)
     }
     if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
         if(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13) & 0x80)
	     if( [si] == 3) ModeIdIndex = 0x3f2b;
	 }
     }
     SiS_SetRegAND(SiS_Pr->SiS_P3d4, 0x31, 0xF7);
     if(ModeNo == 0x13) bp+4 = 0x03;
  } else {
     /* From 650/301LVx BIOS: */
     SiS_SetRegAND(SiS_Pr->SiS_P3d4, 0x31, 0xF7);
     if(ModeNo == 0x13) bp+4 = 0x03;
     else bp+4 = ModeNo;
  }
#endif
d4445 10
a4454 1
  /* TW: 630/301B and 650/301 (not 301LV!) BIOSes do more here, but this seems for DOS mode */
d4456 1
a4456 1
}
d4458 9
a4466 5
void
SiS_WhatIsThis(SiS_Private *SiS_Pr, USHORT myvbinfo)
{
   unsigned long eax, temp;
   unsigned short temp1;
d4468 1
a4468 1
   if(!(SiS_Pr->SiS_ChSW)) return;
d4470 15
a4484 23
#ifndef LINUX_XF86
   SiS_SetReg4(0xcf8,0x80000874);
   eax = SiS_GetReg3(0xcfc);
#else
   eax = pciReadLong(0x00000800, 0x74);
#endif
   eax &= 0xFFFF;
   temp = eax;
   eax += 0x3c;
   temp1 = SiS_GetReg4((USHORT)eax);
   temp1 &= 0xFEFF;
   SiS_SetReg5((USHORT)eax, temp1);
   temp1 = SiS_GetReg4((USHORT)eax);
   eax = temp;
   eax += 0x3a;
   temp1 = SiS_GetReg4((USHORT)eax);
   temp1 &= 0xFEFF;
   if(!(myvbinfo & SetCRT2ToTV)) {
      temp1 |= 0x0100;
   }
   SiS_SetReg5((USHORT)eax, temp1);
   temp1 = SiS_GetReg4((USHORT)eax);
}
d4486 7
a4492 9
void
SiS_GetRAMDAC2DATA(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex,PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT tempax,tempbx,temp;
  USHORT temp1,modeflag=0,tempcx;
  USHORT StandTableIndex,CRT1Index;
  USHORT ResInfo,DisplayType;
  const  SiS_LVDSCRT1DataStruct *LVDSCRT1Ptr = NULL;
d4494 1
a4494 2
  SiS_Pr->SiS_RVBHCMAX  = 1;
  SiS_Pr->SiS_RVBHCFACT = 1;
d4496 1
a4496 1
  if(ModeNo <= 0x13){
d4498 1
a4498 5
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
    	StandTableIndex = SiS_GetModePtr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex);
    	tempax = SiS_Pr->SiS_StandTable[StandTableIndex].CRTC[0];
    	tempbx = SiS_Pr->SiS_StandTable[StandTableIndex].CRTC[6];
	temp1 = SiS_Pr->SiS_StandTable[StandTableIndex].CRTC[7];
d4500 7
a4506 1
  } else {
d4508 1
a4508 55
     if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) ) {

    	temp = SiS_GetLVDSCRT1Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
			RefreshRateTableIndex,&ResInfo,&DisplayType);

    	if(temp == 0)  return;

    	switch(DisplayType) {
    		case 0 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_1;		break;
    		case 1 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1;          break;
    		case 2 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_1;         break;
    		case 3 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_1_H;         break;
    		case 4 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1_H;        break;
    		case 5 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_1_H;       break;
    		case 6 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_2;           break;
    		case 7 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_2;          break;
    		case 8 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_2;         break;
    		case 9 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_2_H;         break;
    		case 10: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_2_H;        break;
    		case 11: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_2_H;       break;
		case 12: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1XXXxXXX_1;           break;
		case 13: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1XXXxXXX_1_H;         break;
		case 14: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11400x1050_1;         break;
		case 15: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11400x1050_1_H;       break;
		case 16: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11400x1050_2;         break;
		case 17: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11400x1050_2_H;       break;
    		case 18: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1UNTSC;               break;
    		case 19: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1ONTSC;               break;
    		case 20: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1UPAL;                break;
    		case 21: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1OPAL;                break;
    		case 22: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1320x480_1;           break;
		case 23: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x600_1;          break;
    		case 24: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x600_1_H;        break;
    		case 25: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x600_2;          break;
    		case 26: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x600_2_H;        break;
    		case 27: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11152x768_1;          break;
    		case 28: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11152x768_1_H;        break;
    		case 29: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11152x768_2;          break;
    		case 30: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11152x768_2_H;        break;
		case 36: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11600x1200_1;         break;
		case 37: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11600x1200_1_H;       break;
		case 38: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11600x1200_2;         break;
		case 39: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11600x1200_2_H;       break;
		case 99: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1OPAL;                break;
		default: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1;          break;
    	}
	tempax = (LVDSCRT1Ptr+ResInfo)->CR[0];
	tempax |= (LVDSCRT1Ptr+ResInfo)->CR[14] << 8;
	tempax &= 0x03FF;
    	tempbx = (LVDSCRT1Ptr+ResInfo)->CR[6];
    	tempcx = (LVDSCRT1Ptr+ResInfo)->CR[13] << 8;
    	tempcx &= 0x0100;
    	tempcx <<= 2;
    	tempbx |= tempcx;
	temp1  = (LVDSCRT1Ptr+ResInfo)->CR[7];
d4510 4
a4513 1
    } else {
d4515 1
a4515 14
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	CRT1Index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;
#if 0   /* Not any longer */	
	if(HwDeviceExtension->jChipType < SIS_315H)  CRT1Index &= 0x3F;
#endif	
	tempax = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[0];
	tempax |= SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14] << 8;
        tempax &= 0x03FF;
    	tempbx = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[6];
    	tempcx = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[13] << 8;
    	tempcx &= 0x0100;
    	tempcx <<= 2;
    	tempbx |= tempcx;
	temp1  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[7];
d4517 1
a4517 1
    }
d4519 12
a4530 1
  }
d4532 1
a4532 4
  if(temp1 & 0x01) tempbx |= 0x0100;
  if(temp1 & 0x20) tempbx |= 0x0200;
  
  tempax += 5;
d4534 1
a4534 4
  /* Charx8Dot is no more used (and assumed), so we set it */
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      modeflag |= Charx8Dot;
  }
d4536 4
a4539 2
  if(modeflag & Charx8Dot) tempax *= 8;
  else                     tempax *= 9;
d4541 1
a4541 2
  /* TW: From 650/301LVx 1.10.6s */
  if(modeflag & HalfDCLK)  tempax <<= 1;
d4543 1
a4543 4
  SiS_Pr->SiS_VGAHT = SiS_Pr->SiS_HT = tempax;
  tempbx++;
  SiS_Pr->SiS_VGAVT = SiS_Pr->SiS_VT = tempbx;
}
d4545 1
a4545 8
void
SiS_UnLockCRT2(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr)
{
  if(HwDeviceExtension->jChipType >= SIS_315H)
    	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2f,0x01);
  else
    	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x24,0x01);
}
d4547 1
a4547 8
void
SiS_LockCRT2(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr)
{
  if(HwDeviceExtension->jChipType >= SIS_315H)
    	SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2F,0xFE);
  else
     	SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x24,0xFE);
}
d4549 1
a4549 5
void
SiS_EnableCRT2(SiS_Private *SiS_Pr)
{
  SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
}
d4551 6
a4556 9
/* Checked against all BIOSes */
void
SiS_DisableBridge(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr)
{
#ifdef SIS315H
  USHORT tempah,pushax=0;
#endif
  USHORT temp=0;
  UCHAR *ROMAddr = HwDeviceExtension->pjVirtualRomBase;
d4558 6
a4563 1
  if (SiS_Pr->SiS_IF_DEF_LVDS == 0) {
d4565 1
a4565 1
      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {   /* ===== TW: For 30xB/LV ===== */
d4567 6
a4572 1
        if(HwDeviceExtension->jChipType < SIS_315H) {
d4574 1
a4574 1
#ifdef SIS300	   /* 300 series */
d4576 6
a4581 1
           if(HwDeviceExtension->jChipType == SIS_300) {  /* New for 300+301LV */
d4583 6
a4588 17
	      if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwDeviceExtension))) {
	         SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xFE,0x00);
		 SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
	      }
	      if(SiS_Is301B(SiS_Pr,BaseAddr)) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,0x3f);
	         SiS_ShortDelay(SiS_Pr,1);
	      }
	      SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);
	      SiS_DisplayOff(SiS_Pr);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	      if( (!(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension))) ||
	          (!(SiS_CR36BIOSWord23d(SiS_Pr,HwDeviceExtension))) ) {
	         SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 2);
                 SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,0xFB,0x04);
	      }
d4590 1
a4590 1
	   } else {
d4592 1
a4592 21
	      if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwDeviceExtension))) {
	         SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,0xF7,0x08);
	         SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
	      }
	      if(SiS_Is301B(SiS_Pr,BaseAddr)) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,0x3f);
	         SiS_ShortDelay(SiS_Pr,1);
	      }
	      SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);
	      SiS_DisplayOff(SiS_Pr);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	      SiS_UnLockCRT2(SiS_Pr,HwDeviceExtension,BaseAddr);
	      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x80);
	      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40);
	      if( (!(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension))) ||
	          (!(SiS_CR36BIOSWord23d(SiS_Pr,HwDeviceExtension))) ) {
	         SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 2);
                 SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,0xFB,0x04);
	      }
	   }
d4594 1
a4594 1
#endif  /* SIS300 */
d4596 1
a4596 1
        } else {
d4598 11
a4608 1
#ifdef SIS315H	   /* 310/325 series */
d4610 9
a4618 1
           if(IS_SIS650740) {		/* 650, 740 */
d4620 6
a4625 3
#if 0
	      if(SiS_GetReg1(SiS_Pr->SiS_Part4Port,0x00) != 1) return;	/* From 1.10.7w */
#endif
d4627 12
a4638 1
              if(SiS_Pr->SiS_VBType & (VB_SIS30xLV|VB_SIS30xNEW)) {
d4640 1
a4640 7
	         if(!(SiS_IsM650or651(SiS_Pr,HwDeviceExtension, BaseAddr))) {
	            tempah = 0xef;
	            if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
	               tempah = 0xf7;
                    }
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x4c,tempah);
	         }
d4642 1
a4642 1
	         SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x30,0x00);
d4644 1
a4644 5
	         if(!(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr))) {
	     	      SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xFE,0x00);
	         } else if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
		      SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xFE,0x00);
                 }
d4646 6
a4651 1
	         SiS_SetReg3(SiS_Pr->SiS_P3c6,0x00);
d4653 2
a4654 1
                 pushax = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x06);
d4656 1
a4656 1
	         SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
d4658 5
a4662 1
              }
d4664 3
a4666 10
              if(SiS_Pr->SiS_VBType & (VB_SIS301B|VB_SIS302B)) {
	         tempah = 0x3f;
	         if(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr)) {
	            tempah = 0x7f;
	            if(!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) {
		       tempah = 0xbf;
                    }
	         }
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,tempah);
              }
d4668 7
a4674 1
              if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
d4676 4
a4679 10
	         if(SiS_Pr->SiS_VBType & (VB_SIS301B|VB_SIS302B)) {
		    SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1E,0xDF);
		    SiS_DisplayOff(SiS_Pr);
		    SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
		 } else {
	            SiS_DisplayOff(SiS_Pr);
	            SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 2);
	            SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1E,0xDF);
		 }
d4681 5
a4685 1
	      } else {
d4687 13
a4699 21
	         if(SiS_Pr->SiS_VBType & (VB_SIS301B|VB_SIS302B)) {
		    if(!(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr))) {
		       SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xdf);
		       SiS_DisplayOff(SiS_Pr);
		    }
		    SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
		    SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
		    temp = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00);
                    SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	            SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	            SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x00,temp);
		 } else {
                    SiS_DisplayOff(SiS_Pr);
	            SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	            SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 2);
	            SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	            temp = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00);
                    SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	            SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	            SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x00,temp);
		 }
d4701 3
a4703 1
	      }
d4705 9
a4713 1
	      if(SiS_Pr->SiS_VBType & (VB_SIS30xLV|VB_SIS30xNEW)) {
d4715 16
a4730 8
	         tempah = 0x3f;
	         if(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr)) {
	            tempah = 0x7f;
	            if(!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) {
		       tempah = 0xbf;
                    }
	         }
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,tempah);
d4732 1
a4732 1
	         SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
d4734 1
a4734 3
	         if(!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) {
	            SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xdf);
	         }
d4736 1
a4736 7
	         if(!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) {
	            if(!(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension))) {
	               if(!(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr))) {
		          SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xFD,0x00);
                       }
                    }
	         }
d4738 1
a4738 1
	         SiS_SetReg1(SiS_Pr->SiS_P3c4,0x06,pushax);
d4740 3
a4742 1
  	      }
d4744 7
d4752 1
a4752 1
          } else {		/* 315, 330 */
d4754 1
a4754 16
	     if(SiS_Is301B(SiS_Pr,BaseAddr)) {
	        tempah = 0x3f;
	        if(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr)) {
	           tempah = 0x7f;
	           if(!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) {
		      tempah = 0xbf;
                   }
	        }
	        SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,tempah);
	        if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
	           SiS_DisplayOff(SiS_Pr);
		   SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	        }
	     }
	     if( (!(SiS_Is301B(SiS_Pr,BaseAddr))) ||
	         (!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) ) {
d4756 4
a4759 2
 	 	if( (!(SiS_Is301B(SiS_Pr,BaseAddr))) ||
		    (!(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr))) ) {
d4761 6
a4766 2
	           SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);
	           SiS_DisplayOff(SiS_Pr);
d4768 6
a4773 1
		}
d4775 1
a4775 1
                SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
d4777 5
a4781 1
                SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
d4783 1
a4783 4
	        temp = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00);
                SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	        SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x00,temp);
d4785 32
a4816 1
	     }
d4818 1
a4818 1
	  }    /* 315/330 */
d4820 1
a4820 1
#endif /* SIS315H */
d4822 1
a4822 1
	}
d4824 1
a4824 1
      } else {     /* ============ TW: For 301 ================ */
d4826 16
a4841 6
        if(HwDeviceExtension->jChipType < SIS_315H) {
            if(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension)) {
                SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,0xF0,0x0B);
	        SiS_SetPanelDelay(SiS_Pr, ROMAddr, HwDeviceExtension, 1);
	    }
	}
d4843 1
a4843 2
        SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);           /* disable VB */
        SiS_DisplayOff(SiS_Pr);
d4845 5
a4849 3
        if(HwDeviceExtension->jChipType >= SIS_315H) {
            SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	}
d4851 1
a4851 1
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);                /* disable lock mode */
d4853 1
a4853 8
	if(HwDeviceExtension->jChipType >= SIS_315H) {
            temp = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00);
            SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	    SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
	    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x00,temp);
	} else {
            SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);            /* disable CRT2 */
	}
d4855 1
a4855 1
      }
d4857 1
a4857 1
  } else {     /* ============ TW: For LVDS =============*/
d4859 1
a4859 1
    if(HwDeviceExtension->jChipType < SIS_315H) {
d4861 27
a4887 1
#ifdef SIS300	/* 300 series */
d4889 1
a4889 3
	if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
	    SiS_SetCH700x(SiS_Pr,0x090E);
	}
d4891 21
a4911 3
	if(HwDeviceExtension->jChipType == SIS_730) {
	   if(!(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x11) & 0x08)) {
	      SiS_WaitVBRetrace(SiS_Pr,HwDeviceExtension);
d4913 11
a4923 3
	   if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwDeviceExtension))) {
	      SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,0xF7,0x08);
	      SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
a4924 2
	} else {
	   if(!(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x11) & 0x08)) {
d4926 5
a4930 3
	      if(!(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13) & 0x40)) {
  
  	          if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwDeviceExtension))) {
d4932 50
a4981 1
                     SiS_WaitVBRetrace(SiS_Pr,HwDeviceExtension);
d4983 1
a4983 3
		     if(!(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x06) & 0x1c)) {
		         SiS_DisplayOff(SiS_Pr);
	             }
d4985 1
a4985 6
	             SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,0xF7,0x08);
	             SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
                  }
              }
	   }
	}
d4987 5
a4991 1
	SiS_DisplayOff(SiS_Pr);
d4993 9
a5001 1
	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
d5003 1
a5003 4
	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	SiS_UnLockCRT2(SiS_Pr,HwDeviceExtension,BaseAddr);
	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x80);
	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40);
d5005 12
a5016 5
	if( (!(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension))) ||
	              (!(SiS_CR36BIOSWord23d(SiS_Pr,HwDeviceExtension))) ) {
		SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 2);
		SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,0xFB,0x04);
	}
d5018 1
a5018 1
#endif  /* SIS300 */
d5020 3
d5024 6
d5031 5
a5035 1
#ifdef SIS315H	/* 310/325 series */
d5037 8
a5044 8
	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
		if(!(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr))) {
			SiS_Chrontel701xBLOff(SiS_Pr);
			SiS_Chrontel701xOff(SiS_Pr);
		} else if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
			SiS_Chrontel701xBLOff(SiS_Pr);
			SiS_Chrontel701xOff(SiS_Pr);
		}
d5046 1
a5046 6
		if(!(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr))) {
			SiS_SetCH701x(SiS_Pr,0x0149);
		} else if(SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwDeviceExtension, BaseAddr))  {
			SiS_SetCH701x(SiS_Pr,0x0149);
		}
	}
d5048 19
a5066 4
	if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
		SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,0xF7,0x08);
		SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
	}
d5068 1
a5068 7
	if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
		SiS_DisplayOff(SiS_Pr);
	} else if(!(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr))) {
		SiS_DisplayOff(SiS_Pr);
	} else if(!(SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwDeviceExtension, BaseAddr))) {
		SiS_DisplayOff(SiS_Pr);
	}
d5070 9
a5078 7
	if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
		SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	} else if(!(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr))) {
		SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	} else if(!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) {
		SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	}
d5080 9
a5088 1
	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
d5090 8
a5097 7
	if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
		SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	} else if(!(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr))) {
		SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	} else if(!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) {
		SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	}
d5099 4
a5102 7
	if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	        if(SiS_CRT2IsLCD(SiS_Pr, BaseAddr,HwDeviceExtension)) {
			SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xdf);
		}
	} else if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
		SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xdf);
	}
d5104 1
a5104 7
	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	    	if(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr)) {
			SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xff);
		} else {
			SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
		}
	}
d5106 3
a5108 1
	SiS_UnLockCRT2(SiS_Pr,HwDeviceExtension, BaseAddr);
d5110 12
a5121 7
	if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
		SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0xf7);
	} else if(!(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr))) {
		SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0xf7);
	} else if(!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) {
		SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0xf7);
	}
d5123 5
a5127 8
#if 0  /* TW: BIOS code makes no sense */
       if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
           if(!(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr))) {
	        if(SiS_WeHaveBacklightCtrl(SiS_Pr,HwDeviceExtension, BaseAddr)) {
		  /* Nothing there! */
		}
           }
       }
d5129 5
a5133 8
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
		if(SiS_CRT2IsLCD(SiS_Pr, BaseAddr,HwDeviceExtension)) {
			if(SiS_WeHaveBacklightCtrl(SiS_Pr,HwDeviceExtension, BaseAddr)) {
				SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 2);
				SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,0xFB,0x04);
			}
		}
       }
d5135 5
a5139 1
#endif  /* SIS315H */
d5141 1
a5141 1
    }  /* 310 series */
d5143 2
a5144 1
  }  /* LVDS */
d5146 1
a5146 1
}
d5148 2
a5149 10
/* TW: Checked against all BIOSes */
void
SiS_EnableBridge(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, USHORT BaseAddr)
{
  USHORT temp=0,tempah;
#ifdef SIS315H
  USHORT temp1,pushax=0;
  BOOLEAN delaylong = FALSE;
#endif
  UCHAR *ROMAddr = HwDeviceExtension->pjVirtualRomBase;
d5151 1
a5151 1
  if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
d5153 3
a5155 1
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {   /* TW: ====== For 301B et al  ====== */
d5157 7
a5163 1
      if(HwDeviceExtension->jChipType < SIS_315H) {
d5165 1
a5165 1
#ifdef SIS300     /* 300 series */
d5167 2
a5168 1
         if(HwDeviceExtension->jChipType == SIS_300) {
d5170 1
a5170 32
	    if(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension)) {
	       SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
	       if(!(SiS_CR36BIOSWord23d(SiS_Pr,HwDeviceExtension))) {
	          SiS_SetPanelDelay(SiS_Pr, ROMAddr, HwDeviceExtension, 0);
	       }
	    }
	    temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x32) & 0xDF;             /* lock mode */
            if(SiS_BridgeInSlave(SiS_Pr)) {
               tempah = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
               if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
            }
            SiS_SetReg1(SiS_Pr->SiS_P3c4,0x32,temp);
	    SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1F,0x20);        /* enable VB processor */
	    if(SiS_Is301B(SiS_Pr,BaseAddr)) {
               SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,0xC0);
	       SiS_DisplayOn(SiS_Pr);
	    } else {
	       SiS_VBLongWait(SiS_Pr);
	       SiS_DisplayOn(SiS_Pr);
	       SiS_VBLongWait(SiS_Pr);
	    }
	    if(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension)) {
	       if(!(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13) & 0x40)) {
		  if(!(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x16) & 0x10)) {
		     if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwDeviceExtension))) {
		           SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 1);
                     }
		     SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xfe,0x01);
		  }
               }
	    }
d5172 3
a5174 1
	 } else {
d5176 7
a5182 42
	    if(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension)) {
	       SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x11,0xFB);
	       if(!(SiS_CR36BIOSWord23d(SiS_Pr,HwDeviceExtension))) {
	          SiS_SetPanelDelay(SiS_Pr, ROMAddr, HwDeviceExtension, 0);
	       }
	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);   /* Enable CRT2 */
/*	       DoSomeThingPCI_On(SiS_Pr) */
               SiS_DisplayOn(SiS_Pr);
	       SiS_UnLockCRT2(SiS_Pr,HwDeviceExtension, BaseAddr);
	       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x02,0xBF);
	       if(SiS_BridgeInSlave(SiS_Pr)) {
      		  SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x01,0x1F);
      	       } else {
      		  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x01,0x1F,0x40);
               }
	       if(!(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13) & 0x40)) {
	           if(!(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x16) & 0x10)) {
		       if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwDeviceExtension))) {
		           SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 1);
                       }
		       SiS_WaitVBRetrace(SiS_Pr,HwDeviceExtension);
                       SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,0xF7,0x00);
                   }
	       }
            } else {
	      temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x32) & 0xDF;             /* lock mode */
              if(SiS_BridgeInSlave(SiS_Pr)) {
                 tempah = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
                 if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
              }
              SiS_SetReg1(SiS_Pr->SiS_P3c4,0x32,temp);
	      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
	      SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1F,0x20);        /* enable VB processor */
	      if(SiS_Is301B(SiS_Pr,BaseAddr)) {
                 SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,0xC0);
	         SiS_DisplayOn(SiS_Pr);
	      } else {
	         SiS_VBLongWait(SiS_Pr);
	         SiS_DisplayOn(SiS_Pr);
	         SiS_VBLongWait(SiS_Pr);
	      }
	    }
d5184 2
a5185 2
         }
#endif /* SIS300 */
d5187 13
d5201 11
d5213 1
a5213 1
#ifdef SIS315H    /* 310/325 series */
d5215 2
a5216 1
	 if(IS_SIS650740) {		/* 650, 740 */
d5218 2
a5219 2
#if 0
	    if(SiS_GetReg1(SiS_Pr->SiS_Part4Port,0x00) != 1) return;	/* From 1.10.7w */
d5222 6
a5227 1
	    if(SiS_Pr->SiS_VBType & (VB_SIS30xLV|VB_SIS30xNEW)) {
d5229 8
a5236 7
               if(!(SiS_IsM650or651(SiS_Pr,HwDeviceExtension, BaseAddr))) {
	          tempah = 0x10;
	          if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
	             tempah = 0x08;
                  }
	          SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x4c,tempah);
	       }
d5238 4
a5241 1
	       SiS_SetReg3(SiS_Pr->SiS_P3c6,0x00);
d5243 5
a5247 1
	       SiS_DisplayOff(SiS_Pr);
d5249 9
a5257 1
	       pushax = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x06);
d5259 12
a5270 8
	       if( (SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) ||
	           (SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension)) ) {
                   if(!(SiS_GetReg1(SiS_Pr->SiS_Part4Port,0x26) & 0x02)) {
	              SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		      SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		      SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
	           }
	       }
d5272 1
a5272 13
	       if(!(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x31) & 0x40)) {
                  SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
	  	  SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		  SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		  SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		  SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		  SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		  SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		  SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		  SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		  SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		  delaylong = TRUE;
	       }
d5274 5
a5278 1
	    }
d5280 1
a5280 7
	    if(!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) {
               temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x32) & 0xDF;
	       if(SiS_BridgeInSlave(SiS_Pr)) {
                  tempah = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
                  if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
               }
               SiS_SetReg1(SiS_Pr->SiS_P3c4,0x32,temp);
d5282 1
a5282 11
	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);                   /* enable CRT2 */
	       if(SiS_Pr->SiS_VBType & (VB_SIS301B|VB_SIS302B)) {
	          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
		  temp = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x2e);
		  if(!(temp & 0x80)) {
		     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x80);
		  }
	       } else {
	          SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 2);
	       }
	    }
d5284 2
a5285 3
	    if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
	          SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x20);
	    }
d5287 4
a5290 1
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1f,0x20);
d5292 2
a5293 6
	    if(SiS_Pr->SiS_VBType & (VB_SIS301B|VB_SIS302B)) {
	       temp = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x2e);
	       if(!(temp & 0x80)) {
		  SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x80);
	       }
	    }
d5295 9
a5303 12
	    tempah = 0xc0;
	    if(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr)) {
	       tempah = 0x80;
	       if(!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) {
	          tempah = 0x40;
               }
	    }
            SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,tempah);

	    if(SiS_Pr->SiS_VBType & (VB_SIS301B|VB_SIS302B)) {
               SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
	    }
d5305 1
a5305 1
	    if(SiS_Pr->SiS_VBType & (VB_SIS30xLV|VB_SIS30xNEW)) {
d5307 6
a5312 1
	       SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x80);
d5314 42
a5355 24
	       if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwDeviceExtension, BaseAddr))) {
	          if( (SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) ||
	              ((SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension))) ) {
		    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
		    if(delaylong) {
			SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
			SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
			SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
			SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
			SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
			SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
			SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
			SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
			SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
			SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 3);
d5357 1
a5357 32
                    SiS_WaitVBRetrace(SiS_Pr,HwDeviceExtension);
		    SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xfe,0x01);
	         }
	      }

	      SiS_SetReg1(SiS_Pr->SiS_P3c4,0x06,pushax);
	      SiS_DisplayOn(SiS_Pr);
	      SiS_SetReg3(SiS_Pr->SiS_P3c6,0xff);

	      if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwDeviceExtension, BaseAddr))) {
	          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
	      }

              SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x30,0x00);
	      SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x27,0x0c);
	      SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x30,0x20);
	      SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x31,0x05);
	      SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x32,0x60);
	      SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x33,0x00);
	      SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x34,0x10);
	      SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x30,0x40);

	  }


         } else {		/* 315, 330 */

	   if(!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) {
	      temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x32) & 0xDF;
	      if(SiS_BridgeInSlave(SiS_Pr)) {
                 tempah = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
                 if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
a5358 7
              SiS_SetReg1(SiS_Pr->SiS_P3c4,0x32,temp);

	      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);                   /* enable CRT2 */

	      temp=SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x2E);
              if (!(temp & 0x80))
                 SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);
d5360 3
d5364 2
a5365 1
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1f,0x20);
d5367 18
a5384 12
	   if(SiS_Is301B(SiS_Pr,BaseAddr)) {

	      temp=SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x2E);
              if (!(temp & 0x80))
                 SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);

	      tempah = 0xc0;
	      if(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr)) {
	         tempah = 0x80;
	         if(!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) {
	            tempah = 0x40;
                 }
a5385 4
              SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,tempah);

	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);

d5387 17
a5403 5
	   
	      SiS_VBLongWait(SiS_Pr);
              SiS_DisplayOn(SiS_Pr);
	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7F);
              SiS_VBLongWait(SiS_Pr);
d5405 10
d5416 7
d5424 2
a5425 1
	 }   /* 315, 330 */
d5427 1
a5427 1
#endif /* SIS315H */
d5429 1
a5429 1
      }
d5431 1
a5431 1
    } else {	/* ============  TW: For 301 ================ */
d5433 20
a5452 6
       if(HwDeviceExtension->jChipType < SIS_315H) {
            if(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension)) {
                SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,0xF0,0x0B);
	        SiS_SetPanelDelay(SiS_Pr, ROMAddr, HwDeviceExtension, 0);
	    }
       }
d5454 10
a5463 6
       temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x32) & 0xDF;          /* lock mode */
       if(SiS_BridgeInSlave(SiS_Pr)) {
         tempah = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
         if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
       }
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x32,temp);
d5465 12
a5476 1
       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);                  /* enable CRT2 */
d5478 1
a5478 5
       if(HwDeviceExtension->jChipType >= SIS_315H) {
         temp = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x2E);
         if(!(temp & 0x80))
           SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);         /* BVBDOENABLE=1 */
       }
d5480 1
a5480 1
       SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1F,0x20);     /* enable VB processor */
d5482 1
a5482 6
       SiS_VBLongWait(SiS_Pr);
       SiS_DisplayOn(SiS_Pr);
       if(HwDeviceExtension->jChipType >= SIS_315H) {
           SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
       }
       SiS_VBLongWait(SiS_Pr);
d5484 9
a5492 6
       if(HwDeviceExtension->jChipType < SIS_315H) {
            if(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension)) {
	        SiS_SetPanelDelay(SiS_Pr, ROMAddr, HwDeviceExtension, 1);
                SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,0xF0,0x03);
	    }
       }
d5494 23
a5516 1
    }
d5518 3
a5520 1
  } else {   /* =================== TW: For LVDS ================== */
d5522 1
a5522 1
    if(HwDeviceExtension->jChipType < SIS_315H) {
d5524 4
a5527 1
#ifdef SIS300    /* 300 series */
d5529 7
a5535 11
      if(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension)) {
         if(HwDeviceExtension->jChipType == SIS_730) {
	    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 1);
	    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 1);
	    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 1);
	 }
         SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x11,0xFB);
	 if(!(SiS_CR36BIOSWord23d(SiS_Pr,HwDeviceExtension))) {
	    SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 0);
	 }
      }
d5537 3
a5539 9
      SiS_EnableCRT2(SiS_Pr);
      SiS_DisplayOn(SiS_Pr);
      SiS_UnLockCRT2(SiS_Pr,HwDeviceExtension, BaseAddr);
      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x02,0xBF);
      if(SiS_BridgeInSlave(SiS_Pr)) {
      	SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x01,0x1F);
      } else {
      	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x01,0x1F,0x40);
      }
d5541 1
a5541 5
      if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
        if(!(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension))) {
	        SiS_SetCH700x(SiS_Pr,0x0B0E);
        }
      }
d5543 2
a5544 12
      if(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension)) {
          if(!(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13) & 0x40)) {
              if(!(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x16) & 0x10)) {
	          if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwDeviceExtension))) {
			SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 1);
        		SiS_SetPanelDelay(SiS_Pr,ROMAddr, HwDeviceExtension, 1);
		  }
		  SiS_WaitVBRetrace(SiS_Pr,HwDeviceExtension);
                  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x11,0xF7);
              }
	  }
      }
d5546 2
a5547 1
#endif  /* SIS300 */
d5549 5
a5553 1
    } else {
d5555 1
a5555 1
#ifdef SIS315H    /* 310/325 series */
d5557 1
a5557 6
#if 0  /* BIOS code makes no sense */
       if(SiS_IsVAMode()) {
          if(SiS_IsLCDOrLCDA()) {
	  }
       }
#endif
d5559 7
a5565 6
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	    if(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension)) {
	     	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x11,0xFB);
	        SiS_SetPanelDelay(SiS_Pr, ROMAddr, HwDeviceExtension, 0);
            }
       }
d5567 3
a5569 2
       SiS_EnableCRT2(SiS_Pr);
       SiS_UnLockCRT2(SiS_Pr,HwDeviceExtension, BaseAddr);
d5571 18
a5588 1
       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0xf7);
d5590 19
a5608 5
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
          temp = SiS_GetCH701x(SiS_Pr,0x66);
	  temp &= 0x20;
	  SiS_Chrontel701xBLOff(SiS_Pr);
       }
d5610 5
a5614 1
       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
d5616 4
a5619 3
       temp1 = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x2E);
       if (!(temp1 & 0x80))
           SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);
d5621 5
a5625 5
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
           if(temp) {
	       SiS_Chrontel701xBLOn(SiS_Pr);
	   }
       }
d5627 22
a5648 3
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
           if(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension)) {
	   	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x20);
d5650 4
a5653 3
       } else if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
           SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x20);
       }
d5655 1
a5655 3
       if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwDeviceExtension, BaseAddr))) {
           SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
       }
d5657 11
a5667 1
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
d5669 4
a5672 9
       		if(SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwDeviceExtension, BaseAddr)) {
           		SiS_Chrontel701xOn(SiS_Pr,HwDeviceExtension, BaseAddr);
         	}

         	if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
           		SiS_ChrontelDoSomething1(SiS_Pr,HwDeviceExtension, BaseAddr);
         	} else if(SiS_IsLCDOrLCDA(SiS_Pr,HwDeviceExtension, BaseAddr)) {
           		SiS_ChrontelDoSomething1(SiS_Pr,HwDeviceExtension, BaseAddr);
        	}
d5674 10
a5683 1
       }
d5685 2
a5686 20
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
       	 	if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwDeviceExtension, BaseAddr))) {
 	   		if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
	            		SiS_Chrontel701xBLOn(SiS_Pr);
	            		SiS_ChrontelDoSomething4(SiS_Pr,HwDeviceExtension, BaseAddr);
           		} else if(SiS_IsLCDOrLCDA(SiS_Pr,HwDeviceExtension, BaseAddr))  {
/*	      			if(!SiS_WeHaveBacklightCtrl(SiS_Pr,HwDeviceExtension, BaseAddr)) {  */ /* TW: makes no sense */
            				SiS_Chrontel701xBLOn(SiS_Pr);
            				SiS_ChrontelDoSomething4(SiS_Pr,HwDeviceExtension, BaseAddr);
/*            			}   */
	   		}
       		}
       } else if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
       		if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwDeviceExtension, BaseAddr))) {
			if(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension)) {
				SiS_SetPanelDelay(SiS_Pr, ROMAddr, HwDeviceExtension, 1);
				SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x11,0xF7);
			}
		}
       }
d5688 10
a5697 1
#endif  /* SIS315H */
d5699 1
a5699 1
    } /* 310 series */
d5701 5
a5705 1
  }  /* LVDS */
d5707 2
a5708 1
}
d5710 25
a5734 4
void
SiS_SiS30xBLOn(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT  BaseAddr = (USHORT)HwDeviceExtension->ulIOAddress;
d5736 19
a5754 10
  /* TW: Switch on LCD backlight on SiS30xLV */
  if( (SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) ||
      (SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension)) ) {
    if(!(SiS_GetReg1(SiS_Pr->SiS_Part4Port,0x26) & 0x02)) {
	SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
	SiS_WaitVBRetrace(SiS_Pr,HwDeviceExtension);
    }
    if(!(SiS_GetReg1(SiS_Pr->SiS_Part4Port,0x26) & 0x01)) {
        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
    }
a5755 1
}
d5757 8
a5764 4
void
SiS_SiS30xBLOff(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT  BaseAddr = (USHORT)HwDeviceExtension->ulIOAddress;
d5766 5
a5770 4
  /* TW: Switch off LCD backlight on SiS30xLV */
  if( (!(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr))) ||
      (SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) ) {
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xFE,0x00);
d5773 2
a5774 8
  if(!(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr))) {
      if(!(SiS_CRT2IsLCD(SiS_Pr,BaseAddr,HwDeviceExtension))) {
          if(!(SiS_IsDualEdge(SiS_Pr,HwDeviceExtension, BaseAddr))) {
  	      SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xFD,0x00);
          }
      }
  }
}
d5776 1
a5776 5
BOOLEAN
SiS_CR36BIOSWord23b(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT temp,temp1;
  UCHAR *ROMAddr;
d5778 7
a5784 9
  if((ROMAddr = (UCHAR *)HwDeviceExtension->pjVirtualRomBase) && SiS_Pr->SiS_UseROM) {
     temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x36) & 0xff;
     temp >>= 4;
     temp = 1 << temp;
     temp1 = (ROMAddr[0x23c] << 8) | ROMAddr[0x23b];
     if(temp1 & temp) return(1);
     else return(0);
  } else {
     return(0);
d5786 2
a5787 7
}

BOOLEAN
SiS_CR36BIOSWord23d(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT temp,temp1;
  UCHAR *ROMAddr;
d5789 6
a5794 7
  if((ROMAddr = (UCHAR *)HwDeviceExtension->pjVirtualRomBase) && SiS_Pr->SiS_UseROM) {
     temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x36) & 0xff;
     temp >>= 4;
     temp = 1 << temp;
     temp1 = (ROMAddr[0x23e] << 8) | ROMAddr[0x23d];
     if(temp1 & temp) return(1);
     else return(0);
d5796 3
a5798 1
     return(0);
a5799 1
}
d5801 1
a5801 8
void
SiS_SetPanelDelay(SiS_Private *SiS_Pr, UCHAR *ROMAddr, PSIS_HW_DEVICE_INFO HwDeviceExtension,
                  USHORT DelayTime)
{
  USHORT PanelID, DelayIndex, Delay;
#ifdef SIS300
  USHORT temp;
#endif
d5803 7
a5809 1
  if(HwDeviceExtension->jChipType < SIS_315H) {
d5811 2
a5812 1
#ifdef SIS300
d5814 5
a5818 1
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {			/* 300 series, LVDS */
d5820 3
a5822 27
	  PanelID = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x36);

	  DelayIndex = PanelID >> 4;

	  if((DelayTime >= 2) && ((PanelID & 0x0f) == 1))  {
              Delay = 3;
          } else {
              if(DelayTime >= 2) DelayTime -= 2;

              if(!(DelayTime & 0x01)) {
       		  Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[0];
              } else {
       		  Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[1];
              }
	      if((ROMAddr) && (SiS_Pr->SiS_UseROM)) {
                  if(ROMAddr[0x220] & 0x40) {
                      if(!(DelayTime & 0x01)) {
	    	          Delay = (USHORT)ROMAddr[0x225];
                      } else {
	    	          Delay = (USHORT)ROMAddr[0x226];
                      }
                  }
              }
          }
	  SiS_ShortDelay(SiS_Pr,Delay);

      } else {							/* 300 series, 301(B) */
d5824 24
a5847 3
	  PanelID = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x36);
	  temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x18);
          if(!(temp & 0x10))  PanelID = 0x12;
d5849 1
a5849 1
          DelayIndex = PanelID >> 4;
d5851 1
a5851 4
	  if((DelayTime >= 2) && ((PanelID & 0x0f) == 1))  {
              Delay = 3;
          } else {
              if(DelayTime >= 2) DelayTime -= 2;
d5853 28
a5880 16
              if(!(DelayTime & 0x01)) {
       		  Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[0];
              } else {
       		  Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[1];
              }
	      if((ROMAddr) && (SiS_Pr->SiS_UseROM)) {
                  if(ROMAddr[0x220] & 0x40) {
                      if(!(DelayTime & 0x01)) {
	    	          Delay = (USHORT)ROMAddr[0x225];
                      } else {
	    	          Delay = (USHORT)ROMAddr[0x226];
                      }
                  }
              }
          }
	  SiS_ShortDelay(SiS_Pr,Delay);
d5882 6
a5887 1
      }
d5889 1
a5889 1
#endif  /* SIS300 */
d5891 1
a5891 1
   } else {
d5893 12
a5904 1
      if(HwDeviceExtension->jChipType == SIS_330) return;
d5906 1
a5906 1
#ifdef SIS315H
d5908 7
a5914 1
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {			/* 310/325 series, LVDS */
d5916 20
a5935 7
          if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
              PanelID = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x36);
	      DelayIndex = PanelID >> 4;
	      if((DelayTime >= 2) && ((PanelID & 0x0f) == 1))  {
                 Delay = 3;
              } else {
                 if(DelayTime >= 2) DelayTime -= 2;
d5937 1
a5937 17
                 if(!(DelayTime & 0x01)) {
       		     Delay = SiS_Pr->SiS_PanelDelayTblLVDS[DelayIndex].timer[0];
                 } else {
       		     Delay = SiS_Pr->SiS_PanelDelayTblLVDS[DelayIndex].timer[1];
                 }
	         if((ROMAddr) && (SiS_Pr->SiS_UseROM)) {
                    if(ROMAddr[0x13c] & 0x40) {
                        if(!(DelayTime & 0x01)) {
	    	           Delay = (USHORT)ROMAddr[0x17e];
                        } else {
	    	           Delay = (USHORT)ROMAddr[0x17f];
                        }
                    }
                 }
              }
	      SiS_ShortDelay(SiS_Pr,Delay);
	  }
d5939 1
a5939 1
      } else {							/* 310/325 series, 301(B) */
d5941 13
a5953 8
          PanelID = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x36);
	  DelayIndex = PanelID >> 4;
          if(!(DelayTime & 0x01)) {
       		Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[0];
          } else {
       		Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[1];
          }
	  SiS_DDC2Delay(SiS_Pr, Delay * 4);
d5955 8
a5962 1
      }
d5964 20
a5983 1
#endif /* SIS315H */
d5985 8
a5992 1
   }
d5994 17
a6010 1
}
d6012 24
a6035 5
void
SiS_LongDelay(SiS_Private *SiS_Pr, USHORT delay)
{
  while(delay--) {
    SiS_GenericDelay(SiS_Pr,0x19df);
d6037 1
a6037 1
}
d6039 100
a6138 5
void
SiS_ShortDelay(SiS_Private *SiS_Pr, USHORT delay)
{
  while(delay--) {
      SiS_GenericDelay(SiS_Pr,0x42);
d6140 1
d6143 4
a6146 2
void
SiS_GenericDelay(SiS_Private *SiS_Pr, USHORT delay)
d6148 6
a6153 1
  USHORT temp,flag;
d6155 4
a6158 1
  flag = SiS_GetReg3(0x61) & 0x10;
d6160 8
a6167 5
  while(delay) {
      temp = SiS_GetReg3(0x61) & 0x10;
      if(temp == flag) continue;
      flag = temp;
      delay--;
a6168 1
}
d6170 1
a6170 4
BOOLEAN
SiS_Is301B(SiS_Private *SiS_Pr, USHORT BaseAddr)
{
  USHORT flag;
d6172 3
a6174 4
  flag = SiS_GetReg1(SiS_Pr->SiS_Part4Port,0x01);
  if(flag >= 0x0B0) return(1);
  else return(0);
}
d6176 9
a6184 4
BOOLEAN
SiS_CRT2IsLCD(SiS_Private *SiS_Pr, USHORT BaseAddr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT flag;
d6186 1
a6186 8
  if(HwDeviceExtension->jChipType == SIS_730) {
     flag = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13);
     if(flag & 0x20) return(1);
  }
  flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
  if(flag & 0x20) return(1);
  else return(0);
}
d6188 1
a6188 5
BOOLEAN
SiS_IsDualEdge(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, USHORT BaseAddr)
{
#ifdef SIS315H
  USHORT flag;
d6190 1
a6190 16
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     if((HwDeviceExtension->jChipType != SIS_650) || (SiS_GetReg1(SiS_Pr->SiS_P3d4,0x5f) & 0xf0)) {
        flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
        if(flag & EnableDualEdge) return(1);
        else return(0);
     } else return(0);
  } else
#endif
     return(0);
}

BOOLEAN
SiS_IsVAMode(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, USHORT BaseAddr)
{
#ifdef SIS315H
  USHORT flag;
d6192 2
a6193 15
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
     if((flag & EnableDualEdge) && (flag & SetToLCDA))   return(1);
#if 0 /* Not done in 650/301LVx 1.10.6s, but in 650/301LV */
     else if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
       if(flag) return(1);
       else     return(0);   			         
     }
#endif
     else
       return(0);
  } else
#endif
     return(0);
 }
d6195 2
a6196 5
BOOLEAN
SiS_WeHaveBacklightCtrl(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, USHORT BaseAddr)
{
#ifdef SIS315H
  USHORT flag;
d6198 2
a6199 8
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x79);
     if(flag & 0x10)  return(1);
     else             return(0);
  } else
#endif
     return(0);
 }
d6201 12
a6212 6
#if 0
BOOLEAN
SiS_Is315E(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, USHORT BaseAddr)
{
#ifdef SIS315H
  USHORT flag;
d6214 21
a6234 9
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x5f);
     if(flag & 0x10)  return(1);
     else      	      return(0);
  } else
#endif
     return(0);
}
#endif
d6236 1
a6236 5
BOOLEAN
SiS_IsM650or651(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, USHORT BaseAddr)
{
#ifdef SIS315H
  USHORT flag;
d6238 2
a6239 9
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x5f);
     flag &= 0xF0;
     if((flag == 0xb0) || (flag == 0x90)) return 0;
     else return 1;
  } else
#endif
    return 1;
}
d6241 1
a6241 5
BOOLEAN
SiS_IsYPbPr(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, USHORT BaseAddr)
{
#ifdef SIS315H
  USHORT flag;
d6243 1
a6243 8
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
     if(flag & EnableLVDSHiVision)  return(1);  /* = YPrPb = 0x08 */
     else      	                    return(0);
  } else
#endif
     return(0);
}
d6245 1
a6245 5
BOOLEAN
SiS_IsChScart(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, USHORT BaseAddr)
{
#ifdef SIS315H
  USHORT flag;
d6247 13
a6259 8
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
     if(flag & EnableLVDSScart)     return(1);  /* = Scart = 0x04 */
     else      	                    return(0);
  } else
#endif
     return(0);
}
d6261 2
a6262 4
BOOLEAN
SiS_IsTVOrYPbPrOrScart(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, USHORT BaseAddr)
{
  USHORT flag;
d6264 2
a6265 16
#ifdef SIS315H
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToTV)        return(1);
     flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
     if(flag & EnableLVDSHiVision) return(1);  /* = YPrPb = 0x08 */
     if(flag & EnableLVDSScart)    return(1);  /* = Scart = 0x04- TW inserted */
     else                          return(0);
  } else
#endif
  {
     flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToTV) return(1);
  }
  return(0);
}
d6267 9
a6275 4
BOOLEAN
SiS_IsLCDOrLCDA(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, USHORT BaseAddr)
{
  USHORT flag;
d6277 2
a6278 14
#ifdef SIS315H
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToLCD) return(1);
     flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
     if(flag & SetToLCDA)    return(1);
     else                    return(0);
  } else
#endif
  {
   flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
   if(flag & SetCRT2ToLCD)   return(1);
  }
  return(0);
d6280 17
a6296 1
}
d6298 8
a6305 4
BOOLEAN
SiS_IsDisableCRT2(SiS_Private *SiS_Pr, USHORT BaseAddr)
{
  USHORT flag;
d6307 24
a6330 4
  flag = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
  if(flag & 0x20) return(0);
  else            return(1);
}
d6332 4
a6335 4
BOOLEAN
SiS_BridgeIsOn(SiS_Private *SiS_Pr, USHORT BaseAddr,PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT flag;
d6337 1
a6337 8
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     return(0);
  } else {
     flag = SiS_GetReg1(SiS_Pr->SiS_Part4Port,0x00);
     if((flag == 1) || (flag == 2)) return(0);
     else return(1);
  }
}
d6339 3
a6341 4
BOOLEAN
SiS_BridgeIsEnable(SiS_Private *SiS_Pr, USHORT BaseAddr,PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT flag;
d6343 1
a6343 16
  if(!(SiS_BridgeIsOn(SiS_Pr,BaseAddr,HwDeviceExtension))) {
    flag = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00);
    if(HwDeviceExtension->jChipType < SIS_315H) {
      /* 300 series (630/301B 2.04.5a) */
      flag &= 0xa0;
      if((flag == 0x80) || (flag == 0x20)) return 0;
      else	                           return 1;
    } else {
      /* 310/325 series (650/301LVx 1.10.6s) */
      flag &= 0x50;
      if((flag == 0x40) || (flag == 0x10)) return 0;
      else                                 return 1;
    }
  }
  return 1;
}
d6345 6
a6350 4
BOOLEAN
SiS_BridgeInSlave(SiS_Private *SiS_Pr)
{
  USHORT flag1;
d6352 2
a6353 4
  flag1 = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x31);
  if(flag1 & (SetInSlaveMode >> 8)) return 1;
  else return 0;
}
d6355 1
a6355 7
/* TW: New from 650/301LV(x) 1.10.6s BIOS */
void
SiS_SetHiVision(SiS_Private *SiS_Pr, USHORT BaseAddr,PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
#ifdef SIS315H
  USHORT temp;
#endif
d6357 2
a6358 3
  /* Note: This variable is only used on 30x/B/LV systems.
     CR38 has a different meaning on LVDS/CH7019 systems.
   */
d6360 13
a6372 14
  SiS_Pr->SiS_HiVision = 0;
  if(HwDeviceExtension->jChipType >= SIS_315H) {
#ifdef SIS315H
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
        /* TW: New from 650/301LVx BIOS 1.10.6s */
        temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
	if(temp & 0x04) {
	    temp &= 0x30;
	    switch(temp) {
	      case 0x00: SiS_Pr->SiS_HiVision = 4; break;
	      case 0x10: SiS_Pr->SiS_HiVision = 1; break;
	      case 0x20: SiS_Pr->SiS_HiVision = 2; break;
	      default:   SiS_Pr->SiS_HiVision = 3; break;
	    }
d6375 1
a6375 13
#endif /* SIS315H */
  }
}

/* TW: Checked against 630/LVDS 2.08, 650/LVDS and 650/301LV BIOS */
BOOLEAN
SiS_GetLCDResInfo(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,
                  USHORT ModeIdIndex, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT temp,modeflag,resinfo=0;
  const unsigned char SiS300SeriesLCDRes[] =
         { 0, 1, 2, 3, 7, 4, 5, 8,
	   0, 0, 0, 0, 0, 0, 0, 0 };
d6377 3
a6379 3
  SiS_Pr->SiS_LCDResInfo = 0;
  SiS_Pr->SiS_LCDTypeInfo = 0;
  SiS_Pr->SiS_LCDInfo = 0;
d6381 15
a6395 5
  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     if(ModeNo <= 0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
d6397 2
a6398 2
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
a6399 1
  }
d6401 1
a6401 1
  if(!(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)))   return 0;
d6403 4
a6406 1
  if(!(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SwitchToCRT2))) return 0;
d6408 21
a6428 1
  temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x36);
d6430 3
a6432 5
  /* FSTN: Fake CR36 (TypeInfo 2, ResInfo SiS_Panel320x480) */
  if(SiS_Pr->SiS_IF_DEF_FSTN) {
   	temp = 0x20 | SiS_Pr->SiS_Panel320x480;
   	SiS_SetReg1(SiS_Pr->SiS_P3d4,0x36,temp);
  }
d6434 1
a6434 11
  if(HwDeviceExtension->jChipType < SIS_315H) {
  	SiS_Pr->SiS_LCDTypeInfo = temp >> 4;
  } else {
        SiS_Pr->SiS_LCDTypeInfo = (temp & 0x0F) - 1;
  }
  temp &= 0x0f;
  if(HwDeviceExtension->jChipType < SIS_315H) {
      /* TW: Translate 300 series LCDRes to 310/325 series for unified usage */
      temp = SiS300SeriesLCDRes[temp];
  }
  SiS_Pr->SiS_LCDResInfo = temp;
d6436 1
a6436 3
  if(SiS_Pr->SiS_IF_DEF_FSTN){
       	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_Panel320x480;
  }
d6438 1
a6438 7
  if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
    	if(SiS_Pr->SiS_LCDResInfo < SiS_Pr->SiS_PanelMin301)
		SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_PanelMin301;
  } else {
    	if(SiS_Pr->SiS_LCDResInfo < SiS_Pr->SiS_PanelMinLVDS)
		SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_PanelMinLVDS;
  }
d6440 2
a6441 2
  if(SiS_Pr->SiS_LCDResInfo > SiS_Pr->SiS_PanelMax)
  	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_Panel1024x768;
d6443 31
a6473 7
  temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x37);
  if(SiS_Pr->SiS_IF_DEF_FSTN){
        /* TW: Fake LVDS bridge for FSTN */
      	temp = 0x04;
      	SiS_SetReg1(SiS_Pr->SiS_P3d4,0x37,temp);
  }
  SiS_Pr->SiS_LCDInfo = temp;
d6475 12
a6486 23
  /* TW: Inserted entire 315-block from 650/LVDS/301+LVx BIOSes */
  if(HwDeviceExtension->jChipType >= SIS_315H) {
#ifdef SIS315H
     if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
         if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
		 if(ModeNo == 0x3a || ModeNo == 0x4d || ModeNo == 0x65) {
		     SiS_Pr->SiS_LCDInfo |= LCDNonExpanding;
		 }
	     }
	 }
     }
     if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x39) & 0x01) {
         SiS_Pr->SiS_LCDInfo &= 0xFFEF;    
	 SiS_Pr->SiS_LCDInfo |= LCDPass11;
     }
#endif
  } else {
#ifdef SIS300
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        if((ROMAddr) && SiS_Pr->SiS_UseROM) {
           if(!(ROMAddr[0x235] & 0x02)) {
	      SiS_Pr->SiS_LCDInfo &= 0xEF;
d6489 5
a6494 8
        if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	   if((SiS_Pr->SiS_SetFlag & CRT2IsVGA) && ((ModeNo == 0x03) || (ModeNo == 0x10))) {
               SiS_Pr->SiS_LCDInfo &= 0xEF;
	   }
	}
     }
#endif
  }
d6496 5
a6500 9
#ifdef LINUX_KERNEL
  printk(KERN_DEBUG "sisfb: (LCDInfo=0x%04x LCDResInfo=0x%02x LCDTypeInfo=0x%02x)\n",
	SiS_Pr->SiS_LCDInfo, SiS_Pr->SiS_LCDResInfo, SiS_Pr->SiS_LCDTypeInfo);
#endif
#ifdef LINUX_XF86
  xf86DrvMsgVerb(0, X_PROBED, 3, 
  	"(init301: LCDInfo=0x%04x LCDResInfo=0x%02x LCDTypeInfo=0x%02x)\n",
	SiS_Pr->SiS_LCDInfo, SiS_Pr->SiS_LCDResInfo, SiS_Pr->SiS_LCDTypeInfo);
#endif
d6502 2
a6503 4
  /* TW: With Trumpion, always Expanding */
  if(SiS_Pr->SiS_IF_DEF_TRUMPION != 0){
       SiS_Pr->SiS_LCDInfo &= (~LCDNonExpanding);
  }
d6505 7
a6511 1
  if(!((HwDeviceExtension->jChipType < SIS_315H) && (SiS_Pr->SiS_SetFlag & CRT2IsVGA))) {
d6513 5
a6517 6
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
	   if(ModeNo > 0x13) {
	      if(!(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)) {
                 if((resinfo == 7) || (resinfo == 3)) {
                    SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
d6519 13
a6531 7
              }
           }
        }
	if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
	   SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	}
     }
a6532 15
     if(modeflag & HalfDCLK) {
        if(SiS_Pr->SiS_IF_DEF_TRUMPION == 0) {
           if(!(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)) {
	      if(!(((SiS_Pr->SiS_IF_DEF_LVDS == 1) || (HwDeviceExtension->jChipType < SIS_315H)) &&
	                                      (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480))) {
                 if(ModeNo > 0x13) {
                    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
                       if(resinfo == 4) SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;     /* 512x384  */
                    } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
                       if(resinfo == 3) SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;     /* 400x300  */
                    }
                 }
	      } else SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
           } else SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
        } else SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
d6535 1
a6535 1
  }
d6537 7
a6543 5
  /* TW: wdr: if (VBInfo & LCD) && (VBInfo & (SetSimuScanMode | SwitchToCRT2)) { */
  if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
    	if(SiS_Pr->SiS_VBInfo & SetNotSimuMode) {
      		SiS_Pr->SiS_SetFlag |= LCDVESATiming;
    	}
d6545 11
a6555 15
    	SiS_Pr->SiS_SetFlag |= LCDVESATiming;
  }

#ifdef SIS315H
  /* TW: Inserted from 650/301LVx BIOS 1.10.6s */
  if(HwDeviceExtension->jChipType > SIS_315H) {
    if(SiS_Pr->SiS_VBType & VB_SIS30xNEW) {
      temp = 0x00;
      if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) temp = 0x04;
      if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) temp = 0x04;
      if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) temp = 0x04;
      SiS_SetReg1(SiS_Pr->SiS_P3d4,0x39,temp);
    } else if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
      SiS_SetReg1(SiS_Pr->SiS_P3d4,0x39,0x00);
    }
a6556 3
#endif

  return 1;
d6559 3
a6561 12
void
SiS_PresetScratchregister(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  return;
  /*SiS_SetReg1(SiS_Pr->SiS_P3d4,0x30,0x21);  */
  /*SiS_SetReg1(SiS_Pr->SiS_P3d4,0x31,0x41);  */
  /*SiS_SetReg1(SiS_Pr->SiS_P3d4,0x32,0x28);  */
  /*SiS_SetReg1(SiS_Pr->SiS_P3d4,0x33,0x22);  */
  /*SiS_SetReg1(SiS_Pr->SiS_P3d4,0x35,0x43);  */
  /*SiS_SetReg1(SiS_Pr->SiS_P3d4,0x36,0x01);  */
  /*SiS_SetReg1(SiS_Pr->SiS_P3d4,0x37,0x00);  */
}
d6563 3
a6565 2
void
SiS_LongWait(SiS_Private *SiS_Pr)
d6567 2
a6568 1
  USHORT i;
d6570 6
a6575 1
  i = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1F);
d6577 26
a6602 10
  if(!(i & 0xC0)) {
    for(i=0; i<0xFFFF; i++) {
       if(!(SiS_GetReg2(SiS_Pr->SiS_P3da) & 0x08))
         break;
    }
    for(i=0; i<0xFFFF; i++) {
       if((SiS_GetReg2(SiS_Pr->SiS_P3da) & 0x08))
         break;
    }
  }
d6605 3
a6607 2
void
SiS_VBLongWait(SiS_Private *SiS_Pr)
d6609 19
a6627 6
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
    SiS_VBWait(SiS_Pr);
  } else {
    SiS_LongWait(SiS_Pr);
  }
  return;
d6630 4
a6633 2
void
SiS_VBWait(SiS_Private *SiS_Pr)
d6635 10
a6644 1
  USHORT tempal,temp,i,j;
d6646 4
a6649 13
  temp = 0;
  for(i=0; i<3; i++) {
    for(j=0; j<100; j++) {
       tempal = SiS_GetReg2(SiS_Pr->SiS_P3da);
       if(temp & 0x01) {
          if((tempal & 0x08))  continue;
          if(!(tempal & 0x08)) break;
       } else {
          if(!(tempal & 0x08)) continue;
          if((tempal & 0x08))  break;
       }
    }
    temp ^= 0x01;
a6650 1
}
d6652 3
a6654 20
void
SiS_WaitVBRetrace(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  if(HwDeviceExtension->jChipType < SIS_315H) {
#ifdef SIS300
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
        if(!(SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00) & 0x20)) return;
     }
     if(!(SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00) & 0x80)) {
        SiS_WaitRetrace1(SiS_Pr,HwDeviceExtension);
     } else {
        SiS_WaitRetrace2(SiS_Pr,HwDeviceExtension);
     }
#endif
  } else {
#ifdef SIS315H
     if(!(SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00) & 0x40)) {
        SiS_WaitRetrace1(SiS_Pr,HwDeviceExtension);
     } else {
        SiS_WaitRetrace2(SiS_Pr,HwDeviceExtension);
a6655 1
#endif
d6657 1
d6659 1
d6661 3
a6663 2
void
SiS_WaitRetrace1(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
d6665 5
a6669 4
  USHORT watchdog;
#ifdef SIS300
  USHORT i;
#endif
d6671 21
a6691 28
  if(HwDeviceExtension->jChipType >= SIS_315H) {
#ifdef SIS315H
     if(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1f) & 0xc0) return;
     watchdog = 65535;
     while( (SiS_GetReg2(SiS_Pr->SiS_P3da) & 0x08) && --watchdog);
     watchdog = 65535;
     while( (!(SiS_GetReg2(SiS_Pr->SiS_P3da) & 0x08)) && --watchdog);
#endif
  } else {
#ifdef SIS300
#if 0  /* TW: Not done in A901 BIOS */
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
        if(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1f) & 0xc0) return;
     }
#endif
     for(i=0; i<10; i++) {
        watchdog = 65535;
        while( (SiS_GetReg2(SiS_Pr->SiS_P3da) & 0x08) && --watchdog);
	if(watchdog) break;
     }
     for(i=0; i<10; i++) {
        watchdog = 65535;
        while( (!(SiS_GetReg2(SiS_Pr->SiS_P3da) & 0x08)) && --watchdog);
	if(watchdog) break;
     }
#endif
  }
}
d6693 13
a6705 4
void
SiS_WaitRetraceDDC(SiS_Private *SiS_Pr)
{
  USHORT watchdog;
d6707 12
a6718 5
  if(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1f) & 0xc0) return;
  watchdog = 65535;
  while( (SiS_GetReg2(SiS_Pr->SiS_P3da) & 0x08) && --watchdog);
  watchdog = 65535;
  while( (!(SiS_GetReg2(SiS_Pr->SiS_P3da) & 0x08)) && --watchdog);
d6721 5
a6725 2
void
SiS_WaitRetrace2(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
d6727 7
a6733 4
  USHORT watchdog;
#ifdef SIS300
  USHORT i;
#endif
d6735 2
a6736 7
  if(HwDeviceExtension->jChipType >= SIS_315H) {
#ifdef SIS315H
     watchdog = 65535;
     while( (SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x30) & 0x02) && --watchdog);
     watchdog = 65535;
     while( (!(SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x30) & 0x02)) && --watchdog);
#endif
d6738 1
a6738 12
#ifdef SIS300
     for(i=0; i<10; i++) {
        watchdog = 65535;
	while( (SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x25) & 0x02) && --watchdog);
	if(watchdog) break;
     }
     for(i=0; i<10; i++) {
        watchdog = 65535;
	while( (!(SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x25) & 0x02)) && --watchdog);
	if(watchdog) break;
     }
#endif
a6739 1
}
d6741 3
a6743 1
/* =========== Set and Get register routines ========== */
d6745 5
a6749 4
void
SiS_SetRegANDOR(USHORT Port,USHORT Index,USHORT DataAND,USHORT DataOR)
{
  USHORT temp;
d6751 13
a6763 3
  temp = SiS_GetReg1(Port,Index);    
  temp = (temp & (DataAND)) | DataOR;
  SiS_SetReg1(Port,Index,temp);
d6765 1
d6767 2
a6768 2
void
SiS_SetRegAND(USHORT Port,USHORT Index,USHORT DataAND)
d6770 3
a6772 1
  USHORT temp;
d6774 32
a6805 3
  temp = SiS_GetReg1(Port,Index);    
  temp &= DataAND;
  SiS_SetReg1(Port,Index,temp);
d6808 2
a6809 1
void SiS_SetRegOR(USHORT Port,USHORT Index,USHORT DataOR)
d6813 52
a6864 3
  temp = SiS_GetReg1(Port,Index);    
  temp |= DataOR;
  SiS_SetReg1(Port,Index,temp);
d6867 3
a6869 7
/* ========================================================= */

/* TW: Set 301 TV Encoder (and some LCD relevant) registers */
void
SiS_SetGroup2(SiS_Private *SiS_Pr, USHORT BaseAddr,UCHAR *ROMAddr, USHORT ModeNo,
              USHORT ModeIdIndex,USHORT RefreshRateTableIndex,
	      PSIS_HW_DEVICE_INFO HwDeviceExtension)
d6871 3
a6873 2
  USHORT      i, j, tempax, tempbx, tempcx, temp, temp1;
  USHORT      push1, push2;
d6876 2
a6878 6
  USHORT      modeflag, resinfo, crt2crtc, resindex, CRT2Index;
  ULONG       longtemp, tempeax, tempebx, temp2, tempecx;
  const UCHAR atable[] = {
                 0xc3,0x9e,0xc3,0x9e,0x02,0x02,0x02,
	         0xab,0x87,0xab,0x9e,0xe7,0x02,0x02
  };
d6880 12
a6891 42
  /* TW: Inserted from 650/301LV BIOS */
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
     /* TW: Inserted from 650/301LVx 1.10.6s: (Is at end of SetGroup2!) */
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xfc,0x03);
	   temp = 1;
	   if(ModeNo <= 0x13) temp = 3;
	   SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x0b,temp);
	}
     }
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
       if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
         if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
           if((ModeNo == 0x4a) || (ModeNo == 0x38)) {
               SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x1c,0xa7);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x1d,0x07);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x1e,0xf2);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x1f,0x6e);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x20,0x17);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x21,0x8b);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x22,0x73);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x23,0x53);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x24,0x13);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x25,0x40);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x26,0x34);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x27,0xf4);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x28,0x63);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x29,0xbb);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2a,0xcc);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2b,0x7a);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2c,0x58);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2d,0xe4);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2e,0x73);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2f,0xda);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x30,0x13);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x43,0x72);
           }
         }
       }
     }
     return;
d6894 9
a6902 24
  if(ModeNo<=0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;      /* si+St_ResInfo */
    	resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
    	crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;     /* si+Ext_ResInfo */
    	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
    	crt2crtc = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }

  tempcx = SiS_Pr->SiS_VBInfo;
  tempax = (tempcx & 0x00FF) << 8;
  tempbx = (tempcx & 0x00FF) | ((tempcx & 0x00FF) << 8);
  tempbx &= 0x0410;
  temp = (tempax & 0x0800) >> 8;
  temp >>= 1;
  temp |= (((tempbx & 0xFF00) >> 8) << 1);
  temp |= ((tempbx & 0x00FF) >> 3);
  temp ^= 0x0C;

  /* TW: From 1.10.7w (no vb check there) */
  if(SiS_Pr->SiS_VBType & (VB_SIS30xLV | VB_SIS30xNEW)) {
  	temp |= 0x0c;
  }
d6906 10
a6915 11
#ifdef oldHV
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) {          /* PALPhase */
    temp ^= 0x01;
    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
      TimingPoint = SiS_Pr->SiS_HiTVSt2Timing;
      if(SiS_Pr->SiS_SetFlag & TVSimuMode) {
        if(modeflag & Charx8Dot) TimingPoint = SiS_Pr->SiS_HiTVSt1Timing;
        else TimingPoint = SiS_Pr->SiS_HiTVTextTiming;
      }
    } else TimingPoint = SiS_Pr->SiS_HiTVExtTiming;
  } else {
d6917 4
a6920 1
    if(SiS_Pr->SiS_VBInfo & SetPALTV){
d6922 13
a6934 2
      TimingPoint = SiS_Pr->SiS_PALTiming;
      PhasePoint  = SiS_Pr->SiS_PALPhase;
d6936 1
a6936 5
      if( (SiS_Pr->SiS_VBType & (VB_SIS301B | VB_SIS302B)) &&
          ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	    (SiS_Pr->SiS_SetFlag & TVSimuMode) ) ) {
         PhasePoint = SiS_Pr->SiS_PALPhase2;
      }
d6938 5
a6942 1
    } else {
d6944 8
a6951 3
        temp |= 0x10;
	TimingPoint = SiS_Pr->SiS_NTSCTiming;
	PhasePoint  = SiS_Pr->SiS_NTSCPhase;
d6953 1
a6953 5
        if( (SiS_Pr->SiS_VBType & (VB_SIS301B | VB_SIS302B)) &&
	    ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	      (SiS_Pr->SiS_SetFlag & TVSimuMode) ) ) {
        	PhasePoint = SiS_Pr->SiS_NTSCPhase2;
        }
d6955 7
a6961 2
    }
#ifdef oldHV
a6962 2
#endif
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x00,temp);
d6964 7
a6970 30
  temp = 0;
  if((HwDeviceExtension->jChipType == SIS_630)||
     (HwDeviceExtension->jChipType == SIS_730)) {
     temp = 0x35;
  }
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     temp = 0x38;
  }
  if(temp) {
    if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
      if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x31) & 0x01) {
          temp1 = SiS_GetReg1(SiS_Pr->SiS_P3d4,temp);
          if(temp1 & EnablePALM) {	/* 0x40 */
              	PhasePoint = SiS_Pr->SiS_PALMPhase;
		if( (SiS_Pr->SiS_VBType & (VB_SIS301B | VB_SIS302B)) &&
		    ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
		      (SiS_Pr->SiS_SetFlag & TVSimuMode) ) ) {
	           PhasePoint = SiS_Pr->SiS_PALMPhase2;
		}
	  }
          if(temp1 & EnablePALN) {	/* 0x80 */
               	PhasePoint = SiS_Pr->SiS_PALNPhase;
		if( (SiS_Pr->SiS_VBType & (VB_SIS301B | VB_SIS302B)) &&
		    ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
		      (SiS_Pr->SiS_SetFlag & TVSimuMode) ) ) {
	           PhasePoint = SiS_Pr->SiS_PALNPhase2;
		}
	  }
      }
    }
d6973 6
a6978 11
#ifdef SIS315H
  /* TW: Inserted from 650/301LV BIOS */
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {  /* 650/301LV : 301LV | 302LV */
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
           if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
              if((ModeNo == 0x4a) || (ModeNo == 0x38)) {
	         PhasePoint = SiS_Pr->SiS_SpecialPhase;
	      }
           }
        }
a6980 1
#endif
d6982 2
a6983 2
  for(i=0x31, j=0; i<=0x34; i++, j++){
     SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,PhasePoint[j]);
d6986 2
a6987 2
  for(i=0x01, j=0; i<=0x2D; i++, j++){
     SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,TimingPoint[j]);
d6989 2
a6990 2
  for(i=0x39; i<=0x45; i++, j++){
     SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,TimingPoint[j]);
d6994 1
a6994 2
    if(HwDeviceExtension->jChipType >= SIS_315H) {
      if(!(SiS_Pr->SiS_ModeType & 0x07))
d6996 1
a6996 3
    } else {
      SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x3A,0x1F);
    }
d7001 12
a7012 18
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x35,SiS_Pr->SiS_RY1COE);
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x36,SiS_Pr->SiS_RY2COE);
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x37,SiS_Pr->SiS_RY3COE);
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x38,SiS_Pr->SiS_RY4COE);

#ifdef oldHV
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) tempax = 950;
  else {
#endif
    if(SiS_Pr->SiS_VBInfo & SetPALTV) tempax = 520;
    else tempax = 440;
#ifdef oldHV
  }
#endif

  if( ( ( (!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) || (SiS_Pr->SiS_HiVision == 3) ) && (SiS_Pr->SiS_VDE <= tempax) ) ||
      ( (SiS_Pr->SiS_VBInfo & SetCRT2ToTV) && (SiS_Pr->SiS_HiVision != 3) &&
        ( (SiS_Pr->SiS_VGAHDE == 1024) || ((SiS_Pr->SiS_VGAHDE != 1024) && (SiS_Pr->SiS_VDE <= tempax)) ) ) ) {
d7016 1
a7016 1
     tempax = (tempax & 0x00FF) | ((tempax & 0x00FF) << 8);
d7018 2
a7019 3
     temp = (tempax & 0xFF00) >> 8;
     temp += (USHORT)TimingPoint[0];
     SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x01,temp);
d7021 2
a7022 3
     temp = (tempax & 0xFF00) >> 8;
     temp += (USHORT)TimingPoint[1];
     SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x02,temp);
d7024 4
a7027 6
     if( (SiS_Pr->SiS_VBInfo & (SetCRT2ToTV - SetCRT2ToHiVisionTV)) &&
        (SiS_Pr->SiS_HiVision != 3) &&
        (SiS_Pr->SiS_VGAHDE >= 1024) ) {
        if(SiS_Pr->SiS_VBInfo & SetPALTV) {
           SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x01,0x19);
           SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x02,0x52);
d7029 2
a7030 7
           if(HwDeviceExtension->jChipType >= SIS_315H) {
             SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x01,0x17);
             SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x02,0x1d);
	   } else {
             SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x01,0x0b);
             SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x02,0x11);
	   }
d7037 1
a7037 8

  /* TW: Inserted from 650/301LVx 1.10.6s */
  if(HwDeviceExtension->jChipType >= SIS_315H) {
      if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x39) & 0x04) {
      	   tempcx >>= 1;
      }
  }

d7039 3
a7041 7
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
        tempcx--;
  }
  temp = tempcx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x1B,temp);
  temp = (tempcx & 0xFF00) >> 8;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1D,0xF0,temp);
d7044 1
a7044 3
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
        tempcx++;
  }
d7050 2
a7051 5
#ifdef oldHV
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV)  tempcx -= 4;
#endif
  temp = (tempcx & 0x00FF) << 4;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x22,0x0F,temp);
d7053 1
a7053 1
  tempbx = TimingPoint[j] | ((TimingPoint[j+1]) << 8);
d7056 1
a7056 4
  push2 = tempbx;

  temp = tempbx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x24,temp);
a7059 2
  tempbx = push2;

d7061 3
a7063 4
#ifdef oldHV
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) {
    tempbx -= 4;
    tempcx = tempbx;
a7064 1
#endif
d7069 1
a7069 1
  tempcx += ((TimingPoint[j] | ((TimingPoint[j+1]) << 8)));
d7071 1
a7071 1
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x27,temp);
d7076 2
a7077 5
#ifdef oldHV
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV)  tempcx -= 4; 
#endif
  temp = (tempcx & 0x00FF) << 4;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x2A,0x0F,temp);
d7083 1
a7083 2
  temp = (tempcx & 0x00FF) << 4;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x2D,0x0F,temp);
d7087 1
a7087 2
    tempax = SiS_GetVGAHT2(SiS_Pr) - 1;
    tempcx = tempax;
d7089 1
a7089 2
  temp = tempcx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2E,temp);
d7095 2
a7096 2
  if(HwDeviceExtension->jChipType < SIS_315H) {
  	if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) tempbx >>= 1;
d7098 10
a7107 13
	if((SiS_Pr->SiS_VBInfo & SetCRT2ToTV) && (!(SiS_Pr->SiS_HiVision & 0x03))) {
	   tempbx >>= 1;
	   if(SiS_Pr->SiS_SetFlag & TVSimuMode) {
	      if(ModeNo <= 0x13) {
	         if(crt2crtc == 1) {
	            tempbx++;
                 }
	      }
	   } else {
              if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
	         if(crt2crtc == 4)   /* TW: BIOS calls GetRatePtrCRT2 here - does not make sense */
                    if(SiS_Pr->SiS_ModeType <= 3) tempbx++;
	      }
d7109 2
a7110 1
        }
d7114 4
a7117 5
#ifdef oldHV
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) {
    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
      if(ModeNo == 0x2f) temp++;
    }
d7119 7
a7125 7
#endif
  /* TW: From 1.10.7w - doesn't make sense */
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
	   if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {   /* SetFlag?? */
	       if(ModeNo == 0x03) temp++;
d7127 1
a7127 1
	}
d7130 1
a7130 1
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2F,temp);
d7132 5
a7136 16
  tempax = (tempcx & 0xFF00) | (tempax & 0x00FF);
  tempbx = ((tempbx & 0xFF00) << 6) | (tempbx & 0x00FF);
  tempax |= (tempbx & 0xFF00);
#ifdef oldHV
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV)) {
#endif
    if(HwDeviceExtension->jChipType < SIS_315H) {
      if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToSCART)) {		/* TW: New from 630/301B (II) BIOS */
         tempax |= 0x1000;
         if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToSVIDEO))  tempax |= 0x2000;
      }
    } else {
      tempax |= 0x1000;
      if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToSVIDEO))  tempax |= 0x2000;
    }
#ifdef oldHV
d7138 1
a7138 3
#endif
  temp = (tempax & 0xFF00) >> 8;
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x30,temp);
d7140 23
a7162 7
  /* TW: Inserted from 650/301LVx 1.10.6s */
  if(HwDeviceExtension->jChipType > SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        if( (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) ||
            (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) ) {
            SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x10,0x60);
        }
d7164 5
d7171 1
a7171 25
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {      /* tv gatingno */
    tempbx = SiS_Pr->SiS_VDE;
    if((SiS_Pr->SiS_VBInfo & SetCRT2ToTV) && (!(SiS_Pr->SiS_HiVision & 0x03))) {
         tempbx >>= 1;
    }
    tempbx -= 3;
    tempbx &= 0x03ff;
    temp = ((tempbx & 0xFF00) >> 8) << 5;
    temp |= 0x18;
    SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x46,temp);
    temp = tempbx & 0x00FF;
    SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x47,temp);
    if(HwDeviceExtension->jChipType >= SIS_315H) {	/* TW: Inserted from 650/301LVx 1.10.6s */
       tempax = 0;
       if(SiS_Pr->SiS_HiVision & 0x07) {
          if(SiS_Pr->SiS_HiVision & 0x04) tempax = 0x1000;
          else if(SiS_Pr->SiS_HiVision & 0x01) tempax = 0x3000;
	  else tempax = 0x5000;
       }
       temp = (tempax & 0xFF00) >> 8;
       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x4d,temp);
    }
  }

  tempbx &= 0x00FF;
d7173 4
a7176 5
    tempcx = SiS_Pr->SiS_VGAHDE;
    if(tempcx >= SiS_Pr->SiS_HDE) {
      tempbx |= 0x2000;
      tempax &= 0x00FF;
    }
d7180 8
a7187 11
/*if(SiS_Pr->SiS_VBInfo & (SetPALTV | SetCRT2ToTV)) {  */ /*301b- TW: BIOS BUG? */
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToTV - SetCRT2ToHiVisionTV)) {
    if(!(SiS_Pr->SiS_HiVision & 0x03)) {
      if(SiS_Pr->SiS_VGAHDE >= 1024) {
        if((!(modeflag & HalfDCLK)) ||
	   (HwDeviceExtension->jChipType < SIS_315H)) {   /* TW: This check not in 630/301B */
          tempcx = 0x1920;
          if(SiS_Pr->SiS_VGAHDE >= 1280) {
            tempcx = 0x1420;
            tempbx &= 0xDFFF;
          }
d7189 1
a7189 2
      }
    }
d7192 7
a7198 12
  if(!(tempbx & 0x2000)){
    if(modeflag & HalfDCLK) {
         tempcx = (tempcx & 0xFF00) | (((tempcx & 0x00FF) << 1) & 0xff);
    }
    push1 = tempbx;
    tempeax = SiS_Pr->SiS_VGAHDE;
    tempebx = (tempcx & 0xFF00) >> 8;
    longtemp = tempeax * tempebx;
    tempecx = tempcx & 0x00FF;
    longtemp /= tempecx;
    longtemp <<= 0x0d;
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
d7200 6
a7205 10
    }
    tempecx = SiS_Pr->SiS_HDE;
    temp2 = longtemp % tempecx;
    tempeax = longtemp / tempecx;
    if(temp2 != 0) tempeax++;
    tempax = (USHORT)tempeax;
    tempbx = push1;
    tempcx = (tempcx & 0xff00) | (((tempax & 0xFF00) >> 8) >> 5);
    tempbx |= (tempax & 0x1F00);
    tempax = ((tempax & 0x00FF) << 8) | (tempax & 0x00FF);
d7208 2
a7209 4
  temp = (tempax & 0xFF00) >> 8;
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x44,temp);
  temp = (tempbx & 0xFF00) >> 8;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x45,0xC0,temp);
a7211 24
       temp = tempcx & 0x00FF;
       if(tempbx & 0x2000) temp = 0;
       temp |= 0x18;
       SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x46,0xE0,temp);
       if(SiS_Pr->SiS_VBInfo & SetPALTV) {
             tempbx = 0x0382;    /* TW: BIOS; Was 0x0364; */
             tempcx = 0x007e;    /* TW: BIOS; Was 0x009c; */
       } else {
             tempbx = 0x0369;    /* TW: BIOS; Was 0x0346; */
             tempcx = 0x0061;    /* TW: BIOS; Was 0x0078; */
       }
       temp = (tempbx & 0x00FF) ;
       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x4B,temp);
       temp = (tempcx & 0x00FF) ;
       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x4C,temp);
       tempbx &= 0x03FF;
       temp = (tempcx & 0xFF00) >> 8;
       temp = (temp & 0x0003) << 2;
       temp |= (tempbx >> 8);
       if(HwDeviceExtension->jChipType < SIS_315H) {
          SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x4D,temp);
       } else {
          SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x4D,0xF0,temp);
       }
d7213 27
a7239 3
       temp = SiS_GetReg1(SiS_Pr->SiS_Part2Port,0x43);
       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x43,(USHORT)(temp - 3));
  }
d7241 1
a7241 18
  temp = 0;
  if((HwDeviceExtension->jChipType == SIS_630) ||
     (HwDeviceExtension->jChipType == SIS_730)) {
     temp = 0x35;
  } else if(HwDeviceExtension->jChipType >= SIS_315H) {
     temp = 0x38;
  }
  if(temp) {
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
          if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x31) & 0x01) {
               if(SiS_GetReg1(SiS_Pr->SiS_P3d4,temp) & EnablePALM) {  /* 0x40 */
                     SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xEF);
                     temp = SiS_GetReg1(SiS_Pr->SiS_Part2Port,0x01);
                     SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x01,temp - 1);
               }
          }
      }
  }
d7243 5
a7248 5
#ifdef oldHV
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) {
    if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x0B,0x00);
    }
a7249 1
#endif
d7251 4
a7254 5
  if(HwDeviceExtension->jChipType < SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     	SiS_Set300Part2Regs(SiS_Pr, HwDeviceExtension, ModeIdIndex,
			    RefreshRateTableIndex, BaseAddr, ModeNo);
	return;
d7256 6
a7261 34
  } else {
     /* TW: !!! The following is a duplicate, done for LCDA as well (see above) */
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
       if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {    /* 650/301LV: (VB_SIS301LV | VB_SIS302LV)) */
         if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
           if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
             if((ModeNo == 0x4a) || (ModeNo == 0x38)) {
               SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x1c,0xa7);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x1d,0x07);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x1e,0xf2);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x1f,0x6e);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x20,0x17);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x21,0x8b);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x22,0x73);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x23,0x53);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x24,0x13);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x25,0x40);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x26,0x34);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x27,0xf4);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x28,0x63);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x29,0xbb);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2a,0xcc);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2b,0x7a);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2c,0x58);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2d,0xe4);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2e,0x73);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2f,0xda);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x30,0x13);
	       SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x43,0x72);
	     }
           }
         }
       }
       return;
d7265 3
a7267 1
  /* TW: From here: Part2 LCD setup */
d7270 4
a7273 9
  /* TW: Inserted from 650/301LVx 1.10.6s */
  if(HwDeviceExtension->jChipType >= SIS_315H) {
      if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x39) & 0x04) tempbx >>= 1;
  }
  tempbx--;			         /* RHACTE=HDE-1 */
  temp = tempbx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2C,temp);
  temp = (tempbx & 0xFF00) >> 8;
  temp <<= 4;
d7277 8
a7284 7
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
    if(SiS_Pr->SiS_ModeType == ModeEGA) {
      if(SiS_Pr->SiS_VGAHDE >= 1024) {
        temp = 0x02;
	if(HwDeviceExtension->jChipType >= SIS_315H) {
           if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
             temp = 0x01;
d7286 2
a7287 3
	}
      }
    }
d7289 1
a7289 4
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x0B,temp);

  tempbx = SiS_Pr->SiS_VDE;         		/* RTVACTEO=(VDE-1)&0xFF */
  push1 = tempbx;
d7291 2
a7292 3
  tempbx--;
  temp = tempbx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x03,temp);
d7296 2
a7297 2
  tempcx = SiS_Pr->SiS_VT;
  push2 = tempcx;
d7299 1
a7299 3
  tempcx--;
  temp = tempcx & 0x00FF;  			 /* RVTVT=VT-1 */
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x19,temp);
d7301 5
a7305 21
  temp = (tempcx & 0xFF00) >> 8;
  temp <<= 5;
  if((HwDeviceExtension->jChipType == SIS_300) && (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
    if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) temp |= 0x10;
  } else if(HwDeviceExtension->jChipType < SIS_315H) {
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) temp |= 0x10;
    else {
      if(SiS_Pr->SiS_LCDInfo & LCDSync)       /* TW: 630/301 BIOS checks this */
         temp |= 0x10;
    }
  } else {
      if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
         /* TW: Inserted from 630/301LVx 1.10.6s */
         if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
            if(SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00) & 0x01) {
      	       temp |= 0x10;
	    }
         }
      } else {
         temp |= 0x10;
      }
d7308 1
a7308 17
  /* 630/301 does not do all this */
  if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
      if((HwDeviceExtension->jChipType >= SIS_315H) && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {
        /* TW: Inserted from 650/301LVx 1.10.6s */
        temp |= (SiS_GetReg1(SiS_Pr->SiS_P3d4,0x37) >> 6);
	temp |= 0x08;   					/* From 1.10.7w */
	if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) temp |= 0x04; 	/* From 1.10.7w */
      } else {
        tempbx = (tempbx & 0xFF00) | (SiS_Pr->SiS_LCDInfo & 0x0FF);
        if(tempbx & LCDSync) {
          tempbx &= (0xFF00 | LCDSyncBit);
          tempbx = (tempbx & 0xFF00) | ((tempbx & 0x00FF) >> LCDSyncShift);
          temp |= (tempbx & 0x00FF);
        }
      }
  }
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x1A,temp);
d7316 3
a7318 13
  /* 1280x960, 1280x1024 and 1600x1200 data invalid/missing in tables, use old calculation */
  if((HwDeviceExtension->jChipType >= SIS_315H)             && 
     (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)              &&
     (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024) &&
     (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1600x1200) &&
     (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x960)) {
  							/* ------------- 310 series ------------ */

      /* TW: Inserted this entire section from 650/301LV(x) BIOS */

      SiS_GetCRT2Part2Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                         &CRT2Index,&resindex);

d7320 3
a7322 13
        case Panel_1024x768      : CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_1;  break;  /* "Normal" */
        case Panel_1280x1024     : CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1280x1024_1; break;
	case Panel_1400x1050     : CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1400x1050_1; break;
	case Panel_1600x1200     : CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1600x1200_1; break;
        case Panel_1024x768 + 16 : CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_2;  break;  /* Non-Expanding */
        case Panel_1280x1024 + 16: CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1280x1024_2; break;
	case Panel_1400x1050 + 16: CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1400x1050_2; break;
	case Panel_1600x1200 + 16: CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1600x1200_2; break;
        case Panel_1024x768 + 32 : CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_3;  break;  /* VESA Timing */
        case Panel_1280x1024 + 32: CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1280x1024_3; break;
	case Panel_1400x1050 + 32: CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1400x1050_3; break;
	case Panel_1600x1200 + 32: CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1600x1200_3; break;
	default:                   CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_3;  break;
d7328 1
a7328 1
        SiS_SetReg1(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
d7331 1
a7331 1
        SiS_SetReg1(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
d7334 1
a7334 1
        SiS_SetReg1(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
d7336 1
a7336 1
      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x23,(CRT2Part2Ptr+resindex)->CR[10]);
d7339 45
a7383 19
      if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        if(SiS_Pr->SiS_VGAVDE == 0x20d) {
	  temp = 0xc3;
	  if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	     temp++;
	     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) temp += 2;
	  }
	  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2f,temp);
	  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x30,0xb3);
	}
	if(SiS_Pr->SiS_VGAVDE == 0x1a4) {
	  temp = 0x4d;
	  if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	     temp++;
	     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) temp++;
	  }
	  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2f,temp);
	}
     }
d7385 3
a7387 10
     /* TW: Inserted from 650/301LVx 1.10.6s: */
     /* !!! This is a duplicate, done for LCDA as well - see above */
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xfc,0x03);   /* Not done in 1.10.7w */
	   temp = 1;
	   if(ModeNo <= 0x13) temp = 3;
	   SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x0b,temp);
	}
     }
d7389 9
a7397 14
  } else {   /* ------------- 300 series (and other LCD resolutions) ----------- */

    tempcx++;
    tempbx = 768;
    if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1024x768) {
      tempbx = 1024;
      if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024) {
         tempbx = 1200;
         if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1600x1200) {
            if(tempbx != SiS_Pr->SiS_VDE) {
               tempbx = 960;
            }
         }
      }
d7399 20
a7418 22
    if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) {
      tempbx = SiS_Pr->SiS_VDE - 1;
      tempcx--;
    }
    tempax = 1;
    if(!(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)) {
      if(tempbx != SiS_Pr->SiS_VDE){
        tempax = tempbx;
        if(tempax < SiS_Pr->SiS_VDE) {
          tempax = 0;
          tempcx = 0;
        } else {
          tempax -= SiS_Pr->SiS_VDE;
        }
        tempax >>= 1;
      }
      tempcx -= tempax; /* lcdvdes */
      tempbx -= tempax; /* lcdvdee */
    } else {
      tempax >>= 1;
      tempcx -= tempax; /* lcdvdes */
      tempbx -= tempax; /* lcdvdee */
d7421 1
a7421 4
    temp = tempcx & 0x00FF;   				/* RVEQ1EQ=lcdvdes */
    SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x05,temp);
    temp = tempbx & 0x00FF;   				/* RVEQ2EQ=lcdvdee */
    SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x06,temp);
d7423 3
a7425 3
    temp = ((tempbx & 0xFF00) >> 8 ) << 3;
    temp |= ((tempcx & 0xFF00) >> 8);
    SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x02,temp);
d7427 3
a7429 8
    tempbx = push2;
    tempax = push1;
    tempcx = tempbx;
    tempcx -= tempax;
    tempcx >>= 4;
    tempbx += tempax;
    tempbx >>= 1;
    if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)  tempbx -= 10;
d7431 1
a7431 2
    temp = tempbx & 0x00FF;   				/* RTVACTEE=lcdvrs */
    SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x04,temp);
a7435 1
    SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x01,temp);
d7437 4
a7440 1
    /* TW: Code from 630/301B (I+II) BIOS */
d7442 3
a7444 20
    if( ( ( (HwDeviceExtension->jChipType == SIS_630) ||
            (HwDeviceExtension->jChipType == SIS_730) ) &&
          (HwDeviceExtension->jChipRevision > 2) )  &&
        (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) &&
        (!(SiS_Pr->SiS_SetFlag & LCDVESATiming))  &&
        (!(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)) ) {
            if(ModeNo == 0x13) {
              SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x04,0xB9);
              SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x05,0xCC);
              SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x06,0xA6);
            } else {
              if((crt2crtc & 0x3F) == 4) {
                SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x01,0x2B);
                SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x02,0x13);
                SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x04,0xE5);
                SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x05,0x08);
                SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x06,0xE2);
              }
            }
    }
d7446 1
a7446 1
    /* TW: Inserted missing code from 630/301B BIOS: (II: 3258) */
d7448 3
a7450 12
    if(SiS_Pr->SiS_LCDTypeInfo == 0x0c) {
         crt2crtc &= 0x1f;
         tempcx = 0;
         if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
           if (SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
              tempcx += 7;
           }
         }
         tempcx += crt2crtc;
         if (crt2crtc >= 4) {
           SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x06,0xff);
         }
d7452 29
a7480 9
         if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
           if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
             if(crt2crtc == 4) {
                SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x01,0x28);
             }
           }
         }
         SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x02,0x18);
         SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x04,atable[tempcx]);
d7483 8
a7490 9
    tempcx = (SiS_Pr->SiS_HT - SiS_Pr->SiS_HDE) >> 2;     /* (HT-HDE)>>2     */
    tempbx = SiS_Pr->SiS_HDE + 7;            		  /* lcdhdee         */
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
         tempbx += 2;
    }
    push1 = tempbx;
    temp = tempbx & 0x00FF;    			          /* RHEQPLE=lcdhdee */
    SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x23,temp);
    temp = (tempbx & 0xFF00) >> 8;
d7493 1
a7493 7
    temp = 7;
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
         temp += 2;
    }
    SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x1F,temp);  	  /* RHBLKE=lcdhdes */

    SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x20,0x0F);
d7497 13
a7509 5
    temp = tempbx & 0xFF;            		          /* RHBURSTS=lcdhrs */
    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
      if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) {
        if(SiS_Pr->SiS_HDE == 1280)  temp = 0x47;
      }
d7511 7
a7517 2
    SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x1C,temp);
    temp = ((tempbx & 0xFF00) >> 8) << 4;
d7521 1
d7523 3
a7526 2
    temp = tempbx & 0x00FF;            		          /* RHSYEXP2S=lcdhre */
    SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x21,temp);
d7528 4
a7531 15
    if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
      if(SiS_Pr->SiS_VGAVDE == 525) {
        if(SiS_Pr->SiS_ModeType <= ModeVGA)
    	   temp=0xC6;
        else
       	   temp=0xC3;
        SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2f,temp);
        SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x30,0xB3);
      } else if(SiS_Pr->SiS_VGAVDE == 420) {
        if(SiS_Pr->SiS_ModeType <= ModeVGA)
	   temp=0x4F;
        else
       	   temp=0x4D;   /* 650: 4e */
        SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x2f,temp);
      }
a7532 2
    SiS_Set300Part2Regs(SiS_Pr, HwDeviceExtension, ModeIdIndex,
                        RefreshRateTableIndex, BaseAddr, ModeNo);
d7534 5
a7538 2
  } /* HwDeviceExtension */
}
d7540 1
a7540 4
USHORT
SiS_GetVGAHT2(SiS_Private *SiS_Pr)
{
  ULONG tempax,tempbx;
d7542 6
a7547 4
  tempbx = ((SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE) * SiS_Pr->SiS_RVBHCMAX) & 0xFFFF;
  tempax = (SiS_Pr->SiS_VT - SiS_Pr->SiS_VDE) * SiS_Pr->SiS_RVBHCFACT;
  tempax = (tempax * SiS_Pr->SiS_HT) / tempbx;
  return((USHORT) tempax);
d7550 7
a7556 5
/* TW: New from 300/301LV BIOS 1.16.51. Seems highly preliminary. */
void
SiS_Set300Part2Regs(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,
    			USHORT ModeIdIndex, USHORT RefreshRateTableIndex,
			USHORT BaseAddr, USHORT ModeNo)
d7558 2
a7559 3
  USHORT crt2crtc, resindex;
  int i,j;
  const  SiS_Part2PortTblStruct *CRT2Part2Ptr = NULL;
d7561 1
a7561 2
  if(HwDeviceExtension->jChipType != SIS_300) return;
  if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) return;
d7564 3
a7566 1
    	crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d7568 1
a7568 1
    	crt2crtc = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d7571 7
a7577 3
  resindex = crt2crtc & 0x3F;
  if(SiS_Pr->SiS_SetFlag & LCDVESATiming) CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_1;
  else                                    CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_2;
d7579 6
a7584 4
  /* TW: The BIOS code (1.16.51) is obviously a fragment! */
  if(ModeNo > 0x13) {
     CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_1;
     resindex = 4;
d7587 4
a7590 4
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x01,0x80,(CRT2Part2Ptr+resindex)->CR[0]);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x02,0x80,(CRT2Part2Ptr+resindex)->CR[1]);
  for(i = 2, j = 0x04; j <= 0x06; i++, j++ ) {
        SiS_SetReg1(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
d7592 17
a7608 2
  for(j = 0x1c; j <= 0x1d; i++, j++ ) {
        SiS_SetReg1(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
d7610 9
a7618 2
  for(j = 0x1f; j <= 0x21; i++, j++ ) {
        SiS_SetReg1(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
d7620 4
a7623 2
  SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x23,(CRT2Part2Ptr+resindex)->CR[10]);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x25,0x0f,(CRT2Part2Ptr+resindex)->CR[11]);
d7626 7
a7632 5
/* TW: Set 301 Macrovision(tm) registers */
/* TW: Double-Checked against 650/301LV, 650/301LVx and 630/301B BIOS */
void
SiS_SetGroup3(SiS_Private *SiS_Pr, USHORT  BaseAddr,UCHAR *ROMAddr,USHORT ModeNo,
              USHORT ModeIdIndex,PSIS_HW_DEVICE_INFO HwDeviceExtension)
d7634 1
a7634 6
  USHORT temp;
#ifdef oldHV
  USHORT i;
  const UCHAR  *tempdi;
#endif
  USHORT modeflag;
d7636 14
a7649 2
  /* TW: Inserted from 650/301LVx 1.10.6s, 1.10.7w */
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) return;
d7651 5
a7655 4
  if(ModeNo<=0x13)
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  else
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d7657 1
a7657 1
  SiS_SetReg1(SiS_Pr->SiS_Part3Port,0x00,0x00);
d7659 3
a7661 12
  if(SiS_Pr->SiS_VBInfo & SetPALTV) {
    SiS_SetReg1(SiS_Pr->SiS_Part3Port,0x13,0xFA);
    SiS_SetReg1(SiS_Pr->SiS_Part3Port,0x14,0xC8);
  } else {
    if(HwDeviceExtension->jChipType >= SIS_315H) {
      SiS_SetReg1(SiS_Pr->SiS_Part3Port,0x13,0xF5);
      SiS_SetReg1(SiS_Pr->SiS_Part3Port,0x14,0xB7);
    } else {
      SiS_SetReg1(SiS_Pr->SiS_Part3Port,0x13,0xF6);
      SiS_SetReg1(SiS_Pr->SiS_Part3Port,0x14,0xBf);
    }
  }
d7663 39
a7701 16
  temp = 0;
  if((HwDeviceExtension->jChipType == SIS_630)||
     (HwDeviceExtension->jChipType == SIS_730)) {
     temp = 0x35;
  } else if(HwDeviceExtension->jChipType >= SIS_315H) {
     temp = 0x38;
  }
  if(temp) {
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
          if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x31) & 0x01) {
              if(SiS_GetReg1(SiS_Pr->SiS_P3d4,temp) & EnablePALM){  /* 0x40 */
                  SiS_SetReg1(SiS_Pr->SiS_Part3Port,0x13,0xFA);
                  SiS_SetReg1(SiS_Pr->SiS_Part3Port,0x14,0xC8);
                  SiS_SetReg1(SiS_Pr->SiS_Part3Port,0x3D,0xA8);
              }
          }
d7703 10
a7712 1
  }
d7714 8
a7721 12
#ifdef oldHV
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) {
    tempdi = SiS_Pr->SiS_HiTVGroup3Data;
    if(SiS_Pr->SiS_SetFlag & TVSimuMode) {
      tempdi = SiS_Pr->SiS_HiTVGroup3Simu;
      if(!(modeflag & Charx8Dot)) {
        tempdi = SiS_Pr->SiS_HiTVGroup3Text;
      }
    }
    for(i=0; i<=0x3E; i++){
       SiS_SetReg1(SiS_Pr->SiS_Part3Port,i,tempdi[i]);
    }
a7722 1
#endif
d7724 18
a7741 1
  return;
d7744 3
a7746 6
/* TW: Set 301 VGA2 registers */
/* TW: Double-Checked against 650/301LV(x) and 630/301B BIOS */
void
SiS_SetGroup4(SiS_Private *SiS_Pr, USHORT  BaseAddr,UCHAR *ROMAddr,USHORT ModeNo,
              USHORT ModeIdIndex,USHORT RefreshRateTableIndex,
	      PSIS_HW_DEVICE_INFO HwDeviceExtension)
d7751 6
a7756 4

  if(ModeNo<=0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
	resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
d7758 2
a7759 2
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d7762 6
a7767 5
  /* TW: From 650/301LVx 1.10.6s BIOS */
  if(SiS_Pr->SiS_VBType & (VB_SIS30xLV | VB_SIS30xNEW)) {
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
          SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x24,0x0e);
      }
d7770 4
a7773 4
  if(SiS_Pr->SiS_VBType & VB_SIS30xNEW) {
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
          SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x10,0x9f);
      }
d7776 14
a7789 9
  /* TW: From 650/301LV BIOS (any, incl. 1.10.6s, 1.10.7w) */
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
  	/* TW: This is a duplicate; done at the end, too */
	if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x39) & 0x04) {
		SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x27,0x2c);
	}
	SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x2a,0x00);
	SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x30,0x00);
	SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x34,0x10);
d7791 1
d7795 1
a7795 1
  SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x13,temp);
d7798 1
a7798 2
  temp = tempbx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x14,temp);
d7800 1
a7800 1
  temp2 = (((tempbx & 0xFF00) >> 8) << 7) & 0x00ff;
d7803 1
a7803 2
  temp = tempcx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x16,temp);
d7805 1
a7805 2
  temp = (((tempcx & 0xFF00) >> 8) << 3) & 0x00ff;
  temp2 |= temp;
d7808 2
a7809 4
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV))  tempcx -= 5;

  temp = tempcx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x17,temp);
d7811 2
a7812 2
  temp = temp2 | ((tempcx & 0xFF00) >> 8);
  SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x15,temp);
a7813 1
  tempcx = SiS_Pr->SiS_VBInfo;
d7815 3
a7817 217
  if(modeflag & HalfDCLK)  tempbx >>= 1;

  /* TW: New for 650/301LV and 630/301B */
  temp = 0xA0;
#ifdef oldHV
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) {
       temp = 0;
       if(tempbx > 800) {
          temp = 0xA0;
          if(tempbx != 1024) {
             temp = 0xC0;
             if(tempbx != 1280) temp = 0;
	  }
       }
  } else
#endif
    if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
      if(tempbx <= 800) {
         temp = 0x80;
	 if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD){
            temp = 0;
            if(tempbx > 800) temp = 0x60;
         }
      }
  } else {
      temp = 0x80;
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD){
            temp = 0;
            if(tempbx > 800) temp = 0x60;
      }
  }
  if(SiS_Pr->SiS_HiVision & 0x03) {
        temp = 0;
	if(SiS_Pr->SiS_VGAHDE == 1024) temp = 0x20;
  }
  if(HwDeviceExtension->jChipType >= SIS_315H) {
  	if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x39) & 0x04) temp = 0;
  }

  if(SiS_Pr->SiS_VBType & VB_SIS301) {
     if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024)
        temp |= 0x0A;
  }

  SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0E,0x10,temp);

  tempebx = SiS_Pr->SiS_VDE;

#ifdef oldHV
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) {
     if(!(temp & 0xE0)) tempebx >>=1;
  }
#endif

  tempcx = SiS_Pr->SiS_RVBHRS;
  temp = tempcx & 0x00FF;
  SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x18,temp);

  tempeax = SiS_Pr->SiS_VGAVDE;
  tempcx |= 0x4000;
  if(tempeax <= tempebx){
    tempcx ^= 0x4000;
  } else {
    tempeax -= tempebx;
  }

  templong = (tempeax * 256 * 1024) % tempebx;
  tempeax = (tempeax * 256 * 1024) / tempebx;
  tempebx = tempeax;
  if(templong != 0) tempebx++;

  temp = (USHORT)(tempebx & 0x000000FF);
  SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x1B,temp);
  temp = (USHORT)((tempebx & 0x0000FF00) >> 8);
  SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x1A,temp);

  tempbx = (USHORT)(tempebx >> 16);
  temp = tempbx & 0x00FF;
  temp <<= 4;
  temp |= ((tempcx & 0xFF00) >> 8);
  SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x19,temp);

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {

         SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x1C,0x28);
	 tempbx = 0;
         tempax = SiS_Pr->SiS_VGAHDE;
         if(modeflag & HalfDCLK) tempax >>= 1;
         if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) || (SiS_Pr->SiS_HiVision & 0x03)) {
	     if(HwDeviceExtension->jChipType >= SIS_315H) {
	         if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x39) & 0x04) tempax >>= 1;
		 else if(tempax > 800) tempax -= 800;
	     } else {
                 if(tempax > 800) tempax -= 800;
             }
         }

/*       if((SiS_Pr->SiS_VBInfo & (SetCRT2ToTV | SetPALTV)) && (!(SiS_Pr->SiS_HiVision & 0x03))) {  */
 	 if((SiS_Pr->SiS_VBInfo & (SetCRT2ToTV - SetCRT2ToHiVisionTV)) && (!(SiS_Pr->SiS_HiVision & 0x03))) {
           if(tempax > 800) {
	      tempbx = 8;
              if(tempax == 1024)
	        tempax *= 25;
              else
	        tempax *= 20;

	      temp = tempax % 32;
	      tempax /= 32;
	      tempax--;
	      if (temp!=0) tempax++;
           }
         }
	 tempax--;
         temp = (tempax & 0xFF00) >> 8;
         temp &= 0x03;
	 if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {		/* From 1.10.7w */
	 	if(ModeNo > 0x13) {			/* From 1.10.7w */
			if(resinfo == 8) tempax = 0x1f;	/* From 1.10.7w */
		}					/* From 1.10.7w */
	 }						/* From 1.10.7w */
	 SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x1D,tempax & 0x00FF);
	 temp <<= 4;
	 temp |= tempbx;
	 SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x1E,temp);

	 if(HwDeviceExtension->jChipType > SIS_315H) {
             temp = 0x0026;  /* From 1.10.7w; 1.10.6s: 0x0036 */
	 } else {
	     temp = 0x0036;
	 }
         if((SiS_Pr->SiS_VBInfo & (SetCRT2ToTV - SetCRT2ToHiVisionTV)) &&
	                               (!(SiS_Pr->SiS_HiVision & 0x03))) {
		temp |= 0x01;
	        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
	          if(!(SiS_Pr->SiS_SetFlag & TVSimuMode))
  	                  temp &= 0xFE;
		}
         }
         SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x1F,0xC0,temp);

	 tempbx = SiS_Pr->SiS_HT;
	 if(HwDeviceExtension->jChipType >= SIS_315H) {
	 	if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x39) & 0x04) tempbx >>= 1;
	 }
         tempbx >>= 1;
	 tempbx -= 2;
         temp = ((tempbx & 0x0700) >> 8) << 3;
         SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x21,0xC0,temp);
         temp = tempbx & 0x00FF;
         SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x22,temp);
         if( (SiS_Pr->SiS_VBType & (VB_SIS30xLV | VB_SIS30xNEW)) &&
	                        (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) ) {
             SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x24,0x0e);
	 }

         /* TW: 650 BIOS does this for all bridge types - assumingly wrong */
	 if(HwDeviceExtension->jChipType >= SIS_315H) {
             /* TW: This is a duplicate; done for LCDA as well (see above) */
	     if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x39) & 0x04) {
		SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x27,0x2c);
	     }
	     SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x2a,0x00);
	     SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x30,0x00);
	     SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x34,0x10);
         } else if(HwDeviceExtension->jChipType == SIS_300) {
	     SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x2a,0x00);
	     SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x30,0x00);
	     SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x34,0x10);
	 }

  }  /* 301B */

  SiS_SetCRT2VCLK(SiS_Pr,BaseAddr,ROMAddr,ModeNo,ModeIdIndex,
                  RefreshRateTableIndex,HwDeviceExtension);
}

/* TW: Double-Checked against 650/301LV(x) and 630/301B BIOS */
void
SiS_SetCRT2VCLK(SiS_Private *SiS_Pr, USHORT BaseAddr,UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                 USHORT RefreshRateTableIndex,PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT vclkindex;
  USHORT tempah;

  vclkindex = SiS_GetVCLK2Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                              HwDeviceExtension);

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
   	tempah = SiS_Pr->SiS_VBVCLKData[vclkindex].Part4_A;
   	SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x0A,tempah);
   	tempah = SiS_Pr->SiS_VBVCLKData[vclkindex].Part4_B;
   	SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x0B,tempah);
	/* TW: New from 650/301LV, LVx BIOS (300/301LV does not do this) */
	if(HwDeviceExtension->jChipType >= SIS_315H) {
	  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {   /* 650/301LV: (VB_SIS301LV | VB_SIS302LV)) */
            if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	      if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {
                if((ModeNo == 0x4a) || (ModeNo == 0x38)) {
		    SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x0a,0x57);
		    SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x0b,0x46);
		    SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x1f,0xf6);
                }
              }
            }
	  }
	}
  } else {	/* 650/301LVx does not do this anymore, jumps to SetRegs above - BUG? */
   	SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x0A,0x01);
   	tempah = SiS_Pr->SiS_VBVCLKData[vclkindex].Part4_B;
   	SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x0B,tempah);
   	tempah = SiS_Pr->SiS_VBVCLKData[vclkindex].Part4_A;
   	SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x0A,tempah);
  }
  SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x12,0x00);
  tempah = 0x08;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
    	tempah |= 0x20;
a7818 2
  SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x12,tempah);
}
d7820 14
a7833 36
/* TW: Double-checked against 650/LVDS (1.10.07), 630/301B/LVDS/LVDS+CH, 650/301LVx (1.10.6s) BIOS */
USHORT
SiS_GetVCLK2Ptr(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex,PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT tempbx;
#ifdef SIS300
  const USHORT LCDXlat1VCLK300[4] = {VCLK65,   VCLK65,   VCLK65,   VCLK65};
  const USHORT LCDXlat2VCLK300[4] = {VCLK108_2,VCLK108_2,VCLK108_2,VCLK108_2};
  const USHORT LVDSXlat2VCLK300[4]= {VCLK65,   VCLK65,   VCLK65,   VCLK65};
  const USHORT LVDSXlat3VCLK300[4]= {VCLK65,   VCLK65,   VCLK65,   VCLK65};
#endif
#ifdef SIS315H
  const USHORT LCDXlat1VCLK310[4] = {VCLK65+2,   VCLK65+2,   VCLK65+2,   VCLK65+2};
  const USHORT LCDXlat2VCLK310[4] = {VCLK108_2+5,VCLK108_2+5,VCLK108_2+5,VCLK108_2+5};
  const USHORT LVDSXlat2VCLK310[4]= {VCLK65+2,   VCLK65+2,   VCLK65+2,   VCLK65+2};
  const USHORT LVDSXlat3VCLK310[4]= {VCLK108_2+5,VCLK108_2+5,VCLK108_2+5,VCLK108_2+5};
  			   /* {VCLK65+2,   VCLK65+2,   VCLK65+2,   VCLK65+2}; -  650/LVDS 1.10.07 */
#endif
  const USHORT LCDXlat0VCLK[4]    = {VCLK40, VCLK40, VCLK40, VCLK40};
  const USHORT LVDSXlat1VCLK[4]   = {VCLK40, VCLK40, VCLK40, VCLK40};
  USHORT CRT2Index,VCLKIndex=0;
  USHORT modeflag,resinfo;
  const UCHAR *CHTVVCLKPtr=NULL;
  const USHORT *LCDXlatVCLK1 = NULL;
  const USHORT *LCDXlatVCLK2 = NULL;
  const USHORT *LVDSXlatVCLK2 = NULL;
  const USHORT *LVDSXlatVCLK3 = NULL;

  if(HwDeviceExtension->jChipType >= SIS_315H) {
#ifdef SIS315H
		LCDXlatVCLK1 = LCDXlat1VCLK310;
		LCDXlatVCLK2 = LCDXlat2VCLK310;
		LVDSXlatVCLK2 = LVDSXlat2VCLK310;
		LVDSXlatVCLK3 = LVDSXlat3VCLK310;
#endif
d7835 5
a7839 6
#ifdef SIS300
		LCDXlatVCLK1 = LCDXlat1VCLK300;
		LCDXlatVCLK2 = LCDXlat2VCLK300;
		LVDSXlatVCLK2 = LVDSXlat2VCLK300;
		LVDSXlatVCLK3 = LVDSXlat3VCLK300;
#endif
d7842 3
a7844 8
  if(ModeNo <= 0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
    	resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
    	CRT2Index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
    	CRT2Index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d7847 3
a7849 1
  if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {    /* 301 */
d7851 4
a7854 1
     if (SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {
d7856 1
a7856 71
        CRT2Index >>= 6;
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)){      /*  LCD */
            if(HwDeviceExtension->jChipType < SIS_315H) {
	       /* TW: Inserted from 630/301B BIOS */
	       if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)
	    		VCLKIndex = LCDXlat0VCLK[CRT2Index];
	       else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)
	    		VCLKIndex = LCDXlatVCLK1[CRT2Index];
	       else
	    		VCLKIndex = LCDXlatVCLK2[CRT2Index];
	    } else {
               /* TW: 330, 650/301LV BIOS does not check expanding, 315 does  */
	       if( (HwDeviceExtension->jChipType > SIS_315PRO) ||
	           (!(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)) ) {
      	          if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
		     VCLKIndex = 0x19;
		  } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
		     VCLKIndex = 0x19;
		  } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
		     VCLKIndex = 0x21;
		  } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
		     VCLKIndex = LCDXlatVCLK1[CRT2Index];
                  } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960) {
		     VCLKIndex = 0x45;  /* TW: TODO: This is certainly wrong */
		     if(resinfo == 0x09) VCLKIndex++;
	          } else {
		     VCLKIndex = LCDXlatVCLK2[CRT2Index];
      	          }
	       } else {
                   VCLKIndex = (UCHAR)SiS_GetReg2((USHORT)(SiS_Pr->SiS_P3ca+0x02));  /*  Port 3cch */
         	   VCLKIndex = ((VCLKIndex >> 2) & 0x03);
        	   if(ModeNo > 0x13) {
          		VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
        	   }
		   if(ModeNo <= 0x13) {  /* TW: Inserted from 315 BIOS */
		      if(SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC == 1) VCLKIndex = 0x42;
		   }
		   if(VCLKIndex == 0) VCLKIndex = 0x41;
		   if(VCLKIndex == 1) VCLKIndex = 0x43;
		   if(VCLKIndex == 4) VCLKIndex = 0x44;
	       }
	    }
        } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {                 /*  TV */
        	if((SiS_Pr->SiS_IF_DEF_HiVision == 1) && (SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV)) {
          		if(SiS_Pr->SiS_SetFlag & RPLLDIV2XO)  VCLKIndex = HiTVVCLKDIV2;
     			else                                  VCLKIndex = HiTVVCLK;
          		if(SiS_Pr->SiS_SetFlag & TVSimuMode) {
            			if(modeflag & Charx8Dot)      VCLKIndex = HiTVSimuVCLK;
            			else 			      VCLKIndex = HiTVTextVCLK;
          		}
        	} else {
       			if(SiS_Pr->SiS_SetFlag & RPLLDIV2XO)  VCLKIndex = TVVCLKDIV2;
            		else         		              VCLKIndex = TVVCLK;
          	}
		if(HwDeviceExtension->jChipType >= SIS_315H) {
              		VCLKIndex += 25;
  		}
        } else {         					/* RAMDAC2 */
        	VCLKIndex = (UCHAR)SiS_GetReg2((USHORT)(SiS_Pr->SiS_P3ca+0x02));
        	VCLKIndex = ((VCLKIndex >> 2) & 0x03);
        	if(ModeNo > 0x13) {
          		VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
			if(HwDeviceExtension->jChipType < SIS_315H) {
          			VCLKIndex &= 0x3f;
				if( (HwDeviceExtension->jChipType == SIS_630) &&
				    (HwDeviceExtension->jChipRevision >= 0x30)) {
				     if(VCLKIndex == 0x14) VCLKIndex = 0x2e;
				}
			}
        	}
        }
d7858 1
a7858 1
    } else {   /* If not programming CRT2 */
d7860 3
a7862 13
        VCLKIndex = (UCHAR)SiS_GetReg2((USHORT)(SiS_Pr->SiS_P3ca+0x02));
        VCLKIndex = ((VCLKIndex >> 2) & 0x03);
        if(ModeNo > 0x13) {
             VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
	     if(HwDeviceExtension->jChipType < SIS_315H) {
                VCLKIndex &= 0x3f;
		if( (HwDeviceExtension->jChipType != SIS_630) &&
		    (HwDeviceExtension->jChipType != SIS_300) ) {
		   if(VCLKIndex == 0x1b) VCLKIndex = 0x35;
		}
	     }
        }
    }
d7864 3
a7866 1
  } else {       /*   LVDS  */
d7868 7
a7874 1
    	VCLKIndex = CRT2Index;
d7876 4
a7879 1
	if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {  /* programming CRT2 */
d7881 4
a7884 1
	   if( (SiS_Pr->SiS_IF_DEF_CH70xx != 0) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV) ) {
d7886 5
a7890 39
		VCLKIndex &= 0x1f;
        	tempbx = 0;
		if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) tempbx += 1;
        	if(SiS_Pr->SiS_VBInfo & SetPALTV) {
			tempbx += 2;
			if(SiS_Pr->SiS_CHSOverScan) tempbx = 8;
			if(SiS_Pr->SiS_CHPALM) {
				tempbx = 4;
				if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) tempbx += 1;
			} else if(SiS_Pr->SiS_CHPALN) {
				tempbx = 6;
				if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) tempbx += 1;
			}
		}
       		switch(tempbx) {
          	   case  0: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUNTSC;  break;
         	   case  1: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKONTSC;  break;
                   case  2: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUPAL;   break;
                   case  3: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPAL;   break;
		   case  4: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUPALM;  break;
         	   case  5: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPALM;  break;
                   case  6: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUPALN;  break;
                   case  7: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPALN;  break;
		   case  8: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKSOPAL;  break;
		   default: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPAL;   break;
        	}
        	VCLKIndex = CHTVVCLKPtr[VCLKIndex];

	   } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {

	        VCLKIndex >>= 6;
     		if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) ||
		                   (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel320x480))
     			VCLKIndex = LVDSXlat1VCLK[VCLKIndex];
     		else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)
     			VCLKIndex = LVDSXlatVCLK2[VCLKIndex];
		else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600)
                        VCLKIndex = LVDSXlatVCLK2[VCLKIndex];
     		else    VCLKIndex = LVDSXlatVCLK3[VCLKIndex];
d7892 1
a7892 15
	   } else {

	        VCLKIndex = (UCHAR)SiS_GetReg2((USHORT)(SiS_Pr->SiS_P3ca+0x02));
                VCLKIndex = ((VCLKIndex >> 2) & 0x03);
                if(ModeNo > 0x13) {
                     VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
		     if(HwDeviceExtension->jChipType < SIS_315H) {
    		        VCLKIndex &= 0x3F;
                     }
		     if( (HwDeviceExtension->jChipType == SIS_630) &&
                         (HwDeviceExtension->jChipRevision >= 0x30) ) {
		         	if(VCLKIndex == 0x14) VCLKIndex = 0x2e;
		     }
	        }
	   }
d7894 1
a7894 1
	} else {  /* if not programming CRT2 */
d7896 45
a7940 16
	   VCLKIndex = (UCHAR)SiS_GetReg2((USHORT)(SiS_Pr->SiS_P3ca+0x02));
           VCLKIndex = ((VCLKIndex >> 2) & 0x03);
           if(ModeNo > 0x13) {
              VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
              if(HwDeviceExtension->jChipType < SIS_315H) {
	         VCLKIndex &= 0x3F;
	         if( (HwDeviceExtension->jChipType != SIS_630) &&
		     (HwDeviceExtension->jChipType != SIS_300) ) {
		        if(VCLKIndex == 0x1b) VCLKIndex = 0x35;
	         }
#if 0		 
		 if(HwDeviceExtension->jChipType == SIS_730) {
		    if(VCLKIndex == 0x0b) VCLKIndex = 0x40;   /* 1024x768-70 */
		    if(VCLKIndex == 0x0d) VCLKIndex = 0x41;   /* 1024x768-75 */ 
		 }
#endif		 
d7943 3
d7947 24
d7972 2
d7975 3
a7977 5
  }
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "VCLKIndex %d (0x%x)\n", VCLKIndex, VCLKIndex);
#endif
  return (VCLKIndex);
d7980 7
a7986 5
/* TW: Set 301 Palette address port registers */
/* TW: Checked against 650/301LV BIOS */
void
SiS_SetGroup5(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, USHORT BaseAddr,
              UCHAR *ROMAddr, USHORT ModeNo, USHORT ModeIdIndex)
d7991 5
a7995 5
  if(SiS_Pr->SiS_ModeType == ModeVGA){
    if(!(SiS_Pr->SiS_VBInfo & (SetInSlaveMode | LoadDACFlag))){
      SiS_EnableCRT2(SiS_Pr);
      SiS_LoadDAC(SiS_Pr,HwDeviceExtension,ROMAddr,ModeNo,ModeIdIndex);
    }
a7996 1
  return;
d7999 7
a8005 4
/* TW: Checked against 650/LVDS and 630/301B BIOS */
void
SiS_ModCRT1CRTC(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex,PSIS_HW_DEVICE_INFO HwDeviceExtension)
d8007 2
a8008 2
  USHORT temp,tempah,i,modeflag,j;
  USHORT ResInfo,DisplayType;
d8011 2
a8012 5
  if(ModeNo <= 0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }
d8014 4
a8017 2
  temp = SiS_GetLVDSCRT1Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                            &ResInfo,&DisplayType);
d8019 4
a8022 1
  if(temp == 0) return;
d8024 2
a8025 3
  /* TW: Inserted from 630/LVDS BIOS */
  if(HwDeviceExtension->jChipType < SIS_315H) {
     if(SiS_Pr->SiS_SetFlag & CRT2IsVGA) return;
d8030 10
a8039 10
    case 1 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1;          break;
    case 2 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_1;         break;
    case 3 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_1_H;         break;
    case 4 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1_H;        break;
    case 5 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_1_H;       break;
    case 6 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_2;           break;
    case 7 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_2;          break;
    case 8 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_2;         break;
    case 9 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_2_H;         break;
    case 10: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_2_H;        break;
d8064 10
d8078 1
a8078 1
  SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);                        /*unlock cr0-7  */
d8080 2
a8081 2
  tempah = (LVDSCRT1Ptr+ResInfo)->CR[0];
  SiS_SetReg1(SiS_Pr->SiS_P3d4,0x00,tempah);
d8084 2
a8085 2
    tempah = (LVDSCRT1Ptr+ResInfo)->CR[j];
    SiS_SetReg1(SiS_Pr->SiS_P3d4,i,tempah);
d8088 2
a8089 2
    tempah = (LVDSCRT1Ptr+ResInfo)->CR[j];
    SiS_SetReg1(SiS_Pr->SiS_P3d4,i,tempah);
d8092 2
a8093 2
    tempah = (LVDSCRT1Ptr+ResInfo)->CR[j];
    SiS_SetReg1(SiS_Pr->SiS_P3d4,i,tempah);
d8096 2
a8097 2
    tempah = (LVDSCRT1Ptr+ResInfo)->CR[j];
    SiS_SetReg1(SiS_Pr->SiS_P3d4,i,tempah);
d8100 2
a8101 2
    tempah = (LVDSCRT1Ptr+ResInfo)->CR[j];
    SiS_SetReg1(SiS_Pr->SiS_P3c4,i,tempah);
d8104 1
a8104 1
  tempah = (LVDSCRT1Ptr+ResInfo)->CR[14];
d8106 1
a8106 1
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0x1f,tempah);     	/* TW: Modfied (650/LVDS); Was SetReg(tempah) */
d8108 1
a8108 1
  tempah = (LVDSCRT1Ptr+ResInfo)->CR[14];
d8111 1
a8111 3
  if(modeflag & DoubleScanMode){
    	tempah |= 0x080;
  }
d8113 1
d8115 3
a8117 8
  /* TW: Inserted from 650/LVDS BIOS */
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(modeflag & HalfDCLK)
        SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);
  }

  return;
}
d8119 3
a8121 5
#if 0 /* TW: Unused */
/*301b*/
void
SiS_CHACRT1CRTC(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex)
d8123 3
a8125 3
  USHORT temp,tempah,i,modeflag,j;
  USHORT ResInfo,DisplayType;
  SiS_LVDSCRT1DataStruct *LVDSCRT1Ptr=NULL;
d8127 8
a8134 2
  if(ModeNo<=0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;      /* si+St_ResInfo */
d8136 2
a8137 1
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;     /* si+Ext_ResInfo */
d8140 2
a8141 5
  temp=SiS_GetLVDSCRT1Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                       &ResInfo,&DisplayType);
  if(temp==0){
    return;
  }
d8143 6
a8148 163
  switch(DisplayType) {
    case 0 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_1;           break;
    case 1 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1;          break;
    case 2 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_1;         break;
    case 3 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_1_H;         break;
    case 4 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1_H;        break;
    case 5 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_1_H;       break;
    case 6 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_2;           break;
    case 7 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_2;          break;
    case 8 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_2;         break;
    case 9 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_2_H;         break;
    case 10: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_2_H;        break;
    case 11: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_2_H;       break;
    case 12: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1XXXxXXX_1;           break;
    case 13: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1XXXxXXX_1_H;         break;
    case 14: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11400x1050_1;         break;
    case 15: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11400x1050_1_H;       break;
    case 16: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11400x1050_2;         break;
    case 17: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11400x1050_2_H;       break;
    case 18: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1UNTSC;               break;
    case 19: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1ONTSC;               break;
    case 20: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1UPAL;                break;
    case 21: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1OPAL;                break;
    case 22: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1320x480_1;           break; /* FSTN */
    case 99: LVDSCRT1Ptr = SiS_Pr->SiS_CHTVCRT1OPAL;                break;
  }

  tempah=(UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3d4,0x11);                        /*unlock cr0-7  */
  tempah=tempah&0x7F;
  SiS_SetReg1(SiS_Pr->SiS_P3d4,0x11,tempah);
  tempah = (LVDSCRT1Ptr+ResInfo)->CR[0];
  SiS_SetReg1(SiS_Pr->SiS_P3d4,0x0,tempah);
  for(i=0x02,j=1;i<=0x05;i++,j++){
    tempah = (LVDSCRT1Ptr+ResInfo)->CR[j];
    SiS_SetReg1(SiS_Pr->SiS_P3d4,i,tempah);
  }
  for(i=0x06,j=5;i<=0x07;i++,j++){
    tempah = (LVDSCRT1Ptr+ResInfo)->CR[j];
    SiS_SetReg1(SiS_Pr->SiS_P3d4,i,tempah);
  }
  for(i=0x10,j=7;i<=0x11;i++,j++){
    tempah = (LVDSCRT1Ptr+ResInfo)->CR[j];
    SiS_SetReg1(SiS_Pr->SiS_P3d4,i,tempah);
  }
  for(i=0x15,j=9;i<=0x16;i++,j++){
    tempah = (LVDSCRT1Ptr+ResInfo)->CR[j];
    SiS_SetReg1(SiS_Pr->SiS_P3d4,i,tempah);
  }

  for(i=0x0A,j=11;i<=0x0C;i++,j++){
    tempah = (LVDSCRT1Ptr+ResInfo)->CR[j];
    SiS_SetReg1(SiS_Pr->SiS_P3c4,i,tempah);
  }

  tempah = (LVDSCRT1Ptr+ResInfo)->CR[14];
  tempah=tempah&0x0E0;
  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x0E,tempah);

  tempah = (LVDSCRT1Ptr+ResInfo)->CR[14];
  tempah=tempah&0x01;
  tempah=tempah<<5;
  if(modeflag&DoubleScanMode){
    	tempah=tempah|0x080;
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,~0x020,tempah);
  return;
}
#endif

/* TW: Checked against 650/LVDS BIOS: modified for new panel resolutions */
BOOLEAN
SiS_GetLVDSCRT1Ptr(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
		   USHORT RefreshRateTableIndex,USHORT *ResInfo,
		   USHORT *DisplayType)
 {
  USHORT tempbx,modeflag=0;
  USHORT Flag,CRT2CRTC;

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
      /* TW: Inserted from 650/LVDS BIOS */
      if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
          if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) return 0;
      }
  }

  if(ModeNo <= 0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
    	CRT2CRTC = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	CRT2CRTC = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }

  Flag = 1;
  tempbx = 0;
  if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
    if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
      Flag = 0;
      tempbx = 18;
      if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) tempbx++;
      if(SiS_Pr->SiS_VBInfo & SetPALTV) {
      		tempbx += 2;
		if(SiS_Pr->SiS_CHSOverScan) tempbx = 99;
		if(SiS_Pr->SiS_CHPALM) {
			tempbx = 18;  /* PALM uses NTSC data */
			if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) tempbx++;
		} else if(SiS_Pr->SiS_CHPALN) {
			tempbx = 20;  /* PALN uses PAL data  */
			if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) tempbx++;
		}
      }
    }
  }
  if(Flag) {
    tempbx = SiS_Pr->SiS_LCDResInfo;
    tempbx -= SiS_Pr->SiS_PanelMinLVDS;
    if(SiS_Pr->SiS_LCDResInfo <= SiS_Pr->SiS_Panel1280x1024) {
       if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) tempbx += 6;
       if(modeflag & HalfDCLK) tempbx += 3;
    } else {
       if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
           tempbx = 14;
	   if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
       } else if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
           tempbx = 12;
	   if(modeflag & HalfDCLK) tempbx++;
       } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
           tempbx = 23;
	   if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
       } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) {
           tempbx = 27;
	   if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
       } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
           tempbx = 36;
	   if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
       }
    }
  }
  if(SiS_Pr->SiS_IF_DEF_FSTN){
     if(SiS_Pr->SiS_LCDResInfo==SiS_Pr->SiS_Panel320x480){
       tempbx=22;
     }
  }
  *ResInfo = CRT2CRTC & 0x3F;
  *DisplayType = tempbx;
  return 1;
}

/* TW: Checked against 650/LVDS (1.10a, 1.10.07), 630/301B (I/II) and 630/LVDS BIOS */
void
SiS_SetCRT2ECLK(SiS_Private *SiS_Pr, UCHAR *ROMAddr, USHORT ModeNo,USHORT ModeIdIndex,
           USHORT RefreshRateTableIndex,PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT tempah,tempal,pushax;
  USHORT vclkindex=0;
  
  if(HwDeviceExtension->jChipType < SIS_315H) {
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
        if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) return;
d8152 1
a8152 14
  if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) || (SiS_Pr->SiS_IF_DEF_TRUMPION == 1)) {
	SiS_Pr->SiS_SetFlag &= (~ProgrammingCRT2);
        tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
    	tempal &= 0x3F;
	if(tempal == 2) RefreshRateTableIndex--;
	vclkindex = SiS_GetVCLK2Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
                               RefreshRateTableIndex,HwDeviceExtension);
	SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
  } else {
        vclkindex = SiS_GetVCLK2Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
                               RefreshRateTableIndex,HwDeviceExtension);
  }
  
  tempal = 0x02B;
d8155 1
a8155 1
    	tempal += 3;
a8157 30
  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x05,0x86);
  pushax = tempal;
  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x31,0x20);
  tempah = SiS_Pr->SiS_VCLKData[vclkindex].SR2B;
  SiS_SetReg1(SiS_Pr->SiS_P3c4,tempal,tempah);
  tempal++;
  tempah = SiS_Pr->SiS_VCLKData[vclkindex].SR2C;
  SiS_SetReg1(SiS_Pr->SiS_P3c4,tempal,tempah);
  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x31,0x10);
  tempal = pushax;
  tempah = SiS_Pr->SiS_VCLKData[vclkindex].SR2B;
  SiS_SetReg1(SiS_Pr->SiS_P3c4,tempal,tempah);
  tempal++;
  tempah = SiS_Pr->SiS_VCLKData[vclkindex].SR2C;
  SiS_SetReg1(SiS_Pr->SiS_P3c4,tempal,tempah);
  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x31,0x00);
  tempal = pushax;
  tempah = SiS_Pr->SiS_VCLKData[vclkindex].SR2B;
  SiS_SetReg1(SiS_Pr->SiS_P3c4,tempal,tempah);
  tempal++;
  tempah = SiS_Pr->SiS_VCLKData[vclkindex].SR2C;
  SiS_SetReg1(SiS_Pr->SiS_P3c4,tempal,tempah);
  return;
}

#if 0  /* TW: Not used */
void
SiS_SetDefCRT2ExtRegs(SiS_Private *SiS_Pr, USHORT BaseAddr)
{
  USHORT  temp;
d8159 9
a8167 10
  if(SiS_Pr->SiS_IF_DEF_LVDS==0) {
    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x02,0x40);
    SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x10,0x80);
    temp=(UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x16);
    temp &= 0xC3;
    SiS_SetReg1(SiS_Pr->SiS_P3d4,0x35,temp);
  } else {
    SiS_SetReg1(SiS_Pr->SiS_P3d4,0x32,0x02);
    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x02,0x00);
  }
a8168 1
#endif
d8170 3
a8172 1
/* TW: Start of Chrontel 70xx functions ---------------------- */
d8174 2
a8175 3
/* Set-up the Chrontel Registers */
void
SiS_SetCHTVReg(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
d8183 1
a8183 1
    	tempcl = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d8185 1
a8185 1
    	tempcl = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d8188 2
a8189 2
  if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) TVType += 1;
  if(SiS_Pr->SiS_VBInfo & SetPALTV) {
d8191 4
a8194 2
	if(SiS_Pr->SiS_CHSOverScan) TVType = 8;
	if(SiS_Pr->SiS_CHPALM) {
d8196 2
a8197 2
		if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) TVType += 1;
	} else if(SiS_Pr->SiS_CHPALN) {
d8199 1
a8199 1
		if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) TVType += 1;
d8203 10
a8212 10
    	case  0: CHTVRegData = SiS_Pr->SiS_CHTVReg_UNTSC; break;
    	case  1: CHTVRegData = SiS_Pr->SiS_CHTVReg_ONTSC; break;
    	case  2: CHTVRegData = SiS_Pr->SiS_CHTVReg_UPAL;  break;
    	case  3: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPAL;  break;
	case  4: CHTVRegData = SiS_Pr->SiS_CHTVReg_UPALM; break;
    	case  5: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPALM; break;
    	case  6: CHTVRegData = SiS_Pr->SiS_CHTVReg_UPALN; break;
    	case  7: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPALN; break;
	case  8: CHTVRegData = SiS_Pr->SiS_CHTVReg_SOPAL; break;
	default: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPAL;  break;
d8218 3
a8220 1
     /* Chrontel 7005 */
d8222 1
a8222 1
     /* TW: We don't support modes >800x600 */
d8225 3
a8227 3
     if(SiS_Pr->SiS_VBInfo & SetPALTV) {
    	SiS_SetCH700x(SiS_Pr,0x4304);   /* TW: 0x40=76uA (PAL); 0x03=15bit non-multi RGB*/
    	SiS_SetCH700x(SiS_Pr,0x6909);	/* TW: Black level for PAL (105)*/
d8229 2
a8230 2
    	SiS_SetCH700x(SiS_Pr,0x0304);   /* TW: upper nibble=71uA (NTSC), 0x03=15bit non-multi RGB*/
    	SiS_SetCH700x(SiS_Pr,0x7109);	/* TW: Black level for NTSC (113)*/
d8234 1
a8234 1
     tempbx=((temp&0x00FF)<<8)|0x00;	/* TW: Mode register */
d8237 1
a8237 1
     tempbx=((temp&0x00FF)<<8)|0x07;	/* TW: Start active video register */
d8240 1
a8240 1
     tempbx=((temp&0x00FF)<<8)|0x08;	/* TW: Position overflow register */
d8243 1
a8243 1
     tempbx=((temp&0x00FF)<<8)|0x0A;	/* TW: Horiz Position register */
d8246 1
a8246 1
     tempbx=((temp&0x00FF)<<8)|0x0B;	/* TW: Vertical Position register */
d8249 1
a8249 1
     /* TW: Set minimum flicker filter for Luma channel (SR1-0=00),
d8256 1
a8256 1
     /* TW: Set video bandwidth
d8265 1
a8265 1
     /* TW: Register 0x3D does not exist in non-macrovision register map
d8268 3
a8270 1
     /* SiS_SetCH70xx(SiS_Pr,0x003D); */
d8272 1
a8272 1
     /* TW: Register 0x10 only contains 1 writable bit (S0) for sensing,
d8277 1
a8277 1
     /* TW: Register 0x11 only contains 3 writable bits (S0-S2) for
d8282 1
a8282 1
     /* TW: Clear DSEN
d8286 2
a8287 2
     if(!(SiS_Pr->SiS_VBInfo & SetPALTV)) {		/* ---- NTSC ---- */
       if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) {
d8291 11
a8301 13
         } else {
           if(resindex == 0x05) {    			/* 800x600 overscan: Mode 23 */
             SiS_SetCH70xxANDOR(SiS_Pr,0x0118,0xF0);	/* 0x18-0x1f: FSCI 469,762,048 */
             SiS_SetCH70xxANDOR(SiS_Pr,0x0C19,0xF0);
             SiS_SetCH70xxANDOR(SiS_Pr,0x001A,0xF0);
             SiS_SetCH70xxANDOR(SiS_Pr,0x001B,0xF0);
             SiS_SetCH70xxANDOR(SiS_Pr,0x001C,0xF0);
             SiS_SetCH70xxANDOR(SiS_Pr,0x001D,0xF0);
             SiS_SetCH70xxANDOR(SiS_Pr,0x001E,0xF0);
             SiS_SetCH70xxANDOR(SiS_Pr,0x001F,0xF0);
             SiS_SetCH70xxANDOR(SiS_Pr,0x0120,0xEF);     /* Loop filter on for mode 23 */
             SiS_SetCH70xxANDOR(SiS_Pr,0x0021,0xFE);     /* ACIV off, need to set FSCI */
           }
d8307 15
a8321 13
         } else {
           if(resindex == 0x05) {   			 /* ----- 800x600 underscan: Mode 24 */
             SiS_SetCH70xxANDOR(SiS_Pr,0x0118,0xF0);     /* (FSCI was 0x1f1c71c7 - this is for mode 22) */
             SiS_SetCH70xxANDOR(SiS_Pr,0x0919,0xF0);	 /* FSCI for mode 24 is 428,554,851 */
             SiS_SetCH70xxANDOR(SiS_Pr,0x081A,0xF0);
             SiS_SetCH70xxANDOR(SiS_Pr,0x0b1B,0xF0);
             SiS_SetCH70xxANDOR(SiS_Pr,0x031C,0xF0);
             SiS_SetCH70xxANDOR(SiS_Pr,0x0a1D,0xF0);
             SiS_SetCH70xxANDOR(SiS_Pr,0x061E,0xF0);
             SiS_SetCH70xxANDOR(SiS_Pr,0x031F,0xF0);
             SiS_SetCH70xxANDOR(SiS_Pr,0x0020,0xEF);     /* loop filter off for mode 24 */
             SiS_SetCH70xxANDOR(SiS_Pr,0x0021,0xFE);	 /* ACIV off, need to set FSCI */
           }
d8324 3
a8326 3
     } else {				/* ---- PAL ---- */
           /* TW: We don't play around with FSCI in PAL mode */
         if (resindex == 0x04) {
d8334 2
d8339 3
a8341 1
     /* Chrontel 7019 */
d8343 1
a8343 1
     /* TW: We don't support modes >1024x768 */
d8347 4
a8350 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x00;
d8354 1
a8354 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x01;
d8358 1
a8358 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x02;
d8362 1
a8362 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x04;
d8366 1
a8366 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x03;
d8370 1
a8370 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x05;
d8374 1
a8374 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x06;
d8378 4
a8381 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x07;
d8385 1
a8385 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x08;
d8389 1
a8389 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x15;
d8393 1
a8393 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x1f;
d8397 1
a8397 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x0c;
d8401 1
a8401 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x0d;
d8405 9
a8413 1
     tempbx=((temp & 0x00FF) <<8 ) | 0x0e;
d8416 66
a8481 3
     temp = CHTVRegData[resindex].Reg[14];
     tempbx=((temp & 0x00FF) <<8 ) | 0x0f;
     SiS_SetCH701x(SiS_Pr,tempbx);
d8483 19
a8501 3
     temp = CHTVRegData[resindex].Reg[15];
     tempbx=((temp & 0x00FF) <<8 ) | 0x10;
     SiS_SetCH701x(SiS_Pr,tempbx);
d8503 2
d8508 2
a8509 4
/* TW: Chrontel 701x functions ================================= */

void
SiS_SetCH701xForLCD(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr)
d8511 18
a8528 6
  UCHAR regtable[]  = { 0x1c, 0x5f, 0x64, 0x6f, 0x70, 0x71,
                        0x72, 0x73, 0x74, 0x76, 0x78, 0x7d };
  UCHAR table1024[] = { 0x60, 0x02, 0x00, 0x07, 0x40, 0xed,
                        0xa3, 0xc8, 0xc7, 0xac, 0x60, 0x02 };
  UCHAR table1400[] = { 0x60, 0x03, 0x11, 0x00, 0x40, 0xef,
                        0xad, 0xdb, 0xf6, 0xac, 0x60, 0x02 };
d8533 12
a8544 4
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
      tableptr = table1400;
  } else {
      tableptr = table1024;
d8546 1
d8551 1
a8551 1
        if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1400x1050) return;
d8553 4
a8556 1
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) return;
d8559 5
a8563 1
  for(i=0; i<0x0c; i++) {
d8566 1
a8566 1
  SiS_ChrontelPowerSequencing(SiS_Pr);
d8569 1
a8569 2
  SiS_SetCH701x(SiS_Pr,(tempbh << 8) | 0x1e);	
}
d8571 11
a8581 19
void
SiS_ChrontelPowerSequencing(SiS_Private *SiS_Pr)
{
  UCHAR regtable[]  = { 0x67, 0x68, 0x69, 0x6a, 0x6b };
  UCHAR table1024[] = { 0x01, 0x02, 0x01, 0x01, 0x02 };
  UCHAR table1400[] = { 0x01, 0x02, 0x01, 0x01, 0x02 };
  UCHAR *tableptr = NULL;
  int i;

  /* Set up Power up/down timing */
  
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
      tableptr = table1400;
  } else {
      tableptr = table1024;
  }

  for(i=0; i<5; i++) {
     SiS_SetCH701x(SiS_Pr,(tableptr[i] << 8) | regtable[i]);
d8585 2
a8586 2
void
SiS_Chrontel701xBLOn(SiS_Private *SiS_Pr)
d8588 1
a8588 1
  USHORT temp;
d8590 10
a8599 6
  /* TW: Enable Chrontel 7019 LCD panel backlight */
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
        temp = SiS_GetCH701x(SiS_Pr,0x66);
        temp |= 0x20;
	SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
  }
d8603 1
a8603 1
SiS_Chrontel701xOn(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr)
d8608 6
a8613 1
     if(SiS_IsYPbPr(SiS_Pr,HwDeviceExtension, BaseAddr)) {
d8616 1
a8616 1
	temp |= 0x80;	/* TW: Enable YPrPb (HDTV) */
d8619 1
a8619 1
     if(SiS_IsChScart(SiS_Pr,HwDeviceExtension, BaseAddr)) {
d8622 1
a8622 1
	temp |= 0xc0;	/* TW: Enable SCART + CVBS */
d8625 19
a8643 14
     SiS_SetCH701x(SiS_Pr,0x2049);   			/* TW: Enable TV path */
     temp = SiS_GetCH701x(SiS_Pr,0x49);
     if(SiS_IsYPbPr(SiS_Pr,HwDeviceExtension, BaseAddr)) {
        temp = SiS_GetCH701x(SiS_Pr,0x73);
	temp |= 0x60;
	SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x73);
     }
     temp = SiS_GetCH701x(SiS_Pr,0x47);
     temp &= 0x7f;
     SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
     SiS_LongDelay(SiS_Pr,2);
     temp = SiS_GetCH701x(SiS_Pr,0x47);
     temp |= 0x80;
     SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
d8648 1
a8648 14
SiS_Chrontel701xBLOff(SiS_Private *SiS_Pr)
{
  USHORT temp;

  /* TW: Disable Chrontel 7019 LCD panel backlight */
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
        temp = SiS_GetCH701x(SiS_Pr,0x66);
        temp &= 0xDF;
	SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
  }
}

void
SiS_Chrontel701xOff(SiS_Private *SiS_Pr)
d8652 1
d8654 6
a8660 1
	/* TW: Complete power down of LVDS */
d8665 1
d8669 2
a8670 2
void
SiS_ChrontelResetDB(SiS_Private *SiS_Pr)
d8672 46
a8717 4
     /* TW: Reset Chrontel 7019 datapath */
     SiS_SetCH701x(SiS_Pr,0x1048);
     SiS_LongDelay(SiS_Pr,1);
     SiS_SetCH701x(SiS_Pr,0x1848);
d8721 1
a8721 1
SiS_ChrontelDoSomething4(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, USHORT BaseAddr)
d8725 21
a8745 11
     SiS_SetCH701x(SiS_Pr,0xaf76);  /* Power up LVDS block */
     temp = SiS_GetCH701x(SiS_Pr,0x49);
     temp &= 1;
     if(temp != 1) {  /* TV block powered? (0 = yes, 1 = no) */
	temp = SiS_GetCH701x(SiS_Pr,0x47);
	temp &= 0x70;
	SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);  /* enable VSYNC */
	SiS_LongDelay(SiS_Pr,3);
	temp = SiS_GetCH701x(SiS_Pr,0x47);
	temp |= 0x80;
	SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);  /* disable VSYNC */
d8749 2
a8750 3
void
SiS_ChrontelDoSomething3(SiS_Private *SiS_Pr, USHORT ModeNo, PSIS_HW_DEVICE_INFO HwDeviceExtension,
                         USHORT BaseAddr)
d8754 43
a8796 20
     temp1 = 0;
     temp = SiS_GetCH701x(SiS_Pr,0x61);
     if(temp < 2) {
          temp++;
	  SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x61);
	  temp1 = 1;
     }
     SiS_SetCH701x(SiS_Pr,0xac76);
     temp = SiS_GetCH701x(SiS_Pr,0x66);
     temp |= 0x5f;
     SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
     if(ModeNo > 0x13) {
         if(SiS_WeHaveBacklightCtrl(SiS_Pr,HwDeviceExtension, BaseAddr)) {
	    SiS_GenericDelay(SiS_Pr,0x3ff);
	 } else {
	    SiS_GenericDelay(SiS_Pr,0x2ff);
	 }
     } else {
         if(!temp1)
	    SiS_GenericDelay(SiS_Pr,0x2ff);
a8797 7
     temp = SiS_GetCH701x(SiS_Pr,0x76);
     temp |= 0x03;
     SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x76);
     temp = SiS_GetCH701x(SiS_Pr,0x66);
     temp &= 0x7f;
     SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
     SiS_LongDelay(SiS_Pr,1);
d8800 2
a8801 2
void
SiS_ChrontelDoSomething2(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, USHORT BaseAddr)
d8811 1
a8811 1
       temp &= 0x04;
d8814 6
a8819 1
       SiS_SetCH701xForLCD(SiS_Pr,HwDeviceExtension,BaseAddr);
d8823 1
a8823 1
	   SiS_ChrontelResetDB(SiS_Pr);
d8829 1
a8829 1
       temp &= 0xfb;
d8833 1
a8833 1
       temp |= 0x04;
d8835 5
a8839 1
       SiS_SetCH701x(SiS_Pr,0x6078);
d8843 1
a8843 1
    SiS_SetCH701x(SiS_Pr,0x0077);
d8847 1
a8847 2
SiS_ChrontelDoSomething1(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,
                         USHORT BaseAddr)
d8856 243
a9098 1
     SiS_ChrontelResetDB(SiS_Pr);
d9100 3
a9102 1
     SiS_ChrontelDoSomething2(SiS_Pr,HwDeviceExtension,BaseAddr);
d9104 13
a9116 2
     temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x34);
     SiS_ChrontelDoSomething3(SiS_Pr,temp,HwDeviceExtension,BaseAddr);
d9118 7
a9124 1
     SiS_SetCH701x(SiS_Pr,0xaf76);
d9127 14
a9140 1
/* TW: End of Chrontel 701x functions ==================================== */
d9142 56
a9197 1
/* TW: Generic Read/write routines for Chrontel ========================== */
d9199 1
a9199 1
/* TW: The Chrontel is connected to the 630/730 via
d9202 2
a9203 2
 * On 630(S)T chipset, the index changed from 0x11 to 0x0a,
 * possibly for working around the DDC problems
d9206 30
d9237 1
a9237 1
SiS_SetCH70xx(SiS_Private *SiS_Pr, USHORT tempbx)
d9239 6
a9244 4
   if (SiS_Pr->SiS_IF_DEF_CH70xx == 1)
      SiS_SetCH700x(SiS_Pr,tempbx);
   else
      SiS_SetCH701x(SiS_Pr,tempbx);
d9246 1
d9248 1
a9248 1
/* TW: Write to Chrontel 700x */
d9253 1
a9253 1
  USHORT tempah,temp,i;
d9256 4
a9259 23
     SiS_Pr->SiS_DDC_Index = 0x11;		   /* TW: Bit 0 = SC;  Bit 1 = SD */
     SiS_Pr->SiS_DDC_Data  = 0x02;                 /* Bitmask in IndexReg for Data */
     SiS_Pr->SiS_DDC_Clk   = 0x01;                 /* Bitmask in IndexReg for Clk */
     SiS_Pr->SiS_DDC_DataShift = 0x00;
     SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;  	   /* TW: DAB (Device Address Byte) */
  }

  for(i=0;i<10;i++) {	/* TW: Do only 10 attempts to write */
    /* SiS_SetSwitchDDC2(SiS_Pr); */
    if(SiS_SetStart(SiS_Pr)) continue;		/* TW: Set start condition */
    tempah = SiS_Pr->SiS_DDC_DeviceAddr;
    temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* TW: Write DAB (S0=0=write) */
    if(temp) continue;				/* TW:    (ERROR: no ack) */
    tempah = tempbx & 0x00FF;			/* TW: Write RAB */
    tempah |= 0x80;                             /* TW: (set bit 7, see datasheet) */
    temp = SiS_WriteDDC2Data(SiS_Pr,tempah);
    if(temp) continue;				/* TW:    (ERROR: no ack) */
    tempah = (tempbx & 0xFF00) >> 8;
    temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* TW: Write data */
    if(temp) continue;				/* TW:    (ERROR: no ack) */
    if(SiS_SetStop(SiS_Pr)) continue;		/* TW: Set stop condition */
    SiS_Pr->SiS_ChrontelInit = 1;
    return;
d9262 3
a9264 3
  /* TW: For 630ST */
  if(!(SiS_Pr->SiS_ChrontelInit)) {
     SiS_Pr->SiS_DDC_Index = 0x0a;		/* TW: Bit 7 = SC;  Bit 6 = SD */
d9267 1
a9267 2
     SiS_Pr->SiS_DDC_DataShift = 0x00;
     SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;  	/* TW: DAB (Device Address Byte) */
d9269 1
a9269 17
     for(i=0;i<10;i++) {	/* TW: Do only 10 attempts to write */
       /* SiS_SetSwitchDDC2(SiS_Pr); */
       if (SiS_SetStart(SiS_Pr)) continue;	/* TW: Set start condition */
       tempah = SiS_Pr->SiS_DDC_DeviceAddr;
       temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* TW: Write DAB (S0=0=write) */
       if(temp) continue;			/* TW:    (ERROR: no ack) */
       tempah = tempbx & 0x00FF;		/* TW: Write RAB */
       tempah |= 0x80;                          /* TW: (set bit 7, see datasheet) */
       temp = SiS_WriteDDC2Data(SiS_Pr,tempah);
       if(temp) continue;			/* TW:    (ERROR: no ack) */
       tempah = (tempbx & 0xFF00) >> 8;
       temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* TW: Write data */
       if(temp) continue;			/* TW:    (ERROR: no ack) */
       if(SiS_SetStop(SiS_Pr)) continue;	/* TW: Set stop condition */
       SiS_Pr->SiS_ChrontelInit = 1;
       return;
    }
d9273 1
a9273 1
/* TW: Write to Chrontel 701x */
d9278 1
a9278 3
  USHORT tempah,temp,i;

  SiS_Pr->SiS_DDC_Index = 0x11;			/* TW: Bit 0 = SC;  Bit 1 = SD */
d9281 18
a9298 2
  SiS_Pr->SiS_DDC_DataShift = 0x00;
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;  		/* TW: DAB (Device Address Byte) */
d9300 20
a9319 13
  for(i=0;i<10;i++) {	/* TW: Do only 10 attempts to write */
    if (SiS_SetStart(SiS_Pr)) continue;		/* TW: Set start condition */
    tempah = SiS_Pr->SiS_DDC_DeviceAddr;
    temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* TW: Write DAB (S0=0=write) */
    if(temp) continue;				/* TW:    (ERROR: no ack) */
    tempah = tempbx & 0x00FF;
    temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* TW: Write RAB */
    if(temp) continue;				/* TW:    (ERROR: no ack) */
    tempah = (tempbx & 0xFF00) >> 8;
    temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* TW: Write data */
    if(temp) continue;				/* TW:    (ERROR: no ack) */
    if(SiS_SetStop(SiS_Pr)) continue;		/* TW: Set stop condition */
    return;
d9321 1
d9324 2
a9325 2
/* TW: Read from Chrontel 70xx */
/* Parameter is [Register no (S7-S0)] */
d9327 1
a9327 1
SiS_GetCH70xx(SiS_Private *SiS_Pr, USHORT tempbx)
d9329 7
a9335 4
   if (SiS_Pr->SiS_IF_DEF_CH70xx == 1)
      return(SiS_GetCH700x(SiS_Pr,tempbx));
   else
      return(SiS_GetCH701x(SiS_Pr,tempbx));
d9337 1
d9339 1
a9339 1
/* TW: Read from Chrontel 700x */
d9344 3
a9346 1
  USHORT tempah,temp,i;
d9349 1
a9349 1
     SiS_Pr->SiS_DDC_Index = 0x11;		/* TW: Bit 0 = SC;  Bit 1 = SD */
d9352 1
a9352 2
     SiS_Pr->SiS_DDC_DataShift = 0x00;
     SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;		/* TW: DAB */
d9357 7
a9363 26
  for(i=0;i<20;i++) {	/* TW: Do only 20 attempts to read */
    /* SiS_SetSwitchDDC2(SiS_Pr); */
    if(SiS_SetStart(SiS_Pr)) continue;		/* TW: Set start condition */
    tempah = SiS_Pr->SiS_DDC_DeviceAddr;
    temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* TW: Write DAB (S0=0=write) */
    if(temp) continue;				/* TW:        (ERROR: no ack) */
    tempah = SiS_Pr->SiS_DDC_ReadAddr | 0x80;	/* TW: Write RAB | 0x80 */
    temp = SiS_WriteDDC2Data(SiS_Pr,tempah);
    if(temp) continue;				/* TW:        (ERROR: no ack) */
    if (SiS_SetStart(SiS_Pr)) continue;		/* TW: Re-start */
    tempah = SiS_Pr->SiS_DDC_DeviceAddr | 0x01; /* DAB | 0x01 = Read */
    temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* TW: DAB (S0=1=read) */
    if(temp) continue;				/* TW:        (ERROR: no ack) */
    tempah = SiS_ReadDDC2Data(SiS_Pr,tempah);	/* TW: Read byte */
    if (SiS_SetStop(SiS_Pr)) continue;		/* TW: Stop condition */
    SiS_Pr->SiS_ChrontelInit = 1;
    return(tempah);
  }

  /* TW: For 630ST */
  if(!SiS_Pr->SiS_ChrontelInit) {
     SiS_Pr->SiS_DDC_Index = 0x0a;		/* TW: Bit 0 = SC;  Bit 1 = SD */
     SiS_Pr->SiS_DDC_Data  = 0x80;              /* Bitmask in IndexReg for Data */
     SiS_Pr->SiS_DDC_Clk   = 0x40;              /* Bitmask in IndexReg for Clk */
     SiS_Pr->SiS_DDC_DataShift = 0x00;
     SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;  	/* TW: DAB (Device Address Byte) */
d9365 1
a9365 18
     for(i=0;i<20;i++) {	/* TW: Do only 20 attempts to read */
       /* SiS_SetSwitchDDC2(SiS_Pr); */
       if(SiS_SetStart(SiS_Pr)) continue;		/* TW: Set start condition */
       tempah = SiS_Pr->SiS_DDC_DeviceAddr;
       temp = SiS_WriteDDC2Data(SiS_Pr,tempah);		/* TW: Write DAB (S0=0=write) */
       if(temp) continue;				/* TW:        (ERROR: no ack) */
       tempah = SiS_Pr->SiS_DDC_ReadAddr | 0x80;	/* TW: Write RAB | 0x80 */
       temp = SiS_WriteDDC2Data(SiS_Pr,tempah);
       if(temp) continue;				/* TW:        (ERROR: no ack) */
       if (SiS_SetStart(SiS_Pr)) continue;		/* TW: Re-start */
       tempah = SiS_Pr->SiS_DDC_DeviceAddr | 0x01; 	/* DAB | 0x01 = Read */
       temp = SiS_WriteDDC2Data(SiS_Pr,tempah);		/* TW: DAB (S0=1=read) */
       if(temp) continue;				/* TW:        (ERROR: no ack) */
       tempah = SiS_ReadDDC2Data(SiS_Pr,tempah);	/* TW: Read byte */
       if (SiS_SetStop(SiS_Pr)) continue;		/* TW: Stop condition */
       SiS_Pr->SiS_ChrontelInit = 1;
       return(tempah);
     }
d9367 1
a9367 1
  return(0xFFFF);
d9370 1
a9370 1
/* TW: Read from Chrontel 701x */
d9375 1
a9375 3
  USHORT tempah,temp,i;

  SiS_Pr->SiS_DDC_Index = 0x11;			/* TW: Bit 0 = SC;  Bit 1 = SD */
d9378 3
a9380 2
  SiS_Pr->SiS_DDC_DataShift = 0x00;
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;		/* TW: DAB */
d9383 12
a9394 17
   for(i=0;i<20;i++) {	/* TW: Do only 20 attempts to read */
    if(SiS_SetStart(SiS_Pr)) continue;		/* TW: Set start condition */
    tempah = SiS_Pr->SiS_DDC_DeviceAddr;
    temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* TW: Write DAB (S0=0=write) */
    if(temp) continue;				/* TW:        (ERROR: no ack) */
    tempah = SiS_Pr->SiS_DDC_ReadAddr;		/* TW: Write RAB */
    temp = SiS_WriteDDC2Data(SiS_Pr,tempah);
    if(temp) continue;				/* TW:        (ERROR: no ack) */
    if (SiS_SetStart(SiS_Pr)) continue;		/* TW: Re-start */
    tempah = SiS_Pr->SiS_DDC_DeviceAddr | 0x01; /* DAB | 0x01 = Read */
    temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* TW: DAB (S0=1=read) */
    if(temp) continue;				/* TW:        (ERROR: no ack) */
    tempah = SiS_ReadDDC2Data(SiS_Pr,tempah);	/* TW: Read byte */
    SiS_SetStop(SiS_Pr);			/* TW: Stop condition */
    return(tempah);
   }
  return 0xFFFF;
d9397 1
a9397 2
#ifdef LINUX_XF86
/* TW: Our own DDC functions */
d9399 2
a9400 1
SiS_InitDDCRegs(SiS_Private *SiS_Pr, SISPtr pSiS, USHORT adaptnum, USHORT DDCdatatype)
d9402 1
a9402 1
     unsigned char ddcdtype[] = { 0xa0, 0xa0, 0xa0, 0xa2, 0xa6};
d9406 7
d9421 1
a9421 1
     cr32 = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x32);
d9423 9
a9431 11
     if(pSiS->VGAEngine == SIS_300_VGA) {		/* 300 series */

        if(pSiS->VBFlags & VB_SISBRIDGE) {
	   if(myadaptnum == 0) {
	      if(!(cr32 & 0x20)) {
	         myadaptnum = 2;
		 if(!(cr32 & 0x10)) {
		    myadaptnum = 1;
		    if(!(cr32 & 0x08)) {
		       myadaptnum = 0;
		    }
d9433 1
a9433 1
              }
d9435 3
a9437 1
	}
d9439 2
d9443 1
a9443 1
	   if(pSiS->VBFlags & VB_SISBRIDGE) {
d9449 8
a9456 6
	if(cr32 & 0x80) {
           if(myadaptnum >= 1) {
	      if(!(cr32 & 0x08)) {
	          myadaptnum = 1;
		  if(!(cr32 & 0x10)) return 0xFFFF;
              }
d9463 1
a9463 4
	SiS_Pr->SiS_DDC_Data = 0x02 << temp;
        SiS_Pr->SiS_DDC_Clk  = 0x01 << temp;

     } else {						/* 310/325 series */
d9465 1
a9465 1
        if(pSiS->VBFlags & (VB_30xLV|VB_30xLVX)) myadaptnum = 0;
d9467 1
a9467 12
	if(pSiS->VBFlags & VB_SISBRIDGE) {
	   if(myadaptnum == 0) {
	      if(!(cr32 & 0x20)) {
	         myadaptnum = 2;
		 if(!(cr32 & 0x10)) {
		    myadaptnum = 1;
		    if(!(cr32 & 0x08)) {
		       myadaptnum = 0;
		    }
		 }
              }
	   }
d9475 1
a9475 1
	   if(pSiS->VBFlags & VB_SISBRIDGE) {
d9481 1
a9481 1
        if(cr32 & 0x80) {
d9493 1
a9493 1
	   if(pSiS->VBFlags & VB_LVDS) flag = 0xff;
d9497 4
d9502 1
a9502 2
        SiS_Pr->SiS_DDC_Data = 0x02 << temp;
        SiS_Pr->SiS_DDC_Clk  = 0x01 << temp;
d9504 5
a9508 1
    }
d9515 7
a9521 3
   SiS_SetStart(SiS_Pr);
   if(SiS_WriteDDC2Data(SiS_Pr, SiS_Pr->SiS_DDC_DeviceAddr)) return 0xFFFF;
   if(SiS_WriteDDC2Data(SiS_Pr, SiS_Pr->SiS_DDC_SecAddr)) return 0xFFFF;
d9528 4
a9531 2
   SiS_SetStart(SiS_Pr);
   if(SiS_WriteDDC2Data(SiS_Pr, (SiS_Pr->SiS_DDC_DeviceAddr | 0x01))) return 0xFFFF;
d9548 4
a9551 2
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port, SiS_Pr->SiS_DDC_Index,
                      ~SiS_Pr->SiS_DDC_Data, SiS_Pr->SiS_DDC_Data);
d9553 4
a9556 2
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port, SiS_Pr->SiS_DDC_Index,
                      ~SiS_Pr->SiS_DDC_Data, 0);
d9565 2
a9566 1
    USHORT  temp, ret;
d9571 3
d9584 6
d9592 13
a9604 8
    temp = (unsigned char)SiS_ReadDDC2Data(SiS_Pr, 0);
    SiS_SendACK(SiS_Pr, 1);
    temp &= mask;
    if(temp == value) ret = 0;
    else {
       ret = 0xFFFF;
       if(SiS_Pr->SiS_DDC_DeviceAddr == 0xa0) {
           if(value == 0x30) ret = 0;
d9628 1
a9628 1
SiS_ReadDDC(SiS_Private *SiS_Pr, SISPtr pSiS, USHORT DDCdatatype, unsigned char *buffer)
d9633 1
a9633 1
   if(DDCdatatype > 3) return 0xFFFF;  /* incomplete! */
d9660 1
a9660 22
USHORT
SiS_ReadLCDDDC(SiS_Private *SiS_Pr, USHORT length, unsigned char *buffer)
{
   USHORT i=0, flag=0;

   length--;
   
   SiS_SetSwitchDDC2(SiS_Pr);
   if(!(SiS_PrepareDDC(SiS_Pr))) {
      for(i=0; i<length; i++) {
         buffer[i] = (unsigned char)SiS_ReadDDC2Data(SiS_Pr, 0);
         SiS_SendACK(SiS_Pr, 0);
      }
      buffer[i] = (unsigned char)SiS_ReadDDC2Data(SiS_Pr, 0);
      SiS_SendACK(SiS_Pr, 1);
   } else flag = 0xFFFF;
   
   SiS_SetStop(SiS_Pr);
   return(0);
}

/* TW: Our private DDC function
d9670 3
a9672 3
       adaptnum: 0=CRT1, 1=CRT2
                 CRT2 DDC is not supported in some cases.
       DDCdatatype: 0=Probe, 1=EDID, 2=VDIF(not supported), 3=?, 4=?(not supported)
d9681 2
a9682 2
SiS_HandleDDC(SiS_Private *SiS_Pr, SISPtr pSiS, USHORT adaptnum,
              USHORT DDCdatatype, unsigned char *buffer)
d9684 3
a9686 1
   if(DDCdatatype == 2) return 0xFFFF;
d9688 19
a9706 2
   if(pSiS->VGAEngine == SIS_300_VGA) {
      if((adaptnum != 0) && (DDCdatatype != 0)) return 0xFFFF;
d9708 1
a9708 2
   if((!(pSiS->VBFlags & VB_VIDEOBRIDGE)) && (adaptnum > 0)) return 0xFFFF;
   if(SiS_InitDDCRegs(SiS_Pr, pSiS, adaptnum, DDCdatatype) == 0xFFFF) return 0xFFFF;
d9710 1
a9710 1
       return(SiS_ProbeDDC(SiS_Pr));
d9712 5
a9716 2
       if(DDCdatatype > 4) return 0xFFFF;
       return(SiS_ReadDDC(SiS_Pr, pSiS, DDCdatatype, buffer));
d9718 29
d9749 7
a9755 1
#if 0 /* for future use */
d9757 11
d9769 1
a9769 1
SiS_SenseLCDDDC(SiS_Private *SiS_Pr, SISPtr pSiS, unsigned char *buffer)
d9771 19
a9789 6
   USHORT flag, temp;
   unsigned char buffer[8];
   unsigned char cr36=0, cr37=0;
   unsigned chat tempal, tempah, tempbl, tempbh;
   USHORT tempax, tempbx tempcx, push1, push2, push3;
   unsigned char addresstable[] = { 0x00, 0x22, 0x30, 0x40 };
d9791 1
a9791 1
   if(SiS_InitDDCRegs(SiS_Pr, pSiS, 1, 0) == 0xFFFF) return 0xFFFF;
d9793 14
d9808 22
a9829 10
   if(flag & 0x02) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa0;
      SiS_Pr->SiS_DDC_SecAddr = 0x3a;
   } else if(flag & 0x08) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa2;
      SiS_Pr->SiS_DDC_SecAddr = 0x76;
   } else if(flag & 0x10) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa6;
      SiS_Pr->SiS_DDC_SecAddr = 0x76;
   } else return 0xFFFF;
d9831 158
a9988 19
   SiS_ReadLCDDDC(SiS_Pr, 4, buffer);
   tempbl = buffer[0];
   tempbh = buffer[1];
   if(SiS_Pr->SiS_DDC_DeviceAddr == 0xa0) {
      tempah = 0x02;
      tempbl &= 0xf0;
      if(tempbl != 0x40) {
         tempah = 0x03;
	 if(tempbl == 0x50) {
	    if(!tempbh) {
	       tempbh = buffer[3] & 0xf0;
	       if(tempbh == 0x30) {
	           SiS_Pr->SiS_DDC_DeviceAddr = 0xa0;
      		   SiS_Pr->SiS_DDC_SecAddr = 0x23;
		   SiS_ReadLCDDDC(SiS_Pr, 2, buffer);
		   tempbl = buffer[0];
		   tempbh = buffer[1];
		   if(tempbl) cr37 |= 0x10;
		   tempah = 0x0a;
d9990 292
a10281 8
	       if(tempbh == 0x40) {
	           SiS_Pr->SiS_DDC_DeviceAddr = 0xa0;
      		   SiS_Pr->SiS_DDC_SecAddr = 0x23;
		   SiS_ReadLCDDDC(SiS_Pr, 2, buffer);
		   tempbl = buffer[0];
		   tempbh = buffer[1];
		   if(tempbl) cr37 |= 0x10;
		   tempah = 0x03;
d10283 13
a10295 1
	       tempbh = 0x00;
a10297 26
	 if(tempbh == 0x00) goto cr36ready;
	 tempah = 0x07;
	 if(tempbh == 0xc0) goto cr36ready;
      }
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa0;
      SiS_Pr->SiS_DDC_SecAddr = 0x18;
      SiS_ReadLCDDDC(SiS_Pr, 2, buffer);
      tempbl = buffer[0];
      tempbh = buffer[1];
      if(tempbl & 0x02) goto cr36ready;
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa0;
      SiS_Pr->SiS_DDC_SecAddr = 0x23;
      SiS_ReadLCDDDC(SiS_Pr, 2, buffer);
      tempbl = buffer[0];
      tempbh = buffer[1];
      tempah = 0x03;
      if(!tempbh & 0x01)) tempah = 0x02;
      if(!tempbl) cr37 |= 0x10;
      
  } else {
  
      tempah = 0x02;
      tempbx = tempbl | (tempbh << 8);
      if(tempbx != 1024) tempah = 0x03;
      
  }     
d10299 3
a10301 74
cr36ready:
  cr36 = tempah;      
  
  if((SiS_Pr->SiS_DDC_DeviceAddr == 0xa0) {
  
     SiS_Pr->SiS_DDC_SecAddr = 0x47;
     SiS_ReadLCDDDC(SiS_Pr, 2, buffer);
     tempah = buffer[0];
     tempah &= 0x06;
     tempah ^= 0x06;
     tempah <<= 5;
     tempah |= 0x20;
     cr37 &= 0x1f;
     cr37 |= tempah;
     if((cr36 & 0x07) == 0x07) cr37 &= 0x0e;
     
  } else {
  
     push1 = tempah;
     SiS_Pr->SiS_DDC_SecAddr = 0x45;
     SiS_ReadLCDDDC(SiS_Pr, 2, buffer);
     tempah = 0x01;
     if((buffer[0] != 0x20) && (buffer[0] != 0x34)) {
        tempah = 0x00;
     }
     cr37 &= 0xfe;
     cr37 |= tempah;
     
     SiS_Pr->SiS_DDC_SecAddr = 0x7e;
     SiS_ReadLCDDDC(SiS_Pr, 2, buffer);
     tempax = (USHORT)(buffer[0] | (buffer[1] << 8));
     push2 = tempax;
     tempax &= 0x0003;
     tempax *= 0x1b;
     push3 = tempax;
     tempax = (USHORT)buffer[0];
     tempax &= 0x001c;
     tempax >>= 2;
     tempax *= 8;
     tempbx = push3;
     tempbx += tempax;
     if(buffer[0] & 0x20) {
        SiS_Pr->SiS_DDC_SecAddr = 0x80;
	SiS_ReadLCDDDC(SiS_Pr, 2, buffer);
	tempax = buffer[0] | (buffer[1] << 8);
	tempax &= 0x1f;
	if(buffer[0] & 0x70) tempax <<= 1;
	tempax++;
	tempbx += tempax;        
     }
     tempcx = push2;
     tempax = push1 << 8;
     tempbx = (tempbx & 0xff00) | (((tempbx & 0x00ff) + 0x80) & 0x00ff);
     if(tempcx & 0xf800) {
        tempal = addresstable[((tempax & 0xff00) >> 8)];
	tempcx &= 0xf8ff;
	tempcx >>= 11;
	for(i=0; i<tempcx; i++) {
	   SiS_Pr->SiS_DDC_SecAddr = (tempbx & 0x00ff);
	   SiS_ReadLCDDDC(SiS_Pr, 2, buffer);
	   tempbx += 0x04;
	   if(buffer[0] == tempal) break;
	}
	tempah = buffer[1];
	tempah &= 0x0c;
	tempah ^= 0x0c;
	tempah <<= 4;
	tempah |= 0x20;
        cr37 &= 0x1f;
        cr37 |= tempah;
	if((cr36 & 0x07) == 0x07) cr37 &= 0x0e;
     }
  }
  xf86DrvMsg(0, X_INFO, "DDC: cr36 = 0x%02x, cr37 = 0x%02x\n", cr36, cr37);
d10303 1
a10303 1
}
d10305 8
a10312 1
#endif
d10314 20
a10333 1
/* TW: Generic I2C functions (compliant to i2c library) */
d10335 16
a10350 1
#if 0
d10352 1
a10352 1
SiS_I2C_GetByte(SiS_Private *SiS_Pr)
d10354 6
a10359 2
   return(SiS_ReadDDC2Data(SiS_Pr,0));
}
d10361 20
a10380 6
Bool
SiS_I2C_PutByte(SiS_Private *SiS_Pr, USHORT data)
{
   if(SiS_WriteDDC2Data(SiS_Pr,data)) return FALSE;
   return TRUE;
}
d10382 52
a10433 7
Bool
SiS_I2C_Address(SiS_Private *SiS_Pr, USHORT addr)
{
   if(SiS_SetStart(SiS_Pr)) return FALSE;
   if(SiS_WriteDDC2Data(SiS_Pr,addr)) return FALSE;
   return TRUE;
}
d10435 4
a10438 4
void
SiS_I2C_Stop(SiS_Private *SiS_Pr)
{
   SiS_SetStop(SiS_Pr);
a10439 1
#endif
d10446 1
a10446 1
  USHORT tempal,tempah,tempbl;
d10448 2
a10449 4
  tempal = tempax & 0x00FF;
  tempah =(tempax >> 8) & 0x00FF;
  tempbl = SiS_GetCH70xx(SiS_Pr,tempal);
  tempbl = (((tempbl & tempbh) | tempah) << 8 | tempal);
d10453 1
a10453 1
/* TW: Generic I2C functions for Chrontel --------- */
d10459 1
a10459 2
  /* SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAY); */
  SiS_WaitRetraceDDC(SiS_Pr);
d10462 8
a10469 2
  /* SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAY); */
  SiS_WaitRetraceDDC(SiS_Pr);
d10472 2
a10473 2
/* TW: Set I2C start condition */
/* TW: This is done by a SD high-to-low transition while SC is high */
d10477 11
a10487 7
  if(SiS_SetSCLKLow(SiS_Pr)) return 0xFFFF;			           /* TW: (SC->low)  */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index,
                  ~SiS_Pr->SiS_DDC_Data,SiS_Pr->SiS_DDC_Data);             /* TW: SD->high */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* TW: SC->high */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index,
                  ~SiS_Pr->SiS_DDC_Data,0x00);                             /* TW: SD->low = start condition */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* TW: (SC->low) */
d10491 2
a10492 2
/* TW: Set I2C stop condition */
/* TW: This is done by a SD low-to-high transition while SC is high */
d10496 11
a10506 7
  if(SiS_SetSCLKLow(SiS_Pr)) return 0xFFFF;			           /* TW: (SC->low) */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index,
                  ~SiS_Pr->SiS_DDC_Data,0x00);          		   /* TW: SD->low   */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* TW: SC->high  */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index,
                  ~SiS_Pr->SiS_DDC_Data,SiS_Pr->SiS_DDC_Data);  	   /* TW: SD->high = stop condition */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* TW: (SC->high) */
d10510 1
a10510 1
/* TW: Write 8 bits of data */
d10516 3
a10518 3
  flag=0x80;
  for(i=0;i<8;i++) {
    SiS_SetSCLKLow(SiS_Pr);				                      /* TW: SC->low */
d10520 4
a10523 2
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index,
                      ~SiS_Pr->SiS_DDC_Data,SiS_Pr->SiS_DDC_Data);            /* TW: Write bit (1) to SD */
d10525 4
a10528 2
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index,
                      ~SiS_Pr->SiS_DDC_Data,0x00);                            /* TW: Write bit (0) to SD */
d10530 1
a10530 1
    SiS_SetSCLKHigh(SiS_Pr);				                      /* TW: SC->high */
d10533 1
a10533 1
  temp = SiS_CheckACK(SiS_Pr);				                      /* TW: Check acknowledge */
d10546 4
a10549 2
    SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index,
                    ~SiS_Pr->SiS_DDC_Data,SiS_Pr->SiS_DDC_Data);
d10551 1
a10551 1
    temp = SiS_GetReg1(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index);
d10560 4
a10563 8
  USHORT temp, watchdog=50000;

  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index,
                  ~SiS_Pr->SiS_DDC_Clk,0x00);      		/* SetSCLKLow()  */
  do {
    temp = SiS_GetReg1(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index);
  } while((temp & SiS_Pr->SiS_DDC_Clk) && --watchdog);
  if (!watchdog) return 0xFFFF;
d10571 1
a10571 1
  USHORT temp,watchdog=50000;
d10573 4
a10576 2
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index,
                  ~SiS_Pr->SiS_DDC_Clk,SiS_Pr->SiS_DDC_Clk);  	/* SetSCLKHigh()  */
d10578 1
a10578 1
    temp = SiS_GetReg1(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index);
d10580 6
a10585 1
  if (!watchdog) return 0xFFFF;
d10590 1
a10590 11
void
SiS_DDC2Delay(SiS_Private *SiS_Pr, USHORT delaytime)
{
  USHORT i;

  for(i=0; i<delaytime; i++) {
    SiS_GetReg1(SiS_Pr->SiS_P3c4,0x05);
  }
}

/* TW: Check I2C acknowledge */
d10597 9
a10605 7
  SiS_SetSCLKLow(SiS_Pr);				           /* TW: (SC->low) */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index,
                  ~SiS_Pr->SiS_DDC_Data,SiS_Pr->SiS_DDC_Data);     /* TW: (SD->high) */
  SiS_SetSCLKHigh(SiS_Pr);				           /* TW: SC->high = clock impulse for ack */
  tempah = SiS_GetReg1(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index);/* TW: Read SD */
  SiS_SetSCLKLow(SiS_Pr);				           /* TW: SC->low = end of clock impulse */
  if(tempah & SiS_Pr->SiS_DDC_Data) return(1);			   /* TW: Ack OK if bit = 0 */
d10609 1
a10609 1
/* TW: End of I2C functions ----------------------- */
d10612 1
a10612 1
/* =============== SiS 310/325 O.E.M. ================= */
d10617 55
a10671 1
GetLCDPtrIndex(SiS_Private *SiS_Pr)
d10675 15
a10689 1
  index = SiS_Pr->SiS_LCDResInfo & 0x0F;
d10692 1
a10692 1
  if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) index += 2;
d10694 7
d10702 3
a10707 11
/*
---------------------------------------------------------
       GetTVPtrIndex()
          return       0 : NTSC Enhanced/Standard
                       1 : NTSC Standard TVSimuMode
                       2 : PAL Enhanced/Standard
                       3 : PAL Standard TVSimuMode
                       4 : HiVision Enhanced/Standard
                       5 : HiVision Standard TVSimuMode
---------------------------------------------------------
*/
d10714 4
a10717 2
  if(SiS_Pr->SiS_VBInfo & SetPALTV) index++;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) index++;  /* Hivision TV use PAL */
d10721 4
a10724 2
  if((SiS_Pr->SiS_VBInfo & SetInSlaveMode) && (SiS_Pr->SiS_SetFlag & TVSimuMode))
    index++;
d10729 63
a10791 1
/* TW: Checked against 650/LVDS (1.10.07) and 650/301LVx (1.10.6s) BIOS (including data) */
d10793 1
a10793 2
SetDelayComp(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr,
             UCHAR *ROMAddr, USHORT ModeNo)
d10795 3
a10797 1
  USHORT delay,index,temp,romptr=0;
d10799 12
a10810 11
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
     if((ROMAddr) && SiS_Pr->SiS_UseROM) {
        if(HwDeviceExtension->jChipType != SIS_330) {
           romptr = ROMAddr[0x128] | (ROMAddr[0x129] << 8);  /* 301, LVDS */
	   if(SiS_Pr->SiS_VBType & (VB_SIS301B | VB_SIS302B))
	      romptr = ROMAddr[0x12a] | (ROMAddr[0x12b] << 8);
	} else {
	   romptr = ROMAddr[0x1a8] | (ROMAddr[0x1a9] << 8);  /* 301, LVDS */
	   if(SiS_Pr->SiS_VBType & (VB_SIS301B | VB_SIS302B))
	      romptr = ROMAddr[0x1aa] | (ROMAddr[0x1ab] << 8);
	}
d10814 34
a10847 5
        delay = SiS310_CRT2DelayCompensation1;
        if(SiS_Pr->SiS_VBType & (VB_SIS301B | VB_SIS302B))
           delay = SiS310_CRT2DelayCompensation2;
        if(SiS_Pr->SiS_IF_DEF_LVDS == 1)
           delay = SiS310_CRT2DelayCompensation3;
d10849 20
a10868 17
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     index = GetLCDPtrIndex(SiS_Pr);
     delay = SiS310_LCDDelayCompensation1[index];
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
       delay = SiS310_LCDDelayCompensation2[index];
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1)
       delay = SiS310_LCDDelayCompensation3[index];
     if((IS_SIS650740) && (SiS_Pr->SiS_IF_DEF_LVDS == 0)) {
       if(SiS_IsM650or651(SiS_Pr,HwDeviceExtension, BaseAddr)) {
          delay = SiS310_LCDDelayCompensation4[index];       /* 652c */
	  if(SiS_Pr->SiS_VBType & VB_SIS30xNEW)
	      delay = SiS310_LCDDelayCompensation5[index];   /* 6541 */
       } else {
          delay = SiS310_LCDDelayCompensation6[index];       /* 6550 */
	  if(SiS_Pr->SiS_VBType & VB_SIS30xNEW)
	      delay = SiS310_LCDDelayCompensation7[index];   /* 655f */
       }
d10870 31
a10900 12
  } else {
     index = GetTVPtrIndex(SiS_Pr);
     if((ROMAddr) && SiS_Pr->SiS_UseROM) {
         if(HwDeviceExtension->jChipType != SIS_330) {
            romptr = ROMAddr[0x114] | (ROMAddr[0x115] << 8);
	    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
	       romptr = ROMAddr[0x11a] | (ROMAddr[0x11b] << 8);
	 } else {
	    romptr = ROMAddr[0x194] | (ROMAddr[0x195] << 8);
	    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
	       romptr = ROMAddr[0x19a] | (ROMAddr[0x19b] << 8);
	 }
d10902 69
a10970 27
     if(romptr) delay = ROMAddr[romptr + index];
     else {
	    delay = SiS310_TVDelayCompensation1[index];
            if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
               delay = SiS310_TVDelayCompensation2[index];
            if(SiS_Pr->SiS_IF_DEF_LVDS == 1)
               delay = SiS310_TVDelayCompensation3[index];
     }
     if((IS_SIS650740) && (SiS_Pr->SiS_IF_DEF_LVDS == 0)) {
       romptr = 0;
       if(SiS_IsM650or651(SiS_Pr,HwDeviceExtension, BaseAddr)) {
          if((ROMAddr) && SiS_Pr->SiS_UseROM) {
             romptr = ROMAddr[0x114] | (ROMAddr[0x115] << 8);
	     if(SiS_Pr->SiS_VBType & VB_SIS30xNEW)
	        romptr = ROMAddr[0x11a] | (ROMAddr[0x11b] << 8);
	  }
	  if(romptr) delay = ROMAddr[romptr + index];
	  else {
	        delay = SiS310_TVDelayCompensation4[index];      /* 656e @@ 0x114 */
	        if(SiS_Pr->SiS_VBType & VB_SIS30xNEW)
	           delay = SiS310_TVDelayCompensation5[index];   /* 6574 @@ 0x11a */
	  }
       } else {
          delay = SiS310_TVDelayCompensation6[index];       /* 657a */
	  if(SiS_Pr->SiS_VBType & VB_SIS30xNEW)
	      delay = SiS310_TVDelayCompensation7[index];   /* 6580 */
       }
d10972 23
a10994 1
  }
a10995 7
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0xF0,delay);
     } else {
        if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
           delay <<= 4;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0x0F,delay);
d10997 20
a11016 1
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0xF0,delay);
d11018 29
d11048 11
a11058 4
  } else {
     if((IS_SIS650740) && (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
        temp = (SiS_GetReg1(SiS_Pr->SiS_P3d4,0x36) & 0xf0) >> 4;
        if(temp == 8) {
d11064 2
d11067 2
a11068 1
        SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x2D,delay);  /* index 2D D[3:0] */
d11070 8
d11079 7
d11087 1
d11089 1
a11091 1
/* TW: Checked against 650/301LVx 1.10.6s BIOS (including data) */
d11093 2
a11094 2
SetAntiFlicker(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr,
               UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
d11096 2
a11097 1
  USHORT index,temp,romptr=0;
d11099 1
a11099 2
  temp = GetTVPtrIndex(SiS_Pr);
  temp >>= 1;  	  /* 0: NTSC, 1: PAL, 2: HiTV */
d11106 16
a11121 4
  if(ROMAddr && SiS_Pr->SiS_UseROM) {
     romptr = ROMAddr[0x112] | (ROMAddr[0x113] << 8);
     if(HwDeviceExtension->jChipType == SIS_330) {
        romptr = ROMAddr[0x192] | (ROMAddr[0x193] << 8);
d11126 2
a11127 2
     temp <<= 1;
     temp = ROMAddr[romptr + temp + index];
a11135 1
/* TW: Checked against 650/301LVx 1.10.6s BIOS (including data) */
d11137 2
a11138 2
SetEdgeEnhance(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr,
               UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
d11140 2
a11141 1
  USHORT index,temp,romptr=0;
d11143 1
a11143 2
  temp = GetTVPtrIndex(SiS_Pr);
  temp >>= 1;              	/* 0: NTSC, 1: PAL, 2: HiTV */
d11145 1
a11145 1
  if(ModeNo<=0x13)
d11150 12
a11161 4
  if(ROMAddr && SiS_Pr->SiS_UseROM) {
     romptr = ROMAddr[0x124] | (ROMAddr[0x125] << 8);
     if(HwDeviceExtension->jChipType == SIS_330) {
        romptr = ROMAddr[0x1a4] | (ROMAddr[0x1a5] << 8);
d11166 2
a11167 2
     temp <<= 1;
     temp = ROMAddr[romptr + temp + index];
a11174 1
/* TW: Checked against 650/301LVx 1.10.6s BIOS (incl data) */
d11176 2
a11177 2
SetYFilter(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr,
           UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
a11179 1
  UCHAR  OutputSelect = *SiS_Pr->pSiS_OutputSelect;
d11181 2
a11182 5
  temp = GetTVPtrIndex(SiS_Pr);
  temp >>= 1;  			/* 0: NTSC, 1: PAL, 2: HiTV */

  if (ModeNo<=0x13) {
    index =  SiS_Pr->SiS_SModeIDTable[ModeIdIndex].VB_StTVYFilterIndex;
d11184 1
a11184 1
    index =  SiS_Pr->SiS_EModeIDTable[ModeIdIndex].VB_ExtTVYFilterIndex;
d11187 6
a11192 1
  if(SiS_Pr->SiS_VBInfo&SetCRT2ToHiVisionTV)  temp = 1;  /* Hivision TV uses PAL */
d11195 6
a11200 6
    for(i=0x35, j=0; i<=0x38; i++, j++) {
       SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter2[temp][index][j]);
    }
    for(i=0x48; i<=0x4A; i++, j++) {
       SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter2[temp][index][j]);
    }
d11202 3
a11204 44
    for(i=0x35, j=0; i<=0x38; i++, j++){
       SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter1[temp][index][j]);
    }
  }

  if(ROMAddr && SiS_Pr->SiS_UseROM) {
  	OutputSelect = ROMAddr[0xf3];
	if(HwDeviceExtension->jChipType == SIS_330) {
	    OutputSelect = ROMAddr[0x11b];
	}
  }
  if(OutputSelect & EnablePALMN) {
      if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x31) & 0x01) {
         temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
         temp &= (EnablePALM | EnablePALN);
         if(temp == EnablePALM) {
              if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
                 for(i=0x35, j=0; i<=0x38; i++, j++) {
                      SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS310_PALMFilter2[index][j]);
                 }
                 for(i=0x48; i<=0x4A; i++, j++) {
                      SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS310_PALMFilter2[index][j]);
                 }
              } else {
                 for(i=0x35, j=0; i<=0x38; i++, j++) {
                      SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS310_PALMFilter[index][j]);
                 }
              }
         }
         if(temp == EnablePALN) {
              if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
                 for(i=0x35, j=0; i<=0x38; i++, j++) {
                      SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS310_PALNFilter2[index][j]);
                 }
                 for(i=0x48, j=0; i<=0x4A; i++, j++) {
                      SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS310_PALNFilter2[index][j]);
                 }
             } else {
                 for(i=0x35, j=0; i<=0x38; i++, j++) {
                      SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS310_PALNFilter[index][j]);
		 }
             }
         }
      }
a11207 1
/* TW: Checked against 650/301LVx 1.10.6s BIOS (including data) */
d11209 2
a11210 2
SetPhaseIncr(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr,
             UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
d11212 3
a11214 1
  USHORT index,temp,temp1,i,j,resinfo,romptr=0;
d11218 2
a11219 3
  temp1 = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);        /* if PALM/N not set */
  temp1 &=  (EnablePALM | EnablePALN);
  if(temp1) return;
d11221 14
a11234 2
  if (ModeNo<=0x13) {
    resinfo =  SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
d11236 1
a11236 1
    resinfo =  SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d11243 4
a11246 4
  if((ROMAddr) && SiS_Pr->SiS_UseROM) {
     romptr = ROMAddr[0x116] | (ROMAddr[0x117] << 8);
     if(HwDeviceExtension->jChipType == SIS_330) {
        romptr = ROMAddr[0x196] | (ROMAddr[0x197] << 8);
d11249 8
a11256 8
        romptr = ROMAddr[0x11c] | (ROMAddr[0x11d] << 8);
	if(HwDeviceExtension->jChipType == SIS_330) {
	   romptr = ROMAddr[0x19c] | (ROMAddr[0x19d] << 8);
	}
	if((SiS_Pr->SiS_VBInfo & SetInSlaveMode) && (!(SiS_Pr->SiS_SetFlag & TVSimuMode))) {
	   romptr = ROMAddr[0x116] | (ROMAddr[0x117] << 8);
	   if(HwDeviceExtension->jChipType == SIS_330) {
              romptr = ROMAddr[0x196] | (ROMAddr[0x197] << 8);
d11264 1
a11264 1
        SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
d11271 3
a11273 3
	   SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr1[temp][index][j]);
        else if((!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) || (SiS_Pr->SiS_SetFlag & TVSimuMode))
           SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr2[temp][index][j]);
d11275 1
a11275 1
           SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr1[temp][index][j]);
d11279 13
a11291 17
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {    /* TW: 650/301LV: (VB_SIS301LV | VB_SIS302LV)) */
     if((!(SiS_Pr->SiS_VBInfo & SetPALTV)) && (ModeNo > 0x13)) {
        if(resinfo == 6) {
	      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x31,0x21);
	      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x32,0xf0);
	      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x33,0xf5);
	      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x34,0x7f);
	} else if (resinfo == 7) {
	      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x31,0x21);
	      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x32,0xf0);
	      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x33,0xf5);
	      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x34,0x7f);
	} else if (resinfo == 8) {
	      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x31,0x1e);
	      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x32,0x8b);
	      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x33,0xfb);
	      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x34,0x7b);
d11298 200
a11497 2
SiS_OEM310Setting(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr,
                  UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
d11499 17
a11515 9
   SetDelayComp(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo);
   /* TW: The TV functions are not for LVDS */
   if( (SiS_Pr->SiS_IF_DEF_LVDS == 0) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV) ) {
       SetAntiFlicker(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo,ModeIdIndex);
       SetPhaseIncr(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo,ModeIdIndex);
       SetYFilter(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo,ModeIdIndex);
       if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
          SetEdgeEnhance(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo,ModeIdIndex);
       }
d11519 7
a11525 1
/* TW: New from 650/301LVx 1.10.6s, 1.10.7w - clashes with OEMLCD() */
d11527 2
a11528 2
SiS_FinalizeLCD(SiS_Private *SiS_Pr, USHORT BaseAddr,UCHAR *ROMAddr,USHORT ModeNo,
                USHORT ModeIdIndex, PSIS_HW_DEVICE_INFO HwDeviceExtension)
d11533 18
a11550 1
  if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) return;
d11553 2
a11554 2
	resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
	modeflag =  SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
d11556 43
a11598 2
    	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
	modeflag =  SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d11602 15
a11616 8
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x2a,0x00);
	SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x30,0x00);
	SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x34,0x10);
     }
     tempch = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x36);
     tempch &= 0xf0;
     tempch >>= 4;
d11618 74
a11691 51
	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
	   SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1f,0x76);
	}
	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {	/* From 1.10.8w */
	   if(!(SiS_Pr->SiS_LCDInfo & LCDNonExpanding)) {
	       SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x14,0x90);
	       SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x18,0x01);
	       if((ModeNo > 0x13) && (resinfo == 8)) {
	          tempbx = 806;  /* 0x326 */
		  tempbx--;
		  temp = tempbx & 0xff;
		  SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1b,temp);
		  temp = (tempbx >> 8) & 0x03;
		  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1d,0xf8,temp);
	       }
	   } else {
	       if(ModeNo <= 0x13) {
	          if(ModeNo <= 1) {
		     SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x18,0x70);
		     SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x19,0xff);
		     SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1b,0x48);
		     SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1d,0x12);
		  }
		  if(!(modeflag & HalfDCLK)) {
		     SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x14,0x20);
		     SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x15,0x1a);
		     SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x16,0x28);
		     SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x17,0x00);
		     SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x18,0x4c);
		     SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x19,0xdc);
		     if(ModeNo == 0x12) {
			 switch(tempch) {
			 case 0:
			    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x18,0x95);
			    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x19,0xdc);
			    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1a,0x10);
			    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1b,0x95);
			    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1c,0x48);
			    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1d,0x12);
			    break;
			 case 2:
			    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x18,0x95);
			    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1b,0x48);
			    break;
			 case 3:
			    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x1b,0x95);
			    break;
			 }
		     }
		  }
	       }
d11695 1
a11695 1
        tempcl = tempbh = SiS_GetReg1(SiS_Pr->SiS_Part2Port,0x01);
d11699 1
a11699 1
	tempbl = SiS_GetReg1(SiS_Pr->SiS_Part2Port,0x04);
d11701 2
a11702 2
	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	   if((resinfo == 8) || (!(SiS_Pr->SiS_LCDInfo & LCDNonExpanding))) {
d11704 1
a11704 1
	      	tempbx = 770;
d11706 7
a11712 7
	        if(tempbx > 770) tempbx = 770;
		if(SiS_Pr->SiS_VGAVDE < 600) {
		   tempax = 768 - SiS_Pr->SiS_VGAVDE;
		   tempax >>= 4;  				/* From 1.10.7w; 1.10.6s: 3;  */
		   if(SiS_Pr->SiS_VGAVDE <= 480)  tempax >>= 4; /* From 1.10.7w; 1.10.6s: < 480; >>=1; */
		   tempbx -= tempax;
		}
a11715 4
#if 0
	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
	}
#endif
d11717 2
a11718 4
	SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x04,temp);
	temp = (tempbx & 0xff00) >> 8;
	temp <<= 4;
	temp |= tempcl;
a11723 52
/* TW: New and checked from 650/301LV BIOS */
/* This might clash with newer "FinalizeLCD()" function */
void
SiS_OEMLCD(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr,
                  UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
{
   USHORT tempbx,tempah,tempbl,tempbh,tempcl;

   if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) return;

   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      SiS_UnLockCRT2(SiS_Pr,HwDeviceExtension,BaseAddr);
      tempbh = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x1a);
      tempbh &= 0x38;
      tempbh >>= 3;
      tempbl = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x18);
      tempbx = (tempbh << 8) | tempbl;
      if(SiS_Pr->SiS_LCDTypeInfo == 1)  tempbx -= 0x12;
      SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x18,tempbx & 0x00ff);
      tempah = (tempbx & 0xff00) >> 8;
      tempah &= 0x07;
      tempah <<= 3;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1a,0xc7,tempah);
      tempah = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x19);
      tempah &= 0x0f;
      if(SiS_Pr->SiS_LCDTypeInfo == 1)  tempah -= 2;
      tempah &= 0x0f;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0xF0,tempah);
      tempah = SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x14);
      if(SiS_Pr->SiS_LCDTypeInfo == 1)  tempah++;
      tempah -= 8;
      SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x14,tempah);
   } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
      tempcl = tempbh = SiS_GetReg1(SiS_Pr->SiS_Part2Port,0x01);
      tempbh &= 0x70;
      tempbh >>= 4;
      tempbl = SiS_GetReg1(SiS_Pr->SiS_Part2Port,0x04);
      tempbx = (tempbh << 8) | tempbl;
      if(SiS_Pr->SiS_LCDTypeInfo == 1)  {
           tempbx -= 0x1e;
	   tempcl &= 0x0f;
	   tempcl -= 4;
	   tempcl &= 0x0f;
      }
      tempbl = tempbx & 0x00ff;
      tempbh = (tempbx >> 8) & 0x00ff;
      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x04,tempbl);
      tempbh <<= 4;
      tempbh |= tempcl;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x01,0x80,tempbh);
   }
}
a11725 1

d11730 3
a11732 3
#if 0   /* Not used */
static USHORT
GetRevisionID(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
d11734 20
a11753 5
   ULONG temp1;
#ifndef LINUX_XF86
   ULONG base;
#endif
   USHORT temp2 = 0;
d11755 17
a11771 15
   if((HwDeviceExtension->jChipType==SIS_540)||
      (HwDeviceExtension->jChipType==SIS_630)||
      (HwDeviceExtension->jChipType==SIS_730)) {
#ifndef LINUX_XF86
     	base = 0x80000008;
     	OutPortLong(base,0xcf8);
     	temp1 = InPortLong(0xcfc);
#else
	temp1=pciReadLong(0x00000000, 0x08);
#endif
     	temp1 &= 0x000000FF;
     	temp2 = (USHORT)(temp1);
    	return temp2;
   }
   return 0;
a11772 1
#endif
a11773 1
/* TW: Checked against 630/301B BIOS (incl data) */
d11775 1
a11775 1
GetOEMLCDPtr(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, UCHAR *ROMAddr, int Flag)
d11777 1
d11788 1
a11788 1
  if(HwDeviceExtension->jChipType == SIS_300) {
d11790 1
a11790 1
    tempbx = SiS_Pr->SiS_LCDResInfo - 2;
d11792 2
a11793 2
    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
       if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) tempbx += 3;
d11795 1
a11795 1
    if((ROMAddr) && SiS_Pr->SiS_UseROM) {
d11799 4
a11802 7
	    romptr = ROMAddr[0x255] | (ROMAddr[0x256] << 8);
	    if(romptr) {
	        tempbx = ROMAddr[romptr + SiS_Pr->SiS_LCDTypeInfo];
	    } else {
	        tempbx = customtable300[SiS_Pr->SiS_LCDTypeInfo];
	    }
            if(tempbx == 0xFF) return 0xFFFF;
d11812 12
a11823 15
      if((ROMAddr) && SiS_Pr->SiS_UseROM) {
         romptr = ROMAddr[0x255] | (ROMAddr[0x256] << 8);
	 if(romptr) {
	    tempbx = ROMAddr[romptr + SiS_Pr->SiS_LCDTypeInfo];
	 } else {
	    tempbx = 0xff;
	 }
      } else {
         tempbx = customtable630[SiS_Pr->SiS_LCDTypeInfo];
      }
      if(tempbx == 0xFF) return 0xFFFF;
      tempbx <<= 2;
      if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) tempbx += 2;
      if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) tempbx++;
      return tempbx;
d11827 1
a11827 1
    if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) tempbx++;
a11831 1
/* TW: Checked against 630/301B and 630/LVDS BIOS (incl data) */
d11833 2
a11834 2
SetOEMLCDDelay(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr,
               UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
d11836 1
d11839 3
a11841 1
  if((ROMAddr) && SiS_Pr->SiS_UseROM) {
d11844 1
a11844 1
     romptr = ROMAddr[0x24b] | (ROMAddr[0x24c] << 8);
d11847 6
a11852 6
  /* TW: The Panel Compensation Delay should be set according to tables
   *     here. Unfortunately, various BIOS versions don't case about
   *     a uniform way using eg. ROM byte 0x220, but use different
   *     hard coded delays (0x04, 0x20, 0x18) in SetGroup1().
   *     Thus we don't set this if the user select a custom pdc or if
   *     we otherwise detected a valid pdc.
d11854 1
a11854 1
  if(HwDeviceExtension->pdc) return;
d11856 1
a11856 1
  temp = GetOEMLCDPtr(SiS_Pr,HwDeviceExtension, ROMAddr, 0);
d11858 4
a11861 1
  index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].VB_LCDDelayIndex;
d11863 15
a11877 1
  if(HwDeviceExtension->jChipType != SIS_300) {
d11880 1
a11880 1
	   romptr = ROMAddr[romptr] | (ROMAddr[romptr + 1] << 8);
d11884 10
a11893 2
	   if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
    	      temp = SiS300_OEMLCDDelay2[temp][index];
d11895 4
a11898 2
              temp = SiS300_OEMLCDDelay3[temp][index];
           }
d11900 1
a11900 25
  } else {
      if((ROMAddr) && SiS_Pr->SiS_UseROM && (ROMAddr[0x235] & 0x80)) {
	  if(romptr) {
	     romptr += (temp * 2);
	     romptr = ROMAddr[romptr] | (ROMAddr[romptr + 1] << 8);
	     romptr += index;
	     temp = ROMAddr[romptr];
	  } else {
	     temp = SiS300_OEMLCDDelay5[temp][index];
	  }
      } else {
          if((ROMAddr) && SiS_Pr->SiS_UseROM) {
	     romptr = ROMAddr[0x249] | (ROMAddr[0x24a] << 8);
	     if(romptr) {
	        romptr += (temp * 2);
	        romptr = ROMAddr[romptr] | (ROMAddr[romptr + 1] << 8);
	        romptr += index;
	        temp = ROMAddr[romptr];
	     } else {
	        temp = SiS300_OEMLCDDelay4[temp][index];
	     }
	  } else {
	     temp = SiS300_OEMLCDDelay4[temp][index];
	  }
      }
d11907 2
a11908 2
SetOEMLCDData(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr,
               UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
d11910 2
a11911 1
#if 0  /* TW: Unfinished; VData table missing */
d11914 1
a11914 1
  if((ROMAddr) && SiS_Pr->SiS_UseROM) {
d11920 1
a11920 1
  temp = GetOEMLCDPtr(SiS_Pr,HwDeviceExtension, ROMAddr, 1);
d11925 1
a11925 1
      SiS_SetReg1(SiS_Pr->SiS_Part1Port,i,SiS300_LCDHData[temp][index][j]);
d11930 1
a11930 1
  SiS_SetReg1(SiS_SiS_Part1Port,0x18, SiS300_LCDVData[temp][index][0]);
d11934 1
a11934 1
      SiS_SetReg1(SiS_Pr->SiS_Part1Port,i,SiS300_LCDVData[temp][index][j]);
a11938 1
/* TW: Checked against 630/301B 2.04.50 and 630/LVDS BIOS */
d11946 1
a11946 1
  if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
d11948 2
a11949 2
     else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) index += 3;
     else if(SiS_Pr->SiS_VBInfo & SetPALTV)   index += 1;
d11951 2
a11952 2
     if(SiS_Pr->SiS_VBInfo & SetCHTVOverScan) index += 2;
     if(SiS_Pr->SiS_VBInfo & SetPALTV)        index += 1;
a11956 1
/* TW: Checked against 630/301B 2.04.50 and 630/LVDS BIOS (incl data) */
d11958 2
a11959 2
SetOEMTVDelay(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr,
              UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
d11961 1
d11964 1
a11964 1
  if((ROMAddr) && SiS_Pr->SiS_UseROM) {
d11967 1
a11967 1
     romptr = ROMAddr[0x241] | (ROMAddr[0x242] << 8);
d11976 1
a11976 1
     romptr = ROMAddr[romptr] | (ROMAddr[romptr + 1] << 8);
d11980 1
a11980 1
     if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
d11987 1
a11987 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,~0x3C,temp);  /* index 0A D[6:4] */
a11989 1
/* TW: Checked against 630/301B 2.04.50 BIOS (incl data) */
d11991 2
a11992 3
SetOEMAntiFlicker(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,
                  USHORT BaseAddr,UCHAR *ROMAddr,USHORT ModeNo,
		  USHORT ModeIdIndex)
d11994 1
d11997 1
a11997 1
  if((ROMAddr) && SiS_Pr->SiS_UseROM) {
d12000 1
a12000 1
     romptr = ROMAddr[0x243] | (ROMAddr[0x244] << 8);
d12009 1
a12009 1
     romptr = ROMAddr[romptr] | (ROMAddr[romptr + 1] << 8);
d12016 1
a12016 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x0A,0x8F,temp);  /* index 0A D[6:4] */
a12018 1
/* TW: Checked against 630/301B 2.04.50 BIOS (incl data) */
d12020 2
a12021 2
SetOEMPhaseIncr(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr,
                UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
d12023 1
d12026 3
a12028 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVisionTV) return;
d12030 1
a12030 1
  if((ROMAddr) && SiS_Pr->SiS_UseROM) {
d12033 1
a12033 1
     romptr = ROMAddr[0x245] | (ROMAddr[0x246] << 8);
d12041 3
a12043 3
       for(i=0x31, j=0; i<=0x34; i++, j++) {
          SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS300_Phase2[temp][index][j]);
       }
d12045 12
a12056 12
       if(romptr) {
          romptr += (temp * 2);
	  romptr = ROMAddr[romptr] | (ROMAddr[romptr + 1] << 8);
	  romptr += (index * 4);
          for(i=0x31, j=0; i<=0x34; i++, j++) {
	     SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
	  }
       } else {
          for(i=0x31, j=0; i<=0x34; i++, j++) {
             SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS300_Phase1[temp][index][j]);
	  }
       }
a12059 1
/* TW: Checked against 630/301B 2.04.50 BIOS (incl data) */
d12061 2
a12062 2
SetOEMYFilter(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr,
              UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
d12064 2
a12065 1
  USHORT index,temp,temp1,i,j,romptr=0;
d12067 1
a12067 1
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSCART | SetCRT2ToHiVisionTV)) return;
d12069 1
a12069 1
  if((ROMAddr) && SiS_Pr->SiS_UseROM) {
d12072 1
a12072 1
     romptr = ROMAddr[0x247] | (ROMAddr[0x248] << 8);
d12077 4
a12082 9
  if(HwDeviceExtension->jChipType > SIS_300) {
     if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x31) & 0x01) {
       temp1 = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x35);
       if(temp1 & (EnablePALM | EnablePALN)) {
          temp = 8;
	  if(!(temp1 & EnablePALM)) temp = 9;
       }
     }
  }
d12085 1
a12085 1
       	SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS300_Filter2[temp][index][j]);
d12088 1
a12088 1
     	SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS300_Filter2[temp][index][j]);
d12091 1
a12091 1
      if(romptr) {
d12093 1
a12093 1
	 romptr = ROMAddr[romptr] | (ROMAddr[romptr + 1] << 8);
d12096 1
a12096 1
       	    SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
d12100 1
a12100 1
       	    SiS_SetReg1(SiS_Pr->SiS_Part2Port,i,SiS300_Filter1[temp][index][j]);
d12106 24
d12131 2
a12132 2
SiS_OEM300Setting(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,
		  USHORT BaseAddr,UCHAR *ROMAddr,USHORT ModeNo)
d12134 1
a12134 1
  USHORT ModeIdIndex;
d12136 4
a12139 2
  ModeIdIndex = SiS_SearchVBModeID(SiS_Pr,ROMAddr,&ModeNo);
  if(!(ModeIdIndex)) return;
d12142 4
a12145 4
       SetOEMLCDDelay(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo,ModeIdIndex);
       if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
            SetOEMLCDData(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo,ModeIdIndex);
       }
d12147 1
d12149 6
a12154 6
       SetOEMTVDelay(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo,ModeIdIndex);
       if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
       		SetOEMAntiFlicker(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo,ModeIdIndex);
    		SetOEMPhaseIncr(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo,ModeIdIndex);
       		SetOEMYFilter(SiS_Pr,HwDeviceExtension,BaseAddr,ROMAddr,ModeNo,ModeIdIndex);
       }
a12157 1

@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/sis/init301.c,v 1.69 2004/01/23 22:29:02 twini Exp $ */
d3 2
a4 4
 * Mode initializing code (CRT2 section)
 * for SiS 300/305/540/630/730 and
 *     SiS 315/550/650/M650/651/661FX/M661xX/740/741/M741/330/660/M660/760/M760
 * (Universal module for Linux kernel framebuffer and XFree86 4.x)
d6 3
a8 1
 * Copyright (C) 2001-2004 by Thomas Winischhofer, Vienna, Austria
d10 10
a19 2
 * If distributed as part of the Linux kernel, the following license terms
 * apply:
d21 9
a29 13
 * * This program is free software; you can redistribute it and/or modify
 * * it under the terms of the GNU General Public License as published by
 * * the Free Software Foundation; either version 2 of the named License,
 * * or any later version.
 * *
 * * This program is distributed in the hope that it will be useful,
 * * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * * GNU General Public License for more details.
 * *
 * * You should have received a copy of the GNU General Public License
 * * along with this program; if not, write to the Free Software
 * * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
d31 7
a37 31
 * Otherwise, the following license terms apply:
 *
 * * Redistribution and use in source and binary forms, with or without
 * * modification, are permitted provided that the following conditions
 * * are met:
 * * 1) Redistributions of source code must retain the above copyright
 * *    notice, this list of conditions and the following disclaimer.
 * * 2) Redistributions in binary form must reproduce the above copyright
 * *    notice, this list of conditions and the following disclaimer in the
 * *    documentation and/or other materials provided with the distribution.
 * * 3) All advertising materials mentioning features or use of this software
 * *    must display the following acknowledgement: "This product includes
 * *    software developed by Thomas Winischhofer, Vienna, Austria."
 * * 4) The name of the author may not be used to endorse or promote products
 * *    derived from this software without specific prior written permission.
 * *
 * * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESSED OR
 * * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: 	Thomas Winischhofer <thomas@@winischhofer.net>
 *
 * Formerly based on non-functional code-fragements for 300 series by SiS, Inc.
 * Used by permission.
d45 1
a45 1
 * All comments in this file are by me, regardless if marked TW or not.
a48 8
#if 1
#define SET_EMI		/* 302LV/ELV: Set EMI values */
#endif

#define COMPAL_HACK	/* Needed for Compal 1400x1050 (EMI) */
#define COMPAQ_HACK	/* Needed for Inventec/Compaq 1280x1024 (EMI) */
#define ASUS_HACK	/* Needed for Asus A2H 1024x768 (EMI) */

d55 4
d68 1
a68 1
#define SiS_I2CDELAYSHORT  150
d70 8
a77 3
/*********************************************/
/*         HELPER: Lock/Unlock CRT2          */
/*********************************************/
d79 5
a83 8
void
SiS_UnLockCRT2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  if(HwInfo->jChipType >= SIS_315H)
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2f,0x01);
  else
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x24,0x01);
}
d85 2
a86 8
void
SiS_LockCRT2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  if(HwInfo->jChipType >= SIS_315H)
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2F,0xFE);
  else
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x24,0xFE);
}
d88 1
a88 3
/*********************************************/
/*            HELPER: Enable CRT2            */
/*********************************************/
d90 1
a90 5
void
SiS_EnableCRT2(SiS_Private *SiS_Pr)
{
  SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
}
d92 1
a92 3
/*********************************************/
/*            HELPER: Write SR11             */
/*********************************************/
d94 7
a100 6
static void
SiS_SetRegSR11ANDOR(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT DataAND, USHORT DataOR)
{
   if(HwInfo->jChipType >= SIS_661) DataAND &= 0x0f;
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,DataAND,DataOR);
}
d102 5
a106 3
/*********************************************/
/*    HELPER: Get Pointer to LCD structure   */
/*********************************************/
d108 4
a111 11
/* For 661 series only */
#ifdef SIS315H
#if 0   /* Need to wait until hardware using this really exists */
static UCHAR *
GetLCDPtr661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, int tabletype,
             USHORT ModeNo, USHORT ModeIdIndex, USHORT RRTI)
{
  UCHAR *ROMAddr =  HwInfo->pjVirtualRomBase;
  UCHAR *tableptr = NULL;
  UCHAR tablelengths[] = { 8, 7, 6, 6, 8, 6, 0, 0, 0 };
  USHORT modeflag, CRT2Index, tablelength, lcdid, myid, tableptri;
d113 9
a121 9
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     CRT2Index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     CRT2Index = SiS_Pr->SiS_RefIndex[RRTI].Ext_CRT2CRTC;
     /* This is total bullshit: */
     if(SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO == SIS_RI_720x576) CRT2Index = 10;
  }
d123 8
a130 8
  if(tabletype <= 1) {
#if 0	/* Not yet implemented */
     if(ModeNo <= 0x13) {
        CRT2Index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex]. + 5;
     } else {
        CRT2Index = SiS_Pr->SiS_RefIndex[RRTI]. + 5;
     }
     if(tabletype & 1) CRT2Index >>= 4;
a131 1
  }
d133 34
a166 1
  CRT2Index &= 0x0f;
d168 1
a168 5
  tablelength = tablelengths[tabletype];
  if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
     if((tabletype == 5) || (tabletype == 7)) tablelength = 8;
     if((tabletype == 3) || (tabletype == 8)) tablelength = 8;
  }
d170 1
a170 1
  if(!tablelength) return NULL;
d172 25
a196 4
  tableptri = ROMAddr[0x222] | (ROMAddr[0x223] << 8);
  tableptri += (tabletype << 1);
  if(!tableptri) return NULL;
  tableptr = &ROMAddr[tableptri];
d198 1
a198 9
  do {
     lcdid = tableptr[0];
     if(lcdid == 0xff) break;
     myid = SiS_Pr->SiS_LCDResInfo;
     if((lcdid & 0x80) && (lcdid != 0x80)) {
        lcdid &= 0x7f;
	myid = SiS_Pr->SiS_LCDTypeInfo;
     }
     if(SiS_Pr->SiS_LCDInfo & LCDPass11) myid &= ~0x1f;
d200 19
a218 11
     if(myid == lcdid) {
	lcdid = tableptr[1] | (tableptr[2] << 8);
	myid = SiS_Pr->SiS_LCDInfo661;
	if(modeflag & HalfDCLK) myid |= 0x200;
	if(ModeNo <= 0x13)      myid |= 0x400;
	lcdid &= myid;
	myid = tableptr[3] | (tableptr[4] << 8);
	if(lcdid == myid) break;
     }
     tableptr += 7;
  } while (1);
d220 21
a240 8
  if(lcdid == myid) {
     lcdid = tableptr[5] | (tableptr[6] << 8);
     lcdid += (tablelength * CRT2Index);
     return((UCHAR *)&ROMAddr[lcdid]);
  }

  return NULL;
}
d243 7
a249 9
static UCHAR *
GetLCDStructPtr661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
   USHORT lcdres = SiS_Pr->SiS_LCDResInfo;
   USHORT lcdtype = SiS_Pr->SiS_LCDTypeInfo;
   USHORT romindex=0;
   UCHAR  *myptr = NULL;
   UCHAR  lcdid;
d251 7
a257 2
   if((ROMAddr) && SiS_Pr->SiS_UseROM) {
      romindex = ROMAddr[0x256] | (ROMAddr[0x257] << 8);
d259 11
a269 4
   if(romindex) {
      myptr = &ROMAddr[romindex];
   } else {
      myptr = (UCHAR *)SiS_LCDStruct661;
d272 2
a273 8
   while(myptr[0] != 0xff) {
      lcdid = myptr[0];
      if((lcdid & 0x80) && (lcdid != 0x80)) {
         lcdres = lcdtype;
	 lcdid &= 0x7f;
      }
      if(lcdid == lcdres) break;
      myptr += 26;
a274 1
   if(myptr[0] == 0xff) return NULL;
d276 1
a276 1
   return myptr;
a277 1
#endif
d279 28
a306 3
/*********************************************/
/*           Adjust Rate for CRT2            */
/*********************************************/
d308 7
a314 4
static BOOLEAN
SiS_AdjustCRT2Rate(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex, USHORT *i,
		   PSIS_HW_INFO HwInfo)
d316 6
a321 1
  USHORT tempax,tempbx,infoflag;
d323 7
a329 1
  tempbx = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].ModeID;
d331 2
a332 1
  tempax = 0;
d334 2
a335 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
d337 2
a338 1
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
d340 1
a340 10
      	tempax |= SupportRAMDAC2;
	if(HwInfo->jChipType >= SIS_315H) {
	   tempax |= SupportRAMDAC2_135;
	   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	      tempax |= SupportRAMDAC2_162;
	      if(SiS_Pr->SiS_VBType & VB_SIS301C) {
		 tempax |= SupportRAMDAC2_202;
	      }
	   }
	}
d342 3
a344 12
     } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {

     	tempax |= SupportLCD;
	if(HwInfo->jChipType >= SIS_315H) {
	   if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
	         if(tempbx == 0x2e) {  /* 640x480 */
		    tempax |= Support64048060Hz;
		 }
	      }
	   }
	}
d346 2
a347 1
     } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
d349 1
a349 1
      	tempax |= SupportHiVision;
d351 2
a352 1
     } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToYPbPr525750|SetCRT2ToAVIDEO|SetCRT2ToSVIDEO|SetCRT2ToSCART)) {
d354 8
a361 3
        tempax |= SupportTV;
	if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	   tempax |= SupportTV1024;
d364 2
a365 1
     }
d367 1
a367 1
  } else {	/* for LVDS  */
d369 1
a369 5
     if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
     	if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
           tempax |= SupportCHTV;
      	}
     }
d371 1
a371 3
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     	tempax |= SupportLCD;
     }
d373 2
a374 1
  }
d376 2
a377 6
  /* Look backwards in table for matching CRT2 mode */
  for(; SiS_Pr->SiS_RefIndex[RefreshRateTableIndex+(*i)].ModeID == tempbx; (*i)--) {
     infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].Ext_InfoFlag;
     if(infoflag & tempax) return(1);
     if((*i) == 0) break;
  }
d379 2
a380 12
  /* Look through the whole mode-section of the table from the beginning
   * for a matching CRT2 mode if no mode was found yet.
   */
  for((*i) = 0; ; (*i)++) {
     if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].ModeID != tempbx) {
     	return(0);
     }
     infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].Ext_InfoFlag;
     if(infoflag & tempax) return(1);
  }
  return(1);
}
d382 5
a386 3
/*********************************************/
/*              Get rate pointer             */
/*********************************************/
d388 20
a407 11
USHORT
SiS_GetRatePtr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
               PSIS_HW_INFO HwInfo)
{
  SHORT  LCDRefreshIndex[] = { 0x00, 0x00, 0x01, 0x01,
                               0x01, 0x01, 0x01, 0x01,
			       0x01, 0x01, 0x01, 0x01,
			       0x01, 0x01, 0x01, 0x01,
			       0x00, 0x00, 0x00, 0x00 };
  USHORT RefreshRateTableIndex,i,backup_i;
  USHORT modeflag,index,temp,backupindex;
d409 3
a411 2
  /* Do NOT check for UseCustomMode here, will skrew up FIFO */
  if(ModeNo == 0xfe) return 0;
d413 1
a413 4
  if(ModeNo <= 0x13)
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  else
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d415 1
a415 5
  if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     	if(modeflag & HalfDCLK) return(0);
     }
  }
d417 14
a430 1
  if(ModeNo < 0x14) return(0xFFFF);
d432 2
a433 1
  /* CR33 holds refresh rate index for CRT1 [3:0] and CRT2 [7:4]. */
d435 2
a436 2
  index = (SiS_GetReg(SiS_Pr->SiS_P3d4,0x33) >> SiS_Pr->SiS_SelectCRT2Rate) & 0x0F;
  backupindex = index;
d438 9
a446 1
  if(index > 0) index--;
d448 2
a449 19
  if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	   if(SiS_Pr->SiS_VBType & VB_NoLCD)		index = 0;
	   else if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) index = backupindex = 0;
	}
	if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
	   if(!(SiS_Pr->SiS_VBType & VB_NoLCD)) {
              temp = LCDRefreshIndex[SiS_Pr->SiS_LCDResInfo];
              if(index > temp) index = temp;
	   }
	}
     } else {
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) index = 0;
	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
           if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) index = 0;
        }
     }
  }
d451 4
a454 2
  RefreshRateTableIndex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].REFindex;
  ModeNo = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].ModeID;
d456 35
a490 8
  if(HwInfo->jChipType >= SIS_315H) {
     if(!(SiS_Pr->SiS_VBInfo & DriverMode)) {
        if( (SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_VESAID == 0x105) ||
            (SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_VESAID == 0x107) ) {
           if(backupindex <= 1) RefreshRateTableIndex++;
        }
     }
  }
d492 3
a494 9
  i = 0;
  do {
     if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + i].ModeID != ModeNo) break;
     temp = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + i].Ext_InfoFlag;
     temp &= ModeInfoFlag;
     if(temp < SiS_Pr->SiS_ModeType) break;
     i++;
     index--;
  } while(index != 0xFFFF);
d496 1
a496 6
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
      	temp = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + i - 1].Ext_InfoFlag;
      	if(temp & InterlaceMode) i++;
     }
  }
d498 1
a498 1
  i--;
d500 6
a505 6
  if((SiS_Pr->SiS_SetFlag & ProgrammingCRT2) && (!(SiS_Pr->SiS_VBInfo & DisableCRT2Display))) {
     backup_i = i;
     if(!(SiS_AdjustCRT2Rate(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, &i, HwInfo))) {
	i = backup_i;
     }
  }
d507 2
a508 2
  return(RefreshRateTableIndex + i);
}
d510 1
a510 3
/*********************************************/
/*            STORE CRT2 INFO in CR34        */
/*********************************************/
d512 2
a513 4
static void
SiS_SaveCRT2Info(SiS_Private *SiS_Pr, USHORT ModeNo)
{
  USHORT temp1,temp2;
d515 16
a530 6
  /* Store CRT1 ModeNo in CR34 */
  SiS_SetReg(SiS_Pr->SiS_P3d4,0x34,ModeNo);
  temp1 = (SiS_Pr->SiS_VBInfo & SetInSlaveMode) >> 8;
  temp2 = ~(SetInSlaveMode >> 8);
  SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x31,temp2,temp1);
}
d532 3
a534 3
/*********************************************/
/*    HELPER: GET SOME DATA FROM BIOS ROM    */
/*********************************************/
d536 3
a538 6
#ifdef SIS300
static BOOLEAN
SiS_CR36BIOSWord23b(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT temp,temp1;
  UCHAR *ROMAddr;
d540 17
a556 9
  if((ROMAddr = (UCHAR *)HwInfo->pjVirtualRomBase) && SiS_Pr->SiS_UseROM) {
     if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
        temp = 1 << ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xff) >> 4);
        temp1 = (ROMAddr[0x23c] << 8) | ROMAddr[0x23b];
        if(temp1 & temp) return TRUE;
     }
  }
  return FALSE;
}
d558 14
a571 5
static BOOLEAN
SiS_CR36BIOSWord23d(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT temp,temp1;
  UCHAR *ROMAddr;
d573 3
a575 10
  if((ROMAddr = (UCHAR *)HwInfo->pjVirtualRomBase) && SiS_Pr->SiS_UseROM) {
     if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
        temp = 1 << ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xff) >> 4);
        temp1 = (ROMAddr[0x23e] << 8) | ROMAddr[0x23d];
        if(temp1 & temp) return TRUE;
     }
  }
  return FALSE;
}
#endif
d577 1
a577 3
/*********************************************/
/*          HELPER: DELAY FUNCTIONS          */
/*********************************************/
d579 1
a579 4
void
SiS_DDC2Delay(SiS_Private *SiS_Pr, USHORT delaytime)
{
  USHORT i, j;
d581 1
a581 4
  for(i=0; i<delaytime; i++) {
     j += SiS_GetReg(SiS_Pr->SiS_P3c4,0x05);
  }
}
d583 2
a584 4
static void
SiS_GenericDelay(SiS_Private *SiS_Pr, USHORT delay)
{
  USHORT temp,flag;
d586 18
a603 18
  flag = SiS_GetRegByte(0x61) & 0x10;

  while(delay) {
     temp = SiS_GetRegByte(0x61) & 0x10;
     if(temp == flag) continue;
     flag = temp;
     delay--;
  }
}

#ifdef SIS315H
static void
SiS_LongDelay(SiS_Private *SiS_Pr, USHORT delay)
{
  while(delay--) {
     SiS_GenericDelay(SiS_Pr,0x19df);
  }
}
d605 32
d638 1
a638 7
static void
SiS_ShortDelay(SiS_Private *SiS_Pr, USHORT delay)
{
  while(delay--) {
     SiS_GenericDelay(SiS_Pr,0x42);
  }
}
d640 1
a640 5
static void
SiS_PanelDelay(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT DelayTime)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT PanelID, DelayIndex, Delay=0;
d642 1
a642 1
  if(HwInfo->jChipType < SIS_315H) {
d644 1
a644 1
#ifdef SIS300
d646 21
a666 9
      PanelID = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36);
      if(SiS_Pr->SiS_VBType & VB_SISVB) {
         if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x18) & 0x10)) PanelID = 0x12;
      }
      DelayIndex = PanelID >> 4;
      if((DelayTime >= 2) && ((PanelID & 0x0f) == 1))  {
         Delay = 3;
      } else {
         if(DelayTime >= 2) DelayTime -= 2;
d668 4
a671 16
         if(!(DelayTime & 0x01)) {
       	    Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[0];
         } else {
       	    Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[1];
         }
	 if((ROMAddr) && (SiS_Pr->SiS_UseROM)) {
            if(ROMAddr[0x220] & 0x40) {
               if(!(DelayTime & 0x01)) {
	          Delay = (USHORT)ROMAddr[0x225];
               } else {
	    	  Delay = (USHORT)ROMAddr[0x226];
               }
            }
         }
      }
      SiS_ShortDelay(SiS_Pr,Delay);
d673 1
a673 1
#endif  /* SIS300 */
d675 1
a675 1
   } else {
d677 1
a677 1
#ifdef SIS315H
d679 1
a679 1
      if(HwInfo->jChipType >= SIS_330) return;
d681 5
a685 35
      if((SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
         (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
	 (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {			/* 315 series, LVDS; Special */

         if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
            PanelID = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36);
	    if(SiS_Pr->SiS_CustomT == CUT_CLEVO1400) {
	       if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x1b) & 0x10)) PanelID = 0x12;
	    }
	    if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
	       DelayIndex = PanelID & 0x0f;
	    } else {
	       DelayIndex = PanelID >> 4;
	    }
	    if((DelayTime >= 2) && ((PanelID & 0x0f) == 1))  {
               Delay = 3;
            } else {
               if(DelayTime >= 2) DelayTime -= 2;
               if(!(DelayTime & 0x01)) {
       		  Delay = SiS_Pr->SiS_PanelDelayTblLVDS[DelayIndex].timer[0];
               } else {
       		  Delay = SiS_Pr->SiS_PanelDelayTblLVDS[DelayIndex].timer[1];
               }
	       if((ROMAddr) && (SiS_Pr->SiS_UseROM)) {
                  if(ROMAddr[0x13c] & 0x40) {
                     if(!(DelayTime & 0x01)) {
	    	        Delay = (USHORT)ROMAddr[0x17e];
                     } else {
	    	        Delay = (USHORT)ROMAddr[0x17f];
                     }
                  }
               }
            }
	    SiS_ShortDelay(SiS_Pr,Delay);
	 }
d687 2
a688 1
      } else if(SiS_Pr->SiS_VBType & VB_SISVB) {			/* 315 series, all bridges */
d690 1
a690 8
	 DelayIndex = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4;
         if(!(DelayTime & 0x01)) {
       	    Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[0];
         } else {
       	    Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[1];
         }
	 Delay <<= 8;
	 SiS_DDC2Delay(SiS_Pr, Delay);
d692 3
a694 1
      }
d696 1
a696 1
#endif /* SIS315H */
d698 15
a712 2
   }
}
d714 2
a715 9
#ifdef SIS315H
static void
SiS_PanelDelayLoop(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                      USHORT DelayTime, USHORT DelayLoop)
{
   int i;
   for(i=0; i<DelayLoop; i++) {
      SiS_PanelDelay(SiS_Pr, HwInfo, DelayTime);
   }
a716 5
#endif

/*********************************************/
/*    HELPER: WAIT-FOR-RETRACE FUNCTIONS     */
/*********************************************/
d718 2
d721 2
a722 1
SiS_WaitRetrace1(SiS_Private *SiS_Pr)
d724 3
a726 1
  USHORT watchdog;
d728 3
a730 35
  if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x1f) & 0xc0) return;

  if(!(SiS_GetReg(SiS_Pr->SiS_P3d4,0x17) & 0x80)) return;

  watchdog = 65535;
  while((SiS_GetRegByte(SiS_Pr->SiS_P3da) & 0x08) && --watchdog);
  watchdog = 65535;
  while((!(SiS_GetRegByte(SiS_Pr->SiS_P3da) & 0x08)) && --watchdog);
}

static void
SiS_WaitRetrace2(SiS_Private *SiS_Pr, USHORT reg)
{
  USHORT watchdog;

  watchdog = 65535;
  while((SiS_GetReg(SiS_Pr->SiS_Part1Port,reg) & 0x02) && --watchdog);
  watchdog = 65535;
  while((!(SiS_GetReg(SiS_Pr->SiS_Part1Port,reg) & 0x02)) && --watchdog);
}

static void
SiS_WaitVBRetrace(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
        if(!(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x20)) return;
     }
     if(!(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x80)) {
        SiS_WaitRetrace1(SiS_Pr);
     } else {
        SiS_WaitRetrace2(SiS_Pr, 0x25);
     }
#endif
d732 2
a733 7
#ifdef SIS315H
     if(!(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x40)) {
        SiS_WaitRetrace1(SiS_Pr);
     } else {
        SiS_WaitRetrace2(SiS_Pr, 0x30);
     }
#endif
a734 1
}
d736 1
a736 4
static void
SiS_VBWait(SiS_Private *SiS_Pr)
{
  USHORT tempal,temp,i,j;
d738 2
a739 15
  temp = 0;
  for(i=0; i<3; i++) {
    for(j=0; j<100; j++) {
       tempal = SiS_GetRegByte(SiS_Pr->SiS_P3da);
       if(temp & 0x01) {
          if((tempal & 0x08))  continue;
          if(!(tempal & 0x08)) break;
       } else {
          if(!(tempal & 0x08)) continue;
          if((tempal & 0x08))  break;
       }
    }
    temp ^= 0x01;
  }
}
d741 4
a744 7
static void
SiS_VBLongWait(SiS_Private *SiS_Pr)
{
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     SiS_VBWait(SiS_Pr);
  } else {
     SiS_WaitRetrace1(SiS_Pr);
a745 1
}
d747 2
a748 3
/*********************************************/
/*               HELPER: MISC                */
/*********************************************/
d750 1
a750 4
static BOOLEAN
SiS_Is301B(SiS_Private *SiS_Pr)
{
  USHORT flag;
d752 1
a752 4
  flag = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x01);
  if(flag >= 0xb0) return TRUE;
  return FALSE;
}
d754 2
a755 4
static BOOLEAN
SiS_CRT2IsLCD(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d757 2
a758 8
  if(HwInfo->jChipType == SIS_730) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3c4,0x13);
     if(flag & 0x20) return TRUE;
  }
  flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
  if(flag & 0x20) return TRUE;
  return FALSE;
}
d760 6
a765 5
BOOLEAN
SiS_IsDualEdge(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
#ifdef SIS315H
  USHORT flag;
d767 10
a776 5
  if(HwInfo->jChipType >= SIS_315H) {
     if((HwInfo->jChipType != SIS_650) || (SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f) & 0xf0)) {
        flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
        if(flag & EnableDualEdge) return TRUE;
     }
d778 1
a778 3
#endif
  return FALSE;
}
d780 1
a780 5
BOOLEAN
SiS_IsVAMode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
#ifdef SIS315H
  USHORT flag;
d782 53
a834 3
  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if((flag & EnableDualEdge) && (flag & SetToLCDA)) return TRUE;
d837 43
a879 2
  return FALSE;
}
a880 8
static BOOLEAN
SiS_IsDualLink(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
#ifdef SIS315H
  if(HwInfo->jChipType >= SIS_315H) {
     if((SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ||
        (SiS_IsVAMode(SiS_Pr, HwInfo))) {
        if(SiS_Pr->SiS_LCDInfo & LCDDualLink) return TRUE;
a882 3
#endif
  return FALSE;
}
d884 6
a889 11
#ifdef SIS315H
static BOOLEAN
SiS_TVEnabled(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  if((SiS_GetReg(SiS_Pr->SiS_Part2Port,0x00) & 0x0f) != 0x0c) return TRUE;
  if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS301LV302LV)) {
     if(SiS_GetReg(SiS_Pr->SiS_Part2Port,0x4d) & 0x10) return TRUE;
  }
  return FALSE;
}
#endif
d891 1
a891 8
#ifdef SIS315H
static BOOLEAN
SiS_LCDAEnabled(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x13) & 0x04) return TRUE;
  return FALSE;
}
#endif
d893 22
a914 5
#ifdef SIS315H
static BOOLEAN
SiS_WeHaveBacklightCtrl(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d916 7
a922 3
  if((HwInfo->jChipType >= SIS_315H) && (HwInfo->jChipType < SIS_661)) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x79);
     if(flag & 0x10) return TRUE;
a923 2
  return FALSE;
}
d925 1
d927 4
a930 5
#ifdef SIS315H
static BOOLEAN
SiS_IsNotM650orLater(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d932 2
a933 10
  if(HwInfo->jChipType == SIS_650) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f);
     flag &= 0xF0;
     /* Check for revision != A0 only */
     if((flag == 0xe0) || (flag == 0xc0) ||
        (flag == 0xb0) || (flag == 0x90)) return FALSE;
  } else if(HwInfo->jChipType >= SIS_661) return FALSE;
  return TRUE;
}
#endif
d935 4
a938 5
#ifdef SIS315H
static BOOLEAN
SiS_IsYPbPr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d940 7
a946 3
  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if(flag & EnableCHYPbPr) return TRUE;  /* = YPrPb = 0x08 */
a947 3
  return FALSE;
}
#endif
d949 4
a952 5
#ifdef SIS315H
static BOOLEAN
SiS_IsChScart(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d954 1
a954 7
  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if(flag & EnableCHScart) return TRUE;  /* = Scart = 0x04 */
  }
  return FALSE;
}
#endif
d956 4
a959 5
#ifdef SIS315H
static BOOLEAN
SiS_IsTVOrYPbPrOrScart(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d961 20
a980 6
  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToTV)        return TRUE;
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if(flag & EnableCHYPbPr)      return TRUE;  /* = YPrPb = 0x08 */
     if(flag & EnableCHScart)      return TRUE;  /* = Scart = 0x04 - TW */
d982 12
a993 2
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToTV)        return TRUE;
a994 2
  return FALSE;
}
d996 12
d1009 4
a1012 5
#ifdef SIS315H
static BOOLEAN
SiS_IsLCDOrLCDA(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d1014 1
a1014 12
  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToLCD) return TRUE;
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if(flag & SetToLCDA)    return TRUE;
  } else {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToLCD) return TRUE;
  }
  return FALSE;
}
#endif
d1016 3
a1018 4
static BOOLEAN
SiS_BridgeIsOn(SiS_Private *SiS_Pr)
{
  USHORT flag;
d1020 7
a1026 5
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     return FALSE;
  } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
     flag = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x00);
     if((flag == 1) || (flag == 2)) return FALSE;
a1027 2
  return TRUE;
}
d1029 6
a1034 4
static BOOLEAN
SiS_BridgeIsEnabled(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d1036 5
a1040 9
  if(!(SiS_BridgeIsOn(SiS_Pr))) {
     flag = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
     if(HwInfo->jChipType < SIS_315H) {
       flag &= 0xa0;
       if((flag == 0x80) || (flag == 0x20)) return FALSE;
     } else {
       flag &= 0x50;
       if((flag == 0x40) || (flag == 0x10)) return FALSE;
     }
d1042 1
a1042 2
  return TRUE;
}
d1044 2
a1045 4
static BOOLEAN
SiS_BridgeInSlave(SiS_Private *SiS_Pr)
{
  USHORT flag1;
d1047 8
a1054 4
  flag1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x31);
  if(flag1 & (SetInSlaveMode >> 8)) return TRUE;
  return FALSE;
}
d1056 1
a1056 3
/*********************************************/
/*       GET VIDEO BRIDGE CONFIG INFO        */
/*********************************************/
d1058 1
a1058 6
/* Setup general purpose IO for Chrontel communication */
void
SiS_SetChrontelGPIO(SiS_Private *SiS_Pr, USHORT myvbinfo)
{
   unsigned long  acpibase;
   unsigned short temp;
d1060 9
a1068 1
   if(!(SiS_Pr->SiS_ChSW)) return;
d1070 1
a1070 16
#ifndef LINUX_XF86
   SiS_SetRegLong(0xcf8,0x80000874);		   /* get ACPI base */
   acpibase = SiS_GetRegLong(0xcfc);
#else
   acpibase = pciReadLong(0x00000800, 0x74);
#endif
   acpibase &= 0xFFFF;
   temp = SiS_GetRegShort((USHORT)(acpibase + 0x3c));  /* ACPI register 0x3c: GP Event 1 I/O mode select */
   temp &= 0xFEFF;
   SiS_SetRegShort((USHORT)(acpibase + 0x3c), temp);
   temp = SiS_GetRegShort((USHORT)(acpibase + 0x3c));
   temp = SiS_GetRegShort((USHORT)(acpibase + 0x3a));  /* ACPI register 0x3a: GP Pin Level (low/high) */
   temp &= 0xFEFF;
   if(!(myvbinfo & SetCRT2ToTV)) temp |= 0x0100;
   SiS_SetRegShort((USHORT)(acpibase + 0x3a), temp);
   temp = SiS_GetRegShort((USHORT)(acpibase + 0x3a));
d1073 1
d1075 3
a1077 3
SiS_GetVBInfo(SiS_Private *SiS_Pr, USHORT ModeNo,
              USHORT ModeIdIndex,PSIS_HW_INFO HwInfo,
	      int checkcrt2mode)
d1079 6
a1084 2
  USHORT tempax,tempbx,temp;
  USHORT modeflag, resinfo=0;
d1086 3
a1088 4
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
d1090 2
a1091 2
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d1094 3
a1096 1
  SiS_Pr->SiS_SetFlag = 0;
d1098 1
a1098 1
  SiS_Pr->SiS_ModeType = modeflag & ModeInfoFlag;
d1100 3
a1102 20
  tempbx = 0;
  if(SiS_BridgeIsOn(SiS_Pr) == 0) {
    	temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
#if 0
   	if(HwInfo->jChipType < SIS_661) {
	   /* NO - YPbPr not set yet ! */
	   if(SiS_Pr->SiS_YPbPr & <all ypbpr except 525i>) {
	      temp &= (SetCRT2ToHiVision | SwitchCRT2 | SetSimuScanMode); 	/* 0x83 */
	      temp |= SetCRT2ToHiVision;   					/* 0x80 */
   	   }
	   if(SiS_Pr->SiS_YPbPr & <ypbpr525i>) {
	      temp &= (SetCRT2ToHiVision | SwitchCRT2 | SetSimuScanMode); 	/* 0x83 */
	      temp |= SetCRT2ToSVIDEO;  					/* 0x08 */
	   }
	}
#endif
    	tempbx |= temp;
    	tempax = SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) << 8;
        tempax &= (DriverMode | LoadDACFlag | SetNotSimuMode | SetPALTV);
    	tempbx |= tempax;
d1104 1
a1104 41
#ifdef SIS315H
	if(HwInfo->jChipType >= SIS_315H) {
    	   if(SiS_Pr->SiS_VBType & (VB_SIS301C|VB_SIS302B|VB_SIS301LV|VB_SIS302LV|VB_SIS302ELV)) {
	      if(ModeNo == 0x03) {
	         /* Mode 0x03 is never in driver mode */
		 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x31,0xbf);
	      }
	      if(!(SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) & (DriverMode >> 8))) {
	         /* Reset LCDA setting */
		 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0xfc);
	      }
	      if(IS_SIS650) {
	         if(SiS_Pr->SiS_UseLCDA) {
		    if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f) & 0xF0) {
		       if((ModeNo <= 0x13) || (!(SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) & (DriverMode >> 8)))) {
		          SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x38,(EnableDualEdge | SetToLCDA));
		       }
		    }
		 }
	      }
	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
       	      if((temp & (EnableDualEdge | SetToLCDA)) == (EnableDualEdge | SetToLCDA)) {
          	 tempbx |= SetCRT2ToLCDA;
	      }
	   }
	   if(HwInfo->jChipType >= SIS_661) {
	      tempbx &= ~(SetCRT2ToYPbPr525750 | SetCRT2ToHiVision);
	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
	      if(SiS_Pr->SiS_VBType & (VB_SIS301C|VB_SIS301LV|VB_SIS302LV|VB_SIS302ELV)) {
	         if(temp & 0x04) {
		    temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35) & 0xe0;
		    if(temp == 0x60) tempbx |= SetCRT2ToHiVision;
		    else             tempbx |= SetCRT2ToYPbPr525750;
		 }
	      } else if(SiS_Pr->SiS_VBType & (VB_SIS301 | VB_SIS301B | VB_SIS302B)) {
	         if(temp & 0x04) {
		    temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35) & 0xe0;
		    if(temp == 0x60) tempbx |= SetCRT2ToHiVision;
		 }
	      }
  	   }
d1106 1
a1106 12
	   if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
	      if(temp & SetToLCDA) {
		 tempbx |= SetCRT2ToLCDA;
	      }
	      if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	         if(temp & EnableCHYPbPr) {
		    tempbx |= SetCRT2ToCHYPbPr;
		 }
	      }
	   }
	}
d1108 11
a1118 1
#endif  /* SIS315H */
d1120 1
a1120 30
    	if(SiS_Pr->SiS_VBType & VB_SISVB) {
	   temp = SetCRT2ToSVIDEO   |
	          SetCRT2ToAVIDEO   |
	          SetCRT2ToSCART    |
	          SetCRT2ToLCDA     |
	          SetCRT2ToLCD      |
	          SetCRT2ToRAMDAC   |
                  SetCRT2ToHiVision |
		  SetCRT2ToYPbPr525750;
    	} else {
           if(HwInfo->jChipType >= SIS_315H) {
              if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
        	 temp = SetCRT2ToAVIDEO |
		        SetCRT2ToSVIDEO |
		        SetCRT2ToSCART  |
		        SetCRT2ToLCDA   |
		        SetCRT2ToLCD    |
		        SetCRT2ToCHYPbPr;
      	      } else {
        	 temp = SetCRT2ToLCDA   |
		        SetCRT2ToLCD;
	      }
	   } else {
      	      if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
          	 temp = SetCRT2ToTV | SetCRT2ToLCD;
              } else {
        	 temp = SetCRT2ToLCD;
	      }
	   }
    	}
d1122 1
a1122 4
    	if(!(tempbx & temp)) {
      	   tempax = DisableCRT2Display;
      	   tempbx = 0;
    	}
d1124 1
a1124 47
   	if(SiS_Pr->SiS_VBType & VB_SISVB) {
	   USHORT clearmask = ( DriverMode 	   |
				DisableCRT2Display |
				LoadDACFlag 	   |
				SetNotSimuMode 	   |
				SetInSlaveMode 	   |
				SetPALTV 	   |
				SwitchCRT2	   |
				SetSimuScanMode );
      	   if(tempbx & SetCRT2ToLCDA) {
              tempbx &= (clearmask | SetCRT2ToLCDA);
      	   }
	   if(tempbx & SetCRT2ToRAMDAC) {
              tempbx &= (clearmask | SetCRT2ToRAMDAC);
      	   }
	   if(tempbx & SetCRT2ToLCD) {
              tempbx &= (clearmask | SetCRT2ToLCD);
      	   }
	   if(tempbx & SetCRT2ToSCART) {
              tempbx &= (clearmask | SetCRT2ToSCART);
      	   }
	   if(tempbx & SetCRT2ToHiVision) {
              tempbx &= (clearmask | SetCRT2ToHiVision);
      	   }
	   if(tempbx & SetCRT2ToYPbPr525750) {
	      tempbx &= (clearmask | SetCRT2ToYPbPr525750);
	   }
   	} else {
	   if(HwInfo->jChipType >= SIS_315H) {
	      if(tempbx & SetCRT2ToLCDA) {
	         tempbx &= (0xFF00|SwitchCRT2|SetSimuScanMode);
	      }
	   }
      	   if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
              if(tempbx & SetCRT2ToTV) {
          	 tempbx &= (0xFF00|SetCRT2ToTV|SwitchCRT2|SetSimuScanMode);
	      }
      	   }
      	   if(tempbx & SetCRT2ToLCD) {
              tempbx &= (0xFF00|SetCRT2ToLCD|SwitchCRT2|SetSimuScanMode);
	   }
	   if(HwInfo->jChipType >= SIS_315H) {
	      if(tempbx & SetCRT2ToLCDA) {
	         tempbx |= SetCRT2ToLCD;
	      }
	   }
	}
d1126 1
a1126 5
    	if(tempax & DisableCRT2Display) {
      	   if(!(tempbx & (SwitchCRT2 | SetSimuScanMode))) {
              tempbx = SetSimuScanMode | DisableCRT2Display;
      	   }
    	}
d1128 24
a1151 3
    	if(!(tempbx & DriverMode)){
      	   tempbx |= SetSimuScanMode;
    	}
d1153 2
a1154 7
	/* LVDS/CHRONTEL (LCD/TV) and 301BDH (LCD) can only be slave in 8bpp modes */
	if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	   if( (SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
	       ((tempbx & SetCRT2ToLCD) && (SiS_Pr->SiS_VBType & VB_NoLCD)) ) {
	       modeflag &= (~CRT2Mode);
	   }
	}
d1156 3
a1158 22
    	if(!(tempbx & SetSimuScanMode)) {
      	   if(tempbx & SwitchCRT2) {
              if((!(modeflag & CRT2Mode)) && (checkcrt2mode)) {
		 if( (HwInfo->jChipType >= SIS_315H) &&
		     (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) ) {
		    if(resinfo != SIS_RI_1600x1200) {
                       tempbx |= SetSimuScanMode;
		    }
		 } else {
            	    tempbx |= SetSimuScanMode;
	         }
              }
      	   } else {
              if(!(SiS_BridgeIsEnabled(SiS_Pr,HwInfo))) {
          	 if(!(tempbx & DriverMode)) {
            	    if(SiS_BridgeInSlave(SiS_Pr)) {
		       tempbx |= SetSimuScanMode;
            	    }
                 }
              }
      	   }
    	}
d1160 1
a1160 18
    	if(!(tempbx & DisableCRT2Display)) {
           if(tempbx & DriverMode) {
              if(tempbx & SetSimuScanMode) {
          	 if((!(modeflag & CRT2Mode)) && (checkcrt2mode)) {
	            if( (HwInfo->jChipType >= SIS_315H) &&
		        (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) ) {
		       if(resinfo != SIS_RI_1600x1200) {
		          tempbx |= SetInSlaveMode;
		       }
		    } else {
            	       tempbx |= SetInSlaveMode;
                    }
	         }
              }
           } else {
              tempbx |= SetInSlaveMode;
      	   }
    	}
d1162 18
d1182 15
a1196 1
  SiS_Pr->SiS_VBInfo = tempbx;
d1198 2
a1199 2
  if(HwInfo->jChipType == SIS_630) {
     SiS_SetChrontelGPIO(SiS_Pr, SiS_Pr->SiS_VBInfo);
d1201 6
d1208 1
a1208 11
#ifdef TWDEBUG
#ifdef LINUX_KERNEL
  printk(KERN_DEBUG "sisfb: (VBInfo= 0x%04x, SetFlag=0x%04x)\n",
      SiS_Pr->SiS_VBInfo, SiS_Pr->SiS_SetFlag);
#endif
#ifdef LINUX_XF86
  xf86DrvMsgVerb(0, X_PROBED, 3, "(init301: VBInfo=0x%04x, SetFlag=0x%04x)\n",
      SiS_Pr->SiS_VBInfo, SiS_Pr->SiS_SetFlag);
#endif
#endif
}
d1210 16
a1225 3
/*********************************************/
/*           DETERMINE YPbPr MODE            */
/*********************************************/
d1227 1
a1227 3
void
SiS_SetYPbPr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
d1229 1
a1229 1
  UCHAR temp;
d1231 1
a1231 7
  /* Note: This variable is only used on 30xLV systems.
   * CR38 has a different meaning on LVDS/CH7019 systems.
   * On 661 and later, these bits moved to CR35.
   *
   * On 301, 301B, only HiVision 1080i is supported.
   * On 30xLV, 301C, only YPbPr 1080i is supported.
   */
d1233 2
a1234 2
  SiS_Pr->SiS_YPbPr = 0;
  if(HwInfo->jChipType >= SIS_661) return;
d1236 1
a1236 5
  if(SiS_Pr->SiS_VBType) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	SiS_Pr->SiS_YPbPr = YPbPrHiVision;
     }
  }
d1238 14
a1251 12
  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_VBType & (VB_SIS301LV302LV | VB_SIS301C)) {
        temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
	if(temp & 0x08) {
	   switch((temp >> 4)) {
	   case 0x00: SiS_Pr->SiS_YPbPr = YPbPr525i;     break;
	   case 0x01: SiS_Pr->SiS_YPbPr = YPbPr525p;     break;
	   case 0x02: SiS_Pr->SiS_YPbPr = YPbPr750p;     break;
	   case 0x03: SiS_Pr->SiS_YPbPr = YPbPrHiVision; break;
	   }
	}
     }
d1254 2
a1255 1
}
d1257 1
a1257 3
/*********************************************/
/*           DETERMINE TVMode flag           */
/*********************************************/
d1259 1
a1259 6
void
SiS_SetTVMode(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT temp, temp1, resinfo = 0, romindex = 0;
  UCHAR  OutputSelect = *SiS_Pr->pSiS_OutputSelect;
d1261 25
a1285 1
  SiS_Pr->SiS_TVMode = 0;
d1287 1
a1287 2
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) return;
  if(SiS_Pr->UseCustomMode) return;
d1289 2
a1290 2
  if(ModeNo > 0x13) {
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d1293 4
a1296 1
  if(HwInfo->jChipType < SIS_661) {
d1298 1
a1298 1
     if(SiS_Pr->SiS_VBInfo & SetPALTV) SiS_Pr->SiS_TVMode |= TVSetPAL;
d1300 21
a1320 73
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        temp = 0;
        if((HwInfo->jChipType == SIS_630) ||
           (HwInfo->jChipType == SIS_730)) {
           temp = 0x35;
	   romindex = 0xfe;
        } else if(HwInfo->jChipType >= SIS_315H) {
           temp = 0x38;
	   romindex = 0xf3;
	   if(HwInfo->jChipType >= SIS_330) romindex = 0x11b;
        }
        if(temp) {
           if(romindex && ROMAddr && SiS_Pr->SiS_UseROM) {
	      OutputSelect = ROMAddr[romindex];
	      if(!(OutputSelect & EnablePALMN)) {
                 SiS_SetRegAND(SiS_Pr->SiS_P3d4,temp,0x3F);
	      }
	   }
	   temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,temp);
	   if(SiS_Pr->SiS_TVMode & TVSetPAL) {
              if(temp1 & EnablePALM) {		/* 0x40 */
                 SiS_Pr->SiS_TVMode |= TVSetPALM;
	         SiS_Pr->SiS_TVMode &= ~TVSetPAL;
	      } else if(temp1 & EnablePALN) {	/* 0x80 */
	         SiS_Pr->SiS_TVMode |= TVSetPALN;
              }
	   } else {
              if(temp1 & EnableNTSCJ) {		/* 0x40 */
	         SiS_Pr->SiS_TVMode |= TVSetNTSCJ;
  	      }
	   }
        }
	/* Translate HiVision/YPbPr to our new flags */
	if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	   if(SiS_Pr->SiS_YPbPr == YPbPr750p)          SiS_Pr->SiS_TVMode |= TVSetYPbPr750p;
	   else if(SiS_Pr->SiS_YPbPr == YPbPr525p)     SiS_Pr->SiS_TVMode |= TVSetYPbPr525p;
	   else	if(SiS_Pr->SiS_YPbPr == YPbPrHiVision) SiS_Pr->SiS_TVMode |= TVSetHiVision;
	   else					       SiS_Pr->SiS_TVMode |= TVSetYPbPr525i;
	   if(SiS_Pr->SiS_TVMode & (TVSetYPbPr750p | TVSetYPbPr525p | TVSetYPbPr525i)) {
	      SiS_Pr->SiS_VBInfo &= ~SetCRT2ToHiVision;
	      SiS_Pr->SiS_VBInfo |= SetCRT2ToYPbPr525750;
	   } else if(SiS_Pr->SiS_TVMode & TVSetHiVision) {
	      SiS_Pr->SiS_TVMode |= TVSetPAL;
	   }
	}
     } else if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
        if(SiS_Pr->SiS_CHOverScan) {
           if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
              temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
              if((temp & TVOverScan) || (SiS_Pr->SiS_CHOverScan == 1)) {
	         SiS_Pr->SiS_TVMode |= TVSetCHOverScan;
              }
           } else if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
      	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x79);
      	      if((temp & 0x80) || (SiS_Pr->SiS_CHOverScan == 1)) {
	         SiS_Pr->SiS_TVMode |= TVSetCHOverScan;
 	      }
	   }
           if(SiS_Pr->SiS_CHSOverScan) {
              SiS_Pr->SiS_TVMode |= TVSetCHOverScan;
           }
        }
        if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
	   temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     	   if(SiS_Pr->SiS_TVMode & TVSetPAL) {
              if(temp & EnablePALM)      SiS_Pr->SiS_TVMode |= TVSetPALM;
	      else if(temp & EnablePALN) SiS_Pr->SiS_TVMode |= TVSetPALN;
           } else {
	      if(temp & EnableNTSCJ) {
	         SiS_Pr->SiS_TVMode |= TVSetNTSCJ;
  	      }
	   }
	}
d1322 1
d1324 3
a1326 1
  } else {  /* 661 and later */
d1328 16
a1343 33
     temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
     if(temp1 & 0x01) {
        SiS_Pr->SiS_TVMode |= TVSetPAL;
	if(temp1 & 0x08) {
	   SiS_Pr->SiS_TVMode |= TVSetPALN;
	} else if(temp1 & 0x04) {
	   if(SiS_Pr->SiS_VBType & VB_SISVB) {
	      SiS_Pr->SiS_TVMode &= ~TVSetPAL;
	   }
	   SiS_Pr->SiS_TVMode |= TVSetPALM;
	}
     } else {
        if(temp1 & 0x02) {
	   SiS_Pr->SiS_TVMode |= TVSetNTSCJ;
	}
     }
     if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
        if(SiS_Pr->SiS_CHOverScan) {
           if((temp1 & 0x10) || (SiS_Pr->SiS_CHOverScan == 1)) {
	      SiS_Pr->SiS_TVMode |= TVSetCHOverScan;
	   }
	}
     }
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	   temp1 &= 0xe0;
	   if(temp1 == 0x00)      SiS_Pr->SiS_TVMode |= TVSetYPbPr525i;
	   else if(temp1 == 0x20) SiS_Pr->SiS_TVMode |= TVSetYPbPr525p;
	   else if(temp1 == 0x40) SiS_Pr->SiS_TVMode |= TVSetYPbPr750p;
	} else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	   SiS_Pr->SiS_TVMode |= (TVSetHiVision | TVSetPAL);
	}
     }
d1345 1
d1347 1
a1347 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToSCART) SiS_Pr->SiS_TVMode |= TVSetPAL;
d1349 7
a1355 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
d1357 2
a1358 6
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
        SiS_Pr->SiS_TVMode |= TVSetPAL;
	SiS_Pr->SiS_TVMode &= ~(TVSetPALM | TVSetPALN | TVSetNTSCJ);
     } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
        if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525i | TVSetYPbPr525p | TVSetYPbPr750p)) {
	   SiS_Pr->SiS_TVMode &= ~(TVSetPAL | TVSetNTSCJ | TVSetPALM | TVSetPALN);
a1359 1
     }
d1361 4
a1364 5
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
           SiS_Pr->SiS_TVMode |= TVSetTVSimuMode;
        }
     }
d1366 1
a1366 8
     if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
        /* BIOS sets TVNTSC1024 without checking 525p here. Wrong? */
        if(!(SiS_Pr->SiS_TVMode & (TVSetHiVision | TVSetYPbPr525p | TVSetYPbPr750p))) {
           if(resinfo == SIS_RI_1024x768) {
              SiS_Pr->SiS_TVMode |= TVSetNTSC1024;
	   }
        }
     }
d1368 1
a1368 11
     SiS_Pr->SiS_TVMode |= TVRPLLDIV2XO;
     if((SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) &&
        (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
	SiS_Pr->SiS_TVMode &= ~TVRPLLDIV2XO;
     } else if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p | TVSetYPbPr750p)) {
        SiS_Pr->SiS_TVMode &= ~TVRPLLDIV2XO;
     } else if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
        if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
           SiS_Pr->SiS_TVMode &= ~TVRPLLDIV2XO;
        }
     }
d1370 1
a1370 1
  }
d1372 13
a1384 1
  SiS_Pr->SiS_VBInfo &= ~SetPALTV;
d1386 1
a1386 3
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "(init301: TVMode %x, VBInfo %x)\n", SiS_Pr->SiS_TVMode, SiS_Pr->SiS_VBInfo);
#endif 
d1388 1
a1388 1
}
d1390 2
a1391 3
/*********************************************/
/*               GET LCD INFO                */
/*********************************************/
d1393 1
a1393 14
void
SiS_GetLCDResInfo(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
		  PSIS_HW_INFO HwInfo)
{
#ifdef SIS300
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
#endif
#ifdef SIS315H
  UCHAR  *myptr = NULL;
#endif  
  USHORT temp,modeflag,resinfo=0;
  const unsigned char SiS300SeriesLCDRes[] =
         { 0,  1,  2,  3,  7,  4,  5,  8,
	   0,  0, 10,  0,  0,  0,  0, 15 };
d1395 19
a1413 3
  SiS_Pr->SiS_LCDResInfo = 0;
  SiS_Pr->SiS_LCDTypeInfo = 0;
  SiS_Pr->SiS_LCDInfo = 0;
d1415 3
a1417 9
  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     if(ModeNo <= 0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     } else {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     }
d1420 3
a1422 1
  if(!(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA))) return;
d1424 3
a1426 1
  temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36);
d1428 2
a1429 11
  if((HwInfo->jChipType < SIS_315H) || (HwInfo->jChipType >= SIS_661)) {
     SiS_Pr->SiS_LCDTypeInfo = temp >> 4;
  } else {
     SiS_Pr->SiS_LCDTypeInfo = (temp & 0x0F) - 1;
  }
  temp &= 0x0f;
  if(HwInfo->jChipType < SIS_315H) {
      /* Translate 300 series LCDRes to 315 series for unified usage */
      temp = SiS300SeriesLCDRes[temp];
  }
  SiS_Pr->SiS_LCDResInfo = temp;
d1431 1
a1431 7
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(SiS_Pr->SiS_LCDResInfo < SiS_Pr->SiS_PanelMin301)
	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_PanelMin301;
  } else {
     if(SiS_Pr->SiS_LCDResInfo < SiS_Pr->SiS_PanelMinLVDS)
	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_PanelMinLVDS;
  }
d1433 4
a1436 3
  if((!SiS_Pr->CP_HaveCustomData) || (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_PanelCustom)) {
     if(SiS_Pr->SiS_LCDResInfo > SiS_Pr->SiS_PanelMax)
  	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_Panel1024x768;
d1438 9
a1446 6

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
        SiS_Pr->SiS_LCDResInfo = Panel_Barco1366;
     } else if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
        SiS_Pr->SiS_LCDResInfo = Panel_848x480;
d1449 1
d1451 6
a1456 26
  switch(SiS_Pr->SiS_LCDResInfo) {
     case Panel_800x600:   SiS_Pr->PanelXRes =  800; SiS_Pr->PanelYRes =  600; break;
     case Panel_1024x768:  SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  768; break;
     case Panel_1280x1024: SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes = 1024; break;
     case Panel_640x480_3:
     case Panel_640x480_2:
     case Panel_640x480:   SiS_Pr->PanelXRes =  640; SiS_Pr->PanelYRes =  480; break;
     case Panel_1024x600:  SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  600; break;
     case Panel_1152x864:  SiS_Pr->PanelXRes = 1152; SiS_Pr->PanelYRes =  864; break;
     case Panel_1280x960:  SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  960; break;
     case Panel_1152x768:  SiS_Pr->PanelXRes = 1152; SiS_Pr->PanelYRes =  768; break;
     case Panel_1400x1050: SiS_Pr->PanelXRes = 1400; SiS_Pr->PanelYRes = 1050; break;
     case Panel_1280x768:  SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  768; break;
     case Panel_1600x1200: SiS_Pr->PanelXRes = 1600; SiS_Pr->PanelYRes = 1200; break;
     case Panel_320x480:   SiS_Pr->PanelXRes =  320; SiS_Pr->PanelYRes =  480; break;
     case Panel_Custom:    SiS_Pr->PanelXRes = SiS_Pr->CP_MaxX;
    			   SiS_Pr->PanelYRes = SiS_Pr->CP_MaxY;
			   break;
     case Panel_Barco1366: SiS_Pr->PanelXRes = 1360; SiS_Pr->PanelYRes = 1024; break;
     case Panel_848x480:   SiS_Pr->PanelXRes =  848; SiS_Pr->PanelYRes =  480; break;
     default:		   SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  768; break;
  }

  temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
  if(HwInfo->jChipType < SIS_661) {
     temp &= ~0xe;
d1458 1
a1458 12
#ifdef SIS315H
     if(!(temp & 0x10)) {
        if(temp & 0x08) temp |= LCDPass11;
     }
     temp &= ~0xe;
     if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
        myptr = GetLCDStructPtr661(SiS_Pr, HwInfo);
        if(myptr) {
           if(myptr[2] & 0x01) temp |= LCDDualLink;
        }
     }
#endif
d1460 4
a1463 1
  SiS_Pr->SiS_LCDInfo = temp;
d1465 11
a1475 4
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
        SiS_Pr->SiS_LCDInfo = 0x80 | 0x40 | 0x20;   /* neg h/v sync, RGB24 */
     }
d1477 2
d1480 3
a1482 2
  if(!(SiS_Pr->UsePanelScaler))        SiS_Pr->SiS_LCDInfo &= ~DontExpandLCD;
  else if(SiS_Pr->UsePanelScaler == 1) SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
d1484 2
a1485 42
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) {
	   /* For non-standard LCD resolution, we let the panel scale */
           SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
	   if(ModeNo == 0x7c || ModeNo == 0x7d || ModeNo == 0x7e) {
	      /* We do not scale to 1280x960 (B/C bridges only) */
              SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   }
	   if(((HwInfo->jChipType >= SIS_315H) && (ModeNo == 0x23 || ModeNo == 0x24 || ModeNo == 0x25)) ||
	      ((HwInfo->jChipType < SIS_315H)  && (ModeNo == 0x55 || ModeNo == 0x5a || ModeNo == 0x5b))) {
	      /* We do not scale to 1280x768 (B/C bridges only) */
              SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   }
	   if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	      /* No non-scaling data available for LV bridges */
	      SiS_Pr->SiS_LCDInfo &= ~DontExpandLCD;
	   }
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
           /* No idea about the timing and zoom factors */
           SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
	   if(ModeNo == 0x3a || ModeNo == 0x4d || ModeNo == 0x65) {
	      /* We do not scale to 1280x1024 (all bridges) */
	      SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   }
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
	   if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	      /* No idea about the timing and zoom factors (C bridge only) */
	      SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   }
	}
	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	   if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
              if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	         SiS_Pr->SiS_LCDInfo &= ~DontExpandLCD;
	      }
	   }
	}
     }
  }
d1487 3
a1489 25
  if(HwInfo->jChipType >= SIS_315H) {
#ifdef SIS315H
     if(HwInfo->jChipType < SIS_661) {
        if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x39) & 0x01) {
           SiS_Pr->SiS_LCDInfo &= (~DontExpandLCD);
	   SiS_Pr->SiS_LCDInfo |= LCDPass11;
	}
     }
#endif
  } else {
#ifdef SIS300
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        if((ROMAddr) && SiS_Pr->SiS_UseROM) {
	   if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
              if(!(ROMAddr[0x235] & 0x02)) {
	         SiS_Pr->SiS_LCDInfo &= (~DontExpandLCD);
 	      }
	   }
        }
     } else if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	if((SiS_Pr->SiS_SetFlag & SetDOSMode) && ((ModeNo == 0x03) || (ModeNo == 0x10))) {
           SiS_Pr->SiS_LCDInfo &= (~DontExpandLCD);
	}
     }
#endif
d1491 2
d1494 2
a1495 4
  /* Trumpion: Assume non-expanding */
  if(SiS_Pr->SiS_IF_DEF_TRUMPION != 0) {
     SiS_Pr->SiS_LCDInfo &= (~DontExpandLCD);
  }
d1497 1
a1497 3
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
     SiS_Pr->SiS_LCDInfo &= (~LCDPass11);
  }
d1500 75
a1574 16
  if((HwInfo->jChipType >= SIS_315H) && (HwInfo->jChipType < SIS_661)) {
     if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	/* Enable 302LV/302ELV dual link mode.
	 * For 661, this is done above.
	 */
        if((SiS_Pr->SiS_CustomT == CUT_CLEVO1024) &&
	   (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)) {
	   /* (Sets this in SenseLCD; new paneltypes) */
	   SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	}
        if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) ||
	   (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) ||
           (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)) {
	   SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	}
     }
d1576 1
a1576 1
#endif
d1578 1
a1578 1
  if(!((HwInfo->jChipType < SIS_315H) && (SiS_Pr->SiS_SetFlag & SetDOSMode))) {
d1580 20
a1599 16
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
	   if(ModeNo > 0x13) {
	      if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
                 if((resinfo == SIS_RI_800x600) || (resinfo == SIS_RI_400x300)) {
                    SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
		 }
              }
           }
        }
	if(ModeNo == 0x12) {
	   if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
	      SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	   }
	}
     }
d1601 3
a1603 16
     if(modeflag & HalfDCLK) {
        if(SiS_Pr->SiS_IF_DEF_TRUMPION == 0) {
           if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
	      if(!(((SiS_Pr->SiS_IF_DEF_LVDS == 1) || (HwInfo->jChipType < SIS_315H)) &&
	                                      (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480))) {
                 if(ModeNo > 0x13) {
                    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
                       if(resinfo == SIS_RI_512x384) SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
                    } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
                       if(resinfo == SIS_RI_400x300) SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
                    }
                 }
	      } else SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
           } else SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
        } else SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
     }
d1605 4
d1611 3
a1613 4
  if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
     if(SiS_Pr->SiS_VBInfo & SetNotSimuMode) {
     	SiS_Pr->SiS_SetFlag |= LCDVESATiming;
     }
d1615 33
a1647 1
     SiS_Pr->SiS_SetFlag |= LCDVESATiming;
d1650 12
a1661 7
  SiS_Pr->SiS_LCDInfo661 = 0;
  if(SiS_Pr->SiS_SetFlag & LCDVESATiming) SiS_Pr->SiS_LCDInfo661 |= 0x0001;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA) SiS_Pr->SiS_LCDInfo661 |= 0x0002;
  if(SiS_Pr->SiS_LCDInfo & LCDPass11)     SiS_Pr->SiS_LCDInfo661 |= 0x0008;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) SiS_Pr->SiS_LCDInfo661 |= 0x0010;
  SiS_Pr->SiS_LCDInfo661 |= (SiS_Pr->SiS_LCDInfo & 0xe0);
  if(SiS_Pr->SiS_LCDInfo & LCDDualLink)   SiS_Pr->SiS_LCDInfo661 |= 0x0100;
d1663 5
a1667 12
#ifdef LINUX_KERNEL
#ifdef TWDEBUG
  printk(KERN_DEBUG "sisfb: (LCDInfo=0x%04x LCDResInfo=0x%02x LCDTypeInfo=0x%02x)\n",
	SiS_Pr->SiS_LCDInfo, SiS_Pr->SiS_LCDResInfo, SiS_Pr->SiS_LCDTypeInfo);
#endif
#endif
#ifdef LINUX_XF86
  xf86DrvMsgVerb(0, X_PROBED, 4,
  	"(init301: LCDInfo=0x%04x LCDResInfo=0x%02x LCDTypeInfo=0x%02x SetFlag=0x%04x)\n",
	SiS_Pr->SiS_LCDInfo, SiS_Pr->SiS_LCDResInfo, SiS_Pr->SiS_LCDTypeInfo, SiS_Pr->SiS_SetFlag);
#endif
}
d1669 3
a1671 3
/*********************************************/
/*                 GET VCLK                  */
/*********************************************/
d1673 4
a1676 27
USHORT
SiS_GetVCLK2Ptr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
  USHORT tempbx;
  const USHORT LCDXlat0VCLK[4]    = {VCLK40,       VCLK40,       VCLK40,       VCLK40};
  const USHORT LVDSXlat1VCLK[4]   = {VCLK40,       VCLK40,       VCLK40,       VCLK40};
  const USHORT LVDSXlat4VCLK[4]   = {VCLK28,       VCLK28,       VCLK28,       VCLK28};
#ifdef SIS300
  const USHORT LCDXlat1VCLK300[4] = {VCLK65_300,   VCLK65_300,   VCLK65_300,   VCLK65_300};
  const USHORT LCDXlat2VCLK300[4] = {VCLK108_2_300,VCLK108_2_300,VCLK108_2_300,VCLK108_2_300};
  const USHORT LVDSXlat2VCLK300[4]= {VCLK65_300,   VCLK65_300,   VCLK65_300,   VCLK65_300};
  const USHORT LVDSXlat3VCLK300[4]= {VCLK65_300,   VCLK65_300,   VCLK65_300,   VCLK65_300};
#endif
#ifdef SIS315H
  const USHORT LCDXlat1VCLK310[4] = {VCLK65_315,   VCLK65_315,   VCLK65_315,   VCLK65_315};
  const USHORT LCDXlat2VCLK310[4] = {VCLK108_2_315,VCLK108_2_315,VCLK108_2_315,VCLK108_2_315};
  const USHORT LVDSXlat2VCLK310[4]= {VCLK65_315,   VCLK65_315,   VCLK65_315,   VCLK65_315};
  const USHORT LVDSXlat3VCLK310[4]= {VCLK108_2_315,VCLK108_2_315,VCLK108_2_315,VCLK108_2_315};
#endif
  USHORT CRT2Index,VCLKIndex=0;
  USHORT modeflag,resinfo;
  const UCHAR  *CHTVVCLKPtr = NULL;
  const USHORT *LCDXlatVCLK1 = NULL;
  const USHORT *LCDXlatVCLK2 = NULL;
  const USHORT *LVDSXlatVCLK2 = NULL;
  const USHORT *LVDSXlatVCLK3 = NULL;
d1678 17
a1694 13
  if(HwInfo->jChipType >= SIS_315H) {
#ifdef SIS315H
     LCDXlatVCLK1 = LCDXlat1VCLK310;
     LCDXlatVCLK2 = LCDXlat2VCLK310;
     LVDSXlatVCLK2 = LVDSXlat2VCLK310;
     LVDSXlatVCLK3 = LVDSXlat3VCLK310;
#endif
  } else {
#ifdef SIS300
     LCDXlatVCLK1 = LCDXlat1VCLK300;
     LCDXlatVCLK2 = LCDXlat2VCLK300;
     LVDSXlatVCLK2 = LVDSXlat2VCLK300;
     LVDSXlatVCLK3 = LVDSXlat3VCLK300;
d1696 1
a1696 1
  }
d1698 3
a1700 9
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
     CRT2Index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     CRT2Index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }
d1702 2
a1703 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {    /* 30x/B/LV */
d1705 11
a1715 1
     if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {
d1717 5
a1721 2
        CRT2Index >>= 6;
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {      /*  LCD */
d1723 13
a1735 56
           if(HwInfo->jChipType < SIS_315H) {
	      if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
	         VCLKIndex = LCDXlat0VCLK[CRT2Index];
	      } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	    	 VCLKIndex = LCDXlatVCLK1[CRT2Index];
	      } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
	    	 VCLKIndex = LCDXlatVCLK1[CRT2Index];
	      } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) {
	    	 VCLKIndex = LCDXlatVCLK1[CRT2Index];
	      } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
	         VCLKIndex = VCLK81_300;	/* guessed */
	      } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960) {
		 VCLKIndex = VCLK108_3_300;
		 if(resinfo == SIS_RI_1280x1024) VCLKIndex = VCLK100_300;
	      } else {
	    	 VCLKIndex = LCDXlatVCLK2[CRT2Index];
	      }
	   } else {
	      if( (SiS_Pr->SiS_VBType & VB_SIS301LV302LV) ||
	          (!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) ) {
      	         if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
		    VCLKIndex = VCLK108_2_315;
		 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
		    VCLKIndex = VCLK81_315;  	/* guessed */
		 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
		    VCLKIndex = VCLK108_2_315;
		 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
		    VCLKIndex = VCLK162_315;
		 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960) {
		    VCLKIndex = VCLK108_3_315;
		    if(resinfo == SIS_RI_1280x1024) VCLKIndex = VCLK100_315;
		 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
		    VCLKIndex = LCDXlatVCLK1[CRT2Index];
	         } else {
		    VCLKIndex = LCDXlatVCLK2[CRT2Index];
      	         }
	      } else {
                 VCLKIndex = (UCHAR)SiS_GetRegByte((USHORT)(SiS_Pr->SiS_P3ca+0x02));  /*  Port 3cch */
         	 VCLKIndex = ((VCLKIndex >> 2) & 0x03);
        	 if(ModeNo > 0x13) {
          	    VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
        	 }
		 if(ModeNo <= 0x13) {
		    if(HwInfo->jChipType <= SIS_315PRO) {
		       if(SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC == 1) VCLKIndex = 0x42;
	            } else {
		       if(SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC == 1) VCLKIndex = 0x00;
		    }
		 }
		 if(HwInfo->jChipType <= SIS_315PRO) {
		    if(VCLKIndex == 0) VCLKIndex = 0x41;
		    if(VCLKIndex == 1) VCLKIndex = 0x43;
		    if(VCLKIndex == 4) VCLKIndex = 0x44;
		 }
	      }
	   }
d1737 17
a1753 1
        } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {                 /*  TV */
d1755 3
a1757 17
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
              if(SiS_Pr->SiS_TVMode & TVRPLLDIV2XO) VCLKIndex = HiTVVCLKDIV2;
     	      else                                  VCLKIndex = HiTVVCLK;
              if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
            	 if(modeflag & Charx8Dot) 	    VCLKIndex = HiTVSimuVCLK;
            	 else 			  	    VCLKIndex = HiTVTextVCLK;
              }
           } else if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) VCLKIndex = YPbPr750pVCLK - TVCLKBASE_315;
	   else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p)   VCLKIndex = TVVCLKDIV2;
	   else if(SiS_Pr->SiS_TVMode & TVRPLLDIV2XO)     VCLKIndex = TVVCLKDIV2;
           else         		            	  VCLKIndex = TVVCLK;

	   if(HwInfo->jChipType < SIS_315H) {
              VCLKIndex += TVCLKBASE_300;
  	   } else {
	      VCLKIndex += TVCLKBASE_315;
	   }
d1759 11
a1769 1
        } else {         					/* VGA2 */
d1771 5
a1775 15
           VCLKIndex = (UCHAR)SiS_GetRegByte((USHORT)(SiS_Pr->SiS_P3ca+0x02));
           VCLKIndex = ((VCLKIndex >> 2) & 0x03);
           if(ModeNo > 0x13) {
              VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
	      if(HwInfo->jChipType < SIS_315H) {
          	 VCLKIndex &= 0x3f;
		 if( (HwInfo->jChipType == SIS_630) &&
		     (HwInfo->jChipRevision >= 0x30)) {
		    if(VCLKIndex == 0x14) VCLKIndex = 0x34;
		 }
		 /* Better VGA2 clock for 1280x1024@@75 */
		 if(VCLKIndex == 0x17) VCLKIndex = 0x45;
	      }
           }
        }
d1777 2
a1778 1
     } else {   /* If not programming CRT2 */
d1780 2
a1781 13
        VCLKIndex = (UCHAR)SiS_GetRegByte((USHORT)(SiS_Pr->SiS_P3ca+0x02));
        VCLKIndex = ((VCLKIndex >> 2) & 0x03);
        if(ModeNo > 0x13) {
           VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
	   if(HwInfo->jChipType < SIS_315H) {
              VCLKIndex &= 0x3f;
	      if( (HwInfo->jChipType != SIS_630) &&
		  (HwInfo->jChipType != SIS_300) ) {
		 if(VCLKIndex == 0x1b) VCLKIndex = 0x35;
	      }
	   }
        }
     }
d1783 12
a1794 1
  } else {       /*   LVDS  */
d1796 2
a1797 1
     VCLKIndex = CRT2Index;
d1799 3
a1801 1
     if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {  /* programming CRT2 */
d1803 17
a1819 1
        if( (SiS_Pr->SiS_IF_DEF_CH70xx != 0) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV) ) {
d1821 4
a1824 29
	   VCLKIndex &= 0x1f;
           tempbx = 0;
	   if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
           if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	      tempbx += 2;
	      if(SiS_Pr->SiS_ModeType > ModeVGA) {
		 if(SiS_Pr->SiS_CHSOverScan) tempbx = 8;
	      }
	      if(SiS_Pr->SiS_TVMode & TVSetPALM) {
		 tempbx = 4;
		 if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	      } else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
		 tempbx = 6;
		 if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	      }
	   }
       	   switch(tempbx) {
             case  0: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUNTSC;  break;
             case  1: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKONTSC;  break;
             case  2: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUPAL;   break;
             case  3: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPAL;   break;
	     case  4: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUPALM;  break;
             case  5: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPALM;  break;
             case  6: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUPALN;  break;
             case  7: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPALN;  break;
	     case  8: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKSOPAL;  break;
	     default: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPAL;   break;
           }
           VCLKIndex = CHTVVCLKPtr[VCLKIndex];
d1826 1
a1826 1
        } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
d1828 1
a1828 25
	   VCLKIndex >>= 6;
     	   if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) ||
	      (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel320x480))
     	      VCLKIndex = LVDSXlat1VCLK[VCLKIndex];
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480   ||
	           SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
		   SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3)
	      VCLKIndex = LVDSXlat4VCLK[VCLKIndex];
     	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)
     	      VCLKIndex = LVDSXlatVCLK2[VCLKIndex];
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600)
              VCLKIndex = LVDSXlatVCLK2[VCLKIndex];
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768)
              VCLKIndex = LVDSXlatVCLK2[VCLKIndex];
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)
	      VCLKIndex = VCLK68_315;
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)
	      VCLKIndex = VCLK162_315;
     	   else
	      VCLKIndex = LVDSXlatVCLK3[VCLKIndex];

	   if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
	      /* Special Timing: Barco iQ Pro R series */
	      VCLKIndex = 0x44;
	   }
d1830 3
a1832 9
	   if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
	      if(HwInfo->jChipType < SIS_315H) {
		 VCLKIndex = VCLK34_300;
	         /* if(resinfo == SIS_RI_1360x768) VCLKIndex = ?; */
	      } else {
		 VCLKIndex = VCLK34_315;
		 /* if(resinfo == SIS_RI_1360x768) VCLKIndex = ?; */
	      }
	   }
d1834 2
a1835 1
        } else {
d1837 4
a1840 13
	   VCLKIndex = (UCHAR)SiS_GetRegByte((USHORT)(SiS_Pr->SiS_P3ca+0x02));
           VCLKIndex = ((VCLKIndex >> 2) & 0x03);
           if(ModeNo > 0x13) {
              VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
	      if(HwInfo->jChipType < SIS_315H) {
    	 	 VCLKIndex &= 0x3F;
              }
	      if( (HwInfo->jChipType == SIS_630) &&
                  (HwInfo->jChipRevision >= 0x30) ) {
		 if(VCLKIndex == 0x14) VCLKIndex = 0x2e;
	      }
	   }
        }
d1842 2
a1843 1
     } else {  /* if not programming CRT2 */
a1844 10
        VCLKIndex = (UCHAR)SiS_GetRegByte((USHORT)(SiS_Pr->SiS_P3ca+0x02));
        VCLKIndex = ((VCLKIndex >> 2) & 0x03);
        if(ModeNo > 0x13) {
           VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
           if(HwInfo->jChipType < SIS_315H) {
	      VCLKIndex &= 0x3F;
	      if( (HwInfo->jChipType != SIS_630) &&
	          (HwInfo->jChipType != SIS_300) ) {
		 if(VCLKIndex == 0x1b) VCLKIndex = 0x35;
	      }
d1846 4
a1849 4
	      if(HwInfo->jChipType == SIS_730) {
		 if(VCLKIndex == 0x0b) VCLKIndex = 0x40;   /* 1024x768-70 */
		 if(VCLKIndex == 0x0d) VCLKIndex = 0x41;   /* 1024x768-75 */
	      }
a1850 4
	   }
        }

     }
d1852 3
a1855 4
  
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "VCLKIndex %d (0x%x)\n", VCLKIndex, VCLKIndex);
#endif
d1857 1
a1857 1
  return(VCLKIndex);
d1860 19
a1878 3
/*********************************************/
/*        SET CRT2 MODE TYPE REGISTERS       */
/*********************************************/
d1880 4
a1883 3
static void
SiS_SetCRT2ModeRegs(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                    PSIS_HW_INFO HwInfo)
d1885 2
a1886 8
  USHORT i,j,modeflag;
  USHORT tempcl,tempah=0;
#ifdef SIS300
  USHORT temp;
#endif
#ifdef SIS315H
  USHORT tempbl, tempah2, tempbl2;
#endif
d1888 3
a1890 2
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
d1892 5
a1896 2
     if(SiS_Pr->UseCustomMode) {
        modeflag = SiS_Pr->CModeFlag;
d1898 1
a1898 1
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d1900 2
d1904 1
a1904 3
  /* BIOS does not do this (neither 301 nor LVDS) */
  /* (But it's harmless; see SetCRT2Offset) */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x03,0x00);   /* fix write part1 index 0  BTDRAM bit Bug */
d1906 1
a1906 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
d1908 1
a1908 2
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x00,0xAF,0x40);
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2E,0xF7);
d1910 9
a1918 1
  } else {
d1920 2
a1921 1
     for(i=0,j=4; i<3; i++,j++) SiS_SetReg(SiS_Pr->SiS_Part1Port,j,0);
d1923 7
a1929 1
     tempcl = SiS_Pr->SiS_ModeType;
d1931 8
a1938 1
     if(HwInfo->jChipType < SIS_315H) {
d1940 4
a1943 1
#ifdef SIS300    /* ---- 300 series ---- */
d1945 6
a1950 11
        /* For 301BDH: (with LCD via LVDS) */
        if(SiS_Pr->SiS_VBType & VB_NoLCD) {
	   temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32);
	   temp &= 0xef;
	   temp |= 0x02;
	   if((SiS_Pr->SiS_VBInfo & SetCRT2ToTV) || (SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
	      temp |= 0x10;
	      temp &= 0xfd;
	   }
	   SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
        }
d1952 2
a1953 6
        if(ModeNo > 0x13) {
           tempcl -= ModeVGA;
           if((tempcl > 0) || (tempcl == 0)) {      /* tempcl is USHORT -> always true! */
              tempah = ((0x10 >> tempcl) | 0x80);
           }
        } else tempah = 0x80;
d1955 1
a1955 1
        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode)  tempah ^= 0xA0;
d1957 1
a1957 1
#endif  /* SIS300 */
d1959 13
a1971 588
     } else {

#ifdef SIS315H    /* ------- 315/330 series ------ */

        if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
           if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x08);
           }
        }

        if(ModeNo > 0x13) {
           tempcl -= ModeVGA;
           if((tempcl > 0) || (tempcl == 0)) {  /* tempcl is USHORT -> always true! */
              tempah = (0x08 >> tempcl);
              if (tempah == 0) tempah = 1;
              tempah |= 0x40;
           }
        } else tempah = 0x40;

        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) tempah ^= 0x50;

#endif  /* SIS315H */

     }

     if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) tempah = 0;

     if(HwInfo->jChipType < SIS_315H) {
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,tempah);
     } else {
        if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x00,0xa0,tempah);
        } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
           if(IS_SIS740) {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,tempah);
	   } else {
              SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x00,0xa0,tempah);
	   }
        }
     }

     if(SiS_Pr->SiS_VBType & VB_SISVB) {

        tempah = 0x01;
        if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
      	   tempah |= 0x02;
        }
        if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
      	   tempah ^= 0x05;
      	   if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
              tempah ^= 0x01;
      	   }
        }

        if(SiS_Pr->SiS_VBInfo & DisableCRT2Display)  tempah = 0;

        if(HwInfo->jChipType < SIS_315H) {

      	   tempah = (tempah << 5) & 0xFF;
      	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x01,tempah);
      	   tempah = (tempah >> 5) & 0xFF;

        } else {

      	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2E,0xF8,tempah);

        }

        if((SiS_Pr->SiS_ModeType == ModeVGA) && (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode))) {
      	   tempah |= 0x10;
        }

        if((HwInfo->jChipType < SIS_315H) && (SiS_Pr->SiS_VBType & VB_SIS301)) {
	   if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) ||
	      (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960)) {
	      tempah |= 0x80;
	   }
        } else {
	   tempah |= 0x80;
        }

        if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	   if(!(SiS_Pr->SiS_TVMode & (TVSetYPbPr750p | TVSetYPbPr525p))) {
      	      if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
                 tempah |= 0x20;
	      }
      	   }
        }

        SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0D,0x40,tempah);

        tempah = 0;

	if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempah |= 0x40;

        if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	   if(SiS_Pr->SiS_TVMode & TVRPLLDIV2XO) {
              tempah |= 0x40;
       	   }
        }

	if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) ||
	   (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960)  ||
	   ((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) &&
	    (SiS_Pr->CP_MaxX >= 1280) && (SiS_Pr->CP_MaxY >= 960))) {
	   tempah |= 0x80;
        }

        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0C,tempah);

     } else {  /* LVDS */

        if(HwInfo->jChipType >= SIS_315H) {

	   /* LVDS can only be slave in 8bpp modes */
	   tempah = 0x80;
	   if((modeflag & CRT2Mode) && (SiS_Pr->SiS_ModeType > ModeVGA)) {
	      if(SiS_Pr->SiS_VBInfo & DriverMode) {
	         tempah |= 0x02;
	      }
	   }

	   if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
              tempah |= 0x02;
    	   }

	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	      tempah ^= 0x01;
	   }

	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      tempah = 1;
	   }

    	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2e,0xF0,tempah);

        } else {

	   tempah = 0;
	   if( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) && (SiS_Pr->SiS_ModeType > ModeVGA) ) {
              tempah |= 0x02;
    	   }
	   tempah <<= 5;

	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display)  tempah = 0;

	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x01,tempah);

        }

     }

  }  /* LCDA */

  if(SiS_Pr->SiS_VBType & VB_SISVB) {

     if(HwInfo->jChipType >= SIS_315H) {

#ifdef SIS315H

        unsigned char bridgerev = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x01);;

	/* The following is nearly unpreditable and varies from machine
	 * to machine. Especially the 301DH seems to be a real trouble
	 * maker. Some BIOSes simply set the registers (like in the
	 * NoLCD-if-statements here), some set them according to the
	 * LCDA stuff. It is very likely that some machines are not
	 * treated correctly in the following, very case-orientated
	 * code. What do I do then...?
	 */

	/* 740 variants match for 30xB, 301B-DH, 30xLV */

        if(!(IS_SIS740)) {
           tempah = 0x04;						   /* For all bridges */
           tempbl = 0xfb;
           if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
              tempah = 0x00;
	      if(SiS_IsDualEdge(SiS_Pr, HwInfo)) {
	         tempbl = 0xff;
	      }
           }
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,tempbl,tempah);
	}

	/* The following two are responsible for eventually wrong colors
	 * in TV output. The DH (VB_NoLCD) conditions are unknown; the
	 * b0 was found in some 651 machine (Pim; P4_23=0xe5); the b1 version
	 * in a 650 box (Jake). What is the criteria?
	 */

	if((IS_SIS740) || (HwInfo->jChipType >= SIS_661)) {
	   tempah = 0x30;
	   tempbl = 0xc0;
	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      tempah = 0x00;
	      tempbl = 0x00;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2c,0xcf,tempah);
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x21,0x3f,tempbl);
	} else if(SiS_Pr->SiS_VBType & VB_SIS301) {
	   /* Fixes "TV-blue-bug" on 315+301 */
	   SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2c,0xcf);     /* For 301   */
	   SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x21,0x3f);
	} else if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2c,0x30);      /* For 30xLV */
	   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x21,0xc0);
	} else if((SiS_Pr->SiS_VBType & VB_NoLCD) && (bridgerev == 0xb0)) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2c,0x30);      /* For 30xB-DH rev b0 (or "DH on 651"?) */
	   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x21,0xc0);
	} else {
	   tempah = 0x30; tempah2 = 0xc0;		       /* For 30xB (and 301BDH rev b1) */
	   tempbl = 0xcf; tempbl2 = 0x3f;
	   if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
	      tempah = tempah2 = 0x00;
	      if(SiS_IsDualEdge(SiS_Pr, HwInfo)) {
		 tempbl = tempbl2 = 0xff;
	      }
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2c,tempbl,tempah);
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x21,tempbl2,tempah2);
	}

	if(IS_SIS740) {
	   tempah = 0x80;
	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      tempah = 0x00;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x23,0x7f,tempah);
	} else {
	   tempah = 0x00;
           tempbl = 0x7f;
           if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
              tempbl = 0xff;
	      if(!(SiS_IsDualEdge(SiS_Pr, HwInfo))) {
	         tempah = 0x80;
	      }
           }
           SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x23,tempbl,tempah);
	}

	/* 661: Sets p4 27 and 34 here, done in SetGroup4 here */

#endif /* SIS315H */

     } else if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {

        SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x21,0x3f);

        if((SiS_Pr->SiS_VBInfo & DisableCRT2Display) ||
           (   (SiS_Pr->SiS_VBType & VB_NoLCD) &&
	       (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) ) ) {
	   SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x23,0x7F);
	} else {
	   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x23,0x80);
	}

     }

  } else {  /* LVDS */

#ifdef SIS315H
     if(HwInfo->jChipType >= SIS_315H) {

        if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {

           tempah = 0x04;
	   tempbl = 0xfb;
           if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
              tempah = 0x00;
	      if(SiS_IsDualEdge(SiS_Pr, HwInfo)) {
	         tempbl = 0xff;
	      }
           }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,tempbl,tempah);

	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	   }

	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2c,0x30);

	} else if(HwInfo->jChipType == SIS_550) {

	   SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2c,0x30);

	}

     }
#endif

  }

}

/*********************************************/
/*            GET RESOLUTION DATA            */
/*********************************************/

USHORT
SiS_GetResInfo(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex)
{
  USHORT resindex;

  if(ModeNo <= 0x13)
     resindex = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  else
     resindex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;

  return(resindex);
}

static void
SiS_GetCRT2ResInfo(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
                   PSIS_HW_INFO HwInfo)
{
  USHORT xres,yres,modeflag=0,resindex;

  if(SiS_Pr->UseCustomMode) {
     SiS_Pr->SiS_VGAHDE = SiS_Pr->SiS_HDE = SiS_Pr->CHDisplay;
     SiS_Pr->SiS_VGAVDE = SiS_Pr->SiS_VDE = SiS_Pr->CVDisplay;
     return;
  }

  resindex = SiS_GetResInfo(SiS_Pr,ModeNo,ModeIdIndex);

  if(ModeNo <= 0x13) {
     xres = SiS_Pr->SiS_StResInfo[resindex].HTotal;
     yres = SiS_Pr->SiS_StResInfo[resindex].VTotal;
  } else {
     xres = SiS_Pr->SiS_ModeResInfo[resindex].HTotal;
     yres = SiS_Pr->SiS_ModeResInfo[resindex].VTotal;
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }

  if((!SiS_Pr->SiS_IF_DEF_DSTN) && (!SiS_Pr->SiS_IF_DEF_FSTN)) {

     if((HwInfo->jChipType >= SIS_315H) && (SiS_Pr->SiS_IF_DEF_LVDS == 1)) {
        if((ModeNo != 0x03) && (SiS_Pr->SiS_SetFlag & SetDOSMode)) {
           if(yres == 350) yres = 400;
        }
        if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x3a) & 0x01) {
 	   if(ModeNo == 0x12) yres = 400;
        }
     }

     if(ModeNo > 0x13) {
  	if(modeflag & HalfDCLK)       xres *= 2;
  	if(modeflag & DoubleScanMode) yres *= 2;
     }

  }

  if(SiS_Pr->SiS_VBType & VB_SISVB) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
           if(xres == 720) xres = 640;
	} else {
	   if(SiS_Pr->SiS_VBType & VB_NoLCD) {           /* 301BDH */
	        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToHiVision)) {
                   if(xres == 720) xres = 640;
		}
		if(SiS_Pr->SiS_SetFlag & SetDOSMode) {
	           yres = 400;
	           if(HwInfo->jChipType >= SIS_315H) {
	              if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x17) & 0x80) yres = 480;
	           } else {
	              if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) yres = 480;
	           }
	        }
	   } else {
	      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToHiVision)) {
	         if(xres == 720) xres = 640;
	      }
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
		 if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
		    if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        	       if(yres == 1024) yres = 1056;
      		    }
		 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
		    if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
		       /* BIOS bug - does this regardless of scaling */
      		       if(yres == 400) yres = 405;
		    }
      		    if(yres == 350) yres = 360;
      		    if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
        	       if(yres == 360) yres = 375;
      		    }
   	         } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
      		    if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        	       if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
          	          if(yres == 350) yres = 357;
          	          if(yres == 400) yres = 420;
            	          if(yres == 480) yres = 525;
        	       }
      		    }
    	         }
	      }
	   }
	}
  } else {
    	if(xres == 720) xres = 640;
	if(SiS_Pr->SiS_SetFlag & SetDOSMode) {
	   yres = 400;
	   if(HwInfo->jChipType >= SIS_315H) {
	      if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x17) & 0x80) yres = 480;
	   } else {
	      if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) yres = 480;
	   }
	   if(SiS_Pr->SiS_IF_DEF_DSTN || SiS_Pr->SiS_IF_DEF_FSTN) {
	      yres = 480;
	   }
	}
  }
  SiS_Pr->SiS_VGAHDE = SiS_Pr->SiS_HDE = xres;
  SiS_Pr->SiS_VGAVDE = SiS_Pr->SiS_VDE = yres;
}

/*********************************************/
/*           GET CRT2 TIMING DATA            */
/*********************************************/

static BOOLEAN
SiS_GetLVDSCRT1Ptr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
		   USHORT RefreshRateTableIndex, USHORT *ResIndex,
		   USHORT *DisplayType)
 {
  USHORT tempbx,modeflag=0;
  USHORT Flag,CRT2CRTC;

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
        if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) return FALSE;
     }
  } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) return FALSE;
  } else
     return FALSE;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     CRT2CRTC = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     CRT2CRTC = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }

  Flag = 1;
  tempbx = 0;
  if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
     if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
        Flag = 0;
        tempbx = 18;
        if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx++;
        if(SiS_Pr->SiS_TVMode & TVSetPAL) {
      	   tempbx += 2;
	   if(SiS_Pr->SiS_ModeType > ModeVGA) {
	      if(SiS_Pr->SiS_CHSOverScan) tempbx = 99;
	   }
	   if(SiS_Pr->SiS_TVMode & TVSetPALM) {
	      tempbx = 18;  /* PALM uses NTSC data */
	      if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx++;
	   } else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
	      tempbx = 20;  /* PALN uses PAL data  */
	      if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx++;
	   }
        }
     }
  }
  if(Flag) {
     tempbx = SiS_Pr->SiS_LCDResInfo;
     tempbx -= SiS_Pr->SiS_PanelMinLVDS;
     if(SiS_Pr->SiS_LCDResInfo <= SiS_Pr->SiS_Panel1280x1024) {
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 6;
        if(modeflag & HalfDCLK) tempbx += 3;
     } else {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
           tempbx = 14;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
           tempbx = 23;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) {
           tempbx = 27;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
           tempbx = 36;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
           tempbx = 40;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) {
           tempbx = 54;
	   if(modeflag & HalfDCLK) tempbx++;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2) {
           tempbx = 52;
	   if(modeflag & HalfDCLK) tempbx++;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
           tempbx = 50;
	   if(modeflag & HalfDCLK) tempbx++;
        }

     }
     if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
        tempbx = 12;
	if(modeflag & HalfDCLK) tempbx++;
     }
  }

#if 0
  if(SiS_Pr->SiS_IF_DEF_FSTN) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel320x480){
        tempbx = 22;
     }
  }
#endif

  *ResIndex = CRT2CRTC & 0x3F;
  *DisplayType = tempbx;
  return TRUE;
}

static void
SiS_GetCRT2Ptr(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
	       USHORT RefreshRateTableIndex,USHORT *CRT2Index,USHORT *ResIndex,
	       PSIS_HW_INFO HwInfo)
{
  USHORT tempbx=0,tempal=0;
  USHORT Flag,resinfo=0;

  if(ModeNo <= 0x13) {
     tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }

  if((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_IF_DEF_LVDS == 0)) {

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {                            /* LCD */

	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960) {
	   tempbx = 15;
  	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
	   tempbx = 20;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)         tempbx = 21;
	   else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx = 22;
 	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
	   tempbx = 23;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)         tempbx = 24;
	   else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx = 25;
#if 0
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
	   tempbx = 26;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)         tempbx = 27;
	   else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx = 28;
#endif
 	} else if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
	   if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	      if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)       tempbx = 13;
	      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) tempbx = 14;
	      else {
	         tempbx = 29;
		 if(ModeNo >= 0x13) {
	            /* see below */
	            if(resinfo == SIS_RI_1280x960) tempal = 10;
	         }
              }
	   } else {
	      tempbx = 29;
	      if(ModeNo >= 0x13) {
	         /* 1280x768 and 1280x960 have same CRT2CRTC,
	          * so we change it here if 1280x960 is chosen
	          */
	         if(resinfo == SIS_RI_1280x960) tempal = 10;
	      }
   	   }
	} else {
      	   tempbx = SiS_Pr->SiS_LCDResInfo - SiS_Pr->SiS_Panel1024x768;
      	   if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
              tempbx += 10;
       	   }
	}
d1973 3
a1975 182
#ifdef SIS315H
	if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
	   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
	      tempbx = 50;
	      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)         tempbx = 51;
	      else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx = 52;
	   }
	}
#endif

     } else {						  	/* TV */

     	if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
           /* if(SiS_Pr->SiS_VGAVDE > 480) SiS_Pr->SiS_TVMode &= (~TVSetTVSimuMode); */
           tempbx = 2;
           if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
	      tempbx = 13;
              if(!(SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) tempbx = 14;
           }
	} else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	   if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p)      tempbx = 7;
	   else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) tempbx = 6;
	   else 					tempbx = 5;
	   if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode)     tempbx += 5;
       	} else {
           if(SiS_Pr->SiS_TVMode & TVSetPAL) 		tempbx = 3;
           else 					tempbx = 4;
           if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) 	tempbx += 5;
       	}

     }

     tempal &= 0x3F;

     if(ModeNo > 0x13) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision) {
      	   if(tempal == 6) tempal = 7;
           if((resinfo == SIS_RI_720x480) ||
	      (resinfo == SIS_RI_720x576) ||
	      (resinfo == SIS_RI_768x576)) {
	      tempal = 6;
	   }
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
              if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) {
	         if(resinfo == SIS_RI_1024x768) {
	            tempal = 8;
	         }
	      }
	   }
	}
     }

     *CRT2Index = tempbx;
     *ResIndex = tempal;

  } else {   /* LVDS, 301B-DH (if running on LCD) */

     Flag = 1;
     tempbx = 0;
     if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
        if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
           Flag = 0;
           tempbx = 10;
	   if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
           if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	      tempbx += 2;
	      if(SiS_Pr->SiS_ModeType > ModeVGA) {
		 if(SiS_Pr->SiS_CHSOverScan) tempbx = 99;
	      }
	      if(SiS_Pr->SiS_TVMode & TVSetPALM) {
		 tempbx = 90;
		 if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	      } else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
		 tempbx = 92;
		 if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	      }
           }
        }
     }

     if(Flag) {

	if(SiS_Pr->SiS_LCDResInfo <= SiS_Pr->SiS_Panel1280x1024) {
	   tempbx = SiS_Pr->SiS_LCDResInfo - SiS_Pr->SiS_PanelMinLVDS;
   	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx += 3;

	   if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
	      tempbx = 82;
	      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	   }
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
	   tempbx = 18;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
	   tempbx = 6;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2) {
	   tempbx = 30;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) {
	   tempbx = 30;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
	   tempbx = 15;
  	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx += 2;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) {
	   tempbx = 16;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx += 2;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
	   tempbx = 8;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
	   tempbx = 21;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelBarco1366) {
	   tempbx = 80;
   	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	}

	if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
	   tempbx = 7;
        }

	if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
	   tempbx = 84;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	}

     }

     if(SiS_Pr->SiS_SetFlag & SetDOSMode) {
        if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) tempal = 7;
  	if(HwInfo->jChipType < SIS_315H) {
	   if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) tempal++;
	}
     }

     *CRT2Index = tempbx;
     *ResIndex = tempal & 0x1F;
  }
}

#ifdef SIS315H
static void
SiS_GetCRT2PtrA(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
		USHORT RefreshRateTableIndex,USHORT *CRT2Index,
		USHORT *ResIndex)
{
  USHORT tempbx,tempal;

  tempbx = SiS_Pr->SiS_LCDResInfo;

  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)      tempbx = 4;
  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) tempbx = 3;
  else tempbx -= SiS_Pr->SiS_Panel1024x768;

  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx += 5;

  if(ModeNo <= 0x13)
     tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  else
     tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;

  /* No customs required yet (Clevo, Compaq, etc) */

  *CRT2Index = tempbx;
  *ResIndex = tempal & 0x1F;
}
#endif

static void
SiS_GetRAMDAC2DATA(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex,PSIS_HW_INFO HwInfo)
{
  USHORT tempax=0,tempbx=0;
  USHORT temp1=0,modeflag=0,tempcx=0;
  USHORT index;

  SiS_Pr->SiS_RVBHCMAX  = 1;
  SiS_Pr->SiS_RVBHCFACT = 1;

  if(ModeNo <= 0x13) {

     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     index = SiS_GetModePtr(SiS_Pr,ModeNo,ModeIdIndex);
d1977 3
a1979 3
     tempax = SiS_Pr->SiS_StandTable[index].CRTC[0];
     tempbx = SiS_Pr->SiS_StandTable[index].CRTC[6];
     temp1 = SiS_Pr->SiS_StandTable[index].CRTC[7];
d1983 1
a1983 12
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;

     tempax = SiS_Pr->SiS_CRT1Table[index].CR[0];
     tempax |= (SiS_Pr->SiS_CRT1Table[index].CR[14] << 8);
     tempax &= 0x03FF;
     tempbx = SiS_Pr->SiS_CRT1Table[index].CR[6];
     tempcx = SiS_Pr->SiS_CRT1Table[index].CR[13] << 8;
     tempcx &= 0x0100;
     tempcx <<= 2;
     tempbx |= tempcx;
     temp1  = SiS_Pr->SiS_CRT1Table[index].CR[7];
d1985 1
a1985 1
  }
d1987 1
a1987 4
  if(temp1 & 0x01) tempbx |= 0x0100;
  if(temp1 & 0x20) tempbx |= 0x0200;
  
  tempax += 5;
d1989 9
a1997 4
  /* Charx8Dot is no more used (and assumed), so we set it */
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     modeflag |= Charx8Dot;
  }
d1999 1
a1999 2
  if(modeflag & Charx8Dot) tempax *= 8;
  else                     tempax *= 9;
d2001 3
a2003 1
  if(modeflag & HalfDCLK)  tempax <<= 1;
d2005 16
a2020 31
  tempbx++;

  SiS_Pr->SiS_VGAHT = SiS_Pr->SiS_HT = tempax;
  SiS_Pr->SiS_VGAVT = SiS_Pr->SiS_VT = tempbx;
}

static void
SiS_GetCRT2DataLVDS(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
                    USHORT RefreshRateTableIndex,
		    PSIS_HW_INFO HwInfo)
{
   USHORT CRT2Index, ResIndex;
   const SiS_LVDSDataStruct *LVDSData = NULL;

   SiS_GetCRT2ResInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);

   if(SiS_Pr->SiS_VBType & VB_SISVB) {
      SiS_Pr->SiS_RVBHCMAX  = 1;
      SiS_Pr->SiS_RVBHCFACT = 1;
      SiS_Pr->SiS_NewFlickerMode = 0;
      SiS_Pr->SiS_RVBHRS = 50;
      SiS_Pr->SiS_RY1COE = 0;
      SiS_Pr->SiS_RY2COE = 0;
      SiS_Pr->SiS_RY3COE = 0;
      SiS_Pr->SiS_RY4COE = 0;
   }

   if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {

#ifdef SIS315H
      if(SiS_Pr->UseCustomMode) {
a2021 7
         SiS_Pr->SiS_VGAHT     = SiS_Pr->CHTotal;
         SiS_Pr->SiS_VGAVT     = SiS_Pr->CVTotal;
         SiS_Pr->SiS_HT        = SiS_Pr->CHTotal;
         SiS_Pr->SiS_VT        = SiS_Pr->CVTotal;
	 if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
            SiS_Pr->SiS_HDE = SiS_Pr->PanelXRes;
            SiS_Pr->SiS_VDE = SiS_Pr->PanelYRes;
a2022 1
	 return;
d2024 1
a2024 1
     } else {
d2026 1
a2026 18
         SiS_GetCRT2PtrA(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                         &CRT2Index,&ResIndex);

         switch (CRT2Index) {
            case  0:  LVDSData = SiS_Pr->SiS_LCDA1024x768Data_1;    break;
      	    case  1:  LVDSData = SiS_Pr->SiS_LCDA1280x1024Data_1;   break;
	    case  3:  LVDSData = SiS_Pr->SiS_LCDA1400x1050Data_1;   break;
	    case  4:  LVDSData = SiS_Pr->SiS_LCDA1600x1200Data_1;   break;
      	    case  5:  LVDSData = SiS_Pr->SiS_LCDA1024x768Data_2;    break;
      	    case  6:  LVDSData = SiS_Pr->SiS_LCDA1280x1024Data_2;   break;
	    case  8:  LVDSData = SiS_Pr->SiS_LCDA1400x1050Data_2;   break;
	    case  9:  LVDSData = SiS_Pr->SiS_LCDA1600x1200Data_2;   break;
	    default:  LVDSData = SiS_Pr->SiS_LCDA1024x768Data_1;    break;
         }
     }
#endif

   } else {
d2028 1
a2028 4
      /* 301BDH needs LVDS Data */
      if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
	 SiS_Pr->SiS_IF_DEF_LVDS = 1;
      }
d2030 1
a2030 2
      SiS_GetCRT2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                     &CRT2Index, &ResIndex, HwInfo);
d2032 5
a2036 4
      /* 301BDH needs LVDS Data */
      if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
         SiS_Pr->SiS_IF_DEF_LVDS = 0;
      }
d2038 1
a2038 39
      switch (CRT2Index) {
      	case  0:  LVDSData = SiS_Pr->SiS_LVDS800x600Data_1;    break;
      	case  1:  LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;   break;
      	case  2:  LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_1;  break;
      	case  3:  LVDSData = SiS_Pr->SiS_LVDS800x600Data_2;    break;
      	case  4:  LVDSData = SiS_Pr->SiS_LVDS1024x768Data_2;   break;
      	case  5:  LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_2;  break;
	case  6:  LVDSData = SiS_Pr->SiS_LVDS640x480Data_1;    break;
        case  7:  LVDSData = SiS_Pr->SiS_LVDSXXXxXXXData_1;    break;
	case  8:  LVDSData = SiS_Pr->SiS_LVDS1400x1050Data_1;  break;
	case  9:  LVDSData = SiS_Pr->SiS_LVDS1400x1050Data_2;  break;
      	case 10:  LVDSData = SiS_Pr->SiS_CHTVUNTSCData;        break;
      	case 11:  LVDSData = SiS_Pr->SiS_CHTVONTSCData;        break;
      	case 12:  LVDSData = SiS_Pr->SiS_CHTVUPALData;         break;
      	case 13:  LVDSData = SiS_Pr->SiS_CHTVOPALData;         break;
      	case 14:  LVDSData = SiS_Pr->SiS_LVDS320x480Data_1;    break;
	case 15:  LVDSData = SiS_Pr->SiS_LVDS1024x600Data_1;   break;
	case 16:  LVDSData = SiS_Pr->SiS_LVDS1152x768Data_1;   break;
	case 17:  LVDSData = SiS_Pr->SiS_LVDS1024x600Data_2;   break;
	case 18:  LVDSData = SiS_Pr->SiS_LVDS1152x768Data_2;   break;
	case 19:  LVDSData = SiS_Pr->SiS_LVDS1280x768Data_1;   break;
	case 20:  LVDSData = SiS_Pr->SiS_LVDS1280x768Data_2;   break;
	case 21:  LVDSData = SiS_Pr->SiS_LVDS1600x1200Data_1;  break;
	case 22:  LVDSData = SiS_Pr->SiS_LVDS1600x1200Data_2;  break;
	case 30:  LVDSData = SiS_Pr->SiS_LVDS640x480Data_2;    break;
	case 80:  LVDSData = SiS_Pr->SiS_LVDSBARCO1366Data_1;  break;
	case 81:  LVDSData = SiS_Pr->SiS_LVDSBARCO1366Data_2;  break;
	case 82:  LVDSData = SiS_Pr->SiS_LVDSBARCO1024Data_1;  break;
	case 83:  LVDSData = SiS_Pr->SiS_LVDSBARCO1024Data_2;  break;
	case 84:  LVDSData = SiS_Pr->SiS_LVDS848x480Data_1;    break;
	case 85:  LVDSData = SiS_Pr->SiS_LVDS848x480Data_2;    break;
	case 90:  LVDSData = SiS_Pr->SiS_CHTVUPALMData;        break;
      	case 91:  LVDSData = SiS_Pr->SiS_CHTVOPALMData;        break;
      	case 92:  LVDSData = SiS_Pr->SiS_CHTVUPALNData;        break;
      	case 93:  LVDSData = SiS_Pr->SiS_CHTVOPALNData;        break;
	case 99:  LVDSData = SiS_Pr->SiS_CHTVSOPALData;	       break;  /* Super Overscan */
	default:  LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;   break;
      }
   }
d2040 3
a2042 4
   SiS_Pr->SiS_VGAHT = (LVDSData+ResIndex)->VGAHT;
   SiS_Pr->SiS_VGAVT = (LVDSData+ResIndex)->VGAVT;
   SiS_Pr->SiS_HT    = (LVDSData+ResIndex)->LCDHT;
   SiS_Pr->SiS_VT    = (LVDSData+ResIndex)->LCDVT;
d2044 1
a2044 1
   if(SiS_Pr->SiS_VBType & VB_SISVB) {
d2046 3
a2048 4
      if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
         SiS_Pr->SiS_HDE = SiS_Pr->PanelXRes;
         SiS_Pr->SiS_VDE = SiS_Pr->PanelYRes;
      }
d2050 3
a2052 1
   } else {
a2053 15
      if(SiS_Pr->SiS_IF_DEF_TRUMPION == 0) {
         if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
            if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
               if((!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) || (SiS_Pr->SiS_SetFlag & SetDOSMode)) {
	          SiS_Pr->SiS_HDE = SiS_Pr->PanelXRes;
                  SiS_Pr->SiS_VDE = SiS_Pr->PanelYRes;

	 	  if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
		     if(ResIndex < 0x08) {
		        SiS_Pr->SiS_HDE = 1280;
                        SiS_Pr->SiS_VDE = 1024;
		     }
		  }
               }
            }
d2055 1
d2060 6
a2065 4
static void
SiS_GetCRT2Data301(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex,
		   PSIS_HW_INFO HwInfo)
d2067 54
a2120 5
  USHORT tempax,tempbx,modeflag;
  USHORT resinfo;
  USHORT CRT2Index,ResIndex;
  const SiS_LCDDataStruct *LCDPtr = NULL;
  const SiS_TVDataStruct  *TVPtr  = NULL;
d2122 7
a2128 3
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
a2129 8
     if(SiS_Pr->UseCustomMode) {
        modeflag = SiS_Pr->CModeFlag;
	resinfo = 0;
     } else {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     }
  }
d2131 30
a2160 12
  SiS_Pr->SiS_NewFlickerMode = 0;
  SiS_Pr->SiS_RVBHRS = 50;
  SiS_Pr->SiS_RY1COE = 0;
  SiS_Pr->SiS_RY2COE = 0;
  SiS_Pr->SiS_RY3COE = 0;
  SiS_Pr->SiS_RY4COE = 0;

  SiS_GetCRT2ResInfo(SiS_Pr,ModeNo,ModeIdIndex,HwInfo);

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC){

     if(SiS_Pr->UseCustomMode) {
d2162 5
a2166 8
        SiS_Pr->SiS_RVBHCMAX  = 1;
        SiS_Pr->SiS_RVBHCFACT = 1;
        SiS_Pr->SiS_VGAHT     = SiS_Pr->CHTotal;
        SiS_Pr->SiS_VGAVT     = SiS_Pr->CVTotal;
        SiS_Pr->SiS_HT        = SiS_Pr->CHTotal;
        SiS_Pr->SiS_VT        = SiS_Pr->CVTotal;
	SiS_Pr->SiS_HDE       = SiS_Pr->SiS_VGAHDE;
        SiS_Pr->SiS_VDE       = SiS_Pr->SiS_VGAVDE;
d2168 6
a2173 1
     } else {
d2175 11
a2185 1
        SiS_GetRAMDAC2DATA(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d2187 1
a2187 1
     }
d2189 19
a2207 1
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
d2209 11
a2219 2
     SiS_GetCRT2Ptr(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                    &CRT2Index,&ResIndex,HwInfo);
d2221 9
a2229 28
     switch(CRT2Index) {
       case  2:  TVPtr = SiS_Pr->SiS_ExtHiTVData;   break;
       case  3:  TVPtr = SiS_Pr->SiS_ExtPALData;    break;
       case  4:  TVPtr = SiS_Pr->SiS_ExtNTSCData;   break;
       case  5:  TVPtr = SiS_Pr->SiS_Ext525iData;   break;
       case  6:  TVPtr = SiS_Pr->SiS_Ext525pData;   break;
       case  7:  TVPtr = SiS_Pr->SiS_Ext750pData;   break;
       case  8:  TVPtr = SiS_Pr->SiS_StPALData;     break;
       case  9:  TVPtr = SiS_Pr->SiS_StNTSCData;    break;
       case 10:  TVPtr = SiS_Pr->SiS_St525iData;    break;
       case 11:  TVPtr = SiS_Pr->SiS_St525pData;    break;
       case 12:  TVPtr = SiS_Pr->SiS_St750pData;    break;
       case 13:  TVPtr = SiS_Pr->SiS_St1HiTVData;   break;
       case 14:  TVPtr = SiS_Pr->SiS_St2HiTVData;   break;
       default:  TVPtr = SiS_Pr->SiS_StPALData;     break;
     }

     SiS_Pr->SiS_RVBHCMAX  = (TVPtr+ResIndex)->RVBHCMAX;
     SiS_Pr->SiS_RVBHCFACT = (TVPtr+ResIndex)->RVBHCFACT;
     SiS_Pr->SiS_VGAHT     = (TVPtr+ResIndex)->VGAHT;
     SiS_Pr->SiS_VGAVT     = (TVPtr+ResIndex)->VGAVT;
     SiS_Pr->SiS_HDE       = (TVPtr+ResIndex)->TVHDE;
     SiS_Pr->SiS_VDE       = (TVPtr+ResIndex)->TVVDE;
     SiS_Pr->SiS_RVBHRS    = (TVPtr+ResIndex)->RVBHRS;
     SiS_Pr->SiS_NewFlickerMode = (TVPtr+ResIndex)->FlickerMode;
     if(modeflag & HalfDCLK) {
        SiS_Pr->SiS_RVBHRS = (TVPtr+ResIndex)->HALFRVBHRS;
     }
d2231 19
a2249 1
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
d2251 3
a2253 5
        if((resinfo == SIS_RI_1024x768)  ||
           (resinfo == SIS_RI_1280x1024) ||
           (resinfo == SIS_RI_1280x720)) {
	   SiS_Pr->SiS_NewFlickerMode = 0x40;
	}
d2255 12
a2266 1
        if(SiS_Pr->SiS_VGAVDE == 350) SiS_Pr->SiS_TVMode |= TVSetTVSimuMode;
d2268 5
a2272 11
        SiS_Pr->SiS_HT = ExtHiTVHT;
        SiS_Pr->SiS_VT = ExtHiTVVT;
        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
           if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
              SiS_Pr->SiS_HT = StHiTVHT;
              SiS_Pr->SiS_VT = StHiTVVT;
#if 0
              if(!(modeflag & Charx8Dot)) {
                 SiS_Pr->SiS_HT = StHiTextTVHT;
                 SiS_Pr->SiS_VT = StHiTextTVVT;
              }
d2274 2
a2275 2
           }
        }
d2277 12
a2288 1
     } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
d2290 5
a2294 11
        if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
           SiS_Pr->SiS_HT = 1650;
           SiS_Pr->SiS_VT = 750;
	} else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) {
	   SiS_Pr->SiS_HT = NTSCHT;
	   SiS_Pr->SiS_VT = NTSCVT;
        } else {
           SiS_Pr->SiS_HT = NTSCHT;
	   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) SiS_Pr->SiS_HT = NTSC2HT;
           SiS_Pr->SiS_VT = NTSCVT;
        }
d2296 4
a2299 1
     } else {
d2301 2
a2302 11
        SiS_Pr->SiS_RY1COE = (TVPtr+ResIndex)->RY1COE;
        SiS_Pr->SiS_RY2COE = (TVPtr+ResIndex)->RY2COE;
        SiS_Pr->SiS_RY3COE = (TVPtr+ResIndex)->RY3COE;
        SiS_Pr->SiS_RY4COE = (TVPtr+ResIndex)->RY4COE;

        if(modeflag & HalfDCLK) {
           SiS_Pr->SiS_RY1COE = 0x00;
           SiS_Pr->SiS_RY2COE = 0xf4;
           SiS_Pr->SiS_RY3COE = 0x10;
           SiS_Pr->SiS_RY4COE = 0x38;
        }
d2304 19
a2322 8
        if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
           SiS_Pr->SiS_HT = NTSCHT;
	   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) SiS_Pr->SiS_HT = NTSC2HT;
           SiS_Pr->SiS_VT = NTSCVT;
        } else {
           SiS_Pr->SiS_HT = PALHT;
           SiS_Pr->SiS_VT = PALVT;
        }
d2324 14
a2337 1
     }
d2339 18
a2356 1
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
d2358 15
a2372 1
     if(SiS_Pr->UseCustomMode) {
d2374 6
a2379 8
        SiS_Pr->SiS_RVBHCMAX  = 1;
        SiS_Pr->SiS_RVBHCFACT = 1;
        SiS_Pr->SiS_VGAHT     = SiS_Pr->CHTotal;
        SiS_Pr->SiS_VGAVT     = SiS_Pr->CVTotal;
        SiS_Pr->SiS_HT        = SiS_Pr->CHTotal;
        SiS_Pr->SiS_VT        = SiS_Pr->CVTotal;
	SiS_Pr->SiS_HDE       = SiS_Pr->SiS_VGAHDE;
        SiS_Pr->SiS_VDE       = SiS_Pr->SiS_VGAVDE;
d2381 15
a2395 1
     } else {
d2397 4
a2400 2
        SiS_GetCRT2Ptr(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                      &CRT2Index,&ResIndex,HwInfo);
d2402 2
a2403 27
        switch(CRT2Index) {
         case  0: LCDPtr = SiS_Pr->SiS_ExtLCD1024x768Data;        break; /* VESA Timing */
         case  1: LCDPtr = SiS_Pr->SiS_ExtLCD1280x1024Data;       break; /* VESA Timing */
         case  5: LCDPtr = SiS_Pr->SiS_StLCD1024x768Data;         break; /* Obviously unused */
         case  6: LCDPtr = SiS_Pr->SiS_StLCD1280x1024Data;        break; /* Obviously unused */
         case 10: LCDPtr = SiS_Pr->SiS_St2LCD1024x768Data;        break; /* Non-VESA Timing */
         case 11: LCDPtr = SiS_Pr->SiS_St2LCD1280x1024Data;       break; /* Non-VESA Timing */
         case 13: LCDPtr = SiS_Pr->SiS_NoScaleData1024x768;       break; /* Non-expanding */
         case 14: LCDPtr = SiS_Pr->SiS_NoScaleData1280x1024;      break; /* Non-expanding */
         case 15: LCDPtr = SiS_Pr->SiS_LCD1280x960Data;           break; /* 1280x960 */
         case 20: LCDPtr = SiS_Pr->SiS_ExtLCD1400x1050Data;       break; /* VESA Timing */
         case 21: LCDPtr = SiS_Pr->SiS_NoScaleData1400x1050;      break; /* Non-expanding (let panel scale) */
         case 22: LCDPtr = SiS_Pr->SiS_StLCD1400x1050Data;        break; /* Non-VESA Timing (let panel scale) */
         case 23: LCDPtr = SiS_Pr->SiS_ExtLCD1600x1200Data;       break; /* VESA Timing */
         case 24: LCDPtr = SiS_Pr->SiS_NoScaleData1600x1200;      break; /* Non-expanding */
         case 25: LCDPtr = SiS_Pr->SiS_StLCD1600x1200Data;        break; /* Non-VESA Timing */
         case 26: LCDPtr = SiS_Pr->SiS_ExtLCD1280x768Data;        break; /* VESA Timing */
         case 27: LCDPtr = SiS_Pr->SiS_NoScaleData1280x768;       break; /* Non-expanding */
         case 28: LCDPtr = SiS_Pr->SiS_StLCD1280x768Data;         break; /* Non-VESA Timing */
         case 29: LCDPtr = SiS_Pr->SiS_NoScaleData;	          break; /* Generic no-scale data */
#ifdef SIS315H
	 case 50: LCDPtr = (SiS_LCDDataStruct *)SiS310_ExtCompaq1280x1024Data;	break;
	 case 51: LCDPtr = SiS_Pr->SiS_NoScaleData1280x1024;			break;
	 case 52: LCDPtr = SiS_Pr->SiS_St2LCD1280x1024Data;	  		break;
#endif
         default: LCDPtr = SiS_Pr->SiS_ExtLCD1024x768Data;	  break;
        }
d2405 24
a2428 68
        SiS_Pr->SiS_RVBHCMAX  = (LCDPtr+ResIndex)->RVBHCMAX;
        SiS_Pr->SiS_RVBHCFACT = (LCDPtr+ResIndex)->RVBHCFACT;
        SiS_Pr->SiS_VGAHT     = (LCDPtr+ResIndex)->VGAHT;
        SiS_Pr->SiS_VGAVT     = (LCDPtr+ResIndex)->VGAVT;
        SiS_Pr->SiS_HT        = (LCDPtr+ResIndex)->LCDHT;
        SiS_Pr->SiS_VT        = (LCDPtr+ResIndex)->LCDVT;

#ifdef TWDEBUG
        xf86DrvMsg(0, X_INFO,
    	    "GetCRT2Data: Index %d ResIndex %d\n", CRT2Index, ResIndex);
#endif

	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
           tempax = 1024;
           if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
              if(HwInfo->jChipType < SIS_315H) {
                 if     (SiS_Pr->SiS_VGAVDE == 350) tempbx = 560;
                 else if(SiS_Pr->SiS_VGAVDE == 400) tempbx = 640;
                 else                               tempbx = 768;
              } else {
                 tempbx = 768;
              }
           } else {
              if     (SiS_Pr->SiS_VGAVDE == 357) tempbx = 527;
              else if(SiS_Pr->SiS_VGAVDE == 420) tempbx = 620;
              else if(SiS_Pr->SiS_VGAVDE == 525) tempbx = 775;
              else if(SiS_Pr->SiS_VGAVDE == 600) tempbx = 775;
              else if(SiS_Pr->SiS_VGAVDE == 350) tempbx = 560;
              else if(SiS_Pr->SiS_VGAVDE == 400) tempbx = 640;
              else                               tempbx = 768;
           }
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
           tempax = 1280;
           if     (SiS_Pr->SiS_VGAVDE == 360) tempbx = 768;
           else if(SiS_Pr->SiS_VGAVDE == 375) tempbx = 800;
           else if(SiS_Pr->SiS_VGAVDE == 405) tempbx = 864;
           else                               tempbx = 1024;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960) {
           tempax = 1280;
           if     (SiS_Pr->SiS_VGAVDE == 350)  tempbx = 700;
           else if(SiS_Pr->SiS_VGAVDE == 400)  tempbx = 800;
           else if(SiS_Pr->SiS_VGAVDE == 1024) tempbx = 960;
           else                                tempbx = 960;
	} else if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) &&
	          (HwInfo->jChipType >= SIS_661)) {
	   tempax = 1400;
	   tempbx = 1050;
	   if(SiS_Pr->SiS_VGAVDE == 1024) {
	      tempax = 1280;
	      tempbx = 1024;
	   }
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
           tempax = 1600;
	   tempbx = 1200;
	   if((HwInfo->jChipType < SIS_661) || (!(SiS_Pr->SiS_SetFlag & LCDVESATiming))) {
              if     (SiS_Pr->SiS_VGAVDE == 350)  tempbx = 875;
              else if(SiS_Pr->SiS_VGAVDE == 400)  tempbx = 1000;
           }
        } else {
	   tempax = SiS_Pr->PanelXRes;
           tempbx = SiS_Pr->PanelYRes;
	}
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
           tempax = SiS_Pr->SiS_VGAHDE;
           tempbx = SiS_Pr->SiS_VGAVDE;
        }
        SiS_Pr->SiS_HDE = tempax;
        SiS_Pr->SiS_VDE = tempbx;
d2430 1
d2432 2
a2433 1
}
d2435 1
a2435 4
static void
SiS_GetCRT2Data(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
d2437 1
a2437 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
d2439 1
a2439 1
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
d2441 8
a2448 1
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
d2450 1
a2450 1
           SiS_GetCRT2DataLVDS(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d2452 1
a2452 1
        } else {
d2454 1
a2454 1
	   if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
d2456 5
a2460 2
	      /* Need LVDS Data for LCD on 301B-DH */
	      SiS_GetCRT2DataLVDS(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d2462 9
a2470 1
	   } else {
d2472 1
a2472 1
	      SiS_GetCRT2Data301(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d2474 2
a2475 1
           }
d2477 2
a2478 1
        }
d2480 2
a2481 1
     } else {
d2483 3
a2485 1
     	SiS_GetCRT2Data301(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d2487 3
a2489 1
     }
d2491 1
a2491 1
  } else {
d2493 1
a2493 1
     SiS_GetCRT2DataLVDS(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d2495 2
a2496 2
  }
}
d2498 3
a2500 18
/*********************************************/
/*            GET LVDS DES DATA              */
/*********************************************/

static void
SiS_GetLVDSDesPtr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                  USHORT RefreshRateTableIndex, USHORT *PanelIndex,
		  USHORT *ResIndex, PSIS_HW_INFO HwInfo)
{
  USHORT tempbx,tempal,modeflag;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }
d2502 1
a2502 25
  tempbx = 0;
  if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        tempbx = 50;
        if((SiS_Pr->SiS_TVMode & TVSetPAL) && (!(SiS_Pr->SiS_TVMode & TVSetPALM))) tempbx += 2;
        if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
        /* Nothing special needed for SOverscan    */
        /*     PALM uses NTSC data, PALN uses PAL data */
     }
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     tempbx = SiS_Pr->SiS_LCDTypeInfo;
     if(HwInfo->jChipType >= SIS_661) {
        /* As long as we don's use the BIOS tables, we
	 * need to convert the TypeInfo as for 315 series
	 */
        tempbx = SiS_Pr->SiS_LCDResInfo - 1;
     }
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 16;
     if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
        tempbx = 32;
        if(modeflag & HalfDCLK) tempbx++;
     }
  }
d2504 3
a2506 7
  if(SiS_Pr->SiS_SetFlag & SetDOSMode) {
     if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480)  {
        tempal = 0x07;
        if(HwInfo->jChipType < SIS_315H) {
           if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) tempal++;
        }
     }
d2509 1
a2509 2
  *PanelIndex = tempbx;
  *ResIndex = tempal & 0x1F;
d2512 2
a2513 5
#ifdef SIS315H
static void
SiS_GetLVDSDesPtrA(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex, USHORT *PanelIndex, USHORT *ResIndex,
		   PSIS_HW_INFO HwInfo)
d2515 1
a2515 1
  USHORT tempbx=0,tempal;
d2517 6
a2522 32
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)      tempbx = 2;
  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) tempbx = 3;
  else tempbx = SiS_Pr->SiS_LCDResInfo - 2;

  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx += 4;

  if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
	   tempbx = 80;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
	}
     }
  }
  if((SiS_Pr->SiS_CustomT == CUT_UNIWILL1024) ||
     (SiS_Pr->SiS_CustomT == CUT_UNIWILL10242)) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	tempbx = 82;
	if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
     }
  }
  if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
	tempbx = 84;
	if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
     }
  }
  if(SiS_Pr->SiS_CustomT == CUT_ASUSA2H_2) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	tempbx = 86;
	if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
     }
a2523 8

  if(ModeNo <= 0x13)
     tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  else
     tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;

  *PanelIndex = tempbx;
  *ResIndex = tempal & 0x1F;
d2527 5
a2531 3
static void
SiS_GetLVDSDesData(SiS_Private *SiS_Pr, USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
d2537 1
a2537 13
  if((SiS_Pr->UseCustomMode) ||
     (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) ||
     (SiS_Pr->SiS_CustomT == CUT_PANEL848)) {
     SiS_Pr->SiS_LCDHDES = 0;
     SiS_Pr->SiS_LCDVDES = 0;
     return;
  }

  if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {

#ifdef SIS315H
     SiS_GetLVDSDesPtrA(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                        &PanelIndex, &ResIndex, HwInfo);
d2539 2
a2550 8
	case 80: PanelDesPtr = (SiS_LVDSDesStruct *)Clevo1024x768Des_1;   break;  /*  custom  */
	case 81: PanelDesPtr = (SiS_LVDSDesStruct *)Clevo1024x768Des_2;   break;
	case 82: PanelDesPtr = (SiS_LVDSDesStruct *)Uniwill1024x768Des_1; break;
	case 83: PanelDesPtr = (SiS_LVDSDesStruct *)Uniwill1024x768Des_2; break;
	case 84: PanelDesPtr = (SiS_LVDSDesStruct *)Compaq1280x1024Des_1; break;
	case 85: PanelDesPtr = (SiS_LVDSDesStruct *)Compaq1280x1024Des_2; break;
	case 86: PanelDesPtr = (SiS_LVDSDesStruct *)Asus1024x768Des_1;    break;  /*  custom  */
	case 87: PanelDesPtr = (SiS_LVDSDesStruct *)Asus1024x768Des_2;    break;
a2552 1
#endif
d2556 2
a2557 2
     SiS_GetLVDSDesPtr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                       &PanelIndex, &ResIndex, HwInfo);
d2561 1
a2561 1
     	case  0: PanelDesPtr = SiS_Pr->SiS_PanelType00_1;   break;   /* ---  */
d2577 1
a2577 1
     	case 16: PanelDesPtr = SiS_Pr->SiS_PanelType00_2;   break;    /* --- */
d2593 4
a2596 6
	case 32: PanelDesPtr = SiS_Pr->SiS_PanelTypeNS_1;   break;    /* pass 1:1 */
	case 33: PanelDesPtr = SiS_Pr->SiS_PanelTypeNS_2;   break;
     	case 50: PanelDesPtr = SiS_Pr->SiS_CHTVUNTSCDesData;   break; /* TV */
     	case 51: PanelDesPtr = SiS_Pr->SiS_CHTVONTSCDesData;   break;
     	case 52: PanelDesPtr = SiS_Pr->SiS_CHTVUPALDesData;    break;
     	case 53: PanelDesPtr = SiS_Pr->SiS_CHTVOPALDesData;    break;
d2598 5
a2602 5
		 if(HwInfo->jChipType < SIS_315H)
		    PanelDesPtr = SiS_Pr->SiS_PanelType0e_1;
		 else
		    PanelDesPtr = SiS_Pr->SiS_PanelType01_1;
		 break;
d2608 32
a2639 31
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD){
     if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
        if(ModeNo <= 0x13) {
           modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
	   if(!(modeflag & HalfDCLK)) {
	      SiS_Pr->SiS_LCDHDES = 632;
	   }
        }
     } else {
        if(!(SiS_Pr->SiS_SetFlag & SetDOSMode)) {
           if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024) {
              if(SiS_Pr->SiS_LCDResInfo >= SiS_Pr->SiS_Panel1024x768) {
                 if(ModeNo <= 0x13) {
	            modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
	            if(HwInfo->jChipType < SIS_315H) {
	               if(!(modeflag & HalfDCLK)) SiS_Pr->SiS_LCDHDES = 320;
	            } else {
	               if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)
	                  SiS_Pr->SiS_LCDHDES = 480;
                       if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)
	                  SiS_Pr->SiS_LCDHDES = 804;
		       if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)
	                  SiS_Pr->SiS_LCDHDES = 704;
                       if(!(modeflag & HalfDCLK)) {
                          SiS_Pr->SiS_LCDHDES = 320;
	                  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)
	                     SiS_Pr->SiS_LCDHDES = 632;
		          else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)
	                     SiS_Pr->SiS_LCDHDES = 542;
                       }
                    }
d2642 2
a2643 1
           }
d2645 2
a2646 1
     }
d2648 1
d2651 1
a2651 20
/*********************************************/
/*          SET CRT2 AUTO-THRESHOLD          */
/*********************************************/

#ifdef SIS315H
static void
SiS_CRT2AutoThreshold(SiS_Private *SiS_Pr)
{
  SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x40);
}
#endif

/*********************************************/
/*           DISABLE VIDEO BRIDGE            */
/*********************************************/

/* NEVER use any variables (VBInfo), this will be called
 * from outside the context of modeswitch!
 * MUST call getVBType before calling this
 */
d2653 3
a2655 1
SiS_DisableBridge(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d2657 1
a2657 4
#ifdef SIS315H
  USHORT tempah,pushax=0,modenum;
#endif
  USHORT temp=0;
d2659 7
a2665 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
d2667 27
a2693 1
      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {   /* ===== For 30xB/LV ===== */
d2695 3
a2697 1
        if(HwInfo->jChipType < SIS_315H) {
d2699 6
a2704 1
#ifdef SIS300	   /* 300 series */
d2706 5
a2710 1
           if(HwInfo->jChipType == SIS_300) {  /* For 300+301LV (A907) */
d2712 1
a2712 19
	      if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	         if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	            SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFE);
		    SiS_PanelDelay(SiS_Pr, HwInfo, 3);
		 }
	      }
	      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,0x3f);
	      SiS_ShortDelay(SiS_Pr,1);
	      SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);
	      SiS_DisplayOff(SiS_Pr);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	      if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	         if( (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ||
	             (!(SiS_CR36BIOSWord23d(SiS_Pr, HwInfo))) ) {
	            SiS_PanelDelay(SiS_Pr, HwInfo, 2);
                    SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFD);
		 }
	      }
d2714 4
a2717 1
	   } else {
d2719 3
a2721 21
	      if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	         SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	         SiS_PanelDelay(SiS_Pr, HwInfo, 3);
	      }
	      if(SiS_Is301B(SiS_Pr)) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,0x3f);
	         SiS_ShortDelay(SiS_Pr,1);
	      }
	      SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);
	      SiS_DisplayOff(SiS_Pr);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	      SiS_UnLockCRT2(SiS_Pr,HwInfo);
	      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x80);
	      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40);
	      if( (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ||
	          (!(SiS_CR36BIOSWord23d(SiS_Pr, HwInfo))) ) {
	         SiS_PanelDelay(SiS_Pr, HwInfo, 2);
                 SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x04);
	      }
	   }
d2723 13
a2735 1
#endif  /* SIS300 */
d2737 13
a2749 1
        } else {
d2751 2
a2752 1
#ifdef SIS315H	   /* 315 series */
d2754 1
a2754 1
           if(IS_SIS550650740660) {		/* 550, 650, 740, 660 */
d2756 2
a2757 1
	      modenum = SiS_GetReg(SiS_Pr->SiS_P3d4,0x34) & 0x7f;
d2759 1
a2759 17
              if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {			/* LV */
#ifdef SET_EMI
	         if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
		    if(SiS_Pr->SiS_CustomT != CUT_CLEVO1400) {
	               SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
		    }
		 }
#endif
		 if( (modenum <= 0x13) ||
		     (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
		     (SiS_IsVAMode(SiS_Pr,HwInfo)) ) {
	     	    SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFE);
		    if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		       (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
		       SiS_PanelDelay(SiS_Pr, HwInfo, 3);
		    }
	         }
d2761 1
a2761 4
		 if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
		    (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
		    SiS_DDC2Delay(SiS_Pr,0xff00);
		    SiS_DDC2Delay(SiS_Pr,0xe000);
d2763 1
a2763 1
	            SiS_SetRegByte(SiS_Pr->SiS_P3c6,0x00);
d2765 1
a2765 1
                    pushax = SiS_GetReg(SiS_Pr->SiS_P3c4,0x06);
d2767 1
a2767 3
		    if(IS_SIS740) {
		       SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x06,0xE3);
		    }
d2769 13
a2781 1
	            SiS_PanelDelay(SiS_Pr, HwInfo, 3);
d2783 6
a2788 8
		    if(!(SiS_IsNotM650orLater(SiS_Pr, HwInfo))) {
	               tempah = 0xef;
	               if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	                  tempah = 0xf7;
                       }
	               SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x4c,tempah);
	            }
		 }
d2790 1
a2790 1
              } else if(SiS_Pr->SiS_VBType & VB_NoLCD) {			/* B-DH */
d2792 1
a2792 3
	         if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x4c,0xef);
	         }
d2794 1
a2794 1
	      }
d2796 1
a2796 4
	      if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
	         (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,0xef);
	      }
d2798 5
a2802 12
              if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	         (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		 (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
	         tempah = 0x3f;
	         if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	            tempah = 0x7f;
	            if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
		       tempah = 0xbf;
                    }
	         }
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,tempah);
	      }
d2804 8
a2811 2
              if((SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	         ((SiS_Pr->SiS_VBType & VB_SIS301LV302LV) && (modenum <= 0x13))) {
d2813 1
a2813 22
	         if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
		    (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		    (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
		    SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1E,0xDF);
		    SiS_DisplayOff(SiS_Pr);
		    SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
		 } else {
	            SiS_DisplayOff(SiS_Pr);
	            SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	            SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1E,0xDF);
		    if((SiS_Pr->SiS_VBType & VB_SIS301LV302LV) && (modenum <= 0x13)) {
		       SiS_DisplayOff(SiS_Pr);
	               SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	               SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	               SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	               temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
                       SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	               SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	               SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,temp);
		    }
		 }
d2815 1
a2815 1
	      } else {
d2817 1
a2817 13
	         if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
		    (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		    (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
		    if(!(SiS_IsDualEdge(SiS_Pr,HwInfo))) {
		       SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xdf);
		       SiS_DisplayOff(SiS_Pr);
		    }
		    SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
		 } else {
                    SiS_DisplayOff(SiS_Pr);
	            SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	            SiS_PanelDelay(SiS_Pr, HwInfo, 2);
		 }
d2819 1
a2819 5
		 SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	         temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
                 SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	         SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,temp);
d2821 5
a2825 1
	      }
d2827 1
a2827 3
	      if((SiS_Pr->SiS_VBType & VB_SIS301LV302LV) &&
	         (SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
		 (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
d2829 1
a2829 1
		 SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,~0x10);
d2831 10
a2840 8
	         tempah = 0x3f;
	         if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	            tempah = 0x7f;
	            if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
		       tempah = 0xbf;
                    }
	         }
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,tempah);
d2842 1
a2842 3
		 if(SiS_IsNotM650orLater(SiS_Pr,HwInfo)) {
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
		 }
d2844 1
a2844 8
	         if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
	            SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xdf);
	            if(!(SiS_CRT2IsLCD(SiS_Pr,HwInfo))) {
	               if(!(SiS_IsDualEdge(SiS_Pr,HwInfo))) {
		          SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFD);
                       }
                    }
	         }
d2846 1
a2846 1
	         SiS_SetReg(SiS_Pr->SiS_P3c4,0x06,pushax);
d2848 3
a2850 6
		 if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	            if( (SiS_IsVAMode(SiS_Pr, HwInfo)) ||
	                (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
		       SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 20);
		    }
	         }
d2852 1
a2852 1
  	      } else if(SiS_Pr->SiS_VBType & VB_NoLCD) {
d2854 1
a2854 1
	         /* NIL */
d2856 1
a2856 3
	      } else if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	                (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
			(SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
d2858 1
a2858 21
		 if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	            tempah = 0xef;
	            if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
		       if(modenum > 0x13) {
	                  tempah = 0xf7;
		       }
                    }
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x4c,tempah);
		 }
		 if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		    (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
		    if((SiS_IsVAMode(SiS_Pr,HwInfo)) ||
		       (!(SiS_IsDualEdge(SiS_Pr,HwInfo)))) {
		       if((!(SiS_WeHaveBacklightCtrl(SiS_Pr, HwInfo))) ||
		          (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo)))) {
			  SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	     	          SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFD);
			  SiS_PanelDelay(SiS_Pr, HwInfo, 4);
	               }
		    }
		 }
d2860 3
a2862 26
	      }

	  } else {			/* 315, 330 - all bridge types */

	     if(SiS_Is301B(SiS_Pr)) {
	        tempah = 0x3f;
	        if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	           tempah = 0x7f;
	           if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
		      tempah = 0xbf;
                   }
	        }
	        SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,tempah);
	        if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	           SiS_DisplayOff(SiS_Pr);
		   SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	        }
	     }
	     if( (!(SiS_Is301B(SiS_Pr))) ||
	         (!(SiS_IsVAMode(SiS_Pr,HwInfo))) ) {

 	 	if( (!(SiS_Is301B(SiS_Pr))) ||
		    (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ) {

	           SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);
	           SiS_DisplayOff(SiS_Pr);
d2864 4
d2869 3
d2873 5
a2877 1
                SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
d2879 1
a2879 12
                SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);

	        temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
                SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,temp);

	     }

	  }    /* 315/330 */

#endif /* SIS315H */
d2881 29
d2912 3
a2914 16
      } else {     /* ============ For 301 ================ */

        if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
           if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	      SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	      SiS_PanelDelay(SiS_Pr, HwInfo, 3);
	   }
#endif
	}

        SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);           /* disable VB */
        SiS_DisplayOff(SiS_Pr);

        if(HwInfo->jChipType >= SIS_315H) {
           SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
d2917 1
a2917 1
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);                /* disable lock mode */
d2919 1
a2919 15
	if(HwInfo->jChipType >= SIS_315H) {
            temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
            SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	    SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
	    SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,temp);
	} else {
#ifdef SIS300
            SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);            /* disable CRT2 */
	    if( (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ||
	        (!(SiS_CR36BIOSWord23d(SiS_Pr,HwInfo))) ) {
		SiS_PanelDelay(SiS_Pr, HwInfo, 2);
		SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x04);
	    }
#endif
	}
d2921 1
a2921 1
      }
d2923 2
a2924 1
  } else {     /* ============ For LVDS =============*/
d2926 9
a2934 1
    if(HwInfo->jChipType < SIS_315H) {
d2936 3
a2938 5
#ifdef SIS300	/* 300 series */

	if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
	   SiS_SetCH700x(SiS_Pr,0x090E);
	}
d2940 2
a2941 3
	if(HwInfo->jChipType == SIS_730) {
	   if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x11) & 0x08)) {
	      SiS_WaitVBRetrace(SiS_Pr,HwInfo);
d2943 3
a2945 3
	   if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	      SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	      SiS_PanelDelay(SiS_Pr, HwInfo, 3);
d2947 3
a2950 13
	   if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x11) & 0x08)) {
	      if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x40)) {
  	         if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
                    SiS_WaitVBRetrace(SiS_Pr,HwInfo);
		    if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x06) & 0x1c)) {
		       SiS_DisplayOff(SiS_Pr);
	            }
	            SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	            SiS_PanelDelay(SiS_Pr, HwInfo, 3);
                 }
              }
	   }
	}
d2952 6
a2957 1
	SiS_DisplayOff(SiS_Pr);
d2959 1
a2959 1
	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
d2961 1
a2961 4
	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	SiS_UnLockCRT2(SiS_Pr,HwInfo);
	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x80);
	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40);
a2962 4
	if( (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ||
	    (!(SiS_CR36BIOSWord23d(SiS_Pr,HwInfo))) ) {
	   SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	   SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x04);
d2965 3
a2967 1
#endif  /* SIS300 */
d2969 1
a2969 1
    } else {
d2971 1
a2971 1
#ifdef SIS315H	/* 315 series */
d2973 1
a2973 1
	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
d2975 9
a2983 6
	   if(HwInfo->jChipType == SIS_740) {
	      temp = SiS_GetCH701x(SiS_Pr,0x61);
	      if(temp < 1) {
	         SiS_SetCH701x(SiS_Pr,0xac76);
	         SiS_SetCH701x(SiS_Pr,0x0066);
	      }
d2985 18
a3002 5
	      if( (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	          (SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwInfo)) ) {
	  	 SiS_SetCH701x(SiS_Pr,0x3e49);
	      }
	   }
d3004 13
a3016 5
	   if( (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	       (SiS_IsVAMode(SiS_Pr,HwInfo)) ) {
	      SiS_Chrontel701xBLOff(SiS_Pr);
	      SiS_Chrontel701xOff(SiS_Pr,HwInfo);
	   }
d3018 8
a3025 6
	   if(HwInfo->jChipType != SIS_740) {
	      if( (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	          (SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwInfo)) ) {
	   	 SiS_SetCH701x(SiS_Pr,0x0149);
  	      } 
	   }
d3027 1
a3027 1
	}
d3029 1
a3029 4
	if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	   SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	   SiS_PanelDelay(SiS_Pr, HwInfo, 3);
	}
d3031 1
a3031 5
	if( (SiS_Pr->SiS_IF_DEF_CH70xx == 0)   ||
	    (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	    (!(SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwInfo))) ) {
	   SiS_DisplayOff(SiS_Pr);
	}
d3033 7
a3039 5
	if( (SiS_Pr->SiS_IF_DEF_CH70xx == 0)   ||
	    (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	    (!(SiS_IsVAMode(SiS_Pr,HwInfo))) ) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	}
d3041 1
a3041 3
	if(HwInfo->jChipType == SIS_740) {
	   SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
	}
d3043 1
a3043 1
	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
d3045 2
a3046 5
	if( (SiS_Pr->SiS_IF_DEF_CH70xx == 0)   ||
	    (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	    (!(SiS_IsVAMode(SiS_Pr,HwInfo))) ) {
	   SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	}
d3048 1
a3048 17
	if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	   if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xdf);
	      if(HwInfo->jChipType == SIS_550) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xbf);
	         SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xef);
	      }
	   }
	} else {
	   if(HwInfo->jChipType == SIS_740) {
	      if(SiS_IsLCDOrLCDA(SiS_Pr,HwInfo)) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xdf);
	      }
	   } else if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xdf);
	   }
	}
d3050 8
a3057 7
	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	   if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	      /* SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xff); */
	   } else {
	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	   }
	}
d3059 2
a3060 1
	SiS_UnLockCRT2(SiS_Pr,HwInfo);
d3062 1
a3062 17
	if(HwInfo->jChipType == SIS_550) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x80); /* DirectDVD PAL?*/
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40); /* VB clock / 4 ? */
	} else if( (SiS_Pr->SiS_IF_DEF_CH70xx == 0)   ||
	           (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
		   (!(SiS_IsVAMode(SiS_Pr,HwInfo))) ) {
	   SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0xf7);
	}

        if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	   if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	      if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	 	 SiS_PanelDelay(SiS_Pr, HwInfo, 2);
		 SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x04);
	      }
	   }
        }
d3064 1
a3064 1
#endif  /* SIS315H */
d3066 2
a3067 1
    }  /* 315 series */
d3069 1
a3069 1
  }  /* LVDS */
a3072 8
/*********************************************/
/*            ENABLE VIDEO BRIDGE            */
/*********************************************/

/* NEVER use any variables (VBInfo), this will be called
 * from outside the context of a mode switch!
 * MUST call getVBType before calling this
 */
d3074 3
a3076 1
SiS_EnableBridge(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d3078 1
a3078 5
  USHORT temp=0,tempah;
#ifdef SIS315H
  USHORT temp1,pushax=0;
  BOOLEAN delaylong = FALSE;
#endif
d3080 1
d3082 1
a3082 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
d3084 3
a3086 1
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {   /* ====== For 301B et al  ====== */
d3088 10
a3097 1
      if(HwInfo->jChipType < SIS_315H) {
d3099 1
a3099 1
#ifdef SIS300     /* 300 series */
d3101 3
a3103 1
         if(HwInfo->jChipType == SIS_300) {
d3105 1
a3105 28
	    if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	       if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	          SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
	          if(!(SiS_CR36BIOSWord23d(SiS_Pr, HwInfo))) {
	             SiS_PanelDelay(SiS_Pr, HwInfo, 0);
	          }
	       }
	    }
	    temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;             /* lock mode */
            if(SiS_BridgeInSlave(SiS_Pr)) {
               tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
               if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
            }
            SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
	    SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1F,0x20);        /* enable VB processor */
	    SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,0xC0);
	    SiS_DisplayOn(SiS_Pr);
	    if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	       if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	          if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x10)) {
		     if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
		        SiS_PanelDelay(SiS_Pr, HwInfo, 1);
                     }
		     SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
	 	  }
	       }
	    }
d3107 1
a3107 1
	 } else {
d3109 3
a3111 37
	    if((SiS_Pr->SiS_VBType & VB_NoLCD) &&
	       (SiS_CRT2IsLCD(SiS_Pr, HwInfo))) {
	       /* This is only for LCD output on 301B-DH via LVDS */
	       SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x00);
	       if(!(SiS_CR36BIOSWord23d(SiS_Pr,HwInfo))) {
	          SiS_PanelDelay(SiS_Pr, HwInfo, 0);
	       }
	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);   /* Enable CRT2 */
               SiS_DisplayOn(SiS_Pr);
	       SiS_UnLockCRT2(SiS_Pr,HwInfo);
	       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x02,0xBF);
	       if(SiS_BridgeInSlave(SiS_Pr)) {
      		  SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x01,0x1F);
      	       } else {
      		  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x01,0x1F,0x40);
               }
	       if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x40)) {
	           if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x10)) {
		       if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
		           SiS_PanelDelay(SiS_Pr, HwInfo, 1);
                       }
		       SiS_WaitVBRetrace(SiS_Pr,HwInfo);
                       SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x00);
                   }
	       }
            } else {
	       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;             /* lock mode */
               if(SiS_BridgeInSlave(SiS_Pr)) {
                  tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
                  if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
               }
               SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
	       SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1F,0x20);        /* enable VB processor */
	       SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,0xC0);
	       SiS_DisplayOn(SiS_Pr);
	    }
d3113 6
a3118 2
         }
#endif /* SIS300 */
d3120 8
a3127 1
      } else {
d3129 1
a3129 1
#ifdef SIS315H    /* 315 series */
d3131 1
a3131 1
	 if(IS_SIS550650740660) {		/* 550, 650, 740, 660 */
d3133 6
a3138 1
	    UCHAR r30=0, r31=0, r32=0, r33=0, cr36=0;
d3140 2
a3141 1
	    if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
d3143 13
a3155 9
	       if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
	          (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
	          SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,0xef);
#ifdef SET_EMI
		  if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	             SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
		  }
#endif
	       }
d3157 1
a3157 8
               if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	          tempah = 0x10;
		  if(SiS_LCDAEnabled(SiS_Pr, HwInfo)) {
		     if(SiS_TVEnabled(SiS_Pr, HwInfo)) tempah = 0x18;
		     else 			       tempah = 0x08;
		  }
		  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x4c,tempah);
	       }
d3159 18
a3176 9
	       if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
	          (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
	          SiS_SetRegByte(SiS_Pr->SiS_P3c6,0x00);
	          SiS_DisplayOff(SiS_Pr);
	          pushax = SiS_GetReg(SiS_Pr->SiS_P3c4,0x06);
	          if(IS_SIS740) {
	             SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x06,0xE3);
	          }
	       }
d3178 30
a3207 17
	       if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	           (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
                  if(!(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x26) & 0x02)) {
		     if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
		        (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
		        SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 2);
			SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
			if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
			   SiS_GenericDelay(SiS_Pr, 0x4500);
			}
	                SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 2);
		     } else {
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
			SiS_PanelDelay(SiS_Pr, HwInfo, 0);
		     }
	          }
	       }
d3209 4
a3212 7
               if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
	          (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
	          if(!(SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) & 0x40)) {
                     SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 10);
		     delaylong = TRUE;
		  }
	       }
d3214 1
a3214 1
	    } else if(SiS_Pr->SiS_VBType & VB_NoLCD) {
d3216 18
a3233 3
	       if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	          SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x4c,0x10);
	       }
d3235 1
a3235 1
  	    } else if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
d3237 31
a3267 9
	       if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	          tempah = 0x10;
		  if(SiS_LCDAEnabled(SiS_Pr, HwInfo)) {
		     if(SiS_TVEnabled(SiS_Pr, HwInfo)) tempah = 0x18;
		     else 			       tempah = 0x08;
		  }
		  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x4c,tempah);
	       }
	       
d3269 36
d3306 1
a3306 9
	    if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
               temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;
	       if(SiS_BridgeInSlave(SiS_Pr)) {
                  tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
                  if(!(tempah & SetCRT2ToRAMDAC)) {
		     if(!(SiS_LCDAEnabled(SiS_Pr, HwInfo))) temp |= 0x20;
		  }
               }
               SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
d3308 1
a3308 16
	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);                   /* enable CRT2 */
	       
	       if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	          (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		  (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
	          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
		  temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2e);
		  if(!(temp & 0x80)) {
		     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x80);
		  }
	       } else {
	          SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	       }
	    } else {
	       SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x20);
	    }
d3310 5
a3314 1
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1f,0x20);
d3316 1
a3316 8
	    if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	       (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
	       (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
	       temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2e);
	       if(!(temp & 0x80)) {
		  SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x80);
	       }
	    }
d3318 1
a3318 8
	    tempah = 0xc0;
	    if(SiS_IsDualEdge(SiS_Pr, HwInfo)) {
	       tempah = 0x80;
	       if(!(SiS_IsVAMode(SiS_Pr, HwInfo))) {
	          tempah = 0x40;
               }
	    }
            SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,tempah);
d3320 2
a3321 6
	    if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	       (((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
	         (SiS_Pr->SiS_CustomT == CUT_CLEVO1400))     &&
	        (!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))))) {
               SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
	    }
d3323 12
a3334 1
	    if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
d3336 11
a3346 9
	       if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
	          (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
	          SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	       }
#ifdef COMPAQ_HACK
	       if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
	          SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	       }
#endif
d3348 1
a3348 1
	       SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1f,0x10);
d3350 3
a3352 31
	       if(SiS_Pr->SiS_CustomT != CUT_CLEVO1400) {
#ifdef SET_EMI
	          if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	             SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
		  }
#endif
	          SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x27,0x0c);
#ifdef SET_EMI
	          if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {

		     cr36 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36);

		     /*                                              (P4_30|0x40)  */
		     /* Compal 1400x1050: 0x05, 0x60, 0x00                YES  (1.10.7w;  CR36=69)      */
		     /* Compal 1400x1050: 0x0d, 0x70, 0x40                YES  (1.10.7x;  CR36=69)      */
		     /* Acer   1280x1024: 0x12, 0xd0, 0x6b                NO   (1.10.9k;  CR36=73)      */
		     /* Compaq 1280x1024: 0x0d, 0x70, 0x6b                YES  (1.12.04b; CR36=03)      */
		     /* Clevo   1024x768: 0x05, 0x60, 0x33                NO   (1.10.8e;  CR36=12, DL!) */
		     /* Clevo   1024x768: 0x0d, 0x70, 0x40 (if type == 3) YES  (1.10.8y;  CR36=?2)      */
		     /* Clevo   1024x768: 0x05, 0x60, 0x33 (if type != 3) YES  (1.10.8y;  CR36=?2)      */
		     /* Asus    1024x768: ?                                ?   (1.10.8o;  CR36=?2)      */
		     /* Asus    1024x768: 0x08, 0x10, 0x3c (problematic)  YES  (1.10.8q;  CR36=22)      */

		     if(SiS_Pr->HaveEMI) {
		        r30 = SiS_Pr->EMI_30;
			r31 = SiS_Pr->EMI_31;
			r32 = SiS_Pr->EMI_32;
			r33 = SiS_Pr->EMI_33;
		     } else {
		        r30 = 0;
		     }
d3354 1
a3354 24
		     /* EMI_30 is read at driver start; however, the BIOS sets this
		      * (if it is used) only if the LCD is in use. In case we caught
		      * the machine while on TV output, this bit is not set and we
		      * don't know if it should be set - hence our detection is wrong.
		      * Work-around this here:
		      */

		     if((!SiS_Pr->HaveEMI) || (!SiS_Pr->HaveEMILCD)) {
		        if((cr36 & 0x0f) == 0x02) {			/* 1024x768 */
		           r30 |= 0x40;
			   if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
			      r30 &= ~0x40;
			   }
		        } else if((cr36 & 0x0f) == 0x03) {		/* 1280x1024 */
		           r30 |= 0x40;
			   if(SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) {
			      r30 &= ~0x40;
			   }
		        } else if((cr36 & 0x0f) == 0x09) {		/* 1400x1050 */
		           r30 |= 0x40;
		        } else if((cr36 & 0x0f) == 0x0b) {		/* 1600x1200 - unknown */
		           r30 |= 0x40;
		        }
                     }
d3356 12
a3367 23
		     if(!SiS_Pr->HaveEMI) {
		        if((cr36 & 0x0f) == 0x02) {
			   if((cr36 & 0xf0) == 0x30) {
			      r31 = 0x0d; r32 = 0x70; r33 = 0x40;
			   } else {
			      r31 = 0x05; r32 = 0x60; r33 = 0x33;
			   }
		        } else if((cr36 & 0x0f) == 0x03) {
			   if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
			      r31 = 0x0d; r32 = 0x70; r33 = 0x6b;
			   } else {
			      r31 = 0x12; r32 = 0xd0; r33 = 0x6b;
			   }
			} else if((cr36 & 0x0f) == 0x09) {
			   if(SiS_Pr->SiS_CustomT == CUT_COMPAL1400_2) {
			      r31 = 0x0d; r32 = 0x70; r33 = 0x40;  /* BIOS values */
			   } else {
			      r31 = 0x05; r32 = 0x60; r33 = 0x00;
			   }
			} else {
			   r31 = 0x05; r32 = 0x60; r33 = 0x00;
			}
		     }
d3369 1
a3369 56
		     /* BIOS values don't work so well sometimes */
		     if(!SiS_Pr->OverruleEMI) {
#ifdef COMPAL_HACK
		        if(SiS_Pr->SiS_CustomT == CUT_COMPAL1400_2) {
		           if((cr36 & 0x0f) == 0x09) {
			      r30 = 0x60; r31 = 0x05; r32 = 0x60; r33 = 0x00;
			   }
 		        }
#endif
#ifdef COMPAQ_HACK
		        if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
		           if((cr36 & 0x0f) == 0x03) {
			      r30 = 0x20; r31 = 0x12; r32 = 0xd0; r33 = 0x6b;     /* rev 1 */
			   }
			}
#endif
#ifdef ASUS_HACK
		        if(SiS_Pr->SiS_CustomT == CUT_ASUSA2H_2) {
		           if((cr36 & 0x0f) == 0x02) {
			      /* r30 = 0x60; r31 = 0x05; r32 = 0x60; r33 = 0x33;  */   /* rev 2 */
			      /* r30 = 0x20; r31 = 0x05; r32 = 0x60; r33 = 0x33;  */   /* rev 3 */
			      /* r30 = 0x60; r31 = 0x0d; r32 = 0x70; r33 = 0x40;  */   /* rev 4 */
			      /* r30 = 0x20; r31 = 0x0d; r32 = 0x70; r33 = 0x40;  */   /* rev 5 */
			   }
			}
#endif
 		     }
		     if(!(SiS_Pr->OverruleEMI && (!r30) && (!r31) && (!r32) && (!r33))) {
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x30,0x20);
		     }
		     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x31,r31);
		     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x32,r32);
		     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x33,r33);
		     if(!(SiS_Pr->OverruleEMI && (!r30) && (!r31) && (!r32) && (!r33))) {
		        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x10);
		     } else {
		        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x00);
		     }
		     if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	                 (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
	                if(r30 & 0x40) {
		           SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 5);
			   if(delaylong) {
			      SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 5);
			      delaylong = FALSE;
			   }
			   SiS_WaitVBRetrace(SiS_Pr,HwInfo);
			   if(SiS_Pr->SiS_CustomT == CUT_ASUSA2H_2) {
			      SiS_GenericDelay(SiS_Pr, 0x500);
			   }
	                   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x30,0x40);
	                }
		     }
		  }
#endif
	       }
d3371 22
a3392 1
	       if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
d3394 1
a3394 10
	          if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	              (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
		     SiS_DisplayOn(SiS_Pr);
		     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
		     SiS_WaitVBRetrace(SiS_Pr, HwInfo);
		     SiS_PanelDelay(SiS_Pr, HwInfo, 3);
		     if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
	  	     }
		  }
d3396 2
a3397 1
	       } else if(SiS_Pr->SiS_CustomT == CUT_CLEVO1400) {
d3399 2
a3400 9
	          if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	             if( (SiS_IsVAMode(SiS_Pr, HwInfo)) ||
	                 (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
		        SiS_DisplayOn(SiS_Pr);
		        SiS_PanelDelay(SiS_Pr, HwInfo, 1);
		        SiS_WaitVBRetrace(SiS_Pr,HwInfo);
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
		     }
		  }
d3402 1
a3402 1
	       } else {
d3404 2
a3405 15
	          SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x80);
	          if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	             if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	                 ((SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ) {
		        SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 10);
		        if(delaylong) {
			   SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 10);
		        }
                        SiS_WaitVBRetrace(SiS_Pr,HwInfo);
			if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
			   SiS_GenericDelay(SiS_Pr, 0x500);
			}
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
	             }
	          }
d3407 18
a3424 7
	          SiS_SetReg(SiS_Pr->SiS_P3c4,0x06,pushax);
	          SiS_DisplayOn(SiS_Pr);
	          SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xff);

	          if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	             SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
	          }
d3426 48
a3473 1
	       }
d3475 4
a3478 1
	    }
d3480 4
a3483 1
	 } else {			/* 315, 330 */
d3485 2
a3486 7
	    if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
	       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;
	       if(SiS_BridgeInSlave(SiS_Pr)) {
                  tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
                  if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
               }
               SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
d3488 6
a3493 1
	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);                   /* enable CRT2 */
d3495 1
a3495 4
	       temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2E);
               if(!(temp & 0x80))
                  SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);
            }
d3497 8
a3504 1
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1f,0x20);
d3506 10
a3515 1
	    if(SiS_Is301B(SiS_Pr)) {
d3517 9
a3525 12
	       temp=SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2E);
               if(!(temp & 0x80))
                  SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);

	       tempah = 0xc0;
	       if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	          tempah = 0x80;
	          if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
	             tempah = 0x40;
                  }
	       }
               SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,tempah);
d3527 48
a3574 1
	       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
d3576 9
a3584 1
	    } else {
d3586 1
a3586 4
	       SiS_VBLongWait(SiS_Pr);
               SiS_DisplayOn(SiS_Pr);
	       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7F);
               SiS_VBLongWait(SiS_Pr);
d3588 1
a3588 1
	    }
d3590 22
a3611 1
	 }   /* 315, 330 */
d3613 40
a3652 1
#endif /* SIS315H */
d3654 5
a3658 1
      }
d3660 26
a3685 1
    } else {	/* ============  For 301 ================ */
d3687 30
a3716 6
       if(HwInfo->jChipType < SIS_315H) {
          if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
             SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x00);
	     SiS_PanelDelay(SiS_Pr, HwInfo, 0);
	  }
       }
d3718 6
a3723 6
       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;          /* lock mode */
       if(SiS_BridgeInSlave(SiS_Pr)) {
          tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
          if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
       }
       SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
d3725 6
a3730 1
       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);                  /* enable CRT2 */
d3732 7
a3738 6
       if(HwInfo->jChipType >= SIS_315H) {
          temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2E);
          if(!(temp & 0x80)) {
             SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);         /* BVBDOENABLE=1 */
	  }
       }
d3740 1
a3740 1
       SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1F,0x20);     /* enable VB processor */
d3742 12
a3753 6
       SiS_VBLongWait(SiS_Pr);
       SiS_DisplayOn(SiS_Pr);
       if(HwInfo->jChipType >= SIS_315H) {
          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
       }
       SiS_VBLongWait(SiS_Pr);
d3755 4
a3758 6
       if(HwInfo->jChipType < SIS_315H) {
          if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
             SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x00);
	  }
       }
d3760 6
a3765 1
    }
d3767 1
a3767 1
  } else {   /* =================== For LVDS ================== */
d3769 9
a3777 1
    if(HwInfo->jChipType < SIS_315H) {
d3779 1
a3779 1
#ifdef SIS300    /* 300 series */
d3781 4
a3784 11
       if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
          if(HwInfo->jChipType == SIS_730) {
	     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
	     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
	     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
	  }
          SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x00);
	  if(!(SiS_CR36BIOSWord23d(SiS_Pr,HwInfo))) {
	     SiS_PanelDelay(SiS_Pr, HwInfo, 0);
	  }
       }
d3786 3
a3788 9
       SiS_EnableCRT2(SiS_Pr);
       SiS_DisplayOn(SiS_Pr);
       SiS_UnLockCRT2(SiS_Pr,HwInfo);
       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x02,0xBF);
       if(SiS_BridgeInSlave(SiS_Pr)) {
      	  SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x01,0x1F);
       } else {
      	  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x01,0x1F,0x40);
       }
d3790 7
a3796 6
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
          if(!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) {
	     SiS_WaitVBRetrace(SiS_Pr, HwInfo);
	     SiS_SetCH700x(SiS_Pr,0x0B0E);
          }
       }
d3798 4
a3801 12
       if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
          if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x40)) {
             if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x10)) {
	        if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	 	   SiS_PanelDelay(SiS_Pr, HwInfo, 1);
        	   SiS_PanelDelay(SiS_Pr, HwInfo, 1);
	        }
	        SiS_WaitVBRetrace(SiS_Pr, HwInfo);
                SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x00);
             }
	  }
       }
d3803 1
a3803 1
#endif  /* SIS300 */
d3805 2
a3806 1
    } else {
d3808 3
a3810 1
#ifdef SIS315H    /* 315 series */
d3812 11
a3822 6
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	  if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	     SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x00);
	     SiS_PanelDelay(SiS_Pr, HwInfo, 0);
          }
       }
d3824 6
a3829 2
       SiS_EnableCRT2(SiS_Pr);
       SiS_UnLockCRT2(SiS_Pr,HwInfo);
d3831 5
a3835 1
       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0xf7);
d3837 1
a3837 5
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
          temp = SiS_GetCH701x(SiS_Pr,0x66);
	  temp &= 0x20;
	  SiS_Chrontel701xBLOff(SiS_Pr);
       }
d3839 10
a3848 3
       if(HwInfo->jChipType != SIS_550) {
          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
       }
d3850 1
a3850 7
       if(HwInfo->jChipType == SIS_740) {
          if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
             if(SiS_IsLCDOrLCDA(SiS_Pr, HwInfo)) {
	   	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x20);
	     }
	  }
       }
d3852 13
a3864 4
       temp1 = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2E);
       if(!(temp1 & 0x80)) {
          SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);
       }
d3866 16
a3881 5
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
          if(temp) {
	     SiS_Chrontel701xBLOn(SiS_Pr, HwInfo);
	  }
       }
d3883 2
a3884 13
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
          if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x20);
	     if(HwInfo->jChipType == SIS_550) {
		SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x40);
		SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x10);
	     }
	  }
       } else if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
          if(HwInfo->jChipType != SIS_740) {
             SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x20);
	  }
       }
d3886 10
a3895 3
       if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
       }
d3897 9
a3905 9
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
       	  if(SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwInfo)) {
             SiS_Chrontel701xOn(SiS_Pr,HwInfo);
          }
          if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	      (SiS_IsLCDOrLCDA(SiS_Pr,HwInfo)) ) {
             SiS_ChrontelDoSomething1(SiS_Pr,HwInfo);
          }
       }
d3907 8
a3914 16
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
       	  if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
 	     if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	         (SiS_IsLCDOrLCDA(SiS_Pr,HwInfo)) ) {
	     	SiS_Chrontel701xBLOn(SiS_Pr, HwInfo);
	     	SiS_ChrontelInitTVVSync(SiS_Pr,HwInfo);
             }
       	  }
       } else if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
       	  if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	     if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
		SiS_PanelDelay(SiS_Pr, HwInfo, 1);
		SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x00);
	     }
	  }
       }
d3916 1
a3916 1
#endif  /* SIS315H */
d3918 11
a3928 3
    } /* 310 series */

  }  /* LVDS */
d3930 1
d3933 4
a3936 9
/*********************************************/
/*         SET PART 1 REGISTER GROUP         */
/*********************************************/

/********** Set CRT2 OFFSET / PITCH **********/
static void
SiS_SetCRT2Offset(SiS_Private *SiS_Pr,USHORT ModeNo,
                  USHORT ModeIdIndex ,USHORT RefreshRateTableIndex,
	          PSIS_HW_INFO HwInfo)
d3938 2
a3939 2
  USHORT offset;
  UCHAR temp;
d3941 4
a3944 1
  if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) return;
d3946 2
a3947 2
  offset = SiS_GetOffset(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                         HwInfo);
d3949 176
a4124 2
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
     SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) offset >>= 1;
d4126 46
a4171 7
  temp = (UCHAR)(offset & 0xFF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x07,temp);
  temp = (UCHAR)(offset >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x09,temp);
  temp = (UCHAR)(((offset >> 3) & 0xFF) + 1);
  if(offset % 8) temp++;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x03,temp);
d4174 3
a4176 4
/************* Set CRT2 Sync *************/
static void
SiS_SetCRT2Sync(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT RefreshRateTableIndex,
                PSIS_HW_INFO HwInfo)
d4178 8
a4185 1
  USHORT tempah=0,tempbl,infoflag;
d4187 9
a4195 1
  tempbl = 0xC0;
d4198 1
a4198 1
     infoflag = SiS_Pr->CInfoFlag;
d4200 9
a4208 2
     infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
  }
d4210 1
a4210 1
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {					/* LVDS */
d4212 21
a4232 5
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        tempah = 0;
     } else if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (SiS_Pr->SiS_LCDInfo & LCDSync)) {
        tempah = SiS_Pr->SiS_LCDInfo;
     } else tempah = infoflag >> 8;
d4234 1
a4234 1
     tempah &= 0xC0;
d4236 41
a4276 2
     tempah |= 0x20;
     if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
d4278 1
a4278 6
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
           (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
	   tempah |= 0xc0;
        }
     }
d4280 20
a4299 10
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        if(HwInfo->jChipType >= SIS_315H) {
           tempah >>= 3;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xE7,tempah);
        } else {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,0xe0);
        }
     } else {
        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
     }
d4301 4
a4304 1
  } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
d4306 37
a4342 1
     if(HwInfo->jChipType < SIS_315H) {
d4344 5
a4348 1
#ifdef SIS300  /* ---- 300 series --- */
d4350 3
a4352 1
        if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {			/* 630 - 301B(-DH) */
d4354 14
a4367 7
	   tempah = infoflag >> 8;
           if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	      if(SiS_Pr->SiS_LCDInfo & LCDSync) {
	         tempah = SiS_Pr->SiS_LCDInfo;
              }
           }
           tempah &= 0xC0;
d4369 21
a4389 2
           tempah |= 0x20;
           if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
d4391 50
a4440 11
 	   tempah &= 0x3f;
  	   tempah |= tempbl;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);

        } else {							/* 630 - 301 */

           tempah = infoflag >> 8;
           tempah &= 0xC0;
           tempah |= 0x20;
	   if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
d4442 46
d4489 1
d4491 1
a4491 1
#endif /* SIS300 */
d4493 3
a4495 1
     } else {
d4497 10
a4506 1
#ifdef SIS315H  /* ------- 315 series ------ */
d4508 20
a4527 1
        if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {	  		/* 315 - 30xLV */
d4529 1
a4529 9
	   if(((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) &&
	       (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)) ||
	      ((SiS_Pr->SiS_CustomT == CUT_CLEVO1400)  &&
	       (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050))) {
	      tempah = infoflag >> 8;
	   } else {
              tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
	   }
	   tempah &= 0xC0;
d4531 1
a4531 15
           tempah |= 0x20;
           if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);

        } else {							/* 315 - 301, 301B */

           tempah = infoflag >> 8;
	   if(!SiS_Pr->UseCustomMode) {
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	         if(SiS_Pr->SiS_LCDInfo & LCDSync) {
	            tempah = SiS_Pr->SiS_LCDInfo;
	         }
	      }
	   }
	   tempah &= 0xC0;
d4533 5
a4537 2
           tempah |= 0x20;
           if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
d4539 1
a4539 6
	   if(SiS_Pr->SiS_VBType & VB_NoLCD) {			/* TEST, imitate BIOS bug */
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	         tempah |= 0xc0;
	      }
	   }
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
d4541 19
a4559 3
        }
#endif  /* SIS315H */
      }
d4561 2
d4565 3
a4567 5
/******** Set CRT2 FIFO on 300/630/730 *******/
#ifdef SIS300
static void
SiS_SetCRT2FIFO_300(SiS_Private *SiS_Pr,USHORT ModeNo,
                    PSIS_HW_INFO HwInfo)
d4569 5
a4573 46
  UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
  USHORT temp,index;
  USHORT modeidindex,refreshratetableindex;
  USHORT VCLK=0,MCLK,colorth=0,data2=0;
  USHORT tempal, tempah, tempbx, tempcl, tempax;
  USHORT CRT1ModeNo,CRT2ModeNo;
  USHORT SelectRate_backup;
  ULONG  data,eax;
  const UCHAR  LatencyFactor[] = {
  	97, 88, 86, 79, 77, 00,       /*; 64  bit    BQ=2   */
        00, 87, 85, 78, 76, 54,       /*; 64  bit    BQ=1   */
        97, 88, 86, 79, 77, 00,       /*; 128 bit    BQ=2   */
        00, 79, 77, 70, 68, 48,       /*; 128 bit    BQ=1   */
        80, 72, 69, 63, 61, 00,       /*; 64  bit    BQ=2   */
        00, 70, 68, 61, 59, 37,       /*; 64  bit    BQ=1   */
        86, 77, 75, 68, 66, 00,       /*; 128 bit    BQ=2   */
        00, 68, 66, 59, 57, 37        /*; 128 bit    BQ=1   */
  };
  const UCHAR  LatencyFactor730[] = {
         69, 63, 61,
	 86, 79, 77,
	103, 96, 94,
	120,113,111,
	137,130,128,    /* <-- last entry, data below */
	137,130,128,	/* to avoid using illegal values */
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
  };
  const UCHAR ThLowB[]   = {
  	81, 4, 72, 6, 88, 8,120,12,
        55, 4, 54, 6, 66, 8, 90,12,
        42, 4, 45, 6, 55, 8, 75,12
  };
  const UCHAR ThTiming[] = {
  	1, 2, 2, 3, 0, 1, 1, 2
  };

  SelectRate_backup = SiS_Pr->SiS_SelectCRT2Rate;
d4575 2
a4576 1
  if(!SiS_Pr->CRT1UsesCustomMode) {
d4578 1
a4578 5
     CRT1ModeNo = SiS_Pr->SiS_CRT1Mode;                                 	/* get CRT1 ModeNo */
     SiS_SearchModeID(SiS_Pr, &CRT1ModeNo, &modeidindex);
     SiS_Pr->SiS_SetFlag &= (~ProgrammingCRT2);
     SiS_Pr->SiS_SelectCRT2Rate = 0;
     refreshratetableindex = SiS_GetRatePtr(SiS_Pr, CRT1ModeNo, modeidindex, HwInfo);
d4580 5
a4584 9
     if(CRT1ModeNo >= 0x13) {
        index = SiS_Pr->SiS_RefIndex[refreshratetableindex].Ext_CRTVCLK;
        index &= 0x3F;
        VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;				/* Get VCLK */

	colorth = SiS_GetColorDepth(SiS_Pr,CRT1ModeNo,modeidindex); 	/* Get colordepth */
        colorth >>= 1;
        if(!colorth) colorth++;
     }
d4588 55
a4642 14
     CRT1ModeNo = 0xfe;
     VCLK = SiS_Pr->CSRClock_CRT1;						/* Get VCLK */
     data2 = (SiS_Pr->CModeFlag_CRT1 & ModeInfoFlag) - 2;
     switch(data2) {								/* Get color depth */
        case 0 : colorth = 1; break;
        case 1 : colorth = 1; break;
        case 2 : colorth = 2; break;
        case 3 : colorth = 2; break;
        case 4 : colorth = 3; break;
        case 5 : colorth = 4; break;
        default: colorth = 2;
     }

  }
a4643 3
  if(CRT1ModeNo >= 0x13) {
    if(HwInfo->jChipType == SIS_300) {
       index = SiS_GetReg(SiS_Pr->SiS_P3c4,0x3A);
a4644 4
       index = SiS_GetReg(SiS_Pr->SiS_P3c4,0x1A);
    }
    index &= 0x07;
    MCLK = SiS_Pr->SiS_MCLKData_0[index].CLOCK;				/* Get MCLK */
d4646 14
a4659 1
    data2 = (colorth * VCLK) / MCLK;
d4661 1
a4661 5
    temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
    temp = ((temp & 0x00FF) >> 6) << 1;
    if(temp == 0) temp = 1;
    temp <<= 2;
    temp &= 0xff;
d4663 1
a4663 1
    data2 = temp - data2;
d4665 4
a4668 6
    if((28 * 16) % data2) {
      	data2 = (28 * 16) / data2;
      	data2++;
    } else {
      	data2 = (28 * 16) / data2;
    }
d4670 4
a4673 1
    if(HwInfo->jChipType == SIS_300) {
d4675 2
a4676 19
	tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x18);
	tempah &= 0x62;
	tempah >>= 1;
	tempal = tempah;
	tempah >>= 3;
	tempal |= tempah;
	tempal &= 0x07;
	tempcl = ThTiming[tempal];
	tempbx = SiS_GetReg(SiS_Pr->SiS_P3c4,0x16);
	tempbx >>= 6;
	tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
	tempah >>= 4;
	tempah &= 0x0c;
	tempbx |= tempah;
	tempbx <<= 1;
	tempal = ThLowB[tempbx + 1];
	tempal *= tempcl;
	tempal += ThLowB[tempbx];
	data = tempal;
d4678 2
a4679 1
    } else if(HwInfo->jChipType == SIS_730) {
d4681 4
a4684 9
#ifndef LINUX_XF86
       SiS_SetRegLong(0xcf8,0x80000050);
       eax = SiS_GetRegLong(0xcfc);
#else
       eax = pciReadLong(0x00000000, 0x50);
#endif
       tempal = (USHORT)(eax >> 8);
       tempal &= 0x06;
       tempal <<= 5;
d4686 8
a4693 9
#ifndef LINUX_XF86
       SiS_SetRegLong(0xcf8,0x800000A0);
       eax = SiS_GetRegLong(0xcfc);
#else
       eax = pciReadLong(0x00000000, 0xA0);
#endif
       temp = (USHORT)(eax >> 28);
       temp &= 0x0F;
       tempal |= temp;
d4695 8
a4702 8
       tempbx = tempal;   /* BIOS BUG (2.04.5d, 2.04.6a use ah here, which is unset!) */
       tempbx = 0;        /* -- do it like the BIOS anyway... */
       tempax = tempbx;
       tempbx &= 0xc0;
       tempbx >>= 6;
       tempax &= 0x0f;
       tempax *= 3;
       tempbx += tempax;
d4704 5
a4708 4
       data = LatencyFactor730[tempbx];
       data += 15;
       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
       if(!(temp & 0x80)) data += 5;
d4710 9
a4718 1
    } else {
d4720 1
a4720 3
       index = 0;
       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
       if(temp & 0x0080) index += 12;
d4722 1
a4722 12
#ifndef LINUX_XF86
       SiS_SetRegLong(0xcf8,0x800000A0);
       eax = SiS_GetRegLong(0xcfc);
#else
       /* We use pci functions X offers. We use tag 0, because
        * we want to read/write to the host bridge (which is always
        * 00:00.0 on 630, 730 and 540), not the VGA device.
        */
       eax = pciReadLong(0x00000000, 0xA0);
#endif
       temp = (USHORT)(eax >> 24);
       if(!(temp&0x01)) index += 24;
d4724 1
a4724 8
#ifndef LINUX_XF86
       SiS_SetRegLong(0xcf8,0x80000050);
       eax = SiS_GetRegLong(0xcfc);
#else
       eax = pciReadLong(0x00000000, 0x50);
#endif
       temp=(USHORT)(eax >> 24);
       if(temp & 0x01) index += 6;
d4726 1
a4726 2
       temp = (temp & 0x0F) >> 1;
       index += temp;
d4728 1
a4728 5
       data = LatencyFactor[index];
       data += 15;
       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
       if(!(temp & 0x80)) data += 5;
    }
d4730 17
a4746 1
    data += data2;				/* CRT1 Request Period */
d4748 1
a4748 2
    SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
    SiS_Pr->SiS_SelectCRT2Rate = SelectRate_backup;
d4750 21
a4770 1
    if(!SiS_Pr->UseCustomMode) {
d4772 1
a4772 2
       CRT2ModeNo = ModeNo;
       SiS_SearchModeID(SiS_Pr, &CRT2ModeNo, &modeidindex);
d4774 1
a4774 1
       refreshratetableindex = SiS_GetRatePtr(SiS_Pr, CRT2ModeNo, modeidindex, HwInfo);
d4776 1
a4776 3
       index = SiS_GetVCLK2Ptr(SiS_Pr,CRT2ModeNo,modeidindex,
                               refreshratetableindex,HwInfo);
       VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;                         	/* Get VCLK  */
d4778 1
a4778 7
       if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) || (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
          if((ROMAddr) && SiS_Pr->SiS_UseROM) {
	     if(ROMAddr[0x220] & 0x01) {
                VCLK = ROMAddr[0x229] | (ROMAddr[0x22a] << 8);
	     }
          }
       }
d4780 3
a4782 1
    } else {
d4784 1
a4784 2
       CRT2ModeNo = 0xfe;
       VCLK = SiS_Pr->CSRClock;							/* Get VCLK */
d4786 7
a4792 1
    }
d4794 1
a4794 3
    colorth = SiS_GetColorDepth(SiS_Pr,CRT2ModeNo,modeidindex);   	/* Get colordepth */
    colorth >>= 1;
    if(!colorth) colorth++;
d4796 5
a4800 7
    data = data * VCLK * colorth;
    if(data % (MCLK << 4)) {
      	data = data / (MCLK << 4);
      	data++;
    } else {
      	data = data / (MCLK << 4);
    }
d4802 1
a4802 2
    if(data <= 6) data = 6;
    if(data > 0x14) data = 0x14;
d4804 1
a4804 18
    temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x01);
    if(HwInfo->jChipType == SIS_300) {
       if(data <= 0x0f) temp = (temp & (~0x1F)) | 0x13;
       else             temp = (temp & (~0x1F)) | 0x16;
       if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
       		temp = (temp & (~0x1F)) | 0x13;
       }
    } else {
       if( ( (HwInfo->jChipType == SIS_630) ||
             (HwInfo->jChipType == SIS_730) )  &&
           (HwInfo->jChipRevision >= 0x30) ) /* 630s or 730(s?) */
      {
	  temp = (temp & (~0x1F)) | 0x1b;
      } else {
	  temp = (temp & (~0x1F)) | 0x16;
      }
    }
    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x01,0xe0,temp);
d4806 1
a4806 6
    if( (HwInfo->jChipType == SIS_630) &&
        (HwInfo->jChipRevision >= 0x30) ) /* 630s, NOT 730 */
    {
   	if(data > 0x13) data = 0x13;
    }
    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x02,0xe0,data);
d4808 1
a4808 1
  } else {  /* If mode <= 0x13, we just restore everything */
d4810 10
a4819 2
    SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
    SiS_Pr->SiS_SelectCRT2Rate = SelectRate_backup;
d4821 1
a4821 3
  }
}
#endif
d4823 10
a4832 9
/**** Set CRT2 FIFO on 315/330 series ****/
#ifdef SIS315H
static void
SiS_SetCRT2FIFO_310(SiS_Private *SiS_Pr)
{
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x01,0x3B);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x02,~0x3F,0x04);
}
#endif
d4834 1
a4834 9
/*************** Set LCD-A ***************/
#ifdef SIS315H
static void
SiS_SetGroup1_LCDA(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                   PSIS_HW_INFO HwInfo, USHORT RefreshRateTableIndex)
{
  USHORT modeflag,resinfo;
  USHORT push2,tempax,tempbx,tempcx,temp;
  ULONG tempeax=0,tempebx,tempecx,tempvcfact;
d4836 21
a4856 23
  if(IS_SIS330) {
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x10);			/* Xabre 1.01.03 */
  } else if(IS_SIS740) {
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {					/* 740/LVDS */
        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xfb,0x04);
	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x03);
     } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
        SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x10);			/* 740/301LV, 301BDH */
     }
  } else {
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {					/* 650/LVDS */
        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xfb,0x04);
	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x00);
     } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
        SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2D,0x0f);			/* 650/30xLv 1.10.6s */
	if(SiS_Pr->SiS_VBType & VB_SIS301C) {
	   if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) ||
	      (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)) {
	      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x20);
	   }
	}
     }
  }
d4858 1
a4858 10
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }
d4860 1
a4860 1
  tempax = SiS_Pr->SiS_LCDHDES;
d4862 8
a4869 4
  temp = (tempax & 0x0007);                        		/* BPLHDESKEW[2:0]   */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1A,temp);
  temp = (tempax >> 3) & 0x00FF;                               	/* BPLHDESKEW[10:3]  */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,temp);
d4871 1
a4871 4
  tempbx = SiS_Pr->SiS_HDE;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
     tempbx = SiS_Pr->PanelXRes;
  }
d4873 3
a4875 2
  tempax += tempbx;	                                    	/* HDE + HSKEW = lcdhdee  */
  if(tempax >= SiS_Pr->SiS_HT) tempax -= SiS_Pr->SiS_HT;
d4877 7
a4883 21
  temp = tempax;
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(temp & 0x07) temp += 8;
  }
  temp >>= 3;                                        		/* BPLHDEE  */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,temp);

  tempcx = (SiS_Pr->SiS_HT - tempbx) >> 2;     	            	/* (HT-HDE) / 4  */

  /* 650/30xLV 1.10.6s, 740/LVDS */
  if( ((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) ||
      ((SiS_Pr->SiS_IF_DEF_LVDS == 1) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) ) {
     if((SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) &&
        (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_PanelCustom)) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)        tempcx = 0x28;
 	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)  tempcx = 0x18;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) tempcx = 0x30;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) tempcx = 0x40;
	else                                                          tempcx = 0x30;
     }
  }
d4885 1
a4885 2
  tempcx += tempax;  	                                  	/* lcdhrs  */
  if(tempcx >= SiS_Pr->SiS_HT) tempcx -= SiS_Pr->SiS_HT;
d4887 1
a4887 2
  temp = (tempcx >> 3) & 0x00FF;				/* BPLHRS */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,temp);
a4888 23
  temp += 10;
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
	   temp += 6;
	   if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel800x600) {
	      temp++;
	      if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1024x768) {
	         temp += 7;
		 if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1600x1200) {
		    temp -= 10;
		 }
	      }
	   }
	}
     }
  } else if(SiS_Pr->SiS_VBType & VB_SIS301C) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)  temp += 7;
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) temp += 4;
  }
  temp &= 0x1F;
  temp |= ((tempcx & 0x07) << 5);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,temp);
d4890 1
a4890 4
  tempax = SiS_Pr->PanelYRes;
  if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
     tempax = SiS_Pr->SiS_VGAVDE;
  }
d4892 16
a4907 2
  tempbx = SiS_Pr->SiS_LCDVDES + tempax;
  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;
d4909 2
a4910 1
  push2 = tempbx;
d4912 2
a4913 1
  tempcx = (SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE) >> 2;
d4915 1
a4915 13
  if( ((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) ||
      ((SiS_Pr->SiS_IF_DEF_LVDS == 1) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) ) {
     if((SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) &&
        (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_PanelCustom)) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)         tempcx = 1;
   	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)   tempcx = 3;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)   tempcx = 3;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)  tempcx = 1;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)  tempcx = 1;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)  tempcx = 1;
	else                                                           tempcx = 0x0057;
     }
  }
d4917 1
a4917 5
  tempbx += tempcx;
  if(SiS_Pr->SiS_VBType & VB_SISVB) tempbx++;
  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;	/* BPLVRS  */
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,temp);
d4919 1
a4919 23
  tempcx >>= 3;
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)         tempcx = 3;
   	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)   tempcx = 5;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)   tempcx = 5;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)  tempcx = 5;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)  tempcx = 2;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)  tempcx = 2;
     }
  } else if(SiS_Pr->SiS_VBType & VB_SIS301C) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)           tempcx = 5;
     else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)     tempcx = 2;
  }
  tempcx += tempbx;
  tempcx++;                                                	/* BPLVRE  */
  temp = tempcx & 0x000F;
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(!(SiS_Pr->SiS_VBType & VB_SIS301C)) {
        temp |= 0xC0;
     }
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0xF0,temp);
d4921 4
a4924 15
  temp = ((tempbx >> 8) & 0x07) << 3;
  if(SiS_Pr->SiS_VGAVDE != SiS_Pr->SiS_VDE) temp |= 0x40;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)   temp |= 0x40;
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     /* Don't check Part1Port,0x00 -> is not being set if LCDA! */
     /* We check SR06 instead here: */
     if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
        if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x06) & 0x10) temp |= 0x80;
     }
  } else {
     if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
        if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x01) temp |= 0x80;
     }
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1A,0x07,temp);
d4926 1
a4926 1
  tempbx = push2;                                      		/* BPLVDEE */
d4928 1
a4928 10
  tempcx = SiS_Pr->SiS_LCDVDES;                        		/* NPLVDES */
  if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
        if(resinfo == SIS_RI_800x600) tempcx++;
     }
  }
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
     tempbx = tempcx = SiS_Pr->SiS_VGAVDE;
     tempbx--;
  }
d4930 1
a4930 7
  temp = ((tempbx >> 8) & 0x07) << 3;
  temp = temp | ((tempcx >> 8) & 0x07);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1D,temp);
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1C,temp);
  temp = tempcx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1B,temp);
d4932 1
a4932 6
  tempeax = SiS_Pr->SiS_VGAVDE << 18;
  tempebx = SiS_Pr->SiS_VDE;
  temp = (USHORT)(tempeax % tempebx);
  tempeax = tempeax / tempebx;
  if(temp) tempeax++;
  tempvcfact = tempeax;
d4934 1
a4934 2
  temp = (USHORT)(tempeax & 0x00FF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x37,temp);
d4936 6
a4941 2
  temp = (USHORT)((tempeax & 0x00FF00) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x36,temp);
d4943 2
a4944 3
  temp = (USHORT)((tempeax & 0x00030000) >> 16);
  if(SiS_Pr->SiS_VDE == SiS_Pr->SiS_VGAVDE) temp |= 0x04;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x35,temp);
d4946 3
a4948 11
  if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) {
     temp = (USHORT)(tempeax & 0x00FF);
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x3c,temp);
     temp = (USHORT)((tempeax & 0x00FF00) >> 8);
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x3b,temp);
     temp = (USHORT)(((tempeax & 0x00030000) >> 16) << 6);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x3a,0x3f,temp);
     temp = 0;
     if(SiS_Pr->SiS_VDE != SiS_Pr->SiS_VGAVDE) temp |= 0x08;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x30,0xf3,temp);
  }
d4950 1
a4950 11
  tempeax = SiS_Pr->SiS_VGAHDE << 16;
  tempebx = SiS_Pr->SiS_HDE;
  temp = tempeax % tempebx;
  tempeax /= tempebx;
  if(temp) tempeax++;
  if(tempebx == SiS_Pr->SiS_VGAHDE) tempeax = 0xFFFF;
  tempecx = tempeax;
  tempeax = ((SiS_Pr->SiS_VGAHDE << 16) / tempecx) - 1;
  tempecx = (tempecx << 16) | (tempeax & 0xFFFF);
  temp = (USHORT)(tempecx & 0x00FF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1F,temp);
d4952 8
a4959 2
  tempeax = (SiS_Pr->SiS_VGAVDE << 18) / tempvcfact;
  tempbx = (USHORT)(tempeax & 0x0FFFF);
d4961 1
a4961 1
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) tempbx--;
d4963 1
a4963 1
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)  tempbx = 1;
d4965 1
a4965 3
  temp = ((tempbx >> 8) & 0x07) << 3;
  temp = temp | ((tempecx >> 8) & 0x07);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x20,temp);
d4967 1
a4967 2
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x21,temp);
d4969 3
a4971 4
  tempecx >>= 16;   	                                  	/* BPLHCFACT  */
  if(modeflag & HalfDCLK) tempecx >>= 1;
  temp = (USHORT)((tempecx & 0x0000FF00) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x22,temp);
d4973 10
a4982 2
  temp = (USHORT)(tempecx & 0x000000FF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x23,temp);
d4984 3
a4986 5
  if((SiS_Pr->SiS_IF_DEF_LVDS == 1) || (SiS_Pr->SiS_VBInfo & VB_SIS301LV302LV)) {
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1e,0x20);
  }
}
#endif  /* SIS 315 */
d4988 1
a4988 4
static USHORT
SiS_GetVGAHT2(SiS_Private *SiS_Pr)
{
  ULONG tempax,tempbx;
d4990 3
a4992 5
  tempbx = ((SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE) * SiS_Pr->SiS_RVBHCMAX) & 0xFFFF;
  tempax = (SiS_Pr->SiS_VT - SiS_Pr->SiS_VDE) * SiS_Pr->SiS_RVBHCFACT;
  tempax = (tempax * SiS_Pr->SiS_HT) / tempbx;
  return((USHORT) tempax);
}
d4994 6
a4999 9
/******* Set Part 1 / SiS bridge *********/
static void
SiS_SetGroup1_301(SiS_Private *SiS_Pr, USHORT ModeNo,USHORT ModeIdIndex,
                  PSIS_HW_INFO HwInfo,USHORT RefreshRateTableIndex)
{
  USHORT  push1,push2;
  USHORT  tempax,tempbx,tempcx,temp;
  USHORT  resinfo,modeflag;
  unsigned char p1_7, p1_8;
d5001 1
a5001 10
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }
d5003 1
a5003 1
  /* The following is only done if bridge is in slave mode: */
d5005 4
a5008 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x03,0xff);                  /* set MAX HT */
d5010 5
a5014 1
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)  modeflag |= Charx8Dot;
d5016 1
a5016 2
  if(modeflag & Charx8Dot) tempcx = 0x08;
  else                     tempcx = 0x09;
d5018 1
a5018 4
  tempax = SiS_Pr->SiS_VGAHDE;                                 	/* 0x04 Horizontal Display End */
  if(modeflag & HalfDCLK) tempax >>= 1;
  tempax = ((tempax / tempcx) - 1) & 0xff;
  tempbx = tempax;
d5020 1
a5020 2
  temp = tempax;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x04,temp);
d5022 8
a5029 9
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
        temp += 2;
     }
  }
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     if(resinfo == SIS_RI_800x600) temp -= 2;
  }
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x05,temp);                 /* 0x05 Horizontal Display Start */
d5031 6
a5036 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x06,0x03);                 /* 0x06 Horizontal Blank end     */
d5038 4
a5041 6
  tempax = 0xFFFF;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) tempax = SiS_GetVGAHT2(SiS_Pr);
  if(tempax >= SiS_Pr->SiS_VGAHT) tempax = SiS_Pr->SiS_VGAHT;
  if(modeflag & HalfDCLK)         tempax >>= 1;
  tempax = (tempax / tempcx) - 5;
  tempcx = tempax;
d5043 7
a5049 49
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     temp = tempcx - 1;
     if(!(modeflag & HalfDCLK)) {
        temp -= 6;
        if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
           temp -= 2;
           if(ModeNo > 0x13) temp -= 10;
        }
     }
  } else {
     tempcx = (tempcx + tempbx) >> 1;
     temp = (tempcx & 0x00FF) + 2;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        temp--;
        if(!(modeflag & HalfDCLK)) {
           if((modeflag & Charx8Dot)) {
              temp += 4;
              if(SiS_Pr->SiS_VGAHDE >= 800) temp -= 6;
              if(HwInfo->jChipType >= SIS_315H) {
	         if(SiS_Pr->SiS_VGAHDE == 800) temp += 2;
              }
           }
        }
     } else {
        if(!(modeflag & HalfDCLK)) {
           temp -= 4;
           if((SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x960) &&
	      (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1600x1200)) {
              if(SiS_Pr->SiS_VGAHDE >= 800) {
                 temp -= 7;
	         if(HwInfo->jChipType < SIS_315H) {
                    if(SiS_Pr->SiS_ModeType == ModeEGA) {
                       if(SiS_Pr->SiS_VGAVDE == 1024) {
                          temp += 15;
                          if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024)
		  	     temp += 7;
                       }
                    }
	         }
		 if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1400x1050) {
                    if(SiS_Pr->SiS_VGAHDE >= 1280) {
                       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) temp += 28;
		    }
                 }
              }
           }
        }
     }
  }
d5051 7
a5057 2
  p1_7 = temp;
  p1_8 = 0x00;
d5059 1
a5059 37
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
        if(ModeNo <= 0x01) {
	   p1_7 = 0x2a;
	   if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) p1_8 = 0x61;
	   else 	      			p1_8 = 0x41;
	} else if(SiS_Pr->SiS_ModeType == ModeText) {
	   if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) p1_7 = 0x54;
	   else 	    			p1_7 = 0x55;
	   p1_8 = 0x00;
	} else if(ModeNo <= 0x13) {
	   if(modeflag & HalfDCLK) {
	      if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
		 p1_7 = 0x30;
		 p1_8 = 0x03;
	      } else {
	 	 p1_7 = 0x2f;
		 p1_8 = 0x02;
	      }
	   } else {
	      p1_7 = 0x5b;
	      p1_8 = 0x03;
	   }
	} else if( ((HwInfo->jChipType >= SIS_315H) &&
	            ((ModeNo == 0x50) || (ModeNo == 0x56) || (ModeNo == 0x53))) ||
	           ((HwInfo->jChipType < SIS_315H) &&
		    (resinfo == SIS_RI_320x200 || resinfo == SIS_RI_320x240)) ) {
	   if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
	      p1_7 = 0x30,
	      p1_8 = 0x03;
	   } else {
	      p1_7 = 0x2f;
	      p1_8 = 0x03;
	   }
        }
     }
  }
d5061 6
a5066 11
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
     if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p|TVSetYPbPr750p)) {
        p1_7 = 0x63;
	if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) p1_7 = 0x55;
     }
     if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
        if(!(modeflag & HalfDCLK)) {
	   p1_7 = 0xb2;
	   if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
	      p1_7 = 0xab;
	   }
d5068 7
a5074 3
     } else {
        if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) {
	   if(modeflag & HalfDCLK) p1_7 = 0x30;
a5075 2
     }
  }
d5077 7
a5083 2
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x07,p1_7);			/* 0x07 Horizontal Retrace Start */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x08,p1_8);			/* 0x08 Horizontal Retrace End   */
d5085 1
a5085 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x03);                	/* 0x18 SR08 (FIFO Threshold?)   */
d5087 7
a5093 1
  SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x19,0xF0);
d5095 8
a5102 31
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x09,0xFF);                	/* 0x09 Set Max VT    */

  tempcx = 0x121;
  tempbx = SiS_Pr->SiS_VGAVDE;                               	/* 0x0E Vertical Display End */
  if     (tempbx == 357) tempbx = 350;
  else if(tempbx == 360) tempbx = 350;
  else if(tempbx == 375) tempbx = 350;
  else if(tempbx == 405) tempbx = 400;
  else if(tempbx == 420) tempbx = 400;
  else if(tempbx == 525) tempbx = 480;
  push2 = tempbx;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
      	if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
           if     (tempbx == 350) tempbx += 5;
           else if(tempbx == 480) tempbx += 5;
      	}
     }
  }
  tempbx -= 2;
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x10,temp);        		/* 0x10 vertical Blank Start */

  tempbx = push2;
  tempbx--;
  temp = tempbx & 0x00FF;
#if 0
  /* Missing code from 630/301B 2.04.5a and 650/302LV 1.10.6s (calles int 2f) */
  if(xxx()) {
      if(temp == 0xdf) temp = 0xda;
  }
d5104 8
a5111 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0E,temp);
d5113 1
a5113 12
  temp = 0;
  if(modeflag & DoubleScanMode) temp |= 0x80;
  if(HwInfo->jChipType >= SIS_661) {
     if(tempbx & 0x0200)        temp |= 0x20;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x0B,0x5F,temp);
     if(tempbx & 0x0100)  tempcx |= 0x000a;
     if(tempbx & 0x0400)  tempcx |= 0x1200;
  } else {
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0B,temp);
     if(tempbx & 0x0100)  tempcx |= 0x0002;
     if(tempbx & 0x0400)  tempcx |= 0x0600;
  }
d5115 1
a5115 1
  if(tempbx & 0x0200)  tempcx |= 0x0040;
d5117 1
a5117 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x11,0x00);                	/* 0x11 Vertical Blank End */
d5119 1
a5119 35
  tempax = (SiS_Pr->SiS_VGAVT - tempbx) >> 2;

  if((ModeNo > 0x13) || (HwInfo->jChipType < SIS_315H)) {
     if(resinfo != SIS_RI_1280x1024) {
	tempbx += (tempax << 1);
     }
  } else if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1400x1050) {
	tempbx += (tempax << 1);
     }
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     tempbx -= 10;
  } else {
     if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
        if(SiS_Pr->SiS_TVMode & TVSetPAL) {
           tempbx += 40;
	   if(HwInfo->jChipType >= SIS_315H) {
	      if(SiS_Pr->SiS_VGAHDE == 800) tempbx += 10;
	   }
	}
     }
  }
  tempax >>= 2;
  tempax++;
  tempax += tempbx;
  push1 = tempax;
  if(SiS_Pr->SiS_TVMode & TVSetPAL) {
     if(tempbx <= 513)  {
     	if(tempax >= 513) tempbx = 513;
     }
  }
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0C,temp);			/* 0x0C Vertical Retrace Start */
d5121 10
a5130 3
  tempbx--;
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x10,temp);
d5132 1
a5132 1
  if(tempbx & 0x0100) tempcx |= 0x0008;
d5134 1
a5134 4
  if(tempbx & 0x0200) {
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x0B,0x20);
  }
  tempbx++;
d5136 1
a5136 7
  if(tempbx & 0x0100) tempcx |= 0x0004;
  if(tempbx & 0x0200) tempcx |= 0x0080;
  if(tempbx & 0x0400) {
     if(HwInfo->jChipType >= SIS_661)        tempcx |= 0x0800;
     else if(SiS_Pr->SiS_VBType & VB_SIS301) tempcx |= 0x0800;
     else                                    tempcx |= 0x0C00;
  }
d5138 1
a5138 3
  tempbx = push1;
  temp = tempbx & 0x000F;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0D,temp);        		/* 0x0D vertical Retrace End */
d5140 1
a5140 1
  if(tempbx & 0x0010) tempcx |= 0x2000;
d5142 32
a5173 2
  temp = tempcx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0A,temp);              	/* 0x0A CR07 */
d5175 1
a5175 2
  temp = (tempcx & 0xFF00) >> 8;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,temp);              	/* 0x17 SR0A */
d5177 42
a5218 5
  tempax = modeflag;
  temp = (tempax & 0xFF00) >> 8;
  temp = (temp >> 1) & 0x09;
  if(!(SiS_Pr->SiS_VBType & VB_SIS301)) temp |= 0x01;		/* Always 8 dotclock */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,temp);              	/* 0x16 SR01 */
d5220 2
a5221 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0F,0x00);              	/* 0x0F CR14 */
d5223 1
a5223 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x12,0x00);              	/* 0x12 CR17 */
d5225 1
a5225 7
  temp = 0x00;
  if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
     if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x01) {
	temp = 0x80;
     }
  }
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1A,temp);                	/* 0x1A SR0E */
d5227 1
a5227 3
  temp = SiS_GetRegByte((USHORT)(SiS_Pr->SiS_P3ca+0x02));
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,temp);
}
d5229 2
a5230 9
/*********** Set Part 1 / LVDS ***********/
static void
SiS_SetGroup1_LVDS(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
 		   PSIS_HW_INFO HwInfo, USHORT RefreshRateTableIndex)
{
  USHORT modeflag, resinfo;
  USHORT push1, push2, tempax, tempbx, tempcx, temp;
#ifdef SIS315H
  USHORT pushcx;
a5231 1
  ULONG  tempeax=0, tempebx, tempecx, tempvcfact=0;
d5233 1
a5233 3
  /* This is not supported on LVDS */
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) return;
  if(SiS_Pr->UseCustomMode) return;
d5235 7
a5241 7
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }
d5243 1
a5243 1
  /* Set up Panel Link */
d5245 1
a5245 1
  /* 1. Horizontal setup */
d5247 1
a5247 1
  tempax = SiS_Pr->SiS_LCDHDES;
d5249 8
a5256 6
  if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
     if( (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) &&
         (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ) {
  	   tempax -= 8;
     }
  }
d5258 13
a5270 1
  tempcx = SiS_Pr->SiS_HT;    				  /* Horiz. Total */
d5272 1
a5272 1
  tempbx = SiS_Pr->SiS_HDE;                               /* Horiz. Display End */
d5274 7
a5280 4
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
     SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) {
     tempbx >>= 1;
  }
d5282 11
a5292 16
  if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        if(SiS_Pr->SiS_IF_DEF_FSTN || SiS_Pr->SiS_IF_DEF_DSTN) {
	   tempbx = SiS_Pr->PanelXRes;
	} else if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
	   tempbx = SiS_Pr->PanelXRes;
	   if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
	      tempbx = 800;
	      if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel800x600) {
	         tempbx = 1024;
	      }
	   }
        }
     }
  }
  tempcx = (tempcx - tempbx) >> 2;		 /* HT-HDE / 4 */
d5294 3
a5296 1
  push1 = tempax;
d5298 1
a5298 1
  tempax += tempbx;
d5300 6
a5305 1
  if(tempax >= SiS_Pr->SiS_HT) tempax -= SiS_Pr->SiS_HT;
d5307 8
a5314 1
  push2 = tempax;
d5316 3
a5318 33
  if((!SiS_Pr->SiS_IF_DEF_FSTN) &&
     (!SiS_Pr->SiS_IF_DEF_DSTN) &&
     (SiS_Pr->SiS_CustomT != CUT_BARCO1366) &&
     (SiS_Pr->SiS_CustomT != CUT_BARCO1024) &&
     (SiS_Pr->SiS_CustomT != CUT_PANEL848)) {
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
           if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
     	      if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)        tempcx = 0x0028;
	      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600)  tempcx = 0x0018;
     	      else if( (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) ||
	            (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) ) {
	  	   if(HwInfo->jChipType < SIS_315H) {
		      if(SiS_Pr->SiS_VBType & VB_SISVB) {
		         tempcx = 0x0017;  /* A901; sometimes 0x0018; */
		      } else {
		         tempcx = 0x0017;
#ifdef TWNEWPANEL
			 tempcx = 0x0018;
#endif
		      }
		   } else {
		      tempcx = 0x0018;
		   }
	      }
	      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)  tempcx = 0x0028;
	      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) tempcx = 0x0030;
	      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) tempcx = 0x0030;
	      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) tempcx = 0x0040;
	   }
        }
     }
  }
d5320 1
a5320 2
  tempcx += tempax;                              /* lcdhrs  */
  if(tempcx >= SiS_Pr->SiS_HT) tempcx -= SiS_Pr->SiS_HT;
d5322 1
a5322 3
  tempax = tempcx >> 3;                          /* BPLHRS */
  temp = tempax & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,temp);		 /* Part1_14h; Panel Link Horizontal Retrace Start  */
d5324 27
a5350 24
  if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
     temp = (tempax & 0x00FF) + 2;
  } else {
     temp = (tempax & 0x00FF) + 10;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        if((!SiS_Pr->SiS_IF_DEF_DSTN) &&
	   (!SiS_Pr->SiS_IF_DEF_FSTN) &&
	   (SiS_Pr->SiS_CustomT != CUT_BARCO1366) &&
	   (SiS_Pr->SiS_CustomT != CUT_BARCO1024) &&
	   (SiS_Pr->SiS_CustomT != CUT_PANEL848)) {
           if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
	      temp += 6;
              if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel800x600) {
	         temp++;
	         if(HwInfo->jChipType >= SIS_315H) {
	            if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1024x768) {
	               temp += 7;
		       if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1600x1200) {
		          temp -= 0x14;
			  if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x768) {
			     temp -= 10;
			  }
		       }
	            }
a5352 4
           }
        }
     }
  }
d5354 16
a5369 6
  temp &= 0x1F;
  temp |= ((tempcx & 0x0007) << 5);
#if 0
  if(SiS_Pr->SiS_IF_DEF_FSTN) temp = 0x20;       /* WRONG? BIOS loads cl, not ah */
#endif
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,temp);    	 /* Part1_15h; Panel Link Horizontal Retrace End/Skew */
d5371 1
a5371 2
  tempbx = push2;
  tempcx = push1;                                /* lcdhdes  */
a5372 2
  temp = (tempcx & 0x0007);                      /* BPLHDESKEW  */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1A,temp);   	 /* Part1_1Ah; Panel Link Vertical Retrace Start (2:0) */
d5374 1
a5374 8
  tempcx >>= 3;                                  /* BPLHDES */
  temp = (tempcx & 0x00FF);
#if 0 /* Not 550 FSTN */
  if(HwInfo->jChipType >= SIS_315H) {
     if(ModeNo == 0x5b) temp--; */
  }
#endif
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,temp);    	 /* Part1_16h; Panel Link Horizontal Display Enable Start  */
d5376 7
a5382 13
  if((HwInfo->jChipType < SIS_315H) ||
     (SiS_Pr->SiS_IF_DEF_FSTN) ||
     (SiS_Pr->SiS_IF_DEF_DSTN)) {
     if(tempbx & 0x07) tempbx += 8;
  }
  tempbx >>= 3;                                  /* BPLHDEE  */
  temp = tempbx & 0x00FF;
#if 0 /* Not 550 FSTN */
  if(HwInfo->jChipType >= SIS_315H) {
     if(ModeNo == 0x5b) temp--;
  }
#endif
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,temp);   	 /* Part1_17h; Panel Link Horizontal Display Enable End  */
d5384 1
a5384 1
  /* 2. Vertical setup */
d5386 3
a5388 7
  if(HwInfo->jChipType < SIS_315H) {
     tempcx = SiS_Pr->SiS_VGAVT;
     tempbx = SiS_Pr->SiS_VGAVDE;
     if((SiS_Pr->SiS_CustomT != CUT_BARCO1366) && (SiS_Pr->SiS_CustomT != CUT_BARCO1024)) {
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
           if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
	      tempbx = SiS_Pr->PanelYRes;
a5389 3
	}
     }
     tempcx -= tempbx;
d5391 3
a5393 1
  } else {
d5395 3
a5397 1
     tempcx = SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE;           /* VGAVT-VGAVDE  */
d5399 8
a5406 1
  }
d5408 1
a5408 2
  tempbx = SiS_Pr->SiS_LCDVDES;	   		 	 	/* VGAVDES  */
  push1 = tempbx;
d5410 6
a5415 1
  tempax = SiS_Pr->SiS_VGAVDE;
a5416 6
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) || (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
        if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
           tempax = 600;
	   if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel800x600) {
	      tempax = 768;
a5417 9
	}
     } else if( (SiS_Pr->SiS_IF_DEF_TRUMPION == 0)   &&
                (!(SiS_Pr->SiS_LCDInfo & LCDPass11)) &&
                ((SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) ||
	         (SiS_Pr->SiS_IF_DEF_FSTN) ||
	         (SiS_Pr->SiS_IF_DEF_DSTN)) ) {
	tempax = SiS_Pr->PanelYRes;
     }
  }
d5419 14
a5432 2
  tempbx += tempax;
  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;
d5434 6
a5439 1
  push2 = tempbx;
d5441 1
a5441 1
  tempcx >>= 1;
d5443 5
a5447 40
  if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) &&
     (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) &&
     (SiS_Pr->SiS_CustomT != CUT_BARCO1366) &&
     (SiS_Pr->SiS_CustomT != CUT_BARCO1024) &&
     (SiS_Pr->SiS_CustomT != CUT_PANEL848)) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) {
	tempcx = 0x0017;
     } else if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        if(SiS_Pr->SiS_IF_DEF_FSTN || SiS_Pr->SiS_IF_DEF_DSTN) {
	   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)         tempcx = 0x0003;
  	   else if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) ||
	           (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)) tempcx = 0x0003;
           else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)  tempcx = 0x0001;
           else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)  tempcx = 0x0001;
	   else 							  tempcx = 0x0057;
        } else  {
     	   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)         tempcx = 0x0001;
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600)   tempcx = 0x0001;
     	   else if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) ||
	           (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768)) {
		   if(HwInfo->jChipType < SIS_315H) {
		      if(SiS_Pr->SiS_VBType & VB_SISVB) {
		         tempcx = 0x0002;   /* A901; sometimes 0x0003; */
		      } else {
			 tempcx = 0x0002;
#ifdef TWNEWPANEL
			 tempcx = 0x0003;
#endif
		      }
		   } else tempcx = 0x0003;
           }
     	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)  tempcx = 0x0003;
     	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) tempcx = 0x0001;
     	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) tempcx = 0x0001;
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) tempcx = 0x0001;
     	   else 							 tempcx = 0x0057;
	}
     }
  }
d5449 1
a5449 1
  tempbx += tempcx;			 	/* BPLVRS  */
d5451 6
a5456 5
  if((HwInfo->jChipType < SIS_315H) ||
     (SiS_Pr->SiS_IF_DEF_FSTN) ||
     (SiS_Pr->SiS_IF_DEF_DSTN)) {
     tempbx++;
  }
d5458 6
a5463 1
  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;
d5465 1
a5465 2
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,temp);       	 /* Part1_18h; Panel Link Vertical Retrace Start  */
d5467 1
a5467 1
  tempcx >>= 3;
d5469 1
a5469 32
  if((!(SiS_Pr->SiS_LCDInfo & LCDPass11)) &&
     (SiS_Pr->SiS_CustomT != CUT_BARCO1366) &&
     (SiS_Pr->SiS_CustomT != CUT_BARCO1024) &&
     (SiS_Pr->SiS_CustomT != CUT_PANEL848)) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        if( (HwInfo->jChipType < SIS_315H) &&
            (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) )     tempcx = 0x0001;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2)  tempcx = 0x0002;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3)  tempcx = 0x0002;
        else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)    tempcx = 0x0003;
        else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600)   tempcx = 0x0005;
        else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768)   tempcx = 0x0005;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)   tempcx = 0x0011;
        else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)  tempcx = 0x0005;
        else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)  tempcx = 0x0002;
        else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)  tempcx = 0x0011;
        else if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480)  {
     		if(HwInfo->jChipType < SIS_315H) {
		   if(SiS_Pr->SiS_VBType & VB_SISVB) {
		      tempcx = 0x0004;   /* A901; Other BIOS sets 0x0005; */
		   } else {
		      tempcx = 0x0004;
#ifdef TWNEWPANEL
		      tempcx = 0x0005;
#endif
		   }
		} else {
		   tempcx = 0x0005;
		}
        }
     }
  }
d5471 1
a5471 10
  tempcx = tempcx + tempbx + 1;                  /* BPLVRE  */
  temp = tempcx & 0x000F;
  if(SiS_Pr->SiS_IF_DEF_FSTN ||
     SiS_Pr->SiS_IF_DEF_DSTN ||
     (SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
     (SiS_Pr->SiS_CustomT == CUT_BARCO1024) ||
     (SiS_Pr->SiS_CustomT == CUT_PANEL848)) {
     temp |= 0x30;
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0xf0,temp); /* Part1_19h; Panel Link Vertical Retrace End (3:0); Misc.  */
d5473 11
a5483 22
  temp = ((tempbx & 0x0700) >> 8) << 3;          /* BPLDESKEW =0 */
  if(SiS_Pr->SiS_IF_DEF_FSTN || SiS_Pr->SiS_IF_DEF_DSTN) {
     if(SiS_Pr->SiS_HDE != 640) {
        if(SiS_Pr->SiS_VGAVDE != SiS_Pr->SiS_VDE)   temp |= 0x40;
     }
  } else if(SiS_Pr->SiS_VGAVDE != SiS_Pr->SiS_VDE)  temp |= 0x40;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)           temp |= 0x40;
  if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
     if(HwInfo->jChipType >= SIS_315H) {
        if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x01) {
           temp |= 0x80;
        }
     } else {
	if( (HwInfo->jChipType == SIS_630) ||
	    (HwInfo->jChipType == SIS_730) ) {
	   if(HwInfo->jChipRevision >= 0x30) {
	      temp |= 0x80;
	   }
	}
     }
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1A,0x87,temp);  /* Part1_1Ah; Panel Link Control Signal (7:3); Vertical Retrace Start (2:0) */
d5485 9
a5493 1
  if(HwInfo->jChipType < SIS_315H) {
d5495 5
a5499 1
#ifdef SIS300      /* 300 series */
d5501 12
a5512 5
     tempeax = SiS_Pr->SiS_VGAVDE << 6;
     temp = (USHORT)(tempeax % (ULONG)SiS_Pr->SiS_VDE);
     tempeax = tempeax / (ULONG)SiS_Pr->SiS_VDE;
     if(temp != 0) tempeax++;
     tempebx = tempeax;                         /* BPLVCFACT  */
d5514 1
a5514 1
     if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)  tempebx = 0x003F;
d5516 1
a5516 2
     temp = (USHORT)(tempebx & 0x00FF);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1E,temp);      /* Part1_1Eh; Panel Link Vertical Scaling Factor */
d5518 1
a5518 1
#endif /* SIS300 */
d5520 6
a5525 1
  } else {
d5527 6
a5532 1
#ifdef SIS315H  /* 315 series */
d5534 2
a5535 5
     if(HwInfo->jChipType == SIS_740) {
        SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x03);
     } else {
	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1E,0x23);
     }
d5537 1
a5537 14
     tempeax = SiS_Pr->SiS_VGAVDE << 18;
     temp = (USHORT)(tempeax % (ULONG)SiS_Pr->SiS_VDE);
     tempeax = tempeax / SiS_Pr->SiS_VDE;
     if(temp != 0) tempeax++;
     tempebx = tempeax;                         /* BPLVCFACT  */
     tempvcfact = tempeax;
     temp = (USHORT)(tempebx & 0x00FF);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x37,temp);      /* Part1_37h; Panel Link Vertical Scaling Factor */
     temp = (USHORT)((tempebx & 0x00FF00) >> 8);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x36,temp);      /* Part1_36h; Panel Link Vertical Scaling Factor */
     temp = (USHORT)((tempebx & 0x00030000) >> 16);
     temp &= 0x03;
     if(SiS_Pr->SiS_VDE == SiS_Pr->SiS_VGAVDE) temp |= 0x04;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x35,temp);      /* Part1_35h; Panel Link Vertical Scaling Factor */
d5539 5
a5543 1
#endif /* SIS315H */
d5545 1
a5545 1
  }
d5547 3
a5549 2
  tempbx = push2;                                  /* BPLVDEE  */
  tempcx = push1;
d5551 5
a5555 1
  push1 = temp;
d5557 3
a5559 15
  if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
     if(!SiS_Pr->SiS_IF_DEF_FSTN && !SiS_Pr->SiS_IF_DEF_DSTN) {
	if(HwInfo->jChipType < SIS_315H) {
	   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
      	      if(resinfo == SIS_RI_1024x600) tempcx++;
	      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
		 if(resinfo == SIS_RI_800x600) tempcx++;
	      }
	   } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
      	      if(resinfo == SIS_RI_800x600)  tempcx++;
	      if(resinfo == SIS_RI_1024x768) tempcx++; /* Doesnt make sense anyway... */
	   } else  if(resinfo == SIS_RI_1024x768) tempcx++;
	} else {
	   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
      	      if(resinfo == SIS_RI_800x600)  tempcx++;
d5561 3
a5563 3
	}
     }
  }
d5565 3
a5567 6
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
     if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
        tempcx = SiS_Pr->SiS_VGAVDE;
        tempbx = SiS_Pr->SiS_VGAVDE - 1;
     }
  }
d5569 1
a5569 3
  temp = ((tempbx & 0x0700) >> 8) << 3;
  temp |= ((tempcx & 0x0700) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1D,temp);     	/* Part1_1Dh; Vertical Display Overflow; Control Signal */
d5571 9
a5579 3
  temp = tempbx & 0x00FF;
  /* if(SiS_Pr->SiS_IF_DEF_FSTN) temp++;  */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1C,temp);      	/* Part1_1Ch; Panel Link Vertical Display Enable End  */
d5581 1
a5581 2
  temp = tempcx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1B,temp);      	/* Part1_1Bh; Panel Link Vertical Display Enable Start  */
d5583 20
a5602 1
  /* 3. Additional horizontal setup (scaling, etc) */
d5604 1
a5604 18
  tempecx = SiS_Pr->SiS_VGAHDE;
  if(HwInfo->jChipType >= SIS_315H) {
     if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
        if(modeflag & HalfDCLK) tempecx >>= 1;
     }
  }
  tempebx = SiS_Pr->SiS_HDE;
  if(tempecx == tempebx) tempeax = 0xFFFF;
  else {
     tempeax = tempecx;
     tempeax <<= 16;
     temp = (USHORT)(tempeax % tempebx);
     tempeax = tempeax / tempebx;
     if(HwInfo->jChipType >= SIS_315H) {
        if(temp) tempeax++;
     }
  }
  tempecx = tempeax;
d5606 1
a5606 14
  if(HwInfo->jChipType >= SIS_315H) {
     tempeax = SiS_Pr->SiS_VGAHDE;
     if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
        if(modeflag & HalfDCLK) tempeax >>= 1;
     }
     tempeax <<= 16;
     tempeax = (tempeax / tempecx) - 1;
  } else {
     tempeax = ((SiS_Pr->SiS_VGAHT << 16) / tempecx) - 1;
  }
  tempecx <<= 16;
  tempecx |= (tempeax & 0xFFFF);
  temp = (USHORT)(tempecx & 0x00FF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1F,temp);  	 /* Part1_1Fh; Panel Link DDA Operational Number in each horiz. line */
d5608 1
a5608 16
  tempbx = SiS_Pr->SiS_VDE;
  if(HwInfo->jChipType >= SIS_315H) {
     tempeax = (SiS_Pr->SiS_VGAVDE << 18) / tempvcfact;
     tempbx = (USHORT)(tempeax & 0x0FFFF);
  } else {
     tempeax = SiS_Pr->SiS_VGAVDE << 6;
     tempbx = push1 & 0x3f;
     if(tempbx == 0) tempbx = 64;
     tempeax /= tempbx;
     tempbx = (USHORT)(tempeax & 0x0FFFF);
  }
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) tempbx--;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA) {
     if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) tempbx = 1;
     else if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480)  tempbx = 1;
  }
d5610 1
a5610 3
  temp = ((tempbx & 0xFF00) >> 8) << 3;
  temp |= (USHORT)((tempecx & 0x0700) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x20,temp);  	/* Part1_20h; Overflow register */
d5612 4
a5615 2
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x21,temp);  	/* Part1_21h; Panel Link Vertical Accumulator Register */
d5617 10
a5626 3
  tempecx >>= 16;                               /* BPLHCFACT  */
  if((HwInfo->jChipType < SIS_315H) || (SiS_Pr->SiS_IF_DEF_FSTN) || (SiS_Pr->SiS_IF_DEF_DSTN)) {
     if(modeflag & HalfDCLK) tempecx >>= 1;
d5628 1
a5628 2
  temp = (USHORT)((tempecx & 0xFF00) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x22,temp);     	/* Part1_22h; Panel Link Horizontal Scaling Factor High */
d5630 4
a5633 2
  temp = (USHORT)(tempecx & 0x00FF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x23,temp);         /* Part1_22h; Panel Link Horizontal Scaling Factor Low */
d5635 5
a5639 1
  /* 630/301B and 630/LVDS do something for 640x480 panels here */
d5641 6
a5646 100
#ifdef SIS315H
  if(SiS_Pr->SiS_IF_DEF_FSTN || SiS_Pr->SiS_IF_DEF_DSTN) {
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x25,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x26,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x27,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x28,0x87);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x29,0x5A);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2A,0x4B);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x44,~0x007,0x03);
     tempax = SiS_Pr->SiS_HDE;                       		/* Blps = lcdhdee(lcdhdes+HDE) + 64 */
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) tempax >>= 1;
     tempax += 64;
     temp = tempax & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x38,temp);
     temp = ((tempax & 0xFF00) >> 8) << 3;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,~0x078,temp);
     tempax += 32;		                     		/* Blpe=lBlps+32 */
     temp = tempax & 0x00FF;
     if(SiS_Pr->SiS_IF_DEF_FSTN) temp = 0;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x39,temp);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3A,0x00);        	/* Bflml=0 */
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x007,0x00);

     tempax = SiS_Pr->SiS_VDE;
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) tempax >>= 1;
     tempax >>= 1;
     temp = tempax & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3B,temp);
     temp = ((tempax & 0xFF00) >> 8) << 3;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x038,temp);

     tempeax = SiS_Pr->SiS_HDE;
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) tempeax >>= 1;
     tempeax <<= 2;                       			/* BDxFIFOSTOP = (HDE*4)/128 */
     tempebx = 128;
     temp = (USHORT)(tempeax % tempebx);
     tempeax = tempeax / tempebx;
     if(temp) tempeax++;
     temp = (USHORT)(tempeax & 0x003F);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x45,~0x0FF,temp);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3F,0x00);         	/* BDxWadrst0 */
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3E,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3D,0x10);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x040,0x00);

     tempax = SiS_Pr->SiS_HDE;
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) tempax >>= 1;
     tempax >>= 4;                        			/* BDxWadroff = HDE*4/8/8 */
     pushcx = tempax;
     temp = tempax & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x43,temp);
     temp = ((tempax & 0xFF00) >> 8) << 3;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x44,~0x0F8,temp);

     tempax = SiS_Pr->SiS_VDE;                             	/* BDxWadrst1 = BDxWadrst0 + BDxWadroff * VDE */
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) tempax >>= 1;
     tempeax = (tempax * pushcx);
     tempebx = 0x00100000 + tempeax;
     temp = (USHORT)tempebx & 0x000000FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x42,temp);
     temp = (USHORT)((tempebx & 0x0000FF00) >> 8);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x41,temp);
     temp = (USHORT)((tempebx & 0x00FF0000) >> 16);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x40,temp);
     temp = (USHORT)(((tempebx & 0x01000000) >> 24) << 7);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x080,temp);

     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2F,0x03);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x03,0x50);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x04,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2F,0x01);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0x38);

     if(SiS_Pr->SiS_IF_DEF_FSTN) {
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2b,0x02);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2c,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2d,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x35,0x0c);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x36,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x37,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x38,0x80);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x39,0xA0);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3a,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3b,0xf0);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3c,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3d,0x10);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3e,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3f,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x40,0x10);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x41,0x25);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x42,0x80);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x43,0x14);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x44,0x03);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x45,0x0a);
     }
d5648 7
a5654 1
#endif  /* SIS315H */
d5656 10
d5668 2
a5669 4
/************** Set Part 1 ***************/
static void
SiS_SetGroup1(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
              PSIS_HW_INFO HwInfo, USHORT RefreshRateTableIndex)
d5671 2
a5672 7
  UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
  USHORT  temp=0, tempax=0, tempbx=0, tempcx=0;
  USHORT  pushbx=0, CRT1Index=0;
#ifdef SIS315H
  USHORT  tempbl=0;
#endif
  USHORT  modeflag, resinfo=0;
d5674 7
a5680 4
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
d5682 1
a5682 3
     CRT1Index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d5684 42
d5727 1
a5727 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
d5729 3
a5731 4
#ifdef SIS315H
     SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex, HwInfo);
     SiS_SetGroup1_LCDA(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
#endif
d5733 1
a5733 1
  } else {
d5735 4
a5738 3
     if( (HwInfo->jChipType >= SIS_315H) &&
         (SiS_Pr->SiS_IF_DEF_LVDS == 1) &&
	 (SiS_Pr->SiS_VBInfo & SetInSlaveMode) ) {
d5740 16
a5755 1
        SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex, HwInfo);
d5757 1
a5757 1
     } else {
d5759 1
a5759 2
        SiS_SetCRT2Offset(SiS_Pr, ModeNo, ModeIdIndex,
      		          RefreshRateTableIndex, HwInfo);
d5761 1
a5761 9
        if (HwInfo->jChipType < SIS_315H ) {
#ifdef SIS300
    	      SiS_SetCRT2FIFO_300(SiS_Pr, ModeNo, HwInfo);
#endif
        } else {
#ifdef SIS315H
              SiS_SetCRT2FIFO_310(SiS_Pr);
#endif
	}
d5763 1
a5763 1
        SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex, HwInfo);
d5765 1
a5765 1
	/* 1. Horizontal setup */
d5767 1
a5767 1
        if(HwInfo->jChipType < SIS_315H ) {
d5769 7
a5775 1
#ifdef SIS300   /* ------------- 300 series --------------*/
d5777 17
a5793 2
    		temp = (SiS_Pr->SiS_VGAHT - 1) & 0x0FF;   			/* BTVGA2HT 0x08,0x09 */
    		SiS_SetReg(SiS_Pr->SiS_Part1Port,0x08,temp);                   /* CRT2 Horizontal Total */
d5795 1
a5795 2
    		temp = (((SiS_Pr->SiS_VGAHT - 1) & 0xFF00) >> 8) << 4;
    		SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0x0f,temp);          /* CRT2 Horizontal Total Overflow [7:4] */
d5797 8
a5804 2
    		temp = (SiS_Pr->SiS_VGAHDE + 12) & 0x0FF;                       /* BTVGA2HDEE 0x0A,0x0C */
    		SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0A,temp);                   /* CRT2 Horizontal Display Enable End */
d5806 1
a5806 5
    		pushbx = SiS_Pr->SiS_VGAHDE + 12;                               /* bx  BTVGA@@HRS 0x0B,0x0C */
    		tempcx = (SiS_Pr->SiS_VGAHT - SiS_Pr->SiS_VGAHDE) >> 2;
    		tempbx = pushbx + tempcx;
    		tempcx <<= 1;
    		tempcx += tempbx;
d5808 1
a5808 1
    		if(SiS_Pr->SiS_VBType & VB_SISVB) {
d5810 1
a5810 4
		   if(SiS_Pr->UseCustomMode) {
		      tempbx = SiS_Pr->CHSyncStart + 12;
		      tempcx = SiS_Pr->CHSyncEnd + 12;
		   }
d5812 1
a5812 16
      		   if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
		      unsigned char cr4, cr14, cr5, cr15;
		      if(SiS_Pr->UseCustomMode) {
		         cr4  = SiS_Pr->CCRT1CRTC[4];
			 cr14 = SiS_Pr->CCRT1CRTC[14];
			 cr5  = SiS_Pr->CCRT1CRTC[5];
			 cr15 = SiS_Pr->CCRT1CRTC[15];
		      } else {
		         cr4  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[4];
			 cr14 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14];
			 cr5  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[5];
			 cr15 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[15];
		      }
        	      tempbx = ((cr4 | ((cr14 & 0xC0) << 2)) - 1) << 3;
        	      tempcx = (((cr5 & 0x1F) | ((cr15 & 0x04) << (6-2))) - 1) << 3;
      		   }
d5814 7
a5820 7
    		   if((SiS_Pr->SiS_VBInfo & SetCRT2ToTV) && (resinfo == SIS_RI_1024x768)){
        	      if(!(SiS_Pr->SiS_TVMode & TVSetPAL)){
      			 tempbx = 1040;
      			 tempcx = 1042;
      		      }
    		   }
	        }
d5822 7
a5828 3
    		temp = tempbx & 0x00FF;
    		SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0B,temp);                   /* CRT2 Horizontal Retrace Start */
#endif /* SIS300 */
d5830 4
a5833 1
 	} else {
d5835 1
a5835 1
#ifdef SIS315H  /* ------------------- 315/330 series --------------- */
d5837 7
a5843 13
	        tempcx = SiS_Pr->SiS_VGAHT;				       /* BTVGA2HT 0x08,0x09 */
		if(modeflag & HalfDCLK) {
		    if(SiS_Pr->SiS_VBType & VB_SISVB) {
		       tempcx >>= 1;
		    } else {
		       tempax = SiS_Pr->SiS_VGAHDE >> 1;
		       tempcx = SiS_Pr->SiS_HT - SiS_Pr->SiS_HDE + tempax;
		       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
			  tempcx = SiS_Pr->SiS_HT - tempax;
		       }
		    }
		}
		tempcx--;
d5845 4
a5848 2
		temp = tempcx & 0xff;
		SiS_SetReg(SiS_Pr->SiS_Part1Port,0x08,temp);                  /* CRT2 Horizontal Total */
d5850 4
a5853 2
		temp = ((tempcx & 0xff00) >> 8) << 4;
		SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0x0F,temp);         /* CRT2 Horizontal Total Overflow [7:4] */
d5855 4
a5858 9
		tempcx = SiS_Pr->SiS_VGAHT;				       /* BTVGA2HDEE 0x0A,0x0C */
		tempbx = SiS_Pr->SiS_VGAHDE;
		tempcx -= tempbx;
		tempcx >>= 2;
		if(modeflag & HalfDCLK) {
		   tempbx >>= 1;
		   tempcx >>= 1;
		}
		tempbx += 16;
d5860 8
a5867 2
		temp = tempbx & 0xff;
		SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0A,temp);                  /* CRT2 Horizontal Display Enable End */
d5869 5
a5873 4
		pushbx = tempbx;
		tempcx >>= 1;
		tempbx += tempcx;
		tempcx += tempbx;
d5875 10
a5884 1
		if(SiS_Pr->SiS_VBType & VB_SISVB) {
d5886 5
a5890 10
		   if(HwInfo->jChipType >= SIS_661) {
		      if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) ||
		         (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)) {
			 if(resinfo == SIS_RI_1280x1024) {
		            tempcx = 0x30;
			 } else if(resinfo == SIS_RI_1600x1200) {
			    tempcx = 0xff;
			 }
		      }
		   }
d5892 15
a5906 8
		   if(SiS_Pr->UseCustomMode) {
		      tempbx = SiS_Pr->CHSyncStart + 16;
		      tempcx = SiS_Pr->CHSyncEnd + 16;
		      tempax = SiS_Pr->SiS_VGAHT;
		      if(modeflag & HalfDCLK) tempax >>= 1;
		      tempax--;
		      if(tempcx > tempax)  tempcx = tempax;
		   }
d5908 5
a5912 24
             	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
		      unsigned char cr4, cr14, cr5, cr15;
		      if(SiS_Pr->UseCustomMode) {
		         cr4  = SiS_Pr->CCRT1CRTC[4];
			 cr14 = SiS_Pr->CCRT1CRTC[14];
			 cr5  = SiS_Pr->CCRT1CRTC[5];
			 cr15 = SiS_Pr->CCRT1CRTC[15];
		      } else {
		         cr4  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[4];
			 cr14 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14];
			 cr5  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[5];
			 cr15 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[15];
		      }
                      tempbx = ((cr4 | ((cr14 & 0xC0) << 2)) - 3) << 3; 		/* (VGAHRS-3)*8 */
                      tempcx = (((cr5 & 0x1f) | ((cr15 & 0x04) << (5-2))) - 3) << 3; 	/* (VGAHRE-3)*8 */
		      tempcx &= 0x00FF;
		      tempcx |= (tempbx & 0xFF00);
                      tempbx += 16;
                      tempcx += 16;
		      tempax = SiS_Pr->SiS_VGAHT;
		      if(modeflag & HalfDCLK) tempax >>= 1;
		      tempax--;
		      if(tempcx > tempax)  tempcx = tempax;
             	   }
d5914 8
a5921 4
		   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
      		      tempbx = 1040;
      		      tempcx = 1042;
      	     	   }
d5923 6
a5928 1
                }
d5930 9
a5938 3
		temp = tempbx & 0xff;
	 	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0B,temp);                 /* CRT2 Horizontal Retrace Start */
#endif  /* SIS315H */
d5940 5
a5944 1
     	}  /* 315/330 series */
d5946 9
a5954 6
  	tempax = tempbx & 0xFF00;
  	tempbx = pushbx;
  	tempbx = (tempbx & 0x00FF) | ((tempbx & 0xFF00) << 4);
  	tempax |= (tempbx & 0xFF00);
  	temp = (tempax & 0xFF00) >> 8;
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0C,temp);                        /* Overflow */
d5956 5
a5960 2
  	temp = tempcx & 0x00FF;
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0D,temp);                        /* CRT2 Horizontal Retrace End */
d5962 8
a5969 1
  	/* 2. Vertical setup */
d5971 5
a5975 2
  	tempcx = SiS_Pr->SiS_VGAVT - 1;
  	temp = tempcx & 0x00FF;
d5977 8
a5984 16
	if(HwInfo->jChipType < SIS_661) {
           if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
	      if(HwInfo->jChipType < SIS_315H) {
	         if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	            if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSVIDEO | SetCRT2ToAVIDEO)) {
	               temp--;
	            }
                 }
	      } else {
 	         temp--;
              }
           } else if(HwInfo->jChipType >= SIS_315H) {
	      temp--;
	   }
	}
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0E,temp);                        /* CRT2 Vertical Total */
d5986 4
a5989 3
  	tempbx = SiS_Pr->SiS_VGAVDE - 1;
  	temp = tempbx & 0x00FF;
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0F,temp);                        /* CRT2 Vertical Display Enable End */
d5991 16
a6006 3
  	temp = ((tempbx & 0xFF00) << 3) >> 8;
  	temp |= ((tempcx & 0xFF00) >> 8);
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x12,temp);                        /* Overflow (and HWCursor Test Mode) */
d6008 4
a6011 15
	if((HwInfo->jChipType >= SIS_315H) && (HwInfo->jChipType < SIS_661)) {
           tempbx++;
   	   tempax = tempbx;
	   tempcx++;
	   tempcx -= tempax;
	   tempcx >>= 2;
	   tempbx += tempcx;
	   if(tempcx < 4) tempcx = 4;
	   tempcx >>= 2;
	   tempcx += tempbx;
	   tempcx++;
	} else {
  	   tempbx = (SiS_Pr->SiS_VGAVT + SiS_Pr->SiS_VGAVDE) >> 1;                 /*  BTVGA2VRS     0x10,0x11   */
  	   tempcx = ((SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE) >> 4) + tempbx + 1;  /*  BTVGA2VRE     0x11        */
	}
d6013 14
a6026 1
  	if(SiS_Pr->SiS_VBType & VB_SISVB) {
d6028 1
a6028 4
	   if(SiS_Pr->UseCustomMode) {
	      tempbx = SiS_Pr->CVSyncStart;
	      tempcx = (tempcx & 0xFF00) | (SiS_Pr->CVSyncEnd & 0x00FF);
	   }
d6030 4
a6033 22
    	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
	      unsigned char cr8, cr7, cr13, cr9;
	      if(SiS_Pr->UseCustomMode) {
	         cr8  = SiS_Pr->CCRT1CRTC[8];
		 cr7  = SiS_Pr->CCRT1CRTC[7];
		 cr13 = SiS_Pr->CCRT1CRTC[13];
		 cr9  = SiS_Pr->CCRT1CRTC[9];
	      } else {
	         cr8  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[8];
		 cr7  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[7];
		 cr13 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[13];
		 cr9  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[9];
	      }
      	      tempbx = cr8;
      	      if(cr7 & 0x04)  tempbx |= 0x0100;
      	      if(cr7 & 0x80)  tempbx |= 0x0200;
      	      if(cr13 & 0x08) tempbx |= 0x0400;
      	      tempcx = (tempcx & 0xFF00) | (cr9 & 0x00FF);
    	   }
  	}
  	temp = tempbx & 0x00FF;
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x10,temp);           /* CRT2 Vertical Retrace Start */
d6035 4
a6038 3
  	temp = ((tempbx & 0xFF00) >> 8) << 4;
  	temp |= (tempcx & 0x000F);
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x11,temp);           /* CRT2 Vert. Retrace End; Overflow; "Enable CRTC Check" */
d6040 4
a6043 1
  	/* 3. Panel delay compensation */
d6045 8
a6052 1
  	if(HwInfo->jChipType < SIS_315H) {
d6054 4
a6057 1
#ifdef SIS300  /* ---------- 300 series -------------- */
d6059 16
a6074 2
	   if(SiS_Pr->SiS_VBType & VB_SISVB) {
	        temp = 0x20;
d6076 4
a6079 45
		if(HwInfo->jChipType == SIS_300) {
		   temp = 0x10;
		   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)  temp = 0x2c;
		   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) temp = 0x20;
		}
		if(SiS_Pr->SiS_VBType & VB_SIS301) {
		   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) temp = 0x20;
		}
		if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960)     temp = 0x24;
		if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom)       temp = 0x2c;
		if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) 		temp = 0x08;
		if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
      		   if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) 	temp = 0x2c;
      		   else 					temp = 0x20;
    	        }
		if((ROMAddr) && (SiS_Pr->SiS_UseROM)) {
		   if(ROMAddr[0x220] & 0x80) {
		      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoYPbPrHiVision)
			 temp = ROMAddr[0x221];
		      else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision)
			 temp = ROMAddr[0x222];
		      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)
			 temp = ROMAddr[0x223];
		      else
			temp = ROMAddr[0x224];
		      temp &= 0x3c;
		   }
		}
		if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
		   if(SiS_Pr->PDC != -1)  temp = SiS_Pr->PDC & 0x3c;
		}
	   } else {
	        temp = 0x20;
		if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
		   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) temp = 0x04;
		}
		if((ROMAddr) && SiS_Pr->SiS_UseROM) {
		   if(ROMAddr[0x220] & 0x80) {
		      temp = ROMAddr[0x220] & 0x3c;
		   }
		}
		if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
		   if(SiS_Pr->PDC != -1) temp = SiS_Pr->PDC & 0x3c;
		}
	   }
d6081 4
a6084 1
    	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,~0x3C,temp);         /* Panel Link Delay Compensation; (Software Command Reset; Power Saving) */
d6086 7
a6092 1
#endif  /* SIS300 */
d6094 3
a6096 1
  	} else {
d6098 19
a6116 1
#ifdef SIS315H   /* --------------- 315/330 series ---------------*/
d6118 9
a6126 1
   	   if(HwInfo->jChipType < SIS_661) {
d6128 3
a6130 1
	      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {  /* LVDS */
d6132 10
a6141 2
	         if(HwInfo->jChipType == SIS_740) temp = 0x03;
	         else 		                  temp = 0x00;
d6143 1
a6143 7
	 	 if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) temp = 0x0a;
		 tempbl = 0xF0;
		 if(HwInfo->jChipType == SIS_650) {
		    if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
		       if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) tempbl = 0x0F;
		    }
		 }
d6145 1
a6145 7
		 if(SiS_Pr->SiS_IF_DEF_DSTN || SiS_Pr->SiS_IF_DEF_FSTN) {
		    temp = 0x08;
		    tempbl = 0;
		    if((ROMAddr) && (SiS_Pr->SiS_UseROM)) {
		       if(ROMAddr[0x13c] & 0x80) tempbl = 0xf0;
		    }
		 }
d6147 1
a6147 2
		 SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,tempbl,temp);	    /* Panel Link Delay Compensation */
	      }
d6149 5
a6153 1
	   } /* < 661 */
d6155 11
a6165 4
    	   tempax = 0;
    	   if (modeflag & DoubleScanMode) tempax |= 0x80;
    	   if (modeflag & HalfDCLK)       tempax |= 0x40;
    	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2C,0x3f,tempax);
d6167 3
a6169 1
#endif  /* SIS315H */
d6171 7
a6177 1
  	}
d6179 2
a6180 1
     }  /* Slavemode */
d6182 7
a6188 1
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
d6190 34
a6223 2
        /* For 301BDH with LCD, we set up the Panel Link */
        if( (SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) ) {
d6225 9
a6233 2
	    SiS_SetGroup1_LVDS(SiS_Pr, ModeNo, ModeIdIndex,
	                       HwInfo, RefreshRateTableIndex);
d6235 4
a6238 1
        } else if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
d6240 1
a6240 3
    	    SiS_SetGroup1_301(SiS_Pr, ModeNo, ModeIdIndex,
	                      HwInfo, RefreshRateTableIndex);
        }
d6242 7
a6248 12
     } else {

        if(HwInfo->jChipType < SIS_315H) {

	   SiS_SetGroup1_LVDS(SiS_Pr, ModeNo, ModeIdIndex,
	                        HwInfo, RefreshRateTableIndex);
	} else {

	   if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
              if((!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) || (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
    	          SiS_SetGroup1_LVDS(SiS_Pr, ModeNo,ModeIdIndex,
	                              HwInfo,RefreshRateTableIndex);
d6250 4
a6253 5
	   } else {
	      SiS_SetGroup1_LVDS(SiS_Pr, ModeNo,ModeIdIndex,
	                         HwInfo,RefreshRateTableIndex);
	   }

d6255 1
d6257 15
a6272 2
  } /* LCDA */
}
d6274 10
a6283 3
/*********************************************/
/*         SET PART 2 REGISTER GROUP         */
/*********************************************/
d6286 13
a6298 13
static UCHAR *
SiS_GetGroup2CLVXPtr(SiS_Private *SiS_Pr, int tabletype, PSIS_HW_INFO HwInfo)
{
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
   const UCHAR  *tableptr = NULL;
   USHORT a, b, p = 0;

   a = SiS_Pr->SiS_VGAHDE;
   b = SiS_Pr->SiS_HDE;
   if(tabletype) {
      a = SiS_Pr->SiS_VGAVDE;
      b = SiS_Pr->SiS_VDE;
   }
d6300 2
a6301 1
   if((HwInfo->jChipType >= SIS_661) && (ROMAddr = (UCHAR *)HwInfo->pjVirtualRomBase) && SiS_Pr->SiS_UseROM) {
d6303 12
a6314 25
      if(a < b) {
         p = ROMAddr[0x278] | (ROMAddr[0x279] << 8);
      } else if(a == b) {
         p = ROMAddr[0x27a] | (ROMAddr[0x27b] << 8);
      } else {
         if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	    p = ROMAddr[0x27e] | (ROMAddr[0x27f] << 8);
	 } else {
	    p = ROMAddr[0x27c] | (ROMAddr[0x27d] << 8);
	 }
	 if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	    if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) 	 p = ROMAddr[0x280] | (ROMAddr[0x281] << 8);
	    else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) p = ROMAddr[0x282] | (ROMAddr[0x283] << 8);
	    else 				 	 p = ROMAddr[0x284] | (ROMAddr[0x285] << 8);
	 } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	    p = ROMAddr[0x286] | (ROMAddr[0x287] << 8);
	 }
	 do {
	    if((ROMAddr[p] | ROMAddr[p+1] << 8) == a) break;
	    p += 0x42;
	 } while((ROMAddr[p] | ROMAddr[p+1] << 8) != 0xffff);
	 if((ROMAddr[p] | ROMAddr[p+1] << 8) == 0xffff) p -= 0x42;
      }
      p += 2;
      return(&ROMAddr[p]);
d6316 4
a6319 1
   } else {
d6321 1
a6321 14
      if(a < b) {
         tableptr = SiS_Part2CLVX_1;
      } else if(a == b) {
         tableptr = SiS_Part2CLVX_2;
      } else {
         if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	    tableptr = SiS_Part2CLVX_4;
	 } else {
	    tableptr = SiS_Part2CLVX_3;
	 }
	 if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	    if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) 	 tableptr = SiS_Part2CLVX_3;
	    else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) tableptr = SiS_Part2CLVX_3;
	    else 				         tableptr = SiS_Part2CLVX_5;
d6323 10
a6332 12
	 } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	    tableptr = SiS_Part2CLVX_6;
	 }
	 do {
	    if((tableptr[p] | tableptr[p+1] << 8) == a) break;
	    p += 0x42;
	 } while((tableptr[p] | tableptr[p+1] << 8) != 0xffff);
	 if((tableptr[p] | tableptr[p+1] << 8) == 0xffff) p -= 0x42;
      }
      p += 2;
      return((UCHAR *)&tableptr[p]);
   }
d6335 2
a6336 3
static void
SiS_SetGroup2_C_ELV(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
	      	    USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
d6338 6
a6343 19
   UCHAR *tableptr;
   int i, j;
   UCHAR temp;

   if(!(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV))) return; 

   tableptr = SiS_GetGroup2CLVXPtr(SiS_Pr, 0, HwInfo);
   for(i = 0x80, j = 0; i <= 0xbf; i++, j++) {
      SiS_SetReg(SiS_Pr->SiS_Part2Port, i, tableptr[j]);
   }
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
      tableptr = SiS_GetGroup2CLVXPtr(SiS_Pr, 1, HwInfo);
      for(i = 0xc0, j = 0; i <= 0xff; i++, j++) {
         SiS_SetReg(SiS_Pr->SiS_Part2Port, i, tableptr[j]);
      }
   }
   temp = 0x10;
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) temp |= 0x04;
   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x4e,0xeb,temp);
d6346 2
a6347 4
static void
SiS_GetCRT2Part2Ptr(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
		    USHORT RefreshRateTableIndex,USHORT *CRT2Index,
		    USHORT *ResIndex,PSIS_HW_INFO HwInfo)
d6349 1
a6349 1
  USHORT tempbx,tempal;
d6351 15
a6365 4
  if(ModeNo <= 0x13)
      	tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  else
      	tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d6367 7
a6373 10
  tempbx = SiS_Pr->SiS_LCDResInfo;

  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)      tempbx += 16;
  else if(SiS_Pr->SiS_SetFlag & LCDVESATiming) tempbx += 32;

  if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
        tempbx = 100;
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)      tempbx = 101;
  	else if(SiS_Pr->SiS_SetFlag & LCDVESATiming) tempbx = 102;
d6375 4
a6378 7
  } else if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
           tempbx = 103;
           if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)      tempbx = 104;
  	   else if(SiS_Pr->SiS_SetFlag & LCDVESATiming) tempbx = 105;
	}
d6380 7
a6386 3
  } else if(SiS_Pr->SiS_CustomT == CUT_ASUSA2H_2) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        if(SiS_Pr->SiS_SetFlag & LCDVESATiming) tempbx = 106;
d6388 1
d6390 1
d6392 6
a6397 3
  *CRT2Index = tempbx;
  *ResIndex = tempal & 0x3F;
}
d6400 9
d6410 21
a6430 5
/* For ECS A907. Highly preliminary. */
static void
SiS_Set300Part2Regs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
    		    USHORT ModeIdIndex, USHORT RefreshRateTableIndex,
		    USHORT ModeNo)
d6432 8
a6439 3
  USHORT crt2crtc, resindex;
  int    i,j;
  const  SiS_Part2PortTblStruct *CRT2Part2Ptr = NULL;
d6441 7
a6447 3
  if(HwInfo->jChipType != SIS_300) return;
  if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) return;
  if(SiS_Pr->UseCustomMode) return;
d6449 7
a6455 2
  if(ModeNo <= 0x13) {
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d6457 12
a6468 1
     crt2crtc = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d6470 1
d6472 1
a6472 3
  resindex = crt2crtc & 0x3F;
  if(SiS_Pr->SiS_SetFlag & LCDVESATiming) CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_1;
  else                                    CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_2;
d6474 4
a6477 5
  /* The BIOS code (1.16.51,56) is obviously a fragment! */
  if(ModeNo > 0x13) {
     CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_1;
     resindex = 4;
  }
d6479 3
a6481 13
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x01,0x80,(CRT2Part2Ptr+resindex)->CR[0]);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x02,0x80,(CRT2Part2Ptr+resindex)->CR[1]);
  for(i = 2, j = 0x04; j <= 0x06; i++, j++ ) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
  }
  for(j = 0x1c; j <= 0x1d; i++, j++ ) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
  }
  for(j = 0x1f; j <= 0x21; i++, j++ ) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
  }
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x23,(CRT2Part2Ptr+resindex)->CR[10]);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x25,0x0f,(CRT2Part2Ptr+resindex)->CR[11]);
a6482 1
#endif
d6484 2
a6485 2
static void
SiS_SetTVSpecial(SiS_Private *SiS_Pr, USHORT ModeNo)
d6487 1
a6487 3
  if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) return;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision)) return;
  if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p | TVSetYPbPr750p)) return;
d6489 3
a6491 32
  if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
     if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
        const UCHAR specialtv[] = {
		0xa7,0x07,0xf2,0x6e,0x17,0x8b,0x73,0x53,
		0x13,0x40,0x34,0xf4,0x63,0xbb,0xcc,0x7a,
		0x58,0xe4,0x73,0xda,0x13
	};
	int i, j;
	for(i = 0x1c, j = 0; i <= 0x30; i++, j++) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,i,specialtv[j]);
	}
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x43,0x72);
	if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750)) {
	   if(SiS_Pr->SiS_TVMode & TVSetPALM) {
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x14);
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x1b);
	   } else {
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x14);  /* 15 */
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x1a);  /* 1b */
	   }
	}
     }
  } else {
     if((ModeNo == 0x38) || (ModeNo == 0x4a) || (ModeNo == 0x64) ||
        (ModeNo == 0x52) || (ModeNo == 0x58) || (ModeNo == 0x5c)) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x1b);  /* 21 */
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x54);  /* 5a */
     } else {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x1a);  /* 21 */
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x53);  /* 5a */
     }
  }
d6494 1
a6494 2
static void
SiS_SetGroup2_Tail(SiS_Private *SiS_Pr, USHORT ModeNo)
d6498 4
a6501 18
  if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
     if(SiS_Pr->SiS_VGAVDE == 525) {
	temp = 0xc3;
	if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	   temp++;
	   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) temp += 2;
	}
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2f,temp);
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x30,0xb3);
     } else if(SiS_Pr->SiS_VGAVDE == 420) {
	temp = 0x4d;
	if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	   temp++;
	   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) temp++;
	}
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2f,temp);
     }
  }
d6503 1
a6503 34
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
	if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part2Port,0x1a,0x03);
	   /* Not always for LV, see SetGroup2() */
	}
	temp = 1;
	if(ModeNo <= 0x13) temp = 3;
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x0b,temp);
     }
#if 0
     /* 651+301C, for 1280x768 - do I really need that? */
     if((SiS_Pr->SiS_PanelXRes == 1280) && (SiS_Pr->SiS_PanelYRes == 768)) {
        if(SiS_Pr->SiS_VBInfo & SetSimuScanMode) {
	   if(((SiS_Pr->SiS_HDE == 640) && (SiS_Pr->SiS_VDE == 480)) ||
	      ((SiS_Pr->SiS_HDE == 320) && (SiS_Pr->SiS_VDE == 240))) {
	      SiS_SetReg(SiS_Part2Port,0x01,0x2b);
	      SiS_SetReg(SiS_Part2Port,0x02,0x13);
	      SiS_SetReg(SiS_Part2Port,0x04,0xe5);
	      SiS_SetReg(SiS_Part2Port,0x05,0x08);
	      SiS_SetReg(SiS_Part2Port,0x06,0xe2);
	      SiS_SetReg(SiS_Part2Port,0x1c,0x21);
	      SiS_SetReg(SiS_Part2Port,0x1d,0x45);
	      SiS_SetReg(SiS_Part2Port,0x1f,0x0b);
	      SiS_SetReg(SiS_Part2Port,0x20,0x00);
	      SiS_SetReg(SiS_Part2Port,0x21,0xa9);
	      SiS_SetReg(SiS_Part2Port,0x23,0x0b);
	      SiS_SetReg(SiS_Part2Port,0x25,0x04);
	   }
	}
     }
#endif
  }
}
d6505 5
a6509 3
static void
SiS_SetGroup2(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,USHORT RefreshRateTableIndex,
	      PSIS_HW_INFO HwInfo)
d6511 2
a6512 3
  USHORT      i, j, tempax, tempbx, tempcx, temp;
  USHORT      push1, push2, modeflag, crt2crtc;
  ULONG       longtemp, tempeax;
a6514 2
#ifdef SIS315H
  USHORT      resindex, CRT2Index;
d6516 2
a6517 2
#endif
#ifdef SIS300
d6519 2
a6520 2
       0xc3,0x9e,0xc3,0x9e,0x02,0x02,0x02,
       0xab,0x87,0xab,0x9e,0xe7,0x02,0x02
a6521 1
#endif  
d6523 43
a6565 3
#ifdef SIS315H   
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) return;
#endif
d6567 4
a6570 3
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d6572 2
a6573 5
     if(SiS_Pr->UseCustomMode) {
        modeflag = SiS_Pr->CModeFlag;
	crt2crtc = 0;
     } else {
        modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
a6574 1
     }
d6577 14
a6590 9
  temp = 0;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToAVIDEO)) temp |= 0x08;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToSVIDEO)) temp |= 0x04;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToSCART)     temp |= 0x02;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision)  temp |= 0x01;

  if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) 	      temp |= 0x10;

  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x00,temp);
d6594 11
a6604 10

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {

     TimingPoint = SiS_Pr->SiS_HiTVExtTiming;
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        TimingPoint = SiS_Pr->SiS_HiTVSt2Timing;
        if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
	   TimingPoint = SiS_Pr->SiS_HiTVSt1Timing;
#if 0
           if(!(modeflag & Charx8Dot))  TimingPoint = SiS_Pr->SiS_HiTVTextTiming;
d6606 1
a6606 2
        }
     }
d6608 2
a6609 1
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
d6611 5
a6615 3
     if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p)      TimingPoint = &SiS_YPbPrTable[2][0];
     else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) TimingPoint = &SiS_YPbPrTable[1][0];
     else					  TimingPoint = &SiS_YPbPrTable[0][0];
d6617 1
a6617 1
     PhasePoint = SiS_Pr->SiS_NTSCPhase;
d6619 3
a6621 1
  } else if(SiS_Pr->SiS_TVMode & TVSetPAL) {
d6623 5
a6627 22
     if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
         ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	   (SiS_Pr->SiS_TVMode & TVSetTVSimuMode) ) ) {
        PhasePoint = SiS_Pr->SiS_PALPhase2;
     }

  } else {

     TimingPoint = SiS_Pr->SiS_NTSCTiming;
     PhasePoint  = SiS_Pr->SiS_NTSCPhase;
     if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
	PhasePoint = SiS_Pr->SiS_PALPhase;
     }

     if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
	 ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	   (SiS_Pr->SiS_TVMode & TVSetTVSimuMode) ) ) {
        PhasePoint = SiS_Pr->SiS_NTSCPhase2;
	if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
	   PhasePoint = SiS_Pr->SiS_PALPhase2;
	}
     }
d6629 2
d6632 2
d6635 30
a6664 16
  if(SiS_Pr->SiS_TVMode & TVSetPALM) {
     PhasePoint = SiS_Pr->SiS_PALMPhase;
     if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
	 ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	   (SiS_Pr->SiS_TVMode & TVSetTVSimuMode) ) ) {
        PhasePoint = SiS_Pr->SiS_PALMPhase2;
     }
  }

  if(SiS_Pr->SiS_TVMode & TVSetPALN) {
     PhasePoint = SiS_Pr->SiS_PALNPhase;
     if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
	 ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	   (SiS_Pr->SiS_TVMode & TVSetTVSimuMode) ) ) {
	PhasePoint = SiS_Pr->SiS_PALNPhase2;
     }
d6667 11
a6677 6
  if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
     PhasePoint = SiS_Pr->SiS_SpecialPhase;
     if(SiS_Pr->SiS_TVMode & TVSetPALM) {
        PhasePoint = SiS_Pr->SiS_SpecialPhaseM;
     } else if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
        PhasePoint = SiS_Pr->SiS_SpecialPhaseJ;
d6680 1
d6682 2
a6683 2
  for(i=0x31, j=0; i<=0x34; i++, j++) {
     SiS_SetReg(SiS_Pr->SiS_Part2Port,i,PhasePoint[j]);
d6686 2
a6687 2
  for(i=0x01, j=0; i<=0x2D; i++, j++) {
     SiS_SetReg(SiS_Pr->SiS_Part2Port,i,TimingPoint[j]);
d6689 2
a6690 2
  for(i=0x39; i<=0x45; i++, j++) {
     SiS_SetReg(SiS_Pr->SiS_Part2Port,i,TimingPoint[j]);
d6694 2
a6695 1
     if(SiS_Pr->SiS_ModeType != ModeText) {
d6697 3
a6699 1
     }
d6704 18
a6721 12
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x35,SiS_Pr->SiS_RY1COE);
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x36,SiS_Pr->SiS_RY2COE);
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x37,SiS_Pr->SiS_RY3COE);
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x38,SiS_Pr->SiS_RY4COE);

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) 	tempax = 950;
  else if(SiS_Pr->SiS_TVMode & TVSetPAL)      	tempax = 520;
  else 			            		tempax = 440;

  if( ( (!(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision)) && (SiS_Pr->SiS_VDE <= tempax) ) ||
      ( (SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision) &&
        ((SiS_Pr->SiS_VGAHDE == 1024) || (SiS_Pr->SiS_VDE <= tempax)) ) ) {
d6725 1
a6725 1
     tempax &= 0x00ff;
d6727 14
a6740 10
     temp = tempax + (USHORT)TimingPoint[0];
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,temp);

     temp = tempax + (USHORT)TimingPoint[1];
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,temp);

     if((SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision) && (SiS_Pr->SiS_VGAHDE >= 1024)) {
        if(SiS_Pr->SiS_TVMode & TVSetPAL) {
           SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x1b);  /* 19 */
           SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x54);  /* 52 */
d6742 7
a6748 2
           SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x17);
           SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x1d);
d6755 8
a6762 1
  if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempcx >>= 1;
d6764 3
a6766 1
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) tempcx--;
d6768 1
a6768 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1B,temp);
d6773 3
a6775 1
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) tempcx++;
d6781 3
a6783 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) tempcx -= 4;
d6790 2
d6793 1
a6793 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x24,temp);
d6797 2
d6800 4
a6803 3
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     tempbx -= 4;
     tempcx = tempbx;
d6805 1
d6812 1
a6812 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x27,temp);
d6817 3
a6819 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) tempcx -= 4;
d6832 2
a6833 1
     tempcx = SiS_GetVGAHT2(SiS_Pr) - 1;
d6836 1
a6836 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2E,temp);
d6842 2
a6843 2
  if(HwInfo->jChipType < SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) tempbx >>= 1;
d6845 13
a6857 6
     if( (SiS_Pr->SiS_VBInfo & SetCRT2ToTV) &&
         (!(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p|TVSetYPbPr750p))) ) {
	tempbx >>= 1;
	if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
	   if(ModeNo <= 0x13) {
	      if(crt2crtc == 1) tempbx++;
d6859 1
a6859 6
	} else if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
	   if(crt2crtc == 4) {
              if(SiS_Pr->SiS_ModeType <= 3) tempbx++;
	   }
	}
     }
d6863 9
a6871 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
d6873 3
a6875 12
        if((ModeNo == 0x2f) || (ModeNo == 0x5d) || (ModeNo == 0x5e)) temp++;
     }
  }

  if(HwInfo->jChipType < SIS_661) {
     /* From 1.10.7w - doesn't make sense */
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
           if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
	      if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {   /* SetFlag?? */
	         if(ModeNo == 0x03) temp++;
	      }
d6877 1
a6877 1
        }
d6880 1
a6880 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2F,temp);
d6882 16
a6897 5
  temp = (tempcx >> 8) & 0x0F;
  temp |= (((tempbx >> 8) << 6) & 0xC0);
  if(!(SiS_Pr->SiS_VBInfo & (SetCRT2ToHiVision | SetCRT2ToYPbPr525750 | SetCRT2ToSCART))) {
     temp |= 0x10;
     if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToSVIDEO)) temp |= 0x20;
d6899 3
a6901 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x30,temp);
d6903 2
a6904 1
  if((HwInfo->jChipType > SIS_315H) && (HwInfo->jChipType < SIS_661)) {
d6906 3
a6908 5
        if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302LV | VB_SIS302ELV)) {
           if( (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) ||
               (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) ) {
              SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x10,0x60);
	   }
d6913 22
a6934 23
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     tempbx = SiS_Pr->SiS_VDE;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        if(!(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p | TVSetYPbPr750p))) {
           tempbx >>= 1;
	}
     }
     tempbx -= 3;
     if(HwInfo->jChipType >= SIS_661) {
        if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302LV | VB_SIS302ELV)) {  /* Why not 301B/LV? */
           temp = 0;
	   if(tempcx & 0x0400) temp |= 0x20;
	   if(tempbx & 0x0400) temp |= 0x40;
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x10,temp);
	}
     }
     tempbx &= 0x03ff;
     temp = ((tempbx & 0xFF00) >> 8) << 5;
     temp |= 0x18;
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x46,temp);
     temp = tempbx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x47,temp);

d6937 1
a6937 1
  tempbx = 0;
d6939 5
a6943 4
     if(SiS_Pr->SiS_VGAHDE >= SiS_Pr->SiS_HDE) {
        tempax = 0;
        tempbx |= 0x2000;
     }
d6947 11
a6957 8
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(SiS_Pr->SiS_VGAHDE >= 1024) {
        if((!(modeflag & HalfDCLK)) || (HwInfo->jChipType < SIS_315H)) {
           tempcx = 0x1920;
           if(SiS_Pr->SiS_VGAHDE >= 1280) {
              tempcx = 0x1420;
              tempbx &= ~0x2000;
           }
d6959 2
a6960 1
     }
d6963 12
a6974 7
  if(!(tempbx & 0x2000)) {
     if(modeflag & HalfDCLK) {
        tempcx = (tempcx & 0xFF00) | ((tempcx << 1) & 0x00FF);
     }
     longtemp = (SiS_Pr->SiS_VGAHDE * ((tempcx & 0xFF00) >> 8)) / (tempcx & 0x00FF);
     longtemp <<= 13;
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
d6976 10
a6985 6
     }
     tempeax = longtemp / SiS_Pr->SiS_HDE;
     if(longtemp % SiS_Pr->SiS_HDE) tempeax++;
     tempax = (USHORT)tempeax;
     tempbx |= (tempax & 0x1F00);
     tempcx = (tempax & 0xFF00) >> (8 + 5);
d6988 4
a6991 2
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x44,tempax);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x45,0xC0,(tempbx >> 8));
d6994 24
d7019 3
a7021 26
     temp = tempcx & 0x0007;
     if(tempbx & 0x2000) temp = 0;
     if((HwInfo->jChipType < SIS_661) || (!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD))) {
        temp |= 0x18;
     }
     SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x46,0xE0,temp);

     if(SiS_Pr->SiS_TVMode & TVSetPAL) {
        tempbx = 0x0382;
        tempcx = 0x007e;
     } else {
        tempbx = 0x0369;
        tempcx = 0x0061;
     }
     temp = (tempbx & 0x00FF) ;
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x4B,temp);
     temp = (tempcx & 0x00FF) ;
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x4C,temp);
     temp = (tempcx & 0x0300) >> (8 - 2);
     temp |= ((tempbx >> 8) & 0x03);
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
        temp |= 0x10;
	if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p)      temp |= 0x20;
	else if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) temp |= 0x40;
     }
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x4D,temp);
d7023 18
a7040 2
     temp = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x43);
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x43,(USHORT)(temp - 3));
a7041 7
     SiS_SetTVSpecial(SiS_Pr, ModeNo);

     if(SiS_Pr->SiS_VBType & VB_SIS301C) {
        temp = 0;
        if(SiS_Pr->SiS_TVMode & TVSetPALM) temp = 8;
        SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x4e,0xf7,temp);
     }
d7043 5
d7049 1
d7051 5
a7055 4
  if(SiS_Pr->SiS_TVMode & TVSetPALM) {
     if(!(SiS_Pr->SiS_TVMode & TVSetNTSC1024)) {
        temp = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x01);
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,temp - 1);
d7057 34
a7090 6
     SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xEF);
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x0B,0x00);
d7094 1
a7094 3
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) return;

  /* From here: Part2 LCD setup */
d7097 5
a7101 2
  if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
  tempbx--;			         	/* RHACTE = HDE - 1 */
d7103 3
a7105 2
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2C,temp);
  temp = (tempbx & 0xFF00) >> 4;
d7110 6
a7115 7
     if(SiS_Pr->SiS_ModeType == ModeEGA) {
        if(SiS_Pr->SiS_VGAHDE >= 1024) {
           temp = 0x02;
	   if(HwInfo->jChipType >= SIS_315H) {
              if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
                 temp = 0x01;
	      }
d7117 3
a7119 2
        }
     }
d7121 4
a7124 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x0B,temp);
d7126 1
a7126 1
  tempbx = SiS_Pr->SiS_VDE - 1;
d7128 1
a7128 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x03,temp);
d7132 2
a7133 3
  tempcx = SiS_Pr->SiS_VT - 1;
  temp = tempcx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x19,temp);
d7135 3
a7137 1
  temp = ((tempcx & 0xFF00) >> 8) << 5;
d7139 21
a7159 5
  /* Enable dithering; only do this for 32bpp mode */
  if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
     if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x01) {
        temp |= 0x10;
     }
d7162 1
a7162 2
  /* Must do special for Compaq1280; Acer1280 OK, Clevo1400 OK, COMPAL1400 OK */
  /* Compaq1280 panel loses sync if using CR37 sync info. */
d7164 13
a7176 19
     if((HwInfo->jChipType >= SIS_315H) && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {
	if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) &&
	   (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)) {
	   if(SiS_Pr->SiS_LCDInfo & LCDSync) {
	      temp |= ((SiS_Pr->SiS_LCDInfo & 0xc0) >> 6);
	   }
	} else if((SiS_Pr->SiS_CustomT == CUT_CLEVO1400) &&
	          (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)) {
	   temp |= 0x03;
	} else {
           temp |= (SiS_GetReg(SiS_Pr->SiS_P3d4,0x37) >> 6);
	   temp |= 0x08;
	   if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) temp |= 0x04;
	}
     } else {
        if(SiS_Pr->SiS_LCDInfo & LCDSync) {
	   temp |= ((SiS_Pr->SiS_LCDInfo & 0xc0) >> 6);
	}
     }
d7178 1
a7178 2

  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1A,temp);
d7186 7
a7192 121
#if 0  /* Use the 315/330 series code for now */
  if((HwInfo->jChipType >= SIS_661)          &&
     (SiS_Pr->SiS_VBType & VB_SIS301LV302LV) &&
     (ROMAddr && SiS_Pr->SiS_UseROM)) {

      /* This is done for the LVDS bridges only, since
       * the TMDS panels already work correctly with
       * the old code. Besides, we only do that if
       * we can get the data from the ROM, I am tired
       * of carrying a lot of tables around.
       */

#ifdef SIS315H 							/* ------------ 661/741/760 series --------- */
      UCHAR *myptr = NULL, myptr1 = NULL;

      myptr = (UCHAR *)GetLCDPtr661(SiS_Pr, HwInfo, 6, ModeNo, ModeIdIndex, RefreshRateTableIndex);
      myptr1 = (UCHAR *)GetLCDStructPtr661(SiS_Pr, HwInfo);

      tempbx = (myptr[3] | (myptr[4] << 8)) & 0x0fff;
      tempcx = SiS_Pr->PanelYRes;
      if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
         tempcx = SiS_Pr->SiS_VDE;
      }

      tempcx += tempbx;
      if(tempcx >= SiS_Pr->SiS_VT) tempcx -= SiS_Pr->SiS_VT;

      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,tempbx);
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,tempcx);

      tempcx &= 0x07ff;
      tempbx &= 0x07ff;
      temp = (tempcx >> 8) << 3;
      temp |= (tempbx >> 8);
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,temp);

      tempbx = (myptr[4] | (myptr[5] << 8)) >> 4;
      tempcx = myptr1[6];
      if(SiS_Pr->SiS_LCDInfo & LCDPass11) tempcx = myptr[7];

      tempcx += tempbx;
      if(tempcx >= SiS_Pr->SiS_VT) tempcx -= SiS_Pr->SiS_VT;

      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,tempbx);
      temp = tempcx & 0x000f;
      temp |= ((tempbx & 0x0f00) >> 4);
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,temp);

      tempax = SiS_Pr->SiS_HT;
      tempbx = (myptr[0] | (myptr[1] << 8)) & 0x0fff;
      tempcx = SiS_Pr->PanelXRes;
      if(SiS_Pr->SiS_LCDInfo & LCDPass11) tempcx = SiS_Pr->SiS_HDE;

      if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
         tempax >>= 1;
	 tempbx >>= 1;
	 tempcx >>= 1;
      }
      if(SiS_Pr->SiS_VBType & VB_SIS302LV)                 tempbx++;
      if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) tempbx++;

      tempcx += tempbx;
      if(tempcx >= tempax) tempcx -= tempax;

      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1f,tempbx);
      temp = ((tempbx & 0xff00) >> 8) << 4;
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x20,temp);
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x23,tempcx);
      temp = tempcx >> 8;
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x25,temp);

      tempax = SiS_Pr->SiS_HT;
      tempbx = (myptr[1] | (myptr[2] << 8)) >> 4;
      tempcx = myptr1[5];
      if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
         tempcx = myptr[6];
      }
      if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
         tempax >>= 1;
	 tempbx >>= 1;
	 tempcx >>= 1;
      }
      if(SiS_Pr->SiS_VBType & VB_SIS302LV) tempbx++;

      tempcx += tempbx;
      if(tempcx >= tempax) tempcx -= tempax;

      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1c,tempbx);
      temp = (tempbx & 0x0f00) >> 4;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1d,0x0f,temp);
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x21,tempcx);

      if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
         if(SiS_Pr->SiS_VGAVDE == 525) {
	    temp = 0xc3;
	    if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	       temp++;
	       if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) temp += 2;
	    }
	    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2f,temp);
	    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x30,0xb3);
	 } else if(SiS_Pr->SiS_VGAVDE == 420) {
	    temp = 0x4d;
	    if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	       temp++;
	       if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) temp++;
	    }
	    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2f,temp);
	 }
      }

#endif

  } else
#endif
         if((HwInfo->jChipType >= SIS_315H)                    &&
            (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)            &&
            ((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)  ||
             (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) ||
             (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) ||
             (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)) ) {
d7194 1
a7194 1
#ifdef SIS315H 							/* ------------- 315/330 series ------------ */
d7196 2
a7197 2
      SiS_GetCRT2Part2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                          &CRT2Index, &resindex, HwInfo);
d7204 1
a7204 1
        case Panel_1024x768  + 16: CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_2;  break;  /* Non-Expanding */
d7208 1
a7208 1
        case Panel_1024x768  + 32: CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_3;  break;  /* VESA Timing */
a7211 7
	case 100:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Compaq1280x1024_1; break;  /* Custom */
	case 101:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Compaq1280x1024_2; break;
	case 102:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Compaq1280x1024_3; break;
	case 103:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Clevo1024x768_1; break;    /* Custom */
	case 104:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Clevo1024x768_2; break;
	case 105:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Clevo1024x768_3; break;
	case 106:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Asus1024x768_3; break;
d7218 1
a7218 1
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
d7221 1
a7221 1
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
d7224 1
a7224 1
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
d7226 1
a7226 1
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x23,(CRT2Part2Ptr+resindex)->CR[10]);
d7229 19
a7247 2
      SiS_SetGroup2_Tail(SiS_Pr, ModeNo);
#endif
d7249 10
a7258 1
  } else {   /* ------ other bridges, other LCD resolutions ------ */
d7260 18
a7277 6
    tempcx = SiS_Pr->SiS_VT;
    tempbx = SiS_Pr->PanelYRes;

    if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
       tempbx = SiS_Pr->SiS_VDE - 1;
       tempcx--;
a7278 1

d7280 17
a7296 14
    if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
       if(tempbx != SiS_Pr->SiS_VDE) {
          tempax = tempbx;
	  /* if(SiS_Pr->SiS_VGAVDE == 525) tempax += 0x3c;   */  /* 651+301C */
          if(tempax < SiS_Pr->SiS_VDE) {
             tempax = 0;
             tempcx = 0;
          } else {
             tempax -= SiS_Pr->SiS_VDE;
          }
          tempax >>= 1;
       }
       tempcx -= tempax; /* lcdvdes */
       tempbx -= tempax; /* lcdvdee */
a7298 6
    /* Non-expanding: lcdvdees = tempcx = VT-1; lcdvdee = tempbx = VDE-1 */

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdvdes 0x%x lcdvdee 0x%x\n", tempcx, tempbx);
#endif

d7300 1
a7300 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,temp);
d7302 1
a7302 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,temp);
d7304 1
a7304 1
    temp = ((tempbx & 0xFF00) >> 8) << 3;
d7306 1
a7306 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,temp);
d7308 5
a7312 3
    tempbx = SiS_Pr->SiS_VT;
    tempax = SiS_Pr->SiS_VDE;
    tempcx = (tempbx - tempax) >> 4;
d7315 1
a7315 3
    if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx -= 10;

    /* non-expanding: lcdvrs = tempbx = ((VT + VDE) / 2) - 10 */
d7317 2
a7318 10
    if(SiS_Pr->UseCustomMode) {
       tempbx = SiS_Pr->CVSyncStart;
    }

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdvrs 0x%x\n", tempbx);
#endif

    temp = tempbx & 0x00FF;   				/* RTVACTEE = lcdvrs */
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,temp);
d7323 3
d7327 19
a7345 3
    if(SiS_Pr->UseCustomMode) {
       temp &= 0xf0;
       temp |= (SiS_Pr->CVSyncEnd & 0x0f);
d7348 1
a7348 3
#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdvre[3:0] 0x%x\n", (temp & 0x0f));
#endif
d7350 12
a7361 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,temp);
d7363 4
a7366 37
    /* Code from 630/301B (I+II) BIOS */

#ifdef SIS300
    if(!SiS_Pr->UseCustomMode) {
       if( ( ( (HwInfo->jChipType == SIS_630) ||
               (HwInfo->jChipType == SIS_730) ) &&
             (HwInfo->jChipRevision > 2) )  &&
           (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) &&
           (!(SiS_Pr->SiS_SetFlag & LCDVESATiming))  &&
           (!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) ) {
          if(ModeNo == 0x13) {
             SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,0xB9);
             SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,0xCC);
             SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xA6);
          } else {
             if((crt2crtc & 0x3F) == 4) {
                SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x2B);
                SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x13);
                SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,0xE5);
                SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,0x08);
                SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xE2);
             }
          }
       }

       if(HwInfo->jChipType < SIS_315H) {
          if(SiS_Pr->SiS_LCDTypeInfo == 0x0c) {
             crt2crtc &= 0x1f;
             tempcx = 0;
             if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
                if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
                   tempcx += 7;
                }
             }
             tempcx += crt2crtc;
             if(crt2crtc >= 4) {
                SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xff);
d7368 5
d7374 4
a7377 11
             if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
                if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
                   if(crt2crtc == 4) {
                      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x28);
                   }
                }
             }
             SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x18);
             SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,atable[tempcx]);
          }
       }
a7378 14
#endif

    tempcx = SiS_Pr->SiS_HT;
    tempbx = SiS_Pr->SiS_HDE;
    if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
       tempcx >>= 1;
       tempbx >>= 1;
    }
    tempcx = (tempcx - tempbx) >> 2;     		  /* (HT - HDE) >> 2 */
    tempbx += 7; 		           		  /* lcdhdee         */
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)          tempbx += 2;
    if(SiS_IsDualLink(SiS_Pr, HwInfo)) 	       	   	 tempbx++;
    if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) tempbx++;

d7380 2
a7381 7

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdhdee 0x%x\n", tempbx);
#endif

    temp = tempbx & 0x00FF;    			          /* RHEQPLE = lcdhdee */
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x23,temp);
d7386 6
a7391 5
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)          temp += 2;
    if(SiS_IsDualLink(SiS_Pr, HwInfo))        		 temp++;
    if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) temp++;
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1F,temp);  	  /* RHBLKE = lcdhdes[7:0] */
    SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x20,0x0F);	  /* lcdhdes [11:8] */
d7395 5
a7399 6

    if(SiS_Pr->UseCustomMode) {
       tempbx = SiS_Pr->CHSyncStart + 7;
       if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)          tempbx += 2;
       if(SiS_IsDualLink(SiS_Pr, HwInfo))          	    tempbx++;
       if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) tempbx++;
d7401 2
a7402 15

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdhrs 0x%x\n", tempbx);
#endif

    temp = tempbx & 0x00FF;            		          /* RHBURSTS = lcdhrs */
    if(!SiS_Pr->UseCustomMode) {
       if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
          if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
             if(SiS_Pr->SiS_HDE == 1280) temp = 0x47;
          }
       }
    }
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1C,temp);
    temp = (tempbx & 0x0F00) >> 4;
d7408 18
a7425 6

    if(SiS_Pr->UseCustomMode) {
       tempbx = SiS_Pr->CHSyncEnd + 7;
       if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)          tempbx += 2;
       if(SiS_IsDualLink(SiS_Pr, HwInfo))   	            tempbx++;
       if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) tempbx++;
d7427 2
d7430 2
a7431 3
#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdhre 0x%x\n", tempbx);
#endif
d7433 4
a7436 2
    temp = tempbx & 0x00FF;            		          /* RHSYEXP2S = lcdhre */
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x21,temp);
d7438 4
a7441 8
    SiS_SetGroup2_Tail(SiS_Pr, ModeNo);

#ifdef SIS300
    SiS_Set300Part2Regs(SiS_Pr, HwInfo, ModeIdIndex,
                        RefreshRateTableIndex, ModeNo);
#endif

  } /* HwInfo */
d7444 5
a7448 7
/*********************************************/
/*         SET PART 3 REGISTER GROUP         */
/*********************************************/

static void
SiS_SetGroup3(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
              PSIS_HW_INFO HwInfo)
d7450 3
a7452 2
  USHORT modeflag, i;
  const UCHAR  *tempdi;
d7454 2
a7455 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) return;
d7458 1
a7458 1
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
d7460 1
a7460 5
     if(SiS_Pr->UseCustomMode) {
        modeflag = SiS_Pr->CModeFlag;
     } else {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     }
d7463 3
a7465 3
#ifndef SIS_CP
  SiS_SetReg(SiS_Pr->SiS_Part3Port,0x00,0x00);
#endif
d7467 4
a7470 10
#ifdef SIS_CP
  SIS_CP_INIT301_CP
#endif

  if(SiS_Pr->SiS_TVMode & TVSetPAL) {
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x13,0xFA);
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x14,0xC8);
  } else {
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x13,0xF5);
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x14,0xB7);
d7473 4
a7476 4
  if(SiS_Pr->SiS_TVMode & TVSetPALM) {
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x13,0xFA);
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x14,0xC8);
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x3D,0xA8);
d7478 2
a7479 17

  tempdi = NULL;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     tempdi = SiS_Pr->SiS_HiTVGroup3Data;
     if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
        tempdi = SiS_Pr->SiS_HiTVGroup3Simu;
#if 0
        if(!(modeflag & Charx8Dot)) {
           tempdi = SiS_Pr->SiS_HiTVGroup3Text;
        }
#endif	
     }
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
     if(!(SiS_Pr->SiS_TVMode & TVSetYPbPr525i)) {
        tempdi = SiS_HiTVGroup3_1;
        if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) tempdi = SiS_HiTVGroup3_2;
     }
d7481 2
a7482 9
  if(tempdi) {
     for(i=0; i<=0x3E; i++) {
        SiS_SetReg(SiS_Pr->SiS_Part3Port,i,tempdi[i]);
     }
     if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) {
	if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) {
	   SiS_SetReg(SiS_Pr->SiS_Part3Port,0x28,0x3f);
	}
     }
d7484 3
d7488 10
a7497 2
#ifdef SIS_CP
  SIS_CP_INIT301_CP2
d7499 4
a7502 1
}
d7504 4
a7507 3
/*********************************************/
/*         SET PART 4 REGISTER GROUP         */
/*********************************************/
d7509 1
a7509 5
#ifdef SIS315H
static void
SiS_SetGroup4_C_ELV(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   USHORT temp, temp1;
d7511 12
a7522 1
   if(!(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV))) return;
d7524 16
a7539 18
   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x3a,0x08);
   temp = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x3a);
   if(!(temp & 0x01)) {
      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x3a,0xdf);
      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x25,0xfc);
      if(HwInfo->jChipType < SIS_661) {
         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x25,0xf8);
      }
      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x0f,0xfb);
      temp = 0;
      if(!(SiS_Pr->SiS_TVMode & TVSetYPbPr750p)) {
         temp |= 0x0002;
         if(!(SiS_Pr->SiS_TVMode & TVSetYPbPr525p)) {
	    temp ^= 0x0402;
	    if(!(SiS_Pr->SiS_TVMode & TVSetHiVision)) {
	       temp ^= 0x0002;
	    }
	 }
d7541 9
a7549 10
      if(HwInfo->jChipType >= SIS_661) {
         temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x39);
         if(temp1 & 0x01) temp |= 0x10;
         if(temp1 & 0x02) temp |= 0x01;
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xec,(temp & 0xff));
      } else {
         temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x3b) & 0x03;
	 if(temp1 == 0x01) temp |= 0x01;
	 if(temp1 == 0x03) temp |= 0x04;  /* ? why not 0x10? */
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xea,(temp & 0xff));
d7551 5
a7555 3
      SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x3a,0xfb,(temp >> 8));
   }
}
d7558 1
a7558 35
static void
SiS_SetCRT2VCLK(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                 USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
  USHORT vclkindex;
  USHORT temp, reg1, reg2;

  if(SiS_Pr->UseCustomMode) {
     reg1 = SiS_Pr->CSR2B;
     reg2 = SiS_Pr->CSR2C;
  } else {
     vclkindex = SiS_GetVCLK2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                                 HwInfo);
     reg1 = SiS_Pr->SiS_VBVCLKData[vclkindex].Part4_A;
     reg2 = SiS_Pr->SiS_VBVCLKData[vclkindex].Part4_B;
  }

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0a,0x57);
 	SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0b,0x46);
	SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1f,0xf6);
     } else {
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0a,reg1);
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0b,reg2);
     }
  } else {
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0a,0x01);
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0b,reg2);
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0a,reg1);
  }
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x12,0x00);
  temp = 0x08;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) temp |= 0x20;
  SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x12,temp);
d7561 6
a7566 4
/* Set 301 VGA2 registers */
static void
SiS_SetGroup4(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
  	      USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
d7571 4
a7574 3
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
a7575 4
     if(SiS_Pr->UseCustomMode) {
        modeflag = SiS_Pr->CModeFlag;
	resinfo = 0;
     } else {
a7577 1
     }
d7580 5
a7584 6
  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
           SiS_SetReg(SiS_Pr->SiS_Part4Port,0x24,0x0e);
        }
     }
d7587 4
a7590 4
  if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302LV)) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x10,0x9f);
     }
d7593 9
a7601 14
  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
        if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	   if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
	      SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x27,0x2c);
	   }
#ifdef SET_EMI
	   if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	      SiS_SetReg(SiS_Pr->SiS_Part4Port,0x2a,0x00);
	      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
	      SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x10);
	   }
#endif
	}
a7602 1
     }
d7606 1
a7606 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x13,temp);
d7610 1
a7610 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x14,temp);
d7616 1
a7616 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x16,temp);
d7625 1
a7625 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x17,temp);
d7628 1
a7628 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x15,temp);
d7630 1
d7633 63
a7695 2
  if(HwInfo->jChipType >= SIS_661) {
     if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
d7698 139
a7836 8
  temp = 0xA0;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     temp = 0;
     if(tempbx > 800) {
        temp = 0xA0;
        if(tempbx != 1024) {
           temp = 0xC0;
           if(tempbx != 1280) temp = 0;
d7838 64
a7901 5
     }
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(tempbx <= 800) {
        temp = 0x80;
     }
d7903 3
a7905 5
     temp = 0x80;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        temp = 0;
        if(tempbx > 800) temp = 0x60;
     }
d7908 77
a7984 4
  if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p | TVSetYPbPr750p)) {
     temp = 0;
     if(SiS_Pr->SiS_VGAHDE == 1024) temp = 0x20;
  }
d7986 13
a7998 3
  if(HwInfo->jChipType < SIS_661) {
     if(SiS_IsDualLink(SiS_Pr, HwInfo)) temp = 0;
  }
d8000 1
a8000 4
  if(SiS_Pr->SiS_VBType & VB_SIS301) {
     if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024)
        temp |= 0x0A;
  }
d8002 1
a8002 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0E,0x10,temp);
d8004 1
a8004 1
  tempebx = SiS_Pr->SiS_VDE;
d8006 1
a8006 3
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     if(!(temp & 0xE0)) tempebx >>=1;
  }
d8008 39
a8046 3
  tempcx = SiS_Pr->SiS_RVBHRS;
  temp = tempcx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x18,temp);
d8048 1
a8048 7
  tempeax = SiS_Pr->SiS_VGAVDE;
  tempcx |= 0x4000;
  if(tempeax <= tempebx) {
     tempcx ^= 0x4000;
  } else {
     tempeax -= tempebx;
  }
d8050 13
a8062 4
  templong = (tempeax * 256 * 1024) % tempebx;
  tempeax = (tempeax * 256 * 1024) / tempebx;
  tempebx = tempeax;
  if(templong != 0) tempebx++;
d8064 1
a8064 4
  temp = (USHORT)(tempebx & 0x000000FF);
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1B,temp);
  temp = (USHORT)((tempebx & 0x0000FF00) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1A,temp);
d8066 16
a8081 55
  tempbx = (USHORT)(tempebx >> 16);
  temp = tempbx & 0x00FF;
  temp <<= 4;
  temp |= ((tempcx & 0xFF00) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x19,temp);

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {

     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1C,0x28);

     tempbx = 0;
     tempax = SiS_Pr->SiS_VGAHDE;
     if(modeflag & HalfDCLK) 		tempax >>= 1;
     if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempax >>= 1;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	if(tempax > 800) tempax -= 800;
     } else /* if(SiS_Pr->SiS_VBInfo & TvNoHiviNoYPbPr) */ {    /* 651+301C */
        if(tempax > 800) {
	   tempbx = 8;
           if(tempax == 1024) tempax *= 25;
           else	              tempax *= 20;
	   temp = tempax % 32;
	   tempax /= 32;
	   tempax--;
	   if (temp!=0) tempax++;
        }
     }
     tempax--;
     temp = ((tempax & 0xFF00) >> 8) & 0x03;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoYPbPrHiVision) {	/* From 1.10.7w */
	if(ModeNo > 0x13) {					/* From 1.10.7w */
	   if(resinfo == SIS_RI_1024x768) tempax = 0x1f;	/* From 1.10.7w */
	   /* ax normally 0x1e */				/* From 1.10.7w */
	}							/* From 1.10.7w */
     }								/* From 1.10.7w */
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1D,tempax & 0x00FF);
     temp <<= 4;
     temp |= tempbx;
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1E,temp);

     if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	if(IS_SIS550650740660) {
	   temp = 0x0026;  /* 1.10.7w; 1.10.8r; needs corresponding code in Dis/EnableBridge! */
	} else {
	   temp = 0x0036;
	}
     } else {
	temp = 0x0036;
     }
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        if(!(SiS_Pr->SiS_TVMode & (TVSetNTSC1024 | TVSetHiVision | TVSetYPbPr750p | TVSetYPbPr525p))) {
	   temp |= 0x01;
	   if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
	      if(!(SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) {
  	         temp &= 0xFE;
d8084 1
a8085 2
     }
     SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x1F,0xC0,temp);
d8087 3
a8089 25
     tempbx = SiS_Pr->SiS_HT;
     if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
     tempbx >>= 1;
     tempbx -= 2;
     temp = ((tempbx & 0x0700) >> 8) << 3;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x21,0xC0,temp);
     temp = tempbx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x22,temp);

     if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
           SiS_SetReg(SiS_Pr->SiS_Part4Port,0x24,0x0e);
	   /* LCD-too-dark-error-source, see FinalizeLCD() */
	}
	if(HwInfo->jChipType >= SIS_315H) {
	   if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
	      SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x27,0x2c);
	   }
	}
#ifdef SET_EMI
	if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x2a,0x00);
	   SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x10);
	}
d8091 1
a8091 5
     }

  }  /* 301B */

  SiS_SetCRT2VCLK(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d8094 5
a8098 8
/*********************************************/
/*         SET PART 5 REGISTER GROUP         */
/*********************************************/

/* Set 301 Palette address port registers */
static void
SiS_SetGroup5(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
              PSIS_HW_INFO HwInfo)
d8103 5
a8107 5
  if(SiS_Pr->SiS_ModeType == ModeVGA) {
     if(!(SiS_Pr->SiS_VBInfo & (SetInSlaveMode | LoadDACFlag))) {
        SiS_EnableCRT2(SiS_Pr);
        SiS_LoadDAC(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
     }
d8109 1
d8112 4
a8115 7
/*********************************************/
/*     MODIFY CRT1 GROUP FOR SLAVE MODE      */
/*********************************************/

static void
SiS_ModCRT1CRTC(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
d8117 2
a8118 2
  USHORT tempah,i,modeflag,j;
  USHORT ResIndex,DisplayType;
d8122 1
a8122 1
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
d8124 1
a8124 1
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d8127 2
a8128 4
  if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
     (SiS_Pr->SiS_CustomT == CUT_BARCO1024) ||
     (SiS_Pr->SiS_CustomT == CUT_PANEL848))
     return;
d8130 1
a8130 2
  if(!(SiS_GetLVDSCRT1Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                          &ResIndex, &DisplayType))) return;
d8132 3
a8134 2
  if(HwInfo->jChipType < SIS_315H) {
     if(SiS_Pr->SiS_SetFlag & SetDOSMode) return;
a8172 10
    case 40: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x768_1;          break;
    case 41: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x768_1_H;        break;
    case 42: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x768_2;          break;
    case 43: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x768_2_H;        break;
    case 50: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_1;           break;
    case 51: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_1_H;         break;
    case 52: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_2;           break;
    case 53: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_2_H;         break;
    case 54: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_3;           break;
    case 55: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_3_H;         break;
d8179 2
a8180 2
  tempah = (LVDSCRT1Ptr + ResIndex)->CR[0];
  SiS_SetReg(SiS_Pr->SiS_P3d4,0x00,tempah);
d8183 2
a8184 2
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3d4,i,tempah);
d8187 2
a8188 2
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3d4,i,tempah);
d8191 2
a8192 2
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3d4,i,tempah);
d8195 2
a8196 2
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3d4,i,tempah);
d8199 2
a8200 2
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3c4,i,tempah);
d8203 1
a8203 1
  tempah = (LVDSCRT1Ptr + ResIndex)->CR[14];
d8205 1
a8205 1
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0x1f,tempah);
d8207 1
a8207 1
  tempah = (LVDSCRT1Ptr + ResIndex)->CR[14];
d8210 3
a8212 1
  if(modeflag & DoubleScanMode)  tempah |= 0x080;
d8215 1
a8215 1
  /* 650/LVDS BIOS - doesn't make sense */
d8220 92
d8313 1
d8315 8
a8322 3
/*********************************************/
/*              SET CRT2 ECLK                */
/*********************************************/
d8324 6
a8329 7
static void
SiS_SetCRT2ECLK(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
           USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT clkbase, vclkindex=0;
  UCHAR  sr2b, sr2c;
d8331 3
a8333 8
  if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) || (SiS_Pr->SiS_IF_DEF_TRUMPION == 1)) {
	SiS_Pr->SiS_SetFlag &= (~ProgrammingCRT2);
        if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK & 0x3f) == 2) {
	   RefreshRateTableIndex--;
	}
	vclkindex = SiS_GetVCLK2Ptr(SiS_Pr, ModeNo, ModeIdIndex,
                                    RefreshRateTableIndex, HwInfo);
	SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
d8335 2
a8336 2
        vclkindex = SiS_GetVCLK2Ptr(SiS_Pr, ModeNo, ModeIdIndex,
                                    RefreshRateTableIndex, HwInfo);
d8339 58
a8396 2
  sr2b = SiS_Pr->SiS_VCLKData[vclkindex].SR2B;
  sr2c = SiS_Pr->SiS_VCLKData[vclkindex].SR2C;
d8398 11
a8408 6
  if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) || (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
     if((ROMAddr) && SiS_Pr->SiS_UseROM) {
	if(ROMAddr[0x220] & 0x01) {
           sr2b = ROMAddr[0x227];
	   sr2c = ROMAddr[0x228];
	}
d8412 14
a8425 1
  clkbase = 0x02B;
d8428 1
a8428 1
    	clkbase += 3;
d8431 30
d8462 10
a8471 9
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x20);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase,sr2b);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase+1,sr2c);
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x10);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase,sr2b);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase+1,sr2c);
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x00);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase,sr2b);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase+1,sr2c);
d8473 1
d8475 1
a8475 3
/*********************************************/
/*           SET UP CHRONTEL CHIPS           */
/*********************************************/
d8477 3
a8479 2
static void
SiS_SetCHTVReg(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
d8487 1
a8487 1
     tempcl = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d8489 1
a8489 1
     tempcl = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d8492 2
a8493 2
  if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) TVType += 1;
  if(SiS_Pr->SiS_TVMode & TVSetPAL) {
d8495 2
a8496 4
	if(SiS_Pr->SiS_ModeType > ModeVGA) {
	   if(SiS_Pr->SiS_CHSOverScan) TVType = 8;
	}
	if(SiS_Pr->SiS_TVMode & TVSetPALM) {
d8498 2
a8499 2
		if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) TVType += 1;
	} else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
d8501 1
a8501 1
		if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) TVType += 1;
d8520 1
a8520 3
#ifdef SIS300

     /* Chrontel 7005 - I assume that it does not come with a 315 series chip */
d8522 1
a8522 1
     /* We don't support modes >800x600 */
d8525 3
a8527 3
     if(SiS_Pr->SiS_TVMode & TVSetPAL) {
    	SiS_SetCH700x(SiS_Pr,0x4304);   /* 0x40=76uA (PAL); 0x03=15bit non-multi RGB*/
    	SiS_SetCH700x(SiS_Pr,0x6909);	/* Black level for PAL (105)*/
d8529 2
a8530 2
    	SiS_SetCH700x(SiS_Pr,0x0304);   /* upper nibble=71uA (NTSC), 0x03=15bit non-multi RGB*/
    	SiS_SetCH700x(SiS_Pr,0x7109);	/* Black level for NTSC (113)*/
d8534 1
a8534 1
     tempbx=((temp&0x00FF)<<8)|0x00;	/* Mode register */
d8537 1
a8537 1
     tempbx=((temp&0x00FF)<<8)|0x07;	/* Start active video register */
d8540 1
a8540 1
     tempbx=((temp&0x00FF)<<8)|0x08;	/* Position overflow register */
d8543 1
a8543 1
     tempbx=((temp&0x00FF)<<8)|0x0A;	/* Horiz Position register */
d8546 1
a8546 1
     tempbx=((temp&0x00FF)<<8)|0x0B;	/* Vertical Position register */
d8549 1
a8549 1
     /* Set minimum flicker filter for Luma channel (SR1-0=00),
d8556 1
a8556 1
     /* Set video bandwidth
d8565 1
a8565 1
     /* Register 0x3D does not exist in non-macrovision register map
d8568 1
a8568 3
#ifndef SIS_CP
     SiS_SetCH70xx(SiS_Pr,0x003D);
#endif
d8570 1
a8570 1
     /* Register 0x10 only contains 1 writable bit (S0) for sensing,
d8575 1
a8575 1
     /* Register 0x11 only contains 3 writable bits (S0-S2) for
d8580 1
a8580 1
     /* Clear DSEN
d8584 2
a8585 2
     if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {		/* ---- NTSC ---- */
       if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) {
d8589 13
a8601 11
         } else if(resindex == 0x05) {    		/* 800x600 overscan: Mode 23 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0118,0xF0);	/* 0x18-0x1f: FSCI 469,762,048 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0C19,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001A,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001B,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001C,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001D,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001E,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001F,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x0120,0xEF);       /* Loop filter on for mode 23 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0021,0xFE);       /* ACIV off, need to set FSCI */
d8607 13
a8619 15
         } else if(resindex == 0x05) {   		 /* ----- 800x600 underscan: Mode 24 */
#if 0
           SiS_SetCH70xxANDOR(SiS_Pr,0x0118,0xF0);       /* (FSCI was 0x1f1c71c7 - this is for mode 22) */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0919,0xF0);	 /* FSCI for mode 24 is 428,554,851 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x081A,0xF0);       /* 198b3a63 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0b1B,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x041C,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x011D,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x061E,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x051F,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x0020,0xEF);       /* loop filter off for mode 24 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0021,0xFE);	 /* ACIV off, need to set FSCI */
#endif     /* All alternatives wrong (datasheet wrong?), don't use FSCI */
	   SiS_SetCH70xxANDOR(SiS_Pr,0x0020,0xEF); 	 /* loop filter off */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0121,0xFE);
d8622 3
a8624 3
     } else {						/* ---- PAL ---- */
           /* We don't play around with FSCI in PAL mode */
         if(resindex == 0x04) {
a8631 2
     
#endif  /* 300 */
d8635 1
a8635 3
     /* Chrontel 7019 - assumed that it does not come with a 300 series chip */

#ifdef SIS315H
d8637 1
a8637 1
     /* We don't support modes >1024x768 */
d8641 1
a8641 4
     if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
        temp |= 0x10;
     }
     tempbx=((temp & 0x00FF) << 8) | 0x00;
d8645 1
a8645 1
     tempbx=((temp & 0x00FF) << 8) | 0x01;
d8649 1
a8649 1
     tempbx=((temp & 0x00FF) << 8) | 0x02;
d8653 1
a8653 1
     tempbx=((temp & 0x00FF) << 8) | 0x04;
d8657 1
a8657 1
     tempbx=((temp & 0x00FF) << 8) | 0x03;
d8661 1
a8661 1
     tempbx=((temp & 0x00FF) << 8) | 0x05;
d8665 1
a8665 1
     tempbx=((temp & 0x00FF) << 8) | 0x06;
d8669 1
a8669 4
     if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
	temp = 0x66;
     }
     tempbx=((temp & 0x00FF) << 8) | 0x07;
d8673 1
a8673 1
     tempbx=((temp & 0x00FF) << 8) | 0x08;
d8677 1
a8677 1
     tempbx=((temp & 0x00FF) << 8) | 0x15;
d8681 1
a8681 21
     tempbx=((temp & 0x00FF) << 8) | 0x1f;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[11];
     tempbx=((temp & 0x00FF) << 8) | 0x0c;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[12];
     tempbx=((temp & 0x00FF) << 8) | 0x0d;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[13];
     tempbx=((temp & 0x00FF) << 8) | 0x0e;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[14];
     tempbx=((temp & 0x00FF) << 8) | 0x0f;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[15];
     tempbx=((temp & 0x00FF) << 8) | 0x10;
d8684 3
a8686 49
     temp = SiS_GetCH701x(SiS_Pr,0x21) & ~0x02;
     /* D1 should be set for PAL, PAL-N and NTSC-J,
        but I won't do that for PAL unless somebody
	tells me to do so. Since the BIOS uses
	non-default CIV values and blacklevels,
	this might be compensated anyway.
      */
     if(SiS_Pr->SiS_TVMode & (TVSetPALN | TVSetNTSCJ)) temp |= 0x02;
     SiS_SetCH701x(SiS_Pr,((temp << 8) | 0x21));

#endif	/* 315 */

  }

#ifdef SIS_CP
  SIS_CP_INIT301_CP3
#endif

}

void
SiS_Chrontel701xBLOn(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT temp;

  /* Enable Chrontel 7019 LCD panel backlight */
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
     if(HwInfo->jChipType == SIS_740) {
        SiS_SetCH701x(SiS_Pr,0x6566);
     } else {
        temp = SiS_GetCH701x(SiS_Pr,0x66);
        temp |= 0x20;
	SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
     }
  }
}

void
SiS_Chrontel701xBLOff(SiS_Private *SiS_Pr)
{
  USHORT temp;

  /* Disable Chrontel 7019 LCD panel backlight */
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
     temp = SiS_GetCH701x(SiS_Pr,0x66);
     temp &= 0xDF;
     SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
  }
}
d8688 3
a8690 1
#ifdef SIS315H  /* ----------- 315 series only ---------- */
d8692 3
a8694 12
static void
SiS_ChrontelPowerSequencing(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR regtable[]      = { 0x67, 0x68, 0x69, 0x6a, 0x6b };
  UCHAR table1024_740[] = { 0x01, 0x02, 0x01, 0x01, 0x01 };
  UCHAR table1400_740[] = { 0x01, 0x6e, 0x01, 0x01, 0x01 };
  UCHAR asus1024_740[]  = { 0x19, 0x6e, 0x01, 0x19, 0x09 };
  UCHAR asus1400_740[]  = { 0x19, 0x6e, 0x01, 0x19, 0x09 };
  UCHAR table1024_650[] = { 0x01, 0x02, 0x01, 0x01, 0x02 };
  UCHAR table1400_650[] = { 0x01, 0x02, 0x01, 0x01, 0x02 };
  UCHAR *tableptr = NULL;
  int i;
d8696 3
a8698 1
  /* Set up Power up/down timing */
d8700 3
a8702 19
  if(HwInfo->jChipType == SIS_740) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        if(SiS_Pr->SiS_CustomT == CUT_ASUSL3000D) tableptr = asus1024_740;
        else    			          tableptr = table1024_740;
     } else if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) ||
               (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) ||
	       (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)) {
	if(SiS_Pr->SiS_CustomT == CUT_ASUSL3000D) tableptr = asus1400_740;
        else					  tableptr = table1400_740;
     } else return;
  } else {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        tableptr = table1024_650;
     } else if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) ||
               (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) ||
	       (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)) {
        tableptr = table1400_650;
     } else return;
  }
a8703 2
  for(i=0; i<5; i++) {
     SiS_SetCH701x(SiS_Pr,(tableptr[i] << 8) | regtable[i]);
d8707 4
a8710 2
static void
SiS_SetCH701xForLCD(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d8712 6
a8717 18
  UCHAR regtable[]      = { 0x1c, 0x5f, 0x64, 0x6f, 0x70, 0x71,
                            0x72, 0x73, 0x74, 0x76, 0x78, 0x7d, 0x66 };
  UCHAR table1024_740[] = { 0x60, 0x02, 0x00, 0x07, 0x40, 0xed,
                            0xa3, 0xc8, 0xc7, 0xac, 0xe0, 0x02, 0x44 };
  UCHAR table1280_740[] = { 0x60, 0x03, 0x11, 0x00, 0x40, 0xe3,
   			    0xad, 0xdb, 0xf6, 0xac, 0xe0, 0x02, 0x44 };
  UCHAR table1400_740[] = { 0x60, 0x03, 0x11, 0x00, 0x40, 0xe3,
                            0xad, 0xdb, 0xf6, 0xac, 0xe0, 0x02, 0x44 };
  UCHAR table1600_740[] = { 0x60, 0x04, 0x11, 0x00, 0x40, 0xe3,
  			    0xad, 0xde, 0xf6, 0xac, 0x60, 0x1a, 0x44 };
  UCHAR table1024_650[] = { 0x60, 0x02, 0x00, 0x07, 0x40, 0xed,
                            0xa3, 0xc8, 0xc7, 0xac, 0x60, 0x02 };
  UCHAR table1280_650[] = { 0x60, 0x03, 0x11, 0x00, 0x40, 0xe3,
   		   	    0xad, 0xdb, 0xf6, 0xac, 0xe0, 0x02 };
  UCHAR table1400_650[] = { 0x60, 0x03, 0x11, 0x00, 0x40, 0xef,
                            0xad, 0xdb, 0xf6, 0xac, 0x60, 0x02 };
  UCHAR table1600_650[] = { 0x60, 0x04, 0x11, 0x00, 0x40, 0xe3,
  			    0xad, 0xde, 0xf6, 0xac, 0x60, 0x1a };
d8722 2
a8723 10
  if(HwInfo->jChipType == SIS_740) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        tableptr = table1024_740;
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
        tableptr = table1280_740;
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
        tableptr = table1400_740;
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
        tableptr = table1600_740;
     } else return;
d8725 1
a8725 9
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        tableptr = table1024_650;
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
        tableptr = table1280_650;
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
        tableptr = table1400_650;
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
        tableptr = table1600_650;
     } else return;
a8726 1

d8731 1
a8731 1
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) return;
d8733 1
a8733 4
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) return;
	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) return;
     } else if(tempbh == 0xde) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) return;
d8736 1
a8736 7

  if(HwInfo->jChipType == SIS_740) {
     tempbh = 0x0d;
  } else {
     tempbh = 0x0c;
  }
  for(i = 0; i < tempbh; i++) {
d8739 1
a8739 1
  SiS_ChrontelPowerSequencing(SiS_Pr,HwInfo);
d8742 19
a8760 1
  SiS_SetCH701x(SiS_Pr,(tempbh << 8) | 0x1e);
d8762 2
a8763 11
  if(HwInfo->jChipType == SIS_740) {
     tempbh = SiS_GetCH701x(SiS_Pr,0x1c);
     tempbh &= 0xfb;
     SiS_SetCH701x(SiS_Pr,(tempbh << 8) | 0x1c);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2d,0x03);
     tempbh = SiS_GetCH701x(SiS_Pr,0x64);
     tempbh |= 0x40;
     SiS_SetCH701x(SiS_Pr,(tempbh << 8) | 0x64);
     tempbh = SiS_GetCH701x(SiS_Pr,0x03);
     tempbh &= 0x3f;
     SiS_SetCH701x(SiS_Pr,(tempbh << 8) | 0x03);
d8767 2
a8768 2
static void
SiS_ChrontelResetVSync(SiS_Private *SiS_Pr)
d8770 1
a8770 1
  unsigned char temp, temp1;
d8772 6
a8777 10
  temp1 = SiS_GetCH701x(SiS_Pr,0x49);
  SiS_SetCH701x(SiS_Pr,0x3e49);
  temp = SiS_GetCH701x(SiS_Pr,0x47);
  temp &= 0x7f;	/* Use external VSYNC */
  SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
  SiS_LongDelay(SiS_Pr,3);
  temp = SiS_GetCH701x(SiS_Pr,0x47);
  temp |= 0x80;	/* Use internal VSYNC */
  SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
  SiS_SetCH701x(SiS_Pr,(temp1 << 8) | 0x49);
d8781 1
a8781 1
SiS_Chrontel701xOn(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d8786 1
a8786 6
     if(HwInfo->jChipType == SIS_740) {
        temp = SiS_GetCH701x(SiS_Pr,0x1c);
        temp |= 0x04;	/* Invert XCLK phase */
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x1c);
     }
     if(SiS_IsYPbPr(SiS_Pr, HwInfo)) {
d8789 1
a8789 1
	temp |= 0x80;	/* Enable YPrPb (HDTV) */
d8792 1
a8792 1
     if(SiS_IsChScart(SiS_Pr, HwInfo)) {
d8795 1
a8795 1
	temp |= 0xc0;	/* Enable SCART + CVBS */
d8798 27
a8824 19
     if(HwInfo->jChipType == SIS_740) {
        SiS_ChrontelResetVSync(SiS_Pr);
        SiS_SetCH701x(SiS_Pr,0x2049);   /* Enable TV path */
     } else {
        SiS_SetCH701x(SiS_Pr,0x2049);   /* Enable TV path */
        temp = SiS_GetCH701x(SiS_Pr,0x49);
        if(SiS_IsYPbPr(SiS_Pr,HwInfo)) {
           temp = SiS_GetCH701x(SiS_Pr,0x73);
	   temp |= 0x60;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x73);
        }
        temp = SiS_GetCH701x(SiS_Pr,0x47);
        temp &= 0x7f;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
        SiS_LongDelay(SiS_Pr,2);
        temp = SiS_GetCH701x(SiS_Pr,0x47);
        temp |= 0x80;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
     }
d8829 1
a8829 1
SiS_Chrontel701xOff(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
a8832 1
  /* Complete power down of LVDS */
a8833 6
     if(HwInfo->jChipType == SIS_740) {
        SiS_LongDelay(SiS_Pr,1);
	SiS_GenericDelay(SiS_Pr,0x16ff);
	SiS_SetCH701x(SiS_Pr,0xac76);
	SiS_SetCH701x(SiS_Pr,0x0066);
     } else {
d8835 1
a8839 1
     }
d8843 2
a8844 2
static void
SiS_ChrontelResetDB(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d8846 4
a8849 46
     USHORT temp;

     if(HwInfo->jChipType == SIS_740) {

        temp = SiS_GetCH701x(SiS_Pr,0x4a);  /* Version ID */
        temp &= 0x01;
        if(!temp) {

           if(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo)) {
	      temp = SiS_GetCH701x(SiS_Pr,0x49);
	      SiS_SetCH701x(SiS_Pr,0x3e49);
	   }
	   /* Reset Chrontel 7019 datapath */
           SiS_SetCH701x(SiS_Pr,0x1048);
           SiS_LongDelay(SiS_Pr,1);
           SiS_SetCH701x(SiS_Pr,0x1848);

	   if(SiS_WeHaveBacklightCtrl(SiS_Pr, HwInfo)) {
	      SiS_ChrontelResetVSync(SiS_Pr);
	      SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x49);
	   }

        } else {

	   /* Clear/set/clear GPIO */
           temp = SiS_GetCH701x(SiS_Pr,0x5c);
	   temp &= 0xef;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x5c);
	   temp = SiS_GetCH701x(SiS_Pr,0x5c);
	   temp |= 0x10;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x5c);
	   temp = SiS_GetCH701x(SiS_Pr,0x5c);
	   temp &= 0xef;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x5c);
	   temp = SiS_GetCH701x(SiS_Pr,0x61);
	   if(!temp) {
	      SiS_SetCH701xForLCD(SiS_Pr, HwInfo);
	   }
        }

     } else { /* 650 */
        /* Reset Chrontel 7019 datapath */
        SiS_SetCH701x(SiS_Pr,0x1048);
        SiS_LongDelay(SiS_Pr,1);
        SiS_SetCH701x(SiS_Pr,0x1848);
     }
d8853 1
a8853 1
SiS_ChrontelInitTVVSync(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d8857 11
a8867 21
     if(HwInfo->jChipType == SIS_740) {

        if(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo)) {
           SiS_ChrontelResetVSync(SiS_Pr);
        }

     } else {

        SiS_SetCH701x(SiS_Pr,0xaf76);  /* Power up LVDS block */
        temp = SiS_GetCH701x(SiS_Pr,0x49);
        temp &= 1;
        if(temp != 1) {  /* TV block powered? (0 = yes, 1 = no) */
	   temp = SiS_GetCH701x(SiS_Pr,0x47);
	   temp &= 0x70;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);  /* enable VSYNC */
	   SiS_LongDelay(SiS_Pr,3);
	   temp = SiS_GetCH701x(SiS_Pr,0x47);
	   temp |= 0x80;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);  /* disable VSYNC */
        }

d8871 3
a8873 2
static void
SiS_ChrontelDoSomething3(SiS_Private *SiS_Pr, USHORT ModeNo, PSIS_HW_INFO HwInfo)
d8877 20
a8896 43
     if(HwInfo->jChipType == SIS_740) {

        temp = SiS_GetCH701x(SiS_Pr,0x61);
        if(temp < 1) {
           temp++;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x61);
        }
        SiS_SetCH701x(SiS_Pr,0x4566);  /* Panel power on */
        SiS_SetCH701x(SiS_Pr,0xaf76);  /* All power on */
        SiS_LongDelay(SiS_Pr,1);
        SiS_GenericDelay(SiS_Pr,0x16ff);

     } else {  /* 650 */

        temp1 = 0;
        temp = SiS_GetCH701x(SiS_Pr,0x61);
        if(temp < 2) {
           temp++;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x61);
	   temp1 = 1;
        }
        SiS_SetCH701x(SiS_Pr,0xac76);
        temp = SiS_GetCH701x(SiS_Pr,0x66);
        temp |= 0x5f;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
        if(ModeNo > 0x13) {
           if(SiS_WeHaveBacklightCtrl(SiS_Pr, HwInfo)) {
	      SiS_GenericDelay(SiS_Pr,0x3ff);
	   } else {
	      SiS_GenericDelay(SiS_Pr,0x2ff);
	   }
        } else {
           if(!temp1)
	      SiS_GenericDelay(SiS_Pr,0x2ff);
        }
        temp = SiS_GetCH701x(SiS_Pr,0x76);
        temp |= 0x03;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x76);
        temp = SiS_GetCH701x(SiS_Pr,0x66);
        temp &= 0x7f;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
        SiS_LongDelay(SiS_Pr,1);

d8898 7
d8907 2
a8908 2
static void
SiS_ChrontelDoSomething2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d8918 1
a8918 1
       temp &= 0x04;  /* PLL stable? -> bail out */
d8921 1
a8921 6
       if(HwInfo->jChipType == SIS_740) {
          /* Power down LVDS output, PLL normal operation */
          SiS_SetCH701x(SiS_Pr,0xac76);
       }

       SiS_SetCH701xForLCD(SiS_Pr,HwInfo);
d8925 1
a8925 1
	   SiS_ChrontelResetDB(SiS_Pr,HwInfo);
d8931 1
a8931 1
       temp &= 0xfb;  /* Reset PLL */
d8935 1
a8935 1
       temp |= 0x04;  /* PLL normal operation */
d8937 1
a8937 5
       if(HwInfo->jChipType == SIS_740) {
          SiS_SetCH701x(SiS_Pr,0xe078);	/* PLL loop filter */
       } else {
          SiS_SetCH701x(SiS_Pr,0x6078);
       }
d8941 1
a8941 1
    SiS_SetCH701x(SiS_Pr,0x0077);  /* MV? */
d8945 2
a8946 1
SiS_ChrontelDoSomething1(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d8955 1
a8955 235
     if(HwInfo->jChipType == SIS_740) {

        temp = SiS_GetCH701x(SiS_Pr,0x1c);
        temp &= 0xfb;	/* Normal XCLK phase */
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x1c);

        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2d,0x03);

        temp = SiS_GetCH701x(SiS_Pr,0x64);
        temp |= 0x40;	/* ? Bit not defined */
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x64);

        temp = SiS_GetCH701x(SiS_Pr,0x03);
        temp &= 0x3f;	/* D1 input to both LVDS and TV */
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x03);

	if(SiS_Pr->SiS_CustomT == CUT_ASUSL3000D) {
	   SiS_SetCH701x(SiS_Pr,0x4063); /* LVDS off */
	   SiS_LongDelay(SiS_Pr, 1);
	   SiS_SetCH701x(SiS_Pr,0x0063); /* LVDS on */
	   SiS_ChrontelResetDB(SiS_Pr, HwInfo);
	   SiS_ChrontelDoSomething2(SiS_Pr, HwInfo);
	   SiS_ChrontelDoSomething3(SiS_Pr, 0, HwInfo);
	} else {
           temp = SiS_GetCH701x(SiS_Pr,0x66);
           if(temp != 0x45) {
              SiS_ChrontelResetDB(SiS_Pr, HwInfo);
              SiS_ChrontelDoSomething2(SiS_Pr, HwInfo);
              SiS_ChrontelDoSomething3(SiS_Pr, 0, HwInfo);
           }
	}

     } else { /* 650 */

        SiS_ChrontelResetDB(SiS_Pr,HwInfo);
        SiS_ChrontelDoSomething2(SiS_Pr,HwInfo);
        temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x34);
        SiS_ChrontelDoSomething3(SiS_Pr,temp,HwInfo);
        SiS_SetCH701x(SiS_Pr,0xaf76);  /* All power on, LVDS normal operation */

     }

}
#endif  /* 315 series  */

/*********************************************/
/*      MAIN: SET CRT2 REGISTER GROUP        */
/*********************************************/

BOOLEAN
SiS_SetCRT2Group(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo)
{
#ifdef SIS300
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
#endif
   USHORT ModeIdIndex, RefreshRateTableIndex;
#if 0
   USHORT temp;
#endif   

   SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;

   if(!SiS_Pr->UseCustomMode) {
      SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex);
   } else {
      ModeIdIndex = 0;
   }

   /* Used for shifting CR33 */
   SiS_Pr->SiS_SelectCRT2Rate = 4;

   SiS_UnLockCRT2(SiS_Pr, HwInfo);

   RefreshRateTableIndex = SiS_GetRatePtr(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);

   SiS_SaveCRT2Info(SiS_Pr,ModeNo);

   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_DisableBridge(SiS_Pr,HwInfo);
      if((SiS_Pr->SiS_IF_DEF_LVDS == 1) && (HwInfo->jChipType == SIS_730)) {
         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,0x80);
      }
      SiS_SetCRT2ModeRegs(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   }

   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
      SiS_LockCRT2(SiS_Pr, HwInfo);
      SiS_DisplayOn(SiS_Pr);
      return TRUE;
   }

   SiS_GetCRT2Data(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);

   /* Set up Panel Link for LVDS, 301BDH and 30xLV(for LCDA) */
   if( (SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
       ((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) ||
       ((HwInfo->jChipType >= SIS_315H) && (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) ) {
      SiS_GetLVDSDesData(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
   } else {
      SiS_Pr->SiS_LCDHDES = SiS_Pr->SiS_LCDVDES = 0;
   }

#ifdef LINUX_XF86
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "(init301: LCDHDES 0x%03x LCDVDES 0x%03x)\n", SiS_Pr->SiS_LCDHDES, SiS_Pr->SiS_LCDVDES);
  xf86DrvMsg(0, X_INFO, "(init301: HDE     0x%03x VDE     0x%03x)\n", SiS_Pr->SiS_HDE, SiS_Pr->SiS_VDE);
  xf86DrvMsg(0, X_INFO, "(init301: VGAHDE  0x%03x VGAVDE  0x%03x)\n", SiS_Pr->SiS_VGAHDE, SiS_Pr->SiS_VGAVDE);
  xf86DrvMsg(0, X_INFO, "(init301: HT      0x%03x VT      0x%03x)\n", SiS_Pr->SiS_HT, SiS_Pr->SiS_VT);
  xf86DrvMsg(0, X_INFO, "(init301: VGAHT   0x%03x VGAVT   0x%03x)\n", SiS_Pr->SiS_VGAHT, SiS_Pr->SiS_VGAVT);
#endif
#endif

   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_SetGroup1(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
   }

   if(SiS_Pr->SiS_VBType & VB_SISVB) {

        if(SiS_Pr->SiS_SetFlag & LowModeTests) {

	   SiS_SetGroup2(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
#ifdef SIS315H
	   SiS_SetGroup2_C_ELV(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
#endif
      	   SiS_SetGroup3(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
      	   SiS_SetGroup4(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
#ifdef SIS315H
	   SiS_SetGroup4_C_ELV(SiS_Pr, HwInfo);
#endif
      	   SiS_SetGroup5(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);

	   /* For 301BDH (Panel link initialization): */
	   if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
	      if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
		 if(!((SiS_Pr->SiS_SetFlag & SetDOSMode) && ((ModeNo == 0x03) || (ModeNo == 0x10)))) {
		    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
		       SiS_ModCRT1CRTC(SiS_Pr,ModeNo,ModeIdIndex,
		                       RefreshRateTableIndex,HwInfo);
		    }
                 }
	      }
	      SiS_SetCRT2ECLK(SiS_Pr,ModeNo,ModeIdIndex,
		              RefreshRateTableIndex,HwInfo);
	   }
        }

   } else {

        if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
	   if(SiS_Pr->SiS_IF_DEF_TRUMPION == 0) {
    	      SiS_ModCRT1CRTC(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,HwInfo);
	   }
	}

        SiS_SetCRT2ECLK(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,HwInfo);

	if(SiS_Pr->SiS_SetFlag & LowModeTests) {
     	   if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
	         if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
#ifdef SIS315H		 
		    SiS_SetCH701xForLCD(SiS_Pr,HwInfo);
#endif		    
		 }
	      }
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
       		 SiS_SetCHTVReg(SiS_Pr,ModeNo,ModeIdIndex,
		               RefreshRateTableIndex);
	      }
     	   }
	}

   }

#ifdef SIS300
   if(HwInfo->jChipType < SIS_315H) {
      if(SiS_Pr->SiS_SetFlag & LowModeTests) {
	 if(SiS_Pr->SiS_UseOEM) {
	    if((SiS_Pr->SiS_UseROM) && ROMAddr && (SiS_Pr->SiS_UseOEM == -1)) {
	       if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
	          SiS_OEM300Setting(SiS_Pr,HwInfo,ModeNo,ModeIdIndex,
	       			    RefreshRateTableIndex);
	       }
	    } else {
       	       SiS_OEM300Setting(SiS_Pr,HwInfo,ModeNo,ModeIdIndex,
	       			 RefreshRateTableIndex);
	    }
	 }
	 if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
            if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
	       (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
	       SetOEMLCDData2(SiS_Pr, HwInfo, ModeNo, ModeIdIndex,RefreshRateTableIndex);
	    }
            if(HwInfo->jChipType == SIS_730) {
               SiS_DisplayOn(SiS_Pr);
	    }
         }
      }
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
          if(HwInfo->jChipType != SIS_730) {
             SiS_DisplayOn(SiS_Pr);
	  }
      }
   }
#endif

#ifdef SIS315H
   if(HwInfo->jChipType >= SIS_315H) {
      if(SiS_Pr->SiS_SetFlag & LowModeTests) {
	 if(HwInfo->jChipType < SIS_661) {
	    SiS_FinalizeLCD(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
            SiS_OEM310Setting(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
	 } else {
	    SiS_OEM661Setting(SiS_Pr, HwInfo, ModeNo, ModeIdIndex, RefreshRateTableIndex);
	 }
         SiS_CRT2AutoThreshold(SiS_Pr);
      }
   }
#endif

   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_EnableBridge(SiS_Pr, HwInfo);
   }

   SiS_DisplayOn(SiS_Pr);

   if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	 /* Disable LCD panel when using TV */
	 SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFF,0x0C);
      } else {
	 /* Disable TV when using LCD */
	 SiS_SetCH70xxANDOR(SiS_Pr,0x010E,0xF8);
      }
   }
d8957 1
a8957 6
   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_LockCRT2(SiS_Pr,HwInfo);
   }

   return TRUE;
}
d8959 2
d8962 1
a8962 25
/*********************************************/
/*     ENABLE/DISABLE LCD BACKLIGHT (SIS)    */
/*********************************************/

void
SiS_SiS30xBLOn(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  /* Switch on LCD backlight on SiS30xLV */
  SiS_DDC2Delay(SiS_Pr,0xff00);
  if(!(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x26) & 0x02)) {
     SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
     SiS_WaitVBRetrace(SiS_Pr,HwInfo);
  }
  if(!(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x26) & 0x01)) {
     SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
  }
}

void
SiS_SiS30xBLOff(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  /* Switch off LCD backlight on SiS30xLV */
  SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFE);
  SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFD);
  SiS_DDC2Delay(SiS_Pr,0xe000);
d8965 1
a8965 3
/*********************************************/
/*          DDC RELATED FUNCTIONS            */
/*********************************************/
d8967 1
a8967 10
static void
SiS_SetupDDCN(SiS_Private *SiS_Pr)
{
  SiS_Pr->SiS_DDC_NData = ~SiS_Pr->SiS_DDC_Data;
  SiS_Pr->SiS_DDC_NClk  = ~SiS_Pr->SiS_DDC_Clk;
  if((SiS_Pr->SiS_DDC_Index == 0x11) && (SiS_Pr->SiS_SensibleSR11)) {
     SiS_Pr->SiS_DDC_NData &= 0x0f;
     SiS_Pr->SiS_DDC_NClk  &= 0x0f;
  }
}
d8969 1
a8969 1
/* The Chrontel 700x is connected to the 630/730 via
d8972 2
a8973 2
 * On 630(S)T chipset, the index changed from 0x11 to
 * 0x0a, possibly for working around the DDC problems
d8976 2
a8977 2
static BOOLEAN
SiS_SetChReg(SiS_Private *SiS_Pr, USHORT tempbx, USHORT myor)
d8979 4
a8982 23
  USHORT tempah,temp,i;

  for(i=0; i<20; i++) {				/* Do 20 attempts to write */
     if(i) {
        SiS_SetStop(SiS_Pr);
	SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT);
     }
     if(SiS_SetStart(SiS_Pr)) continue;		/* Set start condition */
     tempah = SiS_Pr->SiS_DDC_DeviceAddr;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write DAB (S0=0=write) */
     if(temp) continue;				/*    (ERROR: no ack) */
     tempah = tempbx & 0x00FF;			/* Write RAB */
     tempah |= myor;                            /* (700x: set bit 7, see datasheet) */
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);
     if(temp) continue;				/*    (ERROR: no ack) */
     tempah = (tempbx & 0xFF00) >> 8;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write data */
     if(temp) continue;				/*    (ERROR: no ack) */
     if(SiS_SetStop(SiS_Pr)) continue;		/* Set stop condition */
     SiS_Pr->SiS_ChrontelInit = 1;
     return TRUE;
  }
  return FALSE;
d8985 1
a8985 1
/* Write to Chrontel 700x */
d8990 1
a8990 1
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;  		/* DAB (Device Address Byte) */
d8993 23
a9015 4
     SiS_Pr->SiS_DDC_Index = 0x11;		/* Bit 0 = SC;  Bit 1 = SD */
     SiS_Pr->SiS_DDC_Data  = 0x02;              /* Bitmask in IndexReg for Data */
     SiS_Pr->SiS_DDC_Clk   = 0x01;              /* Bitmask in IndexReg for Clk */
     SiS_SetupDDCN(SiS_Pr);
d9018 3
a9020 3
  if( (!(SiS_SetChReg(SiS_Pr, tempbx, 0x80))) &&
      (!(SiS_Pr->SiS_ChrontelInit)) ) {
     SiS_Pr->SiS_DDC_Index = 0x0a;		/* Bit 7 = SC;  Bit 6 = SD */
d9023 2
a9024 1
     SiS_SetupDDCN(SiS_Pr);
d9026 17
a9042 1
     SiS_SetChReg(SiS_Pr, tempbx, 0x80);
d9046 1
a9046 1
/* Write to Chrontel 701x */
d9051 3
a9053 1
  SiS_Pr->SiS_DDC_Index = 0x11;			/* Bit 0 = SC;  Bit 1 = SD */
d9056 2
a9057 2
  SiS_SetupDDCN(SiS_Pr);
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;  		/* DAB (Device Address Byte) */
d9059 14
a9072 1
  SiS_SetChReg(SiS_Pr, tempbx, 0);
d9075 4
a9078 2
void
SiS_SetCH70xx(SiS_Private *SiS_Pr, USHORT tempbx)
d9080 2
a9081 2
   if(SiS_Pr->SiS_IF_DEF_CH70xx == 1)
      SiS_SetCH700x(SiS_Pr,tempbx);
d9083 1
a9083 30
      SiS_SetCH701x(SiS_Pr,tempbx);
}

static USHORT
SiS_GetChReg(SiS_Private *SiS_Pr, USHORT myor)
{
  USHORT tempah,temp,i;

  for(i=0; i<20; i++) {				/* Do 20 attempts to read */
     if(i) {
        SiS_SetStop(SiS_Pr);
	SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT);
     }
     if(SiS_SetStart(SiS_Pr)) continue;		/* Set start condition */
     tempah = SiS_Pr->SiS_DDC_DeviceAddr;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write DAB (S0=0=write) */
     if(temp) continue;				/*        (ERROR: no ack) */
     tempah = SiS_Pr->SiS_DDC_ReadAddr | myor;	/* Write RAB (700x: | 0x80) */
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);
     if(temp) continue;				/*        (ERROR: no ack) */
     if (SiS_SetStart(SiS_Pr)) continue;	/* Re-start */
     tempah = SiS_Pr->SiS_DDC_DeviceAddr | 0x01;/* DAB | 0x01 = Read */
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* DAB (S0=1=read) */
     if(temp) continue;				/*        (ERROR: no ack) */
     tempah = SiS_ReadDDC2Data(SiS_Pr,tempah);	/* Read byte */
     if(SiS_SetStop(SiS_Pr)) continue;		/* Stop condition */
     SiS_Pr->SiS_ChrontelInit = 1;
     return(tempah);
  }
  return 0xFFFF;
d9086 1
a9086 1
/* Read from Chrontel 700x */
d9091 1
a9091 3
  USHORT result;

  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;		/* DAB */
d9094 1
a9094 1
     SiS_Pr->SiS_DDC_Index = 0x11;		/* Bit 0 = SC;  Bit 1 = SD */
d9097 2
a9098 1
     SiS_SetupDDCN(SiS_Pr);
d9103 26
a9128 2
  if( ((result = SiS_GetChReg(SiS_Pr,0x80)) == 0xFFFF) &&
      (!SiS_Pr->SiS_ChrontelInit) ) {
d9130 18
a9147 6
     SiS_Pr->SiS_DDC_Index = 0x0a;
     SiS_Pr->SiS_DDC_Data  = 0x80;
     SiS_Pr->SiS_DDC_Clk   = 0x40;
     SiS_SetupDDCN(SiS_Pr);

     result = SiS_GetChReg(SiS_Pr,0x80);
d9149 1
a9149 1
  return(result);
d9152 1
a9152 1
/* Read from Chrontel 701x */
d9157 3
a9159 1
  SiS_Pr->SiS_DDC_Index = 0x11;			/* Bit 0 = SC;  Bit 1 = SD */
d9162 2
a9163 3
  SiS_SetupDDCN(SiS_Pr);
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;		/* DAB */

d9166 17
a9182 1
  return(SiS_GetChReg(SiS_Pr,0));
d9185 2
a9186 12
/* Read from Chrontel 70xx */
/* Parameter is [Register no (S7-S0)] */
USHORT
SiS_GetCH70xx(SiS_Private *SiS_Pr, USHORT tempbx)
{
   if(SiS_Pr->SiS_IF_DEF_CH70xx == 1)
      return(SiS_GetCH700x(SiS_Pr, tempbx));
   else
      return(SiS_GetCH701x(SiS_Pr, tempbx));
}

/* Our own DDC functions */
d9188 1
a9188 2
SiS_InitDDCRegs(SiS_Private *SiS_Pr, unsigned long VBFlags, int VGAEngine,
                USHORT adaptnum, USHORT DDCdatatype, BOOLEAN checkcr32)
d9190 1
a9190 1
     unsigned char ddcdtype[] = { 0xa0, 0xa0, 0xa0, 0xa2, 0xa6 };
a9193 7
     if(adaptnum != 0) {
        if(!(VBFlags & (VB_301|VB_301B|VB_301C|VB_302B))) return 0xFFFF;
	if((VBFlags & VB_30xBDH) && (adaptnum == 1)) return 0xFFFF;
     }	
     
     /* adapternum for SiS bridges: 0 = CRT1, 1 = LCD, 2 = VGA2 */
     
d9202 3
a9204 1
     cr32 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x32);
d9206 9
a9214 9
#if 0
     if(VBFlags & VB_SISBRIDGE) {
	if(myadaptnum == 0) {
	   if(!(cr32 & 0x20)) {
	      myadaptnum = 2;
	      if(!(cr32 & 0x10)) {
	         myadaptnum = 1;
		 if(!(cr32 & 0x08)) {
		    myadaptnum = 0;
d9216 1
a9216 1
	      }
d9218 1
a9218 3
        }
     }
#endif
a9219 2
     if(VGAEngine == SIS_300_VGA) {		/* 300 series */
	
d9222 1
a9222 1
	   if(VBFlags & VB_SISBRIDGE) {
d9228 6
a9233 8
	if(!(VBFlags & VB_301)) {
	   if((cr32 & 0x80) && (checkcr32)) {
              if(myadaptnum >= 1) {
	         if(!(cr32 & 0x08)) {
	             myadaptnum = 1;
		     if(!(cr32 & 0x10)) return 0xFFFF;
                 }
	      }
d9240 4
a9243 1
     } else {						/* 315/330 series */
d9245 1
a9245 1
     	/* here we simplify: 0 = CRT1, 1 = CRT2 (VGA, LCD) */
d9247 12
a9258 1
	if(VBFlags & VB_SISBRIDGE) {
d9266 1
a9266 1
	   if(VBFlags & VB_SISBRIDGE) {
d9272 1
a9272 1
        if((cr32 & 0x80) && (checkcr32)) {
d9284 1
a9284 1
	   if(VBFlags & VB_LVDS) flag = 0xff;
a9287 4
    }
    
    SiS_Pr->SiS_DDC_Data = 0x02 << temp;
    SiS_Pr->SiS_DDC_Clk  = 0x01 << temp;
d9289 2
a9290 1
    SiS_SetupDDCN(SiS_Pr);
d9292 1
a9292 5
#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "DDC Port %x Index %x Shift %d\n",
    		SiS_Pr->SiS_DDC_Port, SiS_Pr->SiS_DDC_Index, temp);
#endif
    
d9299 3
a9301 7
   if(SiS_SetStart(SiS_Pr)) return 0xFFFF;
   if(SiS_WriteDDC2Data(SiS_Pr, SiS_Pr->SiS_DDC_DeviceAddr)) {
  	return 0xFFFF;
   }
   if(SiS_WriteDDC2Data(SiS_Pr, SiS_Pr->SiS_DDC_SecAddr)) {
   	return 0xFFFF;
   }
d9308 2
a9309 4
   if(SiS_SetStart(SiS_Pr)) return 0xFFFF;
   if(SiS_WriteDDC2Data(SiS_Pr, (SiS_Pr->SiS_DDC_DeviceAddr | 0x01))) {
   	return 0xFFFF;
   }
d9326 2
a9327 4
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
      		      SiS_Pr->SiS_DDC_Index,
                      SiS_Pr->SiS_DDC_NData,
		      SiS_Pr->SiS_DDC_Data);
d9329 2
a9330 4
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
      		      SiS_Pr->SiS_DDC_Index,
                      SiS_Pr->SiS_DDC_NData,
		      0);
d9339 1
a9339 2
    USHORT  temp, ret=0;
    BOOLEAN failed = FALSE;
a9343 3
#ifdef TWDEBUG
         xf86DrvMsg(0, X_INFO, "Probe: Prepare failed\n");
#endif
a9353 6
       } else {
           failed = TRUE;
	   ret = 0xFFFF;
#ifdef TWDEBUG
           xf86DrvMsg(0, X_INFO, "Probe: Read 1 failed\n");
#endif
d9356 8
a9363 13
    if(failed == FALSE) {
       temp = (unsigned char)SiS_ReadDDC2Data(SiS_Pr, 0);
       SiS_SendACK(SiS_Pr, 1);
       temp &= mask;
       if(temp == value) ret = 0;
       else {
          ret = 0xFFFF;
#ifdef TWDEBUG
          xf86DrvMsg(0, X_INFO, "Probe: Read 2 failed\n");
#endif
          if(SiS_Pr->SiS_DDC_DeviceAddr == 0xa0) {
             if(temp == 0x30) ret = 0;
          }
d9387 1
a9387 1
SiS_ReadDDC(SiS_Private *SiS_Pr, USHORT DDCdatatype, unsigned char *buffer)
d9392 1
a9392 1
   if(DDCdatatype > 4) return 0xFFFF;  
d9419 22
a9440 1
/* Our private DDC functions
d9450 3
a9452 3
       adaptnum: 0=CRT1, 1=LCD, 2=VGA2
                 CRT2 DDC is only supported on SiS301, 301B, 302B.
       DDCdatatype: 0=Probe, 1=EDID, 2=EDID+VDIF, 3=EDID V2 (P&D), 4=EDID V2 (FPDI-2)
d9461 2
a9462 2
SiS_HandleDDC(SiS_Private *SiS_Pr, unsigned long VBFlags, int VGAEngine,
              USHORT adaptnum, USHORT DDCdatatype, unsigned char *buffer)
d9464 1
a9464 3
   unsigned char sr1f,cr17=1;
   USHORT result;

d9466 2
a9467 19
   if(DDCdatatype > 4) return 0xFFFF;
   if((!(VBFlags & VB_VIDEOBRIDGE)) && (adaptnum > 0)) return 0xFFFF;
   if(SiS_InitDDCRegs(SiS_Pr, VBFlags, VGAEngine, adaptnum, DDCdatatype, FALSE) == 0xFFFF) return 0xFFFF;

   sr1f = SiS_GetReg(SiS_Pr->SiS_P3c4,0x1f);
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x1f,0x3f,0x04);
   if(VGAEngine == SIS_300_VGA) {
      cr17 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x17) & 0x80;
      if(!cr17) {
         SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x17,0x80);
         SiS_SetReg(SiS_Pr->SiS_P3c4,0x00,0x01);
         SiS_SetReg(SiS_Pr->SiS_P3c4,0x00,0x03);
      }
   }
   if((sr1f) || (!cr17)) {
      SiS_WaitRetrace1(SiS_Pr);
      SiS_WaitRetrace1(SiS_Pr);
      SiS_WaitRetrace1(SiS_Pr);
      SiS_WaitRetrace1(SiS_Pr);
d9469 2
a9470 1

d9472 1
a9472 1
      result = SiS_ProbeDDC(SiS_Pr);
d9474 2
a9475 5
      result = SiS_ReadDDC(SiS_Pr, DDCdatatype, buffer);
   }
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x1f,sr1f);
   if(VGAEngine == SIS_300_VGA) {
      SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x17,0x7f,cr17);
a9476 29
   return result;
}

#ifdef LINUX_XF86

static BOOLEAN
checkedid1(unsigned char *buffer)
{
   /* Check header */
   if((buffer[0] != 0x00) ||
      (buffer[1] != 0xff) ||
      (buffer[2] != 0xff) ||
      (buffer[3] != 0xff) ||
      (buffer[4] != 0xff) ||
      (buffer[5] != 0xff) ||
      (buffer[6] != 0xff) ||
      (buffer[7] != 0x00))
      return FALSE;

   /* Check EDID version and revision */
   if((buffer[0x12] != 1) || (buffer[0x13] > 4)) return FALSE;

   /* Check week of manufacture for sanity */
   if(buffer[0x10] > 53) return FALSE;

   /* Check year of manufacture for sanity */
   if(buffer[0x11] > 40) return FALSE;

   return TRUE;
d9479 1
a9479 13
static BOOLEAN
checkedid2(unsigned char *buffer)
{
   USHORT year = buffer[6] | (buffer[7] << 8);

   /* Check EDID version */
   if((buffer[0] & 0xf0) != 0x20) return FALSE;

   /* Check week of manufacture for sanity */
   if(buffer[5] > 53) return FALSE;

   /* Check year of manufacture for sanity */
   if((year != 0) && ((year < 1990) || (year > 2030))) return FALSE;
a9480 5
   return TRUE;
}

/* Sense the LCD parameters (CR36, CR37) via DDC */
/* SiS30x(B) only */
d9482 1
a9482 1
SiS_SenseLCDDDC(SiS_Private *SiS_Pr, SISPtr pSiS)
d9484 6
a9489 15
   USHORT DDCdatatype, paneltype, flag, xres=0, yres=0;
   USHORT index, myindex, lumsize, numcodes;
   unsigned char cr37=0, seekcode;
   BOOLEAN checkexpand = FALSE;
   int retry, i;
   unsigned char buffer[256];

   for(i=0; i<7; i++) SiS_Pr->CP_DataValid[i] = FALSE;
   SiS_Pr->CP_HaveCustomData = FALSE;
   SiS_Pr->CP_MaxX = SiS_Pr->CP_MaxY = SiS_Pr->CP_MaxClock = 0;

   if(!(pSiS->VBFlags & (VB_301|VB_301B|VB_301C|VB_302B))) return 0;
   if(pSiS->VBFlags & VB_30xBDH) return 0;
  
   if(SiS_InitDDCRegs(SiS_Pr, pSiS->VBFlags, pSiS->VGAEngine, 1, 0, FALSE) == 0xFFFF) return 0;
d9491 2
a9492 1
   SiS_Pr->SiS_DDC_SecAddr = 0x00;
d9494 3
a9496 9
   /* Probe supported DA's */
   flag = SiS_ProbeDDC(SiS_Pr);
#ifdef TWDEBUG
   xf86DrvMsg(pSiS->pScrn->scrnIndex, X_INFO,
   	"CRT2 DDC capabilities 0x%x\n", flag);
#endif	
   if(flag & 0x10) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa6;	/* EDID V2 (FP) */
      DDCdatatype = 4;
d9498 6
a9503 6
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa2;	/* EDID V2 (P&D-D Monitor) */
      DDCdatatype = 3;
   } else if(flag & 0x02) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa0;	/* EDID V1 */
      DDCdatatype = 1;
   } else return 0;				/* no DDC support (or no device attached) */
d9505 28
a9532 177
   /* Read the entire EDID */
   retry = 2;
   do {
      if(SiS_ReadDDC(SiS_Pr, DDCdatatype, buffer)) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: DDC read failed (attempt %d), %s\n",
		(3-retry), (retry == 1) ? "giving up" : "retrying");
	 retry--;
	 if(retry == 0) return 0xFFFF;
      } else break;
   } while(1);

#ifdef TWDEBUG
   for(i=0; i<256; i+=16) {
       xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
       	"%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x\n",
	buffer[i],    buffer[i+1], buffer[i+2], buffer[i+3],
	buffer[i+4],  buffer[i+5], buffer[i+6], buffer[i+7],
	buffer[i+8],  buffer[i+9], buffer[i+10], buffer[i+11],
	buffer[i+12], buffer[i+13], buffer[i+14], buffer[i+15]);
   }
#endif   
   
   /* Analyze EDID and retrieve LCD panel information */
   paneltype = 0;
   switch(DDCdatatype) {
   case 1:							/* Analyze EDID V1 */
      /* Catch a few clear cases: */
      if(!(checkedid1(buffer))) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: EDID corrupt\n");
	 return 0;
      }

      if(!(buffer[0x14] & 0x80)) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	        "CRT2: Attached display expects analog input (0x%02x)\n",
		buffer[0x14]);
      	 return 0;
      }
      
      if((buffer[0x18] & 0x18) != 0x08) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: Attached display is not of RGB but of %s type (0x%02x)\n", 
		((buffer[0x18] & 0x18) == 0x00) ? "monochrome/greyscale" :
		  ( ((buffer[0x18] & 0x18) == 0x10) ? "non-RGB multicolor" : 
		     "undefined"),
		buffer[0x18]);
	 return 0;
      }

      /* Now analyze the first Detailed Timing Block and see
       * if the preferred timing mode is stored there. If so,
       * check if this is a standard panel for which we already
       * know the timing.
       */

      paneltype = Panel_Custom;
      checkexpand = FALSE;

      if(buffer[0x18] & 0x02) {

         xres = buffer[0x38] | ((buffer[0x3a] & 0xf0) << 4);
         yres = buffer[0x3b] | ((buffer[0x3d] & 0xf0) << 4);

	 SiS_Pr->CP_PreferredX = xres;
	 SiS_Pr->CP_PreferredY = yres;

         switch(xres) {
            case 800:
	        if(yres == 600) {
	     	   paneltype = Panel_800x600;
	     	   checkexpand = TRUE;
	        }
	        break;
            case 1024:
	        if(yres == 768) {
	     	   paneltype = Panel_1024x768;
	     	   checkexpand = TRUE;
	        }
	        break;
	    case 1280:
	        if(yres == 1024) {
	     	   paneltype = Panel_1280x1024;
		   checkexpand = TRUE;
	        } else if(yres == 960) {
	           if(pSiS->VGAEngine == SIS_300_VGA) {
		      paneltype = Panel300_1280x960;
		   } else {
		      paneltype = Panel310_1280x960;
		   }
	        } else if(yres == 768) {
		   if( ((buffer[0x36] | (buffer[0x37] << 8)) == 8100) &&
		       ((buffer[0x39] | ((buffer[0x3a] & 0x0f) << 8)) == (1688 - 1280)) &&
		       ((buffer[0x3c] | ((buffer[0x3d] & 0x0f) << 8)) == (802 - 768)) ) {
	       	      paneltype = Panel_1280x768;
		      checkexpand = FALSE;
		      cr37 |= 0x10;
		   }
	        }
	        break;
	    case 1400:
	        if(pSiS->VGAEngine == SIS_315_VGA) {
	           if(yres == 1050) {
	              paneltype = Panel310_1400x1050;
		      checkexpand = TRUE;
	           }
	        }
      	        break;
#if 0	    /* Treat this as custom, as we have no valid timing data yet */
	    case 1600:
	        if(pSiS->VGAEngine == SIS_315_VGA) {
	           if(yres == 1200) {
	              paneltype = Panel310_1600x1200;
		      checkexpand = TRUE;
	           }
	        }
      	        break;
#endif
         }

	 if(paneltype != Panel_Custom) {
	    if((buffer[0x47] & 0x18) == 0x18) {
	       cr37 |= ((((buffer[0x47] & 0x06) ^ 0x06) << 5) | 0x20);
	    } else {
	       /* What now? There is no digital separate output timing... */
	       xf86DrvMsg(pSiS->pScrn->scrnIndex, X_WARNING,
	       	   "CRT2: Unable to retrieve Sync polarity information\n");
	       cr37 |= 0xc0;  /* Default */
	    }
	 }

      }

      /* If we still don't know what panel this is, we take it
       * as a custom panel and derive the timing data from the
       * detailed timing blocks
       */
      if(paneltype == Panel_Custom) {

         BOOLEAN havesync = FALSE;
	 int i, temp, base = 0x36;
	 unsigned long estpack;
	 unsigned short estx[] = {
	 	720, 720, 640, 640, 640, 640, 800, 800,
		800, 800, 832,1024,1024,1024,1024,1280,
		1152
	 };
	 unsigned short esty[] = {
	 	400, 400, 480, 480, 480, 480, 600, 600,
		600, 600, 624, 768, 768, 768, 768,1024,
		870
	 };

	 paneltype = 0;
	 SiS_Pr->CP_Supports64048075 = TRUE;

	 /* Find the maximum resolution */

	 /* 1. From Established timings */
	 estpack = (buffer[0x23] << 9) | (buffer[0x24] << 1) | ((buffer[0x25] >> 7) & 0x01);
	 for(i=16; i>=0; i--) {
	     if(estpack & (1 << i)) {
	        if(estx[16 - i] > SiS_Pr->CP_MaxX) SiS_Pr->CP_MaxX = estx[16 - i];
		if(esty[16 - i] > SiS_Pr->CP_MaxY) SiS_Pr->CP_MaxY = esty[16 - i];
	     }
	 }

	 /* 2. From Standard Timings */
	 for(i=0x26; i < 0x36; i+=2) {
	    if((buffer[i] != 0x01) && (buffer[i+1] != 0x01)) {
	       temp = (buffer[i] + 31) * 8;
	       if(temp > SiS_Pr->CP_MaxX) SiS_Pr->CP_MaxX = temp;
	       switch((buffer[i+1] & 0xc0) >> 6) {
	       case 0x03: temp = temp * 9 / 16; break;
	       case 0x02: temp = temp * 4 / 5;  break;
	       case 0x01: temp = temp * 3 / 4;  break;
d9534 1
a9534 1
	       if(temp > SiS_Pr->CP_MaxY) SiS_Pr->CP_MaxY = temp;
d9537 26
d9564 74
a9637 1
	 /* Now extract the Detailed Timings and convert them into modes */
d9639 1
a9639 131
         for(i = 0; i < 4; i++, base += 18) {

	    /* Is this a detailed timing block or a monitor descriptor? */
	    if(buffer[base] || buffer[base+1] || buffer[base+2]) {

      	       xres = buffer[base+2] | ((buffer[base+4] & 0xf0) << 4);
               yres = buffer[base+5] | ((buffer[base+7] & 0xf0) << 4);

	       SiS_Pr->CP_HDisplay[i] = xres;
	       SiS_Pr->CP_HSyncStart[i] = xres + (buffer[base+8] | ((buffer[base+11] & 0xc0) << 2));
               SiS_Pr->CP_HSyncEnd[i]   = SiS_Pr->CP_HSyncStart[i] + (buffer[base+9] | ((buffer[base+11] & 0x30) << 4));
	       SiS_Pr->CP_HTotal[i] = xres + (buffer[base+3] | ((buffer[base+4] & 0x0f) << 8));
	       SiS_Pr->CP_HBlankStart[i] = xres + 1;
	       SiS_Pr->CP_HBlankEnd[i] = SiS_Pr->CP_HTotal[i];

	       SiS_Pr->CP_VDisplay[i] = yres;
               SiS_Pr->CP_VSyncStart[i] = yres + (((buffer[base+10] & 0xf0) >> 4) | ((buffer[base+11] & 0x0c) << 2));
               SiS_Pr->CP_VSyncEnd[i] = SiS_Pr->CP_VSyncStart[i] + ((buffer[base+10] & 0x0f) | ((buffer[base+11] & 0x03) << 4));
	       SiS_Pr->CP_VTotal[i] = yres + (buffer[base+6] | ((buffer[base+7] & 0x0f) << 8));
	       SiS_Pr->CP_VBlankStart[i] = yres + 1;
	       SiS_Pr->CP_VBlankEnd[i] = SiS_Pr->CP_VTotal[i];

	       SiS_Pr->CP_Clock[i] = (buffer[base] | (buffer[base+1] << 8)) * 10;

	       SiS_Pr->CP_DataValid[i] = TRUE;

	       /* Sort out invalid timings, interlace and too high clocks */
	       if((SiS_Pr->CP_HDisplay[i] & 7)						||
	          (SiS_Pr->CP_HDisplay[i] > SiS_Pr->CP_HSyncStart[i])  			||
	          (SiS_Pr->CP_HDisplay[i] >= SiS_Pr->CP_HSyncEnd[i])   			||
	          (SiS_Pr->CP_HDisplay[i] >= SiS_Pr->CP_HTotal[i])     			||
	          (SiS_Pr->CP_HSyncStart[i] >= SiS_Pr->CP_HSyncEnd[i]) 			||
	          (SiS_Pr->CP_HSyncStart[i] > SiS_Pr->CP_HTotal[i])    			||
	          (SiS_Pr->CP_HSyncEnd[i] > SiS_Pr->CP_HTotal[i])      			||
	          (SiS_Pr->CP_VDisplay[i] > SiS_Pr->CP_VSyncStart[i])  			||
	          (SiS_Pr->CP_VDisplay[i] >= SiS_Pr->CP_VSyncEnd[i])   			||
	          (SiS_Pr->CP_VDisplay[i] >= SiS_Pr->CP_VTotal[i])     			||
	          (SiS_Pr->CP_VSyncStart[i] > SiS_Pr->CP_VSyncEnd[i])  			||
	          (SiS_Pr->CP_VSyncStart[i] > SiS_Pr->CP_VTotal[i])    			||
	          (SiS_Pr->CP_VSyncEnd[i] > SiS_Pr->CP_VTotal[i])      			||
		  (((pSiS->VBFlags & VB_301C) && (SiS_Pr->CP_Clock[i] > 162500)) ||
	           ((!(pSiS->VBFlags & VB_301C)) && (SiS_Pr->CP_Clock[i] > 108200)))	||
		  (buffer[base+17] & 0x80)) {

	          SiS_Pr->CP_DataValid[i] = FALSE;

	       } else {

	          paneltype = Panel_Custom;

		  SiS_Pr->CP_HaveCustomData = TRUE;

		  if(xres > SiS_Pr->CP_MaxX) SiS_Pr->CP_MaxX = xres;
	          if(yres > SiS_Pr->CP_MaxY) SiS_Pr->CP_MaxY = yres;
		  if(SiS_Pr->CP_Clock[i] > SiS_Pr->CP_MaxClock) SiS_Pr->CP_MaxClock = SiS_Pr->CP_Clock[i];

		  SiS_Pr->CP_Vendor = buffer[9] | (buffer[8] << 8);
		  SiS_Pr->CP_Product = buffer[10] | (buffer[11] << 8);

		  /* By default we drive the LCD at 75Hz in 640x480 mode; if
		   * the panel does not provide this mode, use 60hz
		   */
		  if(!(buffer[0x23] & 0x04)) SiS_Pr->CP_Supports64048075 = FALSE;

	          /* We must assume the panel can scale, since we have
	           * no scaling data
		   */
	          checkexpand = FALSE;
	          cr37 |= 0x10;

	          /* Extract the sync polarisation information. This only works
	           * if the Flags indicate a digital separate output.
	           */
	          if((buffer[base+17] & 0x18) == 0x18) {
		     SiS_Pr->CP_HSync_P[i] = (buffer[base+17] & 0x02) ? TRUE : FALSE;
		     SiS_Pr->CP_VSync_P[i] = (buffer[base+17] & 0x04) ? TRUE : FALSE;
		     SiS_Pr->CP_SyncValid[i] = TRUE;
		     if(!havesync) {
	                cr37 |= ((((buffer[base+17] & 0x06) ^ 0x06) << 5) | 0x20);
			havesync = TRUE;
	   	     }
	          } else {
		     SiS_Pr->CP_SyncValid[i] = FALSE;
		  }
	       }
            }
	 }
	 if(!havesync) {
	    xf86DrvMsg(pSiS->pScrn->scrnIndex, X_WARNING,
	       	   "CRT2: Unable to retrieve Sync polarity information\n");
   	 }
      }

      if(paneltype && checkexpand) {
         /* If any of the Established low-res modes is supported, the
	  * panel can scale automatically. For 800x600 panels, we only 
	  * check the even lower ones.
	  */
	 if(paneltype == Panel_800x600) {
	    if(buffer[0x23] & 0xfc) cr37 |= 0x10;
	 } else {
            if(buffer[0x23])	    cr37 |= 0x10;
	 }
      }
       
      break;
      
   case 3:							/* Analyze EDID V2 */
   case 4:
      index = 0;

      if(!(checkedid2(buffer))) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: EDID corrupt\n");
	 return 0;
      }

      if((buffer[0x41] & 0x0f) == 0x03) {
         index = 0x42 + 3;
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: Display supports TMDS input on primary interface\n");
      } else if((buffer[0x41] & 0xf0) == 0x30) {
         index = 0x46 + 3;
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: Display supports TMDS input on secondary interface\n");
      } else {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: Display does not support TMDS video interface (0x%02x)\n", 
		buffer[0x41]);
	 return 0;
      }
a9640 56
      paneltype = Panel_Custom;
      SiS_Pr->CP_MaxX = xres = buffer[0x76] | (buffer[0x77] << 8);
      SiS_Pr->CP_MaxY = yres = buffer[0x78] | (buffer[0x79] << 8);
      switch(xres) {
         case 800:
	     if(yres == 600) {
	     	paneltype = Panel_800x600;
	     	checkexpand = TRUE;
	     }
	     break;
         case 1024:
	     if(yres == 768) {
	     	paneltype = Panel_1024x768;
	     	checkexpand = TRUE;
	     }
	     break;
	 case 1152:
	     if(yres == 768) {
	        if(pSiS->VGAEngine == SIS_300_VGA) {
		   paneltype = Panel300_1152x768;
		} else {
		   paneltype = Panel310_1152x768;
		}
	     	checkexpand = TRUE;
	     }
	     break;
	 case 1280:
	     if(yres == 960) {
	        if(pSiS->VGAEngine == SIS_315_VGA) {
	     	   paneltype = Panel310_1280x960;
		} else {
		   paneltype = Panel300_1280x960;
		}
	     } else if(yres == 1024) {
	     	paneltype = Panel_1280x1024;
		checkexpand = TRUE;
	     }
	     /* 1280x768 treated as custom here */
	     break;
	 case 1400:
	     if(pSiS->VGAEngine == SIS_315_VGA) {
	        if(yres == 1050) {
	           paneltype = Panel310_1400x1050;
		   checkexpand = TRUE;
	        }
	     }
      	     break;
#if 0    /* Treat this one as custom since we have no timing data yet */
	 case 1600:
	     if(pSiS->VGAEngine == SIS_315_VGA) {
	        if(yres == 1200) {
	           paneltype = Panel310_1600x1200;
		   checkexpand = TRUE;
	        }
	     }
      	     break;
a9641 1
      }
d9643 1
a9643 6
      /* Determine if RGB18 or RGB24 */
      if(index) {
         if((buffer[index] == 0x20) || (buffer[index] == 0x34)) {
	    cr37 |= 0x01;
	 }
      }
d9645 1
a9645 154
      if(checkexpand) {
         /* TODO - for now, we let the panel scale */
	 cr37 |= 0x10;
      }

      /* Now seek 4-Byte Timing codes and extract sync pol info */
      index = 0x80;
      if(buffer[0x7e] & 0x20) {			    /* skip Luminance Table (if provided) */
         lumsize = buffer[0x80] & 0x1f;
	 if(buffer[0x80] & 0x80) lumsize *= 3;
	 lumsize++;  /* luminance header byte */
	 index += lumsize;
      }
      index += (((buffer[0x7e] & 0x1c) >> 2) * 8);   /* skip Frequency Ranges */
      index += ((buffer[0x7e] & 0x03) * 27);         /* skip Detailed Range Limits */
      numcodes = (buffer[0x7f] & 0xf8) >> 3;
      if(numcodes) {
         myindex = index;
 	 seekcode = (xres - 256) / 16;
     	 for(i=0; i<numcodes; i++) {
	    if(buffer[myindex] == seekcode) break;
	    myindex += 4;
	 }
	 if(buffer[myindex] == seekcode) {
	    cr37 |= ((((buffer[myindex + 1] & 0x0c) ^ 0x0c) << 4) | 0x20);
	 } else {
	    xf86DrvMsg(pSiS->pScrn->scrnIndex, X_WARNING,
	        "CRT2: Unable to retrieve Sync polarity information\n");
	 }
      } else {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_WARNING,
	     "CRT2: Unable to retrieve Sync polarity information\n");
      }

      /* Now seek the detailed timing descriptions for custom panels */
      if(paneltype == Panel_Custom) {

         SiS_Pr->CP_Supports64048075 = TRUE;

         index += (numcodes * 4);
	 numcodes = buffer[0x7f] & 0x07;
	 for(i=0; i<numcodes; i++, index += 18) {
	    xres = buffer[index+2] | ((buffer[index+4] & 0xf0) << 4);
            yres = buffer[index+5] | ((buffer[index+7] & 0xf0) << 4);

	    SiS_Pr->CP_HDisplay[i] = xres;
	    SiS_Pr->CP_HSyncStart[i] = xres + (buffer[index+8] | ((buffer[index+11] & 0xc0) << 2));
            SiS_Pr->CP_HSyncEnd[i] = SiS_Pr->CP_HSyncStart[i] + (buffer[index+9] | ((buffer[index+11] & 0x30) << 4));
	    SiS_Pr->CP_HTotal[i] = xres + (buffer[index+3] | ((buffer[index+4] & 0x0f) << 8));
	    SiS_Pr->CP_HBlankStart[i] = xres + 1;
	    SiS_Pr->CP_HBlankEnd[i] = SiS_Pr->CP_HTotal[i];

	    SiS_Pr->CP_VDisplay[i] = yres;
            SiS_Pr->CP_VSyncStart[i] = yres + (((buffer[index+10] & 0xf0) >> 4) | ((buffer[index+11] & 0x0c) << 2));
            SiS_Pr->CP_VSyncEnd[i] = SiS_Pr->CP_VSyncStart[i] + ((buffer[index+10] & 0x0f) | ((buffer[index+11] & 0x03) << 4));
	    SiS_Pr->CP_VTotal[i] = yres + (buffer[index+6] | ((buffer[index+7] & 0x0f) << 8));
	    SiS_Pr->CP_VBlankStart[i] = yres + 1;
	    SiS_Pr->CP_VBlankEnd[i] = SiS_Pr->CP_VTotal[i];

	    SiS_Pr->CP_Clock[i] = (buffer[index] | (buffer[index+1] << 8)) * 10;

	    SiS_Pr->CP_DataValid[i] = TRUE;

	    if((SiS_Pr->CP_HDisplay[i] & 7)						||
	       (SiS_Pr->CP_HDisplay[i] > SiS_Pr->CP_HSyncStart[i])  			||
	       (SiS_Pr->CP_HDisplay[i] >= SiS_Pr->CP_HSyncEnd[i])   			||
	       (SiS_Pr->CP_HDisplay[i] >= SiS_Pr->CP_HTotal[i])     			||
	       (SiS_Pr->CP_HSyncStart[i] >= SiS_Pr->CP_HSyncEnd[i]) 			||
	       (SiS_Pr->CP_HSyncStart[i] > SiS_Pr->CP_HTotal[i])    			||
	       (SiS_Pr->CP_HSyncEnd[i] > SiS_Pr->CP_HTotal[i])      			||
	       (SiS_Pr->CP_VDisplay[i] > SiS_Pr->CP_VSyncStart[i])  			||
	       (SiS_Pr->CP_VDisplay[i] >= SiS_Pr->CP_VSyncEnd[i])   			||
	       (SiS_Pr->CP_VDisplay[i] >= SiS_Pr->CP_VTotal[i])     			||
	       (SiS_Pr->CP_VSyncStart[i] > SiS_Pr->CP_VSyncEnd[i])  			||
	       (SiS_Pr->CP_VSyncStart[i] > SiS_Pr->CP_VTotal[i])    			||
	       (SiS_Pr->CP_VSyncEnd[i] > SiS_Pr->CP_VTotal[i])      			||
	       (((pSiS->VBFlags & VB_301C) && (SiS_Pr->CP_Clock[i] > 162500)) ||
	        ((!(pSiS->VBFlags & VB_301C)) && (SiS_Pr->CP_Clock[i] > 108200)))	||
	       (buffer[index + 17] & 0x80)) {

	       SiS_Pr->CP_DataValid[i] = FALSE;

	    } else {

	       SiS_Pr->CP_HaveCustomData = TRUE;

	       if(SiS_Pr->CP_Clock[i] > SiS_Pr->CP_MaxClock) SiS_Pr->CP_MaxClock = SiS_Pr->CP_Clock[i];

	       SiS_Pr->CP_HSync_P[i] = (buffer[index + 17] & 0x02) ? TRUE : FALSE;
	       SiS_Pr->CP_VSync_P[i] = (buffer[index + 17] & 0x04) ? TRUE : FALSE;
	       SiS_Pr->CP_SyncValid[i] = TRUE;

	       SiS_Pr->CP_Vendor = buffer[2] | (buffer[1] << 8);
	       SiS_Pr->CP_Product = buffer[3] | (buffer[4] << 8);

	       /* We must assume the panel can scale, since we have
	        * no scaling data
    	        */
	       cr37 |= 0x10;

	    }
	 }

      }

      break;

   }

   /* 1280x960 panels are always RGB24, unable to scale and use
    * high active sync polarity
    */
   if(pSiS->VGAEngine == SIS_315_VGA) {
      if(paneltype == Panel310_1280x960) cr37 &= 0x0e;
   } else {
      if(paneltype == Panel300_1280x960) cr37 &= 0x0e;
   }

   for(i = 0; i < 7; i++) {
      if(SiS_Pr->CP_DataValid[i]) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
            "Non-standard LCD timing data no. %d:\n", i);
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	    "   HDisplay %d HSync %d HSyncEnd %d HTotal %d\n",
	    SiS_Pr->CP_HDisplay[i], SiS_Pr->CP_HSyncStart[i],
	    SiS_Pr->CP_HSyncEnd[i], SiS_Pr->CP_HTotal[i]);
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
            "   VDisplay %d VSync %d VSyncEnd %d VTotal %d\n",
            SiS_Pr->CP_VDisplay[i], SiS_Pr->CP_VSyncStart[i],
   	    SiS_Pr->CP_VSyncEnd[i], SiS_Pr->CP_VTotal[i]);
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	    "   Pixel clock: %3.3fMhz\n", (float)SiS_Pr->CP_Clock[i] / 1000);
	 xf86DrvMsg(pSiS->pScrn->scrnIndex, X_INFO,
	    "   To use this, add \"%dx%d\" to the list of Modes in the Screen section\n",
	    SiS_Pr->CP_HDisplay[i],
	    SiS_Pr->CP_VDisplay[i]);
      }
   }

   if(paneltype) {
       if(!SiS_Pr->CP_PreferredX) SiS_Pr->CP_PreferredX = SiS_Pr->CP_MaxX;
       if(!SiS_Pr->CP_PreferredY) SiS_Pr->CP_PreferredY = SiS_Pr->CP_MaxY;
       cr37 &= 0xf1;
       SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x36,0xf0,paneltype);
       SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,0xf1,cr37);
       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x32,0x08);
#ifdef TWDEBUG
       xf86DrvMsgVerb(pSiS->pScrn->scrnIndex, X_PROBED, 3, 
       	"CRT2: [DDC LCD results: 0x%02x, 0x%02x]\n", paneltype, cr37);
#endif	
   }
   return 0;
}
   
d9647 1
a9647 1
SiS_SenseVGA2DDC(SiS_Private *SiS_Pr, SISPtr pSiS)
d9649 2
a9650 4
   USHORT DDCdatatype,flag;
   BOOLEAN foundcrt = FALSE;
   int retry;
   unsigned char buffer[256];
d9652 6
a9657 1
   if(!(pSiS->VBFlags & (VB_301|VB_301B|VB_301C|VB_302B))) return 0;
d9659 7
a9665 20
   if(SiS_InitDDCRegs(SiS_Pr, pSiS->VBFlags, pSiS->VGAEngine, 2, 0, FALSE) == 0xFFFF) return 0;
   
   SiS_Pr->SiS_DDC_SecAddr = 0x00;
   
   /* Probe supported DA's */
   flag = SiS_ProbeDDC(SiS_Pr);
   if(flag & 0x10) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa6;	/* EDID V2 (FP) */
      DDCdatatype = 4;
   } else if(flag & 0x08) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa2;	/* EDID V2 (P&D-D Monitor) */
      DDCdatatype = 3;
   } else if(flag & 0x02) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa0;	/* EDID V1 */
      DDCdatatype = 1;
   } else {
   	xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
		"Do DDC answer\n");
   	return 0;				/* no DDC support (or no device attached) */
   }
d9667 4
a9670 57
   /* Read the entire EDID */
   retry = 2;
   do {
      if(SiS_ReadDDC(SiS_Pr, DDCdatatype, buffer)) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: DDC read failed (attempt %d), %s\n", 
		(3-retry), (retry == 1) ? "giving up" : "retrying");
	 retry--;
	 if(retry == 0) return 0xFFFF;
      } else break;
   } while(1);
   
   /* Analyze EDID. We don't have many chances to 
    * distinguish a flat panel from a CRT...
    */
   switch(DDCdatatype) {
   case 1:
      if(!(checkedid1(buffer))) {
          xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	  	"CRT2: EDID corrupt\n");
      	  return 0;
      }
      if(buffer[0x14] & 0x80) {			/* Display uses digital input */
          xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	  	"CRT2: Attached display expects digital input\n");
      	  return 0;
      }
      SiS_Pr->CP_Vendor = buffer[9] | (buffer[8] << 8);
      SiS_Pr->CP_Product = buffer[10] | (buffer[11] << 8);
      foundcrt = TRUE;
      break;
   case 3:
   case 4:
      if(!(checkedid2(buffer))) {
          xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	  	"CRT2: EDID corrupt\n");
      	  return 0;
      }
      if( ((buffer[0x41] & 0x0f) != 0x01) &&  	/* Display does not support analog input */
          ((buffer[0x41] & 0x0f) != 0x02) &&
	  ((buffer[0x41] & 0xf0) != 0x10) &&
	  ((buffer[0x41] & 0xf0) != 0x20) ) {
	  xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	     	"CRT2: Attached display does not support analog input (0x%02x)\n",
		buffer[0x41]);
	  return 0;
      }
      SiS_Pr->CP_Vendor = buffer[2] | (buffer[1] << 8);
      SiS_Pr->CP_Product = buffer[3] | (buffer[4] << 8);
      foundcrt = TRUE;
      break;
   }

   if(foundcrt) {
      SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x32,0x10);
   }
   return(0);
d9672 1
d9679 1
a9679 1
  USHORT tempbl;
d9681 4
a9684 2
  tempbl = SiS_GetCH70xx(SiS_Pr,(tempax & 0x00FF));
  tempbl = (((tempbl & tempbh) << 8) | tempax);
d9688 1
a9688 1
/* Generic I2C functions for Chrontel & DDC --------- */
d9694 2
a9695 1
  SiS_WaitRetrace1(SiS_Pr);
d9698 2
a9699 8
  SiS_WaitRetrace1(SiS_Pr);
}

USHORT
SiS_ReadDDC1Bit(SiS_Private *SiS_Pr)
{
   SiS_WaitRetrace1(SiS_Pr);
   return((SiS_GetReg(SiS_Pr->SiS_P3c4,0x11) & 0x02) >> 1);
d9702 2
a9703 2
/* Set I2C start condition */
/* This is done by a SD high-to-low transition while SC is high */
d9707 7
a9713 11
  if(SiS_SetSCLKLow(SiS_Pr)) return 0xFFFF;			           /* (SC->low)  */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
    		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  SiS_Pr->SiS_DDC_Data);             			   /* SD->high */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* SC->high */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  0x00);                             			   /* SD->low = start condition */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* (SC->low) */
d9717 2
a9718 2
/* Set I2C stop condition */
/* This is done by a SD low-to-high transition while SC is high */
d9722 7
a9728 11
  if(SiS_SetSCLKLow(SiS_Pr)) return 0xFFFF;			           /* (SC->low) */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  	          SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  0x00);          		   			   /* SD->low   */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* SC->high  */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  SiS_Pr->SiS_DDC_Data);  	   			   /* SD->high = stop condition */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* (SC->high) */
d9732 1
a9732 1
/* Write 8 bits of data */
d9738 3
a9740 3
  flag = 0x80;
  for(i=0; i<8; i++) {
    SiS_SetSCLKLow(SiS_Pr);				                      /* SC->low */
d9742 2
a9743 4
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
      		      SiS_Pr->SiS_DDC_Index,
                      SiS_Pr->SiS_DDC_NData,
		      SiS_Pr->SiS_DDC_Data);            		      /* Write bit (1) to SD */
d9745 2
a9746 4
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
      		      SiS_Pr->SiS_DDC_Index,
                      SiS_Pr->SiS_DDC_NData,
		      0x00);                            		      /* Write bit (0) to SD */
d9748 1
a9748 1
    SiS_SetSCLKHigh(SiS_Pr);				                      /* SC->high */
d9751 1
a9751 1
  temp = SiS_CheckACK(SiS_Pr);				                      /* Check acknowledge */
d9764 2
a9765 4
    SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
    		    SiS_Pr->SiS_DDC_Index,
                    SiS_Pr->SiS_DDC_NData,
		    SiS_Pr->SiS_DDC_Data);
d9767 1
a9767 1
    temp = SiS_GetReg(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index);
d9776 8
a9783 4
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NClk,
		  0x00);      					/* SetSCLKLow()  */
d9791 1
a9791 1
  USHORT temp, watchdog=1000;
d9793 2
a9794 4
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NClk,
		  SiS_Pr->SiS_DDC_Clk);  			/* SetSCLKHigh()  */
d9796 1
a9796 1
    temp = SiS_GetReg(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index);
d9798 1
a9798 6
  if (!watchdog) {
#ifdef TWDEBUG
        xf86DrvMsg(0, X_INFO, "SetClkHigh failed\n");
#endif
  	return 0xFFFF;
  }
d9803 11
a9813 1
/* Check I2C acknowledge */
d9820 7
a9826 9
  SiS_SetSCLKLow(SiS_Pr);				           /* (SC->low) */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  SiS_Pr->SiS_DDC_Data);     			   /* (SD->high) */
  SiS_SetSCLKHigh(SiS_Pr);				           /* SC->high = clock impulse for ack */
  tempah = SiS_GetReg(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index); /* Read SD */
  SiS_SetSCLKLow(SiS_Pr);				           /* SC->low = end of clock impulse */
  if(tempah & SiS_Pr->SiS_DDC_Data) return(1);			   /* Ack OK if bit = 0 */
d9830 1
a9830 1
/* End of I2C functions ----------------------- */
d9833 1
a9833 1
/* =============== SiS 315/330 O.E.M. ================= */
a9837 81
GetRAMDACromptr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT romptr;

  if(HwInfo->jChipType < SIS_330) {
     romptr = ROMAddr[0x128] | (ROMAddr[0x129] << 8);
     if(SiS_Pr->SiS_VBType & VB_SIS301B302B)
        romptr = ROMAddr[0x12a] | (ROMAddr[0x12b] << 8);
  } else {
     romptr = ROMAddr[0x1a8] | (ROMAddr[0x1a9] << 8);
     if(SiS_Pr->SiS_VBType & VB_SIS301B302B)
        romptr = ROMAddr[0x1aa] | (ROMAddr[0x1ab] << 8);
  }
  return(romptr);
}

static USHORT
GetLCDromptr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT romptr;

  if(HwInfo->jChipType < SIS_330) {
     romptr = ROMAddr[0x120] | (ROMAddr[0x121] << 8);
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
        romptr = ROMAddr[0x122] | (ROMAddr[0x123] << 8);
  } else {
     romptr = ROMAddr[0x1a0] | (ROMAddr[0x1a1] << 8);
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
        romptr = ROMAddr[0x1a2] | (ROMAddr[0x1a3] << 8);
  }
  return(romptr);
}

static USHORT
GetTVromptr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT romptr;

  if(HwInfo->jChipType < SIS_330) {
     romptr = ROMAddr[0x114] | (ROMAddr[0x115] << 8);
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
        romptr = ROMAddr[0x11a] | (ROMAddr[0x11b] << 8);
  } else {
     romptr = ROMAddr[0x194] | (ROMAddr[0x195] << 8);
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
        romptr = ROMAddr[0x19a] | (ROMAddr[0x19b] << 8);
  }
  return(romptr);
}

static USHORT
GetLCDPtrIndexBIOS(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT index;

  if((IS_SIS650) && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {
     if(!(SiS_IsNotM650orLater(SiS_Pr, HwInfo))) {
        if((index = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xf0)) {
	   index >>= 4;
	   index *= 3;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) index += 2;
           else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) index++;
           return index;
	}
     }
  }

  index = SiS_Pr->SiS_LCDResInfo & 0x0F;
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)      index -= 5;
  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) index -= 6;
  index--;
  index *= 3;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) index += 2;
  else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) index++;
  return index;
}

static USHORT
d9845 1
a9845 1
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) index += 2;
d9851 11
d9868 2
a9869 4
  if(SiS_Pr->SiS_TVMode & TVSetPAL) index = 1;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) index = 2;

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) index = 0;
d9873 2
a9874 4
  if((SiS_Pr->SiS_VBInfo & SetInSlaveMode) &&
     (SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) {
     index++;
  }
d9879 1
a9879 42
static ULONG
GetOEMTVPtr661_2(SiS_Private *SiS_Pr)
{
   USHORT index = 0, temp = 0;

   if(SiS_Pr->SiS_TVMode & TVSetPAL)   index = 1;
   if(SiS_Pr->SiS_TVMode & TVSetPALM)  index = 2;
   if(SiS_Pr->SiS_TVMode & TVSetPALN)  index = 3;
   if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) index = 6;
   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
      index = 4;
      if(SiS_Pr->SiS_TVMode & TVSetPALM)  index++;
      if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) index = 7;
   }

   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if((!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
         (SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) {
	 index += 8;
	 temp++;
      }
      temp += 0x0100;
   }
   return(ULONG)(index | (temp << 16));
}

static int
GetOEMTVPtr661(SiS_Private *SiS_Pr)
{
   int index = 0;

   if(SiS_Pr->SiS_TVMode & TVSetPAL)       index = 2;
   if(SiS_Pr->SiS_TVMode & TVSetHiVision)  index = 4;
   if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) index = 6;
   if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) index = 8;
   if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) index = 10;

   if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) index++;

   return index;
}

d9881 2
a9882 1
SetDelayComp(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo)
d9884 1
a9884 3
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT delay=0,index,myindex,temp,romptr=0;
  BOOLEAN dochiptest = TRUE;
d9886 1
a9886 4
  /* Find delay (from ROM, internal tables, PCI subsystem) */

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {			/* ------------ VGA */
     
d9888 9
a9896 1
        romptr = GetRAMDACromptr(SiS_Pr, HwInfo);
d9900 5
a9904 14
        delay = 0x04;
        if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	   if(IS_SIS650) {
	      delay = 0x0a;
	   } else if(IS_SIS740) {
	      delay = 0x00;
	   } else if(HwInfo->jChipType < SIS_330) {
	      delay = 0x0c;
	   } else {
	      delay = 0x0c;
	   }
	} else if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
           delay = 0x00;
	}
d9906 17
a9922 24

  } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD|SetCRT2ToLCDA)) {  /* ----------	LCD/LCDA */

     BOOLEAN gotitfrompci = FALSE;

     /* Custom Panel? */

     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	   delay = 0x00;
	   if((SiS_Pr->PanelXRes <= 1280) && (SiS_Pr->PanelYRes <= 1024)) {
	      delay = 0x20;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,delay);
	} else {
	   delay = 0x0c;
	   if(SiS_Pr->SiS_VBType & VB_SIS301C) delay = 0x03;
	   else if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	      if(IS_SIS740) delay = 0x01;
	      else          delay = 0x03;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,delay);
	}
        return;
d9924 12
a9935 10

     /* Could we detect a PDC for LCD? If yes, use it */

     if((SiS_Pr->SiS_VBType & VB_SIS301LV302LV) && (SiS_Pr->PDC != -1)) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,(SiS_Pr->PDC & 0x0f));
	} else {
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((SiS_Pr->PDC & 0x0f) << 4));
	}
        return;
d9937 27
a9963 33

     /* This is a piece of typical SiS crap: They code the OEM LCD
      * delay into the code, at no defined place in the BIOS.
      * We now have to start doing a PCI subsystem check here.
      */

     switch(SiS_Pr->SiS_CustomT) {
     case CUT_COMPAQ1280:
     case CUT_COMPAQ12802:
	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
	   gotitfrompci = TRUE;
	   dochiptest = FALSE;
	   delay = 0x03;
	}
	break;
     case CUT_CLEVO1400:
     case CUT_CLEVO14002:
	/* if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) { */
	   gotitfrompci = TRUE;
	   dochiptest = FALSE;
	   delay = 0x02;
	/* } */
	break;
     case CUT_CLEVO1024:
     case CUT_CLEVO10242:
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	   gotitfrompci = TRUE;
	   dochiptest = FALSE;
	   delay = 0x33;
	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2D,delay);
	   delay &= 0x0f;
	}
	break;
d9965 1
d9967 7
a9973 92
     /* Could we find it through the PCI ID? If no, use ROM or table */

     if(!gotitfrompci) {

        index = GetLCDPtrIndexBIOS(SiS_Pr, HwInfo);
        myindex = GetLCDPtrIndex(SiS_Pr);

        if(IS_SIS650 && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {

           if(SiS_IsNotM650orLater(SiS_Pr, HwInfo)) {

              if((ROMAddr) && SiS_Pr->SiS_UseROM) {
	         /* Always use the second pointer on 650; some BIOSes */
                 /* still carry old 301 data at the first location    */
	         /* romptr = ROMAddr[0x120] | (ROMAddr[0x121] << 8);  */
	         /* if(SiS_Pr->SiS_VBType & VB_SIS302LV)              */
	         romptr = ROMAddr[0x122] | (ROMAddr[0x123] << 8);
	         if(!romptr) return;
	         delay = ROMAddr[(romptr + index)];
	      } else {
                 delay = SiS310_LCDDelayCompensation_650301LV[myindex];
	      }

          } else {

             delay = SiS310_LCDDelayCompensation_651301LV[myindex];
	     if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV))
	        delay = SiS310_LCDDelayCompensation_651302LV[myindex];

          }

        } else if((ROMAddr) && SiS_Pr->SiS_UseROM &&
	          (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024) &&
		  (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x768)  &&
		  (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x960)) {

	   /* Data for 1280x1024 wrong in 301B BIOS */
           romptr = GetLCDromptr(SiS_Pr, HwInfo);
	   if(!romptr) return;
	   delay = ROMAddr[(romptr + index)];

        } else if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {

	   if(IS_SIS740) delay = 0x03;
	   else          delay = 0x00;

	} else {

           delay = SiS310_LCDDelayCompensation_301[myindex];
	   if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	      if(IS_SIS740) delay = 0x01;
	      else          delay = SiS310_LCDDelayCompensation_650301LV[myindex];
	   } else if(SiS_Pr->SiS_VBType & VB_SIS301C) {
	      if(IS_SIS740) delay = 0x01;  /* ? */
	      else          delay = 0x03;
	   } else if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	      if(IS_SIS740) delay = 0x01;
	      else          delay = SiS310_LCDDelayCompensation_3xx301B[myindex];
	   }

        }

     }  /* got it from PCI */

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0x0F,((delay << 4) & 0xf0));
	dochiptest = FALSE;
     }
     
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {			/* ------------ TV */

     index = GetTVPtrIndex(SiS_Pr);
     
     if(IS_SIS650 && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {

        if(SiS_IsNotM650orLater(SiS_Pr,HwInfo)) {

           if((ROMAddr) && SiS_Pr->SiS_UseROM) {
	      /* Always use the second pointer on 650; some BIOSes */
              /* still carry old 301 data at the first location    */
              /* romptr = ROMAddr[0x114] | (ROMAddr[0x115] << 8);  */
	      /* if(SiS_Pr->SiS_VBType & VB_SIS302LV) */
	      romptr = ROMAddr[0x11a] | (ROMAddr[0x11b] << 8);
	      if(!romptr) return;
	      delay = ROMAddr[romptr + index];

	   } else {

	      delay = SiS310_TVDelayCompensation_301B[index];

	   }

d9975 1
a9975 20

           switch(SiS_Pr->SiS_CustomT) {
	   case CUT_COMPAQ1280:
	   case CUT_COMPAQ12802:
	   case CUT_CLEVO1400:
	   case CUT_CLEVO14002:
	      delay = 0x02;
	      dochiptest = FALSE;
	      break;
	   case CUT_CLEVO1024:
	   case CUT_CLEVO10242:
	      delay = 0x03;
	      dochiptest = FALSE;
   	      break;
	   default:
              delay = SiS310_TVDelayCompensation_651301LV[index];
	      if(SiS_Pr->SiS_VBType & VB_SIS302LV) {
	         delay = SiS310_TVDelayCompensation_651302LV[index];
	      }
	   }
a9976 24

     } else if((ROMAddr) && SiS_Pr->SiS_UseROM) {

        romptr = GetTVromptr(SiS_Pr, HwInfo);
	if(!romptr) return;
	delay = ROMAddr[romptr + index];

     } else if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {

        delay = SiS310_TVDelayCompensation_LVDS[index];

     } else {

	delay = SiS310_TVDelayCompensation_301[index];
        if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	   if(IS_SIS740) {
	      delay = SiS310_TVDelayCompensation_740301B[index];
	      /* LV: use 301 data? BIOS bug? */
	   } else {
              delay = SiS310_TVDelayCompensation_301B[index];
	      if(SiS_Pr->SiS_VBType & VB_SIS301C) delay = 0x02;
	   }
	}

d9978 4
a9981 16

     if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x13) & 0x04) {  /* LCDA */
	delay &= 0x0f;
	dochiptest = FALSE;
     }
    
  } else return;

  /* Write delay */

  if(SiS_Pr->SiS_VBType & VB_SISVB) {

     if(IS_SIS650 && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV) && dochiptest) {

        temp = (SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xf0) >> 4;
        if(temp == 8) {		/* 1400x1050 BIOS (COMPAL) */
a9986 2
        } else if(temp > 7) {	/* 1280x1024 BIOS (which one?) */
	   delay = 0x35;
d9988 1
a9988 2
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2D,delay);

a9989 8

        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0xF0,delay);

     }

  } else {  /* LVDS */

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
a9990 7
     } else {
        if(IS_SIS650 && (SiS_Pr->SiS_IF_DEF_CH70xx != 0)) {
           delay <<= 4;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0x0F,delay);
        } else {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0xF0,delay);
        }
a9991 1

a9992 1

d9995 1
d9997 2
a9998 2
SetAntiFlicker(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
               USHORT ModeNo,USHORT ModeIdIndex)
d10000 1
a10000 2
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,temp1,romptr=0;
d10002 2
a10003 1
  if(SiS_Pr->SiS_TVMode & (TVSetYPbPr750p|TVSetYPbPr525p)) return;
a10009 4
  temp = GetTVPtrIndex(SiS_Pr);
  temp >>= 1;  	  /* 0: NTSC/YPbPr, 1: PAL, 2: HiTV */
  temp1 = temp;

d10011 2
a10012 5
     if(HwInfo->jChipType >= SIS_661) {
	romptr = ROMAddr[0x260] | (ROMAddr[0x261] << 8);
	temp1 = GetOEMTVPtr661(SiS_Pr);
        temp1 >>= 1;
     } else if(HwInfo->jChipType >= SIS_330) {
a10013 2
     } else {
        romptr = ROMAddr[0x112] | (ROMAddr[0x113] << 8);
d10018 2
a10019 2
     temp1 <<= 1;
     temp = ROMAddr[romptr + temp1 + index];
d10028 1
d10030 2
a10031 2
SetEdgeEnhance(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
               USHORT ModeNo,USHORT ModeIdIndex)
d10033 1
a10033 2
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,temp1,romptr=0;
d10036 1
a10036 2
  temp >>= 1;              	/* 0: NTSC/YPbPr, 1: PAL, 2: HiTV */
  temp1 = temp;
d10044 2
a10045 5
     if(HwInfo->jChipType >= SIS_661) {
	romptr = ROMAddr[0x26c] | (ROMAddr[0x26d] << 8);
	temp1 = GetOEMTVPtr661(SiS_Pr);
        temp1 >>= 1;
     } else if(HwInfo->jChipType >= SIS_330) {
a10046 2
     } else {
        romptr = ROMAddr[0x124] | (ROMAddr[0x125] << 8);
d10051 2
a10052 2
     temp1 <<= 1;
     temp = ROMAddr[romptr + temp1 + index];
d10060 1
d10062 2
a10063 2
SetYFilter(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
           USHORT ModeNo,USHORT ModeIdIndex)
d10065 5
a10069 3
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index, myindex, oldindex,temp, i, j, flag1 = 0, flag2 = 0, romptr = 0;
  ULONG  lindex;
d10071 1
a10071 1
  if(ModeNo<=0x13) {
d10077 14
a10090 1
  oldindex = index;
d10092 22
a10113 33
  if((HwInfo->jChipType >= SIS_661) && ROMAddr && SiS_Pr->SiS_UseROM) {
     if(ModeNo > 0x13) {
        index =  SiS_Pr->SiS_EModeIDTable[ModeIdIndex].VB_ExtTVYFilterIndexROM661;
     }
     lindex = GetOEMTVPtr661_2(SiS_Pr);
     if(lindex & 0x00ff0000) flag1 = 1;
     if(lindex & 0xff000000) flag2 = 1;
     lindex &= 0xffff;

     /* NTSC-J: Use PAL filters */
     if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) lindex = 1;

     romptr = ROMAddr[0x268] | (ROMAddr[0x269] << 8);
     if(flag1) myindex = index * 7;
     else      myindex = index << 2;

     if(romptr) {
        romptr += (lindex << 1);
        romptr = (ROMAddr[romptr] | (ROMAddr[romptr+1] << 8)) + myindex;
	if(romptr) {
           if((!flag1) && (flag2)) {
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x35,0x00);
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x36,0x00);
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x37,0x00);
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x38,ROMAddr[romptr++]);
           } else {
	      for(i=0x35; i<=0x38; i++) {
                 SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr++]);
              }
           }
           if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	      for(j=0, i=0x48; i<=0x4a; i++, j++) {
                 SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr++]);
d10115 16
a10130 27
           }
           return;
	}
     }
  }

  index = oldindex;

  temp = GetTVPtrIndex(SiS_Pr);
  temp >>= 1;  			/* 0: NTSC/YPbPr, 1: PAL, 2: HiTV */

  if(SiS_Pr->SiS_TVMode & TVSetNTSCJ)	     temp = 1;  /* NTSC-J uses PAL */
  else if(SiS_Pr->SiS_TVMode & TVSetPALM)    temp = 3;  /* PAL-M */
  else if(SiS_Pr->SiS_TVMode & TVSetPALN)    temp = 4;  /* PAL-N */
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) temp = 1;  /* HiVision uses PAL */

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     for(i=0x35, j=0; i<=0x38; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter2[temp][index][j]);
     }
     for(i=0x48; i<=0x4A; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter2[temp][index][j]);
     }
  } else {
     for(i=0x35, j=0; i<=0x38; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter1[temp][index][j]);
     }
d10134 1
d10136 2
a10137 2
SetPhaseIncr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
             USHORT ModeNo,USHORT ModeIdIndex)
d10139 1
a10139 3
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,i,j,resinfo,romptr=0;
  ULONG  lindex;
d10143 3
a10145 24
  /* NTSC-J data not in BIOS, and already set in SetGroup2 */
  if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) return;

  if(HwInfo->jChipType >= SIS_661) {
     lindex = GetOEMTVPtr661_2(SiS_Pr) & 0xffff;
     lindex <<= 2;
     if((ROMAddr) && SiS_Pr->SiS_UseROM) {
        romptr = ROMAddr[0x264] | (ROMAddr[0x265] << 8);
     }
     if(romptr) {
	romptr += lindex;
	for(j=0, i=0x31; i<=0x34; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
        }
     } else {
        for(j=0, i=0x31; i<=0x34; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS661_TVPhase[lindex + j]);
        }
     }
     return;
  }

  /* PAL-M, PAL-N not in BIOS, and already set in SetGroup2 */
  if(SiS_Pr->SiS_TVMode & (TVSetPALM | TVSetPALN)) return;
d10147 2
a10148 2
  if(ModeNo<=0x13) {
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
d10150 1
a10150 1
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d10159 1
a10159 1
     if(HwInfo->jChipType >= SIS_330) {
d10164 1
a10164 1
	if(HwInfo->jChipType >= SIS_330) {
d10167 1
a10167 1
	if((SiS_Pr->SiS_VBInfo & SetInSlaveMode) && (!(SiS_Pr->SiS_TVMode & TVSetTVSimuMode))) {
d10169 1
a10169 1
	   if(HwInfo->jChipType >= SIS_330) {
d10178 1
a10178 1
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
d10185 3
a10187 3
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr1[temp][index][j]);
        else if((!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) || (SiS_Pr->SiS_TVMode & TVSetTVSimuMode))
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr2[temp][index][j]);
d10189 1
a10189 1
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr1[temp][index][j]);
d10193 17
a10209 13
  if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (!(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision))) {
     if((!(SiS_Pr->SiS_TVMode & (TVSetPAL | TVSetYPbPr525p | TVSetYPbPr750p))) && (ModeNo > 0x13)) {
        if((resinfo == SIS_RI_640x480) ||
	   (resinfo == SIS_RI_800x600)) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x31,0x21);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x32,0xf0);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x33,0xf5);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x34,0x7f);
	} else if(resinfo == SIS_RI_1024x768) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x31,0x1e);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x32,0x8b);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x33,0xfb);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x34,0x7b);
d10216 2
a10217 2
SiS_OEM310Setting(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                  USHORT ModeNo,USHORT ModeIdIndex)
d10219 9
a10227 168
   SetDelayComp(SiS_Pr,HwInfo,ModeNo);

   if(SiS_Pr->UseCustomMode) return;

   if((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
      SetAntiFlicker(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
      SetPhaseIncr(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
      SetYFilter(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
      if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
         SetEdgeEnhance(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
      }
   }
}

static void
SetDelayComp661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo,
                USHORT ModeIdIndex, USHORT RTI)
{
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
   UCHAR  *myptr = NULL;
   USHORT delay = 0, romptr = 0, index;
   UCHAR  temp;

   if(!(SiS_Pr->SiS_VBInfo & (SetCRT2ToTV | SetCRT2ToLCD | SetCRT2ToLCDA | SetCRT2ToRAMDAC)))
      return;

   if(SiS_Pr->UseCustomMode) delay = 0x40;
   else if(ModeNo <= 0x13)   delay = 0x40;
   else                      delay = SiS_Pr->SiS_RefIndex[RTI].Ext_PDC;

   delay &= 0xf0;
   delay >>= 4;
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) delay <<= 12;  /* BIOS: 8, wrong */

   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {

      index = GetOEMTVPtr661(SiS_Pr);
      if((ROMAddr) && SiS_Pr->SiS_UseROM) {
         romptr = ROMAddr[0x25c] | (ROMAddr[0x25d] << 8);
         if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
            romptr = ROMAddr[0x25e] | (ROMAddr[0x25f] << 8);
         }
      }
      if(romptr) myptr = &ROMAddr[romptr];
      if(!myptr) {
         myptr = (UCHAR *)SiS_TVDelay661_301;
	 if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	    myptr = (UCHAR *)SiS_TVDelay661_301B;
	 }
      }
      delay = myptr[index];
      if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x13) & 0x04) delay >>= 4;  /* Should test dual edge */

   } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {

      if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
         if((SiS_Pr->PanelXRes <= 1024) && (SiS_Pr->PanelYRes <= 768)) {
	    delay = 0x1111;
         } else if((SiS_Pr->PanelXRes <= 1280) && (SiS_Pr->PanelYRes <= 1024)) {
	    delay = 0xA1A1;
         } else if((SiS_Pr->PanelXRes <= 1400) && (SiS_Pr->PanelYRes <= 1050)) {
	    delay = 0xA3A3;
         } else
	    delay = 0x0000;
      }

      if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_PanelCustom) {
         if((SiS_Pr->SiS_VBType & VB_SIS301LV302LV) && (SiS_Pr->PDC != -1)) {
            delay = SiS_Pr->PDC & 0x0f;
            delay |= (delay << 12);
         } else if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
            myptr = GetLCDStructPtr661(SiS_Pr, HwInfo);
            if(myptr) delay = myptr[4] | (myptr[4] << 8);
         }
      }
   }

   temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2d);
   if(SiS_Pr->SiS_VBInfo & (SetCRT2ToTV | SetCRT2ToLCD | SetCRT2ToRAMDAC)) {
      temp &= 0xf0;
      temp |= (delay & 0x000f);
   } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      temp &= 0x0f;
      temp |= ((delay & 0xf000) >> 8);
   }
   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2d,temp);
}

static void
SetCRT2SyncDither661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo, USHORT RTI)
{
   USHORT infoflag;
   UCHAR temp;

   if(ModeNo <= 0x13) {
      infoflag = SiS_GetRegByte(SiS_Pr->SiS_P3ca+2);
   } else {
      infoflag = SiS_Pr->SiS_RefIndex[RTI].Ext_InfoFlag;
   }
   infoflag &= 0xc0;
   if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
      if(temp & 0x20) infoflag = temp;
      if(temp & 0x01) infoflag |= 0x01;
   }
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
      temp = 0x0c;
      if(infoflag & 0x01) temp ^= 0x14;  /* BIOS: 18, wrong */
      temp |= (infoflag >> 6);
      SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xe0,temp);
   }
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      temp = 0;
      if(infoflag & 0x01) temp |= 0x80;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1a,0x7f,temp);
      temp = 0x30;
      if(infoflag & 0x01) temp = 0x20;
      infoflag &= 0xc0;
      temp |= infoflag;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0f,temp);
   }
}

static void
SetPanelParms661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   UCHAR *myptr;

   if(SiS_Pr->SiS_VBType & (VB_SIS301LV | VB_SIS302LV | VB_SIS302ELV)) {
      if(SiS_Pr->LVDSHL != -1) {
         SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,SiS_Pr->LVDSHL);
      }
   }

   myptr = GetLCDStructPtr661(SiS_Pr, HwInfo);
   if(myptr) {
      if(SiS_Pr->SiS_VBType & (VB_SIS301LV | VB_SIS302LV | VB_SIS302ELV)) {
         if(SiS_Pr->LVDSHL == -1) {
            SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xE0,myptr[1] & 0x1f);
	 } else {
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xE3,myptr[1] & 0x1c);
	 }
      }
      SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0d,0x3f,myptr[2] & 0xc0);
   }
}

void
SiS_OEM661Setting(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                  USHORT ModeNo,USHORT ModeIdIndex, USHORT RRTI)
{
   if(SiS_Pr->SiS_VBType & VB_SISVB) {

      SetDelayComp661(SiS_Pr,HwInfo,ModeNo,ModeIdIndex,RRTI);

      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
         SetCRT2SyncDither661(SiS_Pr,HwInfo,ModeNo,RRTI);
         SetPanelParms661(SiS_Pr,HwInfo);
      }

      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
         SetPhaseIncr(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
         SetYFilter(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
         SetAntiFlicker(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
         if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
            SetEdgeEnhance(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
         }
      }
d10231 1
a10231 7
/* FinalizeLCD
 * This finalizes some CRT2 registers for the very panel used.
 * If we have a backup if these registers, we use it; otherwise
 * we set the register according to most BIOSes. However, this
 * function looks quite different in every BIOS, so you better
 * pray that we have a backup...
 */
d10233 2
a10234 2
SiS_FinalizeLCD(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                PSIS_HW_INFO HwInfo)
d10239 1
a10239 18
  if(!(SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) return;

  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(SiS_Pr->LVDSHL != -1) {
        SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,SiS_Pr->LVDSHL);
     }
  }

  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) return;
  if(SiS_Pr->UseCustomMode) return;

  switch(SiS_Pr->SiS_CustomT) {
  case CUT_COMPAQ1280:
  case CUT_COMPAQ12802:
  case CUT_CLEVO1400:
  case CUT_CLEVO14002:
     return;
  }
d10242 2
a10243 2
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
     modeflag =  SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
d10245 2
a10246 43
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     modeflag =  SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }

  if(IS_SIS650) {
     if(!(SiS_GetReg(SiS_Pr->SiS_P3d4, 0x5f) & 0xf0)) {
        if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x02);
	} else {
           SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x03);
	}
     }
  }

  if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        /* Maybe all panels? */
        if(SiS_Pr->LVDSHL == -1) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,0x01);
	}
	return;
     }
  }

  if(SiS_Pr->SiS_CustomT == CUT_CLEVO10242) {
     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	   if(SiS_Pr->LVDSHL == -1) {
	      /* Maybe all panels? */
              SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,0x01);
	   }
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	      tempch = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4;
	      if(tempch == 3) {
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x25);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,0x00);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x1b);
	      }
	   }
	   return;
	}
     }
d10251 7
a10257 14
#ifdef SET_EMI
	if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x2a,0x00);
	   SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x10);
	}
#endif
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
        if(SiS_Pr->LVDSHL == -1) {
           /* Maybe ACER only? */
           SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,0x01);
	}
     }
     tempch = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4;
d10260 50
a10309 73
	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1f,0x76);
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	   if(tempch == 0x03) {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x25);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,0x00);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x1b);
	   }
	   if((SiS_Pr->Backup == TRUE) && (SiS_Pr->Backup_Mode == ModeNo)) {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,SiS_Pr->Backup_14);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,SiS_Pr->Backup_15);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,SiS_Pr->Backup_16);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,SiS_Pr->Backup_17);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,SiS_Pr->Backup_18);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,SiS_Pr->Backup_19);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1a,SiS_Pr->Backup_1a);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,SiS_Pr->Backup_1b);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,SiS_Pr->Backup_1c);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,SiS_Pr->Backup_1d);
	   } else if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {	/* 1.10.8w */
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,0x90);
	      if(ModeNo <= 0x13) {
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x11);
		 if((resinfo == 0) || (resinfo == 2)) return;
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x18);
		 if((resinfo == 1) || (resinfo == 3)) return;
	      }
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);
	      if((ModeNo > 0x13) && (resinfo == SIS_RI_1024x768)) {
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);  /* 1.10.7u */
#if 0
	         tempbx = 806;  /* 0x326 */			 /* other older BIOSes */
		 tempbx--;
		 temp = tempbx & 0xff;
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,temp);
		 temp = (tempbx >> 8) & 0x03;
		 SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1d,0xf8,temp);
#endif
	      }
	   } else if(ModeNo <= 0x13) {
	      if(ModeNo <= 1) {
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x70);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0xff);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x48);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x12);
	      }
	      if(!(modeflag & HalfDCLK)) {
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,0x20);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,0x1a);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,0x28);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,0x00);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x4c);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0xdc);
		 if(ModeNo == 0x12) {
		    switch(tempch) {
		       case 0:
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x95);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0xdc);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1a,0x10);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x95);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,0x48);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x12);
			  break;
		       case 2:
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x95);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x48);
			  break;
		       case 3:
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x95);
			  break;
		    }
		 }
	      }
d10313 1
a10313 1
        tempcl = tempbh = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x01);
d10317 1
a10317 1
	tempbl = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x04);
d10320 1
a10320 1
	   if((resinfo == SIS_RI_1024x768) || (!(SiS_Pr->SiS_LCDInfo & DontExpandLCD))) {
d10322 1
a10322 1
	      	 tempbx = 770;
d10324 7
a10330 7
	         if(tempbx > 770) tempbx = 770;
		 if(SiS_Pr->SiS_VGAVDE < 600) {
		    tempax = 768 - SiS_Pr->SiS_VGAVDE;
		    tempax >>= 4;  				 /* 1.10.7w; 1.10.6s: 3;  */
		    if(SiS_Pr->SiS_VGAVDE <= 480)  tempax >>= 4; /* 1.10.7w; 1.10.6s: < 480; >>=1; */
		    tempbx -= tempax;
		 }
d10334 4
d10339 4
a10342 2
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,temp);
	temp = ((tempbx & 0xff00) >> 4) | tempcl;
d10348 52
d10402 1
d10407 3
a10409 3
void
SetOEMLCDData2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
               USHORT ModeNo,USHORT ModeIdIndex, USHORT RefTabIndex)
d10411 5
a10415 3
  USHORT crt2crtc=0, modeflag, myindex=0;
  UCHAR  temp;
  int i;
d10417 15
a10431 34
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     crt2crtc = SiS_Pr->SiS_RefIndex[RefTabIndex].Ext_CRT2CRTC;
  }

  crt2crtc &= 0x3f;

  if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xdf);
  }

  if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
     if(modeflag & HalfDCLK) myindex = 1;

     if(SiS_Pr->SiS_SetFlag & LowModeTests) {
        for(i=0; i<7; i++) {
           if(barco_p1[myindex][crt2crtc][i][0]) {
	      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,
	                      barco_p1[myindex][crt2crtc][i][0],
	   	   	      barco_p1[myindex][crt2crtc][i][2],
			      barco_p1[myindex][crt2crtc][i][1]);
	   }
        }
     }
     temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
     if(temp & 0x80) {
        temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x18);
        temp++;
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,temp);
     }
  }
d10433 1
d10435 1
d10437 1
a10437 1
GetOEMLCDPtr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, int Flag)
a10438 1
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
d10449 1
a10449 1
  if(HwInfo->jChipType == SIS_300) {
d10451 1
a10451 1
    tempbx = (SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0x0f) - 2;
d10454 1
a10454 1
       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 3;
d10460 2
a10461 2
	     romptr = ROMAddr[0x255] | (ROMAddr[0x256] << 8);
	     if(romptr) {
d10463 1
a10463 1
	     } else {
d10465 2
a10466 2
	     }
             if(tempbx == 0xFF) return 0xFFFF;
d10476 15
a10490 15
       if((ROMAddr) && SiS_Pr->SiS_UseROM) {
          romptr = ROMAddr[0x255] | (ROMAddr[0x256] << 8);
	  if(romptr) {
	     tempbx = ROMAddr[romptr + SiS_Pr->SiS_LCDTypeInfo];
	  } else {
	     tempbx = 0xff;
	  }
       } else {
          tempbx = customtable630[SiS_Pr->SiS_LCDTypeInfo];
       }
       if(tempbx == 0xFF) return 0xFFFF;
       tempbx <<= 2;
       if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) tempbx += 2;
       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
       return tempbx;
d10494 1
a10494 1
    if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
d10499 1
d10501 2
a10502 2
SetOEMLCDDelay(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
               USHORT ModeNo,USHORT ModeIdIndex)
a10503 1
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
a10505 2
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) return;

d10512 6
a10517 6
  /* The Panel Compensation Delay should be set according to tables
   * here. Unfortunately, various BIOS versions don't case about
   * a uniform way using eg. ROM byte 0x220, but use different
   * hard coded delays (0x04, 0x20, 0x18) in SetGroup1().
   * Thus we don't set this if the user select a custom pdc or if
   * we otherwise detected a valid pdc.
d10519 1
a10519 1
  if(SiS_Pr->PDC != -1) return;
d10521 1
a10521 1
  temp = GetOEMLCDPtr(SiS_Pr,HwInfo, 0);
d10523 1
a10523 4
  if(SiS_Pr->UseCustomMode)
     index = 0;
  else
     index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].VB_LCDDelayIndex;
d10525 1
a10525 15
  if(HwInfo->jChipType != SIS_300) {
     if(romptr) {
	romptr += (temp * 2);
	romptr = ROMAddr[romptr] | (ROMAddr[romptr + 1] << 8);
	romptr += index;
	temp = ROMAddr[romptr];
     } else {
	if(SiS_Pr->SiS_VBType & VB_SISVB) {
    	   temp = SiS300_OEMLCDDelay2[temp][index];
	} else {
           temp = SiS300_OEMLCDDelay3[temp][index];
        }
     }
  } else {
     if((ROMAddr) && SiS_Pr->SiS_UseROM && (ROMAddr[0x235] & 0x80)) {
d10532 2
a10533 10
	   temp = SiS300_OEMLCDDelay5[temp][index];
	}
     } else {
        if((ROMAddr) && SiS_Pr->SiS_UseROM) {
	   romptr = ROMAddr[0x249] | (ROMAddr[0x24a] << 8);
	   if(romptr) {
	      romptr += (temp * 2);
	      romptr = ROMAddr[romptr] | (ROMAddr[romptr + 1] << 8);
	      romptr += index;
	      temp = ROMAddr[romptr];
d10535 2
a10536 4
	      temp = SiS300_OEMLCDDelay4[temp][index];
	   }
	} else {
	   temp = SiS300_OEMLCDDelay4[temp][index];
d10538 25
a10562 1
     }
d10569 2
a10570 2
SetOEMLCDData(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
              USHORT ModeNo,USHORT ModeIdIndex)
d10572 1
a10572 2
#if 0  /* Unfinished; Data table missing */
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
d10581 1
a10581 1
  temp = GetOEMLCDPtr(SiS_Pr,HwInfo, 1);
d10586 1
a10586 1
      SiS_SetReg(SiS_Pr->SiS_Part1Port,i,SiS300_LCDHData[temp][index][j]);
d10591 1
a10591 1
  SiS_SetReg(SiS_SiS_Part1Port,0x18, SiS300_LCDVData[temp][index][0]);
d10595 1
a10595 1
      SiS_SetReg(SiS_Pr->SiS_Part1Port,i,SiS300_LCDVData[temp][index][j]);
d10600 1
d10608 1
a10608 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
d10610 2
a10611 2
     else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) index += 3;
     else if(SiS_Pr->SiS_TVMode & TVSetPAL)   index += 1;
d10613 2
a10614 2
     if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) index += 2;
     if(SiS_Pr->SiS_TVMode & TVSetPAL)        index += 1;
d10619 1
d10621 2
a10622 2
SetOEMTVDelay(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
              USHORT ModeNo,USHORT ModeIdIndex)
a10623 1
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
d10642 1
a10642 1
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
d10652 1
d10654 3
a10656 2
SetOEMAntiFlicker(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                  USHORT ModeNo, USHORT ModeIdIndex)
a10657 1
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
d10682 1
d10684 2
a10685 2
SetOEMPhaseIncr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                USHORT ModeNo,USHORT ModeIdIndex)
a10686 1
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
d10689 1
a10689 3
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) return;

  if(SiS_Pr->SiS_TVMode & (TVSetNTSC1024 | TVSetNTSCJ | TVSetPALM | TVSetPALN)) return;
d10702 3
a10704 3
     for(i=0x31, j=0; i<=0x34; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Phase2[temp][index][j]);
     }
d10706 12
a10717 12
     if(romptr) {
        romptr += (temp * 2);
	romptr = ROMAddr[romptr] | (ROMAddr[romptr + 1] << 8);
	romptr += (index * 4);
        for(i=0x31, j=0; i<=0x34; i++, j++) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
	}
     } else {
        for(i=0x31, j=0; i<=0x34; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Phase1[temp][index][j]);
	}
     }
d10721 1
d10723 2
a10724 2
SetOEMYFilter(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
              USHORT ModeNo,USHORT ModeIdIndex)
d10726 1
a10726 2
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,i,j,romptr=0;
d10728 1
a10728 1
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSCART | SetCRT2ToHiVision | SetCRT2ToYPbPr525750)) return;
a10737 4
  if(SiS_Pr->SiS_TVMode & TVSetPALM)      temp = 8;
  else if(SiS_Pr->SiS_TVMode & TVSetPALN) temp = 9;
  /* NTSCJ uses NTSC filters */

d10740 9
d10751 1
a10751 1
       	SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Filter2[temp][index][j]);
d10754 1
a10754 1
     	SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Filter2[temp][index][j]);
d10757 1
a10757 1
      if((romptr) && (!(SiS_Pr->SiS_TVMode & (TVSetPALM|TVSetPALN)))) {
d10762 1
a10762 1
       	    SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
d10766 1
a10766 1
       	    SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Filter1[temp][index][j]);
a10771 24
static USHORT
SiS_SearchVBModeID(SiS_Private *SiS_Pr, USHORT *ModeNo)
{
   USHORT ModeIdIndex;
   UCHAR VGAINFO = SiS_Pr->SiS_VGAINFO;

   if(*ModeNo <= 5) *ModeNo |= 1;

   for(ModeIdIndex=0; ; ModeIdIndex++) {
      if(SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].ModeID == *ModeNo) break;
      if(SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].ModeID == 0xFF)    return 0;
   }

   if(*ModeNo != 0x07) {
      if(*ModeNo > 0x03) return ModeIdIndex;
      if(VGAINFO & 0x80) return ModeIdIndex;
      ModeIdIndex++;
   }

   if(VGAINFO & 0x10) ModeIdIndex++;   /* 400 lines */
	                               /* else 350 lines */
   return ModeIdIndex;
}

d10773 2
a10774 2
SiS_OEM300Setting(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
		  USHORT ModeNo, USHORT ModeIdIndex, USHORT RefTableIndex)
d10776 1
a10776 1
  USHORT OEMModeIdIndex=0;
d10778 2
a10779 4
  if(!SiS_Pr->UseCustomMode) {
     OEMModeIdIndex = SiS_SearchVBModeID(SiS_Pr,&ModeNo);
     if(!(OEMModeIdIndex)) return;
  }
d10782 4
a10785 4
     SetOEMLCDDelay(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        SetOEMLCDData(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
     }
a10786 1
  if(SiS_Pr->UseCustomMode) return;
d10788 6
a10793 6
     SetOEMTVDelay(SiS_Pr, HwInfo, ModeNo,OEMModeIdIndex);
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        SetOEMAntiFlicker(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
    	SetOEMPhaseIncr(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
       	SetOEMYFilter(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
     }
d10797 1
@


1.1.9.2
log
@Import XFree86 4.4 from The XFree86(TM) Project, Inc.
(integrity cannot be checked)

got via cvs -qd anoncvs@@anoncvs.xfree86.org:/cvs co -Prxf-4_4_0 xc
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/sis/init301.c,v 1.74 2004/02/25 22:40:42 twini Exp $ */
d37 4
a40 1
 * * 3) The name of the author may not be used to endorse or promote products
d79 4
a93 2
static USHORT SiS_GetBIOSLCDResInfo(SiS_Private *SiS_Pr);

d101 4
a104 4
   if(HwInfo->jChipType >= SIS_315H)
      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2f,0x01);
   else
      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x24,0x01);
d110 14
a123 4
   if(HwInfo->jChipType >= SIS_315H)
      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2F,0xFE);
   else
      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x24,0xFE);
d141 1
d143 1
d145 2
a146 1
GetLCDStructPtr661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d148 40
a187 3
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
   UCHAR  *myptr = NULL;
   USHORT romindex = 0;
d189 27
a215 3
   /* Use the BIOS tables only for LVDS panels; DVI is unreliable
    * due to the variaty of panels the BIOS doesn't know about.
    */
d217 1
a217 9
   if((SiS_Pr->SiS_ROMNew) && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {
      myptr = (UCHAR *)SiS_LCDStruct661;
      romindex = SISGETROMW(0x100);  /* 10c, 0.93: 10e */
      if(romindex) {
         romindex += ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x7d) & 0x1f) * 26);
         myptr = &ROMAddr[romindex];
      }
   }
   return myptr;
d219 1
d221 2
a222 2
static USHORT
GetLCDStructPtr661_2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d225 5
a229 1
   USHORT romptr = 0;
d231 8
a238 3
   /* Use the BIOS tables only for LVDS panels; DVI is unreliable
    * due to the variaty of panels the BIOS doesn't know about.
    */
d240 8
a247 3
   if((SiS_Pr->SiS_ROMNew) && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {
      romptr = SISGETROMW(0x102);  /* 2ad */
      romptr += ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4) * SiS_Pr->SiS661LCD2TableSize);
d249 1
d251 1
a251 1
   return(romptr);
d264 1
a264 1
  USHORT checkmask=0,modeid,infoflag;
d266 3
a268 1
  modeid = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].ModeID;
d274 1
a274 1
      	checkmask |= SupportRAMDAC2;
d276 1
a276 1
	   checkmask |= SupportRAMDAC2_135;
d278 1
a278 1
	      checkmask |= SupportRAMDAC2_162;
d280 1
a280 1
		 checkmask |= SupportRAMDAC2_202;
d287 1
a287 1
     	checkmask |= SupportLCD;
d289 5
a293 3
	   if(SiS_Pr->SiS_VBType & VB_SISVB) {
	      if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (SiS_Pr->SiS_LCDInfo & LCDPass11)) {
	         if(modeid == 0x2e) checkmask |= Support64048060Hz;
d300 1
a300 1
      	checkmask |= SupportHiVision;
d304 1
a304 1
        checkmask |= SupportTV;
d306 1
a306 6
	   checkmask |= SupportTV1024;
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
	         checkmask |= SupportYPbPr750p;
	      }
	   }
d311 1
a311 1
  } else {	/* LVDS */
d315 1
a315 1
           checkmask |= SupportCHTV;
d320 1
a320 1
     	checkmask |= SupportLCD;
d326 1
a326 1
  for(; SiS_Pr->SiS_RefIndex[RefreshRateTableIndex+(*i)].ModeID == modeid; (*i)--) {
d328 1
a328 1
     if(infoflag & checkmask) return TRUE;
d336 2
a337 2
     if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].ModeID != modeid) {
     	return FALSE;
d340 1
a340 1
     if(infoflag & checkmask) return TRUE;
d342 1
a342 1
  return TRUE;
d346 1
a346 1
/*              Get rate index               */
d371 1
a371 1
     	if(modeflag & HalfDCLK) return 0;
d375 3
a377 1
  if(ModeNo < 0x14) return 0xFFFF;
d392 1
a392 1
              temp = LCDRefreshIndex[SiS_GetBIOSLCDResInfo(SiS_Pr)];
a468 1
  UCHAR *ROMAddr = (UCHAR *)HwInfo->pjVirtualRomBase;
d470 1
d472 1
a472 1
  if(SiS_Pr->SiS_UseROM) {
d475 1
a475 1
        temp1 = SISGETROMW(0x23b);
a484 1
  UCHAR *ROMAddr = (UCHAR *)HwInfo->pjVirtualRomBase;
d486 1
d488 1
a488 1
  if(SiS_Pr->SiS_UseROM) {
d491 1
a491 1
        temp1 = SISGETROMW(0x23d);
d571 1
a571 1
	 if(SiS_Pr->SiS_UseROM) {
d589 1
a589 9
      if(HwInfo->jChipType >= SIS_661) {

         if(!(DelayTime & 0x01)) {
	    SiS_DDC2Delay(SiS_Pr, 0x1000);
         } else {
	    SiS_DDC2Delay(SiS_Pr, 0x4000);
         }

      } else if(HwInfo->jChipType >= SIS_330) return;
d614 1
a614 1
	       if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
d750 4
a753 1
  if(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x01) >= 0xb0) return TRUE;
d990 1
a990 1
   SiS_SetRegLong(0xcf8,0x80000874);		       /* get ACPI base */
d1008 3
a1010 2
SiS_GetVBInfo(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
              PSIS_HW_INFO HwInfo, int checkcrt2mode)
a1073 5

	   if(SiS_Pr->SiS_VBType & (VB_SIS301LV|VB_SIS302LV|VB_SIS302ELV)) {
	      tempbx &= ~(SetCRT2ToRAMDAC);
	   }

d1151 18
a1168 6
      	   if(tempbx & SetCRT2ToLCDA)        tempbx &= (clearmask | SetCRT2ToLCDA);
	   if(tempbx & SetCRT2ToRAMDAC)      tempbx &= (clearmask | SetCRT2ToRAMDAC);
	   if(tempbx & SetCRT2ToLCD)         tempbx &= (clearmask | SetCRT2ToLCD);
	   if(tempbx & SetCRT2ToSCART)       tempbx &= (clearmask | SetCRT2ToSCART);
	   if(tempbx & SetCRT2ToHiVision)    tempbx &= (clearmask | SetCRT2ToHiVision);
	   if(tempbx & SetCRT2ToYPbPr525750) tempbx &= (clearmask | SetCRT2ToYPbPr525750);
d1196 3
a1198 1
    	if(!(tempbx & DriverMode)) tempbx |= SetSimuScanMode;
d1203 1
a1203 1
	       ((SiS_Pr->SiS_VBType & VB_NoLCD) && (tempbx & SetCRT2ToLCD)) ) {
d1349 1
a1349 1
           if(romindex && SiS_Pr->SiS_UseROM && (!(SiS_Pr->SiS_ROMNew))) {
a1445 16
	if(SiS_Pr->SiS_VBInfo & (SetCRT2ToYPbPr525750 | SetCRT2ToHiVision)) {
	   if(resinfo == SIS_RI_800x480 || resinfo == SIS_RI_1024x576 || resinfo == SIS_RI_1280x720) {
	      SiS_Pr->SiS_TVMode |= TVAspect169;
	   } else {
	      temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x39);
	      if(temp1 & 0x02) {
		 if(SiS_Pr->SiS_TVMode & (TVSetYPbPr750p | TVSetHiVision)) {
		    SiS_Pr->SiS_TVMode |= TVAspect169;
		 } else {
		    SiS_Pr->SiS_TVMode |= TVAspect43LB;
		 }
	      } else {
		 SiS_Pr->SiS_TVMode |= TVAspect43;
	      }
	   }
	}
d1496 1
a1502 34
static USHORT
SiS_GetBIOSLCDResInfo(SiS_Private *SiS_Pr)
{
   USHORT temp = SiS_Pr->SiS_LCDResInfo;
   /* Translate my LCDResInfo to BIOS value */
   if(temp == Panel_1280x768_2)  temp = Panel_1280x768;
   if(temp == Panel_1280x768_3)  temp = Panel_1280x768;
   return temp;
}

static void
SiS_GetLCDInfoBIOS(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
#ifdef SIS315H
   UCHAR  *ROMAddr;

   if((ROMAddr = GetLCDStructPtr661(SiS_Pr, HwInfo))) {
      SiS_Pr->PanelHT  = SISGETROMW(6);
      SiS_Pr->PanelVT  = SISGETROMW(8);
      SiS_Pr->PanelHRS = SISGETROMW(10);
      SiS_Pr->PanelHRE = SISGETROMW(12);
      SiS_Pr->PanelVRS = SISGETROMW(14);
      SiS_Pr->PanelVRE = SISGETROMW(16);
      SiS_Pr->PanelVCLKIdx315 = VCLK_CUSTOM_315;
      SiS_Pr->SiS_VCLKData[VCLK_CUSTOM_315].CLOCK =
	 SiS_Pr->SiS_VBVCLKData[VCLK_CUSTOM_315].CLOCK = (USHORT)ROMAddr[18];
      SiS_Pr->SiS_VCLKData[VCLK_CUSTOM_315].SR2B =
	 SiS_Pr->SiS_VBVCLKData[VCLK_CUSTOM_315].Part4_A = ROMAddr[19];
      SiS_Pr->SiS_VCLKData[VCLK_CUSTOM_315].SR2B =
	 SiS_Pr->SiS_VBVCLKData[VCLK_CUSTOM_315].Part4_B = ROMAddr[20];
   }
#endif
}

d1518 1
a1518 1
  SiS_Pr->SiS_LCDResInfo  = 0;
d1520 1
a1520 5
  SiS_Pr->SiS_LCDInfo     = 0;
  SiS_Pr->PanelHRS        = 999; /* HSync start */
  SiS_Pr->PanelHRE        = 999; /* HSync end */
  SiS_Pr->PanelVRS        = 999; /* VSync start */
  SiS_Pr->PanelVRE        = 999; /* VSync end */
d1522 1
a1522 5
  if(!(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA))) return;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else if(SiS_Pr->UseCustomMode) {
d1525 6
a1530 2
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d1533 2
d1537 1
a1537 3
  if((HwInfo->jChipType >= SIS_661) || (SiS_Pr->SiS_ROMNew)) {
     SiS_Pr->SiS_LCDTypeInfo = (SiS_GetReg(SiS_Pr->SiS_P3d4,0x39) & 0x7c) >> 2;
  } else if((HwInfo->jChipType < SIS_315H) || (HwInfo->jChipType >= SIS_661)) {
d1544 2
a1545 2
     /* Translate 300 series LCDRes to 315 series for unified usage */
     temp = SiS300SeriesLCDRes[temp];
d1547 1
d1549 6
a1554 3
  if(HwInfo->jChipType == SIS_550) {
     if(temp == Panel310_640x480_2) temp = Panel_640x480_2;
     if(temp == Panel310_640x480_3) temp = Panel_640x480_3;
d1557 4
a1560 12
  if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {	/* SiS LVDS */
     if(temp == Panel310_1280x768) {
        temp = Panel_1280x768_2;
#ifdef SIS315H
	if((myptr = GetLCDStructPtr661(SiS_Pr, HwInfo))) {
	   if((myptr[8] | (myptr[9] << 8)) == 798) temp = Panel_1280x768_3;
	}
#endif
     }
  } 

  SiS_Pr->SiS_LCDResInfo = temp;
a1569 11
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(SiS_Pr->SiS_LCDResInfo < SiS_Pr->SiS_PanelMin301)
	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_PanelMin301;
  } else {
     if(SiS_Pr->SiS_LCDResInfo < SiS_Pr->SiS_PanelMinLVDS)
	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_PanelMinLVDS;
  }

  SiS_Pr->PanelVCLKIdx300 = VCLK65_300;
  SiS_Pr->PanelVCLKIdx315 = VCLK108_2_315;

d1571 4
a1574 5
     case Panel_320x480:    SiS_Pr->PanelXRes =  320; SiS_Pr->PanelYRes =  480;
     			    SiS_Pr->PanelHT   =  400; SiS_Pr->PanelVT   =  525;
			    SiS_Pr->PanelVCLKIdx300 = VCLK28;
			    SiS_Pr->PanelVCLKIdx315 = VCLK28;
			    break;
d1576 15
a1590 151
     case Panel_640x480_3:  SiS_Pr->PanelXRes =  640; SiS_Pr->PanelYRes =  480;
     			    SiS_Pr->PanelVRS  =   24; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx300 = VCLK28;
			    SiS_Pr->PanelVCLKIdx315 = VCLK28;
			    break;
     case Panel_640x480:    SiS_Pr->PanelXRes =  640; SiS_Pr->PanelYRes =  480;
     			    			      SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx300 = VCLK28;
			    SiS_Pr->PanelVCLKIdx315 = VCLK28;
			    break;
     case Panel_800x600:    SiS_Pr->PanelXRes =  800; SiS_Pr->PanelYRes =  600;
     			    SiS_Pr->PanelHT   = 1056; SiS_Pr->PanelVT   =  628;
			    SiS_Pr->PanelHRS  =   40; SiS_Pr->PanelHRE  =  128;
			    SiS_Pr->PanelVRS  =    1; SiS_Pr->PanelVRE  =    4;
			    SiS_Pr->PanelVCLKIdx300 = VCLK40;
			    SiS_Pr->PanelVCLKIdx315 = VCLK40;
			    break;
     case Panel_1024x600:   SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  600;
     			    SiS_Pr->PanelHT   = 1344; SiS_Pr->PanelVT   =  800;
			    SiS_Pr->PanelHRS  =   24; SiS_Pr->PanelHRE  =  136;
			    SiS_Pr->PanelVRS  =   88; SiS_Pr->PanelVRE  =    6;
     			    SiS_Pr->PanelVCLKIdx300 = VCLK65_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK65_315;
     			    break;
     case Panel_1024x768:   SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1344; SiS_Pr->PanelVT   =  806;
			    SiS_Pr->PanelHRS  =   24; SiS_Pr->PanelHRE  =  136;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    if(HwInfo->jChipType < SIS_315H) {
			       SiS_Pr->PanelHRS = 23;
			       			      SiS_Pr->PanelVRE  =    5;
			    }
			    SiS_Pr->PanelVCLKIdx300 = VCLK65_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK65_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1152x768:   SiS_Pr->PanelXRes = 1152; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1344; SiS_Pr->PanelVT   =  806;
			    SiS_Pr->PanelHRS  =   24;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    if(HwInfo->jChipType < SIS_315H) {
			       SiS_Pr->PanelHRS = 23;
			       			      SiS_Pr->PanelVRE  =    5;
			    }
     			    SiS_Pr->PanelVCLKIdx300 = VCLK65_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK65_315;
     			    break;
     case Panel_1152x864:   SiS_Pr->PanelXRes = 1152; SiS_Pr->PanelYRes =  864;
     			    break;
     case Panel_1280x720:   SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  720;
     			    SiS_Pr->PanelHT   = 1650; SiS_Pr->PanelVT   =  750;
			    SiS_Pr->PanelHRS  =  110; SiS_Pr->PanelHRE  =   40;
			    SiS_Pr->PanelVRS  =    5; SiS_Pr->PanelVRE  =    5;
			    SiS_Pr->PanelVCLKIdx315 = VCLK_1280x720;
			    /* Data above for TMDS (projector); get from BIOS for LVDS */
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1280x768:   SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1688; SiS_Pr->PanelVT   =  802;
			    SiS_Pr->PanelHRS  =   48; SiS_Pr->PanelHRS  =  112;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    SiS_Pr->PanelVCLKIdx300 = VCLK81_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK81_315;
			    break;
     case Panel_1280x768_2: SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1408; SiS_Pr->PanelVT   =  806;
			    SiS_Pr->PanelHRS  =   16; SiS_Pr->PanelHRE  =   64;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    SiS_Pr->PanelVCLKIdx315 = VCLK_1280x768_2;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1280x768_3: SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1664; SiS_Pr->PanelVT   =  798;
			    SiS_Pr->PanelHRS   =  64; SiS_Pr->PanelHRE  =  128;
			    SiS_Pr->PanelVRS   =   3; SiS_Pr->PanelVRE  =    7;
			    SiS_Pr->PanelVCLKIdx315 = VCLK_1280x768_3;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1280x800:   SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  800;
     			    SiS_Pr->PanelHT   = 1408; SiS_Pr->PanelVT   =  816;
			    SiS_Pr->PanelHRS   =  21; SiS_Pr->PanelHRE  =   24;
			    SiS_Pr->PanelVRS   =   4; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx315 = VCLK69_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1280x960:   SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  960;
     			    SiS_Pr->PanelHT   = 1800; SiS_Pr->PanelVT   = 1000;
			    SiS_Pr->PanelVCLKIdx300 = VCLK108_3_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK108_3_315;
		 	    if(resinfo == SIS_RI_1280x1024) {
			       SiS_Pr->PanelVCLKIdx300 = VCLK100_300;
			       SiS_Pr->PanelVCLKIdx315 = VCLK100_315;
			    }
			    break;
     case Panel_1280x1024:  SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes = 1024;
     			    SiS_Pr->PanelHT   = 1688; SiS_Pr->PanelVT   = 1066;
			    SiS_Pr->PanelHRS  =   48; SiS_Pr->PanelHRE  =  112;
			    SiS_Pr->PanelVRS  =    1; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx300 = VCLK108_3_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK108_2_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1400x1050:  SiS_Pr->PanelXRes = 1400; SiS_Pr->PanelYRes = 1050;
     			    SiS_Pr->PanelHT   = 1688; SiS_Pr->PanelVT   = 1066;
			    SiS_Pr->PanelHRS  =   48; SiS_Pr->PanelHRE  =  112; /* HRE OK for LVDS, not for LCDA */
			    SiS_Pr->PanelVRS  =    1; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx315 = VCLK108_2_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1600x1200:  SiS_Pr->PanelXRes = 1600; SiS_Pr->PanelYRes = 1200;
     			    SiS_Pr->PanelHT   = 2160; SiS_Pr->PanelVT   = 1250;
			    SiS_Pr->PanelHRS  =   64; SiS_Pr->PanelHRE  =  192;
			    SiS_Pr->PanelVRS  =    1; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx315 = VCLK162_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1680x1050:  SiS_Pr->PanelXRes = 1680; SiS_Pr->PanelYRes = 1050;
     			    SiS_Pr->PanelHT   = 1900; SiS_Pr->PanelVT   = 1066;
			    SiS_Pr->PanelHRS  =   26; SiS_Pr->PanelHRE  =   76;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    SiS_Pr->PanelVCLKIdx315 = VCLK121_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_Custom:     SiS_Pr->PanelXRes = SiS_Pr->CP_MaxX;
    			    SiS_Pr->PanelYRes = SiS_Pr->CP_MaxY;
			    SiS_Pr->PanelHT   = SiS_Pr->CHTotal;
			    SiS_Pr->PanelVT   = SiS_Pr->CVTotal;
			    if(SiS_Pr->CP_PreferredIndex != -1) {
			       SiS_Pr->PanelXRes = SiS_Pr->CP_HDisplay[SiS_Pr->CP_PreferredIndex];
    			       SiS_Pr->PanelYRes = SiS_Pr->CP_VDisplay[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelHT   = SiS_Pr->CP_HTotal[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelVT   = SiS_Pr->CP_VTotal[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelHRS  = SiS_Pr->CP_HSyncStart[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelHRE  = SiS_Pr->CP_HSyncEnd[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelVRS  = SiS_Pr->CP_VSyncStart[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelVRE  = SiS_Pr->CP_VSyncEnd[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelHRS -= SiS_Pr->PanelXRes;
			       SiS_Pr->PanelHRE -= SiS_Pr->PanelHRS;
			       SiS_Pr->PanelVRS -= SiS_Pr->PanelYRes;
			       SiS_Pr->PanelVRE -= SiS_Pr->PanelVRS;
			    }
			    break;
     case Panel_Barco1366:  SiS_Pr->PanelXRes = 1360; SiS_Pr->PanelYRes = 1024;
     			    SiS_Pr->PanelHT   = 1688; SiS_Pr->PanelVT   = 1066;
     			    break;
     case Panel_848x480:    SiS_Pr->PanelXRes =  848; SiS_Pr->PanelYRes =  480;
     			    SiS_Pr->PanelHT   = 1088; SiS_Pr->PanelVT   =  525;
     			    break;
     default:		    SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1344; SiS_Pr->PanelVT   =  806;
			    break;
d1594 3
a1596 5
  SiS_Pr->SiS_LCDInfo = temp & ~0x000e;

  if(!(SiS_Pr->UsePanelScaler))        SiS_Pr->SiS_LCDInfo &= ~DontExpandLCD;
  else if(SiS_Pr->UsePanelScaler == 1) SiS_Pr->SiS_LCDInfo |= DontExpandLCD;

d1598 2
a1599 3
  if(HwInfo->jChipType >= SIS_661) {
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        if(temp & 0x08) SiS_Pr->SiS_LCDInfo |= LCDPass11;
d1601 1
d1603 4
a1606 17
        if(SiS_Pr->SiS_ROMNew) {
	   if(temp & 0x02) SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	} else if((myptr = GetLCDStructPtr661(SiS_Pr, HwInfo))) {
           if(myptr[2] & 0x01) SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	}
     }
  } else if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x39) & 0x01) SiS_Pr->SiS_LCDInfo |= LCDPass11;
     }
     if((SiS_Pr->SiS_ROMNew) && (!(SiS_Pr->PanelSelfDetected))) {
        SiS_Pr->SiS_LCDInfo &= ~(LCDRGB18Bit);
	temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
        if(temp & 0x01) SiS_Pr->SiS_LCDInfo |= LCDRGB18Bit;
	if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	   if(temp & 0x02) SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	}
a1607 1
  }
a1608 13

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     /* Always center screen on LVDS (if scaling is disabled) */
     SiS_Pr->SiS_LCDInfo &= ~LCDPass11;
  } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
        /* Always center screen on SiS LVDS (if scaling is disabled) */
        SiS_Pr->SiS_LCDInfo &= ~LCDPass11;
     } else {
        /* By default, pass 1:1 on SiS TMDS (if scaling is disabled) */
        SiS_Pr->SiS_LCDInfo |= LCDPass11;
        if(SiS_Pr->CenterScreen == 1) SiS_Pr->SiS_LCDInfo &= ~LCDPass11;
     }
d1610 1
d1614 1
a1614 1
        SiS_Pr->SiS_LCDInfo = 0x80 | 0x40 | 0x20;   /* neg h/v sync, RGB24(D0 = 0) */
d1618 3
d1623 37
a1659 45
        switch(SiS_Pr->SiS_LCDResInfo) {
        case Panel_Custom:
		/* For non-standard LCD resolution, we let the panel scale */
           	SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
		break;
	case Panel_1280x720:
	      	if(SiS_Pr->PanelHT == 1650) {
		   SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
		}
	case Panel_1280x768:	/* TMDS only */
		/* No idea about the timing and zoom factors */
           	SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
		break;
	case Panel_1280x960:
	 	SiS_Pr->SiS_LCDInfo &= ~DontExpandLCD;
		break;
	case Panel_1280x1024:
	        if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
		   if(ModeNo == 0x7c || ModeNo == 0x7d || ModeNo == 0x7e ||
		      ModeNo == 0x79 || ModeNo == 0x75 || ModeNo == 0x78 ||
		      ModeNo == 0x14 || ModeNo == 0x15 || ModeNo == 0x16) {
	      	      /* We do not scale to 1280x720/800/960 (B/C bridges only) */
                      SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	           }
	           if(((HwInfo->jChipType >= SIS_315H) &&
		       (ModeNo == 0x23 || ModeNo == 0x24 || ModeNo == 0x25)) ||
	              ((HwInfo->jChipType < SIS_315H)  &&
		       (ModeNo == 0x55 || ModeNo == 0x5a || ModeNo == 0x5b))) {
	              /* We do not scale to 1280x768 (B/C bridges only) */
                      SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	           }
		}
		break;
	case Panel_1400x1050:
		if(ModeNo == 0x3a || ModeNo == 0x4d || ModeNo == 0x65) {
	      	   /* We do not scale to 1280x1024 (all bridges) */
	      	   SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   	}
		break;
	case Panel_1600x1200:
		if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	      	   /* No idea about the timing and zoom factors (C bridge only) */
	      	   SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   	}
		break;
d1664 10
a1674 1
  if(HwInfo->jChipType < SIS_315H) {
d1676 1
a1676 1
        if(SiS_Pr->SiS_UseROM) {
a1687 1
  }
a1688 8

  /* Special cases */
  if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
     SiS_Pr->SiS_LCDInfo |= (DontExpandLCD | LCDPass11);
  }

  if(SiS_Pr->SiS_LCDResInfo == Panel_640x480) {
     SiS_Pr->SiS_LCDInfo |= LCDPass11;
d1691 3
a1693 3
  /* (In)validate LCDPass11 flag */
  if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
     SiS_Pr->SiS_LCDInfo &= ~LCDPass11;
d1696 2
a1697 15
  /* Special cases */
  if( (SiS_Pr->SiS_IF_DEF_FSTN)              ||
      (SiS_Pr->SiS_IF_DEF_DSTN)              ||
      (SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
      (SiS_Pr->SiS_CustomT == CUT_BARCO1024) ||
      (SiS_Pr->SiS_CustomT == CUT_PANEL848) ) {
     SiS_Pr->PanelHRS = 999;
     SiS_Pr->PanelHRE = 999;
  }

  if( (SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
      (SiS_Pr->SiS_CustomT == CUT_BARCO1024) ||
      (SiS_Pr->SiS_CustomT == CUT_PANEL848) ) {
     SiS_Pr->PanelVRS = 999;
     SiS_Pr->PanelVRE = 999;
d1702 14
a1715 17
     if(!(SiS_Pr->SiS_ROMNew)) {
        if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	   /* Enable 302LV/302ELV dual link mode.
	    * For 661, this is done above.
	    */
           if((SiS_Pr->SiS_CustomT == CUT_CLEVO1024) &&
	      (SiS_Pr->SiS_LCDResInfo == Panel_1024x768)) {
	      /* (Sets this in SenseLCD; new paneltypes) */
	      SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	   }
           if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
	      (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
              (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) ||
	      (SiS_Pr->SiS_LCDResInfo == Panel_1680x1050)) {
	      SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	   }
        }
d1723 12
a1734 5
	if(SiS_Pr->SiS_IF_DEF_TRUMPION == 0) {
	   if(ModeNo == 0x12) {
	      if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
	         SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	      }
d1740 14
a1753 15
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
	   SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	} else if(SiS_Pr->SiS_LCDResInfo == Panel_640x480) {
	   SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	} else if(ModeNo > 0x13) {
           if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
              if(resinfo == SIS_RI_512x384) SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	   } else if(SiS_Pr->SiS_LCDResInfo == Panel_1024x600) {
	      if((resinfo == SIS_RI_800x600) || (resinfo == SIS_RI_400x300)) {
                 SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	      }
           } else if(SiS_Pr->SiS_LCDResInfo == Panel_800x600) {
              if(resinfo == SIS_RI_400x300) SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
           }
	}
d1766 8
d1795 39
a1833 3
  USHORT CRT2Index,VCLKIndex=0,VCLKIndexGEN=0;
  USHORT modeflag,resinfo,tempbx;
  const UCHAR *CHTVVCLKPtr = NULL;
a1838 1
     VCLKIndexGEN = (SiS_GetRegByte((SiS_Pr->SiS_P3ca+0x02)) >> 2) & 0x03;
a1842 2
     VCLKIndexGEN = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
     if(HwInfo->jChipType < SIS_315H) VCLKIndexGEN &= 0x3f;
d1850 1
a1850 1
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {      	/*  LCD */
d1853 16
a1868 1
	      VCLKIndex = SiS_Pr->PanelVCLKIdx300;
d1870 24
a1893 7
	      VCLKIndex = SiS_Pr->PanelVCLKIdx315;
	      if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (SiS_Pr->SiS_LCDInfo & LCDPass11)) {
	         VCLKIndex = VCLKIndexGEN;
		 if(resinfo == SIS_RI_1280x720) VCLKIndex = VCLK_1280x720;
		 if(SiS_Pr->SiS_LCDResInfo == Panel_1280x720) {
		    if(SiS_Pr->PanelHT == 1344) VCLKIndex = VCLK_1280x720_2;
		 }
d1909 1
a1909 1
        } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {                 	/*  TV */
d1912 2
a1913 2
              if(SiS_Pr->SiS_TVMode & TVRPLLDIV2XO) 		VCLKIndex = HiTVVCLKDIV2;
     	      else                                  		VCLKIndex = HiTVVCLK;
d1915 2
a1916 2
            	 if(modeflag & Charx8Dot) 	    		VCLKIndex = HiTVSimuVCLK;
            	 else 			  	    		VCLKIndex = HiTVTextVCLK;
d1918 4
a1921 4
           } else if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) 	VCLKIndex = YPbPr750pVCLK;
	   else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p)   	VCLKIndex = TVVCLKDIV2;
	   else if(SiS_Pr->SiS_TVMode & TVRPLLDIV2XO)     	VCLKIndex = TVVCLKDIV2;
           else         		            	  	VCLKIndex = TVVCLK;
d1923 5
a1927 2
	   if(HwInfo->jChipType < SIS_315H) VCLKIndex += TVCLKBASE_300;
  	   else 	                    VCLKIndex += TVCLKBASE_315;
d1929 1
a1929 1
        } else {         						/* VGA2 */
d1931 6
a1936 3
	   VCLKIndex = VCLKIndexGEN;
	   if(HwInfo->jChipType < SIS_315H) {
              if(ModeNo > 0x13) {
d1949 6
a1954 3
        VCLKIndex = VCLKIndexGEN;
	if(HwInfo->jChipType < SIS_315H) {
           if(ModeNo > 0x13) {
d1967 1
a1967 1
     if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {
d2003 24
a2026 4
	   if(HwInfo->jChipType < SIS_315H) {
	      VCLKIndex = SiS_Pr->PanelVCLKIdx300;
	   } else {
	      VCLKIndex = SiS_Pr->PanelVCLKIdx315;
a2028 4
	   /* Special Timing: Barco iQ Pro R series */
	   if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) VCLKIndex = 0x44;

	   /* Special Timing: 848x480 parallel lvds */
d2041 6
a2046 7
	   VCLKIndex = VCLKIndexGEN;
	   if(HwInfo->jChipType < SIS_315H) {
              if(ModeNo > 0x13) {
		 if( (HwInfo->jChipType == SIS_630) &&
                     (HwInfo->jChipRevision >= 0x30) ) {
		    if(VCLKIndex == 0x14) VCLKIndex = 0x2e;
	         }
d2048 4
d2057 6
a2062 3
        VCLKIndex = VCLKIndexGEN;
	if(HwInfo->jChipType < SIS_315H) {
           if(ModeNo > 0x13) {
a2105 2
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
d2107 5
a2111 1
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d2229 2
a2230 2
	   if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
	      (SiS_Pr->SiS_LCDResInfo == Panel_1280x960)) {
d2257 3
a2259 3
	if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
	   (SiS_Pr->SiS_LCDResInfo == Panel_1280x960)  ||
	   ((SiS_Pr->SiS_LCDResInfo == Panel_Custom) &&
d2397 1
a2397 1
	/* 661: Sets p4 27 and 34 here, done in SetGroup4 here (old BIOS) */
d2459 8
a2466 2
  if(ModeNo <= 0x13) return((USHORT)SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo);
  else               return((USHORT)SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO);
d2476 2
a2477 6
     xres = SiS_Pr->CHDisplay;
     if(SiS_Pr->CModeFlag & HalfDCLK) xres *= 2;
     SiS_Pr->SiS_VGAHDE = SiS_Pr->SiS_HDE = xres;
     yres = SiS_Pr->CVDisplay;
     if(SiS_Pr->CModeFlag & DoubleScanMode) yres *= 2;
     SiS_Pr->SiS_VGAVDE = SiS_Pr->SiS_VDE = yres;
d2492 1
a2492 1
  if(!SiS_Pr->SiS_IF_DEF_DSTN && !SiS_Pr->SiS_IF_DEF_FSTN) {
d2503 4
a2506 2
     if(modeflag & HalfDCLK)       xres *= 2;
     if(modeflag & DoubleScanMode) yres *= 2;
d2510 2
a2511 3
  if((SiS_Pr->SiS_VBType & VB_SISVB) && (!(SiS_Pr->SiS_VBType & VB_NoLCD))) {

        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCDA | SetCRT2ToLCD | SetCRT2ToHiVision)) {
d2513 40
a2552 17
	}

	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	   switch(SiS_Pr->SiS_LCDResInfo) {
	   case Panel_1024x768:
	      if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
                 if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
          	    if(yres == 350) yres = 357;
          	    if(yres == 400) yres = 420;
            	    if(yres == 480) yres = 525;
        	 }
      	      }
	      break;
	   case Panel_1280x1024:
	      if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
		 /* BIOS bug - does this regardless of scaling */
      		 if(yres == 400) yres = 405;
a2553 10
      	      if(yres == 350) yres = 360;
      	      if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
                 if(yres == 360) yres = 375;
      	      }
	      break;
	   case Panel_1600x1200:
	      if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        	 if(yres == 1024) yres = 1056;
      	      }
	      break;
a2555 1

d2557 11
a2567 4

     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToHiVision)) {
           if(xres == 720) xres = 640;
a2568 12
     } else if(xres == 720) xres = 640;

     if(SiS_Pr->SiS_SetFlag & SetDOSMode) {
	yres = 400;
        if(HwInfo->jChipType >= SIS_315H) {
           if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x17) & 0x80) yres = 480;
        } else {
           if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) yres = 480;
        }
        if(SiS_Pr->SiS_IF_DEF_DSTN || SiS_Pr->SiS_IF_DEF_FSTN)  yres = 480;
     }

d2583 2
a2584 1
  USHORT modeflag=0;
d2591 1
a2591 1
     if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode))    return FALSE;
d2597 1
a2597 1
     (*ResIndex) = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d2600 1
a2600 1
     (*ResIndex) = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d2603 20
a2622 17
  (*ResIndex) &= 0x3F;

  if((SiS_Pr->SiS_IF_DEF_CH70xx) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
     (*DisplayType) = 18;
     if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) (*DisplayType)++;
     if(SiS_Pr->SiS_TVMode & TVSetPAL) {
      	(*DisplayType) += 2;
	if(SiS_Pr->SiS_ModeType > ModeVGA) {
	   if(SiS_Pr->SiS_CHSOverScan) (*DisplayType) = 99;
	}
	if(SiS_Pr->SiS_TVMode & TVSetPALM) {
	   (*DisplayType) = 18;  /* PALM uses NTSC data */
	   if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) (*DisplayType)++;
	} else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
	   (*DisplayType) = 20;  /* PALN uses PAL data  */
	   if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) (*DisplayType)++;
	}
d2624 38
a2661 17
  } else {
     switch(SiS_Pr->SiS_LCDResInfo) {
     case Panel_640x480:   (*DisplayType) = 50; break;
     case Panel_640x480_2: (*DisplayType) = 52; break;
     case Panel_640x480_3: (*DisplayType) = 54; break;
     case Panel_800x600:   (*DisplayType) =  0; break;
     case Panel_1024x600:  (*DisplayType) = 23; break;
     case Panel_1024x768:  (*DisplayType) =  4; break;
     case Panel_1152x768:  (*DisplayType) = 27; break;
     case Panel_1280x768:  (*DisplayType) = 40; break;
     case Panel_1280x1024: (*DisplayType) =  8; break;
     case Panel_1400x1050: (*DisplayType) = 14; break;
     case Panel_1600x1200: (*DisplayType) = 36; break;
     default: return FALSE;
     }

     if(modeflag & HalfDCLK) (*DisplayType)++;
a2662 7
     switch(SiS_Pr->SiS_LCDResInfo) {
     case Panel_640x480:
     case Panel_640x480_2:
     case Panel_640x480_3:
        break;
     default:
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) (*DisplayType) += 2;
a2663 1

d2665 2
a2666 2
        (*DisplayType) = 12;
	if(modeflag & HalfDCLK) (*DisplayType)++;
d2673 1
a2673 1
        (*DisplayType) = 22;
d2678 2
d2688 2
a2689 1
  USHORT tempbx=0,tempal=0,resinfo=0;
d2702 34
a2735 13
        tempbx = SiS_Pr->SiS_LCDResInfo;
	if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx += 32;

  	if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {  /* Pass 1:1 only (center-screen handled outside) */
	   tempbx = 100;
	   if(ModeNo >= 0x13) {
	      tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC_NS;
	      if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes == 1280) &&
	         (SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes ==  768)) {
	         /* Special for Fujitsu 7911 (VL-17WDX8), others custom */
	         if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768)        tempal = 0x08;
		 else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768_2) tempal = 0x0f;
		 else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768_3) tempal = 0x10;
d2737 6
a2742 1
	   }
d2747 4
a2750 5
	   if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
	      if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
	         tempbx = 200;
	         if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx++;
	      }
d2789 3
a2791 4
	         if(resinfo == SIS_RI_1024x768) tempal = 8;
	      }
	      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
	         if(resinfo == SIS_RI_1280x720) tempal = 8;
d2802 1
d2804 30
a2833 7
     if((SiS_Pr->SiS_IF_DEF_CH70xx) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
        tempbx = 10;
	if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
        if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	   tempbx += 2;
	   if(SiS_Pr->SiS_ModeType > ModeVGA) {
	      if(SiS_Pr->SiS_CHSOverScan) tempbx = 99;
d2835 24
a2858 31
	   if(SiS_Pr->SiS_TVMode & TVSetPALM) {
	      tempbx = 90;
	      if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	   } else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
	      tempbx = 92;
	      if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	   }
        }
     } else {
        switch(SiS_Pr->SiS_LCDResInfo) {
	case Panel_640x480:   tempbx = 6;  break;
	case Panel_640x480_2: tempbx = 30; break;
	case Panel_640x480_3: tempbx = 30; break;
	case Panel_800x600:   tempbx = 0;  break;
	case Panel_1024x600:  tempbx = 15; break;
	case Panel_1024x768:  tempbx = 2;  break;
	case Panel_1152x768:  tempbx = 17; break;
	case Panel_1280x768:  tempbx = 18; break;
	case Panel_1280x1024: tempbx = 4;  break;
	case Panel_1400x1050: tempbx = 8;  break;
	case Panel_1600x1200: tempbx = 21; break;
	case Panel_Barco1366: tempbx = 80; break;
	}

	switch(SiS_Pr->SiS_LCDResInfo) {
	case Panel_640x480:
	case Panel_640x480_2:
	case Panel_640x480_3:
	   break;
	default:
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
d2861 3
a2863 1
	if(SiS_Pr->SiS_LCDInfo & LCDPass11) tempbx = 7;
d2865 1
a2865 4
	if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
	   tempbx = 82;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	} else if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
d2873 1
a2873 1
        if(SiS_Pr->SiS_LCDResInfo != Panel_640x480) tempal = 7;
d2879 2
a2880 2
     (*CRT2Index) = tempbx;
     (*ResIndex) = tempal & 0x1F;
d2884 28
d2972 2
a2973 1
                    USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
d2991 1
a2991 1
   if((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
d2994 13
a3006 43
      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
         if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
	    if(SiS_Pr->UseCustomMode) {
	       SiS_Pr->SiS_VGAHT = SiS_Pr->SiS_HT = SiS_Pr->CHTotal;
	       SiS_Pr->SiS_VGAVT = SiS_Pr->SiS_VT = SiS_Pr->CVTotal;
	    } else {
	       if(ModeNo < 0x13) {
	          ResIndex = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
	       } else {
	          ResIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC_NS;
		  /* Special for our 3 types, others custom (works with default) */
		  if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes == 1280) &&
	             (SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes ==  768)) {
	             if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768)        ResIndex = 0x08;
		     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768_2) ResIndex = 0x0f;
		     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768_3) ResIndex = 0x10;
	          }
		  /* Special for 1280x720 TMDS <> LVDS */
		  if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes == 1280) &&
	             (SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes ==  720)) {
		     if(SiS_Pr->SiS_LCDResInfo == Panel_1280x720) {
		        if(SiS_Pr->PanelHT == 1344) ResIndex = 0x12;
		     }
	          }
	       }
	       SiS_Pr->SiS_VGAHT = SiS_Pr->SiS_NoScaleData[ResIndex].VGAHT;
               SiS_Pr->SiS_VGAVT = SiS_Pr->SiS_NoScaleData[ResIndex].VGAVT;
               SiS_Pr->SiS_HT    = SiS_Pr->SiS_NoScaleData[ResIndex].LCDHT;
               SiS_Pr->SiS_VT    = SiS_Pr->SiS_NoScaleData[ResIndex].LCDVT;
	    }
	 } else {
     	    SiS_Pr->SiS_VGAHT = SiS_Pr->SiS_HT = SiS_Pr->PanelHT;
            SiS_Pr->SiS_VGAVT = SiS_Pr->SiS_VT = SiS_Pr->PanelVT;
	 }
      } else {
	 /* This handles custom modes and custom panels */
	 SiS_Pr->SiS_HDE = SiS_Pr->PanelXRes;
         SiS_Pr->SiS_VDE = SiS_Pr->PanelYRes;
         SiS_Pr->SiS_HT  = SiS_Pr->PanelHT;
         SiS_Pr->SiS_VT  = SiS_Pr->PanelVT;
	 SiS_Pr->SiS_VGAHT = SiS_Pr->PanelHT - (SiS_Pr->PanelXRes - SiS_Pr->SiS_VGAHDE);
	 SiS_Pr->SiS_VGAVT = SiS_Pr->PanelVT - (SiS_Pr->PanelYRes - SiS_Pr->SiS_VGAVDE);
      }
d3008 2
a3009 1
      SiS_CalcLCDACRT1Timing(SiS_Pr,ModeNo,ModeIdIndex);
d3011 12
d3033 1
a3033 1
                     		&CRT2Index, &ResIndex, HwInfo);
d3041 45
a3085 42
      	 case  0: LVDSData = SiS_Pr->SiS_LVDS800x600Data_1;    break;
	 case  1: LVDSData = SiS_Pr->SiS_LVDS800x600Data_2;    break;
      	 case  2: LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;   break;
	 case  3: LVDSData = SiS_Pr->SiS_LVDS1024x768Data_2;   break;
      	 case  4: LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_1;  break;
      	 case  5: LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_2;  break;
	 case  6: LVDSData = SiS_Pr->SiS_LVDS640x480Data_1;    break;
         case  7: LVDSData = SiS_Pr->SiS_LVDSXXXxXXXData_1;    break;
	 case  8: LVDSData = SiS_Pr->SiS_LVDS1400x1050Data_1;  break;
	 case  9: LVDSData = SiS_Pr->SiS_LVDS1400x1050Data_2;  break;
      	 case 10: LVDSData = SiS_Pr->SiS_CHTVUNTSCData;        break;
      	 case 11: LVDSData = SiS_Pr->SiS_CHTVONTSCData;        break;
      	 case 12: LVDSData = SiS_Pr->SiS_CHTVUPALData;         break;
      	 case 13: LVDSData = SiS_Pr->SiS_CHTVOPALData;         break;
      	 case 14: LVDSData = SiS_Pr->SiS_LVDS320x480Data_1;    break;
	 case 15: LVDSData = SiS_Pr->SiS_LVDS1024x600Data_1;   break;
	 case 16: LVDSData = SiS_Pr->SiS_LVDS1024x600Data_2;   break;
	 case 17: LVDSData = SiS_Pr->SiS_LVDS1152x768Data_1;   break;
	 case 18: LVDSData = SiS_Pr->SiS_LVDS1152x768Data_2;   break;
	 case 19: LVDSData = SiS_Pr->SiS_LVDS1280x768Data_1;   break;
	 case 20: LVDSData = SiS_Pr->SiS_LVDS1280x768Data_2;   break;
	 case 21: LVDSData = SiS_Pr->SiS_LVDS1600x1200Data_1;  break;
	 case 22: LVDSData = SiS_Pr->SiS_LVDS1600x1200Data_2;  break;
	 case 30: LVDSData = SiS_Pr->SiS_LVDS640x480Data_2;    break;
	 case 80: LVDSData = SiS_Pr->SiS_LVDSBARCO1366Data_1;  break;
	 case 81: LVDSData = SiS_Pr->SiS_LVDSBARCO1366Data_2;  break;
	 case 82: LVDSData = SiS_Pr->SiS_LVDSBARCO1024Data_1;  break;
	 case 83: LVDSData = SiS_Pr->SiS_LVDSBARCO1024Data_2;  break;
	 case 84: LVDSData = SiS_Pr->SiS_LVDS848x480Data_1;    break;
	 case 85: LVDSData = SiS_Pr->SiS_LVDS848x480Data_2;    break;
	 case 90: LVDSData = SiS_Pr->SiS_CHTVUPALMData;        break;
      	 case 91: LVDSData = SiS_Pr->SiS_CHTVOPALMData;        break;
      	 case 92: LVDSData = SiS_Pr->SiS_CHTVUPALNData;        break;
      	 case 93: LVDSData = SiS_Pr->SiS_CHTVOPALNData;        break;
	 case 99: LVDSData = SiS_Pr->SiS_CHTVSOPALData;	       break;  /* Super Overscan */
	 default: LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;   break;
      }

      SiS_Pr->SiS_VGAHT = (LVDSData+ResIndex)->VGAHT;
      SiS_Pr->SiS_VGAVT = (LVDSData+ResIndex)->VGAVT;
      SiS_Pr->SiS_HT    = (LVDSData+ResIndex)->LCDHT;
      SiS_Pr->SiS_VT    = (LVDSData+ResIndex)->LCDVT;
d3087 8
a3094 1
      if(!(SiS_Pr->SiS_VBType & VB_SISVB)) {
d3096 11
a3106 8
            if((!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) || (SiS_Pr->SiS_SetFlag & SetDOSMode)) {
	       SiS_Pr->SiS_HDE = SiS_Pr->PanelXRes;
               SiS_Pr->SiS_VDE = SiS_Pr->PanelYRes;
	       if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
		  if(ResIndex < 0x08) {
		     SiS_Pr->SiS_HDE = 1280;
                     SiS_Pr->SiS_VDE = 1024;
                  }
a3127 3
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
d3129 7
a3135 2
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d3172 14
a3185 14
        case  2: TVPtr = SiS_Pr->SiS_ExtHiTVData;   break;
        case  3: TVPtr = SiS_Pr->SiS_ExtPALData;    break;
        case  4: TVPtr = SiS_Pr->SiS_ExtNTSCData;   break;
        case  5: TVPtr = SiS_Pr->SiS_Ext525iData;   break;
        case  6: TVPtr = SiS_Pr->SiS_Ext525pData;   break;
        case  7: TVPtr = SiS_Pr->SiS_Ext750pData;   break;
        case  8: TVPtr = SiS_Pr->SiS_StPALData;     break;
        case  9: TVPtr = SiS_Pr->SiS_StNTSCData;    break;
        case 10: TVPtr = SiS_Pr->SiS_St525iData;    break;
        case 11: TVPtr = SiS_Pr->SiS_St525pData;    break;
        case 12: TVPtr = SiS_Pr->SiS_St750pData;    break;
        case 13: TVPtr = SiS_Pr->SiS_St1HiTVData;   break;
        case 14: TVPtr = SiS_Pr->SiS_St2HiTVData;   break;
        default: TVPtr = SiS_Pr->SiS_StPALData;     break;
a3265 3
     SiS_Pr->SiS_RVBHCMAX  = 1;
     SiS_Pr->SiS_RVBHCFACT = 1;

d3268 2
d3279 2
a3280 6
        if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {

           SiS_Pr->SiS_VGAHT     = SiS_Pr->PanelHT;
           SiS_Pr->SiS_VGAVT     = SiS_Pr->PanelVT;
           SiS_Pr->SiS_HT        = SiS_Pr->PanelHT;
           SiS_Pr->SiS_VT        = SiS_Pr->PanelVT;
d3282 34
a3315 33
	} else {

           SiS_GetCRT2Ptr(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                          &CRT2Index,&ResIndex,HwInfo);

           switch(CRT2Index) {
	      case Panel_1024x768      : LCDPtr = SiS_Pr->SiS_ExtLCD1024x768Data;   break;
	      case Panel_1024x768  + 32: LCDPtr = SiS_Pr->SiS_St2LCD1024x768Data;   break;
	      case Panel_1280x720      :
	      case Panel_1280x720  + 32: LCDPtr = SiS_Pr->SiS_LCD1280x720Data;      break;
	      case Panel_1280x768_2    : LCDPtr = SiS_Pr->SiS_ExtLCD1280x768_2Data; break;
              case Panel_1280x768_2+ 32: LCDPtr = SiS_Pr->SiS_StLCD1280x768_2Data;  break;
	      case Panel_1280x768_3    :
	      case Panel_1280x768_3+ 32: LCDPtr = SiS_Pr->SiS_LCD1280x768_3Data;    break;
	      case Panel_1280x800      :
	      case Panel_1280x800  + 32: LCDPtr = SiS_Pr->SiS_LCD1280x800Data;      break;
	      case Panel_1280x960      :
	      case Panel_1280x960  + 32: LCDPtr = SiS_Pr->SiS_LCD1280x960Data;      break;
              case Panel_1280x1024     : LCDPtr = SiS_Pr->SiS_ExtLCD1280x1024Data;  break;
              case Panel_1280x1024 + 32: LCDPtr = SiS_Pr->SiS_St2LCD1280x1024Data;  break;
              case Panel_1400x1050     : LCDPtr = SiS_Pr->SiS_ExtLCD1400x1050Data;  break;
              case Panel_1400x1050 + 32: LCDPtr = SiS_Pr->SiS_StLCD1400x1050Data;   break;
              case Panel_1600x1200     : LCDPtr = SiS_Pr->SiS_ExtLCD1600x1200Data;  break;
              case Panel_1600x1200 + 32: LCDPtr = SiS_Pr->SiS_StLCD1600x1200Data;   break;
	      case Panel_1680x1050     :
	      case Panel_1680x1050 + 32: LCDPtr = SiS_Pr->SiS_LCD1680x1050Data;     break;
	      case 100		       : LCDPtr = SiS_Pr->SiS_NoScaleData;	    break;
#ifdef SIS315H
	      case 200                 : LCDPtr = SiS310_ExtCompaq1280x1024Data;    break;
	      case 201                 : LCDPtr = SiS_Pr->SiS_St2LCD1280x1024Data;  break;
#endif
              default                  : LCDPtr = SiS_Pr->SiS_ExtLCD1024x768Data;   break;
           }
d3318 2
a3319 1
           xf86DrvMsg(0, X_INFO, "GetCRT2Data: Index %d ResIndex %d\n", CRT2Index, ResIndex);
d3322 2
a3323 13
           SiS_Pr->SiS_RVBHCMAX  = (LCDPtr+ResIndex)->RVBHCMAX;
           SiS_Pr->SiS_RVBHCFACT = (LCDPtr+ResIndex)->RVBHCFACT;
           SiS_Pr->SiS_VGAHT     = (LCDPtr+ResIndex)->VGAHT;
           SiS_Pr->SiS_VGAVT     = (LCDPtr+ResIndex)->VGAVT;
           SiS_Pr->SiS_HT        = (LCDPtr+ResIndex)->LCDHT;
           SiS_Pr->SiS_VT        = (LCDPtr+ResIndex)->LCDVT;

        }

	tempax = SiS_Pr->PanelXRes;
        tempbx = SiS_Pr->PanelYRes;

	if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d3328 3
d3339 1
d3341 8
a3348 1
	} else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x960) {
d3352 13
a3364 6
	} else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
           if     (SiS_Pr->SiS_VGAVDE == 360) tempbx = 768;
           else if(SiS_Pr->SiS_VGAVDE == 375) tempbx = 800;
           else if(SiS_Pr->SiS_VGAVDE == 405) tempbx = 864;
        } else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) {
	   if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
d3368 4
a3371 2
        }

a3375 1

d3389 21
a3409 2
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
        SiS_GetCRT2DataLVDS(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d3411 3
a3413 6
	if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
	   /* Need LVDS Data for LCD on 301B-DH */
	   SiS_GetCRT2DataLVDS(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
	} else {
	   SiS_GetCRT2Data301(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
        }
d3424 1
a3424 1
/*         GET LVDS DES (SKEW) DATA          */
d3432 1
a3432 1
  USHORT modeflag;
d3436 1
a3436 1
     (*ResIndex) = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d3439 1
a3439 1
     (*ResIndex) = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d3442 1
a3442 3
  (*ResIndex) &= 0x1F;
  (*PanelIndex) = 0;

d3445 3
a3447 3
        (*PanelIndex) = 50;
        if((SiS_Pr->SiS_TVMode & TVSetPAL) && (!(SiS_Pr->SiS_TVMode & TVSetPALM))) (*PanelIndex) += 2;
        if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) (*PanelIndex) += 1;
d3449 1
a3449 1
        /* PALM uses NTSC data, PALN uses PAL data */
d3454 1
a3454 1
     *PanelIndex = SiS_Pr->SiS_LCDTypeInfo;
d3459 1
a3459 1
        (*PanelIndex) = SiS_Pr->SiS_LCDResInfo - 1;
d3461 4
a3464 6
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        (*PanelIndex) += 16;
        if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
           (*PanelIndex) = 32;
           if(modeflag & HalfDCLK) (*PanelIndex)++;
	}
d3469 2
a3470 2
     if(SiS_Pr->SiS_LCDResInfo != Panel_640x480) {
        (*ResIndex) = 7;
d3472 1
a3472 1
           if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) (*ResIndex)++;
d3476 54
d3531 1
d3541 5
a3545 9
  SiS_Pr->SiS_LCDHDES = 0;
  SiS_Pr->SiS_LCDVDES = 0;

  if( (SiS_Pr->UseCustomMode) 		         ||
      (SiS_Pr->SiS_LCDResInfo == Panel_Custom)   ||
      (SiS_Pr->SiS_CustomT == CUT_PANEL848)      ||
      ((SiS_Pr->SiS_VBType & VB_SISVB) &&
       (SiS_Pr->SiS_LCDInfo & DontExpandLCD) &&
       (SiS_Pr->SiS_LCDInfo & LCDPass11)) ) {
d3552 23
a3574 23
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        /* non-pass 1:1 only, see above */
        if(SiS_Pr->SiS_VGAVDE != SiS_Pr->PanelYRes) {
           SiS_Pr->SiS_LCDHDES = SiS_Pr->SiS_HT - ((SiS_Pr->PanelXRes - SiS_Pr->SiS_VGAHDE) / 2);
	   SiS_Pr->SiS_LCDVDES = SiS_Pr->SiS_VT - ((SiS_Pr->PanelYRes - SiS_Pr->SiS_VGAVDE) / 2);
	}
     }
     if(SiS_Pr->SiS_VGAVDE == SiS_Pr->PanelYRes) {
        switch(SiS_Pr->SiS_CustomT) {
        case CUT_UNIWILL1024:
        case CUT_UNIWILL10242:
        case CUT_CLEVO1400:
	   if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	      SiS_Pr->SiS_LCDVDES = SiS_Pr->PanelVT - 1;
	   }
	   break;
	}
	if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
	   if(SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) {
	      SiS_Pr->SiS_LCDVDES = SiS_Pr->PanelVT - 1;
	   }
	}
     }
d3582 81
a3662 62
     switch(PanelIndex) {
     	case  0: PanelDesPtr = SiS_Pr->SiS_PanelType00_1;    break;   /* ---  */
     	case  1: PanelDesPtr = SiS_Pr->SiS_PanelType01_1;    break;
     	case  2: PanelDesPtr = SiS_Pr->SiS_PanelType02_1;    break;
     	case  3: PanelDesPtr = SiS_Pr->SiS_PanelType03_1;    break;
     	case  4: PanelDesPtr = SiS_Pr->SiS_PanelType04_1;    break;
     	case  5: PanelDesPtr = SiS_Pr->SiS_PanelType05_1;    break;
     	case  6: PanelDesPtr = SiS_Pr->SiS_PanelType06_1;    break;
     	case  7: PanelDesPtr = SiS_Pr->SiS_PanelType07_1;    break;
     	case  8: PanelDesPtr = SiS_Pr->SiS_PanelType08_1;    break;
     	case  9: PanelDesPtr = SiS_Pr->SiS_PanelType09_1;    break;
     	case 10: PanelDesPtr = SiS_Pr->SiS_PanelType0a_1;    break;
     	case 11: PanelDesPtr = SiS_Pr->SiS_PanelType0b_1;    break;
     	case 12: PanelDesPtr = SiS_Pr->SiS_PanelType0c_1;    break;
     	case 13: PanelDesPtr = SiS_Pr->SiS_PanelType0d_1;    break;
     	case 14: PanelDesPtr = SiS_Pr->SiS_PanelType0e_1;    break;
     	case 15: PanelDesPtr = SiS_Pr->SiS_PanelType0f_1;    break;
     	case 16: PanelDesPtr = SiS_Pr->SiS_PanelType00_2;    break;    /* --- */
     	case 17: PanelDesPtr = SiS_Pr->SiS_PanelType01_2;    break;
     	case 18: PanelDesPtr = SiS_Pr->SiS_PanelType02_2;    break;
     	case 19: PanelDesPtr = SiS_Pr->SiS_PanelType03_2;    break;
     	case 20: PanelDesPtr = SiS_Pr->SiS_PanelType04_2;    break;
     	case 21: PanelDesPtr = SiS_Pr->SiS_PanelType05_2;    break;
     	case 22: PanelDesPtr = SiS_Pr->SiS_PanelType06_2;    break;
     	case 23: PanelDesPtr = SiS_Pr->SiS_PanelType07_2;    break;
     	case 24: PanelDesPtr = SiS_Pr->SiS_PanelType08_2;    break;
     	case 25: PanelDesPtr = SiS_Pr->SiS_PanelType09_2;    break;
     	case 26: PanelDesPtr = SiS_Pr->SiS_PanelType0a_2;    break;
     	case 27: PanelDesPtr = SiS_Pr->SiS_PanelType0b_2;    break;
     	case 28: PanelDesPtr = SiS_Pr->SiS_PanelType0c_2;    break;
     	case 29: PanelDesPtr = SiS_Pr->SiS_PanelType0d_2;    break;
     	case 30: PanelDesPtr = SiS_Pr->SiS_PanelType0e_2;    break;
     	case 31: PanelDesPtr = SiS_Pr->SiS_PanelType0f_2;    break;
	case 32: PanelDesPtr = SiS_Pr->SiS_PanelTypeNS_1;    break;    /* pass 1:1 */
	case 33: PanelDesPtr = SiS_Pr->SiS_PanelTypeNS_2;    break;
     	case 50: PanelDesPtr = SiS_Pr->SiS_CHTVUNTSCDesData; break;    /* TV */
     	case 51: PanelDesPtr = SiS_Pr->SiS_CHTVONTSCDesData; break;
     	case 52: PanelDesPtr = SiS_Pr->SiS_CHTVUPALDesData;  break;
     	case 53: PanelDesPtr = SiS_Pr->SiS_CHTVOPALDesData;  break;
	default: return;
     }

     SiS_Pr->SiS_LCDHDES = (PanelDesPtr+ResIndex)->LCDHDES;
     SiS_Pr->SiS_LCDVDES = (PanelDesPtr+ResIndex)->LCDVDES;

     if((ModeNo <= 0x13) && (SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
        modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
        if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
	   if(!(modeflag & HalfDCLK)) SiS_Pr->SiS_LCDHDES = 632;
        } else if(!(SiS_Pr->SiS_SetFlag & SetDOSMode)) {
           if(SiS_Pr->SiS_LCDResInfo != Panel_1280x1024) {
              if(SiS_Pr->SiS_LCDResInfo >= Panel_1024x768) {
	         if(HwInfo->jChipType < SIS_315H) {
	            if(!(modeflag & HalfDCLK)) SiS_Pr->SiS_LCDHDES = 320;
	         } else {
	            if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)  SiS_Pr->SiS_LCDHDES = 480;
                    if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) SiS_Pr->SiS_LCDHDES = 804;
		    if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) SiS_Pr->SiS_LCDHDES = 704;
                    if(!(modeflag & HalfDCLK)) {
                       SiS_Pr->SiS_LCDHDES = 320;
	               if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) SiS_Pr->SiS_LCDHDES = 632;
		       if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) SiS_Pr->SiS_LCDHDES = 542;
d3673 12
d4757 1
a4757 1
       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
d4800 1
a4800 1
       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
d4891 1
a4891 1
/* Set CRT2 OFFSET / PITCH */
d4893 3
a4895 2
SiS_SetCRT2Offset(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
	          USHORT RRTI, PSIS_HW_INFO HwInfo)
d4902 2
a4903 1
  offset = SiS_GetOffset(SiS_Pr,ModeNo,ModeIdIndex,RRTI,HwInfo);
d4905 2
a4906 4
  if((SiS_Pr->SiS_LCDResInfo == Panel_640x480_2) ||
     (SiS_Pr->SiS_LCDResInfo == Panel_640x480_3)) {
     offset >>= 1;
  }
d4908 4
a4911 2
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x07,(offset & 0xFF));
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x09,(offset >> 8));
d4917 1
a4917 1
/* Set CRT2 sync and PanelLink mode */
d4939 1
d4941 1
d4944 1
d4948 1
a4948 7
	   tempah |= 0xf0;
        }
	if( (SiS_Pr->SiS_IF_DEF_FSTN) ||
            (SiS_Pr->SiS_IF_DEF_DSTN) ||
            (SiS_Pr->SiS_IF_DEF_TRUMPION) ||
            (SiS_Pr->SiS_CustomT == CUT_PANEL848) ) {
           tempah |= 0x30;
d4951 1
a4954 1
	   tempah &= 0x18;
a4955 1
	   /* Don't care about 12/18/24 bit mode - TV is via VGA, not PL */
a4971 1
	   tempbl = 0;
a4974 1
		 tempbl = (tempah >> 6) & 0x03;
d4978 1
d4981 3
a4983 1
  	   tempah |= 0xc0;
a4984 3
	   if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (!(SiS_Pr->SiS_VBType & VB_NoLCD))) {
	      SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xf0,tempbl);
	   }
d5002 1
a5002 1
        if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {	  		/* 315 - LVDS */
d5004 4
a5007 3
	   tempbl = 0;
	   if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) &&
	      (SiS_Pr->SiS_LCDResInfo == Panel_1280x1024)) {
a5008 7
	      if(SiS_Pr->SiS_LCDInfo & LCDSync) {
	        tempbl = ((SiS_Pr->SiS_LCDInfo & 0xc0) >> 6);
	      }
	   } else if((SiS_Pr->SiS_CustomT == CUT_CLEVO1400)  &&
	             (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050)) {
       	      tempah = infoflag >> 8;
	      tempbl = 0x03;
a5010 3
	      tempbl = (tempah >> 6) & 0x03;
	      tempbl |= 0x08;
	      if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempbl |= 0x04;
d5013 1
a5015 1
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)   tempah |= 0xc0;
a5016 5
	   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	         SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xf0,tempbl);
	      }
	   }
d5018 1
a5018 1
        } else {							/* 315 - TMDS */
d5020 1
a5020 1
           tempah = tempbl = infoflag >> 8;
d5022 1
a5022 7
	      tempbl = 0;
	      if((SiS_Pr->SiS_VBType & VB_SIS301C) && (SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
	         if(ModeNo <= 0x13) {
	            tempah = SiS_GetRegByte((SiS_Pr->SiS_P3ca+0x02));
  	         }
	      }
	      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
a5024 1
		    tempbl = (tempah >> 6) & 0x03;
d5029 1
d5032 4
a5035 14
	   if(SiS_Pr->SiS_VBType & VB_NoLCD) {
	      /* Imitate BIOS bug */
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)  tempah |= 0xc0;
	   }
	   if((SiS_Pr->SiS_VBType & VB_SIS301C) && (SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
	      tempah >>= 3;
	      tempah &= 0x18;
	      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xe7,tempah);
	   } else {
              SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
	      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	         if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	            SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xf0,tempbl);
		 }
d5038 1
d5046 1
a5046 1
/* Set CRT2 FIFO on 300/630/730 */
d5101 1
a5101 1
     CRT1ModeNo = SiS_Pr->SiS_CRT1Mode;                                 /* get CRT1 ModeNo */
d5110 1
a5110 1
        VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;			/* Get VCLK */
d5120 1
a5120 1
     VCLK = SiS_Pr->CSRClock_CRT1;					/* Get VCLK */
d5122 1
a5122 1
     switch(data2) {							/* Get color depth */
d5269 1
a5269 1
       VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;                /* Get VCLK  */
d5272 1
a5272 1
          if(SiS_Pr->SiS_UseROM) {
d5282 1
a5282 1
       VCLK = SiS_Pr->CSRClock;					/* Get VCLK */
d5286 1
a5286 1
    colorth = SiS_GetColorDepth(SiS_Pr,CRT2ModeNo,modeidindex); /* Get colordepth */
d5305 2
a5306 2
       if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
       	  temp = (temp & (~0x1F)) | 0x13;
d5336 11
a5346 1
/* Set CRT2 FIFO on 315/330 series */
d5349 2
a5350 1
SiS_SetCRT2FIFO_310(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d5352 261
a5612 1
  USHORT temp;
d5614 2
a5615 4
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x01,0x3B);
  temp = 0x04;
  if(HwInfo->jChipType >= SIS_661) {
     if((SiS_GetReg(SiS_Pr->SiS_P3d4,0x5c) & 0xf8) == 0x80) temp = 0x44;
a5616 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x02,~0x3f,temp);
d5618 1
a5618 1
#endif
d5631 1
a5631 1
/* Set Part 1 / SiS bridge slave mode */
d5638 1
a5638 1
  USHORT  resinfo,modeflag,xres=0;
a5646 1
     xres = SiS_Pr->CHDisplay;
a5649 1
     xres = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes;
a5653 6
  if((HwInfo->jChipType >= SIS_661) && (ModeNo > 0x13)) {
     if(xres >= 1600) {
        SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x31,0x04);
     }
  }

d5714 2
a5715 2
           if((SiS_Pr->SiS_LCDResInfo != Panel_1280x960) &&
	      (SiS_Pr->SiS_LCDResInfo != Panel_1600x1200)) {
d5722 1
a5722 1
                          if(SiS_Pr->SiS_LCDResInfo != Panel_1280x1024)
d5727 1
a5727 1
		 if(SiS_Pr->SiS_LCDResInfo != Panel_1400x1050) {
d5817 1
a5817 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d5863 1
a5863 1
     if(SiS_Pr->SiS_LCDResInfo != Panel_1400x1050) {
d5941 1
a5941 1
  temp = SiS_GetRegByte((SiS_Pr->SiS_P3ca+0x02));
d5945 1
a5945 4
/* Setup panel link
 * This is used for LVDS, LCDA and Chrontel TV output
 * 300/LVDS+TV, 300/301B-DH, 315/LVDS+TV, 315/LCDA
 */
d5948 1
a5948 1
                   PSIS_HW_INFO HwInfo, USHORT RefreshRateTableIndex)
d5950 2
a5951 7
  USHORT modeflag,resinfo;
  USHORT push2,tempax,tempbx,tempcx,temp;
  ULONG tempeax=0,tempebx,tempecx,tempvcfact=0;
  BOOLEAN islvds = FALSE, issis  = FALSE, chkdclkfirst = FALSE;
#ifdef SIS300
  USHORT crt2crtc;
#endif
d5955 5
a5963 9
#ifdef SIS300
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
#endif
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
#ifdef SIS300
     crt2crtc = 0;
#endif
a5966 3
#ifdef SIS300
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
#endif
d5969 11
a5979 4
  /* is lvds if really LVDS, or SiS 301B-DH with external LVDS transmitter */
  if((SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
     ((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBType & VB_NoLCD))) {
     islvds = TRUE;
d5982 3
a5984 4
  /* is really sis if sis bridge, but not 301B-DH */
  if((SiS_Pr->SiS_VBType & VB_SISVB) && (!(SiS_Pr->SiS_VBType & VB_NoLCD))) {
     issis = TRUE;
  }
d5986 3
a5988 4
  if((HwInfo->jChipType >= SIS_315H) && (islvds) && (!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA))) {
     if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
        chkdclkfirst = TRUE;
     }
d5991 10
a6000 21
#ifdef SIS315H
  if((HwInfo->jChipType >= SIS_315H) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
     if(IS_SIS330) {
        SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x10);
     } else if(IS_SIS740) {
        if(islvds) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xfb,0x04);
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x03);
        } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
           SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x10);
        }
     } else {
        if(islvds) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xfb,0x04);
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x00);
        } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
           SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2D,0x0f);
	   if(SiS_Pr->SiS_VBType & VB_SIS301C) {
	      if((SiS_Pr->SiS_LCDResInfo == Panel_1024x768) ||
	         (SiS_Pr->SiS_LCDResInfo == Panel_1280x1024)) {
	         SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x20);
d6006 1
a6006 1
#endif
d6008 1
a6008 1
  /* Horizontal */
d6010 1
a6010 16
  tempax = SiS_Pr->SiS_LCDHDES;
  if(islvds) {
     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
        if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
           if((SiS_Pr->SiS_LCDResInfo == Panel_640x480) &&
              (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode))) {
  	      tempax -= 8;
	   }
	}
     }
  }

  temp = (tempax & 0x0007);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1A,temp);			/* BPLHDESKEW[2:0]   */
  temp = (tempax >> 3) & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,temp);			/* BPLHDESKEW[10:3]  */
a6011 12
  tempbx = SiS_Pr->SiS_HDE;
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if((SiS_Pr->SiS_LCDResInfo == Panel_640x480_2) ||
        (SiS_Pr->SiS_LCDResInfo == Panel_640x480_3)) {
        tempbx >>= 1;
     }
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        tempbx = SiS_Pr->PanelXRes;
     }
  }

  tempax += tempbx;
d6014 1
a6014 10
  temp = tempax;
#if 0
  /* TEST 2 */
  if((HwInfo->jChipType >= SIS_315H) && (islvds) && (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050)) {
  } else
  /* /TEST2 */
#endif
  if(temp & 0x07) temp += 8;
  temp >>= 3;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,temp);			/* BPLHDEE  */
d6016 5
a6020 3
  tempcx = (SiS_Pr->SiS_HT - tempbx) >> 2;

  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
d6022 25
a6046 1
        if(SiS_Pr->PanelHRS != 999) tempcx = SiS_Pr->PanelHRS;
d6050 1
a6050 1
  tempcx += tempax;
d6053 30
a6082 20
  temp = (tempcx >> 3) & 0x00FF;
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
           switch(ModeNo) {
           case 0x04:
           case 0x05:
           case 0x0d: temp = 0x56; break;
           case 0x10: temp = 0x60; break;
           case 0x13: temp = 0x5f; break;
           case 0x40:
           case 0x41:
           case 0x4f:
           case 0x43:
           case 0x44:
           case 0x62:
           case 0x56:
           case 0x53:
           case 0x5d:
           case 0x5e: temp = 0x54; break;
a6086 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,temp);			/* BPLHRS */
d6088 2
a6089 4
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     temp += 2;
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        temp += 8;
d6091 1
a6091 5
        /* TEST 1 */
	if((HwInfo->jChipType >= SIS_315H) && (islvds) && (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050)) {
	   temp -= 16;
	} else
	/* /test1 */
d6093 42
a6134 5
        if(SiS_Pr->PanelHRE != 999) {
           temp = tempcx + SiS_Pr->PanelHRE;
	   if(temp >= SiS_Pr->SiS_HT) temp -= SiS_Pr->SiS_HT;
	   temp >>= 3;
        }
d6136 2
d6139 3
a6141 1
     temp += 10;
d6144 2
a6145 6
  temp &= 0x1F;
  temp |= ((tempcx & 0x07) << 5);
#if 0
  if(SiS_Pr->SiS_IF_DEF_FSTN) temp = 0x20;       		/* WRONG? BIOS loads cl, not ah */
#endif
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,temp);			/* BPLHRE */
d6147 1
a6147 1
  /* Vertical */
d6149 13
a6161 3
  tempax = SiS_Pr->SiS_VGAVDE;
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
d6166 1
a6166 1
  tempbx = SiS_Pr->SiS_LCDVDES + tempax;
d6171 39
a6209 5
  tempcx = SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE;
  if(HwInfo->jChipType < SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
        if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
	   tempcx = SiS_Pr->SiS_VGAVT - SiS_Pr->PanelYRes;
a6212 2
  if(islvds) tempcx >>= 1;
  else       tempcx >>= 2;
d6214 6
a6219 10
  if( (SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) &&
      (!(SiS_Pr->SiS_LCDInfo & LCDPass11)) 		    &&
      (SiS_Pr->PanelVRS != 999) ) {
     tempcx = SiS_Pr->PanelVRS;
     tempbx += tempcx;
     if(issis) tempbx++;
  } else {
     tempbx += tempcx;
     if(HwInfo->jChipType < SIS_315H) tempbx++;
     else if(issis)                   tempbx++;
d6222 1
a6222 1
  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;	/* BPLVRS  */
d6225 1
a6225 6
  if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
        if(ModeNo == 0x10) temp = 0xa9;
     }
  }
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,temp);
a6227 1
  tempcx++;
d6229 30
a6258 3
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        if(SiS_Pr->PanelVRE != 999) tempcx = SiS_Pr->PanelVRE;
d6262 1
a6262 1
  tempcx += tempbx;
d6264 8
a6271 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0xF0,temp);	/* BPLVRE  */
d6273 1
a6273 1
  temp = ((tempbx >> 8) & 0x07) << 3;
d6276 1
a6276 1
        if(SiS_Pr->SiS_VGAVDE != SiS_Pr->SiS_VDE)  temp |= 0x40;
d6278 6
a6283 33
  } else if(SiS_Pr->SiS_VGAVDE != SiS_Pr->SiS_VDE) temp |= 0x40;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)          temp |= 0x40;
  tempbx = 0x87;
  if((HwInfo->jChipType >= SIS_315H) ||
     (HwInfo->jChipRevision >= 0x30)) {
     tempbx = 0x07;
     if((SiS_Pr->SiS_IF_DEF_CH70xx == 1) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
	if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x03)    temp |= 0x80;
     }
     /* Chrontel 701x operates in 24bit mode (8-8-8, 2x12bit mutliplexed) via VGA2 */
     if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	   if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x06) & 0x10)      temp |= 0x80;
	} else {
	   if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x01) temp |= 0x80;
	}
     }
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1A,tempbx,temp);

  tempbx = push2;                                      		/* BPLVDEE */

  tempcx = SiS_Pr->SiS_LCDVDES;                        		/* BPLVDES */

  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     switch(SiS_Pr->SiS_LCDResInfo) {
     case Panel_640x480:
        tempbx = SiS_Pr->SiS_VGAVDE - 1;
        tempcx = SiS_Pr->SiS_VGAVDE;
	break;
     case Panel_800x600:
        if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
           if(resinfo == SIS_RI_800x600) tempcx++;
d6285 5
a6289 6
	break;
     case Panel_1024x600:
        if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
           if(resinfo == SIS_RI_1024x600) tempcx++;
           if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
	      if(resinfo == SIS_RI_800x600) tempcx++;
d6291 1
a6291 9
        }
	break;
     case Panel_1024x768:
        if(HwInfo->jChipType < SIS_315H) {
           if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
              if(resinfo == SIS_RI_1024x768) tempcx++;
	   }
        }
	break;
d6294 1
a6294 9

  temp = ((tempbx >> 8) & 0x07) << 3;
  temp = temp | ((tempcx >> 8) & 0x07);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1D,temp);
  /* if(SiS_Pr->SiS_IF_DEF_FSTN) tempbx++;  */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1C,tempbx);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1B,tempcx);

  /* Vertical scaling */
d6299 1
d6301 1
a6301 1
     temp = (tempeax % (ULONG)SiS_Pr->SiS_VDE);
d6303 4
a6306 1
     if(temp) tempeax++;
d6308 2
a6309 1
     if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA) tempeax = 0x3F;
a6310 3
     temp = (USHORT)(tempeax & 0x00FF);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1E,temp);      	/* BPLVCFACT */
     tempvcfact = temp;
d6316 7
d6324 4
a6327 4
     tempebx = SiS_Pr->SiS_VDE;
     temp = (tempeax % tempebx);
     tempeax = tempeax / tempebx;
     if(temp) tempeax++;
d6329 12
d6342 4
a6345 7
     temp = (USHORT)(tempeax & 0x00FF);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x37,temp);
     temp = (USHORT)((tempeax & 0x00FF00) >> 8);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x36,temp);
     temp = (USHORT)((tempeax & 0x00030000) >> 16);
     if(SiS_Pr->SiS_VDE == SiS_Pr->SiS_VGAVDE) temp |= 0x04;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x35,temp);
d6347 17
a6363 10
     if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) {
        temp = (USHORT)(tempeax & 0x00FF);
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x3c,temp);
        temp = (USHORT)((tempeax & 0x00FF00) >> 8);
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x3b,temp);
        temp = (USHORT)(((tempeax & 0x00030000) >> 16) << 6);
        SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x3a,0x3f,temp);
        temp = 0;
        if(SiS_Pr->SiS_VDE != SiS_Pr->SiS_VGAVDE) temp |= 0x08;
        SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x30,0xf3,temp);
d6365 1
a6365 1
#endif
d6367 5
d6374 3
a6376 1
  /* Horizontal scaling */
d6378 14
a6391 3
  tempeax = SiS_Pr->SiS_VGAHDE;		/* 1f = ( (VGAHDE * 65536) / ( (VGAHDE * 65536) / HDE ) ) - 1*/
  if(chkdclkfirst) {
     if(modeflag & HalfDCLK) tempeax >>= 1;
d6393 7
a6399 5
  tempebx = tempeax << 16;
  if(SiS_Pr->SiS_HDE == tempeax) {
     tempecx = 0xFFFF;
  } else {
     tempecx = tempebx / SiS_Pr->SiS_HDE;
d6401 1
a6401 1
        if(tempebx % SiS_Pr->SiS_HDE) tempecx++;
d6404 1
d6407 6
a6412 1
     tempeax = (tempebx / tempecx) - 1;
d6416 2
a6417 1
  tempecx = (tempecx << 16) | (tempeax & 0xFFFF);
d6419 1
a6419 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1F,temp);
d6421 1
d6424 1
a6424 1
     tempbx = (USHORT)(tempeax & 0xFFFF);
d6427 1
a6427 1
     tempbx = tempvcfact & 0x3f;
d6430 1
a6430 1
     tempbx = (USHORT)(tempeax & 0xFFFF);
d6432 1
a6432 1
  if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) tempbx--;
d6435 1
a6435 1
     else if(SiS_Pr->SiS_LCDResInfo != Panel_640x480)             tempbx = 1;
d6438 6
a6443 4
  temp = ((tempbx >> 8) & 0x07) << 3;
  temp = temp | ((tempecx >> 8) & 0x07);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x20,temp);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x21,tempbx);
d6445 2
a6446 2
  tempecx >>= 16;   	                                  	/* BPLHCFACT  */
  if(!chkdclkfirst) {
d6450 2
a6451 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x22,temp);
d6453 1
a6453 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x23,temp);
d6455 1
a6455 44
#ifdef SIS315H
  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
        if((islvds) || (SiS_Pr->SiS_VBInfo & VB_SIS301LV302LV)) {
           SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1e,0x20);
	}
     } else {
        if(islvds) {
           if(HwInfo->jChipType == SIS_740) {
              SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x03);
           } else {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1e,0x23);
           }
        }
     }
  }
#endif

#ifdef SIS300
  if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
     int i;
     UCHAR TrumpMode13[4]   = { 0x01, 0x10, 0x2c, 0x00 };
     UCHAR TrumpMode10_1[4] = { 0x01, 0x10, 0x27, 0x00 };
     UCHAR TrumpMode10_2[4] = { 0x01, 0x16, 0x10, 0x00 };

     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x02,0xbf);
     for(i=0; i<5; i++) {
        SiS_SetTrumpionBlock(SiS_Pr, &SiS300_TrumpionData[crt2crtc][0]);
     }
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
        if(ModeNo == 0x13) {
	   for(i=0; i<4; i++) {
	      SiS_SetTrumpionBlock(SiS_Pr, &TrumpMode13[0]);
	   }
	} else if(ModeNo == 0x10) {
	   for(i=0; i<4; i++) {
	      SiS_SetTrumpionBlock(SiS_Pr, &TrumpMode10_1[0]);
	      SiS_SetTrumpionBlock(SiS_Pr, &TrumpMode10_2[0]);
	   }
	}
     }
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40);
  }
#endif
d6465 1
a6465 1
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x44,~0x07,0x03);
d6467 2
a6468 2
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempax >>= 1;
d6482 2
a6483 2
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempax >>= 1;
d6491 2
a6492 2
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempeax >>= 1;
d6506 2
a6507 2
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempax >>= 1;
d6516 2
a6517 2
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempax >>= 1;
d6559 1
d6562 1
a6562 1
/* Set Part 1 */
d6567 1
a6567 1
  UCHAR   *ROMAddr = HwInfo->pjVirtualRomBase;
d6569 1
a6569 1
  USHORT  pushbx=0, CRT1Index=0, modeflag, resinfo=0;
d6573 1
a6573 5

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
     SiS_SetGroup1_LVDS(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
     return;
  }
d6585 8
a6592 1
  SiS_SetCRT2Offset(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d6594 1
a6594 1
  if( ! ((HwInfo->jChipType >= SIS_315H) &&
d6596 1
a6596 1
         (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ) {
d6598 8
a6605 1
     if(HwInfo->jChipType < SIS_315H ) {
d6607 1
a6607 1
  	SiS_SetCRT2FIFO_300(SiS_Pr, ModeNo, HwInfo);
d6609 1
a6609 1
     } else {
d6611 1
a6611 1
        SiS_SetCRT2FIFO_310(SiS_Pr, HwInfo);
d6613 3
a6615 1
     }
d6617 1
a6617 1
     /* 1. Horizontal setup */
d6619 1
a6619 1
     if(HwInfo->jChipType < SIS_315H ) {
d6623 2
a6624 2
    	temp = (SiS_Pr->SiS_VGAHT - 1) & 0x0FF;   		  /* BTVGA2HT 0x08,0x09 */
    	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x08,temp);              /* CRT2 Horizontal Total */
d6626 2
a6627 2
    	temp = (((SiS_Pr->SiS_VGAHT - 1) & 0xFF00) >> 8) << 4;
    	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0x0f,temp);    /* CRT2 Horizontal Total Overflow [7:4] */
d6629 2
a6630 2
    	temp = (SiS_Pr->SiS_VGAHDE + 12) & 0x0FF;                 /* BTVGA2HDEE 0x0A,0x0C */
    	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0A,temp);              /* CRT2 Horizontal Display Enable End */
d6632 12
a6643 5
	pushbx = SiS_Pr->SiS_VGAHDE + 12;                         /* bx  BTVGA2HRS 0x0B,0x0C */
    	tempcx = (SiS_Pr->SiS_VGAHT - SiS_Pr->SiS_VGAHDE) >> 2;
    	tempbx = pushbx + tempcx;
    	tempcx <<= 1;
    	tempcx += tempbx;
d6645 24
a6668 33
    	if(SiS_Pr->SiS_VBType & VB_SISVB) {

	   if(SiS_Pr->UseCustomMode) {
	      tempbx = SiS_Pr->CHSyncStart + 12;
	      tempcx = SiS_Pr->CHSyncEnd + 12;
	   }

      	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
	      unsigned char cr4, cr14, cr5, cr15;
	      if(SiS_Pr->UseCustomMode) {
	         cr4  = SiS_Pr->CCRT1CRTC[4];
		 cr14 = SiS_Pr->CCRT1CRTC[14];
		 cr5  = SiS_Pr->CCRT1CRTC[5];
		 cr15 = SiS_Pr->CCRT1CRTC[15];
	      } else {
	         cr4  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[4];
		 cr14 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14];
		 cr5  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[5];
		 cr15 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[15];
	      }
              tempbx = ((cr4 | ((cr14 & 0xC0) << 2)) - 1) << 3;
              tempcx = (((cr5 & 0x1F) | ((cr15 & 0x04) << (6-2))) - 1) << 3;
      	   }

    	   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
      	      tempbx = 1040;
      	      tempcx = 1044;
    	   }

	}

    	temp = tempbx & 0x00FF;
    	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0B,temp);              /* CRT2 Horizontal Retrace Start */
d6670 2
d6674 1
a6674 1
     } else {
d6678 13
a6690 13
	tempcx = SiS_Pr->SiS_VGAHT;				  /* BTVGA2HT 0x08,0x09 */
	if(modeflag & HalfDCLK) {
	   if(SiS_Pr->SiS_VBType & VB_SISVB) {
	      tempcx >>= 1;
	   } else {
	      tempax = SiS_Pr->SiS_VGAHDE >> 1;
	      tempcx = SiS_Pr->SiS_HT - SiS_Pr->SiS_HDE + tempax;
	      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
	         tempcx = SiS_Pr->SiS_HT - tempax;
	      }
	   }
	}
	tempcx--;
d6692 2
a6693 2
	temp = tempcx & 0xff;
	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x08,temp);              /* CRT2 Horizontal Total */
d6695 2
a6696 2
	temp = ((tempcx & 0xff00) >> 8) << 4;
	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0x0F,temp);    /* CRT2 Horizontal Total Overflow [7:4] */
d6698 9
a6706 9
	tempcx = SiS_Pr->SiS_VGAHT;				  /* BTVGA2HDEE 0x0A,0x0C */
	tempbx = SiS_Pr->SiS_VGAHDE;
	tempcx -= tempbx;
	tempcx >>= 2;
	if(modeflag & HalfDCLK) {
	   tempbx >>= 1;
	   tempcx >>= 1;
	}
	tempbx += 16;
d6708 2
a6709 2
	temp = tempbx & 0xff;
	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0A,temp);              /* CRT2 Horizontal Display Enable End */
d6711 17
a6727 4
	pushbx = tempbx;
	tempcx >>= 1;
	tempbx += tempcx;
	tempcx += tempbx;
d6729 8
a6736 1
	if(SiS_Pr->SiS_VBType & VB_SISVB) {
d6738 29
a6766 49
	   if(HwInfo->jChipType >= SIS_661) {
	      if((SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) ||
		 (SiS_Pr->SiS_LCDResInfo == Panel_1280x1024)) {
		 if(resinfo == SIS_RI_1280x1024) {
		    tempcx = 0x30;
		 } else if(resinfo == SIS_RI_1600x1200) {
		    tempcx = 0xff;
		 }
	      }
	   }

	   if(SiS_Pr->UseCustomMode) {
	      tempbx = SiS_Pr->CHSyncStart + 16;
	      tempcx = SiS_Pr->CHSyncEnd + 16;
	      tempax = SiS_Pr->SiS_VGAHT;
	      if(modeflag & HalfDCLK) tempax >>= 1;
	      tempax--;
	      if(tempcx > tempax)  tempcx = tempax;
	   }

           if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
	      unsigned char cr4, cr14, cr5, cr15;
	      if(SiS_Pr->UseCustomMode) {
	         cr4  = SiS_Pr->CCRT1CRTC[4];
		 cr14 = SiS_Pr->CCRT1CRTC[14];
		 cr5  = SiS_Pr->CCRT1CRTC[5];
		 cr15 = SiS_Pr->CCRT1CRTC[15];
	      } else {
	         cr4  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[4];
		 cr14 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14];
		 cr5  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[5];
		 cr15 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[15];
	      }
              tempbx = ((cr4 | ((cr14 & 0xC0) << 2)) - 3) << 3; 		/* (VGAHRS-3)*8 */
              tempcx = (((cr5 & 0x1f) | ((cr15 & 0x04) << (5-2))) - 3) << 3; 	/* (VGAHRE-3)*8 */
	      tempcx &= 0x00FF;
	      tempcx |= (tempbx & 0xFF00);
              tempbx += 16;
              tempcx += 16;
	      tempax = SiS_Pr->SiS_VGAHT;
	      if(modeflag & HalfDCLK) tempax >>= 1;
	      tempax--;
	      if(tempcx > tempax)  tempcx = tempax;
           }

	   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
      	      tempbx = 1040;
      	      tempcx = 1044;   /* HWCursor bug! */
      	   }
d6768 1
a6768 1
        }
d6770 2
a6771 2
	temp = tempbx & 0xff;
	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0B,temp);              /* CRT2 Horizontal Retrace Start */
d6774 1
a6774 1
     }  /* 315/330 series */
d6776 6
a6781 6
     tempax = tempbx & 0xFF00;
     tempbx = pushbx;
     tempbx = (tempbx & 0x00FF) | ((tempbx & 0xFF00) << 4);
     tempax |= (tempbx & 0xFF00);
     temp = (tempax & 0xFF00) >> 8;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0C,temp);
d6783 2
a6784 2
     temp = tempcx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0D,temp);                 /* CRT2 Horizontal Retrace End */
d6786 1
a6786 1
     /* 2. Vertical setup */
d6788 2
a6789 2
     tempcx = SiS_Pr->SiS_VGAVT - 1;
     temp = tempcx & 0x00FF;
d6791 10
a6800 7
     if(HwInfo->jChipType < SIS_661) {
        if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
	   if(HwInfo->jChipType < SIS_315H) {
	      if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	         if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSVIDEO | SetCRT2ToAVIDEO)) {
	            temp--;
	         }
d6802 3
a6804 5
	   } else {
 	      temp--;
           }
        } else if(HwInfo->jChipType >= SIS_315H) {
	   temp--;
d6806 1
a6806 6
     }
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0E,temp);                 /* CRT2 Vertical Total */

     tempbx = SiS_Pr->SiS_VGAVDE - 1;
     temp = tempbx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0F,temp);                 /* CRT2 Vertical Display Enable End */
d6808 23
a6830 21
     temp = ((tempbx & 0xFF00) << 3) >> 8;
     temp |= ((tempcx & 0xFF00) >> 8);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x12,temp);                 /* Overflow (and HWCursor Test Mode) */

     if((HwInfo->jChipType >= SIS_315H) && (HwInfo->jChipType < SIS_661)) {
        tempbx++;
   	tempax = tempbx;
	tempcx++;
	tempcx -= tempax;
	tempcx >>= 2;
	tempbx += tempcx;
	if(tempcx < 4) tempcx = 4;
	tempcx >>= 2;
	tempcx += tempbx;
	tempcx++;
     } else {
  	tempbx = (SiS_Pr->SiS_VGAVT + SiS_Pr->SiS_VGAVDE) >> 1;                 /*  BTVGA2VRS     0x10,0x11   */
  	tempcx = ((SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE) >> 4) + tempbx + 1;  /*  BTVGA2VRE     0x11        */
     }

     if(SiS_Pr->SiS_VBType & VB_SISVB) {
d6832 1
a6832 4
	if(SiS_Pr->UseCustomMode) {
	   tempbx = SiS_Pr->CVSyncStart;
	   tempcx = (tempcx & 0xFF00) | (SiS_Pr->CVSyncEnd & 0x00FF);
	}
a6833 2
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
	   unsigned char cr8, cr7, cr13, cr9;
d6835 3
a6837 18
	      cr8  = SiS_Pr->CCRT1CRTC[8];
	      cr7  = SiS_Pr->CCRT1CRTC[7];
	      cr13 = SiS_Pr->CCRT1CRTC[13];
	      cr9  = SiS_Pr->CCRT1CRTC[9];
	   } else {
	      cr8  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[8];
	      cr7  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[7];
	      cr13 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[13];
	      cr9  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[9];
	   }
      	   tempbx = cr8;
      	   if(cr7 & 0x04)  tempbx |= 0x0100;
      	   if(cr7 & 0x80)  tempbx |= 0x0200;
      	   if(cr13 & 0x08) tempbx |= 0x0400;
      	   tempcx = (tempcx & 0xFF00) | (cr9 & 0x00FF);
    	}
     }
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x10,tempbx);               /* CRT2 Vertical Retrace Start */
d6839 26
a6864 3
     temp = ((tempbx & 0xFF00) >> 8) << 4;
     temp |= (tempcx & 0x000F);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x11,temp);                 /* CRT2 Vert. Retrace End; Overflow; "Enable CRTC Check" */
d6866 1
a6866 1
     /* 3. Panel delay compensation */
d6868 1
a6868 1
     if(HwInfo->jChipType < SIS_315H) {
d6872 2
a6873 2
	if(SiS_Pr->SiS_VBType & VB_SISVB) {
	   temp = 0x20;
d6875 44
a6918 44
	   if(HwInfo->jChipType == SIS_300) {
	      temp = 0x10;
	      if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)  temp = 0x2c;
	      if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) temp = 0x20;
	   }
	   if(SiS_Pr->SiS_VBType & VB_SIS301) {
	      if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) temp = 0x20;
	   }
	   if(SiS_Pr->SiS_LCDResInfo == Panel_1280x960)     temp = 0x24;
	   if(SiS_Pr->SiS_LCDResInfo == Panel_Custom)       temp = 0x2c;
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) 		temp = 0x08;
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
      	      if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) 	temp = 0x2c;
      	      else 					temp = 0x20;
    	   }
	   if(SiS_Pr->SiS_UseROM) {
	      if(ROMAddr[0x220] & 0x80) {
	         if(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoYPbPrHiVision)
	   	    temp = ROMAddr[0x221];
		 else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision)
		    temp = ROMAddr[0x222];
		 else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024)
		    temp = ROMAddr[0x223];
		 else
		    temp = ROMAddr[0x224];
		 temp &= 0x3c;
	      }
	   }
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	      if(SiS_Pr->PDC != -1)  temp = SiS_Pr->PDC & 0x3c;
	   }

	} else {
	   temp = 0x20;
	   if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
	      if(SiS_Pr->SiS_LCDResInfo == Panel_640x480) temp = 0x04;
	   }
	   if(SiS_Pr->SiS_UseROM) {
	      if(ROMAddr[0x220] & 0x80) {
	         temp = ROMAddr[0x220] & 0x3c;
	      }
	   }
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	      if(SiS_Pr->PDC != -1) temp = SiS_Pr->PDC & 0x3c;
a6919 1
        }
d6921 1
a6921 1
    	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,~0x3C,temp);   /* Panel Link Delay Compensation; (Software Command Reset; Power Saving) */
d6925 1
a6925 1
     } else {
d6929 1
a6929 1
        if(HwInfo->jChipType < SIS_661) {
d6931 1
a6931 1
	   if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
d6933 2
a6934 2
	      if(HwInfo->jChipType == SIS_740) temp = 0x03;
	      else 		               temp = 0x00;
d6936 6
a6941 5
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) temp = 0x0a;
	      tempbl = 0xF0;
	      if(HwInfo->jChipType == SIS_650) {
		 if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
		    if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) tempbl = 0x0F;
a6942 1
	      }
d6944 6
a6949 5
	      if(SiS_Pr->SiS_IF_DEF_DSTN || SiS_Pr->SiS_IF_DEF_FSTN) {
		 temp = 0x08;
		 tempbl = 0;
		 if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
		    if(ROMAddr[0x13c] & 0x80) tempbl = 0xf0;
d6951 2
d6955 1
a6955 4
	      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,tempbl,temp);	    /* Panel Link Delay Compensation */
	   }

	} /* < 661 */
d6957 4
a6960 4
    	tempax = 0;
    	if (modeflag & DoubleScanMode) tempax |= 0x80;
    	if (modeflag & HalfDCLK)       tempax |= 0x40;
    	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2C,0x3f,tempax);
d6964 3
a6966 1
     }
d6968 1
a6968 1
  }  /* Slavemode */
a6969 2
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
d6971 11
a6981 7
	SiS_SetGroup1_LVDS(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
     } else if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
    	SiS_SetGroup1_301(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
     }
  } else {
     if(HwInfo->jChipType < SIS_315H) {
	SiS_SetGroup1_LVDS(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
d6983 5
a6987 4
	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
           if((!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) || (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
    	      SiS_SetGroup1_LVDS(SiS_Pr, ModeNo,ModeIdIndex, HwInfo,RefreshRateTableIndex);
           }
d6989 11
a6999 1
	   SiS_SetGroup1_LVDS(SiS_Pr, ModeNo,ModeIdIndex, HwInfo,RefreshRateTableIndex);
d7001 1
d7003 1
a7003 1
  }
d7014 1
d7016 1
a7016 1
   USHORT       a, b, p = 0;
d7025 28
a7052 4
   if(a < b) {
      tableptr = SiS_Part2CLVX_1;
   } else if(a == b) {
      tableptr = SiS_Part2CLVX_2;
d7054 5
a7058 2
      if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	 tableptr = SiS_Part2CLVX_4;
d7060 18
a7077 1
	 tableptr = SiS_Part2CLVX_3;
d7079 2
a7080 13
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	 if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) 	tableptr = SiS_Part2CLVX_3;
	 else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) 	tableptr = SiS_Part2CLVX_3;
	 else 				         	tableptr = SiS_Part2CLVX_5;

      } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	 tableptr = SiS_Part2CLVX_6;
      }
      do {
	 if((tableptr[p] | tableptr[p+1] << 8) == a) break;
	 p += 0x42;
      } while((tableptr[p] | tableptr[p+1] << 8) != 0xffff);
      if((tableptr[p] | tableptr[p+1] << 8) == 0xffff) p -= 0x42;
a7081 2
   p += 2;
   return((UCHAR *)&tableptr[p]);
d7109 1
a7109 1
static BOOLEAN
d7114 2
a7115 3
  
  if(HwInfo->jChipType < SIS_315H) return FALSE;
  
d7117 1
a7117 1
     (*ResIndex) = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d7119 3
a7121 1
     (*ResIndex) = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d7123 2
a7124 2
  (*ResIndex) &= 0x3f;
  (*CRT2Index) = 0;
d7126 17
a7142 3
  if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
     if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        (*CRT2Index) = 200;
d7146 2
a7147 6
  if(SiS_Pr->SiS_CustomT == CUT_ASUSA2H_2) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
        if(SiS_Pr->SiS_SetFlag & LCDVESATiming) (*CRT2Index) = 206;
     }
  }
  return(((*CRT2Index) != 0));
a7151 59
static void
SiS_Group2LCDSpecial(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo, USHORT crt2crtc)
{
   USHORT tempcx;
   const UCHAR atable[] = {
       0xc3,0x9e,0xc3,0x9e,0x02,0x02,0x02,
       0xab,0x87,0xab,0x9e,0xe7,0x02,0x02
   };

   if(!SiS_Pr->UseCustomMode) {
      if( ( ( (HwInfo->jChipType == SIS_630) ||
              (HwInfo->jChipType == SIS_730) ) &&
            (HwInfo->jChipRevision > 2) )  &&
          (SiS_Pr->SiS_LCDResInfo == Panel_1024x768) &&
          (!(SiS_Pr->SiS_SetFlag & LCDVESATiming))  &&
          (!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) ) {
         if(ModeNo == 0x13) {
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,0xB9);
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,0xCC);
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xA6);
         } else {
            if((crt2crtc & 0x3F) == 4) {
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x2B);
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x13);
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,0xE5);
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,0x08);
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xE2);
            }
         }
      }

      if(HwInfo->jChipType < SIS_315H) {
         if(SiS_Pr->SiS_LCDTypeInfo == 0x0c) {
            crt2crtc &= 0x1f;
            tempcx = 0;
            if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
               if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
                  tempcx += 7;
               }
            }
            tempcx += crt2crtc;
            if(crt2crtc >= 4) {
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xff);
            }

            if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
               if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
                  if(crt2crtc == 4) {
                     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x28);
                  }
               }
            }
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x18);
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,atable[tempcx]);
         }
      }
   }
}

d7264 1
a7264 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) {
d7267 1
a7267 1
	   /* Not always for LV, see SetGrp2 */
d7303 1
a7303 1
  USHORT      push1, push2, modeflag, crt2crtc, bridgeoffset;
d7310 7
d7318 1
a7324 3
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     crt2crtc = 0;
d7326 7
a7332 2
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     crt2crtc = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d7481 4
a7484 2
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1B,(tempcx & 0xff));
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1D,0xF0,((tempcx >> 8) & 0x0f));
d7494 2
a7495 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x22,0x0F,((tempcx << 4) & 0xf0));
d7497 1
a7497 1
  tempbx = TimingPoint[j] | (TimingPoint[j+1] << 8);
d7500 2
a7501 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x24,tempbx);
d7514 1
a7514 1
  tempcx += (TimingPoint[j] | (TimingPoint[j+1] << 8));
d7522 2
a7523 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x2A,0x0F,((tempcx << 4) & 0xf0));
d7529 2
a7530 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x2D,0x0F,((tempcx << 4) & 0xf0));
d7536 2
a7537 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2E,tempcx);
d7573 3
a7575 1
	      if(ModeNo == 0x03) temp++;
d7584 1
a7584 1
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSVIDEO | SetCRT2ToAVIDEO)) {
d7586 1
a7586 1
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToAVIDEO) temp |= 0x20;
d7590 11
d7609 2
a7610 2
     if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302LV | VB_SIS302ELV)) {  /* Why not 301B/LV? */
        if(HwInfo->jChipType >= SIS_661) {
a7614 8
	} else {
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
              if((SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
                 (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) ||
	         (SiS_Pr->SiS_LCDResInfo == Panel_1680x1050)) {
                 SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x10,0x60);
	      }
           }
d7621 3
a7623 1
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x47,tempbx);
d7682 4
a7685 2
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x4B,tempbx);
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x4C,tempcx);
d7729 2
a7730 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2C,tempbx);
d7735 1
a7735 1
  if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
d7750 2
a7751 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x03,tempbx);
d7756 2
a7757 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x19,tempcx);
d7768 25
a7792 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1A,0x0f,temp);
d7800 127
a7926 3
#ifdef SIS315H
  if(SiS_GetCRT2Part2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                          			&CRT2Index, &resindex, HwInfo)) {
d7928 20
a7947 3
        case 200: CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_1;   break;
	case 206: CRT2Part2Ptr = SiS310_CRT2Part2_Asus1024x768_3;    break;
	default:  CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_3;   break;
d7965 3
d7969 2
a7970 8
      
  } else {
#endif
	  
    /* Checked for 1024x768, 1280x1024, 1400x1050, 1600x1200 */
    /*             Clevo dual-link 1024x768 */
    /* 		   Compaq 1280x1024 has HT 1696 sometimes (calculation OK, if given HT is correct)  */
    /*		   Acer: OK, but uses different setting for VESA timing at 640/800/1024 and 640x400 */
d7973 8
a7980 13
       if((SiS_Pr->SiS_LCDInfo & LCDPass11) || (SiS_Pr->PanelYRes == SiS_Pr->SiS_VDE)) {
          tempbx = SiS_Pr->SiS_VDE - 1;
          tempcx = SiS_Pr->SiS_VT - 1;
       } else {
          tempbx = SiS_Pr->SiS_VDE + ((SiS_Pr->PanelYRes - SiS_Pr->SiS_VDE) / 2);
	  tempcx = SiS_Pr->SiS_VT - ((SiS_Pr->PanelYRes - SiS_Pr->SiS_VDE) / 2);
       }
    } else {
       tempbx = SiS_Pr->PanelYRes;
       tempcx = SiS_Pr->SiS_VT;
       tempax = 1;
       if(SiS_Pr->PanelYRes != SiS_Pr->SiS_VDE) {
          tempax = SiS_Pr->PanelYRes;
d7982 3
a7984 2
          if(SiS_Pr->PanelYRes < SiS_Pr->SiS_VDE) {
             tempax = tempcx = 0;
d8000 4
a8003 2
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,tempcx);	/* lcdvdes  */
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,tempbx);	/* lcdvdee  */
d8009 1
d8011 4
a8014 30
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       tempax = SiS_Pr->PanelYRes;
    }
    tempcx = (SiS_Pr->SiS_VT - tempax) >> 4;
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       if(SiS_Pr->PanelYRes != SiS_Pr->SiS_VDE) {
	  tempcx = (SiS_Pr->SiS_VT - tempax) / 10;
       }
    }

    tempbx = ((SiS_Pr->SiS_VT + SiS_Pr->SiS_VDE) >> 1) - 1;
    if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
       if(SiS_Pr->PanelYRes != SiS_Pr->SiS_VDE) {
          if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) { /* ? */
             tempax = SiS_Pr->SiS_VT - SiS_Pr->PanelYRes;
	     if(tempax % 4) { tempax >>= 2; tempax++; }
	     else           { tempax >>= 2;           }
             tempbx -= (tempax - 1);
	  } else tempbx -= 10;
       }
    }
    if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
       tempbx++;
       if((!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) || (crt2crtc == 6)) {
          if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
	     tempbx = 770;
	     tempcx = 3;
	  }
       }
    }
d8016 1
a8016 1
    /* non-expanding: lcdvrs = ((VT + VDE) / 2) - 10 */
d8026 2
a8027 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,tempbx);	    /* lcdvrs */
d8044 2
d8047 35
a8081 2
    SiS_Group2LCDSpecial(SiS_Pr, HwInfo, ModeNo, crt2crtc);
#endif
d8083 10
a8092 10
    bridgeoffset = 7;
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)          bridgeoffset += 2;
    if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) bridgeoffset++;
    if(SiS_IsDualLink(SiS_Pr, HwInfo))        		 bridgeoffset++;

    temp = 0;
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       if(SiS_Pr->PanelXRes != SiS_Pr->SiS_HDE) {
          temp = SiS_Pr->SiS_HT - ((SiS_Pr->PanelXRes - SiS_Pr->SiS_HDE) / 2);
	  if(SiS_IsDualLink(SiS_Pr, HwInfo)) temp >>= 1;
d8095 1
a8095 4
    temp += bridgeoffset;
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1F,temp);  	    /* lcdhdes[7:0] */
    temp = (temp >> 4) & 0xf0;
    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x20,0x0F,temp);  /* lcdhdes [11:8] */
d8098 1
a8098 7
    tempax = tempbx = SiS_Pr->SiS_HDE;
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       if(SiS_Pr->PanelXRes != SiS_Pr->SiS_HDE) {
          tempax = SiS_Pr->PanelXRes;
          tempbx = SiS_Pr->PanelXRes - ((SiS_Pr->PanelXRes - SiS_Pr->SiS_HDE) / 2);
       }
    }
a8101 1
       tempax >>= 1;		
d8103 7
d8115 3
a8117 4
    tempbx += bridgeoffset;

    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x23,tempbx);	    /* lcdhdee */
    temp = (tempbx >> 8) & 0x0f;
d8120 6
a8125 1
    tempcx = (tempcx - tempax) >> 2;
a8129 8
    if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
          if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
             if(SiS_Pr->SiS_HDE == 1280) tempbx = (tempbx & 0xff00) | 0x47;
	  }
       }
    }

d8131 4
a8134 3
       tempbx = SiS_Pr->CHSyncStart;
       if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
       tempbx += bridgeoffset;
d8141 9
a8149 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1C,tempbx);	    /* lcdhrs */
a8153 1

a8154 3
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       if(SiS_Pr->PanelXRes != SiS_Pr->SiS_HDE) tempcx >>= 2;
    }
d8158 4
a8161 3
       tempbx = SiS_Pr->CHSyncEnd;
       if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
       tempbx += bridgeoffset;
d8168 2
a8169 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x21,tempbx);	    /* lcdhre */
d8174 2
a8175 1
    SiS_Set300Part2Regs(SiS_Pr, HwInfo, ModeIdIndex, RefreshRateTableIndex, ModeNo);
d8177 2
a8178 3
#ifdef SIS315H
  } /* CRT2-LCD from table */
#endif  
a8195 2
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
d8197 5
a8201 1
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d8265 1
a8265 22
SiS_ShiftXPos(SiS_Private *SiS_Pr, int shift)
{
   USHORT temp, temp1, temp2;

   temp1 = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x1f);
   temp2 = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x20);
   temp = (USHORT)((int)((temp1 | ((temp2 & 0xf0) << 4))) + shift);
   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1f,temp);
   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x20,0x0f,((temp >> 4) & 0xf0));
   temp = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x2b) & 0x0f;
   temp = (USHORT)((int)(temp) + shift);
   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x2b,0xf0,(temp & 0x0f));
   temp1 = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x43);
   temp2 = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x42);
   temp = (USHORT)((int)((temp1 | ((temp2 & 0xf0) << 4))) + shift);
   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x43,temp);
   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x42,0x0f,((temp >> 4) & 0xf0));
}

static void
SiS_SetGroup4_C_ELV(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                    USHORT ModeNo, USHORT ModeIdIndex)
d8267 1
a8267 1
   USHORT temp, temp1, resinfo = 0;
a8270 4
   if(ModeNo > 0x13) {
      resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
   }

d8277 12
a8288 1
         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x25,0xf8);
a8289 5
      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x0f,0xfb);
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p)      temp = 0x0000;
      else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) temp = 0x0002;
      else if(SiS_Pr->SiS_TVMode & TVSetHiVision)  temp = 0x0400;
      else					   temp = 0x0402;
d8291 4
a8294 5
         temp1 = 0;
	 if(SiS_Pr->SiS_TVMode & TVAspect43) temp1 = 4;
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0f,0xfb,temp1);
	 if(SiS_Pr->SiS_TVMode & TVAspect43LB) temp |= 0x01;
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0x7c,(temp & 0xff));
d8299 1
a8299 1
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xf8,(temp & 0xff));
a8301 14

      if(HwInfo->jChipType >= SIS_661) { 		/* ? */
         if(SiS_Pr->SiS_TVMode & TVAspect43) {
            if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
	       if(resinfo == SIS_RI_1024x768) {
	          SiS_ShiftXPos(SiS_Pr, 97);
	       } else {
	          SiS_ShiftXPos(SiS_Pr, 111);
	       }
	    } else if(SiS_Pr->SiS_TVMode & TVSetHiVision) {
	       SiS_ShiftXPos(SiS_Pr, 136);
	    }
         }
      }
d8343 1
a8353 3
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
d8355 7
a8361 2
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d8400 2
a8401 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x14,tempbx);
d8403 1
a8403 1
  temp2 = (tempbx >> 1) & 0x0080;
d8406 2
a8407 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x16,tempcx);
d8409 2
a8410 1
  temp2 |= (((tempcx & 0xFF00) >> 8) << 3) & 0x00ff;
d8413 4
a8416 2
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) tempcx -= 5;
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x17,tempcx);
d8418 1
a8418 1
  temp = temp2 | (tempcx >> 8);
d8422 1
a8422 1
  if(modeflag & HalfDCLK) tempbx >>= 1;
d8459 1
a8459 1
     if(SiS_Pr->SiS_LCDResInfo != Panel_1280x1024)
d8591 1
d8601 1
a8601 1
        SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
d8619 5
a8623 2
  if(ModeNo <= 0x13) modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  else               modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d8631 1
a8631 3
                          &ResIndex, &DisplayType))) {
     return;
  }
d8639 10
a8648 10
    case 1 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_1_H;         break;
    case 2 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_2;           break;
    case 3 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_2_H;         break;
    case 4 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1;          break;
    case 5 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1_H;        break;
    case 6 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_2;          break;
    case 7 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_2_H;        break;
    case 8 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_1;         break;
    case 9 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_1_H;       break;
    case 10: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_2;         break;
d8687 1
a8687 1
  SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);
d8722 6
d8742 1
a8742 1
  if((SiS_Pr->SiS_LCDResInfo == Panel_640x480) || (SiS_Pr->SiS_LCDInfo & LCDPass11)) {
d8759 1
a8759 1
     if(SiS_Pr->SiS_UseROM) {
d8818 10
a8827 10
     case  0: CHTVRegData = SiS_Pr->SiS_CHTVReg_UNTSC; break;
     case  1: CHTVRegData = SiS_Pr->SiS_CHTVReg_ONTSC; break;
     case  2: CHTVRegData = SiS_Pr->SiS_CHTVReg_UPAL;  break;
     case  3: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPAL;  break;
     case  4: CHTVRegData = SiS_Pr->SiS_CHTVReg_UPALM; break;
     case  5: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPALM; break;
     case  6: CHTVRegData = SiS_Pr->SiS_CHTVReg_UPALN; break;
     case  7: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPALN; break;
     case  8: CHTVRegData = SiS_Pr->SiS_CHTVReg_SOPAL; break;
     default: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPAL;  break;
d9099 1
a9099 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d9102 3
a9104 3
     } else if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
               (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
	       (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200)) {
d9109 1
a9109 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d9111 3
a9113 3
     } else if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
               (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
	       (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200)) {
d9149 19
a9167 11
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)       tableptr = table1024_740;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) tableptr = table1280_740;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) tableptr = table1400_740;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) tableptr = table1600_740;
     else return;
  } else {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)       tableptr = table1024_650;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) tableptr = table1280_650;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) tableptr = table1400_650;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) tableptr = table1600_650;
     else return;
d9174 1
a9174 1
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) return;
d9176 2
a9177 2
        if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) return;
	if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) return;
d9179 1
a9179 1
        if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) return;
d9183 5
a9187 3
  if(HwInfo->jChipType == SIS_740) tempbh = 0x0d;
  else     			   tempbh = 0x0c;

d9574 1
a9574 2
   /* Set up Panel Link for LVDS and LCDA */
   SiS_Pr->SiS_LCDHDES = SiS_Pr->SiS_LCDVDES = 0;
d9579 2
d9608 1
a9608 1
	   SiS_SetGroup4_C_ELV(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
a9611 2
	   SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex, HwInfo);

d9614 1
a9614 1
	      if(SiS_Pr->SiS_LCDResInfo != Panel_640x480) {
d9629 4
a9632 4
        SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex, HwInfo);

        if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
    	   SiS_ModCRT1CRTC(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,HwInfo);
d9641 1
a9641 1
#ifdef SIS315H
d9643 1
a9643 1
#endif
d9647 2
a9648 1
       		 SiS_SetCHTVReg(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex);
d9659 1
a9659 1
	    if((SiS_Pr->SiS_UseROM) && (SiS_Pr->SiS_UseOEM == -1)) {
d9696 1
a9696 1
         SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x40);
a9766 57
#ifdef SIS300
static UCHAR *
SiS_SetTrumpBlockLoop(SiS_Private *SiS_Pr, UCHAR *dataptr)
{
  int i, j, num;
  USHORT tempah,temp;
  UCHAR *mydataptr;

  for(i=0; i<20; i++) {				/* Do 20 attempts to write */
     mydataptr = dataptr;
     num = *mydataptr++;
     if(!num) return mydataptr;
     if(i) {
        SiS_SetStop(SiS_Pr);
	SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT*2);
     }
     if(SiS_SetStart(SiS_Pr)) continue;		/* Set start condition */
     tempah = SiS_Pr->SiS_DDC_DeviceAddr;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write DAB (S0=0=write) */
     if(temp) continue;				/*    (ERROR: no ack) */
     tempah = *mydataptr++;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write register number */
     if(temp) continue;				/*    (ERROR: no ack) */
     for(j=0; j<num; j++) {
        tempah = *mydataptr++;
        temp = SiS_WriteDDC2Data(SiS_Pr,tempah);/* Write DAB (S0=0=write) */
	if(temp) break;
     }
     if(temp) continue;
     if(SiS_SetStop(SiS_Pr)) continue;
     return mydataptr;
  }
  return NULL;
}

static BOOLEAN
SiS_SetTrumpionBlock(SiS_Private *SiS_Pr, UCHAR *dataptr)
{
  SiS_Pr->SiS_DDC_DeviceAddr = 0xF0;  		/* DAB (Device Address Byte) */
  SiS_Pr->SiS_DDC_Index = 0x11;			/* Bit 0 = SC;  Bit 1 = SD */
  SiS_Pr->SiS_DDC_Data  = 0x02;              	/* Bitmask in IndexReg for Data */
  SiS_Pr->SiS_DDC_Clk   = 0x01;              	/* Bitmask in IndexReg for Clk */
  SiS_SetupDDCN(SiS_Pr);

  SiS_SetSwitchDDC2(SiS_Pr);

  while(*dataptr) {
     dataptr = SiS_SetTrumpBlockLoop(SiS_Pr, dataptr);
     if(!dataptr) return FALSE;
  }
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "Trumpion block success\n");
#endif
  return TRUE;
}
#endif

a9801 14
#ifdef SIS300
/* Write Trumpion register */
void
SiS_SetTrumpReg(SiS_Private *SiS_Pr, USHORT tempbx)
{
  SiS_Pr->SiS_DDC_DeviceAddr = 0xF0;  		/* DAB (Device Address Byte) */
  SiS_Pr->SiS_DDC_Index = 0x11;			/* Bit 0 = SC;  Bit 1 = SD */
  SiS_Pr->SiS_DDC_Data  = 0x02;              	/* Bitmask in IndexReg for Data */
  SiS_Pr->SiS_DDC_Clk   = 0x01;              	/* Bitmask in IndexReg for Clk */
  SiS_SetupDDCN(SiS_Pr);
  SiS_SetChReg(SiS_Pr, tempbx, 0);
}
#endif

d9837 1
d9844 4
a9847 4
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 1)
     SiS_SetCH700x(SiS_Pr,tempbx);
  else
     SiS_SetCH701x(SiS_Pr,tempbx);
a9878 15
#ifdef SIS300
/* Read from Trumpion */
USHORT
SiS_GetTrumpReg(SiS_Private *SiS_Pr, USHORT tempbx)
{
  SiS_Pr->SiS_DDC_DeviceAddr = 0xF0;	/* DAB */
  SiS_Pr->SiS_DDC_Index = 0x11;		/* Bit 0 = SC;  Bit 1 = SD */
  SiS_Pr->SiS_DDC_Data  = 0x02;         /* Bitmask in IndexReg for Data */
  SiS_Pr->SiS_DDC_Clk   = 0x01;         /* Bitmask in IndexReg for Clk */
  SiS_SetupDDCN(SiS_Pr);
  SiS_Pr->SiS_DDC_ReadAddr = tempbx;
  return(SiS_GetChReg(SiS_Pr,0));
}
#endif

d9931 4
a9934 4
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 1)
     return(SiS_GetCH700x(SiS_Pr, tempbx));
  else
     return(SiS_GetCH701x(SiS_Pr, tempbx));
a10320 2
   SiS_Pr->CP_PreferredX = SiS_Pr->CP_PreferredY = 0;
   SiS_Pr->CP_PreferredIndex = -1;
a10414 1
#if 0	    /* Treat as custom */
a10420 1
#endif
d10458 3
a10460 5
		   if(pSiS->VBFlags & VB_301C) {
	              if(yres == 1200) {
	                 paneltype = Panel310_1600x1200;
		         checkexpand = TRUE;
		      }
a10585 4
		  if((SiS_Pr->CP_PreferredX == xres) && (SiS_Pr->CP_PreferredY == yres)) {
	             SiS_Pr->CP_PreferredIndex = i;
	          }

a10665 1
#if 0
a10671 1
#endif
d10678 10
d10712 3
a10714 5
	        if(pSiS->VBFlags & VB_301C) {
	           if(yres == 1200) {
	              paneltype = Panel310_1600x1200;
		      checkexpand = TRUE;
		   }
a10815 4
	       if((SiS_Pr->CP_MaxX == xres) && (SiS_Pr->CP_MaxY == yres)) {
	          SiS_Pr->CP_PreferredIndex = i;
	       }

d10870 3
a10873 4
       SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x36,0xf0,paneltype);
       cr37 &= 0xf1;
       SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,0xf3,cr37);
       SiS_Pr->PanelSelfDetected = TRUE;
d11154 1
a11154 1
     romptr = SISGETROMW(0x128);
d11156 1
a11156 1
        romptr = SISGETROMW(0x12a);
d11158 1
a11158 1
     romptr = SISGETROMW(0x1a8);
d11160 1
a11160 1
        romptr = SISGETROMW(0x1aa);
d11172 1
a11172 1
     romptr = SISGETROMW(0x120);
d11174 1
a11174 1
        romptr = SISGETROMW(0x122);
d11176 1
a11176 1
     romptr = SISGETROMW(0x1a0);
d11178 1
a11178 1
        romptr = SISGETROMW(0x1a2);
d11190 1
a11190 1
     romptr = SISGETROMW(0x114);
d11192 1
a11192 1
        romptr = SISGETROMW(0x11a);
d11194 1
a11194 1
     romptr = SISGETROMW(0x194);
d11196 1
a11196 1
        romptr = SISGETROMW(0x19a);
d11218 3
a11220 3
  index = SiS_GetBIOSLCDResInfo(SiS_Pr) & 0x0F;
  if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050)      index -= 5;
  else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) index -= 6;
d11233 4
a11236 2
  index = ((SiS_GetBIOSLCDResInfo(SiS_Pr) & 0x0F) - 1) * 3;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)         index += 2;
d11238 1
d11264 1
a11264 1
GetOEMTVPtr661_2_GEN(SiS_Private *SiS_Pr, int addme)
d11281 1
a11281 1
	 index += addme;
a11288 14
static ULONG
GetOEMTVPtr661_2_OLD(SiS_Private *SiS_Pr)
{
   return(GetOEMTVPtr661_2_GEN(SiS_Pr, 8));
}

#if 0
static ULONG
GetOEMTVPtr661_2_NEW(SiS_Private *SiS_Pr)
{
   return(GetOEMTVPtr661_2_GEN(SiS_Pr, 6));
}
#endif

d11294 5
a11298 12
   if(SiS_Pr->SiS_TVMode & TVSetPAL)          index = 2;
   if(SiS_Pr->SiS_ROMNew) {
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) index = 4;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) index = 6;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) index = 8;
      if(SiS_Pr->SiS_TVMode & TVSetHiVision)  index = 10;
   } else {
      if(SiS_Pr->SiS_TVMode & TVSetHiVision)  index = 4;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) index = 6;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) index = 8;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) index = 10;
   }
a11311 6
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x20,0xbf);
  } else {
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x35,0x7f);
  }

d11316 1
a11316 1
     if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
a11340 16
     /* Could we detect a PDC for LCD or did we get a user-defined? If yes, use it */

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	if(SiS_Pr->PDC != -1) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,((SiS_Pr->PDC >> 1) & 0x0f));
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,0x7f,((SiS_Pr->PDC & 0x01) << 7));
	   return;
	}
     } else {
	if(SiS_Pr->PDCA != -1) {
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((SiS_Pr->PDCA << 3) & 0xf0));
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x20,0xbf,((SiS_Pr->PDCA & 0x01) << 6));
	   return;
	}
     }

d11343 1
a11343 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_Custom) {
d11362 11
d11381 1
a11381 1
	if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
d11389 5
a11393 3
	gotitfrompci = TRUE;
	dochiptest = FALSE;
	delay = 0x02;
d11397 1
a11397 1
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d11418 1
a11418 1
              if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
d11421 1
a11421 1
	         /* romptr = SISGETROMW(0x120);                       */
d11423 1
a11423 1
	         romptr = SISGETROMW(0x122);
d11438 4
a11441 5
        } else if(SiS_Pr->SiS_UseROM 			      &&
		  (!(SiS_Pr->SiS_ROMNew))		      &&
	          (SiS_Pr->SiS_LCDResInfo != Panel_1280x1024) &&
		  (SiS_Pr->SiS_LCDResInfo != Panel_1280x768)  &&
		  (SiS_Pr->SiS_LCDResInfo != Panel_1280x960)) {
d11484 1
a11484 1
           if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
d11487 3
a11489 3
              /* romptr = SISGETROMW(0x114);			   */
	      /* if(SiS_Pr->SiS_VBType & VB_SIS302LV)              */
	      romptr = SISGETROMW(0x11a);
d11522 1
a11522 1
     } else if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
d11547 1
a11547 1
     if(SiS_LCDAEnabled(SiS_Pr, HwInfo)) {
d11613 1
a11613 1
  if(SiS_Pr->SiS_UseROM && (!(SiS_Pr->SiS_ROMNew))) {
d11615 2
a11616 1
        temp1 = GetOEMTVPtr661(SiS_Pr);
a11617 4
        romptr = SISGETROMW(0x260);
        if(HwInfo->jChipType >= SIS_760) {
	   romptr = SISGETROMW(0x360);
	}
d11619 1
a11619 1
        romptr = SISGETROMW(0x192);
d11621 1
a11621 1
        romptr = SISGETROMW(0x112);
d11643 3
a11645 1
  temp = temp1 = GetTVPtrIndex(SiS_Pr) >> 1; 	/* 0: NTSC/YPbPr, 1: PAL, 2: HiTV */
d11647 1
a11647 1
  if(ModeNo <= 0x13)
d11652 1
a11652 1
  if(SiS_Pr->SiS_UseROM && (!(SiS_Pr->SiS_ROMNew))) {
d11654 1
a11654 4
        romptr = SISGETROMW(0x26c);
        if(HwInfo->jChipType >= SIS_760) {
	   romptr = SISGETROMW(0x36c);
	}
d11658 1
a11658 1
        romptr = SISGETROMW(0x1a4);
d11660 1
a11660 1
        romptr = SISGETROMW(0x124);
d11678 3
a11680 1
  USHORT index, temp, i, j;
d11682 2
a11683 2
  if(ModeNo <= 0x13) {
     index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].VB_StTVYFilterIndex;
d11685 43
a11727 1
     index = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].VB_ExtTVYFilterIndex;
d11730 4
a11733 1
  temp = GetTVPtrIndex(SiS_Pr) >> 1;  /* 0: NTSC/YPbPr, 1: PAL, 2: HiTV */
d11767 2
a11768 2
  if((HwInfo->jChipType >= SIS_661) || SiS_Pr->SiS_ROMNew) {
     lindex = GetOEMTVPtr661_2_OLD(SiS_Pr) & 0xffff;
d11770 12
a11781 2
     for(j=0, i=0x31; i<=0x34; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS661_TVPhase[lindex + j]);
d11799 2
a11800 2
  if(SiS_Pr->SiS_UseROM) {
     romptr = SISGETROMW(0x116);
d11802 1
a11802 1
        romptr = SISGETROMW(0x196);
d11805 1
a11805 1
        romptr = SISGETROMW(0x11c);
d11807 1
a11807 1
	   romptr = SISGETROMW(0x19c);
d11810 1
a11810 1
	   romptr = SISGETROMW(0x116);
d11812 1
a11812 1
              romptr = SISGETROMW(0x196);
d11865 1
a11865 1
      if(SiS_Pr->SiS_VBType & VB_SIS301) {
d11875 2
d11878 1
a11878 1
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
d11883 7
a11889 35
   /* 1. New ROM: VGA2 and LCD/LCDA-Pass1:1 */

   if(SiS_Pr->SiS_ROMNew) {
      if((SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) 			||
         ((SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) &&
	  (SiS_Pr->SiS_LCDInfo & LCDPass11))) {
         index = 25;
         if(SiS_Pr->UseCustomMode) {
	    index = SiS_Pr->CSRClock;
         } else if(ModeNo > 0x13) {
            index = SiS_GetVCLK2Ptr(SiS_Pr,ModeNo,ModeIdIndex,RTI,HwInfo);
            index = SiS_Pr->SiS_VCLKData[index].CLOCK;
         }
	 if(index < 25) index = 25;
         index = ((index / 25) - 1) << 1;
         if(SiS_Pr->SiS_VBInfo & (SetCRT2ToRAMDAC | SetCRT2ToLCD)) index++;
	 romptr = SISGETROMW(0x104);  /* 0x4ae */
         delay = ROMAddr[romptr + index];
         if(SiS_Pr->SiS_VBInfo & (SetCRT2ToRAMDAC | SetCRT2ToLCD)) {
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,((delay >> 1) & 0x0f));
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,0x7f,((delay & 0x01) << 7));
         } else {
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((delay << 3) & 0xf0));
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x20,0xbf,((delay & 0x01) << 6));
         }
         return;
      }
   }

   /* 2. Old ROM: VGA2 and LCD/LCDA-Pass 1:1 */

   if(SiS_Pr->UseCustomMode) delay = 0x04;
   else if(ModeNo <= 0x13)   delay = 0x04;
   else                      delay = (SiS_Pr->SiS_RefIndex[RTI].Ext_PDC >> 4);
   delay |= (delay << 8);
a11892 2
      /* 3. TV */

d11894 12
a11905 5
      if(SiS_Pr->SiS_ROMNew) {
         romptr = SISGETROMW(0x106);  /* 0x4ba */
         delay = ROMAddr[romptr + index];
      } else {
         delay = 0x04;
d11907 2
d11912 18
a11929 21
      /* 4. LCD, LCDA (for new ROM only LV and non-Pass 1:1) */

      if( (SiS_Pr->SiS_LCDResInfo != Panel_Custom) &&
          ((romptr = GetLCDStructPtr661_2(SiS_Pr, HwInfo))) ) {

	 /* For LV, the BIOS must know about the correct value */
	 delay = ROMAddr[romptr + 0x0d];		/* LCD  */
	 delay |= (ROMAddr[romptr + 0x0c] << 8);	/* LCDA */

      } else {

         /* TMDS: Set our own, since BIOS has no idea - TODO: Find out about values */
         if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
            if((SiS_Pr->PanelXRes <= 1024) && (SiS_Pr->PanelYRes <= 768)) {
	       delay = 0x0404;
            } else if((SiS_Pr->PanelXRes <= 1280) && (SiS_Pr->PanelYRes <= 1024)) {
	       delay = 0x0404;
            } else if((SiS_Pr->PanelXRes <= 1400) && (SiS_Pr->PanelYRes <= 1050)) {
	       delay = 0x1004;
            } else
	       delay = 0x0000;
a11930 9

      }

      /* Override by detected or user-set values */
      if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (SiS_Pr->PDC != -1)) {
         delay = SiS_Pr->PDC & 0x1f;
      }
      if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) && (SiS_Pr->PDCA != -1)) {
         delay = (SiS_Pr->PDCA & 0x1f) << 8;
d11934 7
a11940 7
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      delay >>= 8;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((delay << 3) & 0xf0));
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x20,0xbf,((delay & 0x01) << 6));
   } else {
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,((delay >> 1) & 0x0f));
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,0x7f,((delay & 0x01) << 7));
d11942 1
d11951 6
a11957 10

      if(ModeNo <= 0x13) {
         infoflag = SiS_GetRegByte(SiS_Pr->SiS_P3ca+2);
      } else if(SiS_Pr->UseCustomMode) {
         infoflag = SiS_Pr->CInfoFlag;
      } else {
         infoflag = SiS_Pr->SiS_RefIndex[RTI].Ext_InfoFlag;
      }
      infoflag &= 0xc0;

d11959 1
a11959 6
      if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
         temp &= 0x3f;
	 temp |= infoflag;
      } else {
         if(temp & 0x20) infoflag = temp;
      }
d11961 16
a11976 17

      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
         temp = 0x0c;
         if(infoflag & 0x01) temp ^= 0x14;  /* BIOS: 18, wrong */
         temp |= (infoflag >> 6);
         SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xe0,temp);
      } else {
         temp = 0;
         if(infoflag & 0x01) temp |= 0x80;
         SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1a,0x7f,temp);
         temp = 0x30;
         if(infoflag & 0x01) temp = 0x20;
         infoflag &= 0xc0;
         temp |= infoflag;
         SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0f,temp);
      }

d11983 1
a11983 2
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
   USHORT romptr, temp1, temp2;
d11991 8
a11998 14
   if(SiS_Pr->SiS_ROMNew) {

      if((romptr = GetLCDStructPtr661_2(SiS_Pr, HwInfo))) {
         if(SiS_Pr->SiS_VBType & (VB_SIS301LV | VB_SIS302LV | VB_SIS302ELV)) {
            temp1 = (ROMAddr[romptr] & 0x03) | 0x0c;
	    temp2 = 0xfc;
	    if(SiS_Pr->LVDSHL != -1) {
	      temp1 &= 0xfc;
	      temp2 = 0xf3;
	    }
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,temp2,temp1);
         }
         temp1 = (ROMAddr[romptr + 1] & 0x80) >> 1;
         SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0d,0xbf,temp1);
d12000 1
a12000 1

d12021 1
a12021 1
         if(SiS_Pr->SiS_VBType & VB_SIS301) {
d12050 1
a12050 1
  if(SiS_Pr->SiS_LCDResInfo == Panel_Custom) return;
d12080 1
a12080 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d12091 1
a12091 1
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d12111 1
a12111 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d12119 1
a12119 1
     } else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
d12127 1
a12127 1
	if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) {
d12129 1
a12129 1
	} else if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d12210 1
a12210 1
	if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d12301 1
a12301 1
    if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d12304 1
a12304 1
    if(SiS_Pr->SiS_UseROM) {
d12308 6
a12313 3
	     romptr = SISGETROMW(0x255);
	     if(romptr) tempbx = ROMAddr[romptr + SiS_Pr->SiS_LCDTypeInfo];
	     else       tempbx = customtable300[SiS_Pr->SiS_LCDTypeInfo];
d12324 7
a12330 4
       if(SiS_Pr->SiS_UseROM) {
          romptr = SISGETROMW(0x255);
	  if(romptr) tempbx = ROMAddr[romptr + SiS_Pr->SiS_LCDTypeInfo];
	  else 	     tempbx = 0xff;
d12354 1
a12354 1
  if(SiS_Pr->SiS_LCDResInfo == Panel_Custom) return;
d12356 1
a12356 1
  if(SiS_Pr->SiS_UseROM) {
d12359 1
a12359 1
     romptr = SISGETROMW(0x24b);
d12381 1
a12381 1
	romptr = SISGETROMW(romptr);
d12392 1
a12392 1
     if(SiS_Pr->SiS_UseROM && (ROMAddr[0x235] & 0x80)) {
d12395 1
a12395 1
	   romptr = SISGETROMW(romptr);
d12402 1
a12402 1
        if(SiS_Pr->SiS_UseROM) {
d12406 1
a12406 1
	      romptr = SISGETROMW(romptr);
d12429 1
a12429 1
  if((SiS_Pr->SiS_UseROM) {
d12479 1
a12479 1
  if(SiS_Pr->SiS_UseROM) {
d12482 1
a12482 1
     romptr = SISGETROMW(0x241);
d12491 1
a12491 1
     romptr = SISGETROMW(romptr);
d12502 1
a12502 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,~0x3C,temp);
d12512 1
a12512 1
  if(SiS_Pr->SiS_UseROM) {
d12515 1
a12515 1
     romptr = SISGETROMW(0x243);
d12524 1
a12524 1
     romptr = SISGETROMW(romptr);
d12531 1
a12531 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x0A,0x8F,temp);
d12545 1
a12545 1
  if(SiS_Pr->SiS_UseROM) {
d12548 1
a12548 1
     romptr = SISGETROMW(0x245);
d12562 1
a12562 1
	romptr = SISGETROMW(romptr);
d12584 1
a12584 1
  if(SiS_Pr->SiS_UseROM) {
d12587 1
a12587 1
     romptr = SISGETROMW(0x247);
d12608 1
a12608 1
	 romptr = SISGETROMW(romptr);
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/sis/init301.c,v 1.69 2004/01/23 22:29:02 twini Exp $ */
d3 2
a4 4
 * Mode initializing code (CRT2 section)
 * for SiS 300/305/540/630/730 and
 *     SiS 315/550/650/M650/651/661FX/M661xX/740/741/M741/330/660/M660/760/M760
 * (Universal module for Linux kernel framebuffer and XFree86 4.x)
d6 3
a8 1
 * Copyright (C) 2001-2004 by Thomas Winischhofer, Vienna, Austria
d10 10
a19 2
 * If distributed as part of the Linux kernel, the following license terms
 * apply:
d21 9
a29 13
 * * This program is free software; you can redistribute it and/or modify
 * * it under the terms of the GNU General Public License as published by
 * * the Free Software Foundation; either version 2 of the named License,
 * * or any later version.
 * *
 * * This program is distributed in the hope that it will be useful,
 * * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * * GNU General Public License for more details.
 * *
 * * You should have received a copy of the GNU General Public License
 * * along with this program; if not, write to the Free Software
 * * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
d31 7
a37 31
 * Otherwise, the following license terms apply:
 *
 * * Redistribution and use in source and binary forms, with or without
 * * modification, are permitted provided that the following conditions
 * * are met:
 * * 1) Redistributions of source code must retain the above copyright
 * *    notice, this list of conditions and the following disclaimer.
 * * 2) Redistributions in binary form must reproduce the above copyright
 * *    notice, this list of conditions and the following disclaimer in the
 * *    documentation and/or other materials provided with the distribution.
 * * 3) All advertising materials mentioning features or use of this software
 * *    must display the following acknowledgement: "This product includes
 * *    software developed by Thomas Winischhofer, Vienna, Austria."
 * * 4) The name of the author may not be used to endorse or promote products
 * *    derived from this software without specific prior written permission.
 * *
 * * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESSED OR
 * * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: 	Thomas Winischhofer <thomas@@winischhofer.net>
 *
 * Formerly based on non-functional code-fragements for 300 series by SiS, Inc.
 * Used by permission.
d45 1
a45 1
 * All comments in this file are by me, regardless if marked TW or not.
a48 8
#if 1
#define SET_EMI		/* 302LV/ELV: Set EMI values */
#endif

#define COMPAL_HACK	/* Needed for Compal 1400x1050 (EMI) */
#define COMPAQ_HACK	/* Needed for Inventec/Compaq 1280x1024 (EMI) */
#define ASUS_HACK	/* Needed for Asus A2H 1024x768 (EMI) */

d55 4
d68 1
a68 1
#define SiS_I2CDELAYSHORT  150
d70 8
a77 3
/*********************************************/
/*         HELPER: Lock/Unlock CRT2          */
/*********************************************/
d79 5
a83 8
void
SiS_UnLockCRT2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  if(HwInfo->jChipType >= SIS_315H)
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2f,0x01);
  else
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x24,0x01);
}
d85 2
a86 8
void
SiS_LockCRT2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  if(HwInfo->jChipType >= SIS_315H)
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2F,0xFE);
  else
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x24,0xFE);
}
d88 1
a88 3
/*********************************************/
/*            HELPER: Enable CRT2            */
/*********************************************/
d90 1
a90 5
void
SiS_EnableCRT2(SiS_Private *SiS_Pr)
{
  SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
}
d92 1
a92 3
/*********************************************/
/*            HELPER: Write SR11             */
/*********************************************/
d94 7
a100 6
static void
SiS_SetRegSR11ANDOR(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT DataAND, USHORT DataOR)
{
   if(HwInfo->jChipType >= SIS_661) DataAND &= 0x0f;
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x11,DataAND,DataOR);
}
d102 5
a106 3
/*********************************************/
/*    HELPER: Get Pointer to LCD structure   */
/*********************************************/
d108 4
a111 11
/* For 661 series only */
#ifdef SIS315H
#if 0   /* Need to wait until hardware using this really exists */
static UCHAR *
GetLCDPtr661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, int tabletype,
             USHORT ModeNo, USHORT ModeIdIndex, USHORT RRTI)
{
  UCHAR *ROMAddr =  HwInfo->pjVirtualRomBase;
  UCHAR *tableptr = NULL;
  UCHAR tablelengths[] = { 8, 7, 6, 6, 8, 6, 0, 0, 0 };
  USHORT modeflag, CRT2Index, tablelength, lcdid, myid, tableptri;
d113 9
a121 9
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     CRT2Index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     CRT2Index = SiS_Pr->SiS_RefIndex[RRTI].Ext_CRT2CRTC;
     /* This is total bullshit: */
     if(SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO == SIS_RI_720x576) CRT2Index = 10;
  }
d123 8
a130 8
  if(tabletype <= 1) {
#if 0	/* Not yet implemented */
     if(ModeNo <= 0x13) {
        CRT2Index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex]. + 5;
     } else {
        CRT2Index = SiS_Pr->SiS_RefIndex[RRTI]. + 5;
     }
     if(tabletype & 1) CRT2Index >>= 4;
a131 1
  }
d133 34
a166 1
  CRT2Index &= 0x0f;
d168 1
a168 5
  tablelength = tablelengths[tabletype];
  if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
     if((tabletype == 5) || (tabletype == 7)) tablelength = 8;
     if((tabletype == 3) || (tabletype == 8)) tablelength = 8;
  }
d170 1
a170 1
  if(!tablelength) return NULL;
d172 25
a196 4
  tableptri = ROMAddr[0x222] | (ROMAddr[0x223] << 8);
  tableptri += (tabletype << 1);
  if(!tableptri) return NULL;
  tableptr = &ROMAddr[tableptri];
d198 1
a198 9
  do {
     lcdid = tableptr[0];
     if(lcdid == 0xff) break;
     myid = SiS_Pr->SiS_LCDResInfo;
     if((lcdid & 0x80) && (lcdid != 0x80)) {
        lcdid &= 0x7f;
	myid = SiS_Pr->SiS_LCDTypeInfo;
     }
     if(SiS_Pr->SiS_LCDInfo & LCDPass11) myid &= ~0x1f;
d200 19
a218 11
     if(myid == lcdid) {
	lcdid = tableptr[1] | (tableptr[2] << 8);
	myid = SiS_Pr->SiS_LCDInfo661;
	if(modeflag & HalfDCLK) myid |= 0x200;
	if(ModeNo <= 0x13)      myid |= 0x400;
	lcdid &= myid;
	myid = tableptr[3] | (tableptr[4] << 8);
	if(lcdid == myid) break;
     }
     tableptr += 7;
  } while (1);
d220 21
a240 8
  if(lcdid == myid) {
     lcdid = tableptr[5] | (tableptr[6] << 8);
     lcdid += (tablelength * CRT2Index);
     return((UCHAR *)&ROMAddr[lcdid]);
  }

  return NULL;
}
d243 7
a249 9
static UCHAR *
GetLCDStructPtr661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
   USHORT lcdres = SiS_Pr->SiS_LCDResInfo;
   USHORT lcdtype = SiS_Pr->SiS_LCDTypeInfo;
   USHORT romindex=0;
   UCHAR  *myptr = NULL;
   UCHAR  lcdid;
d251 7
a257 2
   if((ROMAddr) && SiS_Pr->SiS_UseROM) {
      romindex = ROMAddr[0x256] | (ROMAddr[0x257] << 8);
d259 11
a269 4
   if(romindex) {
      myptr = &ROMAddr[romindex];
   } else {
      myptr = (UCHAR *)SiS_LCDStruct661;
d272 2
a273 8
   while(myptr[0] != 0xff) {
      lcdid = myptr[0];
      if((lcdid & 0x80) && (lcdid != 0x80)) {
         lcdres = lcdtype;
	 lcdid &= 0x7f;
      }
      if(lcdid == lcdres) break;
      myptr += 26;
a274 1
   if(myptr[0] == 0xff) return NULL;
d276 1
a276 1
   return myptr;
a277 1
#endif
d279 28
a306 3
/*********************************************/
/*           Adjust Rate for CRT2            */
/*********************************************/
d308 7
a314 4
static BOOLEAN
SiS_AdjustCRT2Rate(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex, USHORT *i,
		   PSIS_HW_INFO HwInfo)
d316 6
a321 1
  USHORT tempax,tempbx,infoflag;
d323 7
a329 1
  tempbx = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].ModeID;
d331 2
a332 1
  tempax = 0;
d334 2
a335 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
d337 2
a338 1
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
d340 1
a340 10
      	tempax |= SupportRAMDAC2;
	if(HwInfo->jChipType >= SIS_315H) {
	   tempax |= SupportRAMDAC2_135;
	   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	      tempax |= SupportRAMDAC2_162;
	      if(SiS_Pr->SiS_VBType & VB_SIS301C) {
		 tempax |= SupportRAMDAC2_202;
	      }
	   }
	}
d342 3
a344 12
     } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {

     	tempax |= SupportLCD;
	if(HwInfo->jChipType >= SIS_315H) {
	   if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
	         if(tempbx == 0x2e) {  /* 640x480 */
		    tempax |= Support64048060Hz;
		 }
	      }
	   }
	}
d346 2
a347 1
     } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
d349 1
a349 1
      	tempax |= SupportHiVision;
d351 2
a352 1
     } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToYPbPr525750|SetCRT2ToAVIDEO|SetCRT2ToSVIDEO|SetCRT2ToSCART)) {
d354 8
a361 3
        tempax |= SupportTV;
	if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	   tempax |= SupportTV1024;
d364 2
a365 1
     }
d367 1
a367 1
  } else {	/* for LVDS  */
d369 1
a369 5
     if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
     	if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
           tempax |= SupportCHTV;
      	}
     }
d371 1
a371 3
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     	tempax |= SupportLCD;
     }
d373 2
a374 1
  }
d376 2
a377 6
  /* Look backwards in table for matching CRT2 mode */
  for(; SiS_Pr->SiS_RefIndex[RefreshRateTableIndex+(*i)].ModeID == tempbx; (*i)--) {
     infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].Ext_InfoFlag;
     if(infoflag & tempax) return(1);
     if((*i) == 0) break;
  }
d379 2
a380 12
  /* Look through the whole mode-section of the table from the beginning
   * for a matching CRT2 mode if no mode was found yet.
   */
  for((*i) = 0; ; (*i)++) {
     if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].ModeID != tempbx) {
     	return(0);
     }
     infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].Ext_InfoFlag;
     if(infoflag & tempax) return(1);
  }
  return(1);
}
d382 5
a386 3
/*********************************************/
/*              Get rate pointer             */
/*********************************************/
d388 20
a407 11
USHORT
SiS_GetRatePtr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
               PSIS_HW_INFO HwInfo)
{
  SHORT  LCDRefreshIndex[] = { 0x00, 0x00, 0x01, 0x01,
                               0x01, 0x01, 0x01, 0x01,
			       0x01, 0x01, 0x01, 0x01,
			       0x01, 0x01, 0x01, 0x01,
			       0x00, 0x00, 0x00, 0x00 };
  USHORT RefreshRateTableIndex,i,backup_i;
  USHORT modeflag,index,temp,backupindex;
d409 3
a411 2
  /* Do NOT check for UseCustomMode here, will skrew up FIFO */
  if(ModeNo == 0xfe) return 0;
d413 1
a413 4
  if(ModeNo <= 0x13)
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  else
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d415 1
a415 5
  if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     	if(modeflag & HalfDCLK) return(0);
     }
  }
d417 14
a430 1
  if(ModeNo < 0x14) return(0xFFFF);
d432 2
a433 1
  /* CR33 holds refresh rate index for CRT1 [3:0] and CRT2 [7:4]. */
d435 2
a436 2
  index = (SiS_GetReg(SiS_Pr->SiS_P3d4,0x33) >> SiS_Pr->SiS_SelectCRT2Rate) & 0x0F;
  backupindex = index;
d438 9
a446 1
  if(index > 0) index--;
d448 2
a449 19
  if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	   if(SiS_Pr->SiS_VBType & VB_NoLCD)		index = 0;
	   else if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) index = backupindex = 0;
	}
	if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
	   if(!(SiS_Pr->SiS_VBType & VB_NoLCD)) {
              temp = LCDRefreshIndex[SiS_Pr->SiS_LCDResInfo];
              if(index > temp) index = temp;
	   }
	}
     } else {
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) index = 0;
	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
           if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) index = 0;
        }
     }
  }
d451 4
a454 2
  RefreshRateTableIndex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].REFindex;
  ModeNo = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].ModeID;
d456 35
a490 8
  if(HwInfo->jChipType >= SIS_315H) {
     if(!(SiS_Pr->SiS_VBInfo & DriverMode)) {
        if( (SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_VESAID == 0x105) ||
            (SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_VESAID == 0x107) ) {
           if(backupindex <= 1) RefreshRateTableIndex++;
        }
     }
  }
d492 3
a494 9
  i = 0;
  do {
     if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + i].ModeID != ModeNo) break;
     temp = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + i].Ext_InfoFlag;
     temp &= ModeInfoFlag;
     if(temp < SiS_Pr->SiS_ModeType) break;
     i++;
     index--;
  } while(index != 0xFFFF);
d496 1
a496 6
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
      	temp = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + i - 1].Ext_InfoFlag;
      	if(temp & InterlaceMode) i++;
     }
  }
d498 1
a498 1
  i--;
d500 6
a505 6
  if((SiS_Pr->SiS_SetFlag & ProgrammingCRT2) && (!(SiS_Pr->SiS_VBInfo & DisableCRT2Display))) {
     backup_i = i;
     if(!(SiS_AdjustCRT2Rate(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, &i, HwInfo))) {
	i = backup_i;
     }
  }
d507 2
a508 2
  return(RefreshRateTableIndex + i);
}
d510 1
a510 3
/*********************************************/
/*            STORE CRT2 INFO in CR34        */
/*********************************************/
d512 2
a513 4
static void
SiS_SaveCRT2Info(SiS_Private *SiS_Pr, USHORT ModeNo)
{
  USHORT temp1,temp2;
d515 16
a530 6
  /* Store CRT1 ModeNo in CR34 */
  SiS_SetReg(SiS_Pr->SiS_P3d4,0x34,ModeNo);
  temp1 = (SiS_Pr->SiS_VBInfo & SetInSlaveMode) >> 8;
  temp2 = ~(SetInSlaveMode >> 8);
  SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x31,temp2,temp1);
}
d532 3
a534 3
/*********************************************/
/*    HELPER: GET SOME DATA FROM BIOS ROM    */
/*********************************************/
d536 3
a538 6
#ifdef SIS300
static BOOLEAN
SiS_CR36BIOSWord23b(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT temp,temp1;
  UCHAR *ROMAddr;
d540 17
a556 9
  if((ROMAddr = (UCHAR *)HwInfo->pjVirtualRomBase) && SiS_Pr->SiS_UseROM) {
     if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
        temp = 1 << ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xff) >> 4);
        temp1 = (ROMAddr[0x23c] << 8) | ROMAddr[0x23b];
        if(temp1 & temp) return TRUE;
     }
  }
  return FALSE;
}
d558 14
a571 5
static BOOLEAN
SiS_CR36BIOSWord23d(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT temp,temp1;
  UCHAR *ROMAddr;
d573 3
a575 10
  if((ROMAddr = (UCHAR *)HwInfo->pjVirtualRomBase) && SiS_Pr->SiS_UseROM) {
     if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
        temp = 1 << ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xff) >> 4);
        temp1 = (ROMAddr[0x23e] << 8) | ROMAddr[0x23d];
        if(temp1 & temp) return TRUE;
     }
  }
  return FALSE;
}
#endif
d577 1
a577 3
/*********************************************/
/*          HELPER: DELAY FUNCTIONS          */
/*********************************************/
d579 1
a579 4
void
SiS_DDC2Delay(SiS_Private *SiS_Pr, USHORT delaytime)
{
  USHORT i, j;
d581 1
a581 4
  for(i=0; i<delaytime; i++) {
     j += SiS_GetReg(SiS_Pr->SiS_P3c4,0x05);
  }
}
d583 2
a584 4
static void
SiS_GenericDelay(SiS_Private *SiS_Pr, USHORT delay)
{
  USHORT temp,flag;
d586 18
a603 18
  flag = SiS_GetRegByte(0x61) & 0x10;

  while(delay) {
     temp = SiS_GetRegByte(0x61) & 0x10;
     if(temp == flag) continue;
     flag = temp;
     delay--;
  }
}

#ifdef SIS315H
static void
SiS_LongDelay(SiS_Private *SiS_Pr, USHORT delay)
{
  while(delay--) {
     SiS_GenericDelay(SiS_Pr,0x19df);
  }
}
d605 32
d638 1
a638 7
static void
SiS_ShortDelay(SiS_Private *SiS_Pr, USHORT delay)
{
  while(delay--) {
     SiS_GenericDelay(SiS_Pr,0x42);
  }
}
d640 1
a640 5
static void
SiS_PanelDelay(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT DelayTime)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT PanelID, DelayIndex, Delay=0;
d642 1
a642 1
  if(HwInfo->jChipType < SIS_315H) {
d644 1
a644 1
#ifdef SIS300
d646 21
a666 9
      PanelID = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36);
      if(SiS_Pr->SiS_VBType & VB_SISVB) {
         if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x18) & 0x10)) PanelID = 0x12;
      }
      DelayIndex = PanelID >> 4;
      if((DelayTime >= 2) && ((PanelID & 0x0f) == 1))  {
         Delay = 3;
      } else {
         if(DelayTime >= 2) DelayTime -= 2;
d668 4
a671 16
         if(!(DelayTime & 0x01)) {
       	    Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[0];
         } else {
       	    Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[1];
         }
	 if((ROMAddr) && (SiS_Pr->SiS_UseROM)) {
            if(ROMAddr[0x220] & 0x40) {
               if(!(DelayTime & 0x01)) {
	          Delay = (USHORT)ROMAddr[0x225];
               } else {
	    	  Delay = (USHORT)ROMAddr[0x226];
               }
            }
         }
      }
      SiS_ShortDelay(SiS_Pr,Delay);
d673 1
a673 1
#endif  /* SIS300 */
d675 1
a675 1
   } else {
d677 1
a677 1
#ifdef SIS315H
d679 1
a679 1
      if(HwInfo->jChipType >= SIS_330) return;
d681 5
a685 35
      if((SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
         (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
	 (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {			/* 315 series, LVDS; Special */

         if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
            PanelID = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36);
	    if(SiS_Pr->SiS_CustomT == CUT_CLEVO1400) {
	       if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x1b) & 0x10)) PanelID = 0x12;
	    }
	    if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
	       DelayIndex = PanelID & 0x0f;
	    } else {
	       DelayIndex = PanelID >> 4;
	    }
	    if((DelayTime >= 2) && ((PanelID & 0x0f) == 1))  {
               Delay = 3;
            } else {
               if(DelayTime >= 2) DelayTime -= 2;
               if(!(DelayTime & 0x01)) {
       		  Delay = SiS_Pr->SiS_PanelDelayTblLVDS[DelayIndex].timer[0];
               } else {
       		  Delay = SiS_Pr->SiS_PanelDelayTblLVDS[DelayIndex].timer[1];
               }
	       if((ROMAddr) && (SiS_Pr->SiS_UseROM)) {
                  if(ROMAddr[0x13c] & 0x40) {
                     if(!(DelayTime & 0x01)) {
	    	        Delay = (USHORT)ROMAddr[0x17e];
                     } else {
	    	        Delay = (USHORT)ROMAddr[0x17f];
                     }
                  }
               }
            }
	    SiS_ShortDelay(SiS_Pr,Delay);
	 }
d687 2
a688 1
      } else if(SiS_Pr->SiS_VBType & VB_SISVB) {			/* 315 series, all bridges */
d690 1
a690 8
	 DelayIndex = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4;
         if(!(DelayTime & 0x01)) {
       	    Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[0];
         } else {
       	    Delay = SiS_Pr->SiS_PanelDelayTbl[DelayIndex].timer[1];
         }
	 Delay <<= 8;
	 SiS_DDC2Delay(SiS_Pr, Delay);
d692 3
a694 1
      }
d696 1
a696 1
#endif /* SIS315H */
d698 15
a712 2
   }
}
d714 2
a715 9
#ifdef SIS315H
static void
SiS_PanelDelayLoop(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                      USHORT DelayTime, USHORT DelayLoop)
{
   int i;
   for(i=0; i<DelayLoop; i++) {
      SiS_PanelDelay(SiS_Pr, HwInfo, DelayTime);
   }
a716 5
#endif

/*********************************************/
/*    HELPER: WAIT-FOR-RETRACE FUNCTIONS     */
/*********************************************/
d718 2
d721 2
a722 1
SiS_WaitRetrace1(SiS_Private *SiS_Pr)
d724 3
a726 1
  USHORT watchdog;
d728 3
a730 35
  if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x1f) & 0xc0) return;

  if(!(SiS_GetReg(SiS_Pr->SiS_P3d4,0x17) & 0x80)) return;

  watchdog = 65535;
  while((SiS_GetRegByte(SiS_Pr->SiS_P3da) & 0x08) && --watchdog);
  watchdog = 65535;
  while((!(SiS_GetRegByte(SiS_Pr->SiS_P3da) & 0x08)) && --watchdog);
}

static void
SiS_WaitRetrace2(SiS_Private *SiS_Pr, USHORT reg)
{
  USHORT watchdog;

  watchdog = 65535;
  while((SiS_GetReg(SiS_Pr->SiS_Part1Port,reg) & 0x02) && --watchdog);
  watchdog = 65535;
  while((!(SiS_GetReg(SiS_Pr->SiS_Part1Port,reg) & 0x02)) && --watchdog);
}

static void
SiS_WaitVBRetrace(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
        if(!(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x20)) return;
     }
     if(!(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x80)) {
        SiS_WaitRetrace1(SiS_Pr);
     } else {
        SiS_WaitRetrace2(SiS_Pr, 0x25);
     }
#endif
d732 2
a733 7
#ifdef SIS315H
     if(!(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x40)) {
        SiS_WaitRetrace1(SiS_Pr);
     } else {
        SiS_WaitRetrace2(SiS_Pr, 0x30);
     }
#endif
a734 1
}
d736 1
a736 4
static void
SiS_VBWait(SiS_Private *SiS_Pr)
{
  USHORT tempal,temp,i,j;
d738 2
a739 15
  temp = 0;
  for(i=0; i<3; i++) {
    for(j=0; j<100; j++) {
       tempal = SiS_GetRegByte(SiS_Pr->SiS_P3da);
       if(temp & 0x01) {
          if((tempal & 0x08))  continue;
          if(!(tempal & 0x08)) break;
       } else {
          if(!(tempal & 0x08)) continue;
          if((tempal & 0x08))  break;
       }
    }
    temp ^= 0x01;
  }
}
d741 4
a744 7
static void
SiS_VBLongWait(SiS_Private *SiS_Pr)
{
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     SiS_VBWait(SiS_Pr);
  } else {
     SiS_WaitRetrace1(SiS_Pr);
a745 1
}
d747 2
a748 3
/*********************************************/
/*               HELPER: MISC                */
/*********************************************/
d750 1
a750 4
static BOOLEAN
SiS_Is301B(SiS_Private *SiS_Pr)
{
  USHORT flag;
d752 1
a752 4
  flag = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x01);
  if(flag >= 0xb0) return TRUE;
  return FALSE;
}
d754 2
a755 4
static BOOLEAN
SiS_CRT2IsLCD(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d757 2
a758 8
  if(HwInfo->jChipType == SIS_730) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3c4,0x13);
     if(flag & 0x20) return TRUE;
  }
  flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
  if(flag & 0x20) return TRUE;
  return FALSE;
}
d760 6
a765 5
BOOLEAN
SiS_IsDualEdge(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
#ifdef SIS315H
  USHORT flag;
d767 10
a776 5
  if(HwInfo->jChipType >= SIS_315H) {
     if((HwInfo->jChipType != SIS_650) || (SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f) & 0xf0)) {
        flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
        if(flag & EnableDualEdge) return TRUE;
     }
d778 1
a778 3
#endif
  return FALSE;
}
d780 1
a780 5
BOOLEAN
SiS_IsVAMode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
#ifdef SIS315H
  USHORT flag;
d782 53
a834 3
  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if((flag & EnableDualEdge) && (flag & SetToLCDA)) return TRUE;
d837 43
a879 2
  return FALSE;
}
a880 8
static BOOLEAN
SiS_IsDualLink(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
#ifdef SIS315H
  if(HwInfo->jChipType >= SIS_315H) {
     if((SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ||
        (SiS_IsVAMode(SiS_Pr, HwInfo))) {
        if(SiS_Pr->SiS_LCDInfo & LCDDualLink) return TRUE;
a882 3
#endif
  return FALSE;
}
d884 6
a889 11
#ifdef SIS315H
static BOOLEAN
SiS_TVEnabled(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  if((SiS_GetReg(SiS_Pr->SiS_Part2Port,0x00) & 0x0f) != 0x0c) return TRUE;
  if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS301LV302LV)) {
     if(SiS_GetReg(SiS_Pr->SiS_Part2Port,0x4d) & 0x10) return TRUE;
  }
  return FALSE;
}
#endif
d891 1
a891 8
#ifdef SIS315H
static BOOLEAN
SiS_LCDAEnabled(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x13) & 0x04) return TRUE;
  return FALSE;
}
#endif
d893 22
a914 5
#ifdef SIS315H
static BOOLEAN
SiS_WeHaveBacklightCtrl(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d916 7
a922 3
  if((HwInfo->jChipType >= SIS_315H) && (HwInfo->jChipType < SIS_661)) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x79);
     if(flag & 0x10) return TRUE;
a923 2
  return FALSE;
}
d925 1
d927 4
a930 5
#ifdef SIS315H
static BOOLEAN
SiS_IsNotM650orLater(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d932 2
a933 10
  if(HwInfo->jChipType == SIS_650) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f);
     flag &= 0xF0;
     /* Check for revision != A0 only */
     if((flag == 0xe0) || (flag == 0xc0) ||
        (flag == 0xb0) || (flag == 0x90)) return FALSE;
  } else if(HwInfo->jChipType >= SIS_661) return FALSE;
  return TRUE;
}
#endif
d935 4
a938 5
#ifdef SIS315H
static BOOLEAN
SiS_IsYPbPr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d940 7
a946 3
  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if(flag & EnableCHYPbPr) return TRUE;  /* = YPrPb = 0x08 */
a947 3
  return FALSE;
}
#endif
d949 4
a952 5
#ifdef SIS315H
static BOOLEAN
SiS_IsChScart(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d954 1
a954 7
  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if(flag & EnableCHScart) return TRUE;  /* = Scart = 0x04 */
  }
  return FALSE;
}
#endif
d956 4
a959 5
#ifdef SIS315H
static BOOLEAN
SiS_IsTVOrYPbPrOrScart(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d961 20
a980 6
  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToTV)        return TRUE;
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if(flag & EnableCHYPbPr)      return TRUE;  /* = YPrPb = 0x08 */
     if(flag & EnableCHScart)      return TRUE;  /* = Scart = 0x04 - TW */
d982 12
a993 2
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToTV)        return TRUE;
a994 2
  return FALSE;
}
d996 12
d1009 4
a1012 5
#ifdef SIS315H
static BOOLEAN
SiS_IsLCDOrLCDA(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d1014 1
a1014 12
  if(HwInfo->jChipType >= SIS_315H) {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToLCD) return TRUE;
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     if(flag & SetToLCDA)    return TRUE;
  } else {
     flag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
     if(flag & SetCRT2ToLCD) return TRUE;
  }
  return FALSE;
}
#endif
d1016 3
a1018 4
static BOOLEAN
SiS_BridgeIsOn(SiS_Private *SiS_Pr)
{
  USHORT flag;
d1020 7
a1026 5
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     return FALSE;
  } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
     flag = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x00);
     if((flag == 1) || (flag == 2)) return FALSE;
a1027 2
  return TRUE;
}
d1029 6
a1034 4
static BOOLEAN
SiS_BridgeIsEnabled(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag;
d1036 5
a1040 9
  if(!(SiS_BridgeIsOn(SiS_Pr))) {
     flag = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
     if(HwInfo->jChipType < SIS_315H) {
       flag &= 0xa0;
       if((flag == 0x80) || (flag == 0x20)) return FALSE;
     } else {
       flag &= 0x50;
       if((flag == 0x40) || (flag == 0x10)) return FALSE;
     }
d1042 1
a1042 2
  return TRUE;
}
d1044 2
a1045 4
static BOOLEAN
SiS_BridgeInSlave(SiS_Private *SiS_Pr)
{
  USHORT flag1;
d1047 8
a1054 4
  flag1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x31);
  if(flag1 & (SetInSlaveMode >> 8)) return TRUE;
  return FALSE;
}
d1056 1
a1056 3
/*********************************************/
/*       GET VIDEO BRIDGE CONFIG INFO        */
/*********************************************/
d1058 1
a1058 6
/* Setup general purpose IO for Chrontel communication */
void
SiS_SetChrontelGPIO(SiS_Private *SiS_Pr, USHORT myvbinfo)
{
   unsigned long  acpibase;
   unsigned short temp;
d1060 9
a1068 1
   if(!(SiS_Pr->SiS_ChSW)) return;
d1070 1
a1070 16
#ifndef LINUX_XF86
   SiS_SetRegLong(0xcf8,0x80000874);		   /* get ACPI base */
   acpibase = SiS_GetRegLong(0xcfc);
#else
   acpibase = pciReadLong(0x00000800, 0x74);
#endif
   acpibase &= 0xFFFF;
   temp = SiS_GetRegShort((USHORT)(acpibase + 0x3c));  /* ACPI register 0x3c: GP Event 1 I/O mode select */
   temp &= 0xFEFF;
   SiS_SetRegShort((USHORT)(acpibase + 0x3c), temp);
   temp = SiS_GetRegShort((USHORT)(acpibase + 0x3c));
   temp = SiS_GetRegShort((USHORT)(acpibase + 0x3a));  /* ACPI register 0x3a: GP Pin Level (low/high) */
   temp &= 0xFEFF;
   if(!(myvbinfo & SetCRT2ToTV)) temp |= 0x0100;
   SiS_SetRegShort((USHORT)(acpibase + 0x3a), temp);
   temp = SiS_GetRegShort((USHORT)(acpibase + 0x3a));
d1073 1
d1075 3
a1077 3
SiS_GetVBInfo(SiS_Private *SiS_Pr, USHORT ModeNo,
              USHORT ModeIdIndex,PSIS_HW_INFO HwInfo,
	      int checkcrt2mode)
d1079 6
a1084 2
  USHORT tempax,tempbx,temp;
  USHORT modeflag, resinfo=0;
d1086 3
a1088 4
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
d1090 2
a1091 2
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d1094 3
a1096 1
  SiS_Pr->SiS_SetFlag = 0;
d1098 1
a1098 1
  SiS_Pr->SiS_ModeType = modeflag & ModeInfoFlag;
d1100 3
a1102 20
  tempbx = 0;
  if(SiS_BridgeIsOn(SiS_Pr) == 0) {
    	temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
#if 0
   	if(HwInfo->jChipType < SIS_661) {
	   /* NO - YPbPr not set yet ! */
	   if(SiS_Pr->SiS_YPbPr & <all ypbpr except 525i>) {
	      temp &= (SetCRT2ToHiVision | SwitchCRT2 | SetSimuScanMode); 	/* 0x83 */
	      temp |= SetCRT2ToHiVision;   					/* 0x80 */
   	   }
	   if(SiS_Pr->SiS_YPbPr & <ypbpr525i>) {
	      temp &= (SetCRT2ToHiVision | SwitchCRT2 | SetSimuScanMode); 	/* 0x83 */
	      temp |= SetCRT2ToSVIDEO;  					/* 0x08 */
	   }
	}
#endif
    	tempbx |= temp;
    	tempax = SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) << 8;
        tempax &= (DriverMode | LoadDACFlag | SetNotSimuMode | SetPALTV);
    	tempbx |= tempax;
d1104 1
a1104 41
#ifdef SIS315H
	if(HwInfo->jChipType >= SIS_315H) {
    	   if(SiS_Pr->SiS_VBType & (VB_SIS301C|VB_SIS302B|VB_SIS301LV|VB_SIS302LV|VB_SIS302ELV)) {
	      if(ModeNo == 0x03) {
	         /* Mode 0x03 is never in driver mode */
		 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x31,0xbf);
	      }
	      if(!(SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) & (DriverMode >> 8))) {
	         /* Reset LCDA setting */
		 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0xfc);
	      }
	      if(IS_SIS650) {
	         if(SiS_Pr->SiS_UseLCDA) {
		    if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f) & 0xF0) {
		       if((ModeNo <= 0x13) || (!(SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) & (DriverMode >> 8)))) {
		          SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x38,(EnableDualEdge | SetToLCDA));
		       }
		    }
		 }
	      }
	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
       	      if((temp & (EnableDualEdge | SetToLCDA)) == (EnableDualEdge | SetToLCDA)) {
          	 tempbx |= SetCRT2ToLCDA;
	      }
	   }
	   if(HwInfo->jChipType >= SIS_661) {
	      tempbx &= ~(SetCRT2ToYPbPr525750 | SetCRT2ToHiVision);
	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
	      if(SiS_Pr->SiS_VBType & (VB_SIS301C|VB_SIS301LV|VB_SIS302LV|VB_SIS302ELV)) {
	         if(temp & 0x04) {
		    temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35) & 0xe0;
		    if(temp == 0x60) tempbx |= SetCRT2ToHiVision;
		    else             tempbx |= SetCRT2ToYPbPr525750;
		 }
	      } else if(SiS_Pr->SiS_VBType & (VB_SIS301 | VB_SIS301B | VB_SIS302B)) {
	         if(temp & 0x04) {
		    temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35) & 0xe0;
		    if(temp == 0x60) tempbx |= SetCRT2ToHiVision;
		 }
	      }
  	   }
d1106 1
a1106 12
	   if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
	      if(temp & SetToLCDA) {
		 tempbx |= SetCRT2ToLCDA;
	      }
	      if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	         if(temp & EnableCHYPbPr) {
		    tempbx |= SetCRT2ToCHYPbPr;
		 }
	      }
	   }
	}
d1108 11
a1118 1
#endif  /* SIS315H */
d1120 1
a1120 30
    	if(SiS_Pr->SiS_VBType & VB_SISVB) {
	   temp = SetCRT2ToSVIDEO   |
	          SetCRT2ToAVIDEO   |
	          SetCRT2ToSCART    |
	          SetCRT2ToLCDA     |
	          SetCRT2ToLCD      |
	          SetCRT2ToRAMDAC   |
                  SetCRT2ToHiVision |
		  SetCRT2ToYPbPr525750;
    	} else {
           if(HwInfo->jChipType >= SIS_315H) {
              if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
        	 temp = SetCRT2ToAVIDEO |
		        SetCRT2ToSVIDEO |
		        SetCRT2ToSCART  |
		        SetCRT2ToLCDA   |
		        SetCRT2ToLCD    |
		        SetCRT2ToCHYPbPr;
      	      } else {
        	 temp = SetCRT2ToLCDA   |
		        SetCRT2ToLCD;
	      }
	   } else {
      	      if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
          	 temp = SetCRT2ToTV | SetCRT2ToLCD;
              } else {
        	 temp = SetCRT2ToLCD;
	      }
	   }
    	}
d1122 1
a1122 4
    	if(!(tempbx & temp)) {
      	   tempax = DisableCRT2Display;
      	   tempbx = 0;
    	}
d1124 1
a1124 47
   	if(SiS_Pr->SiS_VBType & VB_SISVB) {
	   USHORT clearmask = ( DriverMode 	   |
				DisableCRT2Display |
				LoadDACFlag 	   |
				SetNotSimuMode 	   |
				SetInSlaveMode 	   |
				SetPALTV 	   |
				SwitchCRT2	   |
				SetSimuScanMode );
      	   if(tempbx & SetCRT2ToLCDA) {
              tempbx &= (clearmask | SetCRT2ToLCDA);
      	   }
	   if(tempbx & SetCRT2ToRAMDAC) {
              tempbx &= (clearmask | SetCRT2ToRAMDAC);
      	   }
	   if(tempbx & SetCRT2ToLCD) {
              tempbx &= (clearmask | SetCRT2ToLCD);
      	   }
	   if(tempbx & SetCRT2ToSCART) {
              tempbx &= (clearmask | SetCRT2ToSCART);
      	   }
	   if(tempbx & SetCRT2ToHiVision) {
              tempbx &= (clearmask | SetCRT2ToHiVision);
      	   }
	   if(tempbx & SetCRT2ToYPbPr525750) {
	      tempbx &= (clearmask | SetCRT2ToYPbPr525750);
	   }
   	} else {
	   if(HwInfo->jChipType >= SIS_315H) {
	      if(tempbx & SetCRT2ToLCDA) {
	         tempbx &= (0xFF00|SwitchCRT2|SetSimuScanMode);
	      }
	   }
      	   if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
              if(tempbx & SetCRT2ToTV) {
          	 tempbx &= (0xFF00|SetCRT2ToTV|SwitchCRT2|SetSimuScanMode);
	      }
      	   }
      	   if(tempbx & SetCRT2ToLCD) {
              tempbx &= (0xFF00|SetCRT2ToLCD|SwitchCRT2|SetSimuScanMode);
	   }
	   if(HwInfo->jChipType >= SIS_315H) {
	      if(tempbx & SetCRT2ToLCDA) {
	         tempbx |= SetCRT2ToLCD;
	      }
	   }
	}
d1126 1
a1126 5
    	if(tempax & DisableCRT2Display) {
      	   if(!(tempbx & (SwitchCRT2 | SetSimuScanMode))) {
              tempbx = SetSimuScanMode | DisableCRT2Display;
      	   }
    	}
d1128 24
a1151 3
    	if(!(tempbx & DriverMode)){
      	   tempbx |= SetSimuScanMode;
    	}
d1153 2
a1154 7
	/* LVDS/CHRONTEL (LCD/TV) and 301BDH (LCD) can only be slave in 8bpp modes */
	if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	   if( (SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
	       ((tempbx & SetCRT2ToLCD) && (SiS_Pr->SiS_VBType & VB_NoLCD)) ) {
	       modeflag &= (~CRT2Mode);
	   }
	}
d1156 3
a1158 22
    	if(!(tempbx & SetSimuScanMode)) {
      	   if(tempbx & SwitchCRT2) {
              if((!(modeflag & CRT2Mode)) && (checkcrt2mode)) {
		 if( (HwInfo->jChipType >= SIS_315H) &&
		     (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) ) {
		    if(resinfo != SIS_RI_1600x1200) {
                       tempbx |= SetSimuScanMode;
		    }
		 } else {
            	    tempbx |= SetSimuScanMode;
	         }
              }
      	   } else {
              if(!(SiS_BridgeIsEnabled(SiS_Pr,HwInfo))) {
          	 if(!(tempbx & DriverMode)) {
            	    if(SiS_BridgeInSlave(SiS_Pr)) {
		       tempbx |= SetSimuScanMode;
            	    }
                 }
              }
      	   }
    	}
d1160 1
a1160 18
    	if(!(tempbx & DisableCRT2Display)) {
           if(tempbx & DriverMode) {
              if(tempbx & SetSimuScanMode) {
          	 if((!(modeflag & CRT2Mode)) && (checkcrt2mode)) {
	            if( (HwInfo->jChipType >= SIS_315H) &&
		        (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) ) {
		       if(resinfo != SIS_RI_1600x1200) {
		          tempbx |= SetInSlaveMode;
		       }
		    } else {
            	       tempbx |= SetInSlaveMode;
                    }
	         }
              }
           } else {
              tempbx |= SetInSlaveMode;
      	   }
    	}
d1162 18
d1182 15
a1196 1
  SiS_Pr->SiS_VBInfo = tempbx;
d1198 2
a1199 2
  if(HwInfo->jChipType == SIS_630) {
     SiS_SetChrontelGPIO(SiS_Pr, SiS_Pr->SiS_VBInfo);
d1201 6
d1208 1
a1208 11
#ifdef TWDEBUG
#ifdef LINUX_KERNEL
  printk(KERN_DEBUG "sisfb: (VBInfo= 0x%04x, SetFlag=0x%04x)\n",
      SiS_Pr->SiS_VBInfo, SiS_Pr->SiS_SetFlag);
#endif
#ifdef LINUX_XF86
  xf86DrvMsgVerb(0, X_PROBED, 3, "(init301: VBInfo=0x%04x, SetFlag=0x%04x)\n",
      SiS_Pr->SiS_VBInfo, SiS_Pr->SiS_SetFlag);
#endif
#endif
}
d1210 16
a1225 3
/*********************************************/
/*           DETERMINE YPbPr MODE            */
/*********************************************/
d1227 1
a1227 3
void
SiS_SetYPbPr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
d1229 1
a1229 1
  UCHAR temp;
d1231 1
a1231 7
  /* Note: This variable is only used on 30xLV systems.
   * CR38 has a different meaning on LVDS/CH7019 systems.
   * On 661 and later, these bits moved to CR35.
   *
   * On 301, 301B, only HiVision 1080i is supported.
   * On 30xLV, 301C, only YPbPr 1080i is supported.
   */
d1233 2
a1234 2
  SiS_Pr->SiS_YPbPr = 0;
  if(HwInfo->jChipType >= SIS_661) return;
d1236 1
a1236 5
  if(SiS_Pr->SiS_VBType) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	SiS_Pr->SiS_YPbPr = YPbPrHiVision;
     }
  }
d1238 14
a1251 12
  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_VBType & (VB_SIS301LV302LV | VB_SIS301C)) {
        temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
	if(temp & 0x08) {
	   switch((temp >> 4)) {
	   case 0x00: SiS_Pr->SiS_YPbPr = YPbPr525i;     break;
	   case 0x01: SiS_Pr->SiS_YPbPr = YPbPr525p;     break;
	   case 0x02: SiS_Pr->SiS_YPbPr = YPbPr750p;     break;
	   case 0x03: SiS_Pr->SiS_YPbPr = YPbPrHiVision; break;
	   }
	}
     }
d1254 2
a1255 1
}
d1257 1
a1257 3
/*********************************************/
/*           DETERMINE TVMode flag           */
/*********************************************/
d1259 1
a1259 6
void
SiS_SetTVMode(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT temp, temp1, resinfo = 0, romindex = 0;
  UCHAR  OutputSelect = *SiS_Pr->pSiS_OutputSelect;
d1261 25
a1285 1
  SiS_Pr->SiS_TVMode = 0;
d1287 1
a1287 2
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) return;
  if(SiS_Pr->UseCustomMode) return;
d1289 2
a1290 2
  if(ModeNo > 0x13) {
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d1293 4
a1296 1
  if(HwInfo->jChipType < SIS_661) {
d1298 1
a1298 1
     if(SiS_Pr->SiS_VBInfo & SetPALTV) SiS_Pr->SiS_TVMode |= TVSetPAL;
d1300 21
a1320 73
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        temp = 0;
        if((HwInfo->jChipType == SIS_630) ||
           (HwInfo->jChipType == SIS_730)) {
           temp = 0x35;
	   romindex = 0xfe;
        } else if(HwInfo->jChipType >= SIS_315H) {
           temp = 0x38;
	   romindex = 0xf3;
	   if(HwInfo->jChipType >= SIS_330) romindex = 0x11b;
        }
        if(temp) {
           if(romindex && ROMAddr && SiS_Pr->SiS_UseROM) {
	      OutputSelect = ROMAddr[romindex];
	      if(!(OutputSelect & EnablePALMN)) {
                 SiS_SetRegAND(SiS_Pr->SiS_P3d4,temp,0x3F);
	      }
	   }
	   temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,temp);
	   if(SiS_Pr->SiS_TVMode & TVSetPAL) {
              if(temp1 & EnablePALM) {		/* 0x40 */
                 SiS_Pr->SiS_TVMode |= TVSetPALM;
	         SiS_Pr->SiS_TVMode &= ~TVSetPAL;
	      } else if(temp1 & EnablePALN) {	/* 0x80 */
	         SiS_Pr->SiS_TVMode |= TVSetPALN;
              }
	   } else {
              if(temp1 & EnableNTSCJ) {		/* 0x40 */
	         SiS_Pr->SiS_TVMode |= TVSetNTSCJ;
  	      }
	   }
        }
	/* Translate HiVision/YPbPr to our new flags */
	if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	   if(SiS_Pr->SiS_YPbPr == YPbPr750p)          SiS_Pr->SiS_TVMode |= TVSetYPbPr750p;
	   else if(SiS_Pr->SiS_YPbPr == YPbPr525p)     SiS_Pr->SiS_TVMode |= TVSetYPbPr525p;
	   else	if(SiS_Pr->SiS_YPbPr == YPbPrHiVision) SiS_Pr->SiS_TVMode |= TVSetHiVision;
	   else					       SiS_Pr->SiS_TVMode |= TVSetYPbPr525i;
	   if(SiS_Pr->SiS_TVMode & (TVSetYPbPr750p | TVSetYPbPr525p | TVSetYPbPr525i)) {
	      SiS_Pr->SiS_VBInfo &= ~SetCRT2ToHiVision;
	      SiS_Pr->SiS_VBInfo |= SetCRT2ToYPbPr525750;
	   } else if(SiS_Pr->SiS_TVMode & TVSetHiVision) {
	      SiS_Pr->SiS_TVMode |= TVSetPAL;
	   }
	}
     } else if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
        if(SiS_Pr->SiS_CHOverScan) {
           if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
              temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
              if((temp & TVOverScan) || (SiS_Pr->SiS_CHOverScan == 1)) {
	         SiS_Pr->SiS_TVMode |= TVSetCHOverScan;
              }
           } else if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
      	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x79);
      	      if((temp & 0x80) || (SiS_Pr->SiS_CHOverScan == 1)) {
	         SiS_Pr->SiS_TVMode |= TVSetCHOverScan;
 	      }
	   }
           if(SiS_Pr->SiS_CHSOverScan) {
              SiS_Pr->SiS_TVMode |= TVSetCHOverScan;
           }
        }
        if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
	   temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
     	   if(SiS_Pr->SiS_TVMode & TVSetPAL) {
              if(temp & EnablePALM)      SiS_Pr->SiS_TVMode |= TVSetPALM;
	      else if(temp & EnablePALN) SiS_Pr->SiS_TVMode |= TVSetPALN;
           } else {
	      if(temp & EnableNTSCJ) {
	         SiS_Pr->SiS_TVMode |= TVSetNTSCJ;
  	      }
	   }
	}
d1322 1
d1324 3
a1326 1
  } else {  /* 661 and later */
d1328 16
a1343 33
     temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
     if(temp1 & 0x01) {
        SiS_Pr->SiS_TVMode |= TVSetPAL;
	if(temp1 & 0x08) {
	   SiS_Pr->SiS_TVMode |= TVSetPALN;
	} else if(temp1 & 0x04) {
	   if(SiS_Pr->SiS_VBType & VB_SISVB) {
	      SiS_Pr->SiS_TVMode &= ~TVSetPAL;
	   }
	   SiS_Pr->SiS_TVMode |= TVSetPALM;
	}
     } else {
        if(temp1 & 0x02) {
	   SiS_Pr->SiS_TVMode |= TVSetNTSCJ;
	}
     }
     if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
        if(SiS_Pr->SiS_CHOverScan) {
           if((temp1 & 0x10) || (SiS_Pr->SiS_CHOverScan == 1)) {
	      SiS_Pr->SiS_TVMode |= TVSetCHOverScan;
	   }
	}
     }
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	   temp1 &= 0xe0;
	   if(temp1 == 0x00)      SiS_Pr->SiS_TVMode |= TVSetYPbPr525i;
	   else if(temp1 == 0x20) SiS_Pr->SiS_TVMode |= TVSetYPbPr525p;
	   else if(temp1 == 0x40) SiS_Pr->SiS_TVMode |= TVSetYPbPr750p;
	} else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	   SiS_Pr->SiS_TVMode |= (TVSetHiVision | TVSetPAL);
	}
     }
d1345 1
d1347 1
a1347 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToSCART) SiS_Pr->SiS_TVMode |= TVSetPAL;
d1349 7
a1355 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
d1357 2
a1358 6
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
        SiS_Pr->SiS_TVMode |= TVSetPAL;
	SiS_Pr->SiS_TVMode &= ~(TVSetPALM | TVSetPALN | TVSetNTSCJ);
     } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
        if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525i | TVSetYPbPr525p | TVSetYPbPr750p)) {
	   SiS_Pr->SiS_TVMode &= ~(TVSetPAL | TVSetNTSCJ | TVSetPALM | TVSetPALN);
a1359 1
     }
d1361 4
a1364 5
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
           SiS_Pr->SiS_TVMode |= TVSetTVSimuMode;
        }
     }
d1366 1
a1366 8
     if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
        /* BIOS sets TVNTSC1024 without checking 525p here. Wrong? */
        if(!(SiS_Pr->SiS_TVMode & (TVSetHiVision | TVSetYPbPr525p | TVSetYPbPr750p))) {
           if(resinfo == SIS_RI_1024x768) {
              SiS_Pr->SiS_TVMode |= TVSetNTSC1024;
	   }
        }
     }
d1368 1
a1368 11
     SiS_Pr->SiS_TVMode |= TVRPLLDIV2XO;
     if((SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) &&
        (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
	SiS_Pr->SiS_TVMode &= ~TVRPLLDIV2XO;
     } else if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p | TVSetYPbPr750p)) {
        SiS_Pr->SiS_TVMode &= ~TVRPLLDIV2XO;
     } else if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
        if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
           SiS_Pr->SiS_TVMode &= ~TVRPLLDIV2XO;
        }
     }
d1370 1
a1370 1
  }
d1372 13
a1384 1
  SiS_Pr->SiS_VBInfo &= ~SetPALTV;
d1386 1
a1386 3
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "(init301: TVMode %x, VBInfo %x)\n", SiS_Pr->SiS_TVMode, SiS_Pr->SiS_VBInfo);
#endif 
d1388 1
a1388 1
}
d1390 2
a1391 3
/*********************************************/
/*               GET LCD INFO                */
/*********************************************/
d1393 1
a1393 14
void
SiS_GetLCDResInfo(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
		  PSIS_HW_INFO HwInfo)
{
#ifdef SIS300
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
#endif
#ifdef SIS315H
  UCHAR  *myptr = NULL;
#endif  
  USHORT temp,modeflag,resinfo=0;
  const unsigned char SiS300SeriesLCDRes[] =
         { 0,  1,  2,  3,  7,  4,  5,  8,
	   0,  0, 10,  0,  0,  0,  0, 15 };
d1395 19
a1413 3
  SiS_Pr->SiS_LCDResInfo = 0;
  SiS_Pr->SiS_LCDTypeInfo = 0;
  SiS_Pr->SiS_LCDInfo = 0;
d1415 3
a1417 9
  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     if(ModeNo <= 0x13) {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     } else {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     }
d1420 3
a1422 1
  if(!(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA))) return;
d1424 3
a1426 1
  temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36);
d1428 2
a1429 11
  if((HwInfo->jChipType < SIS_315H) || (HwInfo->jChipType >= SIS_661)) {
     SiS_Pr->SiS_LCDTypeInfo = temp >> 4;
  } else {
     SiS_Pr->SiS_LCDTypeInfo = (temp & 0x0F) - 1;
  }
  temp &= 0x0f;
  if(HwInfo->jChipType < SIS_315H) {
      /* Translate 300 series LCDRes to 315 series for unified usage */
      temp = SiS300SeriesLCDRes[temp];
  }
  SiS_Pr->SiS_LCDResInfo = temp;
d1431 1
a1431 7
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(SiS_Pr->SiS_LCDResInfo < SiS_Pr->SiS_PanelMin301)
	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_PanelMin301;
  } else {
     if(SiS_Pr->SiS_LCDResInfo < SiS_Pr->SiS_PanelMinLVDS)
	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_PanelMinLVDS;
  }
d1433 4
a1436 3
  if((!SiS_Pr->CP_HaveCustomData) || (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_PanelCustom)) {
     if(SiS_Pr->SiS_LCDResInfo > SiS_Pr->SiS_PanelMax)
  	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_Panel1024x768;
d1438 9
a1446 6

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
        SiS_Pr->SiS_LCDResInfo = Panel_Barco1366;
     } else if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
        SiS_Pr->SiS_LCDResInfo = Panel_848x480;
d1449 1
d1451 6
a1456 26
  switch(SiS_Pr->SiS_LCDResInfo) {
     case Panel_800x600:   SiS_Pr->PanelXRes =  800; SiS_Pr->PanelYRes =  600; break;
     case Panel_1024x768:  SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  768; break;
     case Panel_1280x1024: SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes = 1024; break;
     case Panel_640x480_3:
     case Panel_640x480_2:
     case Panel_640x480:   SiS_Pr->PanelXRes =  640; SiS_Pr->PanelYRes =  480; break;
     case Panel_1024x600:  SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  600; break;
     case Panel_1152x864:  SiS_Pr->PanelXRes = 1152; SiS_Pr->PanelYRes =  864; break;
     case Panel_1280x960:  SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  960; break;
     case Panel_1152x768:  SiS_Pr->PanelXRes = 1152; SiS_Pr->PanelYRes =  768; break;
     case Panel_1400x1050: SiS_Pr->PanelXRes = 1400; SiS_Pr->PanelYRes = 1050; break;
     case Panel_1280x768:  SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  768; break;
     case Panel_1600x1200: SiS_Pr->PanelXRes = 1600; SiS_Pr->PanelYRes = 1200; break;
     case Panel_320x480:   SiS_Pr->PanelXRes =  320; SiS_Pr->PanelYRes =  480; break;
     case Panel_Custom:    SiS_Pr->PanelXRes = SiS_Pr->CP_MaxX;
    			   SiS_Pr->PanelYRes = SiS_Pr->CP_MaxY;
			   break;
     case Panel_Barco1366: SiS_Pr->PanelXRes = 1360; SiS_Pr->PanelYRes = 1024; break;
     case Panel_848x480:   SiS_Pr->PanelXRes =  848; SiS_Pr->PanelYRes =  480; break;
     default:		   SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  768; break;
  }

  temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
  if(HwInfo->jChipType < SIS_661) {
     temp &= ~0xe;
d1458 1
a1458 12
#ifdef SIS315H
     if(!(temp & 0x10)) {
        if(temp & 0x08) temp |= LCDPass11;
     }
     temp &= ~0xe;
     if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
        myptr = GetLCDStructPtr661(SiS_Pr, HwInfo);
        if(myptr) {
           if(myptr[2] & 0x01) temp |= LCDDualLink;
        }
     }
#endif
d1460 4
a1463 1
  SiS_Pr->SiS_LCDInfo = temp;
d1465 11
a1475 4
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
        SiS_Pr->SiS_LCDInfo = 0x80 | 0x40 | 0x20;   /* neg h/v sync, RGB24 */
     }
d1477 2
d1480 3
a1482 2
  if(!(SiS_Pr->UsePanelScaler))        SiS_Pr->SiS_LCDInfo &= ~DontExpandLCD;
  else if(SiS_Pr->UsePanelScaler == 1) SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
d1484 2
a1485 42
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) {
	   /* For non-standard LCD resolution, we let the panel scale */
           SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
	   if(ModeNo == 0x7c || ModeNo == 0x7d || ModeNo == 0x7e) {
	      /* We do not scale to 1280x960 (B/C bridges only) */
              SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   }
	   if(((HwInfo->jChipType >= SIS_315H) && (ModeNo == 0x23 || ModeNo == 0x24 || ModeNo == 0x25)) ||
	      ((HwInfo->jChipType < SIS_315H)  && (ModeNo == 0x55 || ModeNo == 0x5a || ModeNo == 0x5b))) {
	      /* We do not scale to 1280x768 (B/C bridges only) */
              SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   }
	   if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	      /* No non-scaling data available for LV bridges */
	      SiS_Pr->SiS_LCDInfo &= ~DontExpandLCD;
	   }
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
           /* No idea about the timing and zoom factors */
           SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
	   if(ModeNo == 0x3a || ModeNo == 0x4d || ModeNo == 0x65) {
	      /* We do not scale to 1280x1024 (all bridges) */
	      SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   }
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
	   if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	      /* No idea about the timing and zoom factors (C bridge only) */
	      SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   }
	}
	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	   if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
              if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	         SiS_Pr->SiS_LCDInfo &= ~DontExpandLCD;
	      }
	   }
	}
     }
  }
d1487 3
a1489 25
  if(HwInfo->jChipType >= SIS_315H) {
#ifdef SIS315H
     if(HwInfo->jChipType < SIS_661) {
        if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x39) & 0x01) {
           SiS_Pr->SiS_LCDInfo &= (~DontExpandLCD);
	   SiS_Pr->SiS_LCDInfo |= LCDPass11;
	}
     }
#endif
  } else {
#ifdef SIS300
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        if((ROMAddr) && SiS_Pr->SiS_UseROM) {
	   if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
              if(!(ROMAddr[0x235] & 0x02)) {
	         SiS_Pr->SiS_LCDInfo &= (~DontExpandLCD);
 	      }
	   }
        }
     } else if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	if((SiS_Pr->SiS_SetFlag & SetDOSMode) && ((ModeNo == 0x03) || (ModeNo == 0x10))) {
           SiS_Pr->SiS_LCDInfo &= (~DontExpandLCD);
	}
     }
#endif
d1491 2
d1494 2
a1495 4
  /* Trumpion: Assume non-expanding */
  if(SiS_Pr->SiS_IF_DEF_TRUMPION != 0) {
     SiS_Pr->SiS_LCDInfo &= (~DontExpandLCD);
  }
d1497 1
a1497 3
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
     SiS_Pr->SiS_LCDInfo &= (~LCDPass11);
  }
d1500 75
a1574 16
  if((HwInfo->jChipType >= SIS_315H) && (HwInfo->jChipType < SIS_661)) {
     if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	/* Enable 302LV/302ELV dual link mode.
	 * For 661, this is done above.
	 */
        if((SiS_Pr->SiS_CustomT == CUT_CLEVO1024) &&
	   (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)) {
	   /* (Sets this in SenseLCD; new paneltypes) */
	   SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	}
        if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) ||
	   (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) ||
           (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)) {
	   SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	}
     }
d1576 1
a1576 1
#endif
d1578 1
a1578 1
  if(!((HwInfo->jChipType < SIS_315H) && (SiS_Pr->SiS_SetFlag & SetDOSMode))) {
d1580 20
a1599 16
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
	   if(ModeNo > 0x13) {
	      if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
                 if((resinfo == SIS_RI_800x600) || (resinfo == SIS_RI_400x300)) {
                    SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
		 }
              }
           }
        }
	if(ModeNo == 0x12) {
	   if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
	      SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	   }
	}
     }
d1601 3
a1603 16
     if(modeflag & HalfDCLK) {
        if(SiS_Pr->SiS_IF_DEF_TRUMPION == 0) {
           if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
	      if(!(((SiS_Pr->SiS_IF_DEF_LVDS == 1) || (HwInfo->jChipType < SIS_315H)) &&
	                                      (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480))) {
                 if(ModeNo > 0x13) {
                    if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
                       if(resinfo == SIS_RI_512x384) SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
                    } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
                       if(resinfo == SIS_RI_400x300) SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
                    }
                 }
	      } else SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
           } else SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
        } else SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
     }
d1605 4
d1611 3
a1613 4
  if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
     if(SiS_Pr->SiS_VBInfo & SetNotSimuMode) {
     	SiS_Pr->SiS_SetFlag |= LCDVESATiming;
     }
d1615 33
a1647 1
     SiS_Pr->SiS_SetFlag |= LCDVESATiming;
d1650 12
a1661 7
  SiS_Pr->SiS_LCDInfo661 = 0;
  if(SiS_Pr->SiS_SetFlag & LCDVESATiming) SiS_Pr->SiS_LCDInfo661 |= 0x0001;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA) SiS_Pr->SiS_LCDInfo661 |= 0x0002;
  if(SiS_Pr->SiS_LCDInfo & LCDPass11)     SiS_Pr->SiS_LCDInfo661 |= 0x0008;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) SiS_Pr->SiS_LCDInfo661 |= 0x0010;
  SiS_Pr->SiS_LCDInfo661 |= (SiS_Pr->SiS_LCDInfo & 0xe0);
  if(SiS_Pr->SiS_LCDInfo & LCDDualLink)   SiS_Pr->SiS_LCDInfo661 |= 0x0100;
d1663 5
a1667 12
#ifdef LINUX_KERNEL
#ifdef TWDEBUG
  printk(KERN_DEBUG "sisfb: (LCDInfo=0x%04x LCDResInfo=0x%02x LCDTypeInfo=0x%02x)\n",
	SiS_Pr->SiS_LCDInfo, SiS_Pr->SiS_LCDResInfo, SiS_Pr->SiS_LCDTypeInfo);
#endif
#endif
#ifdef LINUX_XF86
  xf86DrvMsgVerb(0, X_PROBED, 4,
  	"(init301: LCDInfo=0x%04x LCDResInfo=0x%02x LCDTypeInfo=0x%02x SetFlag=0x%04x)\n",
	SiS_Pr->SiS_LCDInfo, SiS_Pr->SiS_LCDResInfo, SiS_Pr->SiS_LCDTypeInfo, SiS_Pr->SiS_SetFlag);
#endif
}
d1669 3
a1671 3
/*********************************************/
/*                 GET VCLK                  */
/*********************************************/
d1673 4
a1676 27
USHORT
SiS_GetVCLK2Ptr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
  USHORT tempbx;
  const USHORT LCDXlat0VCLK[4]    = {VCLK40,       VCLK40,       VCLK40,       VCLK40};
  const USHORT LVDSXlat1VCLK[4]   = {VCLK40,       VCLK40,       VCLK40,       VCLK40};
  const USHORT LVDSXlat4VCLK[4]   = {VCLK28,       VCLK28,       VCLK28,       VCLK28};
#ifdef SIS300
  const USHORT LCDXlat1VCLK300[4] = {VCLK65_300,   VCLK65_300,   VCLK65_300,   VCLK65_300};
  const USHORT LCDXlat2VCLK300[4] = {VCLK108_2_300,VCLK108_2_300,VCLK108_2_300,VCLK108_2_300};
  const USHORT LVDSXlat2VCLK300[4]= {VCLK65_300,   VCLK65_300,   VCLK65_300,   VCLK65_300};
  const USHORT LVDSXlat3VCLK300[4]= {VCLK65_300,   VCLK65_300,   VCLK65_300,   VCLK65_300};
#endif
#ifdef SIS315H
  const USHORT LCDXlat1VCLK310[4] = {VCLK65_315,   VCLK65_315,   VCLK65_315,   VCLK65_315};
  const USHORT LCDXlat2VCLK310[4] = {VCLK108_2_315,VCLK108_2_315,VCLK108_2_315,VCLK108_2_315};
  const USHORT LVDSXlat2VCLK310[4]= {VCLK65_315,   VCLK65_315,   VCLK65_315,   VCLK65_315};
  const USHORT LVDSXlat3VCLK310[4]= {VCLK108_2_315,VCLK108_2_315,VCLK108_2_315,VCLK108_2_315};
#endif
  USHORT CRT2Index,VCLKIndex=0;
  USHORT modeflag,resinfo;
  const UCHAR  *CHTVVCLKPtr = NULL;
  const USHORT *LCDXlatVCLK1 = NULL;
  const USHORT *LCDXlatVCLK2 = NULL;
  const USHORT *LVDSXlatVCLK2 = NULL;
  const USHORT *LVDSXlatVCLK3 = NULL;
d1678 17
a1694 13
  if(HwInfo->jChipType >= SIS_315H) {
#ifdef SIS315H
     LCDXlatVCLK1 = LCDXlat1VCLK310;
     LCDXlatVCLK2 = LCDXlat2VCLK310;
     LVDSXlatVCLK2 = LVDSXlat2VCLK310;
     LVDSXlatVCLK3 = LVDSXlat3VCLK310;
#endif
  } else {
#ifdef SIS300
     LCDXlatVCLK1 = LCDXlat1VCLK300;
     LCDXlatVCLK2 = LCDXlat2VCLK300;
     LVDSXlatVCLK2 = LVDSXlat2VCLK300;
     LVDSXlatVCLK3 = LVDSXlat3VCLK300;
d1696 1
a1696 1
  }
d1698 3
a1700 9
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
     CRT2Index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     CRT2Index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }
d1702 2
a1703 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {    /* 30x/B/LV */
d1705 11
a1715 1
     if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {
d1717 5
a1721 2
        CRT2Index >>= 6;
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {      /*  LCD */
d1723 13
a1735 56
           if(HwInfo->jChipType < SIS_315H) {
	      if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
	         VCLKIndex = LCDXlat0VCLK[CRT2Index];
	      } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	    	 VCLKIndex = LCDXlatVCLK1[CRT2Index];
	      } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
	    	 VCLKIndex = LCDXlatVCLK1[CRT2Index];
	      } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) {
	    	 VCLKIndex = LCDXlatVCLK1[CRT2Index];
	      } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
	         VCLKIndex = VCLK81_300;	/* guessed */
	      } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960) {
		 VCLKIndex = VCLK108_3_300;
		 if(resinfo == SIS_RI_1280x1024) VCLKIndex = VCLK100_300;
	      } else {
	    	 VCLKIndex = LCDXlatVCLK2[CRT2Index];
	      }
	   } else {
	      if( (SiS_Pr->SiS_VBType & VB_SIS301LV302LV) ||
	          (!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) ) {
      	         if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
		    VCLKIndex = VCLK108_2_315;
		 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
		    VCLKIndex = VCLK81_315;  	/* guessed */
		 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
		    VCLKIndex = VCLK108_2_315;
		 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
		    VCLKIndex = VCLK162_315;
		 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960) {
		    VCLKIndex = VCLK108_3_315;
		    if(resinfo == SIS_RI_1280x1024) VCLKIndex = VCLK100_315;
		 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
		    VCLKIndex = LCDXlatVCLK1[CRT2Index];
	         } else {
		    VCLKIndex = LCDXlatVCLK2[CRT2Index];
      	         }
	      } else {
                 VCLKIndex = (UCHAR)SiS_GetRegByte((USHORT)(SiS_Pr->SiS_P3ca+0x02));  /*  Port 3cch */
         	 VCLKIndex = ((VCLKIndex >> 2) & 0x03);
        	 if(ModeNo > 0x13) {
          	    VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
        	 }
		 if(ModeNo <= 0x13) {
		    if(HwInfo->jChipType <= SIS_315PRO) {
		       if(SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC == 1) VCLKIndex = 0x42;
	            } else {
		       if(SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC == 1) VCLKIndex = 0x00;
		    }
		 }
		 if(HwInfo->jChipType <= SIS_315PRO) {
		    if(VCLKIndex == 0) VCLKIndex = 0x41;
		    if(VCLKIndex == 1) VCLKIndex = 0x43;
		    if(VCLKIndex == 4) VCLKIndex = 0x44;
		 }
	      }
	   }
d1737 17
a1753 1
        } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {                 /*  TV */
d1755 3
a1757 17
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
              if(SiS_Pr->SiS_TVMode & TVRPLLDIV2XO) VCLKIndex = HiTVVCLKDIV2;
     	      else                                  VCLKIndex = HiTVVCLK;
              if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
            	 if(modeflag & Charx8Dot) 	    VCLKIndex = HiTVSimuVCLK;
            	 else 			  	    VCLKIndex = HiTVTextVCLK;
              }
           } else if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) VCLKIndex = YPbPr750pVCLK - TVCLKBASE_315;
	   else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p)   VCLKIndex = TVVCLKDIV2;
	   else if(SiS_Pr->SiS_TVMode & TVRPLLDIV2XO)     VCLKIndex = TVVCLKDIV2;
           else         		            	  VCLKIndex = TVVCLK;

	   if(HwInfo->jChipType < SIS_315H) {
              VCLKIndex += TVCLKBASE_300;
  	   } else {
	      VCLKIndex += TVCLKBASE_315;
	   }
d1759 11
a1769 1
        } else {         					/* VGA2 */
d1771 5
a1775 15
           VCLKIndex = (UCHAR)SiS_GetRegByte((USHORT)(SiS_Pr->SiS_P3ca+0x02));
           VCLKIndex = ((VCLKIndex >> 2) & 0x03);
           if(ModeNo > 0x13) {
              VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
	      if(HwInfo->jChipType < SIS_315H) {
          	 VCLKIndex &= 0x3f;
		 if( (HwInfo->jChipType == SIS_630) &&
		     (HwInfo->jChipRevision >= 0x30)) {
		    if(VCLKIndex == 0x14) VCLKIndex = 0x34;
		 }
		 /* Better VGA2 clock for 1280x1024@@75 */
		 if(VCLKIndex == 0x17) VCLKIndex = 0x45;
	      }
           }
        }
d1777 2
a1778 1
     } else {   /* If not programming CRT2 */
d1780 2
a1781 13
        VCLKIndex = (UCHAR)SiS_GetRegByte((USHORT)(SiS_Pr->SiS_P3ca+0x02));
        VCLKIndex = ((VCLKIndex >> 2) & 0x03);
        if(ModeNo > 0x13) {
           VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
	   if(HwInfo->jChipType < SIS_315H) {
              VCLKIndex &= 0x3f;
	      if( (HwInfo->jChipType != SIS_630) &&
		  (HwInfo->jChipType != SIS_300) ) {
		 if(VCLKIndex == 0x1b) VCLKIndex = 0x35;
	      }
	   }
        }
     }
d1783 12
a1794 1
  } else {       /*   LVDS  */
d1796 2
a1797 1
     VCLKIndex = CRT2Index;
d1799 3
a1801 1
     if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {  /* programming CRT2 */
d1803 17
a1819 1
        if( (SiS_Pr->SiS_IF_DEF_CH70xx != 0) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV) ) {
d1821 4
a1824 29
	   VCLKIndex &= 0x1f;
           tempbx = 0;
	   if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
           if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	      tempbx += 2;
	      if(SiS_Pr->SiS_ModeType > ModeVGA) {
		 if(SiS_Pr->SiS_CHSOverScan) tempbx = 8;
	      }
	      if(SiS_Pr->SiS_TVMode & TVSetPALM) {
		 tempbx = 4;
		 if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	      } else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
		 tempbx = 6;
		 if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	      }
	   }
       	   switch(tempbx) {
             case  0: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUNTSC;  break;
             case  1: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKONTSC;  break;
             case  2: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUPAL;   break;
             case  3: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPAL;   break;
	     case  4: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUPALM;  break;
             case  5: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPALM;  break;
             case  6: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKUPALN;  break;
             case  7: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPALN;  break;
	     case  8: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKSOPAL;  break;
	     default: CHTVVCLKPtr = SiS_Pr->SiS_CHTVVCLKOPAL;   break;
           }
           VCLKIndex = CHTVVCLKPtr[VCLKIndex];
d1826 1
a1826 1
        } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
d1828 1
a1828 25
	   VCLKIndex >>= 6;
     	   if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) ||
	      (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel320x480))
     	      VCLKIndex = LVDSXlat1VCLK[VCLKIndex];
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480   ||
	           SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
		   SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3)
	      VCLKIndex = LVDSXlat4VCLK[VCLKIndex];
     	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)
     	      VCLKIndex = LVDSXlatVCLK2[VCLKIndex];
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600)
              VCLKIndex = LVDSXlatVCLK2[VCLKIndex];
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768)
              VCLKIndex = LVDSXlatVCLK2[VCLKIndex];
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)
	      VCLKIndex = VCLK68_315;
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)
	      VCLKIndex = VCLK162_315;
     	   else
	      VCLKIndex = LVDSXlatVCLK3[VCLKIndex];

	   if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
	      /* Special Timing: Barco iQ Pro R series */
	      VCLKIndex = 0x44;
	   }
d1830 3
a1832 9
	   if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
	      if(HwInfo->jChipType < SIS_315H) {
		 VCLKIndex = VCLK34_300;
	         /* if(resinfo == SIS_RI_1360x768) VCLKIndex = ?; */
	      } else {
		 VCLKIndex = VCLK34_315;
		 /* if(resinfo == SIS_RI_1360x768) VCLKIndex = ?; */
	      }
	   }
d1834 2
a1835 1
        } else {
d1837 4
a1840 13
	   VCLKIndex = (UCHAR)SiS_GetRegByte((USHORT)(SiS_Pr->SiS_P3ca+0x02));
           VCLKIndex = ((VCLKIndex >> 2) & 0x03);
           if(ModeNo > 0x13) {
              VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
	      if(HwInfo->jChipType < SIS_315H) {
    	 	 VCLKIndex &= 0x3F;
              }
	      if( (HwInfo->jChipType == SIS_630) &&
                  (HwInfo->jChipRevision >= 0x30) ) {
		 if(VCLKIndex == 0x14) VCLKIndex = 0x2e;
	      }
	   }
        }
d1842 2
a1843 1
     } else {  /* if not programming CRT2 */
a1844 10
        VCLKIndex = (UCHAR)SiS_GetRegByte((USHORT)(SiS_Pr->SiS_P3ca+0x02));
        VCLKIndex = ((VCLKIndex >> 2) & 0x03);
        if(ModeNo > 0x13) {
           VCLKIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
           if(HwInfo->jChipType < SIS_315H) {
	      VCLKIndex &= 0x3F;
	      if( (HwInfo->jChipType != SIS_630) &&
	          (HwInfo->jChipType != SIS_300) ) {
		 if(VCLKIndex == 0x1b) VCLKIndex = 0x35;
	      }
d1846 4
a1849 4
	      if(HwInfo->jChipType == SIS_730) {
		 if(VCLKIndex == 0x0b) VCLKIndex = 0x40;   /* 1024x768-70 */
		 if(VCLKIndex == 0x0d) VCLKIndex = 0x41;   /* 1024x768-75 */
	      }
a1850 4
	   }
        }

     }
d1852 3
a1855 4
  
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "VCLKIndex %d (0x%x)\n", VCLKIndex, VCLKIndex);
#endif
d1857 1
a1857 1
  return(VCLKIndex);
d1860 19
a1878 3
/*********************************************/
/*        SET CRT2 MODE TYPE REGISTERS       */
/*********************************************/
d1880 4
a1883 3
static void
SiS_SetCRT2ModeRegs(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                    PSIS_HW_INFO HwInfo)
d1885 2
a1886 8
  USHORT i,j,modeflag;
  USHORT tempcl,tempah=0;
#ifdef SIS300
  USHORT temp;
#endif
#ifdef SIS315H
  USHORT tempbl, tempah2, tempbl2;
#endif
d1888 3
a1890 2
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
d1892 5
a1896 2
     if(SiS_Pr->UseCustomMode) {
        modeflag = SiS_Pr->CModeFlag;
d1898 1
a1898 1
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d1900 2
d1904 1
a1904 3
  /* BIOS does not do this (neither 301 nor LVDS) */
  /* (But it's harmless; see SetCRT2Offset) */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x03,0x00);   /* fix write part1 index 0  BTDRAM bit Bug */
d1906 1
a1906 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
d1908 1
a1908 2
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x00,0xAF,0x40);
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2E,0xF7);
d1910 9
a1918 1
  } else {
d1920 2
a1921 1
     for(i=0,j=4; i<3; i++,j++) SiS_SetReg(SiS_Pr->SiS_Part1Port,j,0);
d1923 7
a1929 1
     tempcl = SiS_Pr->SiS_ModeType;
d1931 8
a1938 1
     if(HwInfo->jChipType < SIS_315H) {
d1940 4
a1943 1
#ifdef SIS300    /* ---- 300 series ---- */
d1945 6
a1950 11
        /* For 301BDH: (with LCD via LVDS) */
        if(SiS_Pr->SiS_VBType & VB_NoLCD) {
	   temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32);
	   temp &= 0xef;
	   temp |= 0x02;
	   if((SiS_Pr->SiS_VBInfo & SetCRT2ToTV) || (SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
	      temp |= 0x10;
	      temp &= 0xfd;
	   }
	   SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
        }
d1952 2
a1953 6
        if(ModeNo > 0x13) {
           tempcl -= ModeVGA;
           if((tempcl > 0) || (tempcl == 0)) {      /* tempcl is USHORT -> always true! */
              tempah = ((0x10 >> tempcl) | 0x80);
           }
        } else tempah = 0x80;
d1955 1
a1955 1
        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode)  tempah ^= 0xA0;
d1957 1
a1957 1
#endif  /* SIS300 */
d1959 13
a1971 588
     } else {

#ifdef SIS315H    /* ------- 315/330 series ------ */

        if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
           if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x08);
           }
        }

        if(ModeNo > 0x13) {
           tempcl -= ModeVGA;
           if((tempcl > 0) || (tempcl == 0)) {  /* tempcl is USHORT -> always true! */
              tempah = (0x08 >> tempcl);
              if (tempah == 0) tempah = 1;
              tempah |= 0x40;
           }
        } else tempah = 0x40;

        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) tempah ^= 0x50;

#endif  /* SIS315H */

     }

     if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) tempah = 0;

     if(HwInfo->jChipType < SIS_315H) {
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,tempah);
     } else {
        if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x00,0xa0,tempah);
        } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
           if(IS_SIS740) {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,tempah);
	   } else {
              SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x00,0xa0,tempah);
	   }
        }
     }

     if(SiS_Pr->SiS_VBType & VB_SISVB) {

        tempah = 0x01;
        if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
      	   tempah |= 0x02;
        }
        if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
      	   tempah ^= 0x05;
      	   if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
              tempah ^= 0x01;
      	   }
        }

        if(SiS_Pr->SiS_VBInfo & DisableCRT2Display)  tempah = 0;

        if(HwInfo->jChipType < SIS_315H) {

      	   tempah = (tempah << 5) & 0xFF;
      	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x01,tempah);
      	   tempah = (tempah >> 5) & 0xFF;

        } else {

      	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2E,0xF8,tempah);

        }

        if((SiS_Pr->SiS_ModeType == ModeVGA) && (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode))) {
      	   tempah |= 0x10;
        }

        if((HwInfo->jChipType < SIS_315H) && (SiS_Pr->SiS_VBType & VB_SIS301)) {
	   if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) ||
	      (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960)) {
	      tempah |= 0x80;
	   }
        } else {
	   tempah |= 0x80;
        }

        if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	   if(!(SiS_Pr->SiS_TVMode & (TVSetYPbPr750p | TVSetYPbPr525p))) {
      	      if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
                 tempah |= 0x20;
	      }
      	   }
        }

        SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0D,0x40,tempah);

        tempah = 0;

	if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempah |= 0x40;

        if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	   if(SiS_Pr->SiS_TVMode & TVRPLLDIV2XO) {
              tempah |= 0x40;
       	   }
        }

	if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) ||
	   (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960)  ||
	   ((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) &&
	    (SiS_Pr->CP_MaxX >= 1280) && (SiS_Pr->CP_MaxY >= 960))) {
	   tempah |= 0x80;
        }

        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0C,tempah);

     } else {  /* LVDS */

        if(HwInfo->jChipType >= SIS_315H) {

	   /* LVDS can only be slave in 8bpp modes */
	   tempah = 0x80;
	   if((modeflag & CRT2Mode) && (SiS_Pr->SiS_ModeType > ModeVGA)) {
	      if(SiS_Pr->SiS_VBInfo & DriverMode) {
	         tempah |= 0x02;
	      }
	   }

	   if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
              tempah |= 0x02;
    	   }

	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	      tempah ^= 0x01;
	   }

	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      tempah = 1;
	   }

    	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2e,0xF0,tempah);

        } else {

	   tempah = 0;
	   if( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) && (SiS_Pr->SiS_ModeType > ModeVGA) ) {
              tempah |= 0x02;
    	   }
	   tempah <<= 5;

	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display)  tempah = 0;

	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x01,tempah);

        }

     }

  }  /* LCDA */

  if(SiS_Pr->SiS_VBType & VB_SISVB) {

     if(HwInfo->jChipType >= SIS_315H) {

#ifdef SIS315H

        unsigned char bridgerev = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x01);;

	/* The following is nearly unpreditable and varies from machine
	 * to machine. Especially the 301DH seems to be a real trouble
	 * maker. Some BIOSes simply set the registers (like in the
	 * NoLCD-if-statements here), some set them according to the
	 * LCDA stuff. It is very likely that some machines are not
	 * treated correctly in the following, very case-orientated
	 * code. What do I do then...?
	 */

	/* 740 variants match for 30xB, 301B-DH, 30xLV */

        if(!(IS_SIS740)) {
           tempah = 0x04;						   /* For all bridges */
           tempbl = 0xfb;
           if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
              tempah = 0x00;
	      if(SiS_IsDualEdge(SiS_Pr, HwInfo)) {
	         tempbl = 0xff;
	      }
           }
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,tempbl,tempah);
	}

	/* The following two are responsible for eventually wrong colors
	 * in TV output. The DH (VB_NoLCD) conditions are unknown; the
	 * b0 was found in some 651 machine (Pim; P4_23=0xe5); the b1 version
	 * in a 650 box (Jake). What is the criteria?
	 */

	if((IS_SIS740) || (HwInfo->jChipType >= SIS_661)) {
	   tempah = 0x30;
	   tempbl = 0xc0;
	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      tempah = 0x00;
	      tempbl = 0x00;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2c,0xcf,tempah);
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x21,0x3f,tempbl);
	} else if(SiS_Pr->SiS_VBType & VB_SIS301) {
	   /* Fixes "TV-blue-bug" on 315+301 */
	   SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2c,0xcf);     /* For 301   */
	   SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x21,0x3f);
	} else if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2c,0x30);      /* For 30xLV */
	   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x21,0xc0);
	} else if((SiS_Pr->SiS_VBType & VB_NoLCD) && (bridgerev == 0xb0)) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2c,0x30);      /* For 30xB-DH rev b0 (or "DH on 651"?) */
	   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x21,0xc0);
	} else {
	   tempah = 0x30; tempah2 = 0xc0;		       /* For 30xB (and 301BDH rev b1) */
	   tempbl = 0xcf; tempbl2 = 0x3f;
	   if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
	      tempah = tempah2 = 0x00;
	      if(SiS_IsDualEdge(SiS_Pr, HwInfo)) {
		 tempbl = tempbl2 = 0xff;
	      }
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2c,tempbl,tempah);
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x21,tempbl2,tempah2);
	}

	if(IS_SIS740) {
	   tempah = 0x80;
	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      tempah = 0x00;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x23,0x7f,tempah);
	} else {
	   tempah = 0x00;
           tempbl = 0x7f;
           if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
              tempbl = 0xff;
	      if(!(SiS_IsDualEdge(SiS_Pr, HwInfo))) {
	         tempah = 0x80;
	      }
           }
           SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x23,tempbl,tempah);
	}

	/* 661: Sets p4 27 and 34 here, done in SetGroup4 here */

#endif /* SIS315H */

     } else if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {

        SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x21,0x3f);

        if((SiS_Pr->SiS_VBInfo & DisableCRT2Display) ||
           (   (SiS_Pr->SiS_VBType & VB_NoLCD) &&
	       (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) ) ) {
	   SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x23,0x7F);
	} else {
	   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x23,0x80);
	}

     }

  } else {  /* LVDS */

#ifdef SIS315H
     if(HwInfo->jChipType >= SIS_315H) {

        if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {

           tempah = 0x04;
	   tempbl = 0xfb;
           if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
              tempah = 0x00;
	      if(SiS_IsDualEdge(SiS_Pr, HwInfo)) {
	         tempbl = 0xff;
	      }
           }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,tempbl,tempah);

	   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	   }

	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2c,0x30);

	} else if(HwInfo->jChipType == SIS_550) {

	   SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2c,0x30);

	}

     }
#endif

  }

}

/*********************************************/
/*            GET RESOLUTION DATA            */
/*********************************************/

USHORT
SiS_GetResInfo(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex)
{
  USHORT resindex;

  if(ModeNo <= 0x13)
     resindex = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  else
     resindex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;

  return(resindex);
}

static void
SiS_GetCRT2ResInfo(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
                   PSIS_HW_INFO HwInfo)
{
  USHORT xres,yres,modeflag=0,resindex;

  if(SiS_Pr->UseCustomMode) {
     SiS_Pr->SiS_VGAHDE = SiS_Pr->SiS_HDE = SiS_Pr->CHDisplay;
     SiS_Pr->SiS_VGAVDE = SiS_Pr->SiS_VDE = SiS_Pr->CVDisplay;
     return;
  }

  resindex = SiS_GetResInfo(SiS_Pr,ModeNo,ModeIdIndex);

  if(ModeNo <= 0x13) {
     xres = SiS_Pr->SiS_StResInfo[resindex].HTotal;
     yres = SiS_Pr->SiS_StResInfo[resindex].VTotal;
  } else {
     xres = SiS_Pr->SiS_ModeResInfo[resindex].HTotal;
     yres = SiS_Pr->SiS_ModeResInfo[resindex].VTotal;
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }

  if((!SiS_Pr->SiS_IF_DEF_DSTN) && (!SiS_Pr->SiS_IF_DEF_FSTN)) {

     if((HwInfo->jChipType >= SIS_315H) && (SiS_Pr->SiS_IF_DEF_LVDS == 1)) {
        if((ModeNo != 0x03) && (SiS_Pr->SiS_SetFlag & SetDOSMode)) {
           if(yres == 350) yres = 400;
        }
        if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x3a) & 0x01) {
 	   if(ModeNo == 0x12) yres = 400;
        }
     }

     if(ModeNo > 0x13) {
  	if(modeflag & HalfDCLK)       xres *= 2;
  	if(modeflag & DoubleScanMode) yres *= 2;
     }

  }

  if(SiS_Pr->SiS_VBType & VB_SISVB) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
           if(xres == 720) xres = 640;
	} else {
	   if(SiS_Pr->SiS_VBType & VB_NoLCD) {           /* 301BDH */
	        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToHiVision)) {
                   if(xres == 720) xres = 640;
		}
		if(SiS_Pr->SiS_SetFlag & SetDOSMode) {
	           yres = 400;
	           if(HwInfo->jChipType >= SIS_315H) {
	              if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x17) & 0x80) yres = 480;
	           } else {
	              if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) yres = 480;
	           }
	        }
	   } else {
	      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToHiVision)) {
	         if(xres == 720) xres = 640;
	      }
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
		 if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
		    if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        	       if(yres == 1024) yres = 1056;
      		    }
		 } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
		    if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
		       /* BIOS bug - does this regardless of scaling */
      		       if(yres == 400) yres = 405;
		    }
      		    if(yres == 350) yres = 360;
      		    if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
        	       if(yres == 360) yres = 375;
      		    }
   	         } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
      		    if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        	       if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
          	          if(yres == 350) yres = 357;
          	          if(yres == 400) yres = 420;
            	          if(yres == 480) yres = 525;
        	       }
      		    }
    	         }
	      }
	   }
	}
  } else {
    	if(xres == 720) xres = 640;
	if(SiS_Pr->SiS_SetFlag & SetDOSMode) {
	   yres = 400;
	   if(HwInfo->jChipType >= SIS_315H) {
	      if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x17) & 0x80) yres = 480;
	   } else {
	      if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) yres = 480;
	   }
	   if(SiS_Pr->SiS_IF_DEF_DSTN || SiS_Pr->SiS_IF_DEF_FSTN) {
	      yres = 480;
	   }
	}
  }
  SiS_Pr->SiS_VGAHDE = SiS_Pr->SiS_HDE = xres;
  SiS_Pr->SiS_VGAVDE = SiS_Pr->SiS_VDE = yres;
}

/*********************************************/
/*           GET CRT2 TIMING DATA            */
/*********************************************/

static BOOLEAN
SiS_GetLVDSCRT1Ptr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
		   USHORT RefreshRateTableIndex, USHORT *ResIndex,
		   USHORT *DisplayType)
 {
  USHORT tempbx,modeflag=0;
  USHORT Flag,CRT2CRTC;

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
        if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) return FALSE;
     }
  } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) return FALSE;
  } else
     return FALSE;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     CRT2CRTC = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     CRT2CRTC = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }

  Flag = 1;
  tempbx = 0;
  if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
     if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
        Flag = 0;
        tempbx = 18;
        if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx++;
        if(SiS_Pr->SiS_TVMode & TVSetPAL) {
      	   tempbx += 2;
	   if(SiS_Pr->SiS_ModeType > ModeVGA) {
	      if(SiS_Pr->SiS_CHSOverScan) tempbx = 99;
	   }
	   if(SiS_Pr->SiS_TVMode & TVSetPALM) {
	      tempbx = 18;  /* PALM uses NTSC data */
	      if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx++;
	   } else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
	      tempbx = 20;  /* PALN uses PAL data  */
	      if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx++;
	   }
        }
     }
  }
  if(Flag) {
     tempbx = SiS_Pr->SiS_LCDResInfo;
     tempbx -= SiS_Pr->SiS_PanelMinLVDS;
     if(SiS_Pr->SiS_LCDResInfo <= SiS_Pr->SiS_Panel1280x1024) {
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 6;
        if(modeflag & HalfDCLK) tempbx += 3;
     } else {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
           tempbx = 14;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
           tempbx = 23;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) {
           tempbx = 27;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
           tempbx = 36;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
           tempbx = 40;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 2;
	   if(modeflag & HalfDCLK) tempbx++;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) {
           tempbx = 54;
	   if(modeflag & HalfDCLK) tempbx++;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2) {
           tempbx = 52;
	   if(modeflag & HalfDCLK) tempbx++;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
           tempbx = 50;
	   if(modeflag & HalfDCLK) tempbx++;
        }

     }
     if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
        tempbx = 12;
	if(modeflag & HalfDCLK) tempbx++;
     }
  }

#if 0
  if(SiS_Pr->SiS_IF_DEF_FSTN) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel320x480){
        tempbx = 22;
     }
  }
#endif

  *ResIndex = CRT2CRTC & 0x3F;
  *DisplayType = tempbx;
  return TRUE;
}

static void
SiS_GetCRT2Ptr(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
	       USHORT RefreshRateTableIndex,USHORT *CRT2Index,USHORT *ResIndex,
	       PSIS_HW_INFO HwInfo)
{
  USHORT tempbx=0,tempal=0;
  USHORT Flag,resinfo=0;

  if(ModeNo <= 0x13) {
     tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }

  if((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_IF_DEF_LVDS == 0)) {

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {                            /* LCD */

	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960) {
	   tempbx = 15;
  	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
	   tempbx = 20;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)         tempbx = 21;
	   else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx = 22;
 	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
	   tempbx = 23;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)         tempbx = 24;
	   else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx = 25;
#if 0
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
	   tempbx = 26;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)         tempbx = 27;
	   else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx = 28;
#endif
 	} else if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
	   if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	      if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)       tempbx = 13;
	      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) tempbx = 14;
	      else {
	         tempbx = 29;
		 if(ModeNo >= 0x13) {
	            /* see below */
	            if(resinfo == SIS_RI_1280x960) tempal = 10;
	         }
              }
	   } else {
	      tempbx = 29;
	      if(ModeNo >= 0x13) {
	         /* 1280x768 and 1280x960 have same CRT2CRTC,
	          * so we change it here if 1280x960 is chosen
	          */
	         if(resinfo == SIS_RI_1280x960) tempal = 10;
	      }
   	   }
	} else {
      	   tempbx = SiS_Pr->SiS_LCDResInfo - SiS_Pr->SiS_Panel1024x768;
      	   if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
              tempbx += 10;
       	   }
	}
d1973 3
a1975 182
#ifdef SIS315H
	if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
	   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
	      tempbx = 50;
	      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)         tempbx = 51;
	      else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx = 52;
	   }
	}
#endif

     } else {						  	/* TV */

     	if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
           /* if(SiS_Pr->SiS_VGAVDE > 480) SiS_Pr->SiS_TVMode &= (~TVSetTVSimuMode); */
           tempbx = 2;
           if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
	      tempbx = 13;
              if(!(SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) tempbx = 14;
           }
	} else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	   if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p)      tempbx = 7;
	   else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) tempbx = 6;
	   else 					tempbx = 5;
	   if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode)     tempbx += 5;
       	} else {
           if(SiS_Pr->SiS_TVMode & TVSetPAL) 		tempbx = 3;
           else 					tempbx = 4;
           if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) 	tempbx += 5;
       	}

     }

     tempal &= 0x3F;

     if(ModeNo > 0x13) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision) {
      	   if(tempal == 6) tempal = 7;
           if((resinfo == SIS_RI_720x480) ||
	      (resinfo == SIS_RI_720x576) ||
	      (resinfo == SIS_RI_768x576)) {
	      tempal = 6;
	   }
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
              if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) {
	         if(resinfo == SIS_RI_1024x768) {
	            tempal = 8;
	         }
	      }
	   }
	}
     }

     *CRT2Index = tempbx;
     *ResIndex = tempal;

  } else {   /* LVDS, 301B-DH (if running on LCD) */

     Flag = 1;
     tempbx = 0;
     if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
        if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
           Flag = 0;
           tempbx = 10;
	   if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
           if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	      tempbx += 2;
	      if(SiS_Pr->SiS_ModeType > ModeVGA) {
		 if(SiS_Pr->SiS_CHSOverScan) tempbx = 99;
	      }
	      if(SiS_Pr->SiS_TVMode & TVSetPALM) {
		 tempbx = 90;
		 if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	      } else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
		 tempbx = 92;
		 if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	      }
           }
        }
     }

     if(Flag) {

	if(SiS_Pr->SiS_LCDResInfo <= SiS_Pr->SiS_Panel1280x1024) {
	   tempbx = SiS_Pr->SiS_LCDResInfo - SiS_Pr->SiS_PanelMinLVDS;
   	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx += 3;

	   if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
	      tempbx = 82;
	      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	   }
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768) {
	   tempbx = 18;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
	   tempbx = 6;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2) {
	   tempbx = 30;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) {
	   tempbx = 30;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
	   tempbx = 15;
  	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx += 2;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) {
	   tempbx = 16;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx += 2;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
	   tempbx = 8;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
	   tempbx = 21;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelBarco1366) {
	   tempbx = 80;
   	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	}

	if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
	   tempbx = 7;
        }

	if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
	   tempbx = 84;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	}

     }

     if(SiS_Pr->SiS_SetFlag & SetDOSMode) {
        if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) tempal = 7;
  	if(HwInfo->jChipType < SIS_315H) {
	   if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) tempal++;
	}
     }

     *CRT2Index = tempbx;
     *ResIndex = tempal & 0x1F;
  }
}

#ifdef SIS315H
static void
SiS_GetCRT2PtrA(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
		USHORT RefreshRateTableIndex,USHORT *CRT2Index,
		USHORT *ResIndex)
{
  USHORT tempbx,tempal;

  tempbx = SiS_Pr->SiS_LCDResInfo;

  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)      tempbx = 4;
  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) tempbx = 3;
  else tempbx -= SiS_Pr->SiS_Panel1024x768;

  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx += 5;

  if(ModeNo <= 0x13)
     tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  else
     tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;

  /* No customs required yet (Clevo, Compaq, etc) */

  *CRT2Index = tempbx;
  *ResIndex = tempal & 0x1F;
}
#endif

static void
SiS_GetRAMDAC2DATA(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex,PSIS_HW_INFO HwInfo)
{
  USHORT tempax=0,tempbx=0;
  USHORT temp1=0,modeflag=0,tempcx=0;
  USHORT index;

  SiS_Pr->SiS_RVBHCMAX  = 1;
  SiS_Pr->SiS_RVBHCFACT = 1;

  if(ModeNo <= 0x13) {

     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     index = SiS_GetModePtr(SiS_Pr,ModeNo,ModeIdIndex);
d1977 3
a1979 3
     tempax = SiS_Pr->SiS_StandTable[index].CRTC[0];
     tempbx = SiS_Pr->SiS_StandTable[index].CRTC[6];
     temp1 = SiS_Pr->SiS_StandTable[index].CRTC[7];
d1983 1
a1983 12
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;

     tempax = SiS_Pr->SiS_CRT1Table[index].CR[0];
     tempax |= (SiS_Pr->SiS_CRT1Table[index].CR[14] << 8);
     tempax &= 0x03FF;
     tempbx = SiS_Pr->SiS_CRT1Table[index].CR[6];
     tempcx = SiS_Pr->SiS_CRT1Table[index].CR[13] << 8;
     tempcx &= 0x0100;
     tempcx <<= 2;
     tempbx |= tempcx;
     temp1  = SiS_Pr->SiS_CRT1Table[index].CR[7];
d1985 1
a1985 1
  }
d1987 1
a1987 4
  if(temp1 & 0x01) tempbx |= 0x0100;
  if(temp1 & 0x20) tempbx |= 0x0200;
  
  tempax += 5;
d1989 9
a1997 4
  /* Charx8Dot is no more used (and assumed), so we set it */
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     modeflag |= Charx8Dot;
  }
d1999 1
a1999 2
  if(modeflag & Charx8Dot) tempax *= 8;
  else                     tempax *= 9;
d2001 3
a2003 1
  if(modeflag & HalfDCLK)  tempax <<= 1;
d2005 16
a2020 31
  tempbx++;

  SiS_Pr->SiS_VGAHT = SiS_Pr->SiS_HT = tempax;
  SiS_Pr->SiS_VGAVT = SiS_Pr->SiS_VT = tempbx;
}

static void
SiS_GetCRT2DataLVDS(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
                    USHORT RefreshRateTableIndex,
		    PSIS_HW_INFO HwInfo)
{
   USHORT CRT2Index, ResIndex;
   const SiS_LVDSDataStruct *LVDSData = NULL;

   SiS_GetCRT2ResInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);

   if(SiS_Pr->SiS_VBType & VB_SISVB) {
      SiS_Pr->SiS_RVBHCMAX  = 1;
      SiS_Pr->SiS_RVBHCFACT = 1;
      SiS_Pr->SiS_NewFlickerMode = 0;
      SiS_Pr->SiS_RVBHRS = 50;
      SiS_Pr->SiS_RY1COE = 0;
      SiS_Pr->SiS_RY2COE = 0;
      SiS_Pr->SiS_RY3COE = 0;
      SiS_Pr->SiS_RY4COE = 0;
   }

   if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {

#ifdef SIS315H
      if(SiS_Pr->UseCustomMode) {
a2021 7
         SiS_Pr->SiS_VGAHT     = SiS_Pr->CHTotal;
         SiS_Pr->SiS_VGAVT     = SiS_Pr->CVTotal;
         SiS_Pr->SiS_HT        = SiS_Pr->CHTotal;
         SiS_Pr->SiS_VT        = SiS_Pr->CVTotal;
	 if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
            SiS_Pr->SiS_HDE = SiS_Pr->PanelXRes;
            SiS_Pr->SiS_VDE = SiS_Pr->PanelYRes;
a2022 1
	 return;
d2024 1
a2024 1
     } else {
d2026 1
a2026 18
         SiS_GetCRT2PtrA(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                         &CRT2Index,&ResIndex);

         switch (CRT2Index) {
            case  0:  LVDSData = SiS_Pr->SiS_LCDA1024x768Data_1;    break;
      	    case  1:  LVDSData = SiS_Pr->SiS_LCDA1280x1024Data_1;   break;
	    case  3:  LVDSData = SiS_Pr->SiS_LCDA1400x1050Data_1;   break;
	    case  4:  LVDSData = SiS_Pr->SiS_LCDA1600x1200Data_1;   break;
      	    case  5:  LVDSData = SiS_Pr->SiS_LCDA1024x768Data_2;    break;
      	    case  6:  LVDSData = SiS_Pr->SiS_LCDA1280x1024Data_2;   break;
	    case  8:  LVDSData = SiS_Pr->SiS_LCDA1400x1050Data_2;   break;
	    case  9:  LVDSData = SiS_Pr->SiS_LCDA1600x1200Data_2;   break;
	    default:  LVDSData = SiS_Pr->SiS_LCDA1024x768Data_1;    break;
         }
     }
#endif

   } else {
d2028 1
a2028 4
      /* 301BDH needs LVDS Data */
      if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
	 SiS_Pr->SiS_IF_DEF_LVDS = 1;
      }
d2030 1
a2030 2
      SiS_GetCRT2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                     &CRT2Index, &ResIndex, HwInfo);
d2032 5
a2036 4
      /* 301BDH needs LVDS Data */
      if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
         SiS_Pr->SiS_IF_DEF_LVDS = 0;
      }
d2038 1
a2038 39
      switch (CRT2Index) {
      	case  0:  LVDSData = SiS_Pr->SiS_LVDS800x600Data_1;    break;
      	case  1:  LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;   break;
      	case  2:  LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_1;  break;
      	case  3:  LVDSData = SiS_Pr->SiS_LVDS800x600Data_2;    break;
      	case  4:  LVDSData = SiS_Pr->SiS_LVDS1024x768Data_2;   break;
      	case  5:  LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_2;  break;
	case  6:  LVDSData = SiS_Pr->SiS_LVDS640x480Data_1;    break;
        case  7:  LVDSData = SiS_Pr->SiS_LVDSXXXxXXXData_1;    break;
	case  8:  LVDSData = SiS_Pr->SiS_LVDS1400x1050Data_1;  break;
	case  9:  LVDSData = SiS_Pr->SiS_LVDS1400x1050Data_2;  break;
      	case 10:  LVDSData = SiS_Pr->SiS_CHTVUNTSCData;        break;
      	case 11:  LVDSData = SiS_Pr->SiS_CHTVONTSCData;        break;
      	case 12:  LVDSData = SiS_Pr->SiS_CHTVUPALData;         break;
      	case 13:  LVDSData = SiS_Pr->SiS_CHTVOPALData;         break;
      	case 14:  LVDSData = SiS_Pr->SiS_LVDS320x480Data_1;    break;
	case 15:  LVDSData = SiS_Pr->SiS_LVDS1024x600Data_1;   break;
	case 16:  LVDSData = SiS_Pr->SiS_LVDS1152x768Data_1;   break;
	case 17:  LVDSData = SiS_Pr->SiS_LVDS1024x600Data_2;   break;
	case 18:  LVDSData = SiS_Pr->SiS_LVDS1152x768Data_2;   break;
	case 19:  LVDSData = SiS_Pr->SiS_LVDS1280x768Data_1;   break;
	case 20:  LVDSData = SiS_Pr->SiS_LVDS1280x768Data_2;   break;
	case 21:  LVDSData = SiS_Pr->SiS_LVDS1600x1200Data_1;  break;
	case 22:  LVDSData = SiS_Pr->SiS_LVDS1600x1200Data_2;  break;
	case 30:  LVDSData = SiS_Pr->SiS_LVDS640x480Data_2;    break;
	case 80:  LVDSData = SiS_Pr->SiS_LVDSBARCO1366Data_1;  break;
	case 81:  LVDSData = SiS_Pr->SiS_LVDSBARCO1366Data_2;  break;
	case 82:  LVDSData = SiS_Pr->SiS_LVDSBARCO1024Data_1;  break;
	case 83:  LVDSData = SiS_Pr->SiS_LVDSBARCO1024Data_2;  break;
	case 84:  LVDSData = SiS_Pr->SiS_LVDS848x480Data_1;    break;
	case 85:  LVDSData = SiS_Pr->SiS_LVDS848x480Data_2;    break;
	case 90:  LVDSData = SiS_Pr->SiS_CHTVUPALMData;        break;
      	case 91:  LVDSData = SiS_Pr->SiS_CHTVOPALMData;        break;
      	case 92:  LVDSData = SiS_Pr->SiS_CHTVUPALNData;        break;
      	case 93:  LVDSData = SiS_Pr->SiS_CHTVOPALNData;        break;
	case 99:  LVDSData = SiS_Pr->SiS_CHTVSOPALData;	       break;  /* Super Overscan */
	default:  LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;   break;
      }
   }
d2040 3
a2042 4
   SiS_Pr->SiS_VGAHT = (LVDSData+ResIndex)->VGAHT;
   SiS_Pr->SiS_VGAVT = (LVDSData+ResIndex)->VGAVT;
   SiS_Pr->SiS_HT    = (LVDSData+ResIndex)->LCDHT;
   SiS_Pr->SiS_VT    = (LVDSData+ResIndex)->LCDVT;
d2044 1
a2044 1
   if(SiS_Pr->SiS_VBType & VB_SISVB) {
d2046 3
a2048 4
      if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
         SiS_Pr->SiS_HDE = SiS_Pr->PanelXRes;
         SiS_Pr->SiS_VDE = SiS_Pr->PanelYRes;
      }
d2050 3
a2052 1
   } else {
a2053 15
      if(SiS_Pr->SiS_IF_DEF_TRUMPION == 0) {
         if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
            if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
               if((!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) || (SiS_Pr->SiS_SetFlag & SetDOSMode)) {
	          SiS_Pr->SiS_HDE = SiS_Pr->PanelXRes;
                  SiS_Pr->SiS_VDE = SiS_Pr->PanelYRes;

	 	  if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
		     if(ResIndex < 0x08) {
		        SiS_Pr->SiS_HDE = 1280;
                        SiS_Pr->SiS_VDE = 1024;
		     }
		  }
               }
            }
d2055 1
d2060 6
a2065 4
static void
SiS_GetCRT2Data301(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex,
		   PSIS_HW_INFO HwInfo)
d2067 54
a2120 5
  USHORT tempax,tempbx,modeflag;
  USHORT resinfo;
  USHORT CRT2Index,ResIndex;
  const SiS_LCDDataStruct *LCDPtr = NULL;
  const SiS_TVDataStruct  *TVPtr  = NULL;
d2122 7
a2128 3
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
a2129 8
     if(SiS_Pr->UseCustomMode) {
        modeflag = SiS_Pr->CModeFlag;
	resinfo = 0;
     } else {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     }
  }
d2131 30
a2160 12
  SiS_Pr->SiS_NewFlickerMode = 0;
  SiS_Pr->SiS_RVBHRS = 50;
  SiS_Pr->SiS_RY1COE = 0;
  SiS_Pr->SiS_RY2COE = 0;
  SiS_Pr->SiS_RY3COE = 0;
  SiS_Pr->SiS_RY4COE = 0;

  SiS_GetCRT2ResInfo(SiS_Pr,ModeNo,ModeIdIndex,HwInfo);

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC){

     if(SiS_Pr->UseCustomMode) {
d2162 5
a2166 8
        SiS_Pr->SiS_RVBHCMAX  = 1;
        SiS_Pr->SiS_RVBHCFACT = 1;
        SiS_Pr->SiS_VGAHT     = SiS_Pr->CHTotal;
        SiS_Pr->SiS_VGAVT     = SiS_Pr->CVTotal;
        SiS_Pr->SiS_HT        = SiS_Pr->CHTotal;
        SiS_Pr->SiS_VT        = SiS_Pr->CVTotal;
	SiS_Pr->SiS_HDE       = SiS_Pr->SiS_VGAHDE;
        SiS_Pr->SiS_VDE       = SiS_Pr->SiS_VGAVDE;
d2168 6
a2173 1
     } else {
d2175 11
a2185 1
        SiS_GetRAMDAC2DATA(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d2187 1
a2187 1
     }
d2189 19
a2207 1
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
d2209 11
a2219 2
     SiS_GetCRT2Ptr(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                    &CRT2Index,&ResIndex,HwInfo);
d2221 9
a2229 28
     switch(CRT2Index) {
       case  2:  TVPtr = SiS_Pr->SiS_ExtHiTVData;   break;
       case  3:  TVPtr = SiS_Pr->SiS_ExtPALData;    break;
       case  4:  TVPtr = SiS_Pr->SiS_ExtNTSCData;   break;
       case  5:  TVPtr = SiS_Pr->SiS_Ext525iData;   break;
       case  6:  TVPtr = SiS_Pr->SiS_Ext525pData;   break;
       case  7:  TVPtr = SiS_Pr->SiS_Ext750pData;   break;
       case  8:  TVPtr = SiS_Pr->SiS_StPALData;     break;
       case  9:  TVPtr = SiS_Pr->SiS_StNTSCData;    break;
       case 10:  TVPtr = SiS_Pr->SiS_St525iData;    break;
       case 11:  TVPtr = SiS_Pr->SiS_St525pData;    break;
       case 12:  TVPtr = SiS_Pr->SiS_St750pData;    break;
       case 13:  TVPtr = SiS_Pr->SiS_St1HiTVData;   break;
       case 14:  TVPtr = SiS_Pr->SiS_St2HiTVData;   break;
       default:  TVPtr = SiS_Pr->SiS_StPALData;     break;
     }

     SiS_Pr->SiS_RVBHCMAX  = (TVPtr+ResIndex)->RVBHCMAX;
     SiS_Pr->SiS_RVBHCFACT = (TVPtr+ResIndex)->RVBHCFACT;
     SiS_Pr->SiS_VGAHT     = (TVPtr+ResIndex)->VGAHT;
     SiS_Pr->SiS_VGAVT     = (TVPtr+ResIndex)->VGAVT;
     SiS_Pr->SiS_HDE       = (TVPtr+ResIndex)->TVHDE;
     SiS_Pr->SiS_VDE       = (TVPtr+ResIndex)->TVVDE;
     SiS_Pr->SiS_RVBHRS    = (TVPtr+ResIndex)->RVBHRS;
     SiS_Pr->SiS_NewFlickerMode = (TVPtr+ResIndex)->FlickerMode;
     if(modeflag & HalfDCLK) {
        SiS_Pr->SiS_RVBHRS = (TVPtr+ResIndex)->HALFRVBHRS;
     }
d2231 19
a2249 1
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
d2251 3
a2253 5
        if((resinfo == SIS_RI_1024x768)  ||
           (resinfo == SIS_RI_1280x1024) ||
           (resinfo == SIS_RI_1280x720)) {
	   SiS_Pr->SiS_NewFlickerMode = 0x40;
	}
d2255 12
a2266 1
        if(SiS_Pr->SiS_VGAVDE == 350) SiS_Pr->SiS_TVMode |= TVSetTVSimuMode;
d2268 5
a2272 11
        SiS_Pr->SiS_HT = ExtHiTVHT;
        SiS_Pr->SiS_VT = ExtHiTVVT;
        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
           if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
              SiS_Pr->SiS_HT = StHiTVHT;
              SiS_Pr->SiS_VT = StHiTVVT;
#if 0
              if(!(modeflag & Charx8Dot)) {
                 SiS_Pr->SiS_HT = StHiTextTVHT;
                 SiS_Pr->SiS_VT = StHiTextTVVT;
              }
d2274 2
a2275 2
           }
        }
d2277 12
a2288 1
     } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
d2290 5
a2294 11
        if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
           SiS_Pr->SiS_HT = 1650;
           SiS_Pr->SiS_VT = 750;
	} else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) {
	   SiS_Pr->SiS_HT = NTSCHT;
	   SiS_Pr->SiS_VT = NTSCVT;
        } else {
           SiS_Pr->SiS_HT = NTSCHT;
	   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) SiS_Pr->SiS_HT = NTSC2HT;
           SiS_Pr->SiS_VT = NTSCVT;
        }
d2296 4
a2299 1
     } else {
d2301 2
a2302 11
        SiS_Pr->SiS_RY1COE = (TVPtr+ResIndex)->RY1COE;
        SiS_Pr->SiS_RY2COE = (TVPtr+ResIndex)->RY2COE;
        SiS_Pr->SiS_RY3COE = (TVPtr+ResIndex)->RY3COE;
        SiS_Pr->SiS_RY4COE = (TVPtr+ResIndex)->RY4COE;

        if(modeflag & HalfDCLK) {
           SiS_Pr->SiS_RY1COE = 0x00;
           SiS_Pr->SiS_RY2COE = 0xf4;
           SiS_Pr->SiS_RY3COE = 0x10;
           SiS_Pr->SiS_RY4COE = 0x38;
        }
d2304 19
a2322 8
        if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
           SiS_Pr->SiS_HT = NTSCHT;
	   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) SiS_Pr->SiS_HT = NTSC2HT;
           SiS_Pr->SiS_VT = NTSCVT;
        } else {
           SiS_Pr->SiS_HT = PALHT;
           SiS_Pr->SiS_VT = PALVT;
        }
d2324 14
a2337 1
     }
d2339 18
a2356 1
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
d2358 15
a2372 1
     if(SiS_Pr->UseCustomMode) {
d2374 6
a2379 8
        SiS_Pr->SiS_RVBHCMAX  = 1;
        SiS_Pr->SiS_RVBHCFACT = 1;
        SiS_Pr->SiS_VGAHT     = SiS_Pr->CHTotal;
        SiS_Pr->SiS_VGAVT     = SiS_Pr->CVTotal;
        SiS_Pr->SiS_HT        = SiS_Pr->CHTotal;
        SiS_Pr->SiS_VT        = SiS_Pr->CVTotal;
	SiS_Pr->SiS_HDE       = SiS_Pr->SiS_VGAHDE;
        SiS_Pr->SiS_VDE       = SiS_Pr->SiS_VGAVDE;
d2381 15
a2395 1
     } else {
d2397 4
a2400 2
        SiS_GetCRT2Ptr(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                      &CRT2Index,&ResIndex,HwInfo);
d2402 2
a2403 27
        switch(CRT2Index) {
         case  0: LCDPtr = SiS_Pr->SiS_ExtLCD1024x768Data;        break; /* VESA Timing */
         case  1: LCDPtr = SiS_Pr->SiS_ExtLCD1280x1024Data;       break; /* VESA Timing */
         case  5: LCDPtr = SiS_Pr->SiS_StLCD1024x768Data;         break; /* Obviously unused */
         case  6: LCDPtr = SiS_Pr->SiS_StLCD1280x1024Data;        break; /* Obviously unused */
         case 10: LCDPtr = SiS_Pr->SiS_St2LCD1024x768Data;        break; /* Non-VESA Timing */
         case 11: LCDPtr = SiS_Pr->SiS_St2LCD1280x1024Data;       break; /* Non-VESA Timing */
         case 13: LCDPtr = SiS_Pr->SiS_NoScaleData1024x768;       break; /* Non-expanding */
         case 14: LCDPtr = SiS_Pr->SiS_NoScaleData1280x1024;      break; /* Non-expanding */
         case 15: LCDPtr = SiS_Pr->SiS_LCD1280x960Data;           break; /* 1280x960 */
         case 20: LCDPtr = SiS_Pr->SiS_ExtLCD1400x1050Data;       break; /* VESA Timing */
         case 21: LCDPtr = SiS_Pr->SiS_NoScaleData1400x1050;      break; /* Non-expanding (let panel scale) */
         case 22: LCDPtr = SiS_Pr->SiS_StLCD1400x1050Data;        break; /* Non-VESA Timing (let panel scale) */
         case 23: LCDPtr = SiS_Pr->SiS_ExtLCD1600x1200Data;       break; /* VESA Timing */
         case 24: LCDPtr = SiS_Pr->SiS_NoScaleData1600x1200;      break; /* Non-expanding */
         case 25: LCDPtr = SiS_Pr->SiS_StLCD1600x1200Data;        break; /* Non-VESA Timing */
         case 26: LCDPtr = SiS_Pr->SiS_ExtLCD1280x768Data;        break; /* VESA Timing */
         case 27: LCDPtr = SiS_Pr->SiS_NoScaleData1280x768;       break; /* Non-expanding */
         case 28: LCDPtr = SiS_Pr->SiS_StLCD1280x768Data;         break; /* Non-VESA Timing */
         case 29: LCDPtr = SiS_Pr->SiS_NoScaleData;	          break; /* Generic no-scale data */
#ifdef SIS315H
	 case 50: LCDPtr = (SiS_LCDDataStruct *)SiS310_ExtCompaq1280x1024Data;	break;
	 case 51: LCDPtr = SiS_Pr->SiS_NoScaleData1280x1024;			break;
	 case 52: LCDPtr = SiS_Pr->SiS_St2LCD1280x1024Data;	  		break;
#endif
         default: LCDPtr = SiS_Pr->SiS_ExtLCD1024x768Data;	  break;
        }
d2405 24
a2428 68
        SiS_Pr->SiS_RVBHCMAX  = (LCDPtr+ResIndex)->RVBHCMAX;
        SiS_Pr->SiS_RVBHCFACT = (LCDPtr+ResIndex)->RVBHCFACT;
        SiS_Pr->SiS_VGAHT     = (LCDPtr+ResIndex)->VGAHT;
        SiS_Pr->SiS_VGAVT     = (LCDPtr+ResIndex)->VGAVT;
        SiS_Pr->SiS_HT        = (LCDPtr+ResIndex)->LCDHT;
        SiS_Pr->SiS_VT        = (LCDPtr+ResIndex)->LCDVT;

#ifdef TWDEBUG
        xf86DrvMsg(0, X_INFO,
    	    "GetCRT2Data: Index %d ResIndex %d\n", CRT2Index, ResIndex);
#endif

	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
           tempax = 1024;
           if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
              if(HwInfo->jChipType < SIS_315H) {
                 if     (SiS_Pr->SiS_VGAVDE == 350) tempbx = 560;
                 else if(SiS_Pr->SiS_VGAVDE == 400) tempbx = 640;
                 else                               tempbx = 768;
              } else {
                 tempbx = 768;
              }
           } else {
              if     (SiS_Pr->SiS_VGAVDE == 357) tempbx = 527;
              else if(SiS_Pr->SiS_VGAVDE == 420) tempbx = 620;
              else if(SiS_Pr->SiS_VGAVDE == 525) tempbx = 775;
              else if(SiS_Pr->SiS_VGAVDE == 600) tempbx = 775;
              else if(SiS_Pr->SiS_VGAVDE == 350) tempbx = 560;
              else if(SiS_Pr->SiS_VGAVDE == 400) tempbx = 640;
              else                               tempbx = 768;
           }
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
           tempax = 1280;
           if     (SiS_Pr->SiS_VGAVDE == 360) tempbx = 768;
           else if(SiS_Pr->SiS_VGAVDE == 375) tempbx = 800;
           else if(SiS_Pr->SiS_VGAVDE == 405) tempbx = 864;
           else                               tempbx = 1024;
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960) {
           tempax = 1280;
           if     (SiS_Pr->SiS_VGAVDE == 350)  tempbx = 700;
           else if(SiS_Pr->SiS_VGAVDE == 400)  tempbx = 800;
           else if(SiS_Pr->SiS_VGAVDE == 1024) tempbx = 960;
           else                                tempbx = 960;
	} else if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) &&
	          (HwInfo->jChipType >= SIS_661)) {
	   tempax = 1400;
	   tempbx = 1050;
	   if(SiS_Pr->SiS_VGAVDE == 1024) {
	      tempax = 1280;
	      tempbx = 1024;
	   }
        } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
           tempax = 1600;
	   tempbx = 1200;
	   if((HwInfo->jChipType < SIS_661) || (!(SiS_Pr->SiS_SetFlag & LCDVESATiming))) {
              if     (SiS_Pr->SiS_VGAVDE == 350)  tempbx = 875;
              else if(SiS_Pr->SiS_VGAVDE == 400)  tempbx = 1000;
           }
        } else {
	   tempax = SiS_Pr->PanelXRes;
           tempbx = SiS_Pr->PanelYRes;
	}
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
           tempax = SiS_Pr->SiS_VGAHDE;
           tempbx = SiS_Pr->SiS_VGAVDE;
        }
        SiS_Pr->SiS_HDE = tempax;
        SiS_Pr->SiS_VDE = tempbx;
d2430 1
d2432 2
a2433 1
}
d2435 1
a2435 4
static void
SiS_GetCRT2Data(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
d2437 1
a2437 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
d2439 1
a2439 1
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
d2441 8
a2448 1
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
d2450 1
a2450 1
           SiS_GetCRT2DataLVDS(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d2452 1
a2452 1
        } else {
d2454 1
a2454 1
	   if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
d2456 5
a2460 2
	      /* Need LVDS Data for LCD on 301B-DH */
	      SiS_GetCRT2DataLVDS(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d2462 9
a2470 1
	   } else {
d2472 1
a2472 1
	      SiS_GetCRT2Data301(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d2474 2
a2475 1
           }
d2477 2
a2478 1
        }
d2480 2
a2481 1
     } else {
d2483 3
a2485 1
     	SiS_GetCRT2Data301(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d2487 3
a2489 1
     }
d2491 1
a2491 1
  } else {
d2493 1
a2493 1
     SiS_GetCRT2DataLVDS(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d2495 2
a2496 2
  }
}
d2498 3
a2500 18
/*********************************************/
/*            GET LVDS DES DATA              */
/*********************************************/

static void
SiS_GetLVDSDesPtr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                  USHORT RefreshRateTableIndex, USHORT *PanelIndex,
		  USHORT *ResIndex, PSIS_HW_INFO HwInfo)
{
  USHORT tempbx,tempal,modeflag;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }
d2502 1
a2502 25
  tempbx = 0;
  if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        tempbx = 50;
        if((SiS_Pr->SiS_TVMode & TVSetPAL) && (!(SiS_Pr->SiS_TVMode & TVSetPALM))) tempbx += 2;
        if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
        /* Nothing special needed for SOverscan    */
        /*     PALM uses NTSC data, PALN uses PAL data */
     }
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     tempbx = SiS_Pr->SiS_LCDTypeInfo;
     if(HwInfo->jChipType >= SIS_661) {
        /* As long as we don's use the BIOS tables, we
	 * need to convert the TypeInfo as for 315 series
	 */
        tempbx = SiS_Pr->SiS_LCDResInfo - 1;
     }
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 16;
     if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
        tempbx = 32;
        if(modeflag & HalfDCLK) tempbx++;
     }
  }
d2504 3
a2506 7
  if(SiS_Pr->SiS_SetFlag & SetDOSMode) {
     if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480)  {
        tempal = 0x07;
        if(HwInfo->jChipType < SIS_315H) {
           if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) tempal++;
        }
     }
d2509 1
a2509 2
  *PanelIndex = tempbx;
  *ResIndex = tempal & 0x1F;
d2512 2
a2513 5
#ifdef SIS315H
static void
SiS_GetLVDSDesPtrA(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex, USHORT *PanelIndex, USHORT *ResIndex,
		   PSIS_HW_INFO HwInfo)
d2515 1
a2515 1
  USHORT tempbx=0,tempal;
d2517 6
a2522 32
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)      tempbx = 2;
  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) tempbx = 3;
  else tempbx = SiS_Pr->SiS_LCDResInfo - 2;

  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx += 4;

  if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
	   tempbx = 80;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
	}
     }
  }
  if((SiS_Pr->SiS_CustomT == CUT_UNIWILL1024) ||
     (SiS_Pr->SiS_CustomT == CUT_UNIWILL10242)) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	tempbx = 82;
	if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
     }
  }
  if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
	tempbx = 84;
	if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
     }
  }
  if(SiS_Pr->SiS_CustomT == CUT_ASUSA2H_2) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	tempbx = 86;
	if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
     }
a2523 8

  if(ModeNo <= 0x13)
     tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  else
     tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;

  *PanelIndex = tempbx;
  *ResIndex = tempal & 0x1F;
d2527 5
a2531 3
static void
SiS_GetLVDSDesData(SiS_Private *SiS_Pr, USHORT ModeNo,USHORT ModeIdIndex,
                   USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
d2537 1
a2537 13
  if((SiS_Pr->UseCustomMode) ||
     (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) ||
     (SiS_Pr->SiS_CustomT == CUT_PANEL848)) {
     SiS_Pr->SiS_LCDHDES = 0;
     SiS_Pr->SiS_LCDVDES = 0;
     return;
  }

  if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {

#ifdef SIS315H
     SiS_GetLVDSDesPtrA(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                        &PanelIndex, &ResIndex, HwInfo);
d2539 2
a2550 8
	case 80: PanelDesPtr = (SiS_LVDSDesStruct *)Clevo1024x768Des_1;   break;  /*  custom  */
	case 81: PanelDesPtr = (SiS_LVDSDesStruct *)Clevo1024x768Des_2;   break;
	case 82: PanelDesPtr = (SiS_LVDSDesStruct *)Uniwill1024x768Des_1; break;
	case 83: PanelDesPtr = (SiS_LVDSDesStruct *)Uniwill1024x768Des_2; break;
	case 84: PanelDesPtr = (SiS_LVDSDesStruct *)Compaq1280x1024Des_1; break;
	case 85: PanelDesPtr = (SiS_LVDSDesStruct *)Compaq1280x1024Des_2; break;
	case 86: PanelDesPtr = (SiS_LVDSDesStruct *)Asus1024x768Des_1;    break;  /*  custom  */
	case 87: PanelDesPtr = (SiS_LVDSDesStruct *)Asus1024x768Des_2;    break;
a2552 1
#endif
d2556 2
a2557 2
     SiS_GetLVDSDesPtr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                       &PanelIndex, &ResIndex, HwInfo);
d2561 1
a2561 1
     	case  0: PanelDesPtr = SiS_Pr->SiS_PanelType00_1;   break;   /* ---  */
d2577 1
a2577 1
     	case 16: PanelDesPtr = SiS_Pr->SiS_PanelType00_2;   break;    /* --- */
d2593 4
a2596 6
	case 32: PanelDesPtr = SiS_Pr->SiS_PanelTypeNS_1;   break;    /* pass 1:1 */
	case 33: PanelDesPtr = SiS_Pr->SiS_PanelTypeNS_2;   break;
     	case 50: PanelDesPtr = SiS_Pr->SiS_CHTVUNTSCDesData;   break; /* TV */
     	case 51: PanelDesPtr = SiS_Pr->SiS_CHTVONTSCDesData;   break;
     	case 52: PanelDesPtr = SiS_Pr->SiS_CHTVUPALDesData;    break;
     	case 53: PanelDesPtr = SiS_Pr->SiS_CHTVOPALDesData;    break;
d2598 5
a2602 5
		 if(HwInfo->jChipType < SIS_315H)
		    PanelDesPtr = SiS_Pr->SiS_PanelType0e_1;
		 else
		    PanelDesPtr = SiS_Pr->SiS_PanelType01_1;
		 break;
d2608 32
a2639 31
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD){
     if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
        if(ModeNo <= 0x13) {
           modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
	   if(!(modeflag & HalfDCLK)) {
	      SiS_Pr->SiS_LCDHDES = 632;
	   }
        }
     } else {
        if(!(SiS_Pr->SiS_SetFlag & SetDOSMode)) {
           if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024) {
              if(SiS_Pr->SiS_LCDResInfo >= SiS_Pr->SiS_Panel1024x768) {
                 if(ModeNo <= 0x13) {
	            modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
	            if(HwInfo->jChipType < SIS_315H) {
	               if(!(modeflag & HalfDCLK)) SiS_Pr->SiS_LCDHDES = 320;
	            } else {
	               if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)
	                  SiS_Pr->SiS_LCDHDES = 480;
                       if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)
	                  SiS_Pr->SiS_LCDHDES = 804;
		       if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)
	                  SiS_Pr->SiS_LCDHDES = 704;
                       if(!(modeflag & HalfDCLK)) {
                          SiS_Pr->SiS_LCDHDES = 320;
	                  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)
	                     SiS_Pr->SiS_LCDHDES = 632;
		          else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)
	                     SiS_Pr->SiS_LCDHDES = 542;
                       }
                    }
d2642 2
a2643 1
           }
d2645 2
a2646 1
     }
d2648 1
d2651 1
a2651 20
/*********************************************/
/*          SET CRT2 AUTO-THRESHOLD          */
/*********************************************/

#ifdef SIS315H
static void
SiS_CRT2AutoThreshold(SiS_Private *SiS_Pr)
{
  SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x40);
}
#endif

/*********************************************/
/*           DISABLE VIDEO BRIDGE            */
/*********************************************/

/* NEVER use any variables (VBInfo), this will be called
 * from outside the context of modeswitch!
 * MUST call getVBType before calling this
 */
d2653 3
a2655 1
SiS_DisableBridge(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d2657 1
a2657 4
#ifdef SIS315H
  USHORT tempah,pushax=0,modenum;
#endif
  USHORT temp=0;
d2659 7
a2665 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
d2667 27
a2693 1
      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {   /* ===== For 30xB/LV ===== */
d2695 3
a2697 1
        if(HwInfo->jChipType < SIS_315H) {
d2699 6
a2704 1
#ifdef SIS300	   /* 300 series */
d2706 5
a2710 1
           if(HwInfo->jChipType == SIS_300) {  /* For 300+301LV (A907) */
d2712 1
a2712 19
	      if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	         if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	            SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFE);
		    SiS_PanelDelay(SiS_Pr, HwInfo, 3);
		 }
	      }
	      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,0x3f);
	      SiS_ShortDelay(SiS_Pr,1);
	      SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);
	      SiS_DisplayOff(SiS_Pr);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	      if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	         if( (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ||
	             (!(SiS_CR36BIOSWord23d(SiS_Pr, HwInfo))) ) {
	            SiS_PanelDelay(SiS_Pr, HwInfo, 2);
                    SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFD);
		 }
	      }
d2714 4
a2717 1
	   } else {
d2719 3
a2721 21
	      if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	         SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	         SiS_PanelDelay(SiS_Pr, HwInfo, 3);
	      }
	      if(SiS_Is301B(SiS_Pr)) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,0x3f);
	         SiS_ShortDelay(SiS_Pr,1);
	      }
	      SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);
	      SiS_DisplayOff(SiS_Pr);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	      SiS_UnLockCRT2(SiS_Pr,HwInfo);
	      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x80);
	      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40);
	      if( (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ||
	          (!(SiS_CR36BIOSWord23d(SiS_Pr, HwInfo))) ) {
	         SiS_PanelDelay(SiS_Pr, HwInfo, 2);
                 SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x04);
	      }
	   }
d2723 13
a2735 1
#endif  /* SIS300 */
d2737 13
a2749 1
        } else {
d2751 2
a2752 1
#ifdef SIS315H	   /* 315 series */
d2754 1
a2754 1
           if(IS_SIS550650740660) {		/* 550, 650, 740, 660 */
d2756 2
a2757 1
	      modenum = SiS_GetReg(SiS_Pr->SiS_P3d4,0x34) & 0x7f;
d2759 1
a2759 17
              if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {			/* LV */
#ifdef SET_EMI
	         if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
		    if(SiS_Pr->SiS_CustomT != CUT_CLEVO1400) {
	               SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
		    }
		 }
#endif
		 if( (modenum <= 0x13) ||
		     (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
		     (SiS_IsVAMode(SiS_Pr,HwInfo)) ) {
	     	    SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFE);
		    if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		       (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
		       SiS_PanelDelay(SiS_Pr, HwInfo, 3);
		    }
	         }
d2761 1
a2761 4
		 if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
		    (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
		    SiS_DDC2Delay(SiS_Pr,0xff00);
		    SiS_DDC2Delay(SiS_Pr,0xe000);
d2763 1
a2763 1
	            SiS_SetRegByte(SiS_Pr->SiS_P3c6,0x00);
d2765 1
a2765 1
                    pushax = SiS_GetReg(SiS_Pr->SiS_P3c4,0x06);
d2767 1
a2767 3
		    if(IS_SIS740) {
		       SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x06,0xE3);
		    }
d2769 13
a2781 1
	            SiS_PanelDelay(SiS_Pr, HwInfo, 3);
d2783 6
a2788 8
		    if(!(SiS_IsNotM650orLater(SiS_Pr, HwInfo))) {
	               tempah = 0xef;
	               if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	                  tempah = 0xf7;
                       }
	               SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x4c,tempah);
	            }
		 }
d2790 1
a2790 1
              } else if(SiS_Pr->SiS_VBType & VB_NoLCD) {			/* B-DH */
d2792 1
a2792 3
	         if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x4c,0xef);
	         }
d2794 1
a2794 1
	      }
d2796 1
a2796 4
	      if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
	         (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,0xef);
	      }
d2798 5
a2802 12
              if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	         (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		 (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
	         tempah = 0x3f;
	         if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	            tempah = 0x7f;
	            if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
		       tempah = 0xbf;
                    }
	         }
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,tempah);
	      }
d2804 8
a2811 2
              if((SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	         ((SiS_Pr->SiS_VBType & VB_SIS301LV302LV) && (modenum <= 0x13))) {
d2813 1
a2813 22
	         if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
		    (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		    (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
		    SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1E,0xDF);
		    SiS_DisplayOff(SiS_Pr);
		    SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
		 } else {
	            SiS_DisplayOff(SiS_Pr);
	            SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	            SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1E,0xDF);
		    if((SiS_Pr->SiS_VBType & VB_SIS301LV302LV) && (modenum <= 0x13)) {
		       SiS_DisplayOff(SiS_Pr);
	               SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	               SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	               SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	               temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
                       SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	               SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	               SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,temp);
		    }
		 }
d2815 1
a2815 1
	      } else {
d2817 1
a2817 13
	         if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
		    (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		    (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
		    if(!(SiS_IsDualEdge(SiS_Pr,HwInfo))) {
		       SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xdf);
		       SiS_DisplayOff(SiS_Pr);
		    }
		    SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
		 } else {
                    SiS_DisplayOff(SiS_Pr);
	            SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	            SiS_PanelDelay(SiS_Pr, HwInfo, 2);
		 }
d2819 1
a2819 5
		 SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	         temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
                 SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	         SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,temp);
d2821 5
a2825 1
	      }
d2827 1
a2827 3
	      if((SiS_Pr->SiS_VBType & VB_SIS301LV302LV) &&
	         (SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
		 (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
d2829 1
a2829 1
		 SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,~0x10);
d2831 10
a2840 8
	         tempah = 0x3f;
	         if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	            tempah = 0x7f;
	            if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
		       tempah = 0xbf;
                    }
	         }
	         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,tempah);
d2842 1
a2842 3
		 if(SiS_IsNotM650orLater(SiS_Pr,HwInfo)) {
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
		 }
d2844 1
a2844 8
	         if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
	            SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xdf);
	            if(!(SiS_CRT2IsLCD(SiS_Pr,HwInfo))) {
	               if(!(SiS_IsDualEdge(SiS_Pr,HwInfo))) {
		          SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFD);
                       }
                    }
	         }
d2846 1
a2846 1
	         SiS_SetReg(SiS_Pr->SiS_P3c4,0x06,pushax);
d2848 3
a2850 6
		 if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	            if( (SiS_IsVAMode(SiS_Pr, HwInfo)) ||
	                (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
		       SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 20);
		    }
	         }
d2852 1
a2852 1
  	      } else if(SiS_Pr->SiS_VBType & VB_NoLCD) {
d2854 1
a2854 1
	         /* NIL */
d2856 1
a2856 3
	      } else if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	                (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
			(SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
d2858 1
a2858 21
		 if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	            tempah = 0xef;
	            if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
		       if(modenum > 0x13) {
	                  tempah = 0xf7;
		       }
                    }
	            SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x4c,tempah);
		 }
		 if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		    (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
		    if((SiS_IsVAMode(SiS_Pr,HwInfo)) ||
		       (!(SiS_IsDualEdge(SiS_Pr,HwInfo)))) {
		       if((!(SiS_WeHaveBacklightCtrl(SiS_Pr, HwInfo))) ||
		          (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo)))) {
			  SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	     	          SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFD);
			  SiS_PanelDelay(SiS_Pr, HwInfo, 4);
	               }
		    }
		 }
d2860 3
a2862 26
	      }

	  } else {			/* 315, 330 - all bridge types */

	     if(SiS_Is301B(SiS_Pr)) {
	        tempah = 0x3f;
	        if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	           tempah = 0x7f;
	           if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
		      tempah = 0xbf;
                   }
	        }
	        SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1F,tempah);
	        if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	           SiS_DisplayOff(SiS_Pr);
		   SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
	        }
	     }
	     if( (!(SiS_Is301B(SiS_Pr))) ||
	         (!(SiS_IsVAMode(SiS_Pr,HwInfo))) ) {

 	 	if( (!(SiS_Is301B(SiS_Pr))) ||
		    (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ) {

	           SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);
	           SiS_DisplayOff(SiS_Pr);
d2864 4
d2869 3
d2873 5
a2877 1
                SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
d2879 1
a2879 12
                SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);

	        temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
                SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,temp);

	     }

	  }    /* 315/330 */

#endif /* SIS315H */
d2881 29
d2912 3
a2914 16
      } else {     /* ============ For 301 ================ */

        if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
           if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	      SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	      SiS_PanelDelay(SiS_Pr, HwInfo, 3);
	   }
#endif
	}

        SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xDF);           /* disable VB */
        SiS_DisplayOff(SiS_Pr);

        if(HwInfo->jChipType >= SIS_315H) {
           SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
d2917 1
a2917 1
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);                /* disable lock mode */
d2919 1
a2919 15
	if(HwInfo->jChipType >= SIS_315H) {
            temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
            SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x10);
	    SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
	    SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,temp);
	} else {
#ifdef SIS300
            SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);            /* disable CRT2 */
	    if( (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ||
	        (!(SiS_CR36BIOSWord23d(SiS_Pr,HwInfo))) ) {
		SiS_PanelDelay(SiS_Pr, HwInfo, 2);
		SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x04);
	    }
#endif
	}
d2921 1
a2921 1
      }
d2923 2
a2924 1
  } else {     /* ============ For LVDS =============*/
d2926 9
a2934 1
    if(HwInfo->jChipType < SIS_315H) {
d2936 3
a2938 5
#ifdef SIS300	/* 300 series */

	if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
	   SiS_SetCH700x(SiS_Pr,0x090E);
	}
d2940 2
a2941 3
	if(HwInfo->jChipType == SIS_730) {
	   if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x11) & 0x08)) {
	      SiS_WaitVBRetrace(SiS_Pr,HwInfo);
d2943 3
a2945 3
	   if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	      SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	      SiS_PanelDelay(SiS_Pr, HwInfo, 3);
d2947 3
a2950 13
	   if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x11) & 0x08)) {
	      if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x40)) {
  	         if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
                    SiS_WaitVBRetrace(SiS_Pr,HwInfo);
		    if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x06) & 0x1c)) {
		       SiS_DisplayOff(SiS_Pr);
	            }
	            SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	            SiS_PanelDelay(SiS_Pr, HwInfo, 3);
                 }
              }
	   }
	}
d2952 6
a2957 1
	SiS_DisplayOff(SiS_Pr);
d2959 1
a2959 1
	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
d2961 1
a2961 4
	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	SiS_UnLockCRT2(SiS_Pr,HwInfo);
	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x80);
	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40);
a2962 4
	if( (!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ||
	    (!(SiS_CR36BIOSWord23d(SiS_Pr,HwInfo))) ) {
	   SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	   SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x04);
d2965 3
a2967 1
#endif  /* SIS300 */
d2969 1
a2969 1
    } else {
d2971 1
a2971 1
#ifdef SIS315H	/* 315 series */
d2973 1
a2973 1
	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
d2975 9
a2983 6
	   if(HwInfo->jChipType == SIS_740) {
	      temp = SiS_GetCH701x(SiS_Pr,0x61);
	      if(temp < 1) {
	         SiS_SetCH701x(SiS_Pr,0xac76);
	         SiS_SetCH701x(SiS_Pr,0x0066);
	      }
d2985 18
a3002 5
	      if( (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	          (SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwInfo)) ) {
	  	 SiS_SetCH701x(SiS_Pr,0x3e49);
	      }
	   }
d3004 13
a3016 5
	   if( (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	       (SiS_IsVAMode(SiS_Pr,HwInfo)) ) {
	      SiS_Chrontel701xBLOff(SiS_Pr);
	      SiS_Chrontel701xOff(SiS_Pr,HwInfo);
	   }
d3018 8
a3025 6
	   if(HwInfo->jChipType != SIS_740) {
	      if( (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	          (SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwInfo)) ) {
	   	 SiS_SetCH701x(SiS_Pr,0x0149);
  	      } 
	   }
d3027 1
a3027 1
	}
d3029 1
a3029 4
	if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	   SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x08);
	   SiS_PanelDelay(SiS_Pr, HwInfo, 3);
	}
d3031 1
a3031 5
	if( (SiS_Pr->SiS_IF_DEF_CH70xx == 0)   ||
	    (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	    (!(SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwInfo))) ) {
	   SiS_DisplayOff(SiS_Pr);
	}
d3033 7
a3039 5
	if( (SiS_Pr->SiS_IF_DEF_CH70xx == 0)   ||
	    (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	    (!(SiS_IsVAMode(SiS_Pr,HwInfo))) ) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x00,0x80);
	}
d3041 1
a3041 3
	if(HwInfo->jChipType == SIS_740) {
	   SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
	}
d3043 1
a3043 1
	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x32,0xDF);
d3045 2
a3046 5
	if( (SiS_Pr->SiS_IF_DEF_CH70xx == 0)   ||
	    (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
	    (!(SiS_IsVAMode(SiS_Pr,HwInfo))) ) {
	   SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1E,0xDF);
	}
d3048 1
a3048 17
	if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	   if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xdf);
	      if(HwInfo->jChipType == SIS_550) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xbf);
	         SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xef);
	      }
	   }
	} else {
	   if(HwInfo->jChipType == SIS_740) {
	      if(SiS_IsLCDOrLCDA(SiS_Pr,HwInfo)) {
	         SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xdf);
	      }
	   } else if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x1e,0xdf);
	   }
	}
d3050 8
a3057 7
	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	   if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	      /* SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xff); */
	   } else {
	      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	   }
	}
d3059 2
a3060 1
	SiS_UnLockCRT2(SiS_Pr,HwInfo);
d3062 1
a3062 17
	if(HwInfo->jChipType == SIS_550) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x80); /* DirectDVD PAL?*/
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40); /* VB clock / 4 ? */
	} else if( (SiS_Pr->SiS_IF_DEF_CH70xx == 0)   ||
	           (!(SiS_IsDualEdge(SiS_Pr,HwInfo))) ||
		   (!(SiS_IsVAMode(SiS_Pr,HwInfo))) ) {
	   SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0xf7);
	}

        if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	   if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	      if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	 	 SiS_PanelDelay(SiS_Pr, HwInfo, 2);
		 SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x04);
	      }
	   }
        }
d3064 1
a3064 1
#endif  /* SIS315H */
d3066 2
a3067 1
    }  /* 315 series */
d3069 1
a3069 1
  }  /* LVDS */
a3072 8
/*********************************************/
/*            ENABLE VIDEO BRIDGE            */
/*********************************************/

/* NEVER use any variables (VBInfo), this will be called
 * from outside the context of a mode switch!
 * MUST call getVBType before calling this
 */
d3074 3
a3076 1
SiS_EnableBridge(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d3078 1
a3078 5
  USHORT temp=0,tempah;
#ifdef SIS315H
  USHORT temp1,pushax=0;
  BOOLEAN delaylong = FALSE;
#endif
d3080 1
d3082 1
a3082 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
d3084 3
a3086 1
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {   /* ====== For 301B et al  ====== */
d3088 10
a3097 1
      if(HwInfo->jChipType < SIS_315H) {
d3099 1
a3099 1
#ifdef SIS300     /* 300 series */
d3101 3
a3103 1
         if(HwInfo->jChipType == SIS_300) {
d3105 1
a3105 28
	    if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	       if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	          SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
	          if(!(SiS_CR36BIOSWord23d(SiS_Pr, HwInfo))) {
	             SiS_PanelDelay(SiS_Pr, HwInfo, 0);
	          }
	       }
	    }
	    temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;             /* lock mode */
            if(SiS_BridgeInSlave(SiS_Pr)) {
               tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
               if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
            }
            SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
	    SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1F,0x20);        /* enable VB processor */
	    SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,0xC0);
	    SiS_DisplayOn(SiS_Pr);
	    if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	       if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	          if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x10)) {
		     if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
		        SiS_PanelDelay(SiS_Pr, HwInfo, 1);
                     }
		     SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
	 	  }
	       }
	    }
d3107 1
a3107 1
	 } else {
d3109 3
a3111 37
	    if((SiS_Pr->SiS_VBType & VB_NoLCD) &&
	       (SiS_CRT2IsLCD(SiS_Pr, HwInfo))) {
	       /* This is only for LCD output on 301B-DH via LVDS */
	       SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x00);
	       if(!(SiS_CR36BIOSWord23d(SiS_Pr,HwInfo))) {
	          SiS_PanelDelay(SiS_Pr, HwInfo, 0);
	       }
	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);   /* Enable CRT2 */
               SiS_DisplayOn(SiS_Pr);
	       SiS_UnLockCRT2(SiS_Pr,HwInfo);
	       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x02,0xBF);
	       if(SiS_BridgeInSlave(SiS_Pr)) {
      		  SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x01,0x1F);
      	       } else {
      		  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x01,0x1F,0x40);
               }
	       if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x40)) {
	           if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x10)) {
		       if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
		           SiS_PanelDelay(SiS_Pr, HwInfo, 1);
                       }
		       SiS_WaitVBRetrace(SiS_Pr,HwInfo);
                       SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x00);
                   }
	       }
            } else {
	       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;             /* lock mode */
               if(SiS_BridgeInSlave(SiS_Pr)) {
                  tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
                  if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
               }
               SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
	       SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1F,0x20);        /* enable VB processor */
	       SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,0xC0);
	       SiS_DisplayOn(SiS_Pr);
	    }
d3113 6
a3118 2
         }
#endif /* SIS300 */
d3120 8
a3127 1
      } else {
d3129 1
a3129 1
#ifdef SIS315H    /* 315 series */
d3131 1
a3131 1
	 if(IS_SIS550650740660) {		/* 550, 650, 740, 660 */
d3133 6
a3138 1
	    UCHAR r30=0, r31=0, r32=0, r33=0, cr36=0;
d3140 2
a3141 1
	    if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
d3143 13
a3155 9
	       if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
	          (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
	          SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x1f,0xef);
#ifdef SET_EMI
		  if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	             SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
		  }
#endif
	       }
d3157 1
a3157 8
               if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	          tempah = 0x10;
		  if(SiS_LCDAEnabled(SiS_Pr, HwInfo)) {
		     if(SiS_TVEnabled(SiS_Pr, HwInfo)) tempah = 0x18;
		     else 			       tempah = 0x08;
		  }
		  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x4c,tempah);
	       }
d3159 18
a3176 9
	       if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
	          (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
	          SiS_SetRegByte(SiS_Pr->SiS_P3c6,0x00);
	          SiS_DisplayOff(SiS_Pr);
	          pushax = SiS_GetReg(SiS_Pr->SiS_P3c4,0x06);
	          if(IS_SIS740) {
	             SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x06,0xE3);
	          }
	       }
d3178 30
a3207 17
	       if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	           (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
                  if(!(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x26) & 0x02)) {
		     if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
		        (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
		        SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 2);
			SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
			if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
			   SiS_GenericDelay(SiS_Pr, 0x4500);
			}
	                SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 2);
		     } else {
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
			SiS_PanelDelay(SiS_Pr, HwInfo, 0);
		     }
	          }
	       }
d3209 4
a3212 7
               if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
	          (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
	          if(!(SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) & 0x40)) {
                     SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 10);
		     delaylong = TRUE;
		  }
	       }
d3214 1
a3214 1
	    } else if(SiS_Pr->SiS_VBType & VB_NoLCD) {
d3216 18
a3233 3
	       if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	          SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x4c,0x10);
	       }
d3235 1
a3235 1
  	    } else if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
d3237 31
a3267 9
	       if(!(SiS_IsNotM650orLater(SiS_Pr,HwInfo))) {
	          tempah = 0x10;
		  if(SiS_LCDAEnabled(SiS_Pr, HwInfo)) {
		     if(SiS_TVEnabled(SiS_Pr, HwInfo)) tempah = 0x18;
		     else 			       tempah = 0x08;
		  }
		  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x4c,tempah);
	       }
	       
d3269 36
d3306 1
a3306 9
	    if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
               temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;
	       if(SiS_BridgeInSlave(SiS_Pr)) {
                  tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
                  if(!(tempah & SetCRT2ToRAMDAC)) {
		     if(!(SiS_LCDAEnabled(SiS_Pr, HwInfo))) temp |= 0x20;
		  }
               }
               SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
d3308 1
a3308 16
	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);                   /* enable CRT2 */
	       
	       if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	          (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
		  (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
	          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
		  temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2e);
		  if(!(temp & 0x80)) {
		     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x80);
		  }
	       } else {
	          SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	       }
	    } else {
	       SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x20);
	    }
d3310 5
a3314 1
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1f,0x20);
d3316 1
a3316 8
	    if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	       (SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
	       (SiS_Pr->SiS_CustomT == CUT_CLEVO1400)) {
	       temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2e);
	       if(!(temp & 0x80)) {
		  SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x80);
	       }
	    }
d3318 1
a3318 8
	    tempah = 0xc0;
	    if(SiS_IsDualEdge(SiS_Pr, HwInfo)) {
	       tempah = 0x80;
	       if(!(SiS_IsVAMode(SiS_Pr, HwInfo))) {
	          tempah = 0x40;
               }
	    }
            SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,tempah);
d3320 2
a3321 6
	    if((SiS_Pr->SiS_VBType & VB_SIS301B302B) ||
	       (((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) ||
	         (SiS_Pr->SiS_CustomT == CUT_CLEVO1400))     &&
	        (!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))))) {
               SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
	    }
d3323 12
a3334 1
	    if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
d3336 11
a3346 9
	       if((SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) &&
	          (SiS_Pr->SiS_CustomT != CUT_CLEVO1400)) {
	          SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	       }
#ifdef COMPAQ_HACK
	       if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
	          SiS_PanelDelay(SiS_Pr, HwInfo, 2);
	       }
#endif
d3348 1
a3348 1
	       SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1f,0x10);
d3350 3
a3352 31
	       if(SiS_Pr->SiS_CustomT != CUT_CLEVO1400) {
#ifdef SET_EMI
	          if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	             SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
		  }
#endif
	          SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x27,0x0c);
#ifdef SET_EMI
	          if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {

		     cr36 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36);

		     /*                                              (P4_30|0x40)  */
		     /* Compal 1400x1050: 0x05, 0x60, 0x00                YES  (1.10.7w;  CR36=69)      */
		     /* Compal 1400x1050: 0x0d, 0x70, 0x40                YES  (1.10.7x;  CR36=69)      */
		     /* Acer   1280x1024: 0x12, 0xd0, 0x6b                NO   (1.10.9k;  CR36=73)      */
		     /* Compaq 1280x1024: 0x0d, 0x70, 0x6b                YES  (1.12.04b; CR36=03)      */
		     /* Clevo   1024x768: 0x05, 0x60, 0x33                NO   (1.10.8e;  CR36=12, DL!) */
		     /* Clevo   1024x768: 0x0d, 0x70, 0x40 (if type == 3) YES  (1.10.8y;  CR36=?2)      */
		     /* Clevo   1024x768: 0x05, 0x60, 0x33 (if type != 3) YES  (1.10.8y;  CR36=?2)      */
		     /* Asus    1024x768: ?                                ?   (1.10.8o;  CR36=?2)      */
		     /* Asus    1024x768: 0x08, 0x10, 0x3c (problematic)  YES  (1.10.8q;  CR36=22)      */

		     if(SiS_Pr->HaveEMI) {
		        r30 = SiS_Pr->EMI_30;
			r31 = SiS_Pr->EMI_31;
			r32 = SiS_Pr->EMI_32;
			r33 = SiS_Pr->EMI_33;
		     } else {
		        r30 = 0;
		     }
d3354 1
a3354 24
		     /* EMI_30 is read at driver start; however, the BIOS sets this
		      * (if it is used) only if the LCD is in use. In case we caught
		      * the machine while on TV output, this bit is not set and we
		      * don't know if it should be set - hence our detection is wrong.
		      * Work-around this here:
		      */

		     if((!SiS_Pr->HaveEMI) || (!SiS_Pr->HaveEMILCD)) {
		        if((cr36 & 0x0f) == 0x02) {			/* 1024x768 */
		           r30 |= 0x40;
			   if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
			      r30 &= ~0x40;
			   }
		        } else if((cr36 & 0x0f) == 0x03) {		/* 1280x1024 */
		           r30 |= 0x40;
			   if(SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) {
			      r30 &= ~0x40;
			   }
		        } else if((cr36 & 0x0f) == 0x09) {		/* 1400x1050 */
		           r30 |= 0x40;
		        } else if((cr36 & 0x0f) == 0x0b) {		/* 1600x1200 - unknown */
		           r30 |= 0x40;
		        }
                     }
d3356 12
a3367 23
		     if(!SiS_Pr->HaveEMI) {
		        if((cr36 & 0x0f) == 0x02) {
			   if((cr36 & 0xf0) == 0x30) {
			      r31 = 0x0d; r32 = 0x70; r33 = 0x40;
			   } else {
			      r31 = 0x05; r32 = 0x60; r33 = 0x33;
			   }
		        } else if((cr36 & 0x0f) == 0x03) {
			   if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
			      r31 = 0x0d; r32 = 0x70; r33 = 0x6b;
			   } else {
			      r31 = 0x12; r32 = 0xd0; r33 = 0x6b;
			   }
			} else if((cr36 & 0x0f) == 0x09) {
			   if(SiS_Pr->SiS_CustomT == CUT_COMPAL1400_2) {
			      r31 = 0x0d; r32 = 0x70; r33 = 0x40;  /* BIOS values */
			   } else {
			      r31 = 0x05; r32 = 0x60; r33 = 0x00;
			   }
			} else {
			   r31 = 0x05; r32 = 0x60; r33 = 0x00;
			}
		     }
d3369 1
a3369 56
		     /* BIOS values don't work so well sometimes */
		     if(!SiS_Pr->OverruleEMI) {
#ifdef COMPAL_HACK
		        if(SiS_Pr->SiS_CustomT == CUT_COMPAL1400_2) {
		           if((cr36 & 0x0f) == 0x09) {
			      r30 = 0x60; r31 = 0x05; r32 = 0x60; r33 = 0x00;
			   }
 		        }
#endif
#ifdef COMPAQ_HACK
		        if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
		           if((cr36 & 0x0f) == 0x03) {
			      r30 = 0x20; r31 = 0x12; r32 = 0xd0; r33 = 0x6b;     /* rev 1 */
			   }
			}
#endif
#ifdef ASUS_HACK
		        if(SiS_Pr->SiS_CustomT == CUT_ASUSA2H_2) {
		           if((cr36 & 0x0f) == 0x02) {
			      /* r30 = 0x60; r31 = 0x05; r32 = 0x60; r33 = 0x33;  */   /* rev 2 */
			      /* r30 = 0x20; r31 = 0x05; r32 = 0x60; r33 = 0x33;  */   /* rev 3 */
			      /* r30 = 0x60; r31 = 0x0d; r32 = 0x70; r33 = 0x40;  */   /* rev 4 */
			      /* r30 = 0x20; r31 = 0x0d; r32 = 0x70; r33 = 0x40;  */   /* rev 5 */
			   }
			}
#endif
 		     }
		     if(!(SiS_Pr->OverruleEMI && (!r30) && (!r31) && (!r32) && (!r33))) {
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x30,0x20);
		     }
		     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x31,r31);
		     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x32,r32);
		     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x33,r33);
		     if(!(SiS_Pr->OverruleEMI && (!r30) && (!r31) && (!r32) && (!r33))) {
		        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x10);
		     } else {
		        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x00);
		     }
		     if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	                 (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
	                if(r30 & 0x40) {
		           SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 5);
			   if(delaylong) {
			      SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 5);
			      delaylong = FALSE;
			   }
			   SiS_WaitVBRetrace(SiS_Pr,HwInfo);
			   if(SiS_Pr->SiS_CustomT == CUT_ASUSA2H_2) {
			      SiS_GenericDelay(SiS_Pr, 0x500);
			   }
	                   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x30,0x40);
	                }
		     }
		  }
#endif
	       }
d3371 22
a3392 1
	       if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
d3394 1
a3394 10
	          if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	              (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
		     SiS_DisplayOn(SiS_Pr);
		     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
		     SiS_WaitVBRetrace(SiS_Pr, HwInfo);
		     SiS_PanelDelay(SiS_Pr, HwInfo, 3);
		     if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
	  	     }
		  }
d3396 2
a3397 1
	       } else if(SiS_Pr->SiS_CustomT == CUT_CLEVO1400) {
d3399 2
a3400 9
	          if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	             if( (SiS_IsVAMode(SiS_Pr, HwInfo)) ||
	                 (SiS_CRT2IsLCD(SiS_Pr, HwInfo)) ) {
		        SiS_DisplayOn(SiS_Pr);
		        SiS_PanelDelay(SiS_Pr, HwInfo, 1);
		        SiS_WaitVBRetrace(SiS_Pr,HwInfo);
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
		     }
		  }
d3402 1
a3402 1
	       } else {
d3404 2
a3405 15
	          SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2e,0x80);
	          if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	             if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	                 ((SiS_CRT2IsLCD(SiS_Pr, HwInfo))) ) {
		        SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 10);
		        if(delaylong) {
			   SiS_PanelDelayLoop(SiS_Pr, HwInfo, 3, 10);
		        }
                        SiS_WaitVBRetrace(SiS_Pr,HwInfo);
			if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
			   SiS_GenericDelay(SiS_Pr, 0x500);
			}
		        SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
	             }
	          }
d3407 18
a3424 7
	          SiS_SetReg(SiS_Pr->SiS_P3c4,0x06,pushax);
	          SiS_DisplayOn(SiS_Pr);
	          SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xff);

	          if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	             SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
	          }
d3426 48
a3473 1
	       }
d3475 4
a3478 1
	    }
d3480 4
a3483 1
	 } else {			/* 315, 330 */
d3485 2
a3486 7
	    if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
	       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;
	       if(SiS_BridgeInSlave(SiS_Pr)) {
                  tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
                  if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
               }
               SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
d3488 6
a3493 1
	       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);                   /* enable CRT2 */
d3495 1
a3495 4
	       temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2E);
               if(!(temp & 0x80))
                  SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);
            }
d3497 8
a3504 1
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1f,0x20);
d3506 10
a3515 1
	    if(SiS_Is301B(SiS_Pr)) {
d3517 9
a3525 12
	       temp=SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2E);
               if(!(temp & 0x80))
                  SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);

	       tempah = 0xc0;
	       if(SiS_IsDualEdge(SiS_Pr,HwInfo)) {
	          tempah = 0x80;
	          if(!(SiS_IsVAMode(SiS_Pr,HwInfo))) {
	             tempah = 0x40;
                  }
	       }
               SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x1F,tempah);
d3527 48
a3574 1
	       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
d3576 9
a3584 1
	    } else {
d3586 1
a3586 4
	       SiS_VBLongWait(SiS_Pr);
               SiS_DisplayOn(SiS_Pr);
	       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7F);
               SiS_VBLongWait(SiS_Pr);
d3588 1
a3588 1
	    }
d3590 22
a3611 1
	 }   /* 315, 330 */
d3613 40
a3652 1
#endif /* SIS315H */
d3654 5
a3658 1
      }
d3660 26
a3685 1
    } else {	/* ============  For 301 ================ */
d3687 30
a3716 6
       if(HwInfo->jChipType < SIS_315H) {
          if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
             SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x00);
	     SiS_PanelDelay(SiS_Pr, HwInfo, 0);
	  }
       }
d3718 6
a3723 6
       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x32) & 0xDF;          /* lock mode */
       if(SiS_BridgeInSlave(SiS_Pr)) {
          tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
          if(!(tempah & SetCRT2ToRAMDAC))  temp |= 0x20;
       }
       SiS_SetReg(SiS_Pr->SiS_P3c4,0x32,temp);
d3725 6
a3730 1
       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);                  /* enable CRT2 */
d3732 7
a3738 6
       if(HwInfo->jChipType >= SIS_315H) {
          temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2E);
          if(!(temp & 0x80)) {
             SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);         /* BVBDOENABLE=1 */
	  }
       }
d3740 1
a3740 1
       SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x00,0x1F,0x20);     /* enable VB processor */
d3742 12
a3753 6
       SiS_VBLongWait(SiS_Pr);
       SiS_DisplayOn(SiS_Pr);
       if(HwInfo->jChipType >= SIS_315H) {
          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
       }
       SiS_VBLongWait(SiS_Pr);
d3755 4
a3758 6
       if(HwInfo->jChipType < SIS_315H) {
          if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
             SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x00);
	  }
       }
d3760 6
a3765 1
    }
d3767 1
a3767 1
  } else {   /* =================== For LVDS ================== */
d3769 9
a3777 1
    if(HwInfo->jChipType < SIS_315H) {
d3779 1
a3779 1
#ifdef SIS300    /* 300 series */
d3781 4
a3784 11
       if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
          if(HwInfo->jChipType == SIS_730) {
	     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
	     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
	     SiS_PanelDelay(SiS_Pr, HwInfo, 1);
	  }
          SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x00);
	  if(!(SiS_CR36BIOSWord23d(SiS_Pr,HwInfo))) {
	     SiS_PanelDelay(SiS_Pr, HwInfo, 0);
	  }
       }
d3786 3
a3788 9
       SiS_EnableCRT2(SiS_Pr);
       SiS_DisplayOn(SiS_Pr);
       SiS_UnLockCRT2(SiS_Pr,HwInfo);
       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x02,0xBF);
       if(SiS_BridgeInSlave(SiS_Pr)) {
      	  SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x01,0x1F);
       } else {
      	  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x01,0x1F,0x40);
       }
d3790 7
a3796 6
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
          if(!(SiS_CRT2IsLCD(SiS_Pr, HwInfo))) {
	     SiS_WaitVBRetrace(SiS_Pr, HwInfo);
	     SiS_SetCH700x(SiS_Pr,0x0B0E);
          }
       }
d3798 4
a3801 12
       if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
          if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x40)) {
             if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x10)) {
	        if(!(SiS_CR36BIOSWord23b(SiS_Pr,HwInfo))) {
	 	   SiS_PanelDelay(SiS_Pr, HwInfo, 1);
        	   SiS_PanelDelay(SiS_Pr, HwInfo, 1);
	        }
	        SiS_WaitVBRetrace(SiS_Pr, HwInfo);
                SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x00);
             }
	  }
       }
d3803 1
a3803 1
#endif  /* SIS300 */
d3805 2
a3806 1
    } else {
d3808 3
a3810 1
#ifdef SIS315H    /* 315 series */
d3812 11
a3822 6
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
	  if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	     SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFB,0x00);
	     SiS_PanelDelay(SiS_Pr, HwInfo, 0);
          }
       }
d3824 6
a3829 2
       SiS_EnableCRT2(SiS_Pr);
       SiS_UnLockCRT2(SiS_Pr,HwInfo);
d3831 5
a3835 1
       SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0xf7);
d3837 1
a3837 5
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
          temp = SiS_GetCH701x(SiS_Pr,0x66);
	  temp &= 0x20;
	  SiS_Chrontel701xBLOff(SiS_Pr);
       }
d3839 10
a3848 3
       if(HwInfo->jChipType != SIS_550) {
          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2e,0x7f);
       }
d3850 1
a3850 7
       if(HwInfo->jChipType == SIS_740) {
          if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
             if(SiS_IsLCDOrLCDA(SiS_Pr, HwInfo)) {
	   	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x20);
	     }
	  }
       }
d3852 13
a3864 4
       temp1 = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2E);
       if(!(temp1 & 0x80)) {
          SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2E,0x80);
       }
d3866 16
a3881 5
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
          if(temp) {
	     SiS_Chrontel701xBLOn(SiS_Pr, HwInfo);
	  }
       }
d3883 2
a3884 13
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
          if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
	     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x20);
	     if(HwInfo->jChipType == SIS_550) {
		SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x40);
		SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x10);
	     }
	  }
       } else if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
          if(HwInfo->jChipType != SIS_740) {
             SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x20);
	  }
       }
d3886 10
a3895 3
       if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
          SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x00,0x7f);
       }
d3897 9
a3905 9
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
       	  if(SiS_IsTVOrYPbPrOrScart(SiS_Pr,HwInfo)) {
             SiS_Chrontel701xOn(SiS_Pr,HwInfo);
          }
          if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	      (SiS_IsLCDOrLCDA(SiS_Pr,HwInfo)) ) {
             SiS_ChrontelDoSomething1(SiS_Pr,HwInfo);
          }
       }
d3907 8
a3914 16
       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
       	  if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
 	     if( (SiS_IsVAMode(SiS_Pr,HwInfo)) ||
	         (SiS_IsLCDOrLCDA(SiS_Pr,HwInfo)) ) {
	     	SiS_Chrontel701xBLOn(SiS_Pr, HwInfo);
	     	SiS_ChrontelInitTVVSync(SiS_Pr,HwInfo);
             }
       	  }
       } else if(SiS_Pr->SiS_IF_DEF_CH70xx == 0) {
       	  if(!(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo))) {
	     if(SiS_CRT2IsLCD(SiS_Pr, HwInfo)) {
		SiS_PanelDelay(SiS_Pr, HwInfo, 1);
		SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xF7,0x00);
	     }
	  }
       }
d3916 1
a3916 1
#endif  /* SIS315H */
d3918 11
a3928 3
    } /* 310 series */

  }  /* LVDS */
d3930 1
d3933 4
a3936 9
/*********************************************/
/*         SET PART 1 REGISTER GROUP         */
/*********************************************/

/********** Set CRT2 OFFSET / PITCH **********/
static void
SiS_SetCRT2Offset(SiS_Private *SiS_Pr,USHORT ModeNo,
                  USHORT ModeIdIndex ,USHORT RefreshRateTableIndex,
	          PSIS_HW_INFO HwInfo)
d3938 2
a3939 2
  USHORT offset;
  UCHAR temp;
d3941 4
a3944 1
  if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) return;
d3946 2
a3947 2
  offset = SiS_GetOffset(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                         HwInfo);
d3949 176
a4124 2
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
     SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) offset >>= 1;
d4126 46
a4171 7
  temp = (UCHAR)(offset & 0xFF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x07,temp);
  temp = (UCHAR)(offset >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x09,temp);
  temp = (UCHAR)(((offset >> 3) & 0xFF) + 1);
  if(offset % 8) temp++;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x03,temp);
d4174 3
a4176 4
/************* Set CRT2 Sync *************/
static void
SiS_SetCRT2Sync(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT RefreshRateTableIndex,
                PSIS_HW_INFO HwInfo)
d4178 8
a4185 1
  USHORT tempah=0,tempbl,infoflag;
d4187 9
a4195 1
  tempbl = 0xC0;
d4198 1
a4198 1
     infoflag = SiS_Pr->CInfoFlag;
d4200 9
a4208 2
     infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
  }
d4210 1
a4210 1
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {					/* LVDS */
d4212 21
a4232 5
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        tempah = 0;
     } else if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (SiS_Pr->SiS_LCDInfo & LCDSync)) {
        tempah = SiS_Pr->SiS_LCDInfo;
     } else tempah = infoflag >> 8;
d4234 1
a4234 1
     tempah &= 0xC0;
d4236 41
a4276 2
     tempah |= 0x20;
     if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
d4278 1
a4278 6
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
           (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
	   tempah |= 0xc0;
        }
     }
d4280 20
a4299 10
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        if(HwInfo->jChipType >= SIS_315H) {
           tempah >>= 3;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xE7,tempah);
        } else {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,0xe0);
        }
     } else {
        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
     }
d4301 4
a4304 1
  } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
d4306 37
a4342 1
     if(HwInfo->jChipType < SIS_315H) {
d4344 5
a4348 1
#ifdef SIS300  /* ---- 300 series --- */
d4350 3
a4352 1
        if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {			/* 630 - 301B(-DH) */
d4354 14
a4367 7
	   tempah = infoflag >> 8;
           if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	      if(SiS_Pr->SiS_LCDInfo & LCDSync) {
	         tempah = SiS_Pr->SiS_LCDInfo;
              }
           }
           tempah &= 0xC0;
d4369 21
a4389 2
           tempah |= 0x20;
           if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
d4391 50
a4440 11
 	   tempah &= 0x3f;
  	   tempah |= tempbl;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);

        } else {							/* 630 - 301 */

           tempah = infoflag >> 8;
           tempah &= 0xC0;
           tempah |= 0x20;
	   if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
d4442 46
d4489 1
d4491 1
a4491 1
#endif /* SIS300 */
d4493 3
a4495 1
     } else {
d4497 10
a4506 1
#ifdef SIS315H  /* ------- 315 series ------ */
d4508 20
a4527 1
        if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {	  		/* 315 - 30xLV */
d4529 1
a4529 9
	   if(((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) &&
	       (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)) ||
	      ((SiS_Pr->SiS_CustomT == CUT_CLEVO1400)  &&
	       (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050))) {
	      tempah = infoflag >> 8;
	   } else {
              tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
	   }
	   tempah &= 0xC0;
d4531 1
a4531 15
           tempah |= 0x20;
           if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);

        } else {							/* 315 - 301, 301B */

           tempah = infoflag >> 8;
	   if(!SiS_Pr->UseCustomMode) {
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	         if(SiS_Pr->SiS_LCDInfo & LCDSync) {
	            tempah = SiS_Pr->SiS_LCDInfo;
	         }
	      }
	   }
	   tempah &= 0xC0;
d4533 5
a4537 2
           tempah |= 0x20;
           if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempah |= 0x10;
d4539 1
a4539 6
	   if(SiS_Pr->SiS_VBType & VB_NoLCD) {			/* TEST, imitate BIOS bug */
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	         tempah |= 0xc0;
	      }
	   }
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
d4541 19
a4559 3
        }
#endif  /* SIS315H */
      }
d4561 2
d4565 3
a4567 5
/******** Set CRT2 FIFO on 300/630/730 *******/
#ifdef SIS300
static void
SiS_SetCRT2FIFO_300(SiS_Private *SiS_Pr,USHORT ModeNo,
                    PSIS_HW_INFO HwInfo)
d4569 5
a4573 46
  UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
  USHORT temp,index;
  USHORT modeidindex,refreshratetableindex;
  USHORT VCLK=0,MCLK,colorth=0,data2=0;
  USHORT tempal, tempah, tempbx, tempcl, tempax;
  USHORT CRT1ModeNo,CRT2ModeNo;
  USHORT SelectRate_backup;
  ULONG  data,eax;
  const UCHAR  LatencyFactor[] = {
  	97, 88, 86, 79, 77, 00,       /*; 64  bit    BQ=2   */
        00, 87, 85, 78, 76, 54,       /*; 64  bit    BQ=1   */
        97, 88, 86, 79, 77, 00,       /*; 128 bit    BQ=2   */
        00, 79, 77, 70, 68, 48,       /*; 128 bit    BQ=1   */
        80, 72, 69, 63, 61, 00,       /*; 64  bit    BQ=2   */
        00, 70, 68, 61, 59, 37,       /*; 64  bit    BQ=1   */
        86, 77, 75, 68, 66, 00,       /*; 128 bit    BQ=2   */
        00, 68, 66, 59, 57, 37        /*; 128 bit    BQ=1   */
  };
  const UCHAR  LatencyFactor730[] = {
         69, 63, 61,
	 86, 79, 77,
	103, 96, 94,
	120,113,111,
	137,130,128,    /* <-- last entry, data below */
	137,130,128,	/* to avoid using illegal values */
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
  };
  const UCHAR ThLowB[]   = {
  	81, 4, 72, 6, 88, 8,120,12,
        55, 4, 54, 6, 66, 8, 90,12,
        42, 4, 45, 6, 55, 8, 75,12
  };
  const UCHAR ThTiming[] = {
  	1, 2, 2, 3, 0, 1, 1, 2
  };

  SelectRate_backup = SiS_Pr->SiS_SelectCRT2Rate;
d4575 2
a4576 1
  if(!SiS_Pr->CRT1UsesCustomMode) {
d4578 1
a4578 5
     CRT1ModeNo = SiS_Pr->SiS_CRT1Mode;                                 	/* get CRT1 ModeNo */
     SiS_SearchModeID(SiS_Pr, &CRT1ModeNo, &modeidindex);
     SiS_Pr->SiS_SetFlag &= (~ProgrammingCRT2);
     SiS_Pr->SiS_SelectCRT2Rate = 0;
     refreshratetableindex = SiS_GetRatePtr(SiS_Pr, CRT1ModeNo, modeidindex, HwInfo);
d4580 5
a4584 9
     if(CRT1ModeNo >= 0x13) {
        index = SiS_Pr->SiS_RefIndex[refreshratetableindex].Ext_CRTVCLK;
        index &= 0x3F;
        VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;				/* Get VCLK */

	colorth = SiS_GetColorDepth(SiS_Pr,CRT1ModeNo,modeidindex); 	/* Get colordepth */
        colorth >>= 1;
        if(!colorth) colorth++;
     }
d4588 55
a4642 14
     CRT1ModeNo = 0xfe;
     VCLK = SiS_Pr->CSRClock_CRT1;						/* Get VCLK */
     data2 = (SiS_Pr->CModeFlag_CRT1 & ModeInfoFlag) - 2;
     switch(data2) {								/* Get color depth */
        case 0 : colorth = 1; break;
        case 1 : colorth = 1; break;
        case 2 : colorth = 2; break;
        case 3 : colorth = 2; break;
        case 4 : colorth = 3; break;
        case 5 : colorth = 4; break;
        default: colorth = 2;
     }

  }
a4643 3
  if(CRT1ModeNo >= 0x13) {
    if(HwInfo->jChipType == SIS_300) {
       index = SiS_GetReg(SiS_Pr->SiS_P3c4,0x3A);
a4644 4
       index = SiS_GetReg(SiS_Pr->SiS_P3c4,0x1A);
    }
    index &= 0x07;
    MCLK = SiS_Pr->SiS_MCLKData_0[index].CLOCK;				/* Get MCLK */
d4646 14
a4659 1
    data2 = (colorth * VCLK) / MCLK;
d4661 1
a4661 5
    temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
    temp = ((temp & 0x00FF) >> 6) << 1;
    if(temp == 0) temp = 1;
    temp <<= 2;
    temp &= 0xff;
d4663 1
a4663 1
    data2 = temp - data2;
d4665 4
a4668 6
    if((28 * 16) % data2) {
      	data2 = (28 * 16) / data2;
      	data2++;
    } else {
      	data2 = (28 * 16) / data2;
    }
d4670 4
a4673 1
    if(HwInfo->jChipType == SIS_300) {
d4675 2
a4676 19
	tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x18);
	tempah &= 0x62;
	tempah >>= 1;
	tempal = tempah;
	tempah >>= 3;
	tempal |= tempah;
	tempal &= 0x07;
	tempcl = ThTiming[tempal];
	tempbx = SiS_GetReg(SiS_Pr->SiS_P3c4,0x16);
	tempbx >>= 6;
	tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
	tempah >>= 4;
	tempah &= 0x0c;
	tempbx |= tempah;
	tempbx <<= 1;
	tempal = ThLowB[tempbx + 1];
	tempal *= tempcl;
	tempal += ThLowB[tempbx];
	data = tempal;
d4678 2
a4679 1
    } else if(HwInfo->jChipType == SIS_730) {
d4681 4
a4684 9
#ifndef LINUX_XF86
       SiS_SetRegLong(0xcf8,0x80000050);
       eax = SiS_GetRegLong(0xcfc);
#else
       eax = pciReadLong(0x00000000, 0x50);
#endif
       tempal = (USHORT)(eax >> 8);
       tempal &= 0x06;
       tempal <<= 5;
d4686 8
a4693 9
#ifndef LINUX_XF86
       SiS_SetRegLong(0xcf8,0x800000A0);
       eax = SiS_GetRegLong(0xcfc);
#else
       eax = pciReadLong(0x00000000, 0xA0);
#endif
       temp = (USHORT)(eax >> 28);
       temp &= 0x0F;
       tempal |= temp;
d4695 8
a4702 8
       tempbx = tempal;   /* BIOS BUG (2.04.5d, 2.04.6a use ah here, which is unset!) */
       tempbx = 0;        /* -- do it like the BIOS anyway... */
       tempax = tempbx;
       tempbx &= 0xc0;
       tempbx >>= 6;
       tempax &= 0x0f;
       tempax *= 3;
       tempbx += tempax;
d4704 5
a4708 4
       data = LatencyFactor730[tempbx];
       data += 15;
       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
       if(!(temp & 0x80)) data += 5;
d4710 9
a4718 1
    } else {
d4720 1
a4720 3
       index = 0;
       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
       if(temp & 0x0080) index += 12;
d4722 1
a4722 12
#ifndef LINUX_XF86
       SiS_SetRegLong(0xcf8,0x800000A0);
       eax = SiS_GetRegLong(0xcfc);
#else
       /* We use pci functions X offers. We use tag 0, because
        * we want to read/write to the host bridge (which is always
        * 00:00.0 on 630, 730 and 540), not the VGA device.
        */
       eax = pciReadLong(0x00000000, 0xA0);
#endif
       temp = (USHORT)(eax >> 24);
       if(!(temp&0x01)) index += 24;
d4724 1
a4724 8
#ifndef LINUX_XF86
       SiS_SetRegLong(0xcf8,0x80000050);
       eax = SiS_GetRegLong(0xcfc);
#else
       eax = pciReadLong(0x00000000, 0x50);
#endif
       temp=(USHORT)(eax >> 24);
       if(temp & 0x01) index += 6;
d4726 1
a4726 2
       temp = (temp & 0x0F) >> 1;
       index += temp;
d4728 1
a4728 5
       data = LatencyFactor[index];
       data += 15;
       temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
       if(!(temp & 0x80)) data += 5;
    }
d4730 17
a4746 1
    data += data2;				/* CRT1 Request Period */
d4748 1
a4748 2
    SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
    SiS_Pr->SiS_SelectCRT2Rate = SelectRate_backup;
d4750 21
a4770 1
    if(!SiS_Pr->UseCustomMode) {
d4772 1
a4772 2
       CRT2ModeNo = ModeNo;
       SiS_SearchModeID(SiS_Pr, &CRT2ModeNo, &modeidindex);
d4774 1
a4774 1
       refreshratetableindex = SiS_GetRatePtr(SiS_Pr, CRT2ModeNo, modeidindex, HwInfo);
d4776 1
a4776 3
       index = SiS_GetVCLK2Ptr(SiS_Pr,CRT2ModeNo,modeidindex,
                               refreshratetableindex,HwInfo);
       VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;                         	/* Get VCLK  */
d4778 1
a4778 7
       if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) || (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
          if((ROMAddr) && SiS_Pr->SiS_UseROM) {
	     if(ROMAddr[0x220] & 0x01) {
                VCLK = ROMAddr[0x229] | (ROMAddr[0x22a] << 8);
	     }
          }
       }
d4780 3
a4782 1
    } else {
d4784 1
a4784 2
       CRT2ModeNo = 0xfe;
       VCLK = SiS_Pr->CSRClock;							/* Get VCLK */
d4786 7
a4792 1
    }
d4794 1
a4794 3
    colorth = SiS_GetColorDepth(SiS_Pr,CRT2ModeNo,modeidindex);   	/* Get colordepth */
    colorth >>= 1;
    if(!colorth) colorth++;
d4796 5
a4800 7
    data = data * VCLK * colorth;
    if(data % (MCLK << 4)) {
      	data = data / (MCLK << 4);
      	data++;
    } else {
      	data = data / (MCLK << 4);
    }
d4802 1
a4802 2
    if(data <= 6) data = 6;
    if(data > 0x14) data = 0x14;
d4804 1
a4804 18
    temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x01);
    if(HwInfo->jChipType == SIS_300) {
       if(data <= 0x0f) temp = (temp & (~0x1F)) | 0x13;
       else             temp = (temp & (~0x1F)) | 0x16;
       if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
       		temp = (temp & (~0x1F)) | 0x13;
       }
    } else {
       if( ( (HwInfo->jChipType == SIS_630) ||
             (HwInfo->jChipType == SIS_730) )  &&
           (HwInfo->jChipRevision >= 0x30) ) /* 630s or 730(s?) */
      {
	  temp = (temp & (~0x1F)) | 0x1b;
      } else {
	  temp = (temp & (~0x1F)) | 0x16;
      }
    }
    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x01,0xe0,temp);
d4806 1
a4806 6
    if( (HwInfo->jChipType == SIS_630) &&
        (HwInfo->jChipRevision >= 0x30) ) /* 630s, NOT 730 */
    {
   	if(data > 0x13) data = 0x13;
    }
    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x02,0xe0,data);
d4808 1
a4808 1
  } else {  /* If mode <= 0x13, we just restore everything */
d4810 10
a4819 2
    SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
    SiS_Pr->SiS_SelectCRT2Rate = SelectRate_backup;
d4821 1
a4821 3
  }
}
#endif
d4823 10
a4832 9
/**** Set CRT2 FIFO on 315/330 series ****/
#ifdef SIS315H
static void
SiS_SetCRT2FIFO_310(SiS_Private *SiS_Pr)
{
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x01,0x3B);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x02,~0x3F,0x04);
}
#endif
d4834 1
a4834 9
/*************** Set LCD-A ***************/
#ifdef SIS315H
static void
SiS_SetGroup1_LCDA(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                   PSIS_HW_INFO HwInfo, USHORT RefreshRateTableIndex)
{
  USHORT modeflag,resinfo;
  USHORT push2,tempax,tempbx,tempcx,temp;
  ULONG tempeax=0,tempebx,tempecx,tempvcfact;
d4836 21
a4856 23
  if(IS_SIS330) {
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x10);			/* Xabre 1.01.03 */
  } else if(IS_SIS740) {
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {					/* 740/LVDS */
        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xfb,0x04);
	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x03);
     } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
        SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x10);			/* 740/301LV, 301BDH */
     }
  } else {
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {					/* 650/LVDS */
        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xfb,0x04);
	SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x00);
     } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
        SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2D,0x0f);			/* 650/30xLv 1.10.6s */
	if(SiS_Pr->SiS_VBType & VB_SIS301C) {
	   if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) ||
	      (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)) {
	      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x20);
	   }
	}
     }
  }
d4858 1
a4858 10
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }
d4860 1
a4860 1
  tempax = SiS_Pr->SiS_LCDHDES;
d4862 8
a4869 4
  temp = (tempax & 0x0007);                        		/* BPLHDESKEW[2:0]   */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1A,temp);
  temp = (tempax >> 3) & 0x00FF;                               	/* BPLHDESKEW[10:3]  */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,temp);
d4871 1
a4871 4
  tempbx = SiS_Pr->SiS_HDE;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
     tempbx = SiS_Pr->PanelXRes;
  }
d4873 3
a4875 2
  tempax += tempbx;	                                    	/* HDE + HSKEW = lcdhdee  */
  if(tempax >= SiS_Pr->SiS_HT) tempax -= SiS_Pr->SiS_HT;
d4877 7
a4883 21
  temp = tempax;
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(temp & 0x07) temp += 8;
  }
  temp >>= 3;                                        		/* BPLHDEE  */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,temp);

  tempcx = (SiS_Pr->SiS_HT - tempbx) >> 2;     	            	/* (HT-HDE) / 4  */

  /* 650/30xLV 1.10.6s, 740/LVDS */
  if( ((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) ||
      ((SiS_Pr->SiS_IF_DEF_LVDS == 1) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) ) {
     if((SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) &&
        (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_PanelCustom)) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)        tempcx = 0x28;
 	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)  tempcx = 0x18;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) tempcx = 0x30;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) tempcx = 0x40;
	else                                                          tempcx = 0x30;
     }
  }
d4885 1
a4885 2
  tempcx += tempax;  	                                  	/* lcdhrs  */
  if(tempcx >= SiS_Pr->SiS_HT) tempcx -= SiS_Pr->SiS_HT;
d4887 1
a4887 2
  temp = (tempcx >> 3) & 0x00FF;				/* BPLHRS */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,temp);
a4888 23
  temp += 10;
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
	   temp += 6;
	   if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel800x600) {
	      temp++;
	      if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1024x768) {
	         temp += 7;
		 if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1600x1200) {
		    temp -= 10;
		 }
	      }
	   }
	}
     }
  } else if(SiS_Pr->SiS_VBType & VB_SIS301C) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)  temp += 7;
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) temp += 4;
  }
  temp &= 0x1F;
  temp |= ((tempcx & 0x07) << 5);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,temp);
d4890 1
a4890 4
  tempax = SiS_Pr->PanelYRes;
  if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
     tempax = SiS_Pr->SiS_VGAVDE;
  }
d4892 16
a4907 2
  tempbx = SiS_Pr->SiS_LCDVDES + tempax;
  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;
d4909 2
a4910 1
  push2 = tempbx;
d4912 2
a4913 1
  tempcx = (SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE) >> 2;
d4915 1
a4915 13
  if( ((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) ||
      ((SiS_Pr->SiS_IF_DEF_LVDS == 1) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) ) {
     if((SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) &&
        (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_PanelCustom)) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)         tempcx = 1;
   	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)   tempcx = 3;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)   tempcx = 3;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)  tempcx = 1;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)  tempcx = 1;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)  tempcx = 1;
	else                                                           tempcx = 0x0057;
     }
  }
d4917 1
a4917 5
  tempbx += tempcx;
  if(SiS_Pr->SiS_VBType & VB_SISVB) tempbx++;
  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;	/* BPLVRS  */
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,temp);
d4919 1
a4919 23
  tempcx >>= 3;
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)         tempcx = 3;
   	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)   tempcx = 5;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)   tempcx = 5;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)  tempcx = 5;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)  tempcx = 2;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)  tempcx = 2;
     }
  } else if(SiS_Pr->SiS_VBType & VB_SIS301C) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)           tempcx = 5;
     else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)     tempcx = 2;
  }
  tempcx += tempbx;
  tempcx++;                                                	/* BPLVRE  */
  temp = tempcx & 0x000F;
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(!(SiS_Pr->SiS_VBType & VB_SIS301C)) {
        temp |= 0xC0;
     }
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0xF0,temp);
d4921 4
a4924 15
  temp = ((tempbx >> 8) & 0x07) << 3;
  if(SiS_Pr->SiS_VGAVDE != SiS_Pr->SiS_VDE) temp |= 0x40;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)   temp |= 0x40;
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     /* Don't check Part1Port,0x00 -> is not being set if LCDA! */
     /* We check SR06 instead here: */
     if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
        if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x06) & 0x10) temp |= 0x80;
     }
  } else {
     if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
        if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x01) temp |= 0x80;
     }
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1A,0x07,temp);
d4926 1
a4926 1
  tempbx = push2;                                      		/* BPLVDEE */
d4928 1
a4928 10
  tempcx = SiS_Pr->SiS_LCDVDES;                        		/* NPLVDES */
  if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
        if(resinfo == SIS_RI_800x600) tempcx++;
     }
  }
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
     tempbx = tempcx = SiS_Pr->SiS_VGAVDE;
     tempbx--;
  }
d4930 1
a4930 7
  temp = ((tempbx >> 8) & 0x07) << 3;
  temp = temp | ((tempcx >> 8) & 0x07);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1D,temp);
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1C,temp);
  temp = tempcx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1B,temp);
d4932 1
a4932 6
  tempeax = SiS_Pr->SiS_VGAVDE << 18;
  tempebx = SiS_Pr->SiS_VDE;
  temp = (USHORT)(tempeax % tempebx);
  tempeax = tempeax / tempebx;
  if(temp) tempeax++;
  tempvcfact = tempeax;
d4934 1
a4934 2
  temp = (USHORT)(tempeax & 0x00FF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x37,temp);
d4936 6
a4941 2
  temp = (USHORT)((tempeax & 0x00FF00) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x36,temp);
d4943 2
a4944 3
  temp = (USHORT)((tempeax & 0x00030000) >> 16);
  if(SiS_Pr->SiS_VDE == SiS_Pr->SiS_VGAVDE) temp |= 0x04;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x35,temp);
d4946 3
a4948 11
  if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) {
     temp = (USHORT)(tempeax & 0x00FF);
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x3c,temp);
     temp = (USHORT)((tempeax & 0x00FF00) >> 8);
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x3b,temp);
     temp = (USHORT)(((tempeax & 0x00030000) >> 16) << 6);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x3a,0x3f,temp);
     temp = 0;
     if(SiS_Pr->SiS_VDE != SiS_Pr->SiS_VGAVDE) temp |= 0x08;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x30,0xf3,temp);
  }
d4950 1
a4950 11
  tempeax = SiS_Pr->SiS_VGAHDE << 16;
  tempebx = SiS_Pr->SiS_HDE;
  temp = tempeax % tempebx;
  tempeax /= tempebx;
  if(temp) tempeax++;
  if(tempebx == SiS_Pr->SiS_VGAHDE) tempeax = 0xFFFF;
  tempecx = tempeax;
  tempeax = ((SiS_Pr->SiS_VGAHDE << 16) / tempecx) - 1;
  tempecx = (tempecx << 16) | (tempeax & 0xFFFF);
  temp = (USHORT)(tempecx & 0x00FF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1F,temp);
d4952 8
a4959 2
  tempeax = (SiS_Pr->SiS_VGAVDE << 18) / tempvcfact;
  tempbx = (USHORT)(tempeax & 0x0FFFF);
d4961 1
a4961 1
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) tempbx--;
d4963 1
a4963 1
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)  tempbx = 1;
d4965 1
a4965 3
  temp = ((tempbx >> 8) & 0x07) << 3;
  temp = temp | ((tempecx >> 8) & 0x07);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x20,temp);
d4967 1
a4967 2
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x21,temp);
d4969 3
a4971 4
  tempecx >>= 16;   	                                  	/* BPLHCFACT  */
  if(modeflag & HalfDCLK) tempecx >>= 1;
  temp = (USHORT)((tempecx & 0x0000FF00) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x22,temp);
d4973 10
a4982 2
  temp = (USHORT)(tempecx & 0x000000FF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x23,temp);
d4984 3
a4986 5
  if((SiS_Pr->SiS_IF_DEF_LVDS == 1) || (SiS_Pr->SiS_VBInfo & VB_SIS301LV302LV)) {
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1e,0x20);
  }
}
#endif  /* SIS 315 */
d4988 1
a4988 4
static USHORT
SiS_GetVGAHT2(SiS_Private *SiS_Pr)
{
  ULONG tempax,tempbx;
d4990 3
a4992 5
  tempbx = ((SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE) * SiS_Pr->SiS_RVBHCMAX) & 0xFFFF;
  tempax = (SiS_Pr->SiS_VT - SiS_Pr->SiS_VDE) * SiS_Pr->SiS_RVBHCFACT;
  tempax = (tempax * SiS_Pr->SiS_HT) / tempbx;
  return((USHORT) tempax);
}
d4994 6
a4999 9
/******* Set Part 1 / SiS bridge *********/
static void
SiS_SetGroup1_301(SiS_Private *SiS_Pr, USHORT ModeNo,USHORT ModeIdIndex,
                  PSIS_HW_INFO HwInfo,USHORT RefreshRateTableIndex)
{
  USHORT  push1,push2;
  USHORT  tempax,tempbx,tempcx,temp;
  USHORT  resinfo,modeflag;
  unsigned char p1_7, p1_8;
d5001 1
a5001 10
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }
d5003 1
a5003 1
  /* The following is only done if bridge is in slave mode: */
d5005 4
a5008 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x03,0xff);                  /* set MAX HT */
d5010 5
a5014 1
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)  modeflag |= Charx8Dot;
d5016 1
a5016 2
  if(modeflag & Charx8Dot) tempcx = 0x08;
  else                     tempcx = 0x09;
d5018 1
a5018 4
  tempax = SiS_Pr->SiS_VGAHDE;                                 	/* 0x04 Horizontal Display End */
  if(modeflag & HalfDCLK) tempax >>= 1;
  tempax = ((tempax / tempcx) - 1) & 0xff;
  tempbx = tempax;
d5020 1
a5020 2
  temp = tempax;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x04,temp);
d5022 8
a5029 9
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
        temp += 2;
     }
  }
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     if(resinfo == SIS_RI_800x600) temp -= 2;
  }
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x05,temp);                 /* 0x05 Horizontal Display Start */
d5031 6
a5036 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x06,0x03);                 /* 0x06 Horizontal Blank end     */
d5038 4
a5041 6
  tempax = 0xFFFF;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) tempax = SiS_GetVGAHT2(SiS_Pr);
  if(tempax >= SiS_Pr->SiS_VGAHT) tempax = SiS_Pr->SiS_VGAHT;
  if(modeflag & HalfDCLK)         tempax >>= 1;
  tempax = (tempax / tempcx) - 5;
  tempcx = tempax;
d5043 7
a5049 49
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     temp = tempcx - 1;
     if(!(modeflag & HalfDCLK)) {
        temp -= 6;
        if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
           temp -= 2;
           if(ModeNo > 0x13) temp -= 10;
        }
     }
  } else {
     tempcx = (tempcx + tempbx) >> 1;
     temp = (tempcx & 0x00FF) + 2;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        temp--;
        if(!(modeflag & HalfDCLK)) {
           if((modeflag & Charx8Dot)) {
              temp += 4;
              if(SiS_Pr->SiS_VGAHDE >= 800) temp -= 6;
              if(HwInfo->jChipType >= SIS_315H) {
	         if(SiS_Pr->SiS_VGAHDE == 800) temp += 2;
              }
           }
        }
     } else {
        if(!(modeflag & HalfDCLK)) {
           temp -= 4;
           if((SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x960) &&
	      (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1600x1200)) {
              if(SiS_Pr->SiS_VGAHDE >= 800) {
                 temp -= 7;
	         if(HwInfo->jChipType < SIS_315H) {
                    if(SiS_Pr->SiS_ModeType == ModeEGA) {
                       if(SiS_Pr->SiS_VGAVDE == 1024) {
                          temp += 15;
                          if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024)
		  	     temp += 7;
                       }
                    }
	         }
		 if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1400x1050) {
                    if(SiS_Pr->SiS_VGAHDE >= 1280) {
                       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) temp += 28;
		    }
                 }
              }
           }
        }
     }
  }
d5051 7
a5057 2
  p1_7 = temp;
  p1_8 = 0x00;
d5059 1
a5059 37
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
        if(ModeNo <= 0x01) {
	   p1_7 = 0x2a;
	   if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) p1_8 = 0x61;
	   else 	      			p1_8 = 0x41;
	} else if(SiS_Pr->SiS_ModeType == ModeText) {
	   if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) p1_7 = 0x54;
	   else 	    			p1_7 = 0x55;
	   p1_8 = 0x00;
	} else if(ModeNo <= 0x13) {
	   if(modeflag & HalfDCLK) {
	      if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
		 p1_7 = 0x30;
		 p1_8 = 0x03;
	      } else {
	 	 p1_7 = 0x2f;
		 p1_8 = 0x02;
	      }
	   } else {
	      p1_7 = 0x5b;
	      p1_8 = 0x03;
	   }
	} else if( ((HwInfo->jChipType >= SIS_315H) &&
	            ((ModeNo == 0x50) || (ModeNo == 0x56) || (ModeNo == 0x53))) ||
	           ((HwInfo->jChipType < SIS_315H) &&
		    (resinfo == SIS_RI_320x200 || resinfo == SIS_RI_320x240)) ) {
	   if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
	      p1_7 = 0x30,
	      p1_8 = 0x03;
	   } else {
	      p1_7 = 0x2f;
	      p1_8 = 0x03;
	   }
        }
     }
  }
d5061 6
a5066 11
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
     if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p|TVSetYPbPr750p)) {
        p1_7 = 0x63;
	if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) p1_7 = 0x55;
     }
     if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
        if(!(modeflag & HalfDCLK)) {
	   p1_7 = 0xb2;
	   if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
	      p1_7 = 0xab;
	   }
d5068 7
a5074 3
     } else {
        if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) {
	   if(modeflag & HalfDCLK) p1_7 = 0x30;
a5075 2
     }
  }
d5077 7
a5083 2
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x07,p1_7);			/* 0x07 Horizontal Retrace Start */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x08,p1_8);			/* 0x08 Horizontal Retrace End   */
d5085 1
a5085 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x03);                	/* 0x18 SR08 (FIFO Threshold?)   */
d5087 7
a5093 1
  SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x19,0xF0);
d5095 8
a5102 31
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x09,0xFF);                	/* 0x09 Set Max VT    */

  tempcx = 0x121;
  tempbx = SiS_Pr->SiS_VGAVDE;                               	/* 0x0E Vertical Display End */
  if     (tempbx == 357) tempbx = 350;
  else if(tempbx == 360) tempbx = 350;
  else if(tempbx == 375) tempbx = 350;
  else if(tempbx == 405) tempbx = 400;
  else if(tempbx == 420) tempbx = 400;
  else if(tempbx == 525) tempbx = 480;
  push2 = tempbx;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
      	if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
           if     (tempbx == 350) tempbx += 5;
           else if(tempbx == 480) tempbx += 5;
      	}
     }
  }
  tempbx -= 2;
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x10,temp);        		/* 0x10 vertical Blank Start */

  tempbx = push2;
  tempbx--;
  temp = tempbx & 0x00FF;
#if 0
  /* Missing code from 630/301B 2.04.5a and 650/302LV 1.10.6s (calles int 2f) */
  if(xxx()) {
      if(temp == 0xdf) temp = 0xda;
  }
d5104 8
a5111 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0E,temp);
d5113 1
a5113 12
  temp = 0;
  if(modeflag & DoubleScanMode) temp |= 0x80;
  if(HwInfo->jChipType >= SIS_661) {
     if(tempbx & 0x0200)        temp |= 0x20;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x0B,0x5F,temp);
     if(tempbx & 0x0100)  tempcx |= 0x000a;
     if(tempbx & 0x0400)  tempcx |= 0x1200;
  } else {
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0B,temp);
     if(tempbx & 0x0100)  tempcx |= 0x0002;
     if(tempbx & 0x0400)  tempcx |= 0x0600;
  }
d5115 1
a5115 1
  if(tempbx & 0x0200)  tempcx |= 0x0040;
d5117 1
a5117 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x11,0x00);                	/* 0x11 Vertical Blank End */
d5119 1
a5119 35
  tempax = (SiS_Pr->SiS_VGAVT - tempbx) >> 2;

  if((ModeNo > 0x13) || (HwInfo->jChipType < SIS_315H)) {
     if(resinfo != SIS_RI_1280x1024) {
	tempbx += (tempax << 1);
     }
  } else if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1400x1050) {
	tempbx += (tempax << 1);
     }
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     tempbx -= 10;
  } else {
     if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
        if(SiS_Pr->SiS_TVMode & TVSetPAL) {
           tempbx += 40;
	   if(HwInfo->jChipType >= SIS_315H) {
	      if(SiS_Pr->SiS_VGAHDE == 800) tempbx += 10;
	   }
	}
     }
  }
  tempax >>= 2;
  tempax++;
  tempax += tempbx;
  push1 = tempax;
  if(SiS_Pr->SiS_TVMode & TVSetPAL) {
     if(tempbx <= 513)  {
     	if(tempax >= 513) tempbx = 513;
     }
  }
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0C,temp);			/* 0x0C Vertical Retrace Start */
d5121 10
a5130 3
  tempbx--;
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x10,temp);
d5132 1
a5132 1
  if(tempbx & 0x0100) tempcx |= 0x0008;
d5134 1
a5134 4
  if(tempbx & 0x0200) {
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x0B,0x20);
  }
  tempbx++;
d5136 1
a5136 7
  if(tempbx & 0x0100) tempcx |= 0x0004;
  if(tempbx & 0x0200) tempcx |= 0x0080;
  if(tempbx & 0x0400) {
     if(HwInfo->jChipType >= SIS_661)        tempcx |= 0x0800;
     else if(SiS_Pr->SiS_VBType & VB_SIS301) tempcx |= 0x0800;
     else                                    tempcx |= 0x0C00;
  }
d5138 1
a5138 3
  tempbx = push1;
  temp = tempbx & 0x000F;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0D,temp);        		/* 0x0D vertical Retrace End */
d5140 1
a5140 1
  if(tempbx & 0x0010) tempcx |= 0x2000;
d5142 32
a5173 2
  temp = tempcx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0A,temp);              	/* 0x0A CR07 */
d5175 1
a5175 2
  temp = (tempcx & 0xFF00) >> 8;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,temp);              	/* 0x17 SR0A */
d5177 42
a5218 5
  tempax = modeflag;
  temp = (tempax & 0xFF00) >> 8;
  temp = (temp >> 1) & 0x09;
  if(!(SiS_Pr->SiS_VBType & VB_SIS301)) temp |= 0x01;		/* Always 8 dotclock */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,temp);              	/* 0x16 SR01 */
d5220 2
a5221 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0F,0x00);              	/* 0x0F CR14 */
d5223 1
a5223 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x12,0x00);              	/* 0x12 CR17 */
d5225 1
a5225 7
  temp = 0x00;
  if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
     if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x01) {
	temp = 0x80;
     }
  }
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1A,temp);                	/* 0x1A SR0E */
d5227 1
a5227 3
  temp = SiS_GetRegByte((USHORT)(SiS_Pr->SiS_P3ca+0x02));
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,temp);
}
d5229 2
a5230 9
/*********** Set Part 1 / LVDS ***********/
static void
SiS_SetGroup1_LVDS(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
 		   PSIS_HW_INFO HwInfo, USHORT RefreshRateTableIndex)
{
  USHORT modeflag, resinfo;
  USHORT push1, push2, tempax, tempbx, tempcx, temp;
#ifdef SIS315H
  USHORT pushcx;
a5231 1
  ULONG  tempeax=0, tempebx, tempecx, tempvcfact=0;
d5233 1
a5233 3
  /* This is not supported on LVDS */
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) return;
  if(SiS_Pr->UseCustomMode) return;
d5235 7
a5241 7
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }
d5243 1
a5243 1
  /* Set up Panel Link */
d5245 1
a5245 1
  /* 1. Horizontal setup */
d5247 1
a5247 1
  tempax = SiS_Pr->SiS_LCDHDES;
d5249 8
a5256 6
  if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
     if( (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) &&
         (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ) {
  	   tempax -= 8;
     }
  }
d5258 13
a5270 1
  tempcx = SiS_Pr->SiS_HT;    				  /* Horiz. Total */
d5272 1
a5272 1
  tempbx = SiS_Pr->SiS_HDE;                               /* Horiz. Display End */
d5274 7
a5280 4
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
     SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) {
     tempbx >>= 1;
  }
d5282 11
a5292 16
  if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        if(SiS_Pr->SiS_IF_DEF_FSTN || SiS_Pr->SiS_IF_DEF_DSTN) {
	   tempbx = SiS_Pr->PanelXRes;
	} else if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
	   tempbx = SiS_Pr->PanelXRes;
	   if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
	      tempbx = 800;
	      if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel800x600) {
	         tempbx = 1024;
	      }
	   }
        }
     }
  }
  tempcx = (tempcx - tempbx) >> 2;		 /* HT-HDE / 4 */
d5294 3
a5296 1
  push1 = tempax;
d5298 1
a5298 1
  tempax += tempbx;
d5300 6
a5305 1
  if(tempax >= SiS_Pr->SiS_HT) tempax -= SiS_Pr->SiS_HT;
d5307 8
a5314 1
  push2 = tempax;
d5316 3
a5318 33
  if((!SiS_Pr->SiS_IF_DEF_FSTN) &&
     (!SiS_Pr->SiS_IF_DEF_DSTN) &&
     (SiS_Pr->SiS_CustomT != CUT_BARCO1366) &&
     (SiS_Pr->SiS_CustomT != CUT_BARCO1024) &&
     (SiS_Pr->SiS_CustomT != CUT_PANEL848)) {
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
           if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
     	      if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)        tempcx = 0x0028;
	      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600)  tempcx = 0x0018;
     	      else if( (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) ||
	            (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768) ) {
	  	   if(HwInfo->jChipType < SIS_315H) {
		      if(SiS_Pr->SiS_VBType & VB_SISVB) {
		         tempcx = 0x0017;  /* A901; sometimes 0x0018; */
		      } else {
		         tempcx = 0x0017;
#ifdef TWNEWPANEL
			 tempcx = 0x0018;
#endif
		      }
		   } else {
		      tempcx = 0x0018;
		   }
	      }
	      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)  tempcx = 0x0028;
	      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) tempcx = 0x0030;
	      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) tempcx = 0x0030;
	      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) tempcx = 0x0040;
	   }
        }
     }
  }
d5320 1
a5320 2
  tempcx += tempax;                              /* lcdhrs  */
  if(tempcx >= SiS_Pr->SiS_HT) tempcx -= SiS_Pr->SiS_HT;
d5322 1
a5322 3
  tempax = tempcx >> 3;                          /* BPLHRS */
  temp = tempax & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,temp);		 /* Part1_14h; Panel Link Horizontal Retrace Start  */
d5324 27
a5350 24
  if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
     temp = (tempax & 0x00FF) + 2;
  } else {
     temp = (tempax & 0x00FF) + 10;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        if((!SiS_Pr->SiS_IF_DEF_DSTN) &&
	   (!SiS_Pr->SiS_IF_DEF_FSTN) &&
	   (SiS_Pr->SiS_CustomT != CUT_BARCO1366) &&
	   (SiS_Pr->SiS_CustomT != CUT_BARCO1024) &&
	   (SiS_Pr->SiS_CustomT != CUT_PANEL848)) {
           if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
	      temp += 6;
              if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel800x600) {
	         temp++;
	         if(HwInfo->jChipType >= SIS_315H) {
	            if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1024x768) {
	               temp += 7;
		       if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1600x1200) {
		          temp -= 0x14;
			  if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x768) {
			     temp -= 10;
			  }
		       }
	            }
a5352 4
           }
        }
     }
  }
d5354 16
a5369 6
  temp &= 0x1F;
  temp |= ((tempcx & 0x0007) << 5);
#if 0
  if(SiS_Pr->SiS_IF_DEF_FSTN) temp = 0x20;       /* WRONG? BIOS loads cl, not ah */
#endif
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,temp);    	 /* Part1_15h; Panel Link Horizontal Retrace End/Skew */
d5371 1
a5371 2
  tempbx = push2;
  tempcx = push1;                                /* lcdhdes  */
a5372 2
  temp = (tempcx & 0x0007);                      /* BPLHDESKEW  */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1A,temp);   	 /* Part1_1Ah; Panel Link Vertical Retrace Start (2:0) */
d5374 1
a5374 8
  tempcx >>= 3;                                  /* BPLHDES */
  temp = (tempcx & 0x00FF);
#if 0 /* Not 550 FSTN */
  if(HwInfo->jChipType >= SIS_315H) {
     if(ModeNo == 0x5b) temp--; */
  }
#endif
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,temp);    	 /* Part1_16h; Panel Link Horizontal Display Enable Start  */
d5376 7
a5382 13
  if((HwInfo->jChipType < SIS_315H) ||
     (SiS_Pr->SiS_IF_DEF_FSTN) ||
     (SiS_Pr->SiS_IF_DEF_DSTN)) {
     if(tempbx & 0x07) tempbx += 8;
  }
  tempbx >>= 3;                                  /* BPLHDEE  */
  temp = tempbx & 0x00FF;
#if 0 /* Not 550 FSTN */
  if(HwInfo->jChipType >= SIS_315H) {
     if(ModeNo == 0x5b) temp--;
  }
#endif
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,temp);   	 /* Part1_17h; Panel Link Horizontal Display Enable End  */
d5384 1
a5384 1
  /* 2. Vertical setup */
d5386 3
a5388 7
  if(HwInfo->jChipType < SIS_315H) {
     tempcx = SiS_Pr->SiS_VGAVT;
     tempbx = SiS_Pr->SiS_VGAVDE;
     if((SiS_Pr->SiS_CustomT != CUT_BARCO1366) && (SiS_Pr->SiS_CustomT != CUT_BARCO1024)) {
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
           if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
	      tempbx = SiS_Pr->PanelYRes;
a5389 3
	}
     }
     tempcx -= tempbx;
d5391 3
a5393 1
  } else {
d5395 3
a5397 1
     tempcx = SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE;           /* VGAVT-VGAVDE  */
d5399 8
a5406 1
  }
d5408 1
a5408 2
  tempbx = SiS_Pr->SiS_LCDVDES;	   		 	 	/* VGAVDES  */
  push1 = tempbx;
d5410 6
a5415 1
  tempax = SiS_Pr->SiS_VGAVDE;
a5416 6
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) || (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
        if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
           tempax = 600;
	   if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel800x600) {
	      tempax = 768;
a5417 9
	}
     } else if( (SiS_Pr->SiS_IF_DEF_TRUMPION == 0)   &&
                (!(SiS_Pr->SiS_LCDInfo & LCDPass11)) &&
                ((SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) ||
	         (SiS_Pr->SiS_IF_DEF_FSTN) ||
	         (SiS_Pr->SiS_IF_DEF_DSTN)) ) {
	tempax = SiS_Pr->PanelYRes;
     }
  }
d5419 14
a5432 2
  tempbx += tempax;
  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;
d5434 6
a5439 1
  push2 = tempbx;
d5441 1
a5441 1
  tempcx >>= 1;
d5443 5
a5447 40
  if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) &&
     (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) &&
     (SiS_Pr->SiS_CustomT != CUT_BARCO1366) &&
     (SiS_Pr->SiS_CustomT != CUT_BARCO1024) &&
     (SiS_Pr->SiS_CustomT != CUT_PANEL848)) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) {
	tempcx = 0x0017;
     } else if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        if(SiS_Pr->SiS_IF_DEF_FSTN || SiS_Pr->SiS_IF_DEF_DSTN) {
	   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)         tempcx = 0x0003;
  	   else if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) ||
	           (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)) tempcx = 0x0003;
           else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)  tempcx = 0x0001;
           else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)  tempcx = 0x0001;
	   else 							  tempcx = 0x0057;
        } else  {
     	   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)         tempcx = 0x0001;
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600)   tempcx = 0x0001;
     	   else if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) ||
	           (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768)) {
		   if(HwInfo->jChipType < SIS_315H) {
		      if(SiS_Pr->SiS_VBType & VB_SISVB) {
		         tempcx = 0x0002;   /* A901; sometimes 0x0003; */
		      } else {
			 tempcx = 0x0002;
#ifdef TWNEWPANEL
			 tempcx = 0x0003;
#endif
		      }
		   } else tempcx = 0x0003;
           }
     	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)  tempcx = 0x0003;
     	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) tempcx = 0x0001;
     	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) tempcx = 0x0001;
	   else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) tempcx = 0x0001;
     	   else 							 tempcx = 0x0057;
	}
     }
  }
d5449 1
a5449 1
  tempbx += tempcx;			 	/* BPLVRS  */
d5451 6
a5456 5
  if((HwInfo->jChipType < SIS_315H) ||
     (SiS_Pr->SiS_IF_DEF_FSTN) ||
     (SiS_Pr->SiS_IF_DEF_DSTN)) {
     tempbx++;
  }
d5458 6
a5463 1
  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;
d5465 1
a5465 2
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,temp);       	 /* Part1_18h; Panel Link Vertical Retrace Start  */
d5467 1
a5467 1
  tempcx >>= 3;
d5469 1
a5469 32
  if((!(SiS_Pr->SiS_LCDInfo & LCDPass11)) &&
     (SiS_Pr->SiS_CustomT != CUT_BARCO1366) &&
     (SiS_Pr->SiS_CustomT != CUT_BARCO1024) &&
     (SiS_Pr->SiS_CustomT != CUT_PANEL848)) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        if( (HwInfo->jChipType < SIS_315H) &&
            (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) )     tempcx = 0x0001;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2)  tempcx = 0x0002;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3)  tempcx = 0x0002;
        else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600)    tempcx = 0x0003;
        else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600)   tempcx = 0x0005;
        else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1152x768)   tempcx = 0x0005;
	else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x768)   tempcx = 0x0011;
        else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)  tempcx = 0x0005;
        else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)  tempcx = 0x0002;
        else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)  tempcx = 0x0011;
        else if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480)  {
     		if(HwInfo->jChipType < SIS_315H) {
		   if(SiS_Pr->SiS_VBType & VB_SISVB) {
		      tempcx = 0x0004;   /* A901; Other BIOS sets 0x0005; */
		   } else {
		      tempcx = 0x0004;
#ifdef TWNEWPANEL
		      tempcx = 0x0005;
#endif
		   }
		} else {
		   tempcx = 0x0005;
		}
        }
     }
  }
d5471 1
a5471 10
  tempcx = tempcx + tempbx + 1;                  /* BPLVRE  */
  temp = tempcx & 0x000F;
  if(SiS_Pr->SiS_IF_DEF_FSTN ||
     SiS_Pr->SiS_IF_DEF_DSTN ||
     (SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
     (SiS_Pr->SiS_CustomT == CUT_BARCO1024) ||
     (SiS_Pr->SiS_CustomT == CUT_PANEL848)) {
     temp |= 0x30;
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0xf0,temp); /* Part1_19h; Panel Link Vertical Retrace End (3:0); Misc.  */
d5473 11
a5483 22
  temp = ((tempbx & 0x0700) >> 8) << 3;          /* BPLDESKEW =0 */
  if(SiS_Pr->SiS_IF_DEF_FSTN || SiS_Pr->SiS_IF_DEF_DSTN) {
     if(SiS_Pr->SiS_HDE != 640) {
        if(SiS_Pr->SiS_VGAVDE != SiS_Pr->SiS_VDE)   temp |= 0x40;
     }
  } else if(SiS_Pr->SiS_VGAVDE != SiS_Pr->SiS_VDE)  temp |= 0x40;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)           temp |= 0x40;
  if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
     if(HwInfo->jChipType >= SIS_315H) {
        if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x01) {
           temp |= 0x80;
        }
     } else {
	if( (HwInfo->jChipType == SIS_630) ||
	    (HwInfo->jChipType == SIS_730) ) {
	   if(HwInfo->jChipRevision >= 0x30) {
	      temp |= 0x80;
	   }
	}
     }
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1A,0x87,temp);  /* Part1_1Ah; Panel Link Control Signal (7:3); Vertical Retrace Start (2:0) */
d5485 9
a5493 1
  if(HwInfo->jChipType < SIS_315H) {
d5495 5
a5499 1
#ifdef SIS300      /* 300 series */
d5501 12
a5512 5
     tempeax = SiS_Pr->SiS_VGAVDE << 6;
     temp = (USHORT)(tempeax % (ULONG)SiS_Pr->SiS_VDE);
     tempeax = tempeax / (ULONG)SiS_Pr->SiS_VDE;
     if(temp != 0) tempeax++;
     tempebx = tempeax;                         /* BPLVCFACT  */
d5514 1
a5514 1
     if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)  tempebx = 0x003F;
d5516 1
a5516 2
     temp = (USHORT)(tempebx & 0x00FF);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1E,temp);      /* Part1_1Eh; Panel Link Vertical Scaling Factor */
d5518 1
a5518 1
#endif /* SIS300 */
d5520 6
a5525 1
  } else {
d5527 6
a5532 1
#ifdef SIS315H  /* 315 series */
d5534 2
a5535 5
     if(HwInfo->jChipType == SIS_740) {
        SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1E,0x03);
     } else {
	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1E,0x23);
     }
d5537 1
a5537 14
     tempeax = SiS_Pr->SiS_VGAVDE << 18;
     temp = (USHORT)(tempeax % (ULONG)SiS_Pr->SiS_VDE);
     tempeax = tempeax / SiS_Pr->SiS_VDE;
     if(temp != 0) tempeax++;
     tempebx = tempeax;                         /* BPLVCFACT  */
     tempvcfact = tempeax;
     temp = (USHORT)(tempebx & 0x00FF);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x37,temp);      /* Part1_37h; Panel Link Vertical Scaling Factor */
     temp = (USHORT)((tempebx & 0x00FF00) >> 8);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x36,temp);      /* Part1_36h; Panel Link Vertical Scaling Factor */
     temp = (USHORT)((tempebx & 0x00030000) >> 16);
     temp &= 0x03;
     if(SiS_Pr->SiS_VDE == SiS_Pr->SiS_VGAVDE) temp |= 0x04;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x35,temp);      /* Part1_35h; Panel Link Vertical Scaling Factor */
d5539 5
a5543 1
#endif /* SIS315H */
d5545 1
a5545 1
  }
d5547 3
a5549 2
  tempbx = push2;                                  /* BPLVDEE  */
  tempcx = push1;
d5551 5
a5555 1
  push1 = temp;
d5557 3
a5559 15
  if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
     if(!SiS_Pr->SiS_IF_DEF_FSTN && !SiS_Pr->SiS_IF_DEF_DSTN) {
	if(HwInfo->jChipType < SIS_315H) {
	   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x600) {
      	      if(resinfo == SIS_RI_1024x600) tempcx++;
	      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
		 if(resinfo == SIS_RI_800x600) tempcx++;
	      }
	   } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
      	      if(resinfo == SIS_RI_800x600)  tempcx++;
	      if(resinfo == SIS_RI_1024x768) tempcx++; /* Doesnt make sense anyway... */
	   } else  if(resinfo == SIS_RI_1024x768) tempcx++;
	} else {
	   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel800x600) {
      	      if(resinfo == SIS_RI_800x600)  tempcx++;
d5561 3
a5563 3
	}
     }
  }
d5565 3
a5567 6
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) {
     if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
        tempcx = SiS_Pr->SiS_VGAVDE;
        tempbx = SiS_Pr->SiS_VGAVDE - 1;
     }
  }
d5569 1
a5569 3
  temp = ((tempbx & 0x0700) >> 8) << 3;
  temp |= ((tempcx & 0x0700) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1D,temp);     	/* Part1_1Dh; Vertical Display Overflow; Control Signal */
d5571 9
a5579 3
  temp = tempbx & 0x00FF;
  /* if(SiS_Pr->SiS_IF_DEF_FSTN) temp++;  */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1C,temp);      	/* Part1_1Ch; Panel Link Vertical Display Enable End  */
d5581 1
a5581 2
  temp = tempcx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1B,temp);      	/* Part1_1Bh; Panel Link Vertical Display Enable Start  */
d5583 20
a5602 1
  /* 3. Additional horizontal setup (scaling, etc) */
d5604 1
a5604 18
  tempecx = SiS_Pr->SiS_VGAHDE;
  if(HwInfo->jChipType >= SIS_315H) {
     if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
        if(modeflag & HalfDCLK) tempecx >>= 1;
     }
  }
  tempebx = SiS_Pr->SiS_HDE;
  if(tempecx == tempebx) tempeax = 0xFFFF;
  else {
     tempeax = tempecx;
     tempeax <<= 16;
     temp = (USHORT)(tempeax % tempebx);
     tempeax = tempeax / tempebx;
     if(HwInfo->jChipType >= SIS_315H) {
        if(temp) tempeax++;
     }
  }
  tempecx = tempeax;
d5606 1
a5606 14
  if(HwInfo->jChipType >= SIS_315H) {
     tempeax = SiS_Pr->SiS_VGAHDE;
     if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
        if(modeflag & HalfDCLK) tempeax >>= 1;
     }
     tempeax <<= 16;
     tempeax = (tempeax / tempecx) - 1;
  } else {
     tempeax = ((SiS_Pr->SiS_VGAHT << 16) / tempecx) - 1;
  }
  tempecx <<= 16;
  tempecx |= (tempeax & 0xFFFF);
  temp = (USHORT)(tempecx & 0x00FF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1F,temp);  	 /* Part1_1Fh; Panel Link DDA Operational Number in each horiz. line */
d5608 1
a5608 16
  tempbx = SiS_Pr->SiS_VDE;
  if(HwInfo->jChipType >= SIS_315H) {
     tempeax = (SiS_Pr->SiS_VGAVDE << 18) / tempvcfact;
     tempbx = (USHORT)(tempeax & 0x0FFFF);
  } else {
     tempeax = SiS_Pr->SiS_VGAVDE << 6;
     tempbx = push1 & 0x3f;
     if(tempbx == 0) tempbx = 64;
     tempeax /= tempbx;
     tempbx = (USHORT)(tempeax & 0x0FFFF);
  }
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) tempbx--;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA) {
     if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) tempbx = 1;
     else if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480)  tempbx = 1;
  }
d5610 1
a5610 3
  temp = ((tempbx & 0xFF00) >> 8) << 3;
  temp |= (USHORT)((tempecx & 0x0700) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x20,temp);  	/* Part1_20h; Overflow register */
d5612 4
a5615 2
  temp = tempbx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x21,temp);  	/* Part1_21h; Panel Link Vertical Accumulator Register */
d5617 10
a5626 3
  tempecx >>= 16;                               /* BPLHCFACT  */
  if((HwInfo->jChipType < SIS_315H) || (SiS_Pr->SiS_IF_DEF_FSTN) || (SiS_Pr->SiS_IF_DEF_DSTN)) {
     if(modeflag & HalfDCLK) tempecx >>= 1;
d5628 1
a5628 2
  temp = (USHORT)((tempecx & 0xFF00) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x22,temp);     	/* Part1_22h; Panel Link Horizontal Scaling Factor High */
d5630 4
a5633 2
  temp = (USHORT)(tempecx & 0x00FF);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x23,temp);         /* Part1_22h; Panel Link Horizontal Scaling Factor Low */
d5635 5
a5639 1
  /* 630/301B and 630/LVDS do something for 640x480 panels here */
d5641 6
a5646 100
#ifdef SIS315H
  if(SiS_Pr->SiS_IF_DEF_FSTN || SiS_Pr->SiS_IF_DEF_DSTN) {
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x25,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x26,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x27,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x28,0x87);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x29,0x5A);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2A,0x4B);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x44,~0x007,0x03);
     tempax = SiS_Pr->SiS_HDE;                       		/* Blps = lcdhdee(lcdhdes+HDE) + 64 */
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) tempax >>= 1;
     tempax += 64;
     temp = tempax & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x38,temp);
     temp = ((tempax & 0xFF00) >> 8) << 3;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,~0x078,temp);
     tempax += 32;		                     		/* Blpe=lBlps+32 */
     temp = tempax & 0x00FF;
     if(SiS_Pr->SiS_IF_DEF_FSTN) temp = 0;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x39,temp);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3A,0x00);        	/* Bflml=0 */
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x007,0x00);

     tempax = SiS_Pr->SiS_VDE;
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) tempax >>= 1;
     tempax >>= 1;
     temp = tempax & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3B,temp);
     temp = ((tempax & 0xFF00) >> 8) << 3;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x038,temp);

     tempeax = SiS_Pr->SiS_HDE;
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) tempeax >>= 1;
     tempeax <<= 2;                       			/* BDxFIFOSTOP = (HDE*4)/128 */
     tempebx = 128;
     temp = (USHORT)(tempeax % tempebx);
     tempeax = tempeax / tempebx;
     if(temp) tempeax++;
     temp = (USHORT)(tempeax & 0x003F);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x45,~0x0FF,temp);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3F,0x00);         	/* BDxWadrst0 */
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3E,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3D,0x10);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x040,0x00);

     tempax = SiS_Pr->SiS_HDE;
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) tempax >>= 1;
     tempax >>= 4;                        			/* BDxWadroff = HDE*4/8/8 */
     pushcx = tempax;
     temp = tempax & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x43,temp);
     temp = ((tempax & 0xFF00) >> 8) << 3;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x44,~0x0F8,temp);

     tempax = SiS_Pr->SiS_VDE;                             	/* BDxWadrst1 = BDxWadrst0 + BDxWadroff * VDE */
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480_3) tempax >>= 1;
     tempeax = (tempax * pushcx);
     tempebx = 0x00100000 + tempeax;
     temp = (USHORT)tempebx & 0x000000FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x42,temp);
     temp = (USHORT)((tempebx & 0x0000FF00) >> 8);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x41,temp);
     temp = (USHORT)((tempebx & 0x00FF0000) >> 16);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x40,temp);
     temp = (USHORT)(((tempebx & 0x01000000) >> 24) << 7);
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x3C,~0x080,temp);

     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2F,0x03);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x03,0x50);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x04,0x00);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2F,0x01);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0x38);

     if(SiS_Pr->SiS_IF_DEF_FSTN) {
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2b,0x02);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2c,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2d,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x35,0x0c);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x36,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x37,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x38,0x80);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x39,0xA0);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3a,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3b,0xf0);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3c,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3d,0x10);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3e,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x3f,0x00);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x40,0x10);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x41,0x25);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x42,0x80);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x43,0x14);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x44,0x03);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x45,0x0a);
     }
d5648 7
a5654 1
#endif  /* SIS315H */
d5656 10
d5668 2
a5669 4
/************** Set Part 1 ***************/
static void
SiS_SetGroup1(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
              PSIS_HW_INFO HwInfo, USHORT RefreshRateTableIndex)
d5671 2
a5672 7
  UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
  USHORT  temp=0, tempax=0, tempbx=0, tempcx=0;
  USHORT  pushbx=0, CRT1Index=0;
#ifdef SIS315H
  USHORT  tempbl=0;
#endif
  USHORT  modeflag, resinfo=0;
d5674 7
a5680 4
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
d5682 1
a5682 3
     CRT1Index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d5684 42
d5727 1
a5727 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
d5729 3
a5731 4
#ifdef SIS315H
     SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex, HwInfo);
     SiS_SetGroup1_LCDA(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
#endif
d5733 1
a5733 1
  } else {
d5735 4
a5738 3
     if( (HwInfo->jChipType >= SIS_315H) &&
         (SiS_Pr->SiS_IF_DEF_LVDS == 1) &&
	 (SiS_Pr->SiS_VBInfo & SetInSlaveMode) ) {
d5740 16
a5755 1
        SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex, HwInfo);
d5757 1
a5757 1
     } else {
d5759 1
a5759 2
        SiS_SetCRT2Offset(SiS_Pr, ModeNo, ModeIdIndex,
      		          RefreshRateTableIndex, HwInfo);
d5761 1
a5761 9
        if (HwInfo->jChipType < SIS_315H ) {
#ifdef SIS300
    	      SiS_SetCRT2FIFO_300(SiS_Pr, ModeNo, HwInfo);
#endif
        } else {
#ifdef SIS315H
              SiS_SetCRT2FIFO_310(SiS_Pr);
#endif
	}
d5763 1
a5763 1
        SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex, HwInfo);
d5765 1
a5765 1
	/* 1. Horizontal setup */
d5767 1
a5767 1
        if(HwInfo->jChipType < SIS_315H ) {
d5769 7
a5775 1
#ifdef SIS300   /* ------------- 300 series --------------*/
d5777 17
a5793 2
    		temp = (SiS_Pr->SiS_VGAHT - 1) & 0x0FF;   			/* BTVGA2HT 0x08,0x09 */
    		SiS_SetReg(SiS_Pr->SiS_Part1Port,0x08,temp);                   /* CRT2 Horizontal Total */
d5795 1
a5795 2
    		temp = (((SiS_Pr->SiS_VGAHT - 1) & 0xFF00) >> 8) << 4;
    		SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0x0f,temp);          /* CRT2 Horizontal Total Overflow [7:4] */
d5797 8
a5804 2
    		temp = (SiS_Pr->SiS_VGAHDE + 12) & 0x0FF;                       /* BTVGA2HDEE 0x0A,0x0C */
    		SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0A,temp);                   /* CRT2 Horizontal Display Enable End */
d5806 1
a5806 5
    		pushbx = SiS_Pr->SiS_VGAHDE + 12;                               /* bx  BTVGA@@HRS 0x0B,0x0C */
    		tempcx = (SiS_Pr->SiS_VGAHT - SiS_Pr->SiS_VGAHDE) >> 2;
    		tempbx = pushbx + tempcx;
    		tempcx <<= 1;
    		tempcx += tempbx;
d5808 1
a5808 1
    		if(SiS_Pr->SiS_VBType & VB_SISVB) {
d5810 1
a5810 4
		   if(SiS_Pr->UseCustomMode) {
		      tempbx = SiS_Pr->CHSyncStart + 12;
		      tempcx = SiS_Pr->CHSyncEnd + 12;
		   }
d5812 1
a5812 16
      		   if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
		      unsigned char cr4, cr14, cr5, cr15;
		      if(SiS_Pr->UseCustomMode) {
		         cr4  = SiS_Pr->CCRT1CRTC[4];
			 cr14 = SiS_Pr->CCRT1CRTC[14];
			 cr5  = SiS_Pr->CCRT1CRTC[5];
			 cr15 = SiS_Pr->CCRT1CRTC[15];
		      } else {
		         cr4  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[4];
			 cr14 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14];
			 cr5  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[5];
			 cr15 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[15];
		      }
        	      tempbx = ((cr4 | ((cr14 & 0xC0) << 2)) - 1) << 3;
        	      tempcx = (((cr5 & 0x1F) | ((cr15 & 0x04) << (6-2))) - 1) << 3;
      		   }
d5814 7
a5820 7
    		   if((SiS_Pr->SiS_VBInfo & SetCRT2ToTV) && (resinfo == SIS_RI_1024x768)){
        	      if(!(SiS_Pr->SiS_TVMode & TVSetPAL)){
      			 tempbx = 1040;
      			 tempcx = 1042;
      		      }
    		   }
	        }
d5822 7
a5828 3
    		temp = tempbx & 0x00FF;
    		SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0B,temp);                   /* CRT2 Horizontal Retrace Start */
#endif /* SIS300 */
d5830 4
a5833 1
 	} else {
d5835 1
a5835 1
#ifdef SIS315H  /* ------------------- 315/330 series --------------- */
d5837 7
a5843 13
	        tempcx = SiS_Pr->SiS_VGAHT;				       /* BTVGA2HT 0x08,0x09 */
		if(modeflag & HalfDCLK) {
		    if(SiS_Pr->SiS_VBType & VB_SISVB) {
		       tempcx >>= 1;
		    } else {
		       tempax = SiS_Pr->SiS_VGAHDE >> 1;
		       tempcx = SiS_Pr->SiS_HT - SiS_Pr->SiS_HDE + tempax;
		       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
			  tempcx = SiS_Pr->SiS_HT - tempax;
		       }
		    }
		}
		tempcx--;
d5845 4
a5848 2
		temp = tempcx & 0xff;
		SiS_SetReg(SiS_Pr->SiS_Part1Port,0x08,temp);                  /* CRT2 Horizontal Total */
d5850 4
a5853 2
		temp = ((tempcx & 0xff00) >> 8) << 4;
		SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0x0F,temp);         /* CRT2 Horizontal Total Overflow [7:4] */
d5855 4
a5858 9
		tempcx = SiS_Pr->SiS_VGAHT;				       /* BTVGA2HDEE 0x0A,0x0C */
		tempbx = SiS_Pr->SiS_VGAHDE;
		tempcx -= tempbx;
		tempcx >>= 2;
		if(modeflag & HalfDCLK) {
		   tempbx >>= 1;
		   tempcx >>= 1;
		}
		tempbx += 16;
d5860 8
a5867 2
		temp = tempbx & 0xff;
		SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0A,temp);                  /* CRT2 Horizontal Display Enable End */
d5869 5
a5873 4
		pushbx = tempbx;
		tempcx >>= 1;
		tempbx += tempcx;
		tempcx += tempbx;
d5875 10
a5884 1
		if(SiS_Pr->SiS_VBType & VB_SISVB) {
d5886 5
a5890 10
		   if(HwInfo->jChipType >= SIS_661) {
		      if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) ||
		         (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)) {
			 if(resinfo == SIS_RI_1280x1024) {
		            tempcx = 0x30;
			 } else if(resinfo == SIS_RI_1600x1200) {
			    tempcx = 0xff;
			 }
		      }
		   }
d5892 15
a5906 8
		   if(SiS_Pr->UseCustomMode) {
		      tempbx = SiS_Pr->CHSyncStart + 16;
		      tempcx = SiS_Pr->CHSyncEnd + 16;
		      tempax = SiS_Pr->SiS_VGAHT;
		      if(modeflag & HalfDCLK) tempax >>= 1;
		      tempax--;
		      if(tempcx > tempax)  tempcx = tempax;
		   }
d5908 5
a5912 24
             	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
		      unsigned char cr4, cr14, cr5, cr15;
		      if(SiS_Pr->UseCustomMode) {
		         cr4  = SiS_Pr->CCRT1CRTC[4];
			 cr14 = SiS_Pr->CCRT1CRTC[14];
			 cr5  = SiS_Pr->CCRT1CRTC[5];
			 cr15 = SiS_Pr->CCRT1CRTC[15];
		      } else {
		         cr4  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[4];
			 cr14 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14];
			 cr5  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[5];
			 cr15 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[15];
		      }
                      tempbx = ((cr4 | ((cr14 & 0xC0) << 2)) - 3) << 3; 		/* (VGAHRS-3)*8 */
                      tempcx = (((cr5 & 0x1f) | ((cr15 & 0x04) << (5-2))) - 3) << 3; 	/* (VGAHRE-3)*8 */
		      tempcx &= 0x00FF;
		      tempcx |= (tempbx & 0xFF00);
                      tempbx += 16;
                      tempcx += 16;
		      tempax = SiS_Pr->SiS_VGAHT;
		      if(modeflag & HalfDCLK) tempax >>= 1;
		      tempax--;
		      if(tempcx > tempax)  tempcx = tempax;
             	   }
d5914 8
a5921 4
		   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
      		      tempbx = 1040;
      		      tempcx = 1042;
      	     	   }
d5923 6
a5928 1
                }
d5930 9
a5938 3
		temp = tempbx & 0xff;
	 	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0B,temp);                 /* CRT2 Horizontal Retrace Start */
#endif  /* SIS315H */
d5940 5
a5944 1
     	}  /* 315/330 series */
d5946 9
a5954 6
  	tempax = tempbx & 0xFF00;
  	tempbx = pushbx;
  	tempbx = (tempbx & 0x00FF) | ((tempbx & 0xFF00) << 4);
  	tempax |= (tempbx & 0xFF00);
  	temp = (tempax & 0xFF00) >> 8;
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0C,temp);                        /* Overflow */
d5956 5
a5960 2
  	temp = tempcx & 0x00FF;
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0D,temp);                        /* CRT2 Horizontal Retrace End */
d5962 8
a5969 1
  	/* 2. Vertical setup */
d5971 5
a5975 2
  	tempcx = SiS_Pr->SiS_VGAVT - 1;
  	temp = tempcx & 0x00FF;
d5977 8
a5984 16
	if(HwInfo->jChipType < SIS_661) {
           if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
	      if(HwInfo->jChipType < SIS_315H) {
	         if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	            if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSVIDEO | SetCRT2ToAVIDEO)) {
	               temp--;
	            }
                 }
	      } else {
 	         temp--;
              }
           } else if(HwInfo->jChipType >= SIS_315H) {
	      temp--;
	   }
	}
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0E,temp);                        /* CRT2 Vertical Total */
d5986 4
a5989 3
  	tempbx = SiS_Pr->SiS_VGAVDE - 1;
  	temp = tempbx & 0x00FF;
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0F,temp);                        /* CRT2 Vertical Display Enable End */
d5991 16
a6006 3
  	temp = ((tempbx & 0xFF00) << 3) >> 8;
  	temp |= ((tempcx & 0xFF00) >> 8);
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x12,temp);                        /* Overflow (and HWCursor Test Mode) */
d6008 4
a6011 15
	if((HwInfo->jChipType >= SIS_315H) && (HwInfo->jChipType < SIS_661)) {
           tempbx++;
   	   tempax = tempbx;
	   tempcx++;
	   tempcx -= tempax;
	   tempcx >>= 2;
	   tempbx += tempcx;
	   if(tempcx < 4) tempcx = 4;
	   tempcx >>= 2;
	   tempcx += tempbx;
	   tempcx++;
	} else {
  	   tempbx = (SiS_Pr->SiS_VGAVT + SiS_Pr->SiS_VGAVDE) >> 1;                 /*  BTVGA2VRS     0x10,0x11   */
  	   tempcx = ((SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE) >> 4) + tempbx + 1;  /*  BTVGA2VRE     0x11        */
	}
d6013 14
a6026 1
  	if(SiS_Pr->SiS_VBType & VB_SISVB) {
d6028 1
a6028 4
	   if(SiS_Pr->UseCustomMode) {
	      tempbx = SiS_Pr->CVSyncStart;
	      tempcx = (tempcx & 0xFF00) | (SiS_Pr->CVSyncEnd & 0x00FF);
	   }
d6030 4
a6033 22
    	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
	      unsigned char cr8, cr7, cr13, cr9;
	      if(SiS_Pr->UseCustomMode) {
	         cr8  = SiS_Pr->CCRT1CRTC[8];
		 cr7  = SiS_Pr->CCRT1CRTC[7];
		 cr13 = SiS_Pr->CCRT1CRTC[13];
		 cr9  = SiS_Pr->CCRT1CRTC[9];
	      } else {
	         cr8  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[8];
		 cr7  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[7];
		 cr13 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[13];
		 cr9  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[9];
	      }
      	      tempbx = cr8;
      	      if(cr7 & 0x04)  tempbx |= 0x0100;
      	      if(cr7 & 0x80)  tempbx |= 0x0200;
      	      if(cr13 & 0x08) tempbx |= 0x0400;
      	      tempcx = (tempcx & 0xFF00) | (cr9 & 0x00FF);
    	   }
  	}
  	temp = tempbx & 0x00FF;
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x10,temp);           /* CRT2 Vertical Retrace Start */
d6035 4
a6038 3
  	temp = ((tempbx & 0xFF00) >> 8) << 4;
  	temp |= (tempcx & 0x000F);
  	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x11,temp);           /* CRT2 Vert. Retrace End; Overflow; "Enable CRTC Check" */
d6040 4
a6043 1
  	/* 3. Panel delay compensation */
d6045 8
a6052 1
  	if(HwInfo->jChipType < SIS_315H) {
d6054 4
a6057 1
#ifdef SIS300  /* ---------- 300 series -------------- */
d6059 16
a6074 2
	   if(SiS_Pr->SiS_VBType & VB_SISVB) {
	        temp = 0x20;
d6076 4
a6079 45
		if(HwInfo->jChipType == SIS_300) {
		   temp = 0x10;
		   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)  temp = 0x2c;
		   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) temp = 0x20;
		}
		if(SiS_Pr->SiS_VBType & VB_SIS301) {
		   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) temp = 0x20;
		}
		if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x960)     temp = 0x24;
		if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom)       temp = 0x2c;
		if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) 		temp = 0x08;
		if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
      		   if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) 	temp = 0x2c;
      		   else 					temp = 0x20;
    	        }
		if((ROMAddr) && (SiS_Pr->SiS_UseROM)) {
		   if(ROMAddr[0x220] & 0x80) {
		      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoYPbPrHiVision)
			 temp = ROMAddr[0x221];
		      else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision)
			 temp = ROMAddr[0x222];
		      else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)
			 temp = ROMAddr[0x223];
		      else
			temp = ROMAddr[0x224];
		      temp &= 0x3c;
		   }
		}
		if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
		   if(SiS_Pr->PDC != -1)  temp = SiS_Pr->PDC & 0x3c;
		}
	   } else {
	        temp = 0x20;
		if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
		   if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) temp = 0x04;
		}
		if((ROMAddr) && SiS_Pr->SiS_UseROM) {
		   if(ROMAddr[0x220] & 0x80) {
		      temp = ROMAddr[0x220] & 0x3c;
		   }
		}
		if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
		   if(SiS_Pr->PDC != -1) temp = SiS_Pr->PDC & 0x3c;
		}
	   }
d6081 4
a6084 1
    	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,~0x3C,temp);         /* Panel Link Delay Compensation; (Software Command Reset; Power Saving) */
d6086 7
a6092 1
#endif  /* SIS300 */
d6094 3
a6096 1
  	} else {
d6098 19
a6116 1
#ifdef SIS315H   /* --------------- 315/330 series ---------------*/
d6118 9
a6126 1
   	   if(HwInfo->jChipType < SIS_661) {
d6128 3
a6130 1
	      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {  /* LVDS */
d6132 10
a6141 2
	         if(HwInfo->jChipType == SIS_740) temp = 0x03;
	         else 		                  temp = 0x00;
d6143 1
a6143 7
	 	 if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) temp = 0x0a;
		 tempbl = 0xF0;
		 if(HwInfo->jChipType == SIS_650) {
		    if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
		       if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) tempbl = 0x0F;
		    }
		 }
d6145 1
a6145 7
		 if(SiS_Pr->SiS_IF_DEF_DSTN || SiS_Pr->SiS_IF_DEF_FSTN) {
		    temp = 0x08;
		    tempbl = 0;
		    if((ROMAddr) && (SiS_Pr->SiS_UseROM)) {
		       if(ROMAddr[0x13c] & 0x80) tempbl = 0xf0;
		    }
		 }
d6147 1
a6147 2
		 SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,tempbl,temp);	    /* Panel Link Delay Compensation */
	      }
d6149 5
a6153 1
	   } /* < 661 */
d6155 11
a6165 4
    	   tempax = 0;
    	   if (modeflag & DoubleScanMode) tempax |= 0x80;
    	   if (modeflag & HalfDCLK)       tempax |= 0x40;
    	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2C,0x3f,tempax);
d6167 3
a6169 1
#endif  /* SIS315H */
d6171 7
a6177 1
  	}
d6179 2
a6180 1
     }  /* Slavemode */
d6182 7
a6188 1
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
d6190 34
a6223 2
        /* For 301BDH with LCD, we set up the Panel Link */
        if( (SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) ) {
d6225 9
a6233 2
	    SiS_SetGroup1_LVDS(SiS_Pr, ModeNo, ModeIdIndex,
	                       HwInfo, RefreshRateTableIndex);
d6235 4
a6238 1
        } else if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
d6240 1
a6240 3
    	    SiS_SetGroup1_301(SiS_Pr, ModeNo, ModeIdIndex,
	                      HwInfo, RefreshRateTableIndex);
        }
d6242 7
a6248 12
     } else {

        if(HwInfo->jChipType < SIS_315H) {

	   SiS_SetGroup1_LVDS(SiS_Pr, ModeNo, ModeIdIndex,
	                        HwInfo, RefreshRateTableIndex);
	} else {

	   if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
              if((!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) || (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
    	          SiS_SetGroup1_LVDS(SiS_Pr, ModeNo,ModeIdIndex,
	                              HwInfo,RefreshRateTableIndex);
d6250 4
a6253 5
	   } else {
	      SiS_SetGroup1_LVDS(SiS_Pr, ModeNo,ModeIdIndex,
	                         HwInfo,RefreshRateTableIndex);
	   }

d6255 1
d6257 15
a6272 2
  } /* LCDA */
}
d6274 10
a6283 3
/*********************************************/
/*         SET PART 2 REGISTER GROUP         */
/*********************************************/
d6286 13
a6298 13
static UCHAR *
SiS_GetGroup2CLVXPtr(SiS_Private *SiS_Pr, int tabletype, PSIS_HW_INFO HwInfo)
{
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
   const UCHAR  *tableptr = NULL;
   USHORT a, b, p = 0;

   a = SiS_Pr->SiS_VGAHDE;
   b = SiS_Pr->SiS_HDE;
   if(tabletype) {
      a = SiS_Pr->SiS_VGAVDE;
      b = SiS_Pr->SiS_VDE;
   }
d6300 2
a6301 1
   if((HwInfo->jChipType >= SIS_661) && (ROMAddr = (UCHAR *)HwInfo->pjVirtualRomBase) && SiS_Pr->SiS_UseROM) {
d6303 12
a6314 25
      if(a < b) {
         p = ROMAddr[0x278] | (ROMAddr[0x279] << 8);
      } else if(a == b) {
         p = ROMAddr[0x27a] | (ROMAddr[0x27b] << 8);
      } else {
         if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	    p = ROMAddr[0x27e] | (ROMAddr[0x27f] << 8);
	 } else {
	    p = ROMAddr[0x27c] | (ROMAddr[0x27d] << 8);
	 }
	 if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	    if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) 	 p = ROMAddr[0x280] | (ROMAddr[0x281] << 8);
	    else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) p = ROMAddr[0x282] | (ROMAddr[0x283] << 8);
	    else 				 	 p = ROMAddr[0x284] | (ROMAddr[0x285] << 8);
	 } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	    p = ROMAddr[0x286] | (ROMAddr[0x287] << 8);
	 }
	 do {
	    if((ROMAddr[p] | ROMAddr[p+1] << 8) == a) break;
	    p += 0x42;
	 } while((ROMAddr[p] | ROMAddr[p+1] << 8) != 0xffff);
	 if((ROMAddr[p] | ROMAddr[p+1] << 8) == 0xffff) p -= 0x42;
      }
      p += 2;
      return(&ROMAddr[p]);
d6316 4
a6319 1
   } else {
d6321 1
a6321 14
      if(a < b) {
         tableptr = SiS_Part2CLVX_1;
      } else if(a == b) {
         tableptr = SiS_Part2CLVX_2;
      } else {
         if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	    tableptr = SiS_Part2CLVX_4;
	 } else {
	    tableptr = SiS_Part2CLVX_3;
	 }
	 if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	    if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) 	 tableptr = SiS_Part2CLVX_3;
	    else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) tableptr = SiS_Part2CLVX_3;
	    else 				         tableptr = SiS_Part2CLVX_5;
d6323 10
a6332 12
	 } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	    tableptr = SiS_Part2CLVX_6;
	 }
	 do {
	    if((tableptr[p] | tableptr[p+1] << 8) == a) break;
	    p += 0x42;
	 } while((tableptr[p] | tableptr[p+1] << 8) != 0xffff);
	 if((tableptr[p] | tableptr[p+1] << 8) == 0xffff) p -= 0x42;
      }
      p += 2;
      return((UCHAR *)&tableptr[p]);
   }
d6335 2
a6336 3
static void
SiS_SetGroup2_C_ELV(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
	      	    USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
d6338 6
a6343 19
   UCHAR *tableptr;
   int i, j;
   UCHAR temp;

   if(!(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV))) return; 

   tableptr = SiS_GetGroup2CLVXPtr(SiS_Pr, 0, HwInfo);
   for(i = 0x80, j = 0; i <= 0xbf; i++, j++) {
      SiS_SetReg(SiS_Pr->SiS_Part2Port, i, tableptr[j]);
   }
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
      tableptr = SiS_GetGroup2CLVXPtr(SiS_Pr, 1, HwInfo);
      for(i = 0xc0, j = 0; i <= 0xff; i++, j++) {
         SiS_SetReg(SiS_Pr->SiS_Part2Port, i, tableptr[j]);
      }
   }
   temp = 0x10;
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) temp |= 0x04;
   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x4e,0xeb,temp);
d6346 2
a6347 4
static void
SiS_GetCRT2Part2Ptr(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
		    USHORT RefreshRateTableIndex,USHORT *CRT2Index,
		    USHORT *ResIndex,PSIS_HW_INFO HwInfo)
d6349 1
a6349 1
  USHORT tempbx,tempal;
d6351 15
a6365 4
  if(ModeNo <= 0x13)
      	tempal = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  else
      	tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d6367 7
a6373 10
  tempbx = SiS_Pr->SiS_LCDResInfo;

  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)      tempbx += 16;
  else if(SiS_Pr->SiS_SetFlag & LCDVESATiming) tempbx += 32;

  if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
        tempbx = 100;
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)      tempbx = 101;
  	else if(SiS_Pr->SiS_SetFlag & LCDVESATiming) tempbx = 102;
d6375 4
a6378 7
  } else if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
           tempbx = 103;
           if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)      tempbx = 104;
  	   else if(SiS_Pr->SiS_SetFlag & LCDVESATiming) tempbx = 105;
	}
d6380 7
a6386 3
  } else if(SiS_Pr->SiS_CustomT == CUT_ASUSA2H_2) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        if(SiS_Pr->SiS_SetFlag & LCDVESATiming) tempbx = 106;
d6388 1
d6390 1
d6392 6
a6397 3
  *CRT2Index = tempbx;
  *ResIndex = tempal & 0x3F;
}
d6400 9
d6410 21
a6430 5
/* For ECS A907. Highly preliminary. */
static void
SiS_Set300Part2Regs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
    		    USHORT ModeIdIndex, USHORT RefreshRateTableIndex,
		    USHORT ModeNo)
d6432 8
a6439 3
  USHORT crt2crtc, resindex;
  int    i,j;
  const  SiS_Part2PortTblStruct *CRT2Part2Ptr = NULL;
d6441 7
a6447 3
  if(HwInfo->jChipType != SIS_300) return;
  if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) return;
  if(SiS_Pr->UseCustomMode) return;
d6449 7
a6455 2
  if(ModeNo <= 0x13) {
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d6457 12
a6468 1
     crt2crtc = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d6470 1
d6472 1
a6472 3
  resindex = crt2crtc & 0x3F;
  if(SiS_Pr->SiS_SetFlag & LCDVESATiming) CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_1;
  else                                    CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_2;
d6474 4
a6477 5
  /* The BIOS code (1.16.51,56) is obviously a fragment! */
  if(ModeNo > 0x13) {
     CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_1;
     resindex = 4;
  }
d6479 3
a6481 13
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x01,0x80,(CRT2Part2Ptr+resindex)->CR[0]);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x02,0x80,(CRT2Part2Ptr+resindex)->CR[1]);
  for(i = 2, j = 0x04; j <= 0x06; i++, j++ ) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
  }
  for(j = 0x1c; j <= 0x1d; i++, j++ ) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
  }
  for(j = 0x1f; j <= 0x21; i++, j++ ) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
  }
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x23,(CRT2Part2Ptr+resindex)->CR[10]);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x25,0x0f,(CRT2Part2Ptr+resindex)->CR[11]);
a6482 1
#endif
d6484 2
a6485 2
static void
SiS_SetTVSpecial(SiS_Private *SiS_Pr, USHORT ModeNo)
d6487 1
a6487 3
  if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) return;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision)) return;
  if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p | TVSetYPbPr750p)) return;
d6489 3
a6491 32
  if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
     if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
        const UCHAR specialtv[] = {
		0xa7,0x07,0xf2,0x6e,0x17,0x8b,0x73,0x53,
		0x13,0x40,0x34,0xf4,0x63,0xbb,0xcc,0x7a,
		0x58,0xe4,0x73,0xda,0x13
	};
	int i, j;
	for(i = 0x1c, j = 0; i <= 0x30; i++, j++) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,i,specialtv[j]);
	}
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x43,0x72);
	if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750)) {
	   if(SiS_Pr->SiS_TVMode & TVSetPALM) {
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x14);
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x1b);
	   } else {
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x14);  /* 15 */
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x1a);  /* 1b */
	   }
	}
     }
  } else {
     if((ModeNo == 0x38) || (ModeNo == 0x4a) || (ModeNo == 0x64) ||
        (ModeNo == 0x52) || (ModeNo == 0x58) || (ModeNo == 0x5c)) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x1b);  /* 21 */
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x54);  /* 5a */
     } else {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x1a);  /* 21 */
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x53);  /* 5a */
     }
  }
d6494 1
a6494 2
static void
SiS_SetGroup2_Tail(SiS_Private *SiS_Pr, USHORT ModeNo)
d6498 4
a6501 18
  if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
     if(SiS_Pr->SiS_VGAVDE == 525) {
	temp = 0xc3;
	if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	   temp++;
	   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) temp += 2;
	}
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2f,temp);
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x30,0xb3);
     } else if(SiS_Pr->SiS_VGAVDE == 420) {
	temp = 0x4d;
	if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	   temp++;
	   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) temp++;
	}
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2f,temp);
     }
  }
d6503 1
a6503 34
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
	if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part2Port,0x1a,0x03);
	   /* Not always for LV, see SetGroup2() */
	}
	temp = 1;
	if(ModeNo <= 0x13) temp = 3;
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x0b,temp);
     }
#if 0
     /* 651+301C, for 1280x768 - do I really need that? */
     if((SiS_Pr->SiS_PanelXRes == 1280) && (SiS_Pr->SiS_PanelYRes == 768)) {
        if(SiS_Pr->SiS_VBInfo & SetSimuScanMode) {
	   if(((SiS_Pr->SiS_HDE == 640) && (SiS_Pr->SiS_VDE == 480)) ||
	      ((SiS_Pr->SiS_HDE == 320) && (SiS_Pr->SiS_VDE == 240))) {
	      SiS_SetReg(SiS_Part2Port,0x01,0x2b);
	      SiS_SetReg(SiS_Part2Port,0x02,0x13);
	      SiS_SetReg(SiS_Part2Port,0x04,0xe5);
	      SiS_SetReg(SiS_Part2Port,0x05,0x08);
	      SiS_SetReg(SiS_Part2Port,0x06,0xe2);
	      SiS_SetReg(SiS_Part2Port,0x1c,0x21);
	      SiS_SetReg(SiS_Part2Port,0x1d,0x45);
	      SiS_SetReg(SiS_Part2Port,0x1f,0x0b);
	      SiS_SetReg(SiS_Part2Port,0x20,0x00);
	      SiS_SetReg(SiS_Part2Port,0x21,0xa9);
	      SiS_SetReg(SiS_Part2Port,0x23,0x0b);
	      SiS_SetReg(SiS_Part2Port,0x25,0x04);
	   }
	}
     }
#endif
  }
}
d6505 5
a6509 3
static void
SiS_SetGroup2(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,USHORT RefreshRateTableIndex,
	      PSIS_HW_INFO HwInfo)
d6511 2
a6512 3
  USHORT      i, j, tempax, tempbx, tempcx, temp;
  USHORT      push1, push2, modeflag, crt2crtc;
  ULONG       longtemp, tempeax;
a6514 2
#ifdef SIS315H
  USHORT      resindex, CRT2Index;
d6516 2
a6517 2
#endif
#ifdef SIS300
d6519 2
a6520 2
       0xc3,0x9e,0xc3,0x9e,0x02,0x02,0x02,
       0xab,0x87,0xab,0x9e,0xe7,0x02,0x02
a6521 1
#endif  
d6523 43
a6565 3
#ifdef SIS315H   
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) return;
#endif
d6567 4
a6570 3
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d6572 2
a6573 5
     if(SiS_Pr->UseCustomMode) {
        modeflag = SiS_Pr->CModeFlag;
	crt2crtc = 0;
     } else {
        modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
a6574 1
     }
d6577 14
a6590 9
  temp = 0;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToAVIDEO)) temp |= 0x08;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToSVIDEO)) temp |= 0x04;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToSCART)     temp |= 0x02;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision)  temp |= 0x01;

  if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) 	      temp |= 0x10;

  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x00,temp);
d6594 11
a6604 10

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {

     TimingPoint = SiS_Pr->SiS_HiTVExtTiming;
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        TimingPoint = SiS_Pr->SiS_HiTVSt2Timing;
        if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
	   TimingPoint = SiS_Pr->SiS_HiTVSt1Timing;
#if 0
           if(!(modeflag & Charx8Dot))  TimingPoint = SiS_Pr->SiS_HiTVTextTiming;
d6606 1
a6606 2
        }
     }
d6608 2
a6609 1
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
d6611 5
a6615 3
     if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p)      TimingPoint = &SiS_YPbPrTable[2][0];
     else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) TimingPoint = &SiS_YPbPrTable[1][0];
     else					  TimingPoint = &SiS_YPbPrTable[0][0];
d6617 1
a6617 1
     PhasePoint = SiS_Pr->SiS_NTSCPhase;
d6619 3
a6621 1
  } else if(SiS_Pr->SiS_TVMode & TVSetPAL) {
d6623 5
a6627 22
     if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
         ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	   (SiS_Pr->SiS_TVMode & TVSetTVSimuMode) ) ) {
        PhasePoint = SiS_Pr->SiS_PALPhase2;
     }

  } else {

     TimingPoint = SiS_Pr->SiS_NTSCTiming;
     PhasePoint  = SiS_Pr->SiS_NTSCPhase;
     if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
	PhasePoint = SiS_Pr->SiS_PALPhase;
     }

     if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
	 ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	   (SiS_Pr->SiS_TVMode & TVSetTVSimuMode) ) ) {
        PhasePoint = SiS_Pr->SiS_NTSCPhase2;
	if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
	   PhasePoint = SiS_Pr->SiS_PALPhase2;
	}
     }
d6629 2
d6632 2
d6635 30
a6664 16
  if(SiS_Pr->SiS_TVMode & TVSetPALM) {
     PhasePoint = SiS_Pr->SiS_PALMPhase;
     if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
	 ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	   (SiS_Pr->SiS_TVMode & TVSetTVSimuMode) ) ) {
        PhasePoint = SiS_Pr->SiS_PALMPhase2;
     }
  }

  if(SiS_Pr->SiS_TVMode & TVSetPALN) {
     PhasePoint = SiS_Pr->SiS_PALNPhase;
     if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) &&
	 ( (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
	   (SiS_Pr->SiS_TVMode & TVSetTVSimuMode) ) ) {
	PhasePoint = SiS_Pr->SiS_PALNPhase2;
     }
d6667 11
a6677 6
  if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
     PhasePoint = SiS_Pr->SiS_SpecialPhase;
     if(SiS_Pr->SiS_TVMode & TVSetPALM) {
        PhasePoint = SiS_Pr->SiS_SpecialPhaseM;
     } else if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
        PhasePoint = SiS_Pr->SiS_SpecialPhaseJ;
d6680 1
d6682 2
a6683 2
  for(i=0x31, j=0; i<=0x34; i++, j++) {
     SiS_SetReg(SiS_Pr->SiS_Part2Port,i,PhasePoint[j]);
d6686 2
a6687 2
  for(i=0x01, j=0; i<=0x2D; i++, j++) {
     SiS_SetReg(SiS_Pr->SiS_Part2Port,i,TimingPoint[j]);
d6689 2
a6690 2
  for(i=0x39; i<=0x45; i++, j++) {
     SiS_SetReg(SiS_Pr->SiS_Part2Port,i,TimingPoint[j]);
d6694 2
a6695 1
     if(SiS_Pr->SiS_ModeType != ModeText) {
d6697 3
a6699 1
     }
d6704 18
a6721 12
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x35,SiS_Pr->SiS_RY1COE);
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x36,SiS_Pr->SiS_RY2COE);
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x37,SiS_Pr->SiS_RY3COE);
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x38,SiS_Pr->SiS_RY4COE);

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) 	tempax = 950;
  else if(SiS_Pr->SiS_TVMode & TVSetPAL)      	tempax = 520;
  else 			            		tempax = 440;

  if( ( (!(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision)) && (SiS_Pr->SiS_VDE <= tempax) ) ||
      ( (SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision) &&
        ((SiS_Pr->SiS_VGAHDE == 1024) || (SiS_Pr->SiS_VDE <= tempax)) ) ) {
d6725 1
a6725 1
     tempax &= 0x00ff;
d6727 14
a6740 10
     temp = tempax + (USHORT)TimingPoint[0];
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,temp);

     temp = tempax + (USHORT)TimingPoint[1];
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,temp);

     if((SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoHiVision) && (SiS_Pr->SiS_VGAHDE >= 1024)) {
        if(SiS_Pr->SiS_TVMode & TVSetPAL) {
           SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x1b);  /* 19 */
           SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x54);  /* 52 */
d6742 7
a6748 2
           SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x17);
           SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x1d);
d6755 8
a6762 1
  if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempcx >>= 1;
d6764 3
a6766 1
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) tempcx--;
d6768 1
a6768 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1B,temp);
d6773 3
a6775 1
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) tempcx++;
d6781 3
a6783 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) tempcx -= 4;
d6790 2
d6793 1
a6793 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x24,temp);
d6797 2
d6800 4
a6803 3
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     tempbx -= 4;
     tempcx = tempbx;
d6805 1
d6812 1
a6812 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x27,temp);
d6817 3
a6819 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) tempcx -= 4;
d6832 2
a6833 1
     tempcx = SiS_GetVGAHT2(SiS_Pr) - 1;
d6836 1
a6836 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2E,temp);
d6842 2
a6843 2
  if(HwInfo->jChipType < SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) tempbx >>= 1;
d6845 13
a6857 6
     if( (SiS_Pr->SiS_VBInfo & SetCRT2ToTV) &&
         (!(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p|TVSetYPbPr750p))) ) {
	tempbx >>= 1;
	if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
	   if(ModeNo <= 0x13) {
	      if(crt2crtc == 1) tempbx++;
d6859 1
a6859 6
	} else if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
	   if(crt2crtc == 4) {
              if(SiS_Pr->SiS_ModeType <= 3) tempbx++;
	   }
	}
     }
d6863 9
a6871 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
d6873 3
a6875 12
        if((ModeNo == 0x2f) || (ModeNo == 0x5d) || (ModeNo == 0x5e)) temp++;
     }
  }

  if(HwInfo->jChipType < SIS_661) {
     /* From 1.10.7w - doesn't make sense */
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
           if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {
	      if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {   /* SetFlag?? */
	         if(ModeNo == 0x03) temp++;
	      }
d6877 1
a6877 1
        }
d6880 1
a6880 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2F,temp);
d6882 16
a6897 5
  temp = (tempcx >> 8) & 0x0F;
  temp |= (((tempbx >> 8) << 6) & 0xC0);
  if(!(SiS_Pr->SiS_VBInfo & (SetCRT2ToHiVision | SetCRT2ToYPbPr525750 | SetCRT2ToSCART))) {
     temp |= 0x10;
     if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToSVIDEO)) temp |= 0x20;
d6899 3
a6901 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x30,temp);
d6903 2
a6904 1
  if((HwInfo->jChipType > SIS_315H) && (HwInfo->jChipType < SIS_661)) {
d6906 3
a6908 5
        if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302LV | VB_SIS302ELV)) {
           if( (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) ||
               (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) ) {
              SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x10,0x60);
	   }
d6913 22
a6934 23
  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     tempbx = SiS_Pr->SiS_VDE;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        if(!(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p | TVSetYPbPr750p))) {
           tempbx >>= 1;
	}
     }
     tempbx -= 3;
     if(HwInfo->jChipType >= SIS_661) {
        if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302LV | VB_SIS302ELV)) {  /* Why not 301B/LV? */
           temp = 0;
	   if(tempcx & 0x0400) temp |= 0x20;
	   if(tempbx & 0x0400) temp |= 0x40;
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x10,temp);
	}
     }
     tempbx &= 0x03ff;
     temp = ((tempbx & 0xFF00) >> 8) << 5;
     temp |= 0x18;
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x46,temp);
     temp = tempbx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x47,temp);

d6937 1
a6937 1
  tempbx = 0;
d6939 5
a6943 4
     if(SiS_Pr->SiS_VGAHDE >= SiS_Pr->SiS_HDE) {
        tempax = 0;
        tempbx |= 0x2000;
     }
d6947 11
a6957 8
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(SiS_Pr->SiS_VGAHDE >= 1024) {
        if((!(modeflag & HalfDCLK)) || (HwInfo->jChipType < SIS_315H)) {
           tempcx = 0x1920;
           if(SiS_Pr->SiS_VGAHDE >= 1280) {
              tempcx = 0x1420;
              tempbx &= ~0x2000;
           }
d6959 2
a6960 1
     }
d6963 12
a6974 7
  if(!(tempbx & 0x2000)) {
     if(modeflag & HalfDCLK) {
        tempcx = (tempcx & 0xFF00) | ((tempcx << 1) & 0x00FF);
     }
     longtemp = (SiS_Pr->SiS_VGAHDE * ((tempcx & 0xFF00) >> 8)) / (tempcx & 0x00FF);
     longtemp <<= 13;
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
d6976 10
a6985 6
     }
     tempeax = longtemp / SiS_Pr->SiS_HDE;
     if(longtemp % SiS_Pr->SiS_HDE) tempeax++;
     tempax = (USHORT)tempeax;
     tempbx |= (tempax & 0x1F00);
     tempcx = (tempax & 0xFF00) >> (8 + 5);
d6988 4
a6991 2
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x44,tempax);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x45,0xC0,(tempbx >> 8));
d6994 24
d7019 3
a7021 26
     temp = tempcx & 0x0007;
     if(tempbx & 0x2000) temp = 0;
     if((HwInfo->jChipType < SIS_661) || (!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD))) {
        temp |= 0x18;
     }
     SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x46,0xE0,temp);

     if(SiS_Pr->SiS_TVMode & TVSetPAL) {
        tempbx = 0x0382;
        tempcx = 0x007e;
     } else {
        tempbx = 0x0369;
        tempcx = 0x0061;
     }
     temp = (tempbx & 0x00FF) ;
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x4B,temp);
     temp = (tempcx & 0x00FF) ;
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x4C,temp);
     temp = (tempcx & 0x0300) >> (8 - 2);
     temp |= ((tempbx >> 8) & 0x03);
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
        temp |= 0x10;
	if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p)      temp |= 0x20;
	else if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) temp |= 0x40;
     }
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x4D,temp);
d7023 18
a7040 2
     temp = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x43);
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x43,(USHORT)(temp - 3));
a7041 7
     SiS_SetTVSpecial(SiS_Pr, ModeNo);

     if(SiS_Pr->SiS_VBType & VB_SIS301C) {
        temp = 0;
        if(SiS_Pr->SiS_TVMode & TVSetPALM) temp = 8;
        SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x4e,0xf7,temp);
     }
d7043 5
d7049 1
d7051 5
a7055 4
  if(SiS_Pr->SiS_TVMode & TVSetPALM) {
     if(!(SiS_Pr->SiS_TVMode & TVSetNTSC1024)) {
        temp = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x01);
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,temp - 1);
d7057 34
a7090 6
     SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x00,0xEF);
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,0x0B,0x00);
d7094 1
a7094 3
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) return;

  /* From here: Part2 LCD setup */
d7097 5
a7101 2
  if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
  tempbx--;			         	/* RHACTE = HDE - 1 */
d7103 3
a7105 2
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2C,temp);
  temp = (tempbx & 0xFF00) >> 4;
d7110 6
a7115 7
     if(SiS_Pr->SiS_ModeType == ModeEGA) {
        if(SiS_Pr->SiS_VGAHDE >= 1024) {
           temp = 0x02;
	   if(HwInfo->jChipType >= SIS_315H) {
              if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
                 temp = 0x01;
	      }
d7117 3
a7119 2
        }
     }
d7121 4
a7124 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x0B,temp);
d7126 1
a7126 1
  tempbx = SiS_Pr->SiS_VDE - 1;
d7128 1
a7128 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x03,temp);
d7132 2
a7133 3
  tempcx = SiS_Pr->SiS_VT - 1;
  temp = tempcx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x19,temp);
d7135 3
a7137 1
  temp = ((tempcx & 0xFF00) >> 8) << 5;
d7139 21
a7159 5
  /* Enable dithering; only do this for 32bpp mode */
  if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
     if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x01) {
        temp |= 0x10;
     }
d7162 1
a7162 2
  /* Must do special for Compaq1280; Acer1280 OK, Clevo1400 OK, COMPAL1400 OK */
  /* Compaq1280 panel loses sync if using CR37 sync info. */
d7164 13
a7176 19
     if((HwInfo->jChipType >= SIS_315H) && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {
	if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) &&
	   (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024)) {
	   if(SiS_Pr->SiS_LCDInfo & LCDSync) {
	      temp |= ((SiS_Pr->SiS_LCDInfo & 0xc0) >> 6);
	   }
	} else if((SiS_Pr->SiS_CustomT == CUT_CLEVO1400) &&
	          (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)) {
	   temp |= 0x03;
	} else {
           temp |= (SiS_GetReg(SiS_Pr->SiS_P3d4,0x37) >> 6);
	   temp |= 0x08;
	   if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) temp |= 0x04;
	}
     } else {
        if(SiS_Pr->SiS_LCDInfo & LCDSync) {
	   temp |= ((SiS_Pr->SiS_LCDInfo & 0xc0) >> 6);
	}
     }
d7178 1
a7178 2

  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1A,temp);
d7186 7
a7192 121
#if 0  /* Use the 315/330 series code for now */
  if((HwInfo->jChipType >= SIS_661)          &&
     (SiS_Pr->SiS_VBType & VB_SIS301LV302LV) &&
     (ROMAddr && SiS_Pr->SiS_UseROM)) {

      /* This is done for the LVDS bridges only, since
       * the TMDS panels already work correctly with
       * the old code. Besides, we only do that if
       * we can get the data from the ROM, I am tired
       * of carrying a lot of tables around.
       */

#ifdef SIS315H 							/* ------------ 661/741/760 series --------- */
      UCHAR *myptr = NULL, myptr1 = NULL;

      myptr = (UCHAR *)GetLCDPtr661(SiS_Pr, HwInfo, 6, ModeNo, ModeIdIndex, RefreshRateTableIndex);
      myptr1 = (UCHAR *)GetLCDStructPtr661(SiS_Pr, HwInfo);

      tempbx = (myptr[3] | (myptr[4] << 8)) & 0x0fff;
      tempcx = SiS_Pr->PanelYRes;
      if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
         tempcx = SiS_Pr->SiS_VDE;
      }

      tempcx += tempbx;
      if(tempcx >= SiS_Pr->SiS_VT) tempcx -= SiS_Pr->SiS_VT;

      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,tempbx);
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,tempcx);

      tempcx &= 0x07ff;
      tempbx &= 0x07ff;
      temp = (tempcx >> 8) << 3;
      temp |= (tempbx >> 8);
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,temp);

      tempbx = (myptr[4] | (myptr[5] << 8)) >> 4;
      tempcx = myptr1[6];
      if(SiS_Pr->SiS_LCDInfo & LCDPass11) tempcx = myptr[7];

      tempcx += tempbx;
      if(tempcx >= SiS_Pr->SiS_VT) tempcx -= SiS_Pr->SiS_VT;

      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,tempbx);
      temp = tempcx & 0x000f;
      temp |= ((tempbx & 0x0f00) >> 4);
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,temp);

      tempax = SiS_Pr->SiS_HT;
      tempbx = (myptr[0] | (myptr[1] << 8)) & 0x0fff;
      tempcx = SiS_Pr->PanelXRes;
      if(SiS_Pr->SiS_LCDInfo & LCDPass11) tempcx = SiS_Pr->SiS_HDE;

      if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
         tempax >>= 1;
	 tempbx >>= 1;
	 tempcx >>= 1;
      }
      if(SiS_Pr->SiS_VBType & VB_SIS302LV)                 tempbx++;
      if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) tempbx++;

      tempcx += tempbx;
      if(tempcx >= tempax) tempcx -= tempax;

      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1f,tempbx);
      temp = ((tempbx & 0xff00) >> 8) << 4;
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x20,temp);
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x23,tempcx);
      temp = tempcx >> 8;
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x25,temp);

      tempax = SiS_Pr->SiS_HT;
      tempbx = (myptr[1] | (myptr[2] << 8)) >> 4;
      tempcx = myptr1[5];
      if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
         tempcx = myptr[6];
      }
      if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
         tempax >>= 1;
	 tempbx >>= 1;
	 tempcx >>= 1;
      }
      if(SiS_Pr->SiS_VBType & VB_SIS302LV) tempbx++;

      tempcx += tempbx;
      if(tempcx >= tempax) tempcx -= tempax;

      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1c,tempbx);
      temp = (tempbx & 0x0f00) >> 4;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1d,0x0f,temp);
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x21,tempcx);

      if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
         if(SiS_Pr->SiS_VGAVDE == 525) {
	    temp = 0xc3;
	    if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	       temp++;
	       if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) temp += 2;
	    }
	    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2f,temp);
	    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x30,0xb3);
	 } else if(SiS_Pr->SiS_VGAVDE == 420) {
	    temp = 0x4d;
	    if(SiS_Pr->SiS_ModeType <= ModeVGA) {
	       temp++;
	       if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) temp++;
	    }
	    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2f,temp);
	 }
      }

#endif

  } else
#endif
         if((HwInfo->jChipType >= SIS_315H)                    &&
            (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)            &&
            ((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768)  ||
             (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) ||
             (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) ||
             (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)) ) {
d7194 1
a7194 1
#ifdef SIS315H 							/* ------------- 315/330 series ------------ */
d7196 2
a7197 2
      SiS_GetCRT2Part2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                          &CRT2Index, &resindex, HwInfo);
d7204 1
a7204 1
        case Panel_1024x768  + 16: CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_2;  break;  /* Non-Expanding */
d7208 1
a7208 1
        case Panel_1024x768  + 32: CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_3;  break;  /* VESA Timing */
a7211 7
	case 100:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Compaq1280x1024_1; break;  /* Custom */
	case 101:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Compaq1280x1024_2; break;
	case 102:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Compaq1280x1024_3; break;
	case 103:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Clevo1024x768_1; break;    /* Custom */
	case 104:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Clevo1024x768_2; break;
	case 105:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Clevo1024x768_3; break;
	case 106:		   CRT2Part2Ptr = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_Asus1024x768_3; break;
d7218 1
a7218 1
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
d7221 1
a7221 1
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
d7224 1
a7224 1
        SiS_SetReg(SiS_Pr->SiS_Part2Port,j,(CRT2Part2Ptr+resindex)->CR[i]);
d7226 1
a7226 1
      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x23,(CRT2Part2Ptr+resindex)->CR[10]);
d7229 19
a7247 2
      SiS_SetGroup2_Tail(SiS_Pr, ModeNo);
#endif
d7249 10
a7258 1
  } else {   /* ------ other bridges, other LCD resolutions ------ */
d7260 18
a7277 6
    tempcx = SiS_Pr->SiS_VT;
    tempbx = SiS_Pr->PanelYRes;

    if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
       tempbx = SiS_Pr->SiS_VDE - 1;
       tempcx--;
a7278 1

d7280 17
a7296 14
    if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
       if(tempbx != SiS_Pr->SiS_VDE) {
          tempax = tempbx;
	  /* if(SiS_Pr->SiS_VGAVDE == 525) tempax += 0x3c;   */  /* 651+301C */
          if(tempax < SiS_Pr->SiS_VDE) {
             tempax = 0;
             tempcx = 0;
          } else {
             tempax -= SiS_Pr->SiS_VDE;
          }
          tempax >>= 1;
       }
       tempcx -= tempax; /* lcdvdes */
       tempbx -= tempax; /* lcdvdee */
a7298 6
    /* Non-expanding: lcdvdees = tempcx = VT-1; lcdvdee = tempbx = VDE-1 */

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdvdes 0x%x lcdvdee 0x%x\n", tempcx, tempbx);
#endif

d7300 1
a7300 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,temp);
d7302 1
a7302 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,temp);
d7304 1
a7304 1
    temp = ((tempbx & 0xFF00) >> 8) << 3;
d7306 1
a7306 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,temp);
d7308 5
a7312 3
    tempbx = SiS_Pr->SiS_VT;
    tempax = SiS_Pr->SiS_VDE;
    tempcx = (tempbx - tempax) >> 4;
d7315 1
a7315 3
    if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx -= 10;

    /* non-expanding: lcdvrs = tempbx = ((VT + VDE) / 2) - 10 */
d7317 2
a7318 10
    if(SiS_Pr->UseCustomMode) {
       tempbx = SiS_Pr->CVSyncStart;
    }

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdvrs 0x%x\n", tempbx);
#endif

    temp = tempbx & 0x00FF;   				/* RTVACTEE = lcdvrs */
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,temp);
d7323 3
d7327 19
a7345 3
    if(SiS_Pr->UseCustomMode) {
       temp &= 0xf0;
       temp |= (SiS_Pr->CVSyncEnd & 0x0f);
d7348 1
a7348 3
#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdvre[3:0] 0x%x\n", (temp & 0x0f));
#endif
d7350 12
a7361 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,temp);
d7363 4
a7366 37
    /* Code from 630/301B (I+II) BIOS */

#ifdef SIS300
    if(!SiS_Pr->UseCustomMode) {
       if( ( ( (HwInfo->jChipType == SIS_630) ||
               (HwInfo->jChipType == SIS_730) ) &&
             (HwInfo->jChipRevision > 2) )  &&
           (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) &&
           (!(SiS_Pr->SiS_SetFlag & LCDVESATiming))  &&
           (!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) ) {
          if(ModeNo == 0x13) {
             SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,0xB9);
             SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,0xCC);
             SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xA6);
          } else {
             if((crt2crtc & 0x3F) == 4) {
                SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x2B);
                SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x13);
                SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,0xE5);
                SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,0x08);
                SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xE2);
             }
          }
       }

       if(HwInfo->jChipType < SIS_315H) {
          if(SiS_Pr->SiS_LCDTypeInfo == 0x0c) {
             crt2crtc &= 0x1f;
             tempcx = 0;
             if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
                if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
                   tempcx += 7;
                }
             }
             tempcx += crt2crtc;
             if(crt2crtc >= 4) {
                SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xff);
d7368 5
d7374 4
a7377 11
             if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
                if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
                   if(crt2crtc == 4) {
                      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x28);
                   }
                }
             }
             SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x18);
             SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,atable[tempcx]);
          }
       }
a7378 14
#endif

    tempcx = SiS_Pr->SiS_HT;
    tempbx = SiS_Pr->SiS_HDE;
    if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
       tempcx >>= 1;
       tempbx >>= 1;
    }
    tempcx = (tempcx - tempbx) >> 2;     		  /* (HT - HDE) >> 2 */
    tempbx += 7; 		           		  /* lcdhdee         */
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)          tempbx += 2;
    if(SiS_IsDualLink(SiS_Pr, HwInfo)) 	       	   	 tempbx++;
    if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) tempbx++;

d7380 2
a7381 7

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdhdee 0x%x\n", tempbx);
#endif

    temp = tempbx & 0x00FF;    			          /* RHEQPLE = lcdhdee */
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x23,temp);
d7386 6
a7391 5
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)          temp += 2;
    if(SiS_IsDualLink(SiS_Pr, HwInfo))        		 temp++;
    if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) temp++;
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1F,temp);  	  /* RHBLKE = lcdhdes[7:0] */
    SiS_SetRegAND(SiS_Pr->SiS_Part2Port,0x20,0x0F);	  /* lcdhdes [11:8] */
d7395 5
a7399 6

    if(SiS_Pr->UseCustomMode) {
       tempbx = SiS_Pr->CHSyncStart + 7;
       if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)          tempbx += 2;
       if(SiS_IsDualLink(SiS_Pr, HwInfo))          	    tempbx++;
       if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) tempbx++;
d7401 2
a7402 15

#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdhrs 0x%x\n", tempbx);
#endif

    temp = tempbx & 0x00FF;            		          /* RHBURSTS = lcdhrs */
    if(!SiS_Pr->UseCustomMode) {
       if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
          if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
             if(SiS_Pr->SiS_HDE == 1280) temp = 0x47;
          }
       }
    }
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1C,temp);
    temp = (tempbx & 0x0F00) >> 4;
d7408 18
a7425 6

    if(SiS_Pr->UseCustomMode) {
       tempbx = SiS_Pr->CHSyncEnd + 7;
       if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)          tempbx += 2;
       if(SiS_IsDualLink(SiS_Pr, HwInfo))   	            tempbx++;
       if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) tempbx++;
d7427 2
d7430 2
a7431 3
#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "lcdhre 0x%x\n", tempbx);
#endif
d7433 4
a7436 2
    temp = tempbx & 0x00FF;            		          /* RHSYEXP2S = lcdhre */
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x21,temp);
d7438 4
a7441 8
    SiS_SetGroup2_Tail(SiS_Pr, ModeNo);

#ifdef SIS300
    SiS_Set300Part2Regs(SiS_Pr, HwInfo, ModeIdIndex,
                        RefreshRateTableIndex, ModeNo);
#endif

  } /* HwInfo */
d7444 5
a7448 7
/*********************************************/
/*         SET PART 3 REGISTER GROUP         */
/*********************************************/

static void
SiS_SetGroup3(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
              PSIS_HW_INFO HwInfo)
d7450 3
a7452 2
  USHORT modeflag, i;
  const UCHAR  *tempdi;
d7454 2
a7455 1
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) return;
d7458 1
a7458 1
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
d7460 1
a7460 5
     if(SiS_Pr->UseCustomMode) {
        modeflag = SiS_Pr->CModeFlag;
     } else {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     }
d7463 3
a7465 3
#ifndef SIS_CP
  SiS_SetReg(SiS_Pr->SiS_Part3Port,0x00,0x00);
#endif
d7467 4
a7470 10
#ifdef SIS_CP
  SIS_CP_INIT301_CP
#endif

  if(SiS_Pr->SiS_TVMode & TVSetPAL) {
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x13,0xFA);
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x14,0xC8);
  } else {
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x13,0xF5);
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x14,0xB7);
d7473 4
a7476 4
  if(SiS_Pr->SiS_TVMode & TVSetPALM) {
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x13,0xFA);
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x14,0xC8);
     SiS_SetReg(SiS_Pr->SiS_Part3Port,0x3D,0xA8);
d7478 2
a7479 17

  tempdi = NULL;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     tempdi = SiS_Pr->SiS_HiTVGroup3Data;
     if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) {
        tempdi = SiS_Pr->SiS_HiTVGroup3Simu;
#if 0
        if(!(modeflag & Charx8Dot)) {
           tempdi = SiS_Pr->SiS_HiTVGroup3Text;
        }
#endif	
     }
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
     if(!(SiS_Pr->SiS_TVMode & TVSetYPbPr525i)) {
        tempdi = SiS_HiTVGroup3_1;
        if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) tempdi = SiS_HiTVGroup3_2;
     }
d7481 2
a7482 9
  if(tempdi) {
     for(i=0; i<=0x3E; i++) {
        SiS_SetReg(SiS_Pr->SiS_Part3Port,i,tempdi[i]);
     }
     if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) {
	if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) {
	   SiS_SetReg(SiS_Pr->SiS_Part3Port,0x28,0x3f);
	}
     }
d7484 3
d7488 10
a7497 2
#ifdef SIS_CP
  SIS_CP_INIT301_CP2
d7499 4
a7502 1
}
d7504 4
a7507 3
/*********************************************/
/*         SET PART 4 REGISTER GROUP         */
/*********************************************/
d7509 1
a7509 5
#ifdef SIS315H
static void
SiS_SetGroup4_C_ELV(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   USHORT temp, temp1;
d7511 12
a7522 1
   if(!(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV))) return;
d7524 16
a7539 18
   SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x3a,0x08);
   temp = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x3a);
   if(!(temp & 0x01)) {
      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x3a,0xdf);
      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x25,0xfc);
      if(HwInfo->jChipType < SIS_661) {
         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x25,0xf8);
      }
      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x0f,0xfb);
      temp = 0;
      if(!(SiS_Pr->SiS_TVMode & TVSetYPbPr750p)) {
         temp |= 0x0002;
         if(!(SiS_Pr->SiS_TVMode & TVSetYPbPr525p)) {
	    temp ^= 0x0402;
	    if(!(SiS_Pr->SiS_TVMode & TVSetHiVision)) {
	       temp ^= 0x0002;
	    }
	 }
d7541 9
a7549 10
      if(HwInfo->jChipType >= SIS_661) {
         temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x39);
         if(temp1 & 0x01) temp |= 0x10;
         if(temp1 & 0x02) temp |= 0x01;
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xec,(temp & 0xff));
      } else {
         temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x3b) & 0x03;
	 if(temp1 == 0x01) temp |= 0x01;
	 if(temp1 == 0x03) temp |= 0x04;  /* ? why not 0x10? */
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xea,(temp & 0xff));
d7551 5
a7555 3
      SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x3a,0xfb,(temp >> 8));
   }
}
d7558 1
a7558 35
static void
SiS_SetCRT2VCLK(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                 USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
  USHORT vclkindex;
  USHORT temp, reg1, reg2;

  if(SiS_Pr->UseCustomMode) {
     reg1 = SiS_Pr->CSR2B;
     reg2 = SiS_Pr->CSR2C;
  } else {
     vclkindex = SiS_GetVCLK2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                                 HwInfo);
     reg1 = SiS_Pr->SiS_VBVCLKData[vclkindex].Part4_A;
     reg2 = SiS_Pr->SiS_VBVCLKData[vclkindex].Part4_B;
  }

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0a,0x57);
 	SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0b,0x46);
	SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1f,0xf6);
     } else {
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0a,reg1);
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0b,reg2);
     }
  } else {
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0a,0x01);
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0b,reg2);
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x0a,reg1);
  }
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x12,0x00);
  temp = 0x08;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) temp |= 0x20;
  SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x12,temp);
d7561 6
a7566 4
/* Set 301 VGA2 registers */
static void
SiS_SetGroup4(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
  	      USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
d7571 4
a7574 3
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
a7575 4
     if(SiS_Pr->UseCustomMode) {
        modeflag = SiS_Pr->CModeFlag;
	resinfo = 0;
     } else {
a7577 1
     }
d7580 5
a7584 6
  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
           SiS_SetReg(SiS_Pr->SiS_Part4Port,0x24,0x0e);
        }
     }
d7587 4
a7590 4
  if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302LV)) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x10,0x9f);
     }
d7593 9
a7601 14
  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
        if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	   if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
	      SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x27,0x2c);
	   }
#ifdef SET_EMI
	   if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	      SiS_SetReg(SiS_Pr->SiS_Part4Port,0x2a,0x00);
	      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
	      SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x10);
	   }
#endif
	}
a7602 1
     }
d7606 1
a7606 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x13,temp);
d7610 1
a7610 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x14,temp);
d7616 1
a7616 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x16,temp);
d7625 1
a7625 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x17,temp);
d7628 1
a7628 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x15,temp);
d7630 1
d7633 63
a7695 2
  if(HwInfo->jChipType >= SIS_661) {
     if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
d7698 139
a7836 8
  temp = 0xA0;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     temp = 0;
     if(tempbx > 800) {
        temp = 0xA0;
        if(tempbx != 1024) {
           temp = 0xC0;
           if(tempbx != 1280) temp = 0;
d7838 64
a7901 5
     }
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     if(tempbx <= 800) {
        temp = 0x80;
     }
d7903 3
a7905 5
     temp = 0x80;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        temp = 0;
        if(tempbx > 800) temp = 0x60;
     }
d7908 77
a7984 4
  if(SiS_Pr->SiS_TVMode & (TVSetYPbPr525p | TVSetYPbPr750p)) {
     temp = 0;
     if(SiS_Pr->SiS_VGAHDE == 1024) temp = 0x20;
  }
d7986 13
a7998 3
  if(HwInfo->jChipType < SIS_661) {
     if(SiS_IsDualLink(SiS_Pr, HwInfo)) temp = 0;
  }
d8000 1
a8000 4
  if(SiS_Pr->SiS_VBType & VB_SIS301) {
     if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024)
        temp |= 0x0A;
  }
d8002 1
a8002 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0E,0x10,temp);
d8004 1
a8004 1
  tempebx = SiS_Pr->SiS_VDE;
d8006 1
a8006 3
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
     if(!(temp & 0xE0)) tempebx >>=1;
  }
d8008 39
a8046 3
  tempcx = SiS_Pr->SiS_RVBHRS;
  temp = tempcx & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x18,temp);
d8048 1
a8048 7
  tempeax = SiS_Pr->SiS_VGAVDE;
  tempcx |= 0x4000;
  if(tempeax <= tempebx) {
     tempcx ^= 0x4000;
  } else {
     tempeax -= tempebx;
  }
d8050 13
a8062 4
  templong = (tempeax * 256 * 1024) % tempebx;
  tempeax = (tempeax * 256 * 1024) / tempebx;
  tempebx = tempeax;
  if(templong != 0) tempebx++;
d8064 1
a8064 4
  temp = (USHORT)(tempebx & 0x000000FF);
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1B,temp);
  temp = (USHORT)((tempebx & 0x0000FF00) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1A,temp);
d8066 16
a8081 55
  tempbx = (USHORT)(tempebx >> 16);
  temp = tempbx & 0x00FF;
  temp <<= 4;
  temp |= ((tempcx & 0xFF00) >> 8);
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x19,temp);

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {

     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1C,0x28);

     tempbx = 0;
     tempax = SiS_Pr->SiS_VGAHDE;
     if(modeflag & HalfDCLK) 		tempax >>= 1;
     if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempax >>= 1;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	if(tempax > 800) tempax -= 800;
     } else /* if(SiS_Pr->SiS_VBInfo & TvNoHiviNoYPbPr) */ {    /* 651+301C */
        if(tempax > 800) {
	   tempbx = 8;
           if(tempax == 1024) tempax *= 25;
           else	              tempax *= 20;
	   temp = tempax % 32;
	   tempax /= 32;
	   tempax--;
	   if (temp!=0) tempax++;
        }
     }
     tempax--;
     temp = ((tempax & 0xFF00) >> 8) & 0x03;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoYPbPrHiVision) {	/* From 1.10.7w */
	if(ModeNo > 0x13) {					/* From 1.10.7w */
	   if(resinfo == SIS_RI_1024x768) tempax = 0x1f;	/* From 1.10.7w */
	   /* ax normally 0x1e */				/* From 1.10.7w */
	}							/* From 1.10.7w */
     }								/* From 1.10.7w */
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1D,tempax & 0x00FF);
     temp <<= 4;
     temp |= tempbx;
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x1E,temp);

     if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	if(IS_SIS550650740660) {
	   temp = 0x0026;  /* 1.10.7w; 1.10.8r; needs corresponding code in Dis/EnableBridge! */
	} else {
	   temp = 0x0036;
	}
     } else {
	temp = 0x0036;
     }
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        if(!(SiS_Pr->SiS_TVMode & (TVSetNTSC1024 | TVSetHiVision | TVSetYPbPr750p | TVSetYPbPr525p))) {
	   temp |= 0x01;
	   if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
	      if(!(SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) {
  	         temp &= 0xFE;
d8084 1
a8085 2
     }
     SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x1F,0xC0,temp);
d8087 3
a8089 25
     tempbx = SiS_Pr->SiS_HT;
     if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
     tempbx >>= 1;
     tempbx -= 2;
     temp = ((tempbx & 0x0700) >> 8) << 3;
     SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x21,0xC0,temp);
     temp = tempbx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part4Port,0x22,temp);

     if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
           SiS_SetReg(SiS_Pr->SiS_Part4Port,0x24,0x0e);
	   /* LCD-too-dark-error-source, see FinalizeLCD() */
	}
	if(HwInfo->jChipType >= SIS_315H) {
	   if(SiS_IsDualLink(SiS_Pr, HwInfo)) {
	      SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x27,0x2c);
	   }
	}
#ifdef SET_EMI
	if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x2a,0x00);
	   SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x10);
	}
d8091 1
a8091 5
     }

  }  /* 301B */

  SiS_SetCRT2VCLK(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d8094 5
a8098 8
/*********************************************/
/*         SET PART 5 REGISTER GROUP         */
/*********************************************/

/* Set 301 Palette address port registers */
static void
SiS_SetGroup5(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
              PSIS_HW_INFO HwInfo)
d8103 5
a8107 5
  if(SiS_Pr->SiS_ModeType == ModeVGA) {
     if(!(SiS_Pr->SiS_VBInfo & (SetInSlaveMode | LoadDACFlag))) {
        SiS_EnableCRT2(SiS_Pr);
        SiS_LoadDAC(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
     }
d8109 1
d8112 4
a8115 7
/*********************************************/
/*     MODIFY CRT1 GROUP FOR SLAVE MODE      */
/*********************************************/

static void
SiS_ModCRT1CRTC(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
d8117 2
a8118 2
  USHORT tempah,i,modeflag,j;
  USHORT ResIndex,DisplayType;
d8122 1
a8122 1
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
d8124 1
a8124 1
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d8127 2
a8128 4
  if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
     (SiS_Pr->SiS_CustomT == CUT_BARCO1024) ||
     (SiS_Pr->SiS_CustomT == CUT_PANEL848))
     return;
d8130 1
a8130 2
  if(!(SiS_GetLVDSCRT1Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                          &ResIndex, &DisplayType))) return;
d8132 3
a8134 2
  if(HwInfo->jChipType < SIS_315H) {
     if(SiS_Pr->SiS_SetFlag & SetDOSMode) return;
a8172 10
    case 40: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x768_1;          break;
    case 41: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x768_1_H;        break;
    case 42: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x768_2;          break;
    case 43: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x768_2_H;        break;
    case 50: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_1;           break;
    case 51: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_1_H;         break;
    case 52: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_2;           break;
    case 53: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_2_H;         break;
    case 54: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_3;           break;
    case 55: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1640x480_3_H;         break;
d8179 2
a8180 2
  tempah = (LVDSCRT1Ptr + ResIndex)->CR[0];
  SiS_SetReg(SiS_Pr->SiS_P3d4,0x00,tempah);
d8183 2
a8184 2
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3d4,i,tempah);
d8187 2
a8188 2
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3d4,i,tempah);
d8191 2
a8192 2
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3d4,i,tempah);
d8195 2
a8196 2
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3d4,i,tempah);
d8199 2
a8200 2
    tempah = (LVDSCRT1Ptr + ResIndex)->CR[j];
    SiS_SetReg(SiS_Pr->SiS_P3c4,i,tempah);
d8203 1
a8203 1
  tempah = (LVDSCRT1Ptr + ResIndex)->CR[14];
d8205 1
a8205 1
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0x1f,tempah);
d8207 1
a8207 1
  tempah = (LVDSCRT1Ptr + ResIndex)->CR[14];
d8210 3
a8212 1
  if(modeflag & DoubleScanMode)  tempah |= 0x080;
d8215 1
a8215 1
  /* 650/LVDS BIOS - doesn't make sense */
d8220 92
d8313 1
d8315 8
a8322 3
/*********************************************/
/*              SET CRT2 ECLK                */
/*********************************************/
d8324 6
a8329 7
static void
SiS_SetCRT2ECLK(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
           USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT clkbase, vclkindex=0;
  UCHAR  sr2b, sr2c;
d8331 3
a8333 8
  if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel640x480) || (SiS_Pr->SiS_IF_DEF_TRUMPION == 1)) {
	SiS_Pr->SiS_SetFlag &= (~ProgrammingCRT2);
        if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK & 0x3f) == 2) {
	   RefreshRateTableIndex--;
	}
	vclkindex = SiS_GetVCLK2Ptr(SiS_Pr, ModeNo, ModeIdIndex,
                                    RefreshRateTableIndex, HwInfo);
	SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
d8335 2
a8336 2
        vclkindex = SiS_GetVCLK2Ptr(SiS_Pr, ModeNo, ModeIdIndex,
                                    RefreshRateTableIndex, HwInfo);
d8339 58
a8396 2
  sr2b = SiS_Pr->SiS_VCLKData[vclkindex].SR2B;
  sr2c = SiS_Pr->SiS_VCLKData[vclkindex].SR2C;
d8398 11
a8408 6
  if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) || (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
     if((ROMAddr) && SiS_Pr->SiS_UseROM) {
	if(ROMAddr[0x220] & 0x01) {
           sr2b = ROMAddr[0x227];
	   sr2c = ROMAddr[0x228];
	}
d8412 14
a8425 1
  clkbase = 0x02B;
d8428 1
a8428 1
    	clkbase += 3;
d8431 30
d8462 10
a8471 9
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x20);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase,sr2b);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase+1,sr2c);
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x10);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase,sr2b);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase+1,sr2c);
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x00);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase,sr2b);
  SiS_SetReg(SiS_Pr->SiS_P3c4,clkbase+1,sr2c);
d8473 1
d8475 1
a8475 3
/*********************************************/
/*           SET UP CHRONTEL CHIPS           */
/*********************************************/
d8477 3
a8479 2
static void
SiS_SetCHTVReg(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
d8487 1
a8487 1
     tempcl = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d8489 1
a8489 1
     tempcl = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d8492 2
a8493 2
  if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) TVType += 1;
  if(SiS_Pr->SiS_TVMode & TVSetPAL) {
d8495 2
a8496 4
	if(SiS_Pr->SiS_ModeType > ModeVGA) {
	   if(SiS_Pr->SiS_CHSOverScan) TVType = 8;
	}
	if(SiS_Pr->SiS_TVMode & TVSetPALM) {
d8498 2
a8499 2
		if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) TVType += 1;
	} else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
d8501 1
a8501 1
		if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) TVType += 1;
d8520 1
a8520 3
#ifdef SIS300

     /* Chrontel 7005 - I assume that it does not come with a 315 series chip */
d8522 1
a8522 1
     /* We don't support modes >800x600 */
d8525 3
a8527 3
     if(SiS_Pr->SiS_TVMode & TVSetPAL) {
    	SiS_SetCH700x(SiS_Pr,0x4304);   /* 0x40=76uA (PAL); 0x03=15bit non-multi RGB*/
    	SiS_SetCH700x(SiS_Pr,0x6909);	/* Black level for PAL (105)*/
d8529 2
a8530 2
    	SiS_SetCH700x(SiS_Pr,0x0304);   /* upper nibble=71uA (NTSC), 0x03=15bit non-multi RGB*/
    	SiS_SetCH700x(SiS_Pr,0x7109);	/* Black level for NTSC (113)*/
d8534 1
a8534 1
     tempbx=((temp&0x00FF)<<8)|0x00;	/* Mode register */
d8537 1
a8537 1
     tempbx=((temp&0x00FF)<<8)|0x07;	/* Start active video register */
d8540 1
a8540 1
     tempbx=((temp&0x00FF)<<8)|0x08;	/* Position overflow register */
d8543 1
a8543 1
     tempbx=((temp&0x00FF)<<8)|0x0A;	/* Horiz Position register */
d8546 1
a8546 1
     tempbx=((temp&0x00FF)<<8)|0x0B;	/* Vertical Position register */
d8549 1
a8549 1
     /* Set minimum flicker filter for Luma channel (SR1-0=00),
d8556 1
a8556 1
     /* Set video bandwidth
d8565 1
a8565 1
     /* Register 0x3D does not exist in non-macrovision register map
d8568 1
a8568 3
#ifndef SIS_CP
     SiS_SetCH70xx(SiS_Pr,0x003D);
#endif
d8570 1
a8570 1
     /* Register 0x10 only contains 1 writable bit (S0) for sensing,
d8575 1
a8575 1
     /* Register 0x11 only contains 3 writable bits (S0-S2) for
d8580 1
a8580 1
     /* Clear DSEN
d8584 2
a8585 2
     if(!(SiS_Pr->SiS_TVMode & TVSetPAL)) {		/* ---- NTSC ---- */
       if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) {
d8589 13
a8601 11
         } else if(resindex == 0x05) {    		/* 800x600 overscan: Mode 23 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0118,0xF0);	/* 0x18-0x1f: FSCI 469,762,048 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0C19,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001A,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001B,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001C,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001D,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001E,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x001F,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x0120,0xEF);       /* Loop filter on for mode 23 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0021,0xFE);       /* ACIV off, need to set FSCI */
d8607 13
a8619 15
         } else if(resindex == 0x05) {   		 /* ----- 800x600 underscan: Mode 24 */
#if 0
           SiS_SetCH70xxANDOR(SiS_Pr,0x0118,0xF0);       /* (FSCI was 0x1f1c71c7 - this is for mode 22) */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0919,0xF0);	 /* FSCI for mode 24 is 428,554,851 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x081A,0xF0);       /* 198b3a63 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0b1B,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x041C,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x011D,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x061E,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x051F,0xF0);
           SiS_SetCH70xxANDOR(SiS_Pr,0x0020,0xEF);       /* loop filter off for mode 24 */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0021,0xFE);	 /* ACIV off, need to set FSCI */
#endif     /* All alternatives wrong (datasheet wrong?), don't use FSCI */
	   SiS_SetCH70xxANDOR(SiS_Pr,0x0020,0xEF); 	 /* loop filter off */
           SiS_SetCH70xxANDOR(SiS_Pr,0x0121,0xFE);
d8622 3
a8624 3
     } else {						/* ---- PAL ---- */
           /* We don't play around with FSCI in PAL mode */
         if(resindex == 0x04) {
a8631 2
     
#endif  /* 300 */
d8635 1
a8635 3
     /* Chrontel 7019 - assumed that it does not come with a 300 series chip */

#ifdef SIS315H
d8637 1
a8637 1
     /* We don't support modes >1024x768 */
d8641 1
a8641 4
     if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
        temp |= 0x10;
     }
     tempbx=((temp & 0x00FF) << 8) | 0x00;
d8645 1
a8645 1
     tempbx=((temp & 0x00FF) << 8) | 0x01;
d8649 1
a8649 1
     tempbx=((temp & 0x00FF) << 8) | 0x02;
d8653 1
a8653 1
     tempbx=((temp & 0x00FF) << 8) | 0x04;
d8657 1
a8657 1
     tempbx=((temp & 0x00FF) << 8) | 0x03;
d8661 1
a8661 1
     tempbx=((temp & 0x00FF) << 8) | 0x05;
d8665 1
a8665 1
     tempbx=((temp & 0x00FF) << 8) | 0x06;
d8669 1
a8669 4
     if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) {
	temp = 0x66;
     }
     tempbx=((temp & 0x00FF) << 8) | 0x07;
d8673 1
a8673 1
     tempbx=((temp & 0x00FF) << 8) | 0x08;
d8677 1
a8677 1
     tempbx=((temp & 0x00FF) << 8) | 0x15;
d8681 1
a8681 21
     tempbx=((temp & 0x00FF) << 8) | 0x1f;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[11];
     tempbx=((temp & 0x00FF) << 8) | 0x0c;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[12];
     tempbx=((temp & 0x00FF) << 8) | 0x0d;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[13];
     tempbx=((temp & 0x00FF) << 8) | 0x0e;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[14];
     tempbx=((temp & 0x00FF) << 8) | 0x0f;
     SiS_SetCH701x(SiS_Pr,tempbx);

     temp = CHTVRegData[resindex].Reg[15];
     tempbx=((temp & 0x00FF) << 8) | 0x10;
d8684 3
a8686 49
     temp = SiS_GetCH701x(SiS_Pr,0x21) & ~0x02;
     /* D1 should be set for PAL, PAL-N and NTSC-J,
        but I won't do that for PAL unless somebody
	tells me to do so. Since the BIOS uses
	non-default CIV values and blacklevels,
	this might be compensated anyway.
      */
     if(SiS_Pr->SiS_TVMode & (TVSetPALN | TVSetNTSCJ)) temp |= 0x02;
     SiS_SetCH701x(SiS_Pr,((temp << 8) | 0x21));

#endif	/* 315 */

  }

#ifdef SIS_CP
  SIS_CP_INIT301_CP3
#endif

}

void
SiS_Chrontel701xBLOn(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT temp;

  /* Enable Chrontel 7019 LCD panel backlight */
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
     if(HwInfo->jChipType == SIS_740) {
        SiS_SetCH701x(SiS_Pr,0x6566);
     } else {
        temp = SiS_GetCH701x(SiS_Pr,0x66);
        temp |= 0x20;
	SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
     }
  }
}

void
SiS_Chrontel701xBLOff(SiS_Private *SiS_Pr)
{
  USHORT temp;

  /* Disable Chrontel 7019 LCD panel backlight */
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
     temp = SiS_GetCH701x(SiS_Pr,0x66);
     temp &= 0xDF;
     SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
  }
}
d8688 3
a8690 1
#ifdef SIS315H  /* ----------- 315 series only ---------- */
d8692 3
a8694 12
static void
SiS_ChrontelPowerSequencing(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR regtable[]      = { 0x67, 0x68, 0x69, 0x6a, 0x6b };
  UCHAR table1024_740[] = { 0x01, 0x02, 0x01, 0x01, 0x01 };
  UCHAR table1400_740[] = { 0x01, 0x6e, 0x01, 0x01, 0x01 };
  UCHAR asus1024_740[]  = { 0x19, 0x6e, 0x01, 0x19, 0x09 };
  UCHAR asus1400_740[]  = { 0x19, 0x6e, 0x01, 0x19, 0x09 };
  UCHAR table1024_650[] = { 0x01, 0x02, 0x01, 0x01, 0x02 };
  UCHAR table1400_650[] = { 0x01, 0x02, 0x01, 0x01, 0x02 };
  UCHAR *tableptr = NULL;
  int i;
d8696 3
a8698 1
  /* Set up Power up/down timing */
d8700 3
a8702 19
  if(HwInfo->jChipType == SIS_740) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        if(SiS_Pr->SiS_CustomT == CUT_ASUSL3000D) tableptr = asus1024_740;
        else    			          tableptr = table1024_740;
     } else if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) ||
               (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) ||
	       (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)) {
	if(SiS_Pr->SiS_CustomT == CUT_ASUSL3000D) tableptr = asus1400_740;
        else					  tableptr = table1400_740;
     } else return;
  } else {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        tableptr = table1024_650;
     } else if((SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) ||
               (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) ||
	       (SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200)) {
        tableptr = table1400_650;
     } else return;
  }
a8703 2
  for(i=0; i<5; i++) {
     SiS_SetCH701x(SiS_Pr,(tableptr[i] << 8) | regtable[i]);
d8707 4
a8710 2
static void
SiS_SetCH701xForLCD(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d8712 6
a8717 18
  UCHAR regtable[]      = { 0x1c, 0x5f, 0x64, 0x6f, 0x70, 0x71,
                            0x72, 0x73, 0x74, 0x76, 0x78, 0x7d, 0x66 };
  UCHAR table1024_740[] = { 0x60, 0x02, 0x00, 0x07, 0x40, 0xed,
                            0xa3, 0xc8, 0xc7, 0xac, 0xe0, 0x02, 0x44 };
  UCHAR table1280_740[] = { 0x60, 0x03, 0x11, 0x00, 0x40, 0xe3,
   			    0xad, 0xdb, 0xf6, 0xac, 0xe0, 0x02, 0x44 };
  UCHAR table1400_740[] = { 0x60, 0x03, 0x11, 0x00, 0x40, 0xe3,
                            0xad, 0xdb, 0xf6, 0xac, 0xe0, 0x02, 0x44 };
  UCHAR table1600_740[] = { 0x60, 0x04, 0x11, 0x00, 0x40, 0xe3,
  			    0xad, 0xde, 0xf6, 0xac, 0x60, 0x1a, 0x44 };
  UCHAR table1024_650[] = { 0x60, 0x02, 0x00, 0x07, 0x40, 0xed,
                            0xa3, 0xc8, 0xc7, 0xac, 0x60, 0x02 };
  UCHAR table1280_650[] = { 0x60, 0x03, 0x11, 0x00, 0x40, 0xe3,
   		   	    0xad, 0xdb, 0xf6, 0xac, 0xe0, 0x02 };
  UCHAR table1400_650[] = { 0x60, 0x03, 0x11, 0x00, 0x40, 0xef,
                            0xad, 0xdb, 0xf6, 0xac, 0x60, 0x02 };
  UCHAR table1600_650[] = { 0x60, 0x04, 0x11, 0x00, 0x40, 0xe3,
  			    0xad, 0xde, 0xf6, 0xac, 0x60, 0x1a };
d8722 2
a8723 10
  if(HwInfo->jChipType == SIS_740) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        tableptr = table1024_740;
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
        tableptr = table1280_740;
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
        tableptr = table1400_740;
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
        tableptr = table1600_740;
     } else return;
d8725 1
a8725 9
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        tableptr = table1024_650;
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
        tableptr = table1280_650;
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
        tableptr = table1400_650;
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) {
        tableptr = table1600_650;
     } else return;
a8726 1

d8731 1
a8731 1
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) return;
d8733 1
a8733 4
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) return;
	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) return;
     } else if(tempbh == 0xde) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) return;
d8736 1
a8736 7

  if(HwInfo->jChipType == SIS_740) {
     tempbh = 0x0d;
  } else {
     tempbh = 0x0c;
  }
  for(i = 0; i < tempbh; i++) {
d8739 1
a8739 1
  SiS_ChrontelPowerSequencing(SiS_Pr,HwInfo);
d8742 19
a8760 1
  SiS_SetCH701x(SiS_Pr,(tempbh << 8) | 0x1e);
d8762 2
a8763 11
  if(HwInfo->jChipType == SIS_740) {
     tempbh = SiS_GetCH701x(SiS_Pr,0x1c);
     tempbh &= 0xfb;
     SiS_SetCH701x(SiS_Pr,(tempbh << 8) | 0x1c);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2d,0x03);
     tempbh = SiS_GetCH701x(SiS_Pr,0x64);
     tempbh |= 0x40;
     SiS_SetCH701x(SiS_Pr,(tempbh << 8) | 0x64);
     tempbh = SiS_GetCH701x(SiS_Pr,0x03);
     tempbh &= 0x3f;
     SiS_SetCH701x(SiS_Pr,(tempbh << 8) | 0x03);
d8767 2
a8768 2
static void
SiS_ChrontelResetVSync(SiS_Private *SiS_Pr)
d8770 1
a8770 1
  unsigned char temp, temp1;
d8772 6
a8777 10
  temp1 = SiS_GetCH701x(SiS_Pr,0x49);
  SiS_SetCH701x(SiS_Pr,0x3e49);
  temp = SiS_GetCH701x(SiS_Pr,0x47);
  temp &= 0x7f;	/* Use external VSYNC */
  SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
  SiS_LongDelay(SiS_Pr,3);
  temp = SiS_GetCH701x(SiS_Pr,0x47);
  temp |= 0x80;	/* Use internal VSYNC */
  SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
  SiS_SetCH701x(SiS_Pr,(temp1 << 8) | 0x49);
d8781 1
a8781 1
SiS_Chrontel701xOn(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d8786 1
a8786 6
     if(HwInfo->jChipType == SIS_740) {
        temp = SiS_GetCH701x(SiS_Pr,0x1c);
        temp |= 0x04;	/* Invert XCLK phase */
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x1c);
     }
     if(SiS_IsYPbPr(SiS_Pr, HwInfo)) {
d8789 1
a8789 1
	temp |= 0x80;	/* Enable YPrPb (HDTV) */
d8792 1
a8792 1
     if(SiS_IsChScart(SiS_Pr, HwInfo)) {
d8795 1
a8795 1
	temp |= 0xc0;	/* Enable SCART + CVBS */
d8798 27
a8824 19
     if(HwInfo->jChipType == SIS_740) {
        SiS_ChrontelResetVSync(SiS_Pr);
        SiS_SetCH701x(SiS_Pr,0x2049);   /* Enable TV path */
     } else {
        SiS_SetCH701x(SiS_Pr,0x2049);   /* Enable TV path */
        temp = SiS_GetCH701x(SiS_Pr,0x49);
        if(SiS_IsYPbPr(SiS_Pr,HwInfo)) {
           temp = SiS_GetCH701x(SiS_Pr,0x73);
	   temp |= 0x60;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x73);
        }
        temp = SiS_GetCH701x(SiS_Pr,0x47);
        temp &= 0x7f;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
        SiS_LongDelay(SiS_Pr,2);
        temp = SiS_GetCH701x(SiS_Pr,0x47);
        temp |= 0x80;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);
     }
d8829 1
a8829 1
SiS_Chrontel701xOff(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
a8832 1
  /* Complete power down of LVDS */
a8833 6
     if(HwInfo->jChipType == SIS_740) {
        SiS_LongDelay(SiS_Pr,1);
	SiS_GenericDelay(SiS_Pr,0x16ff);
	SiS_SetCH701x(SiS_Pr,0xac76);
	SiS_SetCH701x(SiS_Pr,0x0066);
     } else {
d8835 1
a8839 1
     }
d8843 2
a8844 2
static void
SiS_ChrontelResetDB(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d8846 4
a8849 46
     USHORT temp;

     if(HwInfo->jChipType == SIS_740) {

        temp = SiS_GetCH701x(SiS_Pr,0x4a);  /* Version ID */
        temp &= 0x01;
        if(!temp) {

           if(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo)) {
	      temp = SiS_GetCH701x(SiS_Pr,0x49);
	      SiS_SetCH701x(SiS_Pr,0x3e49);
	   }
	   /* Reset Chrontel 7019 datapath */
           SiS_SetCH701x(SiS_Pr,0x1048);
           SiS_LongDelay(SiS_Pr,1);
           SiS_SetCH701x(SiS_Pr,0x1848);

	   if(SiS_WeHaveBacklightCtrl(SiS_Pr, HwInfo)) {
	      SiS_ChrontelResetVSync(SiS_Pr);
	      SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x49);
	   }

        } else {

	   /* Clear/set/clear GPIO */
           temp = SiS_GetCH701x(SiS_Pr,0x5c);
	   temp &= 0xef;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x5c);
	   temp = SiS_GetCH701x(SiS_Pr,0x5c);
	   temp |= 0x10;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x5c);
	   temp = SiS_GetCH701x(SiS_Pr,0x5c);
	   temp &= 0xef;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x5c);
	   temp = SiS_GetCH701x(SiS_Pr,0x61);
	   if(!temp) {
	      SiS_SetCH701xForLCD(SiS_Pr, HwInfo);
	   }
        }

     } else { /* 650 */
        /* Reset Chrontel 7019 datapath */
        SiS_SetCH701x(SiS_Pr,0x1048);
        SiS_LongDelay(SiS_Pr,1);
        SiS_SetCH701x(SiS_Pr,0x1848);
     }
d8853 1
a8853 1
SiS_ChrontelInitTVVSync(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d8857 11
a8867 21
     if(HwInfo->jChipType == SIS_740) {

        if(SiS_WeHaveBacklightCtrl(SiS_Pr,HwInfo)) {
           SiS_ChrontelResetVSync(SiS_Pr);
        }

     } else {

        SiS_SetCH701x(SiS_Pr,0xaf76);  /* Power up LVDS block */
        temp = SiS_GetCH701x(SiS_Pr,0x49);
        temp &= 1;
        if(temp != 1) {  /* TV block powered? (0 = yes, 1 = no) */
	   temp = SiS_GetCH701x(SiS_Pr,0x47);
	   temp &= 0x70;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);  /* enable VSYNC */
	   SiS_LongDelay(SiS_Pr,3);
	   temp = SiS_GetCH701x(SiS_Pr,0x47);
	   temp |= 0x80;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x47);  /* disable VSYNC */
        }

d8871 3
a8873 2
static void
SiS_ChrontelDoSomething3(SiS_Private *SiS_Pr, USHORT ModeNo, PSIS_HW_INFO HwInfo)
d8877 20
a8896 43
     if(HwInfo->jChipType == SIS_740) {

        temp = SiS_GetCH701x(SiS_Pr,0x61);
        if(temp < 1) {
           temp++;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x61);
        }
        SiS_SetCH701x(SiS_Pr,0x4566);  /* Panel power on */
        SiS_SetCH701x(SiS_Pr,0xaf76);  /* All power on */
        SiS_LongDelay(SiS_Pr,1);
        SiS_GenericDelay(SiS_Pr,0x16ff);

     } else {  /* 650 */

        temp1 = 0;
        temp = SiS_GetCH701x(SiS_Pr,0x61);
        if(temp < 2) {
           temp++;
	   SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x61);
	   temp1 = 1;
        }
        SiS_SetCH701x(SiS_Pr,0xac76);
        temp = SiS_GetCH701x(SiS_Pr,0x66);
        temp |= 0x5f;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
        if(ModeNo > 0x13) {
           if(SiS_WeHaveBacklightCtrl(SiS_Pr, HwInfo)) {
	      SiS_GenericDelay(SiS_Pr,0x3ff);
	   } else {
	      SiS_GenericDelay(SiS_Pr,0x2ff);
	   }
        } else {
           if(!temp1)
	      SiS_GenericDelay(SiS_Pr,0x2ff);
        }
        temp = SiS_GetCH701x(SiS_Pr,0x76);
        temp |= 0x03;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x76);
        temp = SiS_GetCH701x(SiS_Pr,0x66);
        temp &= 0x7f;
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x66);
        SiS_LongDelay(SiS_Pr,1);

d8898 7
d8907 2
a8908 2
static void
SiS_ChrontelDoSomething2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d8918 1
a8918 1
       temp &= 0x04;  /* PLL stable? -> bail out */
d8921 1
a8921 6
       if(HwInfo->jChipType == SIS_740) {
          /* Power down LVDS output, PLL normal operation */
          SiS_SetCH701x(SiS_Pr,0xac76);
       }

       SiS_SetCH701xForLCD(SiS_Pr,HwInfo);
d8925 1
a8925 1
	   SiS_ChrontelResetDB(SiS_Pr,HwInfo);
d8931 1
a8931 1
       temp &= 0xfb;  /* Reset PLL */
d8935 1
a8935 1
       temp |= 0x04;  /* PLL normal operation */
d8937 1
a8937 5
       if(HwInfo->jChipType == SIS_740) {
          SiS_SetCH701x(SiS_Pr,0xe078);	/* PLL loop filter */
       } else {
          SiS_SetCH701x(SiS_Pr,0x6078);
       }
d8941 1
a8941 1
    SiS_SetCH701x(SiS_Pr,0x0077);  /* MV? */
d8945 2
a8946 1
SiS_ChrontelDoSomething1(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d8955 1
a8955 235
     if(HwInfo->jChipType == SIS_740) {

        temp = SiS_GetCH701x(SiS_Pr,0x1c);
        temp &= 0xfb;	/* Normal XCLK phase */
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x1c);

        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2d,0x03);

        temp = SiS_GetCH701x(SiS_Pr,0x64);
        temp |= 0x40;	/* ? Bit not defined */
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x64);

        temp = SiS_GetCH701x(SiS_Pr,0x03);
        temp &= 0x3f;	/* D1 input to both LVDS and TV */
        SiS_SetCH701x(SiS_Pr,(temp << 8) | 0x03);

	if(SiS_Pr->SiS_CustomT == CUT_ASUSL3000D) {
	   SiS_SetCH701x(SiS_Pr,0x4063); /* LVDS off */
	   SiS_LongDelay(SiS_Pr, 1);
	   SiS_SetCH701x(SiS_Pr,0x0063); /* LVDS on */
	   SiS_ChrontelResetDB(SiS_Pr, HwInfo);
	   SiS_ChrontelDoSomething2(SiS_Pr, HwInfo);
	   SiS_ChrontelDoSomething3(SiS_Pr, 0, HwInfo);
	} else {
           temp = SiS_GetCH701x(SiS_Pr,0x66);
           if(temp != 0x45) {
              SiS_ChrontelResetDB(SiS_Pr, HwInfo);
              SiS_ChrontelDoSomething2(SiS_Pr, HwInfo);
              SiS_ChrontelDoSomething3(SiS_Pr, 0, HwInfo);
           }
	}

     } else { /* 650 */

        SiS_ChrontelResetDB(SiS_Pr,HwInfo);
        SiS_ChrontelDoSomething2(SiS_Pr,HwInfo);
        temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x34);
        SiS_ChrontelDoSomething3(SiS_Pr,temp,HwInfo);
        SiS_SetCH701x(SiS_Pr,0xaf76);  /* All power on, LVDS normal operation */

     }

}
#endif  /* 315 series  */

/*********************************************/
/*      MAIN: SET CRT2 REGISTER GROUP        */
/*********************************************/

BOOLEAN
SiS_SetCRT2Group(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo)
{
#ifdef SIS300
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
#endif
   USHORT ModeIdIndex, RefreshRateTableIndex;
#if 0
   USHORT temp;
#endif   

   SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;

   if(!SiS_Pr->UseCustomMode) {
      SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex);
   } else {
      ModeIdIndex = 0;
   }

   /* Used for shifting CR33 */
   SiS_Pr->SiS_SelectCRT2Rate = 4;

   SiS_UnLockCRT2(SiS_Pr, HwInfo);

   RefreshRateTableIndex = SiS_GetRatePtr(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);

   SiS_SaveCRT2Info(SiS_Pr,ModeNo);

   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_DisableBridge(SiS_Pr,HwInfo);
      if((SiS_Pr->SiS_IF_DEF_LVDS == 1) && (HwInfo->jChipType == SIS_730)) {
         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,0x80);
      }
      SiS_SetCRT2ModeRegs(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   }

   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
      SiS_LockCRT2(SiS_Pr, HwInfo);
      SiS_DisplayOn(SiS_Pr);
      return TRUE;
   }

   SiS_GetCRT2Data(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);

   /* Set up Panel Link for LVDS, 301BDH and 30xLV(for LCDA) */
   if( (SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
       ((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) ||
       ((HwInfo->jChipType >= SIS_315H) && (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) ) {
      SiS_GetLVDSDesData(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
   } else {
      SiS_Pr->SiS_LCDHDES = SiS_Pr->SiS_LCDVDES = 0;
   }

#ifdef LINUX_XF86
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "(init301: LCDHDES 0x%03x LCDVDES 0x%03x)\n", SiS_Pr->SiS_LCDHDES, SiS_Pr->SiS_LCDVDES);
  xf86DrvMsg(0, X_INFO, "(init301: HDE     0x%03x VDE     0x%03x)\n", SiS_Pr->SiS_HDE, SiS_Pr->SiS_VDE);
  xf86DrvMsg(0, X_INFO, "(init301: VGAHDE  0x%03x VGAVDE  0x%03x)\n", SiS_Pr->SiS_VGAHDE, SiS_Pr->SiS_VGAVDE);
  xf86DrvMsg(0, X_INFO, "(init301: HT      0x%03x VT      0x%03x)\n", SiS_Pr->SiS_HT, SiS_Pr->SiS_VT);
  xf86DrvMsg(0, X_INFO, "(init301: VGAHT   0x%03x VGAVT   0x%03x)\n", SiS_Pr->SiS_VGAHT, SiS_Pr->SiS_VGAVT);
#endif
#endif

   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_SetGroup1(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
   }

   if(SiS_Pr->SiS_VBType & VB_SISVB) {

        if(SiS_Pr->SiS_SetFlag & LowModeTests) {

	   SiS_SetGroup2(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
#ifdef SIS315H
	   SiS_SetGroup2_C_ELV(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
#endif
      	   SiS_SetGroup3(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
      	   SiS_SetGroup4(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
#ifdef SIS315H
	   SiS_SetGroup4_C_ELV(SiS_Pr, HwInfo);
#endif
      	   SiS_SetGroup5(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);

	   /* For 301BDH (Panel link initialization): */
	   if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
	      if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
		 if(!((SiS_Pr->SiS_SetFlag & SetDOSMode) && ((ModeNo == 0x03) || (ModeNo == 0x10)))) {
		    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
		       SiS_ModCRT1CRTC(SiS_Pr,ModeNo,ModeIdIndex,
		                       RefreshRateTableIndex,HwInfo);
		    }
                 }
	      }
	      SiS_SetCRT2ECLK(SiS_Pr,ModeNo,ModeIdIndex,
		              RefreshRateTableIndex,HwInfo);
	   }
        }

   } else {

        if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel640x480) {
	   if(SiS_Pr->SiS_IF_DEF_TRUMPION == 0) {
    	      SiS_ModCRT1CRTC(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,HwInfo);
	   }
	}

        SiS_SetCRT2ECLK(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,HwInfo);

	if(SiS_Pr->SiS_SetFlag & LowModeTests) {
     	   if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
	         if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
#ifdef SIS315H		 
		    SiS_SetCH701xForLCD(SiS_Pr,HwInfo);
#endif		    
		 }
	      }
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
       		 SiS_SetCHTVReg(SiS_Pr,ModeNo,ModeIdIndex,
		               RefreshRateTableIndex);
	      }
     	   }
	}

   }

#ifdef SIS300
   if(HwInfo->jChipType < SIS_315H) {
      if(SiS_Pr->SiS_SetFlag & LowModeTests) {
	 if(SiS_Pr->SiS_UseOEM) {
	    if((SiS_Pr->SiS_UseROM) && ROMAddr && (SiS_Pr->SiS_UseOEM == -1)) {
	       if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
	          SiS_OEM300Setting(SiS_Pr,HwInfo,ModeNo,ModeIdIndex,
	       			    RefreshRateTableIndex);
	       }
	    } else {
       	       SiS_OEM300Setting(SiS_Pr,HwInfo,ModeNo,ModeIdIndex,
	       			 RefreshRateTableIndex);
	    }
	 }
	 if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
            if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
	       (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
	       SetOEMLCDData2(SiS_Pr, HwInfo, ModeNo, ModeIdIndex,RefreshRateTableIndex);
	    }
            if(HwInfo->jChipType == SIS_730) {
               SiS_DisplayOn(SiS_Pr);
	    }
         }
      }
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
          if(HwInfo->jChipType != SIS_730) {
             SiS_DisplayOn(SiS_Pr);
	  }
      }
   }
#endif

#ifdef SIS315H
   if(HwInfo->jChipType >= SIS_315H) {
      if(SiS_Pr->SiS_SetFlag & LowModeTests) {
	 if(HwInfo->jChipType < SIS_661) {
	    SiS_FinalizeLCD(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
            SiS_OEM310Setting(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
	 } else {
	    SiS_OEM661Setting(SiS_Pr, HwInfo, ModeNo, ModeIdIndex, RefreshRateTableIndex);
	 }
         SiS_CRT2AutoThreshold(SiS_Pr);
      }
   }
#endif

   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_EnableBridge(SiS_Pr, HwInfo);
   }

   SiS_DisplayOn(SiS_Pr);

   if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	 /* Disable LCD panel when using TV */
	 SiS_SetRegSR11ANDOR(SiS_Pr,HwInfo,0xFF,0x0C);
      } else {
	 /* Disable TV when using LCD */
	 SiS_SetCH70xxANDOR(SiS_Pr,0x010E,0xF8);
      }
   }
d8957 1
a8957 6
   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_LockCRT2(SiS_Pr,HwInfo);
   }

   return TRUE;
}
d8959 2
d8962 1
a8962 25
/*********************************************/
/*     ENABLE/DISABLE LCD BACKLIGHT (SIS)    */
/*********************************************/

void
SiS_SiS30xBLOn(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  /* Switch on LCD backlight on SiS30xLV */
  SiS_DDC2Delay(SiS_Pr,0xff00);
  if(!(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x26) & 0x02)) {
     SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
     SiS_WaitVBRetrace(SiS_Pr,HwInfo);
  }
  if(!(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x26) & 0x01)) {
     SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
  }
}

void
SiS_SiS30xBLOff(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  /* Switch off LCD backlight on SiS30xLV */
  SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFE);
  SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFD);
  SiS_DDC2Delay(SiS_Pr,0xe000);
d8965 1
a8965 3
/*********************************************/
/*          DDC RELATED FUNCTIONS            */
/*********************************************/
d8967 1
a8967 10
static void
SiS_SetupDDCN(SiS_Private *SiS_Pr)
{
  SiS_Pr->SiS_DDC_NData = ~SiS_Pr->SiS_DDC_Data;
  SiS_Pr->SiS_DDC_NClk  = ~SiS_Pr->SiS_DDC_Clk;
  if((SiS_Pr->SiS_DDC_Index == 0x11) && (SiS_Pr->SiS_SensibleSR11)) {
     SiS_Pr->SiS_DDC_NData &= 0x0f;
     SiS_Pr->SiS_DDC_NClk  &= 0x0f;
  }
}
d8969 1
a8969 1
/* The Chrontel 700x is connected to the 630/730 via
d8972 2
a8973 2
 * On 630(S)T chipset, the index changed from 0x11 to
 * 0x0a, possibly for working around the DDC problems
d8976 2
a8977 2
static BOOLEAN
SiS_SetChReg(SiS_Private *SiS_Pr, USHORT tempbx, USHORT myor)
d8979 4
a8982 23
  USHORT tempah,temp,i;

  for(i=0; i<20; i++) {				/* Do 20 attempts to write */
     if(i) {
        SiS_SetStop(SiS_Pr);
	SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT);
     }
     if(SiS_SetStart(SiS_Pr)) continue;		/* Set start condition */
     tempah = SiS_Pr->SiS_DDC_DeviceAddr;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write DAB (S0=0=write) */
     if(temp) continue;				/*    (ERROR: no ack) */
     tempah = tempbx & 0x00FF;			/* Write RAB */
     tempah |= myor;                            /* (700x: set bit 7, see datasheet) */
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);
     if(temp) continue;				/*    (ERROR: no ack) */
     tempah = (tempbx & 0xFF00) >> 8;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write data */
     if(temp) continue;				/*    (ERROR: no ack) */
     if(SiS_SetStop(SiS_Pr)) continue;		/* Set stop condition */
     SiS_Pr->SiS_ChrontelInit = 1;
     return TRUE;
  }
  return FALSE;
d8985 1
a8985 1
/* Write to Chrontel 700x */
d8990 1
a8990 1
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;  		/* DAB (Device Address Byte) */
d8993 23
a9015 4
     SiS_Pr->SiS_DDC_Index = 0x11;		/* Bit 0 = SC;  Bit 1 = SD */
     SiS_Pr->SiS_DDC_Data  = 0x02;              /* Bitmask in IndexReg for Data */
     SiS_Pr->SiS_DDC_Clk   = 0x01;              /* Bitmask in IndexReg for Clk */
     SiS_SetupDDCN(SiS_Pr);
d9018 3
a9020 3
  if( (!(SiS_SetChReg(SiS_Pr, tempbx, 0x80))) &&
      (!(SiS_Pr->SiS_ChrontelInit)) ) {
     SiS_Pr->SiS_DDC_Index = 0x0a;		/* Bit 7 = SC;  Bit 6 = SD */
d9023 2
a9024 1
     SiS_SetupDDCN(SiS_Pr);
d9026 17
a9042 1
     SiS_SetChReg(SiS_Pr, tempbx, 0x80);
d9046 1
a9046 1
/* Write to Chrontel 701x */
d9051 3
a9053 1
  SiS_Pr->SiS_DDC_Index = 0x11;			/* Bit 0 = SC;  Bit 1 = SD */
d9056 2
a9057 2
  SiS_SetupDDCN(SiS_Pr);
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;  		/* DAB (Device Address Byte) */
d9059 14
a9072 1
  SiS_SetChReg(SiS_Pr, tempbx, 0);
d9075 4
a9078 2
void
SiS_SetCH70xx(SiS_Private *SiS_Pr, USHORT tempbx)
d9080 2
a9081 2
   if(SiS_Pr->SiS_IF_DEF_CH70xx == 1)
      SiS_SetCH700x(SiS_Pr,tempbx);
d9083 1
a9083 30
      SiS_SetCH701x(SiS_Pr,tempbx);
}

static USHORT
SiS_GetChReg(SiS_Private *SiS_Pr, USHORT myor)
{
  USHORT tempah,temp,i;

  for(i=0; i<20; i++) {				/* Do 20 attempts to read */
     if(i) {
        SiS_SetStop(SiS_Pr);
	SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT);
     }
     if(SiS_SetStart(SiS_Pr)) continue;		/* Set start condition */
     tempah = SiS_Pr->SiS_DDC_DeviceAddr;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write DAB (S0=0=write) */
     if(temp) continue;				/*        (ERROR: no ack) */
     tempah = SiS_Pr->SiS_DDC_ReadAddr | myor;	/* Write RAB (700x: | 0x80) */
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);
     if(temp) continue;				/*        (ERROR: no ack) */
     if (SiS_SetStart(SiS_Pr)) continue;	/* Re-start */
     tempah = SiS_Pr->SiS_DDC_DeviceAddr | 0x01;/* DAB | 0x01 = Read */
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* DAB (S0=1=read) */
     if(temp) continue;				/*        (ERROR: no ack) */
     tempah = SiS_ReadDDC2Data(SiS_Pr,tempah);	/* Read byte */
     if(SiS_SetStop(SiS_Pr)) continue;		/* Stop condition */
     SiS_Pr->SiS_ChrontelInit = 1;
     return(tempah);
  }
  return 0xFFFF;
d9086 1
a9086 1
/* Read from Chrontel 700x */
d9091 1
a9091 3
  USHORT result;

  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;		/* DAB */
d9094 1
a9094 1
     SiS_Pr->SiS_DDC_Index = 0x11;		/* Bit 0 = SC;  Bit 1 = SD */
d9097 2
a9098 1
     SiS_SetupDDCN(SiS_Pr);
d9103 26
a9128 2
  if( ((result = SiS_GetChReg(SiS_Pr,0x80)) == 0xFFFF) &&
      (!SiS_Pr->SiS_ChrontelInit) ) {
d9130 18
a9147 6
     SiS_Pr->SiS_DDC_Index = 0x0a;
     SiS_Pr->SiS_DDC_Data  = 0x80;
     SiS_Pr->SiS_DDC_Clk   = 0x40;
     SiS_SetupDDCN(SiS_Pr);

     result = SiS_GetChReg(SiS_Pr,0x80);
d9149 1
a9149 1
  return(result);
d9152 1
a9152 1
/* Read from Chrontel 701x */
d9157 3
a9159 1
  SiS_Pr->SiS_DDC_Index = 0x11;			/* Bit 0 = SC;  Bit 1 = SD */
d9162 2
a9163 3
  SiS_SetupDDCN(SiS_Pr);
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;		/* DAB */

d9166 17
a9182 1
  return(SiS_GetChReg(SiS_Pr,0));
d9185 2
a9186 12
/* Read from Chrontel 70xx */
/* Parameter is [Register no (S7-S0)] */
USHORT
SiS_GetCH70xx(SiS_Private *SiS_Pr, USHORT tempbx)
{
   if(SiS_Pr->SiS_IF_DEF_CH70xx == 1)
      return(SiS_GetCH700x(SiS_Pr, tempbx));
   else
      return(SiS_GetCH701x(SiS_Pr, tempbx));
}

/* Our own DDC functions */
d9188 1
a9188 2
SiS_InitDDCRegs(SiS_Private *SiS_Pr, unsigned long VBFlags, int VGAEngine,
                USHORT adaptnum, USHORT DDCdatatype, BOOLEAN checkcr32)
d9190 1
a9190 1
     unsigned char ddcdtype[] = { 0xa0, 0xa0, 0xa0, 0xa2, 0xa6 };
a9193 7
     if(adaptnum != 0) {
        if(!(VBFlags & (VB_301|VB_301B|VB_301C|VB_302B))) return 0xFFFF;
	if((VBFlags & VB_30xBDH) && (adaptnum == 1)) return 0xFFFF;
     }	
     
     /* adapternum for SiS bridges: 0 = CRT1, 1 = LCD, 2 = VGA2 */
     
d9202 3
a9204 1
     cr32 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x32);
d9206 9
a9214 9
#if 0
     if(VBFlags & VB_SISBRIDGE) {
	if(myadaptnum == 0) {
	   if(!(cr32 & 0x20)) {
	      myadaptnum = 2;
	      if(!(cr32 & 0x10)) {
	         myadaptnum = 1;
		 if(!(cr32 & 0x08)) {
		    myadaptnum = 0;
d9216 1
a9216 1
	      }
d9218 1
a9218 3
        }
     }
#endif
a9219 2
     if(VGAEngine == SIS_300_VGA) {		/* 300 series */
	
d9222 1
a9222 1
	   if(VBFlags & VB_SISBRIDGE) {
d9228 6
a9233 8
	if(!(VBFlags & VB_301)) {
	   if((cr32 & 0x80) && (checkcr32)) {
              if(myadaptnum >= 1) {
	         if(!(cr32 & 0x08)) {
	             myadaptnum = 1;
		     if(!(cr32 & 0x10)) return 0xFFFF;
                 }
	      }
d9240 4
a9243 1
     } else {						/* 315/330 series */
d9245 1
a9245 1
     	/* here we simplify: 0 = CRT1, 1 = CRT2 (VGA, LCD) */
d9247 12
a9258 1
	if(VBFlags & VB_SISBRIDGE) {
d9266 1
a9266 1
	   if(VBFlags & VB_SISBRIDGE) {
d9272 1
a9272 1
        if((cr32 & 0x80) && (checkcr32)) {
d9284 1
a9284 1
	   if(VBFlags & VB_LVDS) flag = 0xff;
a9287 4
    }
    
    SiS_Pr->SiS_DDC_Data = 0x02 << temp;
    SiS_Pr->SiS_DDC_Clk  = 0x01 << temp;
d9289 2
a9290 1
    SiS_SetupDDCN(SiS_Pr);
d9292 1
a9292 5
#ifdef TWDEBUG
    xf86DrvMsg(0, X_INFO, "DDC Port %x Index %x Shift %d\n",
    		SiS_Pr->SiS_DDC_Port, SiS_Pr->SiS_DDC_Index, temp);
#endif
    
d9299 3
a9301 7
   if(SiS_SetStart(SiS_Pr)) return 0xFFFF;
   if(SiS_WriteDDC2Data(SiS_Pr, SiS_Pr->SiS_DDC_DeviceAddr)) {
  	return 0xFFFF;
   }
   if(SiS_WriteDDC2Data(SiS_Pr, SiS_Pr->SiS_DDC_SecAddr)) {
   	return 0xFFFF;
   }
d9308 2
a9309 4
   if(SiS_SetStart(SiS_Pr)) return 0xFFFF;
   if(SiS_WriteDDC2Data(SiS_Pr, (SiS_Pr->SiS_DDC_DeviceAddr | 0x01))) {
   	return 0xFFFF;
   }
d9326 2
a9327 4
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
      		      SiS_Pr->SiS_DDC_Index,
                      SiS_Pr->SiS_DDC_NData,
		      SiS_Pr->SiS_DDC_Data);
d9329 2
a9330 4
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
      		      SiS_Pr->SiS_DDC_Index,
                      SiS_Pr->SiS_DDC_NData,
		      0);
d9339 1
a9339 2
    USHORT  temp, ret=0;
    BOOLEAN failed = FALSE;
a9343 3
#ifdef TWDEBUG
         xf86DrvMsg(0, X_INFO, "Probe: Prepare failed\n");
#endif
a9353 6
       } else {
           failed = TRUE;
	   ret = 0xFFFF;
#ifdef TWDEBUG
           xf86DrvMsg(0, X_INFO, "Probe: Read 1 failed\n");
#endif
d9356 8
a9363 13
    if(failed == FALSE) {
       temp = (unsigned char)SiS_ReadDDC2Data(SiS_Pr, 0);
       SiS_SendACK(SiS_Pr, 1);
       temp &= mask;
       if(temp == value) ret = 0;
       else {
          ret = 0xFFFF;
#ifdef TWDEBUG
          xf86DrvMsg(0, X_INFO, "Probe: Read 2 failed\n");
#endif
          if(SiS_Pr->SiS_DDC_DeviceAddr == 0xa0) {
             if(temp == 0x30) ret = 0;
          }
d9387 1
a9387 1
SiS_ReadDDC(SiS_Private *SiS_Pr, USHORT DDCdatatype, unsigned char *buffer)
d9392 1
a9392 1
   if(DDCdatatype > 4) return 0xFFFF;  
d9419 22
a9440 1
/* Our private DDC functions
d9450 3
a9452 3
       adaptnum: 0=CRT1, 1=LCD, 2=VGA2
                 CRT2 DDC is only supported on SiS301, 301B, 302B.
       DDCdatatype: 0=Probe, 1=EDID, 2=EDID+VDIF, 3=EDID V2 (P&D), 4=EDID V2 (FPDI-2)
d9461 2
a9462 2
SiS_HandleDDC(SiS_Private *SiS_Pr, unsigned long VBFlags, int VGAEngine,
              USHORT adaptnum, USHORT DDCdatatype, unsigned char *buffer)
d9464 1
a9464 3
   unsigned char sr1f,cr17=1;
   USHORT result;

d9466 2
a9467 19
   if(DDCdatatype > 4) return 0xFFFF;
   if((!(VBFlags & VB_VIDEOBRIDGE)) && (adaptnum > 0)) return 0xFFFF;
   if(SiS_InitDDCRegs(SiS_Pr, VBFlags, VGAEngine, adaptnum, DDCdatatype, FALSE) == 0xFFFF) return 0xFFFF;

   sr1f = SiS_GetReg(SiS_Pr->SiS_P3c4,0x1f);
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x1f,0x3f,0x04);
   if(VGAEngine == SIS_300_VGA) {
      cr17 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x17) & 0x80;
      if(!cr17) {
         SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x17,0x80);
         SiS_SetReg(SiS_Pr->SiS_P3c4,0x00,0x01);
         SiS_SetReg(SiS_Pr->SiS_P3c4,0x00,0x03);
      }
   }
   if((sr1f) || (!cr17)) {
      SiS_WaitRetrace1(SiS_Pr);
      SiS_WaitRetrace1(SiS_Pr);
      SiS_WaitRetrace1(SiS_Pr);
      SiS_WaitRetrace1(SiS_Pr);
d9469 2
a9470 1

d9472 1
a9472 1
      result = SiS_ProbeDDC(SiS_Pr);
d9474 2
a9475 5
      result = SiS_ReadDDC(SiS_Pr, DDCdatatype, buffer);
   }
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x1f,sr1f);
   if(VGAEngine == SIS_300_VGA) {
      SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x17,0x7f,cr17);
a9476 29
   return result;
}

#ifdef LINUX_XF86

static BOOLEAN
checkedid1(unsigned char *buffer)
{
   /* Check header */
   if((buffer[0] != 0x00) ||
      (buffer[1] != 0xff) ||
      (buffer[2] != 0xff) ||
      (buffer[3] != 0xff) ||
      (buffer[4] != 0xff) ||
      (buffer[5] != 0xff) ||
      (buffer[6] != 0xff) ||
      (buffer[7] != 0x00))
      return FALSE;

   /* Check EDID version and revision */
   if((buffer[0x12] != 1) || (buffer[0x13] > 4)) return FALSE;

   /* Check week of manufacture for sanity */
   if(buffer[0x10] > 53) return FALSE;

   /* Check year of manufacture for sanity */
   if(buffer[0x11] > 40) return FALSE;

   return TRUE;
d9479 1
a9479 13
static BOOLEAN
checkedid2(unsigned char *buffer)
{
   USHORT year = buffer[6] | (buffer[7] << 8);

   /* Check EDID version */
   if((buffer[0] & 0xf0) != 0x20) return FALSE;

   /* Check week of manufacture for sanity */
   if(buffer[5] > 53) return FALSE;

   /* Check year of manufacture for sanity */
   if((year != 0) && ((year < 1990) || (year > 2030))) return FALSE;
a9480 5
   return TRUE;
}

/* Sense the LCD parameters (CR36, CR37) via DDC */
/* SiS30x(B) only */
d9482 1
a9482 1
SiS_SenseLCDDDC(SiS_Private *SiS_Pr, SISPtr pSiS)
d9484 6
a9489 15
   USHORT DDCdatatype, paneltype, flag, xres=0, yres=0;
   USHORT index, myindex, lumsize, numcodes;
   unsigned char cr37=0, seekcode;
   BOOLEAN checkexpand = FALSE;
   int retry, i;
   unsigned char buffer[256];

   for(i=0; i<7; i++) SiS_Pr->CP_DataValid[i] = FALSE;
   SiS_Pr->CP_HaveCustomData = FALSE;
   SiS_Pr->CP_MaxX = SiS_Pr->CP_MaxY = SiS_Pr->CP_MaxClock = 0;

   if(!(pSiS->VBFlags & (VB_301|VB_301B|VB_301C|VB_302B))) return 0;
   if(pSiS->VBFlags & VB_30xBDH) return 0;
  
   if(SiS_InitDDCRegs(SiS_Pr, pSiS->VBFlags, pSiS->VGAEngine, 1, 0, FALSE) == 0xFFFF) return 0;
d9491 2
a9492 1
   SiS_Pr->SiS_DDC_SecAddr = 0x00;
d9494 3
a9496 9
   /* Probe supported DA's */
   flag = SiS_ProbeDDC(SiS_Pr);
#ifdef TWDEBUG
   xf86DrvMsg(pSiS->pScrn->scrnIndex, X_INFO,
   	"CRT2 DDC capabilities 0x%x\n", flag);
#endif	
   if(flag & 0x10) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa6;	/* EDID V2 (FP) */
      DDCdatatype = 4;
d9498 6
a9503 6
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa2;	/* EDID V2 (P&D-D Monitor) */
      DDCdatatype = 3;
   } else if(flag & 0x02) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa0;	/* EDID V1 */
      DDCdatatype = 1;
   } else return 0;				/* no DDC support (or no device attached) */
d9505 28
a9532 177
   /* Read the entire EDID */
   retry = 2;
   do {
      if(SiS_ReadDDC(SiS_Pr, DDCdatatype, buffer)) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: DDC read failed (attempt %d), %s\n",
		(3-retry), (retry == 1) ? "giving up" : "retrying");
	 retry--;
	 if(retry == 0) return 0xFFFF;
      } else break;
   } while(1);

#ifdef TWDEBUG
   for(i=0; i<256; i+=16) {
       xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
       	"%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x\n",
	buffer[i],    buffer[i+1], buffer[i+2], buffer[i+3],
	buffer[i+4],  buffer[i+5], buffer[i+6], buffer[i+7],
	buffer[i+8],  buffer[i+9], buffer[i+10], buffer[i+11],
	buffer[i+12], buffer[i+13], buffer[i+14], buffer[i+15]);
   }
#endif   
   
   /* Analyze EDID and retrieve LCD panel information */
   paneltype = 0;
   switch(DDCdatatype) {
   case 1:							/* Analyze EDID V1 */
      /* Catch a few clear cases: */
      if(!(checkedid1(buffer))) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: EDID corrupt\n");
	 return 0;
      }

      if(!(buffer[0x14] & 0x80)) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	        "CRT2: Attached display expects analog input (0x%02x)\n",
		buffer[0x14]);
      	 return 0;
      }
      
      if((buffer[0x18] & 0x18) != 0x08) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: Attached display is not of RGB but of %s type (0x%02x)\n", 
		((buffer[0x18] & 0x18) == 0x00) ? "monochrome/greyscale" :
		  ( ((buffer[0x18] & 0x18) == 0x10) ? "non-RGB multicolor" : 
		     "undefined"),
		buffer[0x18]);
	 return 0;
      }

      /* Now analyze the first Detailed Timing Block and see
       * if the preferred timing mode is stored there. If so,
       * check if this is a standard panel for which we already
       * know the timing.
       */

      paneltype = Panel_Custom;
      checkexpand = FALSE;

      if(buffer[0x18] & 0x02) {

         xres = buffer[0x38] | ((buffer[0x3a] & 0xf0) << 4);
         yres = buffer[0x3b] | ((buffer[0x3d] & 0xf0) << 4);

	 SiS_Pr->CP_PreferredX = xres;
	 SiS_Pr->CP_PreferredY = yres;

         switch(xres) {
            case 800:
	        if(yres == 600) {
	     	   paneltype = Panel_800x600;
	     	   checkexpand = TRUE;
	        }
	        break;
            case 1024:
	        if(yres == 768) {
	     	   paneltype = Panel_1024x768;
	     	   checkexpand = TRUE;
	        }
	        break;
	    case 1280:
	        if(yres == 1024) {
	     	   paneltype = Panel_1280x1024;
		   checkexpand = TRUE;
	        } else if(yres == 960) {
	           if(pSiS->VGAEngine == SIS_300_VGA) {
		      paneltype = Panel300_1280x960;
		   } else {
		      paneltype = Panel310_1280x960;
		   }
	        } else if(yres == 768) {
		   if( ((buffer[0x36] | (buffer[0x37] << 8)) == 8100) &&
		       ((buffer[0x39] | ((buffer[0x3a] & 0x0f) << 8)) == (1688 - 1280)) &&
		       ((buffer[0x3c] | ((buffer[0x3d] & 0x0f) << 8)) == (802 - 768)) ) {
	       	      paneltype = Panel_1280x768;
		      checkexpand = FALSE;
		      cr37 |= 0x10;
		   }
	        }
	        break;
	    case 1400:
	        if(pSiS->VGAEngine == SIS_315_VGA) {
	           if(yres == 1050) {
	              paneltype = Panel310_1400x1050;
		      checkexpand = TRUE;
	           }
	        }
      	        break;
#if 0	    /* Treat this as custom, as we have no valid timing data yet */
	    case 1600:
	        if(pSiS->VGAEngine == SIS_315_VGA) {
	           if(yres == 1200) {
	              paneltype = Panel310_1600x1200;
		      checkexpand = TRUE;
	           }
	        }
      	        break;
#endif
         }

	 if(paneltype != Panel_Custom) {
	    if((buffer[0x47] & 0x18) == 0x18) {
	       cr37 |= ((((buffer[0x47] & 0x06) ^ 0x06) << 5) | 0x20);
	    } else {
	       /* What now? There is no digital separate output timing... */
	       xf86DrvMsg(pSiS->pScrn->scrnIndex, X_WARNING,
	       	   "CRT2: Unable to retrieve Sync polarity information\n");
	       cr37 |= 0xc0;  /* Default */
	    }
	 }

      }

      /* If we still don't know what panel this is, we take it
       * as a custom panel and derive the timing data from the
       * detailed timing blocks
       */
      if(paneltype == Panel_Custom) {

         BOOLEAN havesync = FALSE;
	 int i, temp, base = 0x36;
	 unsigned long estpack;
	 unsigned short estx[] = {
	 	720, 720, 640, 640, 640, 640, 800, 800,
		800, 800, 832,1024,1024,1024,1024,1280,
		1152
	 };
	 unsigned short esty[] = {
	 	400, 400, 480, 480, 480, 480, 600, 600,
		600, 600, 624, 768, 768, 768, 768,1024,
		870
	 };

	 paneltype = 0;
	 SiS_Pr->CP_Supports64048075 = TRUE;

	 /* Find the maximum resolution */

	 /* 1. From Established timings */
	 estpack = (buffer[0x23] << 9) | (buffer[0x24] << 1) | ((buffer[0x25] >> 7) & 0x01);
	 for(i=16; i>=0; i--) {
	     if(estpack & (1 << i)) {
	        if(estx[16 - i] > SiS_Pr->CP_MaxX) SiS_Pr->CP_MaxX = estx[16 - i];
		if(esty[16 - i] > SiS_Pr->CP_MaxY) SiS_Pr->CP_MaxY = esty[16 - i];
	     }
	 }

	 /* 2. From Standard Timings */
	 for(i=0x26; i < 0x36; i+=2) {
	    if((buffer[i] != 0x01) && (buffer[i+1] != 0x01)) {
	       temp = (buffer[i] + 31) * 8;
	       if(temp > SiS_Pr->CP_MaxX) SiS_Pr->CP_MaxX = temp;
	       switch((buffer[i+1] & 0xc0) >> 6) {
	       case 0x03: temp = temp * 9 / 16; break;
	       case 0x02: temp = temp * 4 / 5;  break;
	       case 0x01: temp = temp * 3 / 4;  break;
d9534 1
a9534 1
	       if(temp > SiS_Pr->CP_MaxY) SiS_Pr->CP_MaxY = temp;
d9537 26
d9564 74
a9637 1
	 /* Now extract the Detailed Timings and convert them into modes */
d9639 1
a9639 131
         for(i = 0; i < 4; i++, base += 18) {

	    /* Is this a detailed timing block or a monitor descriptor? */
	    if(buffer[base] || buffer[base+1] || buffer[base+2]) {

      	       xres = buffer[base+2] | ((buffer[base+4] & 0xf0) << 4);
               yres = buffer[base+5] | ((buffer[base+7] & 0xf0) << 4);

	       SiS_Pr->CP_HDisplay[i] = xres;
	       SiS_Pr->CP_HSyncStart[i] = xres + (buffer[base+8] | ((buffer[base+11] & 0xc0) << 2));
               SiS_Pr->CP_HSyncEnd[i]   = SiS_Pr->CP_HSyncStart[i] + (buffer[base+9] | ((buffer[base+11] & 0x30) << 4));
	       SiS_Pr->CP_HTotal[i] = xres + (buffer[base+3] | ((buffer[base+4] & 0x0f) << 8));
	       SiS_Pr->CP_HBlankStart[i] = xres + 1;
	       SiS_Pr->CP_HBlankEnd[i] = SiS_Pr->CP_HTotal[i];

	       SiS_Pr->CP_VDisplay[i] = yres;
               SiS_Pr->CP_VSyncStart[i] = yres + (((buffer[base+10] & 0xf0) >> 4) | ((buffer[base+11] & 0x0c) << 2));
               SiS_Pr->CP_VSyncEnd[i] = SiS_Pr->CP_VSyncStart[i] + ((buffer[base+10] & 0x0f) | ((buffer[base+11] & 0x03) << 4));
	       SiS_Pr->CP_VTotal[i] = yres + (buffer[base+6] | ((buffer[base+7] & 0x0f) << 8));
	       SiS_Pr->CP_VBlankStart[i] = yres + 1;
	       SiS_Pr->CP_VBlankEnd[i] = SiS_Pr->CP_VTotal[i];

	       SiS_Pr->CP_Clock[i] = (buffer[base] | (buffer[base+1] << 8)) * 10;

	       SiS_Pr->CP_DataValid[i] = TRUE;

	       /* Sort out invalid timings, interlace and too high clocks */
	       if((SiS_Pr->CP_HDisplay[i] & 7)						||
	          (SiS_Pr->CP_HDisplay[i] > SiS_Pr->CP_HSyncStart[i])  			||
	          (SiS_Pr->CP_HDisplay[i] >= SiS_Pr->CP_HSyncEnd[i])   			||
	          (SiS_Pr->CP_HDisplay[i] >= SiS_Pr->CP_HTotal[i])     			||
	          (SiS_Pr->CP_HSyncStart[i] >= SiS_Pr->CP_HSyncEnd[i]) 			||
	          (SiS_Pr->CP_HSyncStart[i] > SiS_Pr->CP_HTotal[i])    			||
	          (SiS_Pr->CP_HSyncEnd[i] > SiS_Pr->CP_HTotal[i])      			||
	          (SiS_Pr->CP_VDisplay[i] > SiS_Pr->CP_VSyncStart[i])  			||
	          (SiS_Pr->CP_VDisplay[i] >= SiS_Pr->CP_VSyncEnd[i])   			||
	          (SiS_Pr->CP_VDisplay[i] >= SiS_Pr->CP_VTotal[i])     			||
	          (SiS_Pr->CP_VSyncStart[i] > SiS_Pr->CP_VSyncEnd[i])  			||
	          (SiS_Pr->CP_VSyncStart[i] > SiS_Pr->CP_VTotal[i])    			||
	          (SiS_Pr->CP_VSyncEnd[i] > SiS_Pr->CP_VTotal[i])      			||
		  (((pSiS->VBFlags & VB_301C) && (SiS_Pr->CP_Clock[i] > 162500)) ||
	           ((!(pSiS->VBFlags & VB_301C)) && (SiS_Pr->CP_Clock[i] > 108200)))	||
		  (buffer[base+17] & 0x80)) {

	          SiS_Pr->CP_DataValid[i] = FALSE;

	       } else {

	          paneltype = Panel_Custom;

		  SiS_Pr->CP_HaveCustomData = TRUE;

		  if(xres > SiS_Pr->CP_MaxX) SiS_Pr->CP_MaxX = xres;
	          if(yres > SiS_Pr->CP_MaxY) SiS_Pr->CP_MaxY = yres;
		  if(SiS_Pr->CP_Clock[i] > SiS_Pr->CP_MaxClock) SiS_Pr->CP_MaxClock = SiS_Pr->CP_Clock[i];

		  SiS_Pr->CP_Vendor = buffer[9] | (buffer[8] << 8);
		  SiS_Pr->CP_Product = buffer[10] | (buffer[11] << 8);

		  /* By default we drive the LCD at 75Hz in 640x480 mode; if
		   * the panel does not provide this mode, use 60hz
		   */
		  if(!(buffer[0x23] & 0x04)) SiS_Pr->CP_Supports64048075 = FALSE;

	          /* We must assume the panel can scale, since we have
	           * no scaling data
		   */
	          checkexpand = FALSE;
	          cr37 |= 0x10;

	          /* Extract the sync polarisation information. This only works
	           * if the Flags indicate a digital separate output.
	           */
	          if((buffer[base+17] & 0x18) == 0x18) {
		     SiS_Pr->CP_HSync_P[i] = (buffer[base+17] & 0x02) ? TRUE : FALSE;
		     SiS_Pr->CP_VSync_P[i] = (buffer[base+17] & 0x04) ? TRUE : FALSE;
		     SiS_Pr->CP_SyncValid[i] = TRUE;
		     if(!havesync) {
	                cr37 |= ((((buffer[base+17] & 0x06) ^ 0x06) << 5) | 0x20);
			havesync = TRUE;
	   	     }
	          } else {
		     SiS_Pr->CP_SyncValid[i] = FALSE;
		  }
	       }
            }
	 }
	 if(!havesync) {
	    xf86DrvMsg(pSiS->pScrn->scrnIndex, X_WARNING,
	       	   "CRT2: Unable to retrieve Sync polarity information\n");
   	 }
      }

      if(paneltype && checkexpand) {
         /* If any of the Established low-res modes is supported, the
	  * panel can scale automatically. For 800x600 panels, we only 
	  * check the even lower ones.
	  */
	 if(paneltype == Panel_800x600) {
	    if(buffer[0x23] & 0xfc) cr37 |= 0x10;
	 } else {
            if(buffer[0x23])	    cr37 |= 0x10;
	 }
      }
       
      break;
      
   case 3:							/* Analyze EDID V2 */
   case 4:
      index = 0;

      if(!(checkedid2(buffer))) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: EDID corrupt\n");
	 return 0;
      }

      if((buffer[0x41] & 0x0f) == 0x03) {
         index = 0x42 + 3;
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: Display supports TMDS input on primary interface\n");
      } else if((buffer[0x41] & 0xf0) == 0x30) {
         index = 0x46 + 3;
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: Display supports TMDS input on secondary interface\n");
      } else {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: Display does not support TMDS video interface (0x%02x)\n", 
		buffer[0x41]);
	 return 0;
      }
a9640 56
      paneltype = Panel_Custom;
      SiS_Pr->CP_MaxX = xres = buffer[0x76] | (buffer[0x77] << 8);
      SiS_Pr->CP_MaxY = yres = buffer[0x78] | (buffer[0x79] << 8);
      switch(xres) {
         case 800:
	     if(yres == 600) {
	     	paneltype = Panel_800x600;
	     	checkexpand = TRUE;
	     }
	     break;
         case 1024:
	     if(yres == 768) {
	     	paneltype = Panel_1024x768;
	     	checkexpand = TRUE;
	     }
	     break;
	 case 1152:
	     if(yres == 768) {
	        if(pSiS->VGAEngine == SIS_300_VGA) {
		   paneltype = Panel300_1152x768;
		} else {
		   paneltype = Panel310_1152x768;
		}
	     	checkexpand = TRUE;
	     }
	     break;
	 case 1280:
	     if(yres == 960) {
	        if(pSiS->VGAEngine == SIS_315_VGA) {
	     	   paneltype = Panel310_1280x960;
		} else {
		   paneltype = Panel300_1280x960;
		}
	     } else if(yres == 1024) {
	     	paneltype = Panel_1280x1024;
		checkexpand = TRUE;
	     }
	     /* 1280x768 treated as custom here */
	     break;
	 case 1400:
	     if(pSiS->VGAEngine == SIS_315_VGA) {
	        if(yres == 1050) {
	           paneltype = Panel310_1400x1050;
		   checkexpand = TRUE;
	        }
	     }
      	     break;
#if 0    /* Treat this one as custom since we have no timing data yet */
	 case 1600:
	     if(pSiS->VGAEngine == SIS_315_VGA) {
	        if(yres == 1200) {
	           paneltype = Panel310_1600x1200;
		   checkexpand = TRUE;
	        }
	     }
      	     break;
a9641 1
      }
d9643 1
a9643 6
      /* Determine if RGB18 or RGB24 */
      if(index) {
         if((buffer[index] == 0x20) || (buffer[index] == 0x34)) {
	    cr37 |= 0x01;
	 }
      }
d9645 1
a9645 154
      if(checkexpand) {
         /* TODO - for now, we let the panel scale */
	 cr37 |= 0x10;
      }

      /* Now seek 4-Byte Timing codes and extract sync pol info */
      index = 0x80;
      if(buffer[0x7e] & 0x20) {			    /* skip Luminance Table (if provided) */
         lumsize = buffer[0x80] & 0x1f;
	 if(buffer[0x80] & 0x80) lumsize *= 3;
	 lumsize++;  /* luminance header byte */
	 index += lumsize;
      }
      index += (((buffer[0x7e] & 0x1c) >> 2) * 8);   /* skip Frequency Ranges */
      index += ((buffer[0x7e] & 0x03) * 27);         /* skip Detailed Range Limits */
      numcodes = (buffer[0x7f] & 0xf8) >> 3;
      if(numcodes) {
         myindex = index;
 	 seekcode = (xres - 256) / 16;
     	 for(i=0; i<numcodes; i++) {
	    if(buffer[myindex] == seekcode) break;
	    myindex += 4;
	 }
	 if(buffer[myindex] == seekcode) {
	    cr37 |= ((((buffer[myindex + 1] & 0x0c) ^ 0x0c) << 4) | 0x20);
	 } else {
	    xf86DrvMsg(pSiS->pScrn->scrnIndex, X_WARNING,
	        "CRT2: Unable to retrieve Sync polarity information\n");
	 }
      } else {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_WARNING,
	     "CRT2: Unable to retrieve Sync polarity information\n");
      }

      /* Now seek the detailed timing descriptions for custom panels */
      if(paneltype == Panel_Custom) {

         SiS_Pr->CP_Supports64048075 = TRUE;

         index += (numcodes * 4);
	 numcodes = buffer[0x7f] & 0x07;
	 for(i=0; i<numcodes; i++, index += 18) {
	    xres = buffer[index+2] | ((buffer[index+4] & 0xf0) << 4);
            yres = buffer[index+5] | ((buffer[index+7] & 0xf0) << 4);

	    SiS_Pr->CP_HDisplay[i] = xres;
	    SiS_Pr->CP_HSyncStart[i] = xres + (buffer[index+8] | ((buffer[index+11] & 0xc0) << 2));
            SiS_Pr->CP_HSyncEnd[i] = SiS_Pr->CP_HSyncStart[i] + (buffer[index+9] | ((buffer[index+11] & 0x30) << 4));
	    SiS_Pr->CP_HTotal[i] = xres + (buffer[index+3] | ((buffer[index+4] & 0x0f) << 8));
	    SiS_Pr->CP_HBlankStart[i] = xres + 1;
	    SiS_Pr->CP_HBlankEnd[i] = SiS_Pr->CP_HTotal[i];

	    SiS_Pr->CP_VDisplay[i] = yres;
            SiS_Pr->CP_VSyncStart[i] = yres + (((buffer[index+10] & 0xf0) >> 4) | ((buffer[index+11] & 0x0c) << 2));
            SiS_Pr->CP_VSyncEnd[i] = SiS_Pr->CP_VSyncStart[i] + ((buffer[index+10] & 0x0f) | ((buffer[index+11] & 0x03) << 4));
	    SiS_Pr->CP_VTotal[i] = yres + (buffer[index+6] | ((buffer[index+7] & 0x0f) << 8));
	    SiS_Pr->CP_VBlankStart[i] = yres + 1;
	    SiS_Pr->CP_VBlankEnd[i] = SiS_Pr->CP_VTotal[i];

	    SiS_Pr->CP_Clock[i] = (buffer[index] | (buffer[index+1] << 8)) * 10;

	    SiS_Pr->CP_DataValid[i] = TRUE;

	    if((SiS_Pr->CP_HDisplay[i] & 7)						||
	       (SiS_Pr->CP_HDisplay[i] > SiS_Pr->CP_HSyncStart[i])  			||
	       (SiS_Pr->CP_HDisplay[i] >= SiS_Pr->CP_HSyncEnd[i])   			||
	       (SiS_Pr->CP_HDisplay[i] >= SiS_Pr->CP_HTotal[i])     			||
	       (SiS_Pr->CP_HSyncStart[i] >= SiS_Pr->CP_HSyncEnd[i]) 			||
	       (SiS_Pr->CP_HSyncStart[i] > SiS_Pr->CP_HTotal[i])    			||
	       (SiS_Pr->CP_HSyncEnd[i] > SiS_Pr->CP_HTotal[i])      			||
	       (SiS_Pr->CP_VDisplay[i] > SiS_Pr->CP_VSyncStart[i])  			||
	       (SiS_Pr->CP_VDisplay[i] >= SiS_Pr->CP_VSyncEnd[i])   			||
	       (SiS_Pr->CP_VDisplay[i] >= SiS_Pr->CP_VTotal[i])     			||
	       (SiS_Pr->CP_VSyncStart[i] > SiS_Pr->CP_VSyncEnd[i])  			||
	       (SiS_Pr->CP_VSyncStart[i] > SiS_Pr->CP_VTotal[i])    			||
	       (SiS_Pr->CP_VSyncEnd[i] > SiS_Pr->CP_VTotal[i])      			||
	       (((pSiS->VBFlags & VB_301C) && (SiS_Pr->CP_Clock[i] > 162500)) ||
	        ((!(pSiS->VBFlags & VB_301C)) && (SiS_Pr->CP_Clock[i] > 108200)))	||
	       (buffer[index + 17] & 0x80)) {

	       SiS_Pr->CP_DataValid[i] = FALSE;

	    } else {

	       SiS_Pr->CP_HaveCustomData = TRUE;

	       if(SiS_Pr->CP_Clock[i] > SiS_Pr->CP_MaxClock) SiS_Pr->CP_MaxClock = SiS_Pr->CP_Clock[i];

	       SiS_Pr->CP_HSync_P[i] = (buffer[index + 17] & 0x02) ? TRUE : FALSE;
	       SiS_Pr->CP_VSync_P[i] = (buffer[index + 17] & 0x04) ? TRUE : FALSE;
	       SiS_Pr->CP_SyncValid[i] = TRUE;

	       SiS_Pr->CP_Vendor = buffer[2] | (buffer[1] << 8);
	       SiS_Pr->CP_Product = buffer[3] | (buffer[4] << 8);

	       /* We must assume the panel can scale, since we have
	        * no scaling data
    	        */
	       cr37 |= 0x10;

	    }
	 }

      }

      break;

   }

   /* 1280x960 panels are always RGB24, unable to scale and use
    * high active sync polarity
    */
   if(pSiS->VGAEngine == SIS_315_VGA) {
      if(paneltype == Panel310_1280x960) cr37 &= 0x0e;
   } else {
      if(paneltype == Panel300_1280x960) cr37 &= 0x0e;
   }

   for(i = 0; i < 7; i++) {
      if(SiS_Pr->CP_DataValid[i]) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
            "Non-standard LCD timing data no. %d:\n", i);
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	    "   HDisplay %d HSync %d HSyncEnd %d HTotal %d\n",
	    SiS_Pr->CP_HDisplay[i], SiS_Pr->CP_HSyncStart[i],
	    SiS_Pr->CP_HSyncEnd[i], SiS_Pr->CP_HTotal[i]);
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
            "   VDisplay %d VSync %d VSyncEnd %d VTotal %d\n",
            SiS_Pr->CP_VDisplay[i], SiS_Pr->CP_VSyncStart[i],
   	    SiS_Pr->CP_VSyncEnd[i], SiS_Pr->CP_VTotal[i]);
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	    "   Pixel clock: %3.3fMhz\n", (float)SiS_Pr->CP_Clock[i] / 1000);
	 xf86DrvMsg(pSiS->pScrn->scrnIndex, X_INFO,
	    "   To use this, add \"%dx%d\" to the list of Modes in the Screen section\n",
	    SiS_Pr->CP_HDisplay[i],
	    SiS_Pr->CP_VDisplay[i]);
      }
   }

   if(paneltype) {
       if(!SiS_Pr->CP_PreferredX) SiS_Pr->CP_PreferredX = SiS_Pr->CP_MaxX;
       if(!SiS_Pr->CP_PreferredY) SiS_Pr->CP_PreferredY = SiS_Pr->CP_MaxY;
       cr37 &= 0xf1;
       SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x36,0xf0,paneltype);
       SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,0xf1,cr37);
       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x32,0x08);
#ifdef TWDEBUG
       xf86DrvMsgVerb(pSiS->pScrn->scrnIndex, X_PROBED, 3, 
       	"CRT2: [DDC LCD results: 0x%02x, 0x%02x]\n", paneltype, cr37);
#endif	
   }
   return 0;
}
   
d9647 1
a9647 1
SiS_SenseVGA2DDC(SiS_Private *SiS_Pr, SISPtr pSiS)
d9649 2
a9650 4
   USHORT DDCdatatype,flag;
   BOOLEAN foundcrt = FALSE;
   int retry;
   unsigned char buffer[256];
d9652 6
a9657 1
   if(!(pSiS->VBFlags & (VB_301|VB_301B|VB_301C|VB_302B))) return 0;
d9659 7
a9665 20
   if(SiS_InitDDCRegs(SiS_Pr, pSiS->VBFlags, pSiS->VGAEngine, 2, 0, FALSE) == 0xFFFF) return 0;
   
   SiS_Pr->SiS_DDC_SecAddr = 0x00;
   
   /* Probe supported DA's */
   flag = SiS_ProbeDDC(SiS_Pr);
   if(flag & 0x10) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa6;	/* EDID V2 (FP) */
      DDCdatatype = 4;
   } else if(flag & 0x08) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa2;	/* EDID V2 (P&D-D Monitor) */
      DDCdatatype = 3;
   } else if(flag & 0x02) {
      SiS_Pr->SiS_DDC_DeviceAddr = 0xa0;	/* EDID V1 */
      DDCdatatype = 1;
   } else {
   	xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
		"Do DDC answer\n");
   	return 0;				/* no DDC support (or no device attached) */
   }
d9667 4
a9670 57
   /* Read the entire EDID */
   retry = 2;
   do {
      if(SiS_ReadDDC(SiS_Pr, DDCdatatype, buffer)) {
         xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	 	"CRT2: DDC read failed (attempt %d), %s\n", 
		(3-retry), (retry == 1) ? "giving up" : "retrying");
	 retry--;
	 if(retry == 0) return 0xFFFF;
      } else break;
   } while(1);
   
   /* Analyze EDID. We don't have many chances to 
    * distinguish a flat panel from a CRT...
    */
   switch(DDCdatatype) {
   case 1:
      if(!(checkedid1(buffer))) {
          xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	  	"CRT2: EDID corrupt\n");
      	  return 0;
      }
      if(buffer[0x14] & 0x80) {			/* Display uses digital input */
          xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	  	"CRT2: Attached display expects digital input\n");
      	  return 0;
      }
      SiS_Pr->CP_Vendor = buffer[9] | (buffer[8] << 8);
      SiS_Pr->CP_Product = buffer[10] | (buffer[11] << 8);
      foundcrt = TRUE;
      break;
   case 3:
   case 4:
      if(!(checkedid2(buffer))) {
          xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	  	"CRT2: EDID corrupt\n");
      	  return 0;
      }
      if( ((buffer[0x41] & 0x0f) != 0x01) &&  	/* Display does not support analog input */
          ((buffer[0x41] & 0x0f) != 0x02) &&
	  ((buffer[0x41] & 0xf0) != 0x10) &&
	  ((buffer[0x41] & 0xf0) != 0x20) ) {
	  xf86DrvMsg(pSiS->pScrn->scrnIndex, X_PROBED,
	     	"CRT2: Attached display does not support analog input (0x%02x)\n",
		buffer[0x41]);
	  return 0;
      }
      SiS_Pr->CP_Vendor = buffer[2] | (buffer[1] << 8);
      SiS_Pr->CP_Product = buffer[3] | (buffer[4] << 8);
      foundcrt = TRUE;
      break;
   }

   if(foundcrt) {
      SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x32,0x10);
   }
   return(0);
d9672 1
d9679 1
a9679 1
  USHORT tempbl;
d9681 4
a9684 2
  tempbl = SiS_GetCH70xx(SiS_Pr,(tempax & 0x00FF));
  tempbl = (((tempbl & tempbh) << 8) | tempax);
d9688 1
a9688 1
/* Generic I2C functions for Chrontel & DDC --------- */
d9694 2
a9695 1
  SiS_WaitRetrace1(SiS_Pr);
d9698 2
a9699 8
  SiS_WaitRetrace1(SiS_Pr);
}

USHORT
SiS_ReadDDC1Bit(SiS_Private *SiS_Pr)
{
   SiS_WaitRetrace1(SiS_Pr);
   return((SiS_GetReg(SiS_Pr->SiS_P3c4,0x11) & 0x02) >> 1);
d9702 2
a9703 2
/* Set I2C start condition */
/* This is done by a SD high-to-low transition while SC is high */
d9707 7
a9713 11
  if(SiS_SetSCLKLow(SiS_Pr)) return 0xFFFF;			           /* (SC->low)  */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
    		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  SiS_Pr->SiS_DDC_Data);             			   /* SD->high */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* SC->high */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  0x00);                             			   /* SD->low = start condition */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* (SC->low) */
d9717 2
a9718 2
/* Set I2C stop condition */
/* This is done by a SD low-to-high transition while SC is high */
d9722 7
a9728 11
  if(SiS_SetSCLKLow(SiS_Pr)) return 0xFFFF;			           /* (SC->low) */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  	          SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  0x00);          		   			   /* SD->low   */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* SC->high  */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  SiS_Pr->SiS_DDC_Data);  	   			   /* SD->high = stop condition */
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			           /* (SC->high) */
d9732 1
a9732 1
/* Write 8 bits of data */
d9738 3
a9740 3
  flag = 0x80;
  for(i=0; i<8; i++) {
    SiS_SetSCLKLow(SiS_Pr);				                      /* SC->low */
d9742 2
a9743 4
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
      		      SiS_Pr->SiS_DDC_Index,
                      SiS_Pr->SiS_DDC_NData,
		      SiS_Pr->SiS_DDC_Data);            		      /* Write bit (1) to SD */
d9745 2
a9746 4
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
      		      SiS_Pr->SiS_DDC_Index,
                      SiS_Pr->SiS_DDC_NData,
		      0x00);                            		      /* Write bit (0) to SD */
d9748 1
a9748 1
    SiS_SetSCLKHigh(SiS_Pr);				                      /* SC->high */
d9751 1
a9751 1
  temp = SiS_CheckACK(SiS_Pr);				                      /* Check acknowledge */
d9764 2
a9765 4
    SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
    		    SiS_Pr->SiS_DDC_Index,
                    SiS_Pr->SiS_DDC_NData,
		    SiS_Pr->SiS_DDC_Data);
d9767 1
a9767 1
    temp = SiS_GetReg(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index);
d9776 8
a9783 4
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NClk,
		  0x00);      					/* SetSCLKLow()  */
d9791 1
a9791 1
  USHORT temp, watchdog=1000;
d9793 2
a9794 4
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NClk,
		  SiS_Pr->SiS_DDC_Clk);  			/* SetSCLKHigh()  */
d9796 1
a9796 1
    temp = SiS_GetReg(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index);
d9798 1
a9798 6
  if (!watchdog) {
#ifdef TWDEBUG
        xf86DrvMsg(0, X_INFO, "SetClkHigh failed\n");
#endif
  	return 0xFFFF;
  }
d9803 11
a9813 1
/* Check I2C acknowledge */
d9820 7
a9826 9
  SiS_SetSCLKLow(SiS_Pr);				           /* (SC->low) */
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
  		  SiS_Pr->SiS_DDC_Index,
                  SiS_Pr->SiS_DDC_NData,
		  SiS_Pr->SiS_DDC_Data);     			   /* (SD->high) */
  SiS_SetSCLKHigh(SiS_Pr);				           /* SC->high = clock impulse for ack */
  tempah = SiS_GetReg(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index); /* Read SD */
  SiS_SetSCLKLow(SiS_Pr);				           /* SC->low = end of clock impulse */
  if(tempah & SiS_Pr->SiS_DDC_Data) return(1);			   /* Ack OK if bit = 0 */
d9830 1
a9830 1
/* End of I2C functions ----------------------- */
d9833 1
a9833 1
/* =============== SiS 315/330 O.E.M. ================= */
a9837 81
GetRAMDACromptr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT romptr;

  if(HwInfo->jChipType < SIS_330) {
     romptr = ROMAddr[0x128] | (ROMAddr[0x129] << 8);
     if(SiS_Pr->SiS_VBType & VB_SIS301B302B)
        romptr = ROMAddr[0x12a] | (ROMAddr[0x12b] << 8);
  } else {
     romptr = ROMAddr[0x1a8] | (ROMAddr[0x1a9] << 8);
     if(SiS_Pr->SiS_VBType & VB_SIS301B302B)
        romptr = ROMAddr[0x1aa] | (ROMAddr[0x1ab] << 8);
  }
  return(romptr);
}

static USHORT
GetLCDromptr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT romptr;

  if(HwInfo->jChipType < SIS_330) {
     romptr = ROMAddr[0x120] | (ROMAddr[0x121] << 8);
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
        romptr = ROMAddr[0x122] | (ROMAddr[0x123] << 8);
  } else {
     romptr = ROMAddr[0x1a0] | (ROMAddr[0x1a1] << 8);
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
        romptr = ROMAddr[0x1a2] | (ROMAddr[0x1a3] << 8);
  }
  return(romptr);
}

static USHORT
GetTVromptr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT romptr;

  if(HwInfo->jChipType < SIS_330) {
     romptr = ROMAddr[0x114] | (ROMAddr[0x115] << 8);
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
        romptr = ROMAddr[0x11a] | (ROMAddr[0x11b] << 8);
  } else {
     romptr = ROMAddr[0x194] | (ROMAddr[0x195] << 8);
     if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
        romptr = ROMAddr[0x19a] | (ROMAddr[0x19b] << 8);
  }
  return(romptr);
}

static USHORT
GetLCDPtrIndexBIOS(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT index;

  if((IS_SIS650) && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {
     if(!(SiS_IsNotM650orLater(SiS_Pr, HwInfo))) {
        if((index = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xf0)) {
	   index >>= 4;
	   index *= 3;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) index += 2;
           else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) index++;
           return index;
	}
     }
  }

  index = SiS_Pr->SiS_LCDResInfo & 0x0F;
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050)      index -= 5;
  else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1600x1200) index -= 6;
  index--;
  index *= 3;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) index += 2;
  else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) index++;
  return index;
}

static USHORT
d9845 1
a9845 1
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) index += 2;
d9851 11
d9868 2
a9869 4
  if(SiS_Pr->SiS_TVMode & TVSetPAL) index = 1;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) index = 2;

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) index = 0;
d9873 2
a9874 4
  if((SiS_Pr->SiS_VBInfo & SetInSlaveMode) &&
     (SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) {
     index++;
  }
d9879 1
a9879 42
static ULONG
GetOEMTVPtr661_2(SiS_Private *SiS_Pr)
{
   USHORT index = 0, temp = 0;

   if(SiS_Pr->SiS_TVMode & TVSetPAL)   index = 1;
   if(SiS_Pr->SiS_TVMode & TVSetPALM)  index = 2;
   if(SiS_Pr->SiS_TVMode & TVSetPALN)  index = 3;
   if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) index = 6;
   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
      index = 4;
      if(SiS_Pr->SiS_TVMode & TVSetPALM)  index++;
      if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) index = 7;
   }

   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if((!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
         (SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) {
	 index += 8;
	 temp++;
      }
      temp += 0x0100;
   }
   return(ULONG)(index | (temp << 16));
}

static int
GetOEMTVPtr661(SiS_Private *SiS_Pr)
{
   int index = 0;

   if(SiS_Pr->SiS_TVMode & TVSetPAL)       index = 2;
   if(SiS_Pr->SiS_TVMode & TVSetHiVision)  index = 4;
   if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) index = 6;
   if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) index = 8;
   if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) index = 10;

   if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) index++;

   return index;
}

d9881 2
a9882 1
SetDelayComp(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo)
d9884 1
a9884 3
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT delay=0,index,myindex,temp,romptr=0;
  BOOLEAN dochiptest = TRUE;
d9886 1
a9886 4
  /* Find delay (from ROM, internal tables, PCI subsystem) */

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {			/* ------------ VGA */
     
d9888 9
a9896 1
        romptr = GetRAMDACromptr(SiS_Pr, HwInfo);
d9900 5
a9904 14
        delay = 0x04;
        if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	   if(IS_SIS650) {
	      delay = 0x0a;
	   } else if(IS_SIS740) {
	      delay = 0x00;
	   } else if(HwInfo->jChipType < SIS_330) {
	      delay = 0x0c;
	   } else {
	      delay = 0x0c;
	   }
	} else if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
           delay = 0x00;
	}
d9906 17
a9922 24

  } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD|SetCRT2ToLCDA)) {  /* ----------	LCD/LCDA */

     BOOLEAN gotitfrompci = FALSE;

     /* Custom Panel? */

     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	   delay = 0x00;
	   if((SiS_Pr->PanelXRes <= 1280) && (SiS_Pr->PanelYRes <= 1024)) {
	      delay = 0x20;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,delay);
	} else {
	   delay = 0x0c;
	   if(SiS_Pr->SiS_VBType & VB_SIS301C) delay = 0x03;
	   else if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	      if(IS_SIS740) delay = 0x01;
	      else          delay = 0x03;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,delay);
	}
        return;
d9924 12
a9935 10

     /* Could we detect a PDC for LCD? If yes, use it */

     if((SiS_Pr->SiS_VBType & VB_SIS301LV302LV) && (SiS_Pr->PDC != -1)) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,(SiS_Pr->PDC & 0x0f));
	} else {
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((SiS_Pr->PDC & 0x0f) << 4));
	}
        return;
d9937 27
a9963 33

     /* This is a piece of typical SiS crap: They code the OEM LCD
      * delay into the code, at no defined place in the BIOS.
      * We now have to start doing a PCI subsystem check here.
      */

     switch(SiS_Pr->SiS_CustomT) {
     case CUT_COMPAQ1280:
     case CUT_COMPAQ12802:
	if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
	   gotitfrompci = TRUE;
	   dochiptest = FALSE;
	   delay = 0x03;
	}
	break;
     case CUT_CLEVO1400:
     case CUT_CLEVO14002:
	/* if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) { */
	   gotitfrompci = TRUE;
	   dochiptest = FALSE;
	   delay = 0x02;
	/* } */
	break;
     case CUT_CLEVO1024:
     case CUT_CLEVO10242:
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	   gotitfrompci = TRUE;
	   dochiptest = FALSE;
	   delay = 0x33;
	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2D,delay);
	   delay &= 0x0f;
	}
	break;
d9965 1
d9967 7
a9973 92
     /* Could we find it through the PCI ID? If no, use ROM or table */

     if(!gotitfrompci) {

        index = GetLCDPtrIndexBIOS(SiS_Pr, HwInfo);
        myindex = GetLCDPtrIndex(SiS_Pr);

        if(IS_SIS650 && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {

           if(SiS_IsNotM650orLater(SiS_Pr, HwInfo)) {

              if((ROMAddr) && SiS_Pr->SiS_UseROM) {
	         /* Always use the second pointer on 650; some BIOSes */
                 /* still carry old 301 data at the first location    */
	         /* romptr = ROMAddr[0x120] | (ROMAddr[0x121] << 8);  */
	         /* if(SiS_Pr->SiS_VBType & VB_SIS302LV)              */
	         romptr = ROMAddr[0x122] | (ROMAddr[0x123] << 8);
	         if(!romptr) return;
	         delay = ROMAddr[(romptr + index)];
	      } else {
                 delay = SiS310_LCDDelayCompensation_650301LV[myindex];
	      }

          } else {

             delay = SiS310_LCDDelayCompensation_651301LV[myindex];
	     if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV))
	        delay = SiS310_LCDDelayCompensation_651302LV[myindex];

          }

        } else if((ROMAddr) && SiS_Pr->SiS_UseROM &&
	          (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x1024) &&
		  (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x768)  &&
		  (SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_Panel1280x960)) {

	   /* Data for 1280x1024 wrong in 301B BIOS */
           romptr = GetLCDromptr(SiS_Pr, HwInfo);
	   if(!romptr) return;
	   delay = ROMAddr[(romptr + index)];

        } else if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {

	   if(IS_SIS740) delay = 0x03;
	   else          delay = 0x00;

	} else {

           delay = SiS310_LCDDelayCompensation_301[myindex];
	   if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
	      if(IS_SIS740) delay = 0x01;
	      else          delay = SiS310_LCDDelayCompensation_650301LV[myindex];
	   } else if(SiS_Pr->SiS_VBType & VB_SIS301C) {
	      if(IS_SIS740) delay = 0x01;  /* ? */
	      else          delay = 0x03;
	   } else if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	      if(IS_SIS740) delay = 0x01;
	      else          delay = SiS310_LCDDelayCompensation_3xx301B[myindex];
	   }

        }

     }  /* got it from PCI */

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0x0F,((delay << 4) & 0xf0));
	dochiptest = FALSE;
     }
     
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {			/* ------------ TV */

     index = GetTVPtrIndex(SiS_Pr);
     
     if(IS_SIS650 && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {

        if(SiS_IsNotM650orLater(SiS_Pr,HwInfo)) {

           if((ROMAddr) && SiS_Pr->SiS_UseROM) {
	      /* Always use the second pointer on 650; some BIOSes */
              /* still carry old 301 data at the first location    */
              /* romptr = ROMAddr[0x114] | (ROMAddr[0x115] << 8);  */
	      /* if(SiS_Pr->SiS_VBType & VB_SIS302LV) */
	      romptr = ROMAddr[0x11a] | (ROMAddr[0x11b] << 8);
	      if(!romptr) return;
	      delay = ROMAddr[romptr + index];

	   } else {

	      delay = SiS310_TVDelayCompensation_301B[index];

	   }

d9975 1
a9975 20

           switch(SiS_Pr->SiS_CustomT) {
	   case CUT_COMPAQ1280:
	   case CUT_COMPAQ12802:
	   case CUT_CLEVO1400:
	   case CUT_CLEVO14002:
	      delay = 0x02;
	      dochiptest = FALSE;
	      break;
	   case CUT_CLEVO1024:
	   case CUT_CLEVO10242:
	      delay = 0x03;
	      dochiptest = FALSE;
   	      break;
	   default:
              delay = SiS310_TVDelayCompensation_651301LV[index];
	      if(SiS_Pr->SiS_VBType & VB_SIS302LV) {
	         delay = SiS310_TVDelayCompensation_651302LV[index];
	      }
	   }
a9976 24

     } else if((ROMAddr) && SiS_Pr->SiS_UseROM) {

        romptr = GetTVromptr(SiS_Pr, HwInfo);
	if(!romptr) return;
	delay = ROMAddr[romptr + index];

     } else if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {

        delay = SiS310_TVDelayCompensation_LVDS[index];

     } else {

	delay = SiS310_TVDelayCompensation_301[index];
        if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	   if(IS_SIS740) {
	      delay = SiS310_TVDelayCompensation_740301B[index];
	      /* LV: use 301 data? BIOS bug? */
	   } else {
              delay = SiS310_TVDelayCompensation_301B[index];
	      if(SiS_Pr->SiS_VBType & VB_SIS301C) delay = 0x02;
	   }
	}

d9978 4
a9981 16

     if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x13) & 0x04) {  /* LCDA */
	delay &= 0x0f;
	dochiptest = FALSE;
     }
    
  } else return;

  /* Write delay */

  if(SiS_Pr->SiS_VBType & VB_SISVB) {

     if(IS_SIS650 && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV) && dochiptest) {

        temp = (SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xf0) >> 4;
        if(temp == 8) {		/* 1400x1050 BIOS (COMPAL) */
a9986 2
        } else if(temp > 7) {	/* 1280x1024 BIOS (which one?) */
	   delay = 0x35;
d9988 1
a9988 2
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2D,delay);

a9989 8

        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0xF0,delay);

     }

  } else {  /* LVDS */

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
a9990 7
     } else {
        if(IS_SIS650 && (SiS_Pr->SiS_IF_DEF_CH70xx != 0)) {
           delay <<= 4;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0x0F,delay);
        } else {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0xF0,delay);
        }
a9991 1

a9992 1

d9995 1
d9997 2
a9998 2
SetAntiFlicker(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
               USHORT ModeNo,USHORT ModeIdIndex)
d10000 1
a10000 2
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,temp1,romptr=0;
d10002 2
a10003 1
  if(SiS_Pr->SiS_TVMode & (TVSetYPbPr750p|TVSetYPbPr525p)) return;
a10009 4
  temp = GetTVPtrIndex(SiS_Pr);
  temp >>= 1;  	  /* 0: NTSC/YPbPr, 1: PAL, 2: HiTV */
  temp1 = temp;

d10011 2
a10012 5
     if(HwInfo->jChipType >= SIS_661) {
	romptr = ROMAddr[0x260] | (ROMAddr[0x261] << 8);
	temp1 = GetOEMTVPtr661(SiS_Pr);
        temp1 >>= 1;
     } else if(HwInfo->jChipType >= SIS_330) {
a10013 2
     } else {
        romptr = ROMAddr[0x112] | (ROMAddr[0x113] << 8);
d10018 2
a10019 2
     temp1 <<= 1;
     temp = ROMAddr[romptr + temp1 + index];
d10028 1
d10030 2
a10031 2
SetEdgeEnhance(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
               USHORT ModeNo,USHORT ModeIdIndex)
d10033 1
a10033 2
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,temp1,romptr=0;
d10036 1
a10036 2
  temp >>= 1;              	/* 0: NTSC/YPbPr, 1: PAL, 2: HiTV */
  temp1 = temp;
d10044 2
a10045 5
     if(HwInfo->jChipType >= SIS_661) {
	romptr = ROMAddr[0x26c] | (ROMAddr[0x26d] << 8);
	temp1 = GetOEMTVPtr661(SiS_Pr);
        temp1 >>= 1;
     } else if(HwInfo->jChipType >= SIS_330) {
a10046 2
     } else {
        romptr = ROMAddr[0x124] | (ROMAddr[0x125] << 8);
d10051 2
a10052 2
     temp1 <<= 1;
     temp = ROMAddr[romptr + temp1 + index];
d10060 1
d10062 2
a10063 2
SetYFilter(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
           USHORT ModeNo,USHORT ModeIdIndex)
d10065 5
a10069 3
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index, myindex, oldindex,temp, i, j, flag1 = 0, flag2 = 0, romptr = 0;
  ULONG  lindex;
d10071 1
a10071 1
  if(ModeNo<=0x13) {
d10077 14
a10090 1
  oldindex = index;
d10092 22
a10113 33
  if((HwInfo->jChipType >= SIS_661) && ROMAddr && SiS_Pr->SiS_UseROM) {
     if(ModeNo > 0x13) {
        index =  SiS_Pr->SiS_EModeIDTable[ModeIdIndex].VB_ExtTVYFilterIndexROM661;
     }
     lindex = GetOEMTVPtr661_2(SiS_Pr);
     if(lindex & 0x00ff0000) flag1 = 1;
     if(lindex & 0xff000000) flag2 = 1;
     lindex &= 0xffff;

     /* NTSC-J: Use PAL filters */
     if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) lindex = 1;

     romptr = ROMAddr[0x268] | (ROMAddr[0x269] << 8);
     if(flag1) myindex = index * 7;
     else      myindex = index << 2;

     if(romptr) {
        romptr += (lindex << 1);
        romptr = (ROMAddr[romptr] | (ROMAddr[romptr+1] << 8)) + myindex;
	if(romptr) {
           if((!flag1) && (flag2)) {
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x35,0x00);
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x36,0x00);
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x37,0x00);
	      SiS_SetReg(SiS_Pr->SiS_Part2Port,0x38,ROMAddr[romptr++]);
           } else {
	      for(i=0x35; i<=0x38; i++) {
                 SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr++]);
              }
           }
           if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	      for(j=0, i=0x48; i<=0x4a; i++, j++) {
                 SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr++]);
d10115 16
a10130 27
           }
           return;
	}
     }
  }

  index = oldindex;

  temp = GetTVPtrIndex(SiS_Pr);
  temp >>= 1;  			/* 0: NTSC/YPbPr, 1: PAL, 2: HiTV */

  if(SiS_Pr->SiS_TVMode & TVSetNTSCJ)	     temp = 1;  /* NTSC-J uses PAL */
  else if(SiS_Pr->SiS_TVMode & TVSetPALM)    temp = 3;  /* PAL-M */
  else if(SiS_Pr->SiS_TVMode & TVSetPALN)    temp = 4;  /* PAL-N */
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) temp = 1;  /* HiVision uses PAL */

  if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
     for(i=0x35, j=0; i<=0x38; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter2[temp][index][j]);
     }
     for(i=0x48; i<=0x4A; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter2[temp][index][j]);
     }
  } else {
     for(i=0x35, j=0; i<=0x38; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter1[temp][index][j]);
     }
d10134 1
d10136 2
a10137 2
SetPhaseIncr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
             USHORT ModeNo,USHORT ModeIdIndex)
d10139 1
a10139 3
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,i,j,resinfo,romptr=0;
  ULONG  lindex;
d10143 3
a10145 24
  /* NTSC-J data not in BIOS, and already set in SetGroup2 */
  if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) return;

  if(HwInfo->jChipType >= SIS_661) {
     lindex = GetOEMTVPtr661_2(SiS_Pr) & 0xffff;
     lindex <<= 2;
     if((ROMAddr) && SiS_Pr->SiS_UseROM) {
        romptr = ROMAddr[0x264] | (ROMAddr[0x265] << 8);
     }
     if(romptr) {
	romptr += lindex;
	for(j=0, i=0x31; i<=0x34; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
        }
     } else {
        for(j=0, i=0x31; i<=0x34; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS661_TVPhase[lindex + j]);
        }
     }
     return;
  }

  /* PAL-M, PAL-N not in BIOS, and already set in SetGroup2 */
  if(SiS_Pr->SiS_TVMode & (TVSetPALM | TVSetPALN)) return;
d10147 2
a10148 2
  if(ModeNo<=0x13) {
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
d10150 1
a10150 1
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d10159 1
a10159 1
     if(HwInfo->jChipType >= SIS_330) {
d10164 1
a10164 1
	if(HwInfo->jChipType >= SIS_330) {
d10167 1
a10167 1
	if((SiS_Pr->SiS_VBInfo & SetInSlaveMode) && (!(SiS_Pr->SiS_TVMode & TVSetTVSimuMode))) {
d10169 1
a10169 1
	   if(HwInfo->jChipType >= SIS_330) {
d10178 1
a10178 1
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
d10185 3
a10187 3
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr1[temp][index][j]);
        else if((!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) || (SiS_Pr->SiS_TVMode & TVSetTVSimuMode))
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr2[temp][index][j]);
d10189 1
a10189 1
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr1[temp][index][j]);
d10193 17
a10209 13
  if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (!(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision))) {
     if((!(SiS_Pr->SiS_TVMode & (TVSetPAL | TVSetYPbPr525p | TVSetYPbPr750p))) && (ModeNo > 0x13)) {
        if((resinfo == SIS_RI_640x480) ||
	   (resinfo == SIS_RI_800x600)) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x31,0x21);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x32,0xf0);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x33,0xf5);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x34,0x7f);
	} else if(resinfo == SIS_RI_1024x768) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x31,0x1e);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x32,0x8b);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x33,0xfb);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x34,0x7b);
d10216 2
a10217 2
SiS_OEM310Setting(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                  USHORT ModeNo,USHORT ModeIdIndex)
d10219 9
a10227 168
   SetDelayComp(SiS_Pr,HwInfo,ModeNo);

   if(SiS_Pr->UseCustomMode) return;

   if((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
      SetAntiFlicker(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
      SetPhaseIncr(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
      SetYFilter(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
      if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
         SetEdgeEnhance(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
      }
   }
}

static void
SetDelayComp661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo,
                USHORT ModeIdIndex, USHORT RTI)
{
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
   UCHAR  *myptr = NULL;
   USHORT delay = 0, romptr = 0, index;
   UCHAR  temp;

   if(!(SiS_Pr->SiS_VBInfo & (SetCRT2ToTV | SetCRT2ToLCD | SetCRT2ToLCDA | SetCRT2ToRAMDAC)))
      return;

   if(SiS_Pr->UseCustomMode) delay = 0x40;
   else if(ModeNo <= 0x13)   delay = 0x40;
   else                      delay = SiS_Pr->SiS_RefIndex[RTI].Ext_PDC;

   delay &= 0xf0;
   delay >>= 4;
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) delay <<= 12;  /* BIOS: 8, wrong */

   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {

      index = GetOEMTVPtr661(SiS_Pr);
      if((ROMAddr) && SiS_Pr->SiS_UseROM) {
         romptr = ROMAddr[0x25c] | (ROMAddr[0x25d] << 8);
         if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
            romptr = ROMAddr[0x25e] | (ROMAddr[0x25f] << 8);
         }
      }
      if(romptr) myptr = &ROMAddr[romptr];
      if(!myptr) {
         myptr = (UCHAR *)SiS_TVDelay661_301;
	 if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	    myptr = (UCHAR *)SiS_TVDelay661_301B;
	 }
      }
      delay = myptr[index];
      if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x13) & 0x04) delay >>= 4;  /* Should test dual edge */

   } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {

      if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
         if((SiS_Pr->PanelXRes <= 1024) && (SiS_Pr->PanelYRes <= 768)) {
	    delay = 0x1111;
         } else if((SiS_Pr->PanelXRes <= 1280) && (SiS_Pr->PanelYRes <= 1024)) {
	    delay = 0xA1A1;
         } else if((SiS_Pr->PanelXRes <= 1400) && (SiS_Pr->PanelYRes <= 1050)) {
	    delay = 0xA3A3;
         } else
	    delay = 0x0000;
      }

      if(SiS_Pr->SiS_LCDResInfo != SiS_Pr->SiS_PanelCustom) {
         if((SiS_Pr->SiS_VBType & VB_SIS301LV302LV) && (SiS_Pr->PDC != -1)) {
            delay = SiS_Pr->PDC & 0x0f;
            delay |= (delay << 12);
         } else if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
            myptr = GetLCDStructPtr661(SiS_Pr, HwInfo);
            if(myptr) delay = myptr[4] | (myptr[4] << 8);
         }
      }
   }

   temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x2d);
   if(SiS_Pr->SiS_VBInfo & (SetCRT2ToTV | SetCRT2ToLCD | SetCRT2ToRAMDAC)) {
      temp &= 0xf0;
      temp |= (delay & 0x000f);
   } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      temp &= 0x0f;
      temp |= ((delay & 0xf000) >> 8);
   }
   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2d,temp);
}

static void
SetCRT2SyncDither661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo, USHORT RTI)
{
   USHORT infoflag;
   UCHAR temp;

   if(ModeNo <= 0x13) {
      infoflag = SiS_GetRegByte(SiS_Pr->SiS_P3ca+2);
   } else {
      infoflag = SiS_Pr->SiS_RefIndex[RTI].Ext_InfoFlag;
   }
   infoflag &= 0xc0;
   if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
      if(temp & 0x20) infoflag = temp;
      if(temp & 0x01) infoflag |= 0x01;
   }
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
      temp = 0x0c;
      if(infoflag & 0x01) temp ^= 0x14;  /* BIOS: 18, wrong */
      temp |= (infoflag >> 6);
      SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xe0,temp);
   }
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      temp = 0;
      if(infoflag & 0x01) temp |= 0x80;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1a,0x7f,temp);
      temp = 0x30;
      if(infoflag & 0x01) temp = 0x20;
      infoflag &= 0xc0;
      temp |= infoflag;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0f,temp);
   }
}

static void
SetPanelParms661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   UCHAR *myptr;

   if(SiS_Pr->SiS_VBType & (VB_SIS301LV | VB_SIS302LV | VB_SIS302ELV)) {
      if(SiS_Pr->LVDSHL != -1) {
         SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,SiS_Pr->LVDSHL);
      }
   }

   myptr = GetLCDStructPtr661(SiS_Pr, HwInfo);
   if(myptr) {
      if(SiS_Pr->SiS_VBType & (VB_SIS301LV | VB_SIS302LV | VB_SIS302ELV)) {
         if(SiS_Pr->LVDSHL == -1) {
            SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xE0,myptr[1] & 0x1f);
	 } else {
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xE3,myptr[1] & 0x1c);
	 }
      }
      SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0d,0x3f,myptr[2] & 0xc0);
   }
}

void
SiS_OEM661Setting(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                  USHORT ModeNo,USHORT ModeIdIndex, USHORT RRTI)
{
   if(SiS_Pr->SiS_VBType & VB_SISVB) {

      SetDelayComp661(SiS_Pr,HwInfo,ModeNo,ModeIdIndex,RRTI);

      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
         SetCRT2SyncDither661(SiS_Pr,HwInfo,ModeNo,RRTI);
         SetPanelParms661(SiS_Pr,HwInfo);
      }

      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
         SetPhaseIncr(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
         SetYFilter(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
         SetAntiFlicker(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
         if(!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) {
            SetEdgeEnhance(SiS_Pr,HwInfo,ModeNo,ModeIdIndex);
         }
      }
d10231 1
a10231 7
/* FinalizeLCD
 * This finalizes some CRT2 registers for the very panel used.
 * If we have a backup if these registers, we use it; otherwise
 * we set the register according to most BIOSes. However, this
 * function looks quite different in every BIOS, so you better
 * pray that we have a backup...
 */
d10233 2
a10234 2
SiS_FinalizeLCD(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                PSIS_HW_INFO HwInfo)
d10239 1
a10239 18
  if(!(SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) return;

  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(SiS_Pr->LVDSHL != -1) {
        SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,SiS_Pr->LVDSHL);
     }
  }

  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) return;
  if(SiS_Pr->UseCustomMode) return;

  switch(SiS_Pr->SiS_CustomT) {
  case CUT_COMPAQ1280:
  case CUT_COMPAQ12802:
  case CUT_CLEVO1400:
  case CUT_CLEVO14002:
     return;
  }
d10242 2
a10243 2
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
     modeflag =  SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
d10245 2
a10246 43
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     modeflag =  SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }

  if(IS_SIS650) {
     if(!(SiS_GetReg(SiS_Pr->SiS_P3d4, 0x5f) & 0xf0)) {
        if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x02);
	} else {
           SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x03);
	}
     }
  }

  if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        /* Maybe all panels? */
        if(SiS_Pr->LVDSHL == -1) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,0x01);
	}
	return;
     }
  }

  if(SiS_Pr->SiS_CustomT == CUT_CLEVO10242) {
     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
        if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	   if(SiS_Pr->LVDSHL == -1) {
	      /* Maybe all panels? */
              SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,0x01);
	   }
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	      tempch = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4;
	      if(tempch == 3) {
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x25);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,0x00);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x1b);
	      }
	   }
	   return;
	}
     }
d10251 7
a10257 14
#ifdef SET_EMI
	if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x2a,0x00);
	   SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x10);
	}
#endif
     } else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
        if(SiS_Pr->LVDSHL == -1) {
           /* Maybe ACER only? */
           SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,0x01);
	}
     }
     tempch = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4;
d10260 50
a10309 73
	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1f,0x76);
	} else if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
	   if(tempch == 0x03) {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x25);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,0x00);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x1b);
	   }
	   if((SiS_Pr->Backup == TRUE) && (SiS_Pr->Backup_Mode == ModeNo)) {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,SiS_Pr->Backup_14);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,SiS_Pr->Backup_15);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,SiS_Pr->Backup_16);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,SiS_Pr->Backup_17);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,SiS_Pr->Backup_18);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,SiS_Pr->Backup_19);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1a,SiS_Pr->Backup_1a);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,SiS_Pr->Backup_1b);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,SiS_Pr->Backup_1c);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,SiS_Pr->Backup_1d);
	   } else if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {	/* 1.10.8w */
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,0x90);
	      if(ModeNo <= 0x13) {
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x11);
		 if((resinfo == 0) || (resinfo == 2)) return;
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x18);
		 if((resinfo == 1) || (resinfo == 3)) return;
	      }
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);
	      if((ModeNo > 0x13) && (resinfo == SIS_RI_1024x768)) {
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);  /* 1.10.7u */
#if 0
	         tempbx = 806;  /* 0x326 */			 /* other older BIOSes */
		 tempbx--;
		 temp = tempbx & 0xff;
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,temp);
		 temp = (tempbx >> 8) & 0x03;
		 SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1d,0xf8,temp);
#endif
	      }
	   } else if(ModeNo <= 0x13) {
	      if(ModeNo <= 1) {
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x70);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0xff);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x48);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x12);
	      }
	      if(!(modeflag & HalfDCLK)) {
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,0x20);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,0x1a);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,0x28);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,0x00);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x4c);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0xdc);
		 if(ModeNo == 0x12) {
		    switch(tempch) {
		       case 0:
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x95);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0xdc);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1a,0x10);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x95);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,0x48);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x12);
			  break;
		       case 2:
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x95);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x48);
			  break;
		       case 3:
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x95);
			  break;
		    }
		 }
	      }
d10313 1
a10313 1
        tempcl = tempbh = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x01);
d10317 1
a10317 1
	tempbl = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x04);
d10320 1
a10320 1
	   if((resinfo == SIS_RI_1024x768) || (!(SiS_Pr->SiS_LCDInfo & DontExpandLCD))) {
d10322 1
a10322 1
	      	 tempbx = 770;
d10324 7
a10330 7
	         if(tempbx > 770) tempbx = 770;
		 if(SiS_Pr->SiS_VGAVDE < 600) {
		    tempax = 768 - SiS_Pr->SiS_VGAVDE;
		    tempax >>= 4;  				 /* 1.10.7w; 1.10.6s: 3;  */
		    if(SiS_Pr->SiS_VGAVDE <= 480)  tempax >>= 4; /* 1.10.7w; 1.10.6s: < 480; >>=1; */
		    tempbx -= tempax;
		 }
d10334 4
d10339 4
a10342 2
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,temp);
	temp = ((tempbx & 0xff00) >> 4) | tempcl;
d10348 52
d10402 1
d10407 3
a10409 3
void
SetOEMLCDData2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
               USHORT ModeNo,USHORT ModeIdIndex, USHORT RefTabIndex)
d10411 5
a10415 3
  USHORT crt2crtc=0, modeflag, myindex=0;
  UCHAR  temp;
  int i;
d10417 15
a10431 34
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     crt2crtc = SiS_Pr->SiS_RefIndex[RefTabIndex].Ext_CRT2CRTC;
  }

  crt2crtc &= 0x3f;

  if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xdf);
  }

  if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
     if(modeflag & HalfDCLK) myindex = 1;

     if(SiS_Pr->SiS_SetFlag & LowModeTests) {
        for(i=0; i<7; i++) {
           if(barco_p1[myindex][crt2crtc][i][0]) {
	      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,
	                      barco_p1[myindex][crt2crtc][i][0],
	   	   	      barco_p1[myindex][crt2crtc][i][2],
			      barco_p1[myindex][crt2crtc][i][1]);
	   }
        }
     }
     temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
     if(temp & 0x80) {
        temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x18);
        temp++;
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,temp);
     }
  }
d10433 1
d10435 1
d10437 1
a10437 1
GetOEMLCDPtr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, int Flag)
a10438 1
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
d10449 1
a10449 1
  if(HwInfo->jChipType == SIS_300) {
d10451 1
a10451 1
    tempbx = (SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0x0f) - 2;
d10454 1
a10454 1
       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 3;
d10460 2
a10461 2
	     romptr = ROMAddr[0x255] | (ROMAddr[0x256] << 8);
	     if(romptr) {
d10463 1
a10463 1
	     } else {
d10465 2
a10466 2
	     }
             if(tempbx == 0xFF) return 0xFFFF;
d10476 15
a10490 15
       if((ROMAddr) && SiS_Pr->SiS_UseROM) {
          romptr = ROMAddr[0x255] | (ROMAddr[0x256] << 8);
	  if(romptr) {
	     tempbx = ROMAddr[romptr + SiS_Pr->SiS_LCDTypeInfo];
	  } else {
	     tempbx = 0xff;
	  }
       } else {
          tempbx = customtable630[SiS_Pr->SiS_LCDTypeInfo];
       }
       if(tempbx == 0xFF) return 0xFFFF;
       tempbx <<= 2;
       if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) tempbx += 2;
       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
       return tempbx;
d10494 1
a10494 1
    if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
d10499 1
d10501 2
a10502 2
SetOEMLCDDelay(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
               USHORT ModeNo,USHORT ModeIdIndex)
a10503 1
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
a10505 2
  if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_PanelCustom) return;

d10512 6
a10517 6
  /* The Panel Compensation Delay should be set according to tables
   * here. Unfortunately, various BIOS versions don't case about
   * a uniform way using eg. ROM byte 0x220, but use different
   * hard coded delays (0x04, 0x20, 0x18) in SetGroup1().
   * Thus we don't set this if the user select a custom pdc or if
   * we otherwise detected a valid pdc.
d10519 1
a10519 1
  if(SiS_Pr->PDC != -1) return;
d10521 1
a10521 1
  temp = GetOEMLCDPtr(SiS_Pr,HwInfo, 0);
d10523 1
a10523 4
  if(SiS_Pr->UseCustomMode)
     index = 0;
  else
     index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].VB_LCDDelayIndex;
d10525 1
a10525 15
  if(HwInfo->jChipType != SIS_300) {
     if(romptr) {
	romptr += (temp * 2);
	romptr = ROMAddr[romptr] | (ROMAddr[romptr + 1] << 8);
	romptr += index;
	temp = ROMAddr[romptr];
     } else {
	if(SiS_Pr->SiS_VBType & VB_SISVB) {
    	   temp = SiS300_OEMLCDDelay2[temp][index];
	} else {
           temp = SiS300_OEMLCDDelay3[temp][index];
        }
     }
  } else {
     if((ROMAddr) && SiS_Pr->SiS_UseROM && (ROMAddr[0x235] & 0x80)) {
d10532 2
a10533 10
	   temp = SiS300_OEMLCDDelay5[temp][index];
	}
     } else {
        if((ROMAddr) && SiS_Pr->SiS_UseROM) {
	   romptr = ROMAddr[0x249] | (ROMAddr[0x24a] << 8);
	   if(romptr) {
	      romptr += (temp * 2);
	      romptr = ROMAddr[romptr] | (ROMAddr[romptr + 1] << 8);
	      romptr += index;
	      temp = ROMAddr[romptr];
d10535 2
a10536 4
	      temp = SiS300_OEMLCDDelay4[temp][index];
	   }
	} else {
	   temp = SiS300_OEMLCDDelay4[temp][index];
d10538 25
a10562 1
     }
d10569 2
a10570 2
SetOEMLCDData(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
              USHORT ModeNo,USHORT ModeIdIndex)
d10572 1
a10572 2
#if 0  /* Unfinished; Data table missing */
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
d10581 1
a10581 1
  temp = GetOEMLCDPtr(SiS_Pr,HwInfo, 1);
d10586 1
a10586 1
      SiS_SetReg(SiS_Pr->SiS_Part1Port,i,SiS300_LCDHData[temp][index][j]);
d10591 1
a10591 1
  SiS_SetReg(SiS_SiS_Part1Port,0x18, SiS300_LCDVData[temp][index][0]);
d10595 1
a10595 1
      SiS_SetReg(SiS_Pr->SiS_Part1Port,i,SiS300_LCDVData[temp][index][j]);
d10600 1
d10608 1
a10608 1
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
d10610 2
a10611 2
     else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) index += 3;
     else if(SiS_Pr->SiS_TVMode & TVSetPAL)   index += 1;
d10613 2
a10614 2
     if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) index += 2;
     if(SiS_Pr->SiS_TVMode & TVSetPAL)        index += 1;
d10619 1
d10621 2
a10622 2
SetOEMTVDelay(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
              USHORT ModeNo,USHORT ModeIdIndex)
a10623 1
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
d10642 1
a10642 1
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
d10652 1
d10654 3
a10656 2
SetOEMAntiFlicker(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                  USHORT ModeNo, USHORT ModeIdIndex)
a10657 1
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
d10682 1
d10684 2
a10685 2
SetOEMPhaseIncr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                USHORT ModeNo,USHORT ModeIdIndex)
a10686 1
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
d10689 1
a10689 3
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) return;

  if(SiS_Pr->SiS_TVMode & (TVSetNTSC1024 | TVSetNTSCJ | TVSetPALM | TVSetPALN)) return;
d10702 3
a10704 3
     for(i=0x31, j=0; i<=0x34; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Phase2[temp][index][j]);
     }
d10706 12
a10717 12
     if(romptr) {
        romptr += (temp * 2);
	romptr = ROMAddr[romptr] | (ROMAddr[romptr + 1] << 8);
	romptr += (index * 4);
        for(i=0x31, j=0; i<=0x34; i++, j++) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
	}
     } else {
        for(i=0x31, j=0; i<=0x34; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Phase1[temp][index][j]);
	}
     }
d10721 1
d10723 2
a10724 2
SetOEMYFilter(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
              USHORT ModeNo,USHORT ModeIdIndex)
d10726 1
a10726 2
  UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
  USHORT index,temp,i,j,romptr=0;
d10728 1
a10728 1
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSCART | SetCRT2ToHiVision | SetCRT2ToYPbPr525750)) return;
a10737 4
  if(SiS_Pr->SiS_TVMode & TVSetPALM)      temp = 8;
  else if(SiS_Pr->SiS_TVMode & TVSetPALN) temp = 9;
  /* NTSCJ uses NTSC filters */

d10740 9
d10751 1
a10751 1
       	SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Filter2[temp][index][j]);
d10754 1
a10754 1
     	SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Filter2[temp][index][j]);
d10757 1
a10757 1
      if((romptr) && (!(SiS_Pr->SiS_TVMode & (TVSetPALM|TVSetPALN)))) {
d10762 1
a10762 1
       	    SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
d10766 1
a10766 1
       	    SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Filter1[temp][index][j]);
a10771 24
static USHORT
SiS_SearchVBModeID(SiS_Private *SiS_Pr, USHORT *ModeNo)
{
   USHORT ModeIdIndex;
   UCHAR VGAINFO = SiS_Pr->SiS_VGAINFO;

   if(*ModeNo <= 5) *ModeNo |= 1;

   for(ModeIdIndex=0; ; ModeIdIndex++) {
      if(SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].ModeID == *ModeNo) break;
      if(SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].ModeID == 0xFF)    return 0;
   }

   if(*ModeNo != 0x07) {
      if(*ModeNo > 0x03) return ModeIdIndex;
      if(VGAINFO & 0x80) return ModeIdIndex;
      ModeIdIndex++;
   }

   if(VGAINFO & 0x10) ModeIdIndex++;   /* 400 lines */
	                               /* else 350 lines */
   return ModeIdIndex;
}

d10773 2
a10774 2
SiS_OEM300Setting(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
		  USHORT ModeNo, USHORT ModeIdIndex, USHORT RefTableIndex)
d10776 1
a10776 1
  USHORT OEMModeIdIndex=0;
d10778 2
a10779 4
  if(!SiS_Pr->UseCustomMode) {
     OEMModeIdIndex = SiS_SearchVBModeID(SiS_Pr,&ModeNo);
     if(!(OEMModeIdIndex)) return;
  }
d10782 4
a10785 4
     SetOEMLCDDelay(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        SetOEMLCDData(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
     }
a10786 1
  if(SiS_Pr->UseCustomMode) return;
d10788 6
a10793 6
     SetOEMTVDelay(SiS_Pr, HwInfo, ModeNo,OEMModeIdIndex);
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        SetOEMAntiFlicker(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
    	SetOEMPhaseIncr(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
       	SetOEMYFilter(SiS_Pr, HwInfo, ModeNo, OEMModeIdIndex);
     }
d10797 1
@


1.1.1.3
log
@Import OpenBSD X-Window subsystem (based upon XFree86 4.4RC2)
into vendor branch
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/sis/init301.c,v 1.74 2004/02/25 22:40:42 twini Exp $ */
d37 4
a40 1
 * * 3) The name of the author may not be used to endorse or promote products
d79 4
a93 2
static USHORT SiS_GetBIOSLCDResInfo(SiS_Private *SiS_Pr);

d101 4
a104 4
   if(HwInfo->jChipType >= SIS_315H)
      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2f,0x01);
   else
      SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x24,0x01);
d110 14
a123 4
   if(HwInfo->jChipType >= SIS_315H)
      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2F,0xFE);
   else
      SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x24,0xFE);
d141 1
d143 1
d145 2
a146 1
GetLCDStructPtr661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d148 40
a187 3
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
   UCHAR  *myptr = NULL;
   USHORT romindex = 0;
d189 27
a215 3
   /* Use the BIOS tables only for LVDS panels; DVI is unreliable
    * due to the variaty of panels the BIOS doesn't know about.
    */
d217 1
a217 9
   if((SiS_Pr->SiS_ROMNew) && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {
      myptr = (UCHAR *)SiS_LCDStruct661;
      romindex = SISGETROMW(0x100);  /* 10c, 0.93: 10e */
      if(romindex) {
         romindex += ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x7d) & 0x1f) * 26);
         myptr = &ROMAddr[romindex];
      }
   }
   return myptr;
d219 1
d221 2
a222 2
static USHORT
GetLCDStructPtr661_2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d225 5
a229 1
   USHORT romptr = 0;
d231 8
a238 3
   /* Use the BIOS tables only for LVDS panels; DVI is unreliable
    * due to the variaty of panels the BIOS doesn't know about.
    */
d240 8
a247 3
   if((SiS_Pr->SiS_ROMNew) && (SiS_Pr->SiS_VBType & VB_SIS301LV302LV)) {
      romptr = SISGETROMW(0x102);  /* 2ad */
      romptr += ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4) * SiS_Pr->SiS661LCD2TableSize);
d249 1
d251 1
a251 1
   return(romptr);
d264 1
a264 1
  USHORT checkmask=0,modeid,infoflag;
d266 3
a268 1
  modeid = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].ModeID;
d274 1
a274 1
      	checkmask |= SupportRAMDAC2;
d276 1
a276 1
	   checkmask |= SupportRAMDAC2_135;
d278 1
a278 1
	      checkmask |= SupportRAMDAC2_162;
d280 1
a280 1
		 checkmask |= SupportRAMDAC2_202;
d287 1
a287 1
     	checkmask |= SupportLCD;
d289 5
a293 3
	   if(SiS_Pr->SiS_VBType & VB_SISVB) {
	      if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (SiS_Pr->SiS_LCDInfo & LCDPass11)) {
	         if(modeid == 0x2e) checkmask |= Support64048060Hz;
d300 1
a300 1
      	checkmask |= SupportHiVision;
d304 1
a304 1
        checkmask |= SupportTV;
d306 1
a306 6
	   checkmask |= SupportTV1024;
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
	         checkmask |= SupportYPbPr750p;
	      }
	   }
d311 1
a311 1
  } else {	/* LVDS */
d315 1
a315 1
           checkmask |= SupportCHTV;
d320 1
a320 1
     	checkmask |= SupportLCD;
d326 1
a326 1
  for(; SiS_Pr->SiS_RefIndex[RefreshRateTableIndex+(*i)].ModeID == modeid; (*i)--) {
d328 1
a328 1
     if(infoflag & checkmask) return TRUE;
d336 2
a337 2
     if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex + (*i)].ModeID != modeid) {
     	return FALSE;
d340 1
a340 1
     if(infoflag & checkmask) return TRUE;
d342 1
a342 1
  return TRUE;
d346 1
a346 1
/*              Get rate index               */
d371 1
a371 1
     	if(modeflag & HalfDCLK) return 0;
d375 3
a377 1
  if(ModeNo < 0x14) return 0xFFFF;
d392 1
a392 1
              temp = LCDRefreshIndex[SiS_GetBIOSLCDResInfo(SiS_Pr)];
a468 1
  UCHAR *ROMAddr = (UCHAR *)HwInfo->pjVirtualRomBase;
d470 1
d472 1
a472 1
  if(SiS_Pr->SiS_UseROM) {
d475 1
a475 1
        temp1 = SISGETROMW(0x23b);
a484 1
  UCHAR *ROMAddr = (UCHAR *)HwInfo->pjVirtualRomBase;
d486 1
d488 1
a488 1
  if(SiS_Pr->SiS_UseROM) {
d491 1
a491 1
        temp1 = SISGETROMW(0x23d);
d571 1
a571 1
	 if(SiS_Pr->SiS_UseROM) {
d589 1
a589 9
      if(HwInfo->jChipType >= SIS_661) {

         if(!(DelayTime & 0x01)) {
	    SiS_DDC2Delay(SiS_Pr, 0x1000);
         } else {
	    SiS_DDC2Delay(SiS_Pr, 0x4000);
         }

      } else if(HwInfo->jChipType >= SIS_330) return;
d614 1
a614 1
	       if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
d750 4
a753 1
  if(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x01) >= 0xb0) return TRUE;
d990 1
a990 1
   SiS_SetRegLong(0xcf8,0x80000874);		       /* get ACPI base */
d1008 3
a1010 2
SiS_GetVBInfo(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
              PSIS_HW_INFO HwInfo, int checkcrt2mode)
a1073 5

	   if(SiS_Pr->SiS_VBType & (VB_SIS301LV|VB_SIS302LV|VB_SIS302ELV)) {
	      tempbx &= ~(SetCRT2ToRAMDAC);
	   }

d1151 18
a1168 6
      	   if(tempbx & SetCRT2ToLCDA)        tempbx &= (clearmask | SetCRT2ToLCDA);
	   if(tempbx & SetCRT2ToRAMDAC)      tempbx &= (clearmask | SetCRT2ToRAMDAC);
	   if(tempbx & SetCRT2ToLCD)         tempbx &= (clearmask | SetCRT2ToLCD);
	   if(tempbx & SetCRT2ToSCART)       tempbx &= (clearmask | SetCRT2ToSCART);
	   if(tempbx & SetCRT2ToHiVision)    tempbx &= (clearmask | SetCRT2ToHiVision);
	   if(tempbx & SetCRT2ToYPbPr525750) tempbx &= (clearmask | SetCRT2ToYPbPr525750);
d1196 3
a1198 1
    	if(!(tempbx & DriverMode)) tempbx |= SetSimuScanMode;
d1203 1
a1203 1
	       ((SiS_Pr->SiS_VBType & VB_NoLCD) && (tempbx & SetCRT2ToLCD)) ) {
d1349 1
a1349 1
           if(romindex && SiS_Pr->SiS_UseROM && (!(SiS_Pr->SiS_ROMNew))) {
a1445 16
	if(SiS_Pr->SiS_VBInfo & (SetCRT2ToYPbPr525750 | SetCRT2ToHiVision)) {
	   if(resinfo == SIS_RI_800x480 || resinfo == SIS_RI_1024x576 || resinfo == SIS_RI_1280x720) {
	      SiS_Pr->SiS_TVMode |= TVAspect169;
	   } else {
	      temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x39);
	      if(temp1 & 0x02) {
		 if(SiS_Pr->SiS_TVMode & (TVSetYPbPr750p | TVSetHiVision)) {
		    SiS_Pr->SiS_TVMode |= TVAspect169;
		 } else {
		    SiS_Pr->SiS_TVMode |= TVAspect43LB;
		 }
	      } else {
		 SiS_Pr->SiS_TVMode |= TVAspect43;
	      }
	   }
	}
d1496 1
a1502 34
static USHORT
SiS_GetBIOSLCDResInfo(SiS_Private *SiS_Pr)
{
   USHORT temp = SiS_Pr->SiS_LCDResInfo;
   /* Translate my LCDResInfo to BIOS value */
   if(temp == Panel_1280x768_2)  temp = Panel_1280x768;
   if(temp == Panel_1280x768_3)  temp = Panel_1280x768;
   return temp;
}

static void
SiS_GetLCDInfoBIOS(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
#ifdef SIS315H
   UCHAR  *ROMAddr;

   if((ROMAddr = GetLCDStructPtr661(SiS_Pr, HwInfo))) {
      SiS_Pr->PanelHT  = SISGETROMW(6);
      SiS_Pr->PanelVT  = SISGETROMW(8);
      SiS_Pr->PanelHRS = SISGETROMW(10);
      SiS_Pr->PanelHRE = SISGETROMW(12);
      SiS_Pr->PanelVRS = SISGETROMW(14);
      SiS_Pr->PanelVRE = SISGETROMW(16);
      SiS_Pr->PanelVCLKIdx315 = VCLK_CUSTOM_315;
      SiS_Pr->SiS_VCLKData[VCLK_CUSTOM_315].CLOCK =
	 SiS_Pr->SiS_VBVCLKData[VCLK_CUSTOM_315].CLOCK = (USHORT)ROMAddr[18];
      SiS_Pr->SiS_VCLKData[VCLK_CUSTOM_315].SR2B =
	 SiS_Pr->SiS_VBVCLKData[VCLK_CUSTOM_315].Part4_A = ROMAddr[19];
      SiS_Pr->SiS_VCLKData[VCLK_CUSTOM_315].SR2B =
	 SiS_Pr->SiS_VBVCLKData[VCLK_CUSTOM_315].Part4_B = ROMAddr[20];
   }
#endif
}

d1518 1
a1518 1
  SiS_Pr->SiS_LCDResInfo  = 0;
d1520 1
a1520 5
  SiS_Pr->SiS_LCDInfo     = 0;
  SiS_Pr->PanelHRS        = 999; /* HSync start */
  SiS_Pr->PanelHRE        = 999; /* HSync end */
  SiS_Pr->PanelVRS        = 999; /* VSync start */
  SiS_Pr->PanelVRE        = 999; /* VSync end */
d1522 1
a1522 5
  if(!(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA))) return;

  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else if(SiS_Pr->UseCustomMode) {
d1525 6
a1530 2
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d1533 2
d1537 1
a1537 3
  if((HwInfo->jChipType >= SIS_661) || (SiS_Pr->SiS_ROMNew)) {
     SiS_Pr->SiS_LCDTypeInfo = (SiS_GetReg(SiS_Pr->SiS_P3d4,0x39) & 0x7c) >> 2;
  } else if((HwInfo->jChipType < SIS_315H) || (HwInfo->jChipType >= SIS_661)) {
d1544 2
a1545 2
     /* Translate 300 series LCDRes to 315 series for unified usage */
     temp = SiS300SeriesLCDRes[temp];
d1547 1
d1549 6
a1554 3
  if(HwInfo->jChipType == SIS_550) {
     if(temp == Panel310_640x480_2) temp = Panel_640x480_2;
     if(temp == Panel310_640x480_3) temp = Panel_640x480_3;
d1557 4
a1560 12
  if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {	/* SiS LVDS */
     if(temp == Panel310_1280x768) {
        temp = Panel_1280x768_2;
#ifdef SIS315H
	if((myptr = GetLCDStructPtr661(SiS_Pr, HwInfo))) {
	   if((myptr[8] | (myptr[9] << 8)) == 798) temp = Panel_1280x768_3;
	}
#endif
     }
  } 

  SiS_Pr->SiS_LCDResInfo = temp;
a1569 11
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(SiS_Pr->SiS_LCDResInfo < SiS_Pr->SiS_PanelMin301)
	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_PanelMin301;
  } else {
     if(SiS_Pr->SiS_LCDResInfo < SiS_Pr->SiS_PanelMinLVDS)
	SiS_Pr->SiS_LCDResInfo = SiS_Pr->SiS_PanelMinLVDS;
  }

  SiS_Pr->PanelVCLKIdx300 = VCLK65_300;
  SiS_Pr->PanelVCLKIdx315 = VCLK108_2_315;

d1571 4
a1574 5
     case Panel_320x480:    SiS_Pr->PanelXRes =  320; SiS_Pr->PanelYRes =  480;
     			    SiS_Pr->PanelHT   =  400; SiS_Pr->PanelVT   =  525;
			    SiS_Pr->PanelVCLKIdx300 = VCLK28;
			    SiS_Pr->PanelVCLKIdx315 = VCLK28;
			    break;
d1576 15
a1590 151
     case Panel_640x480_3:  SiS_Pr->PanelXRes =  640; SiS_Pr->PanelYRes =  480;
     			    SiS_Pr->PanelVRS  =   24; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx300 = VCLK28;
			    SiS_Pr->PanelVCLKIdx315 = VCLK28;
			    break;
     case Panel_640x480:    SiS_Pr->PanelXRes =  640; SiS_Pr->PanelYRes =  480;
     			    			      SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx300 = VCLK28;
			    SiS_Pr->PanelVCLKIdx315 = VCLK28;
			    break;
     case Panel_800x600:    SiS_Pr->PanelXRes =  800; SiS_Pr->PanelYRes =  600;
     			    SiS_Pr->PanelHT   = 1056; SiS_Pr->PanelVT   =  628;
			    SiS_Pr->PanelHRS  =   40; SiS_Pr->PanelHRE  =  128;
			    SiS_Pr->PanelVRS  =    1; SiS_Pr->PanelVRE  =    4;
			    SiS_Pr->PanelVCLKIdx300 = VCLK40;
			    SiS_Pr->PanelVCLKIdx315 = VCLK40;
			    break;
     case Panel_1024x600:   SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  600;
     			    SiS_Pr->PanelHT   = 1344; SiS_Pr->PanelVT   =  800;
			    SiS_Pr->PanelHRS  =   24; SiS_Pr->PanelHRE  =  136;
			    SiS_Pr->PanelVRS  =   88; SiS_Pr->PanelVRE  =    6;
     			    SiS_Pr->PanelVCLKIdx300 = VCLK65_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK65_315;
     			    break;
     case Panel_1024x768:   SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1344; SiS_Pr->PanelVT   =  806;
			    SiS_Pr->PanelHRS  =   24; SiS_Pr->PanelHRE  =  136;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    if(HwInfo->jChipType < SIS_315H) {
			       SiS_Pr->PanelHRS = 23;
			       			      SiS_Pr->PanelVRE  =    5;
			    }
			    SiS_Pr->PanelVCLKIdx300 = VCLK65_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK65_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1152x768:   SiS_Pr->PanelXRes = 1152; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1344; SiS_Pr->PanelVT   =  806;
			    SiS_Pr->PanelHRS  =   24;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    if(HwInfo->jChipType < SIS_315H) {
			       SiS_Pr->PanelHRS = 23;
			       			      SiS_Pr->PanelVRE  =    5;
			    }
     			    SiS_Pr->PanelVCLKIdx300 = VCLK65_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK65_315;
     			    break;
     case Panel_1152x864:   SiS_Pr->PanelXRes = 1152; SiS_Pr->PanelYRes =  864;
     			    break;
     case Panel_1280x720:   SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  720;
     			    SiS_Pr->PanelHT   = 1650; SiS_Pr->PanelVT   =  750;
			    SiS_Pr->PanelHRS  =  110; SiS_Pr->PanelHRE  =   40;
			    SiS_Pr->PanelVRS  =    5; SiS_Pr->PanelVRE  =    5;
			    SiS_Pr->PanelVCLKIdx315 = VCLK_1280x720;
			    /* Data above for TMDS (projector); get from BIOS for LVDS */
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1280x768:   SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1688; SiS_Pr->PanelVT   =  802;
			    SiS_Pr->PanelHRS  =   48; SiS_Pr->PanelHRS  =  112;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    SiS_Pr->PanelVCLKIdx300 = VCLK81_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK81_315;
			    break;
     case Panel_1280x768_2: SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1408; SiS_Pr->PanelVT   =  806;
			    SiS_Pr->PanelHRS  =   16; SiS_Pr->PanelHRE  =   64;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    SiS_Pr->PanelVCLKIdx315 = VCLK_1280x768_2;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1280x768_3: SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1664; SiS_Pr->PanelVT   =  798;
			    SiS_Pr->PanelHRS   =  64; SiS_Pr->PanelHRE  =  128;
			    SiS_Pr->PanelVRS   =   3; SiS_Pr->PanelVRE  =    7;
			    SiS_Pr->PanelVCLKIdx315 = VCLK_1280x768_3;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1280x800:   SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  800;
     			    SiS_Pr->PanelHT   = 1408; SiS_Pr->PanelVT   =  816;
			    SiS_Pr->PanelHRS   =  21; SiS_Pr->PanelHRE  =   24;
			    SiS_Pr->PanelVRS   =   4; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx315 = VCLK69_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1280x960:   SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes =  960;
     			    SiS_Pr->PanelHT   = 1800; SiS_Pr->PanelVT   = 1000;
			    SiS_Pr->PanelVCLKIdx300 = VCLK108_3_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK108_3_315;
		 	    if(resinfo == SIS_RI_1280x1024) {
			       SiS_Pr->PanelVCLKIdx300 = VCLK100_300;
			       SiS_Pr->PanelVCLKIdx315 = VCLK100_315;
			    }
			    break;
     case Panel_1280x1024:  SiS_Pr->PanelXRes = 1280; SiS_Pr->PanelYRes = 1024;
     			    SiS_Pr->PanelHT   = 1688; SiS_Pr->PanelVT   = 1066;
			    SiS_Pr->PanelHRS  =   48; SiS_Pr->PanelHRE  =  112;
			    SiS_Pr->PanelVRS  =    1; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx300 = VCLK108_3_300;
			    SiS_Pr->PanelVCLKIdx315 = VCLK108_2_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1400x1050:  SiS_Pr->PanelXRes = 1400; SiS_Pr->PanelYRes = 1050;
     			    SiS_Pr->PanelHT   = 1688; SiS_Pr->PanelVT   = 1066;
			    SiS_Pr->PanelHRS  =   48; SiS_Pr->PanelHRE  =  112; /* HRE OK for LVDS, not for LCDA */
			    SiS_Pr->PanelVRS  =    1; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx315 = VCLK108_2_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1600x1200:  SiS_Pr->PanelXRes = 1600; SiS_Pr->PanelYRes = 1200;
     			    SiS_Pr->PanelHT   = 2160; SiS_Pr->PanelVT   = 1250;
			    SiS_Pr->PanelHRS  =   64; SiS_Pr->PanelHRE  =  192;
			    SiS_Pr->PanelVRS  =    1; SiS_Pr->PanelVRE  =    3;
			    SiS_Pr->PanelVCLKIdx315 = VCLK162_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_1680x1050:  SiS_Pr->PanelXRes = 1680; SiS_Pr->PanelYRes = 1050;
     			    SiS_Pr->PanelHT   = 1900; SiS_Pr->PanelVT   = 1066;
			    SiS_Pr->PanelHRS  =   26; SiS_Pr->PanelHRE  =   76;
			    SiS_Pr->PanelVRS  =    3; SiS_Pr->PanelVRE  =    6;
			    SiS_Pr->PanelVCLKIdx315 = VCLK121_315;
			    SiS_GetLCDInfoBIOS(SiS_Pr, HwInfo);
			    break;
     case Panel_Custom:     SiS_Pr->PanelXRes = SiS_Pr->CP_MaxX;
    			    SiS_Pr->PanelYRes = SiS_Pr->CP_MaxY;
			    SiS_Pr->PanelHT   = SiS_Pr->CHTotal;
			    SiS_Pr->PanelVT   = SiS_Pr->CVTotal;
			    if(SiS_Pr->CP_PreferredIndex != -1) {
			       SiS_Pr->PanelXRes = SiS_Pr->CP_HDisplay[SiS_Pr->CP_PreferredIndex];
    			       SiS_Pr->PanelYRes = SiS_Pr->CP_VDisplay[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelHT   = SiS_Pr->CP_HTotal[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelVT   = SiS_Pr->CP_VTotal[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelHRS  = SiS_Pr->CP_HSyncStart[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelHRE  = SiS_Pr->CP_HSyncEnd[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelVRS  = SiS_Pr->CP_VSyncStart[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelVRE  = SiS_Pr->CP_VSyncEnd[SiS_Pr->CP_PreferredIndex];
			       SiS_Pr->PanelHRS -= SiS_Pr->PanelXRes;
			       SiS_Pr->PanelHRE -= SiS_Pr->PanelHRS;
			       SiS_Pr->PanelVRS -= SiS_Pr->PanelYRes;
			       SiS_Pr->PanelVRE -= SiS_Pr->PanelVRS;
			    }
			    break;
     case Panel_Barco1366:  SiS_Pr->PanelXRes = 1360; SiS_Pr->PanelYRes = 1024;
     			    SiS_Pr->PanelHT   = 1688; SiS_Pr->PanelVT   = 1066;
     			    break;
     case Panel_848x480:    SiS_Pr->PanelXRes =  848; SiS_Pr->PanelYRes =  480;
     			    SiS_Pr->PanelHT   = 1088; SiS_Pr->PanelVT   =  525;
     			    break;
     default:		    SiS_Pr->PanelXRes = 1024; SiS_Pr->PanelYRes =  768;
     			    SiS_Pr->PanelHT   = 1344; SiS_Pr->PanelVT   =  806;
			    break;
d1594 3
a1596 5
  SiS_Pr->SiS_LCDInfo = temp & ~0x000e;

  if(!(SiS_Pr->UsePanelScaler))        SiS_Pr->SiS_LCDInfo &= ~DontExpandLCD;
  else if(SiS_Pr->UsePanelScaler == 1) SiS_Pr->SiS_LCDInfo |= DontExpandLCD;

d1598 2
a1599 3
  if(HwInfo->jChipType >= SIS_661) {
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        if(temp & 0x08) SiS_Pr->SiS_LCDInfo |= LCDPass11;
d1601 1
d1603 4
a1606 17
        if(SiS_Pr->SiS_ROMNew) {
	   if(temp & 0x02) SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	} else if((myptr = GetLCDStructPtr661(SiS_Pr, HwInfo))) {
           if(myptr[2] & 0x01) SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	}
     }
  } else if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x39) & 0x01) SiS_Pr->SiS_LCDInfo |= LCDPass11;
     }
     if((SiS_Pr->SiS_ROMNew) && (!(SiS_Pr->PanelSelfDetected))) {
        SiS_Pr->SiS_LCDInfo &= ~(LCDRGB18Bit);
	temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
        if(temp & 0x01) SiS_Pr->SiS_LCDInfo |= LCDRGB18Bit;
	if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	   if(temp & 0x02) SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	}
a1607 1
  }
a1608 13

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     /* Always center screen on LVDS (if scaling is disabled) */
     SiS_Pr->SiS_LCDInfo &= ~LCDPass11;
  } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {
        /* Always center screen on SiS LVDS (if scaling is disabled) */
        SiS_Pr->SiS_LCDInfo &= ~LCDPass11;
     } else {
        /* By default, pass 1:1 on SiS TMDS (if scaling is disabled) */
        SiS_Pr->SiS_LCDInfo |= LCDPass11;
        if(SiS_Pr->CenterScreen == 1) SiS_Pr->SiS_LCDInfo &= ~LCDPass11;
     }
d1610 1
d1614 1
a1614 1
        SiS_Pr->SiS_LCDInfo = 0x80 | 0x40 | 0x20;   /* neg h/v sync, RGB24(D0 = 0) */
d1618 3
d1623 37
a1659 45
        switch(SiS_Pr->SiS_LCDResInfo) {
        case Panel_Custom:
		/* For non-standard LCD resolution, we let the panel scale */
           	SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
		break;
	case Panel_1280x720:
	      	if(SiS_Pr->PanelHT == 1650) {
		   SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
		}
	case Panel_1280x768:	/* TMDS only */
		/* No idea about the timing and zoom factors */
           	SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
		break;
	case Panel_1280x960:
	 	SiS_Pr->SiS_LCDInfo &= ~DontExpandLCD;
		break;
	case Panel_1280x1024:
	        if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
		   if(ModeNo == 0x7c || ModeNo == 0x7d || ModeNo == 0x7e ||
		      ModeNo == 0x79 || ModeNo == 0x75 || ModeNo == 0x78 ||
		      ModeNo == 0x14 || ModeNo == 0x15 || ModeNo == 0x16) {
	      	      /* We do not scale to 1280x720/800/960 (B/C bridges only) */
                      SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	           }
	           if(((HwInfo->jChipType >= SIS_315H) &&
		       (ModeNo == 0x23 || ModeNo == 0x24 || ModeNo == 0x25)) ||
	              ((HwInfo->jChipType < SIS_315H)  &&
		       (ModeNo == 0x55 || ModeNo == 0x5a || ModeNo == 0x5b))) {
	              /* We do not scale to 1280x768 (B/C bridges only) */
                      SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	           }
		}
		break;
	case Panel_1400x1050:
		if(ModeNo == 0x3a || ModeNo == 0x4d || ModeNo == 0x65) {
	      	   /* We do not scale to 1280x1024 (all bridges) */
	      	   SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   	}
		break;
	case Panel_1600x1200:
		if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	      	   /* No idea about the timing and zoom factors (C bridge only) */
	      	   SiS_Pr->SiS_LCDInfo |= DontExpandLCD;
	   	}
		break;
d1664 10
a1674 1
  if(HwInfo->jChipType < SIS_315H) {
d1676 1
a1676 1
        if(SiS_Pr->SiS_UseROM) {
a1687 1
  }
a1688 8

  /* Special cases */
  if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
     SiS_Pr->SiS_LCDInfo |= (DontExpandLCD | LCDPass11);
  }

  if(SiS_Pr->SiS_LCDResInfo == Panel_640x480) {
     SiS_Pr->SiS_LCDInfo |= LCDPass11;
d1691 3
a1693 3
  /* (In)validate LCDPass11 flag */
  if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
     SiS_Pr->SiS_LCDInfo &= ~LCDPass11;
d1696 2
a1697 15
  /* Special cases */
  if( (SiS_Pr->SiS_IF_DEF_FSTN)              ||
      (SiS_Pr->SiS_IF_DEF_DSTN)              ||
      (SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
      (SiS_Pr->SiS_CustomT == CUT_BARCO1024) ||
      (SiS_Pr->SiS_CustomT == CUT_PANEL848) ) {
     SiS_Pr->PanelHRS = 999;
     SiS_Pr->PanelHRE = 999;
  }

  if( (SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
      (SiS_Pr->SiS_CustomT == CUT_BARCO1024) ||
      (SiS_Pr->SiS_CustomT == CUT_PANEL848) ) {
     SiS_Pr->PanelVRS = 999;
     SiS_Pr->PanelVRE = 999;
d1702 14
a1715 17
     if(!(SiS_Pr->SiS_ROMNew)) {
        if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV)) {
	   /* Enable 302LV/302ELV dual link mode.
	    * For 661, this is done above.
	    */
           if((SiS_Pr->SiS_CustomT == CUT_CLEVO1024) &&
	      (SiS_Pr->SiS_LCDResInfo == Panel_1024x768)) {
	      /* (Sets this in SenseLCD; new paneltypes) */
	      SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	   }
           if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
	      (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
              (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) ||
	      (SiS_Pr->SiS_LCDResInfo == Panel_1680x1050)) {
	      SiS_Pr->SiS_LCDInfo |= LCDDualLink;
	   }
        }
d1723 12
a1734 5
	if(SiS_Pr->SiS_IF_DEF_TRUMPION == 0) {
	   if(ModeNo == 0x12) {
	      if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
	         SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	      }
d1740 14
a1753 15
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
	   SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	} else if(SiS_Pr->SiS_LCDResInfo == Panel_640x480) {
	   SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	} else if(ModeNo > 0x13) {
           if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
              if(resinfo == SIS_RI_512x384) SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	   } else if(SiS_Pr->SiS_LCDResInfo == Panel_1024x600) {
	      if((resinfo == SIS_RI_800x600) || (resinfo == SIS_RI_400x300)) {
                 SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
	      }
           } else if(SiS_Pr->SiS_LCDResInfo == Panel_800x600) {
              if(resinfo == SIS_RI_400x300) SiS_Pr->SiS_SetFlag |= EnableLVDSDDA;
           }
	}
d1766 8
d1795 39
a1833 3
  USHORT CRT2Index,VCLKIndex=0,VCLKIndexGEN=0;
  USHORT modeflag,resinfo,tempbx;
  const UCHAR *CHTVVCLKPtr = NULL;
a1838 1
     VCLKIndexGEN = (SiS_GetRegByte((SiS_Pr->SiS_P3ca+0x02)) >> 2) & 0x03;
a1842 2
     VCLKIndexGEN = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
     if(HwInfo->jChipType < SIS_315H) VCLKIndexGEN &= 0x3f;
d1850 1
a1850 1
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {      	/*  LCD */
d1853 16
a1868 1
	      VCLKIndex = SiS_Pr->PanelVCLKIdx300;
d1870 24
a1893 7
	      VCLKIndex = SiS_Pr->PanelVCLKIdx315;
	      if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (SiS_Pr->SiS_LCDInfo & LCDPass11)) {
	         VCLKIndex = VCLKIndexGEN;
		 if(resinfo == SIS_RI_1280x720) VCLKIndex = VCLK_1280x720;
		 if(SiS_Pr->SiS_LCDResInfo == Panel_1280x720) {
		    if(SiS_Pr->PanelHT == 1344) VCLKIndex = VCLK_1280x720_2;
		 }
d1909 1
a1909 1
        } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {                 	/*  TV */
d1912 2
a1913 2
              if(SiS_Pr->SiS_TVMode & TVRPLLDIV2XO) 		VCLKIndex = HiTVVCLKDIV2;
     	      else                                  		VCLKIndex = HiTVVCLK;
d1915 2
a1916 2
            	 if(modeflag & Charx8Dot) 	    		VCLKIndex = HiTVSimuVCLK;
            	 else 			  	    		VCLKIndex = HiTVTextVCLK;
d1918 4
a1921 4
           } else if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) 	VCLKIndex = YPbPr750pVCLK;
	   else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p)   	VCLKIndex = TVVCLKDIV2;
	   else if(SiS_Pr->SiS_TVMode & TVRPLLDIV2XO)     	VCLKIndex = TVVCLKDIV2;
           else         		            	  	VCLKIndex = TVVCLK;
d1923 5
a1927 2
	   if(HwInfo->jChipType < SIS_315H) VCLKIndex += TVCLKBASE_300;
  	   else 	                    VCLKIndex += TVCLKBASE_315;
d1929 1
a1929 1
        } else {         						/* VGA2 */
d1931 6
a1936 3
	   VCLKIndex = VCLKIndexGEN;
	   if(HwInfo->jChipType < SIS_315H) {
              if(ModeNo > 0x13) {
d1949 6
a1954 3
        VCLKIndex = VCLKIndexGEN;
	if(HwInfo->jChipType < SIS_315H) {
           if(ModeNo > 0x13) {
d1967 1
a1967 1
     if(SiS_Pr->SiS_SetFlag & ProgrammingCRT2) {
d2003 24
a2026 4
	   if(HwInfo->jChipType < SIS_315H) {
	      VCLKIndex = SiS_Pr->PanelVCLKIdx300;
	   } else {
	      VCLKIndex = SiS_Pr->PanelVCLKIdx315;
a2028 4
	   /* Special Timing: Barco iQ Pro R series */
	   if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) VCLKIndex = 0x44;

	   /* Special Timing: 848x480 parallel lvds */
d2041 6
a2046 7
	   VCLKIndex = VCLKIndexGEN;
	   if(HwInfo->jChipType < SIS_315H) {
              if(ModeNo > 0x13) {
		 if( (HwInfo->jChipType == SIS_630) &&
                     (HwInfo->jChipRevision >= 0x30) ) {
		    if(VCLKIndex == 0x14) VCLKIndex = 0x2e;
	         }
d2048 4
d2057 6
a2062 3
        VCLKIndex = VCLKIndexGEN;
	if(HwInfo->jChipType < SIS_315H) {
           if(ModeNo > 0x13) {
a2105 2
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
d2107 5
a2111 1
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d2229 2
a2230 2
	   if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
	      (SiS_Pr->SiS_LCDResInfo == Panel_1280x960)) {
d2257 3
a2259 3
	if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
	   (SiS_Pr->SiS_LCDResInfo == Panel_1280x960)  ||
	   ((SiS_Pr->SiS_LCDResInfo == Panel_Custom) &&
d2397 1
a2397 1
	/* 661: Sets p4 27 and 34 here, done in SetGroup4 here (old BIOS) */
d2459 8
a2466 2
  if(ModeNo <= 0x13) return((USHORT)SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo);
  else               return((USHORT)SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO);
d2476 2
a2477 6
     xres = SiS_Pr->CHDisplay;
     if(SiS_Pr->CModeFlag & HalfDCLK) xres *= 2;
     SiS_Pr->SiS_VGAHDE = SiS_Pr->SiS_HDE = xres;
     yres = SiS_Pr->CVDisplay;
     if(SiS_Pr->CModeFlag & DoubleScanMode) yres *= 2;
     SiS_Pr->SiS_VGAVDE = SiS_Pr->SiS_VDE = yres;
d2492 1
a2492 1
  if(!SiS_Pr->SiS_IF_DEF_DSTN && !SiS_Pr->SiS_IF_DEF_FSTN) {
d2503 4
a2506 2
     if(modeflag & HalfDCLK)       xres *= 2;
     if(modeflag & DoubleScanMode) yres *= 2;
d2510 2
a2511 3
  if((SiS_Pr->SiS_VBType & VB_SISVB) && (!(SiS_Pr->SiS_VBType & VB_NoLCD))) {

        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCDA | SetCRT2ToLCD | SetCRT2ToHiVision)) {
d2513 40
a2552 17
	}

	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	   switch(SiS_Pr->SiS_LCDResInfo) {
	   case Panel_1024x768:
	      if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
                 if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
          	    if(yres == 350) yres = 357;
          	    if(yres == 400) yres = 420;
            	    if(yres == 480) yres = 525;
        	 }
      	      }
	      break;
	   case Panel_1280x1024:
	      if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
		 /* BIOS bug - does this regardless of scaling */
      		 if(yres == 400) yres = 405;
a2553 10
      	      if(yres == 350) yres = 360;
      	      if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
                 if(yres == 360) yres = 375;
      	      }
	      break;
	   case Panel_1600x1200:
	      if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        	 if(yres == 1024) yres = 1056;
      	      }
	      break;
a2555 1

d2557 11
a2567 4

     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToHiVision)) {
           if(xres == 720) xres = 640;
a2568 12
     } else if(xres == 720) xres = 640;

     if(SiS_Pr->SiS_SetFlag & SetDOSMode) {
	yres = 400;
        if(HwInfo->jChipType >= SIS_315H) {
           if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x17) & 0x80) yres = 480;
        } else {
           if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) yres = 480;
        }
        if(SiS_Pr->SiS_IF_DEF_DSTN || SiS_Pr->SiS_IF_DEF_FSTN)  yres = 480;
     }

d2583 2
a2584 1
  USHORT modeflag=0;
d2591 1
a2591 1
     if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode))    return FALSE;
d2597 1
a2597 1
     (*ResIndex) = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d2600 1
a2600 1
     (*ResIndex) = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d2603 20
a2622 17
  (*ResIndex) &= 0x3F;

  if((SiS_Pr->SiS_IF_DEF_CH70xx) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
     (*DisplayType) = 18;
     if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) (*DisplayType)++;
     if(SiS_Pr->SiS_TVMode & TVSetPAL) {
      	(*DisplayType) += 2;
	if(SiS_Pr->SiS_ModeType > ModeVGA) {
	   if(SiS_Pr->SiS_CHSOverScan) (*DisplayType) = 99;
	}
	if(SiS_Pr->SiS_TVMode & TVSetPALM) {
	   (*DisplayType) = 18;  /* PALM uses NTSC data */
	   if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) (*DisplayType)++;
	} else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
	   (*DisplayType) = 20;  /* PALN uses PAL data  */
	   if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) (*DisplayType)++;
	}
d2624 38
a2661 17
  } else {
     switch(SiS_Pr->SiS_LCDResInfo) {
     case Panel_640x480:   (*DisplayType) = 50; break;
     case Panel_640x480_2: (*DisplayType) = 52; break;
     case Panel_640x480_3: (*DisplayType) = 54; break;
     case Panel_800x600:   (*DisplayType) =  0; break;
     case Panel_1024x600:  (*DisplayType) = 23; break;
     case Panel_1024x768:  (*DisplayType) =  4; break;
     case Panel_1152x768:  (*DisplayType) = 27; break;
     case Panel_1280x768:  (*DisplayType) = 40; break;
     case Panel_1280x1024: (*DisplayType) =  8; break;
     case Panel_1400x1050: (*DisplayType) = 14; break;
     case Panel_1600x1200: (*DisplayType) = 36; break;
     default: return FALSE;
     }

     if(modeflag & HalfDCLK) (*DisplayType)++;
a2662 7
     switch(SiS_Pr->SiS_LCDResInfo) {
     case Panel_640x480:
     case Panel_640x480_2:
     case Panel_640x480_3:
        break;
     default:
        if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) (*DisplayType) += 2;
a2663 1

d2665 2
a2666 2
        (*DisplayType) = 12;
	if(modeflag & HalfDCLK) (*DisplayType)++;
d2673 1
a2673 1
        (*DisplayType) = 22;
d2678 2
d2688 2
a2689 1
  USHORT tempbx=0,tempal=0,resinfo=0;
d2702 34
a2735 13
        tempbx = SiS_Pr->SiS_LCDResInfo;
	if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx += 32;

  	if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {  /* Pass 1:1 only (center-screen handled outside) */
	   tempbx = 100;
	   if(ModeNo >= 0x13) {
	      tempal = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC_NS;
	      if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes == 1280) &&
	         (SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes ==  768)) {
	         /* Special for Fujitsu 7911 (VL-17WDX8), others custom */
	         if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768)        tempal = 0x08;
		 else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768_2) tempal = 0x0f;
		 else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768_3) tempal = 0x10;
d2737 6
a2742 1
	   }
d2747 4
a2750 5
	   if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
	      if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
	         tempbx = 200;
	         if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx++;
	      }
d2789 3
a2791 4
	         if(resinfo == SIS_RI_1024x768) tempal = 8;
	      }
	      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
	         if(resinfo == SIS_RI_1280x720) tempal = 8;
d2802 1
d2804 30
a2833 7
     if((SiS_Pr->SiS_IF_DEF_CH70xx) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
        tempbx = 10;
	if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
        if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	   tempbx += 2;
	   if(SiS_Pr->SiS_ModeType > ModeVGA) {
	      if(SiS_Pr->SiS_CHSOverScan) tempbx = 99;
d2835 24
a2858 31
	   if(SiS_Pr->SiS_TVMode & TVSetPALM) {
	      tempbx = 90;
	      if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	   } else if(SiS_Pr->SiS_TVMode & TVSetPALN) {
	      tempbx = 92;
	      if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) tempbx += 1;
	   }
        }
     } else {
        switch(SiS_Pr->SiS_LCDResInfo) {
	case Panel_640x480:   tempbx = 6;  break;
	case Panel_640x480_2: tempbx = 30; break;
	case Panel_640x480_3: tempbx = 30; break;
	case Panel_800x600:   tempbx = 0;  break;
	case Panel_1024x600:  tempbx = 15; break;
	case Panel_1024x768:  tempbx = 2;  break;
	case Panel_1152x768:  tempbx = 17; break;
	case Panel_1280x768:  tempbx = 18; break;
	case Panel_1280x1024: tempbx = 4;  break;
	case Panel_1400x1050: tempbx = 8;  break;
	case Panel_1600x1200: tempbx = 21; break;
	case Panel_Barco1366: tempbx = 80; break;
	}

	switch(SiS_Pr->SiS_LCDResInfo) {
	case Panel_640x480:
	case Panel_640x480_2:
	case Panel_640x480_3:
	   break;
	default:
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
d2861 3
a2863 1
	if(SiS_Pr->SiS_LCDInfo & LCDPass11) tempbx = 7;
d2865 1
a2865 4
	if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
	   tempbx = 82;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)  tempbx++;
	} else if(SiS_Pr->SiS_CustomT == CUT_PANEL848) {
d2873 1
a2873 1
        if(SiS_Pr->SiS_LCDResInfo != Panel_640x480) tempal = 7;
d2879 2
a2880 2
     (*CRT2Index) = tempbx;
     (*ResIndex) = tempal & 0x1F;
d2884 28
d2972 2
a2973 1
                    USHORT RefreshRateTableIndex, PSIS_HW_INFO HwInfo)
d2991 1
a2991 1
   if((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
d2994 13
a3006 43
      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
         if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
	    if(SiS_Pr->UseCustomMode) {
	       SiS_Pr->SiS_VGAHT = SiS_Pr->SiS_HT = SiS_Pr->CHTotal;
	       SiS_Pr->SiS_VGAVT = SiS_Pr->SiS_VT = SiS_Pr->CVTotal;
	    } else {
	       if(ModeNo < 0x13) {
	          ResIndex = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
	       } else {
	          ResIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC_NS;
		  /* Special for our 3 types, others custom (works with default) */
		  if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes == 1280) &&
	             (SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes ==  768)) {
	             if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768)        ResIndex = 0x08;
		     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768_2) ResIndex = 0x0f;
		     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768_3) ResIndex = 0x10;
	          }
		  /* Special for 1280x720 TMDS <> LVDS */
		  if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes == 1280) &&
	             (SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes ==  720)) {
		     if(SiS_Pr->SiS_LCDResInfo == Panel_1280x720) {
		        if(SiS_Pr->PanelHT == 1344) ResIndex = 0x12;
		     }
	          }
	       }
	       SiS_Pr->SiS_VGAHT = SiS_Pr->SiS_NoScaleData[ResIndex].VGAHT;
               SiS_Pr->SiS_VGAVT = SiS_Pr->SiS_NoScaleData[ResIndex].VGAVT;
               SiS_Pr->SiS_HT    = SiS_Pr->SiS_NoScaleData[ResIndex].LCDHT;
               SiS_Pr->SiS_VT    = SiS_Pr->SiS_NoScaleData[ResIndex].LCDVT;
	    }
	 } else {
     	    SiS_Pr->SiS_VGAHT = SiS_Pr->SiS_HT = SiS_Pr->PanelHT;
            SiS_Pr->SiS_VGAVT = SiS_Pr->SiS_VT = SiS_Pr->PanelVT;
	 }
      } else {
	 /* This handles custom modes and custom panels */
	 SiS_Pr->SiS_HDE = SiS_Pr->PanelXRes;
         SiS_Pr->SiS_VDE = SiS_Pr->PanelYRes;
         SiS_Pr->SiS_HT  = SiS_Pr->PanelHT;
         SiS_Pr->SiS_VT  = SiS_Pr->PanelVT;
	 SiS_Pr->SiS_VGAHT = SiS_Pr->PanelHT - (SiS_Pr->PanelXRes - SiS_Pr->SiS_VGAHDE);
	 SiS_Pr->SiS_VGAVT = SiS_Pr->PanelVT - (SiS_Pr->PanelYRes - SiS_Pr->SiS_VGAVDE);
      }
d3008 2
a3009 1
      SiS_CalcLCDACRT1Timing(SiS_Pr,ModeNo,ModeIdIndex);
d3011 12
d3033 1
a3033 1
                     		&CRT2Index, &ResIndex, HwInfo);
d3041 45
a3085 42
      	 case  0: LVDSData = SiS_Pr->SiS_LVDS800x600Data_1;    break;
	 case  1: LVDSData = SiS_Pr->SiS_LVDS800x600Data_2;    break;
      	 case  2: LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;   break;
	 case  3: LVDSData = SiS_Pr->SiS_LVDS1024x768Data_2;   break;
      	 case  4: LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_1;  break;
      	 case  5: LVDSData = SiS_Pr->SiS_LVDS1280x1024Data_2;  break;
	 case  6: LVDSData = SiS_Pr->SiS_LVDS640x480Data_1;    break;
         case  7: LVDSData = SiS_Pr->SiS_LVDSXXXxXXXData_1;    break;
	 case  8: LVDSData = SiS_Pr->SiS_LVDS1400x1050Data_1;  break;
	 case  9: LVDSData = SiS_Pr->SiS_LVDS1400x1050Data_2;  break;
      	 case 10: LVDSData = SiS_Pr->SiS_CHTVUNTSCData;        break;
      	 case 11: LVDSData = SiS_Pr->SiS_CHTVONTSCData;        break;
      	 case 12: LVDSData = SiS_Pr->SiS_CHTVUPALData;         break;
      	 case 13: LVDSData = SiS_Pr->SiS_CHTVOPALData;         break;
      	 case 14: LVDSData = SiS_Pr->SiS_LVDS320x480Data_1;    break;
	 case 15: LVDSData = SiS_Pr->SiS_LVDS1024x600Data_1;   break;
	 case 16: LVDSData = SiS_Pr->SiS_LVDS1024x600Data_2;   break;
	 case 17: LVDSData = SiS_Pr->SiS_LVDS1152x768Data_1;   break;
	 case 18: LVDSData = SiS_Pr->SiS_LVDS1152x768Data_2;   break;
	 case 19: LVDSData = SiS_Pr->SiS_LVDS1280x768Data_1;   break;
	 case 20: LVDSData = SiS_Pr->SiS_LVDS1280x768Data_2;   break;
	 case 21: LVDSData = SiS_Pr->SiS_LVDS1600x1200Data_1;  break;
	 case 22: LVDSData = SiS_Pr->SiS_LVDS1600x1200Data_2;  break;
	 case 30: LVDSData = SiS_Pr->SiS_LVDS640x480Data_2;    break;
	 case 80: LVDSData = SiS_Pr->SiS_LVDSBARCO1366Data_1;  break;
	 case 81: LVDSData = SiS_Pr->SiS_LVDSBARCO1366Data_2;  break;
	 case 82: LVDSData = SiS_Pr->SiS_LVDSBARCO1024Data_1;  break;
	 case 83: LVDSData = SiS_Pr->SiS_LVDSBARCO1024Data_2;  break;
	 case 84: LVDSData = SiS_Pr->SiS_LVDS848x480Data_1;    break;
	 case 85: LVDSData = SiS_Pr->SiS_LVDS848x480Data_2;    break;
	 case 90: LVDSData = SiS_Pr->SiS_CHTVUPALMData;        break;
      	 case 91: LVDSData = SiS_Pr->SiS_CHTVOPALMData;        break;
      	 case 92: LVDSData = SiS_Pr->SiS_CHTVUPALNData;        break;
      	 case 93: LVDSData = SiS_Pr->SiS_CHTVOPALNData;        break;
	 case 99: LVDSData = SiS_Pr->SiS_CHTVSOPALData;	       break;  /* Super Overscan */
	 default: LVDSData = SiS_Pr->SiS_LVDS1024x768Data_1;   break;
      }

      SiS_Pr->SiS_VGAHT = (LVDSData+ResIndex)->VGAHT;
      SiS_Pr->SiS_VGAVT = (LVDSData+ResIndex)->VGAVT;
      SiS_Pr->SiS_HT    = (LVDSData+ResIndex)->LCDHT;
      SiS_Pr->SiS_VT    = (LVDSData+ResIndex)->LCDVT;
d3087 8
a3094 1
      if(!(SiS_Pr->SiS_VBType & VB_SISVB)) {
d3096 11
a3106 8
            if((!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) || (SiS_Pr->SiS_SetFlag & SetDOSMode)) {
	       SiS_Pr->SiS_HDE = SiS_Pr->PanelXRes;
               SiS_Pr->SiS_VDE = SiS_Pr->PanelYRes;
	       if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
		  if(ResIndex < 0x08) {
		     SiS_Pr->SiS_HDE = 1280;
                     SiS_Pr->SiS_VDE = 1024;
                  }
a3127 3
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
d3129 7
a3135 2
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d3172 14
a3185 14
        case  2: TVPtr = SiS_Pr->SiS_ExtHiTVData;   break;
        case  3: TVPtr = SiS_Pr->SiS_ExtPALData;    break;
        case  4: TVPtr = SiS_Pr->SiS_ExtNTSCData;   break;
        case  5: TVPtr = SiS_Pr->SiS_Ext525iData;   break;
        case  6: TVPtr = SiS_Pr->SiS_Ext525pData;   break;
        case  7: TVPtr = SiS_Pr->SiS_Ext750pData;   break;
        case  8: TVPtr = SiS_Pr->SiS_StPALData;     break;
        case  9: TVPtr = SiS_Pr->SiS_StNTSCData;    break;
        case 10: TVPtr = SiS_Pr->SiS_St525iData;    break;
        case 11: TVPtr = SiS_Pr->SiS_St525pData;    break;
        case 12: TVPtr = SiS_Pr->SiS_St750pData;    break;
        case 13: TVPtr = SiS_Pr->SiS_St1HiTVData;   break;
        case 14: TVPtr = SiS_Pr->SiS_St2HiTVData;   break;
        default: TVPtr = SiS_Pr->SiS_StPALData;     break;
a3265 3
     SiS_Pr->SiS_RVBHCMAX  = 1;
     SiS_Pr->SiS_RVBHCFACT = 1;

d3268 2
d3279 2
a3280 6
        if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {

           SiS_Pr->SiS_VGAHT     = SiS_Pr->PanelHT;
           SiS_Pr->SiS_VGAVT     = SiS_Pr->PanelVT;
           SiS_Pr->SiS_HT        = SiS_Pr->PanelHT;
           SiS_Pr->SiS_VT        = SiS_Pr->PanelVT;
d3282 34
a3315 33
	} else {

           SiS_GetCRT2Ptr(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,
                          &CRT2Index,&ResIndex,HwInfo);

           switch(CRT2Index) {
	      case Panel_1024x768      : LCDPtr = SiS_Pr->SiS_ExtLCD1024x768Data;   break;
	      case Panel_1024x768  + 32: LCDPtr = SiS_Pr->SiS_St2LCD1024x768Data;   break;
	      case Panel_1280x720      :
	      case Panel_1280x720  + 32: LCDPtr = SiS_Pr->SiS_LCD1280x720Data;      break;
	      case Panel_1280x768_2    : LCDPtr = SiS_Pr->SiS_ExtLCD1280x768_2Data; break;
              case Panel_1280x768_2+ 32: LCDPtr = SiS_Pr->SiS_StLCD1280x768_2Data;  break;
	      case Panel_1280x768_3    :
	      case Panel_1280x768_3+ 32: LCDPtr = SiS_Pr->SiS_LCD1280x768_3Data;    break;
	      case Panel_1280x800      :
	      case Panel_1280x800  + 32: LCDPtr = SiS_Pr->SiS_LCD1280x800Data;      break;
	      case Panel_1280x960      :
	      case Panel_1280x960  + 32: LCDPtr = SiS_Pr->SiS_LCD1280x960Data;      break;
              case Panel_1280x1024     : LCDPtr = SiS_Pr->SiS_ExtLCD1280x1024Data;  break;
              case Panel_1280x1024 + 32: LCDPtr = SiS_Pr->SiS_St2LCD1280x1024Data;  break;
              case Panel_1400x1050     : LCDPtr = SiS_Pr->SiS_ExtLCD1400x1050Data;  break;
              case Panel_1400x1050 + 32: LCDPtr = SiS_Pr->SiS_StLCD1400x1050Data;   break;
              case Panel_1600x1200     : LCDPtr = SiS_Pr->SiS_ExtLCD1600x1200Data;  break;
              case Panel_1600x1200 + 32: LCDPtr = SiS_Pr->SiS_StLCD1600x1200Data;   break;
	      case Panel_1680x1050     :
	      case Panel_1680x1050 + 32: LCDPtr = SiS_Pr->SiS_LCD1680x1050Data;     break;
	      case 100		       : LCDPtr = SiS_Pr->SiS_NoScaleData;	    break;
#ifdef SIS315H
	      case 200                 : LCDPtr = SiS310_ExtCompaq1280x1024Data;    break;
	      case 201                 : LCDPtr = SiS_Pr->SiS_St2LCD1280x1024Data;  break;
#endif
              default                  : LCDPtr = SiS_Pr->SiS_ExtLCD1024x768Data;   break;
           }
d3318 2
a3319 1
           xf86DrvMsg(0, X_INFO, "GetCRT2Data: Index %d ResIndex %d\n", CRT2Index, ResIndex);
d3322 2
a3323 13
           SiS_Pr->SiS_RVBHCMAX  = (LCDPtr+ResIndex)->RVBHCMAX;
           SiS_Pr->SiS_RVBHCFACT = (LCDPtr+ResIndex)->RVBHCFACT;
           SiS_Pr->SiS_VGAHT     = (LCDPtr+ResIndex)->VGAHT;
           SiS_Pr->SiS_VGAVT     = (LCDPtr+ResIndex)->VGAVT;
           SiS_Pr->SiS_HT        = (LCDPtr+ResIndex)->LCDHT;
           SiS_Pr->SiS_VT        = (LCDPtr+ResIndex)->LCDVT;

        }

	tempax = SiS_Pr->PanelXRes;
        tempbx = SiS_Pr->PanelYRes;

	if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d3328 3
d3339 1
d3341 8
a3348 1
	} else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x960) {
d3352 13
a3364 6
	} else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
           if     (SiS_Pr->SiS_VGAVDE == 360) tempbx = 768;
           else if(SiS_Pr->SiS_VGAVDE == 375) tempbx = 800;
           else if(SiS_Pr->SiS_VGAVDE == 405) tempbx = 864;
        } else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) {
	   if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
d3368 4
a3371 2
        }

a3375 1

d3389 21
a3409 2
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
        SiS_GetCRT2DataLVDS(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d3411 3
a3413 6
	if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
	   /* Need LVDS Data for LCD on 301B-DH */
	   SiS_GetCRT2DataLVDS(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
	} else {
	   SiS_GetCRT2Data301(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
        }
d3424 1
a3424 1
/*         GET LVDS DES (SKEW) DATA          */
d3432 1
a3432 1
  USHORT modeflag;
d3436 1
a3436 1
     (*ResIndex) = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d3439 1
a3439 1
     (*ResIndex) = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d3442 1
a3442 3
  (*ResIndex) &= 0x1F;
  (*PanelIndex) = 0;

d3445 3
a3447 3
        (*PanelIndex) = 50;
        if((SiS_Pr->SiS_TVMode & TVSetPAL) && (!(SiS_Pr->SiS_TVMode & TVSetPALM))) (*PanelIndex) += 2;
        if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) (*PanelIndex) += 1;
d3449 1
a3449 1
        /* PALM uses NTSC data, PALN uses PAL data */
d3454 1
a3454 1
     *PanelIndex = SiS_Pr->SiS_LCDTypeInfo;
d3459 1
a3459 1
        (*PanelIndex) = SiS_Pr->SiS_LCDResInfo - 1;
d3461 4
a3464 6
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        (*PanelIndex) += 16;
        if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
           (*PanelIndex) = 32;
           if(modeflag & HalfDCLK) (*PanelIndex)++;
	}
d3469 2
a3470 2
     if(SiS_Pr->SiS_LCDResInfo != Panel_640x480) {
        (*ResIndex) = 7;
d3472 1
a3472 1
           if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x80) (*ResIndex)++;
d3476 54
d3531 1
d3541 5
a3545 9
  SiS_Pr->SiS_LCDHDES = 0;
  SiS_Pr->SiS_LCDVDES = 0;

  if( (SiS_Pr->UseCustomMode) 		         ||
      (SiS_Pr->SiS_LCDResInfo == Panel_Custom)   ||
      (SiS_Pr->SiS_CustomT == CUT_PANEL848)      ||
      ((SiS_Pr->SiS_VBType & VB_SISVB) &&
       (SiS_Pr->SiS_LCDInfo & DontExpandLCD) &&
       (SiS_Pr->SiS_LCDInfo & LCDPass11)) ) {
d3552 23
a3574 23
     if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
        /* non-pass 1:1 only, see above */
        if(SiS_Pr->SiS_VGAVDE != SiS_Pr->PanelYRes) {
           SiS_Pr->SiS_LCDHDES = SiS_Pr->SiS_HT - ((SiS_Pr->PanelXRes - SiS_Pr->SiS_VGAHDE) / 2);
	   SiS_Pr->SiS_LCDVDES = SiS_Pr->SiS_VT - ((SiS_Pr->PanelYRes - SiS_Pr->SiS_VGAVDE) / 2);
	}
     }
     if(SiS_Pr->SiS_VGAVDE == SiS_Pr->PanelYRes) {
        switch(SiS_Pr->SiS_CustomT) {
        case CUT_UNIWILL1024:
        case CUT_UNIWILL10242:
        case CUT_CLEVO1400:
	   if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	      SiS_Pr->SiS_LCDVDES = SiS_Pr->PanelVT - 1;
	   }
	   break;
	}
	if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
	   if(SiS_Pr->SiS_CustomT != CUT_COMPAQ1280) {
	      SiS_Pr->SiS_LCDVDES = SiS_Pr->PanelVT - 1;
	   }
	}
     }
d3582 81
a3662 62
     switch(PanelIndex) {
     	case  0: PanelDesPtr = SiS_Pr->SiS_PanelType00_1;    break;   /* ---  */
     	case  1: PanelDesPtr = SiS_Pr->SiS_PanelType01_1;    break;
     	case  2: PanelDesPtr = SiS_Pr->SiS_PanelType02_1;    break;
     	case  3: PanelDesPtr = SiS_Pr->SiS_PanelType03_1;    break;
     	case  4: PanelDesPtr = SiS_Pr->SiS_PanelType04_1;    break;
     	case  5: PanelDesPtr = SiS_Pr->SiS_PanelType05_1;    break;
     	case  6: PanelDesPtr = SiS_Pr->SiS_PanelType06_1;    break;
     	case  7: PanelDesPtr = SiS_Pr->SiS_PanelType07_1;    break;
     	case  8: PanelDesPtr = SiS_Pr->SiS_PanelType08_1;    break;
     	case  9: PanelDesPtr = SiS_Pr->SiS_PanelType09_1;    break;
     	case 10: PanelDesPtr = SiS_Pr->SiS_PanelType0a_1;    break;
     	case 11: PanelDesPtr = SiS_Pr->SiS_PanelType0b_1;    break;
     	case 12: PanelDesPtr = SiS_Pr->SiS_PanelType0c_1;    break;
     	case 13: PanelDesPtr = SiS_Pr->SiS_PanelType0d_1;    break;
     	case 14: PanelDesPtr = SiS_Pr->SiS_PanelType0e_1;    break;
     	case 15: PanelDesPtr = SiS_Pr->SiS_PanelType0f_1;    break;
     	case 16: PanelDesPtr = SiS_Pr->SiS_PanelType00_2;    break;    /* --- */
     	case 17: PanelDesPtr = SiS_Pr->SiS_PanelType01_2;    break;
     	case 18: PanelDesPtr = SiS_Pr->SiS_PanelType02_2;    break;
     	case 19: PanelDesPtr = SiS_Pr->SiS_PanelType03_2;    break;
     	case 20: PanelDesPtr = SiS_Pr->SiS_PanelType04_2;    break;
     	case 21: PanelDesPtr = SiS_Pr->SiS_PanelType05_2;    break;
     	case 22: PanelDesPtr = SiS_Pr->SiS_PanelType06_2;    break;
     	case 23: PanelDesPtr = SiS_Pr->SiS_PanelType07_2;    break;
     	case 24: PanelDesPtr = SiS_Pr->SiS_PanelType08_2;    break;
     	case 25: PanelDesPtr = SiS_Pr->SiS_PanelType09_2;    break;
     	case 26: PanelDesPtr = SiS_Pr->SiS_PanelType0a_2;    break;
     	case 27: PanelDesPtr = SiS_Pr->SiS_PanelType0b_2;    break;
     	case 28: PanelDesPtr = SiS_Pr->SiS_PanelType0c_2;    break;
     	case 29: PanelDesPtr = SiS_Pr->SiS_PanelType0d_2;    break;
     	case 30: PanelDesPtr = SiS_Pr->SiS_PanelType0e_2;    break;
     	case 31: PanelDesPtr = SiS_Pr->SiS_PanelType0f_2;    break;
	case 32: PanelDesPtr = SiS_Pr->SiS_PanelTypeNS_1;    break;    /* pass 1:1 */
	case 33: PanelDesPtr = SiS_Pr->SiS_PanelTypeNS_2;    break;
     	case 50: PanelDesPtr = SiS_Pr->SiS_CHTVUNTSCDesData; break;    /* TV */
     	case 51: PanelDesPtr = SiS_Pr->SiS_CHTVONTSCDesData; break;
     	case 52: PanelDesPtr = SiS_Pr->SiS_CHTVUPALDesData;  break;
     	case 53: PanelDesPtr = SiS_Pr->SiS_CHTVOPALDesData;  break;
	default: return;
     }

     SiS_Pr->SiS_LCDHDES = (PanelDesPtr+ResIndex)->LCDHDES;
     SiS_Pr->SiS_LCDVDES = (PanelDesPtr+ResIndex)->LCDVDES;

     if((ModeNo <= 0x13) && (SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {
        modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
        if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
	   if(!(modeflag & HalfDCLK)) SiS_Pr->SiS_LCDHDES = 632;
        } else if(!(SiS_Pr->SiS_SetFlag & SetDOSMode)) {
           if(SiS_Pr->SiS_LCDResInfo != Panel_1280x1024) {
              if(SiS_Pr->SiS_LCDResInfo >= Panel_1024x768) {
	         if(HwInfo->jChipType < SIS_315H) {
	            if(!(modeflag & HalfDCLK)) SiS_Pr->SiS_LCDHDES = 320;
	         } else {
	            if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)  SiS_Pr->SiS_LCDHDES = 480;
                    if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) SiS_Pr->SiS_LCDHDES = 804;
		    if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) SiS_Pr->SiS_LCDHDES = 704;
                    if(!(modeflag & HalfDCLK)) {
                       SiS_Pr->SiS_LCDHDES = 320;
	               if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) SiS_Pr->SiS_LCDHDES = 632;
		       if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) SiS_Pr->SiS_LCDHDES = 542;
d3673 12
d4757 1
a4757 1
       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
d4800 1
a4800 1
       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
d4891 1
a4891 1
/* Set CRT2 OFFSET / PITCH */
d4893 3
a4895 2
SiS_SetCRT2Offset(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
	          USHORT RRTI, PSIS_HW_INFO HwInfo)
d4902 2
a4903 1
  offset = SiS_GetOffset(SiS_Pr,ModeNo,ModeIdIndex,RRTI,HwInfo);
d4905 2
a4906 4
  if((SiS_Pr->SiS_LCDResInfo == Panel_640x480_2) ||
     (SiS_Pr->SiS_LCDResInfo == Panel_640x480_3)) {
     offset >>= 1;
  }
d4908 4
a4911 2
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x07,(offset & 0xFF));
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x09,(offset >> 8));
d4917 1
a4917 1
/* Set CRT2 sync and PanelLink mode */
d4939 1
d4941 1
d4944 1
d4948 1
a4948 7
	   tempah |= 0xf0;
        }
	if( (SiS_Pr->SiS_IF_DEF_FSTN) ||
            (SiS_Pr->SiS_IF_DEF_DSTN) ||
            (SiS_Pr->SiS_IF_DEF_TRUMPION) ||
            (SiS_Pr->SiS_CustomT == CUT_PANEL848) ) {
           tempah |= 0x30;
d4951 1
a4954 1
	   tempah &= 0x18;
a4955 1
	   /* Don't care about 12/18/24 bit mode - TV is via VGA, not PL */
a4971 1
	   tempbl = 0;
a4974 1
		 tempbl = (tempah >> 6) & 0x03;
d4978 1
d4981 3
a4983 1
  	   tempah |= 0xc0;
a4984 3
	   if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (!(SiS_Pr->SiS_VBType & VB_NoLCD))) {
	      SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xf0,tempbl);
	   }
d5002 1
a5002 1
        if(SiS_Pr->SiS_VBType & VB_SIS301LV302LV) {	  		/* 315 - LVDS */
d5004 4
a5007 3
	   tempbl = 0;
	   if((SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) &&
	      (SiS_Pr->SiS_LCDResInfo == Panel_1280x1024)) {
a5008 7
	      if(SiS_Pr->SiS_LCDInfo & LCDSync) {
	        tempbl = ((SiS_Pr->SiS_LCDInfo & 0xc0) >> 6);
	      }
	   } else if((SiS_Pr->SiS_CustomT == CUT_CLEVO1400)  &&
	             (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050)) {
       	      tempah = infoflag >> 8;
	      tempbl = 0x03;
a5010 3
	      tempbl = (tempah >> 6) & 0x03;
	      tempbl |= 0x08;
	      if(!(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit)) tempbl |= 0x04;
d5013 1
a5015 1
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)   tempah |= 0xc0;
a5016 5
	   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	         SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xf0,tempbl);
	      }
	   }
d5018 1
a5018 1
        } else {							/* 315 - TMDS */
d5020 1
a5020 1
           tempah = tempbl = infoflag >> 8;
d5022 1
a5022 7
	      tempbl = 0;
	      if((SiS_Pr->SiS_VBType & VB_SIS301C) && (SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
	         if(ModeNo <= 0x13) {
	            tempah = SiS_GetRegByte((SiS_Pr->SiS_P3ca+0x02));
  	         }
	      }
	      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
a5024 1
		    tempbl = (tempah >> 6) & 0x03;
d5029 1
d5032 4
a5035 14
	   if(SiS_Pr->SiS_VBType & VB_NoLCD) {
	      /* Imitate BIOS bug */
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)  tempah |= 0xc0;
	   }
	   if((SiS_Pr->SiS_VBType & VB_SIS301C) && (SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC)) {
	      tempah >>= 3;
	      tempah &= 0x18;
	      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xe7,tempah);
	   } else {
              SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0F,tempah);
	      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	         if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	            SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xf0,tempbl);
		 }
d5038 1
d5046 1
a5046 1
/* Set CRT2 FIFO on 300/630/730 */
d5101 1
a5101 1
     CRT1ModeNo = SiS_Pr->SiS_CRT1Mode;                                 /* get CRT1 ModeNo */
d5110 1
a5110 1
        VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;			/* Get VCLK */
d5120 1
a5120 1
     VCLK = SiS_Pr->CSRClock_CRT1;					/* Get VCLK */
d5122 1
a5122 1
     switch(data2) {							/* Get color depth */
d5269 1
a5269 1
       VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;                /* Get VCLK  */
d5272 1
a5272 1
          if(SiS_Pr->SiS_UseROM) {
d5282 1
a5282 1
       VCLK = SiS_Pr->CSRClock;					/* Get VCLK */
d5286 1
a5286 1
    colorth = SiS_GetColorDepth(SiS_Pr,CRT2ModeNo,modeidindex); /* Get colordepth */
d5305 2
a5306 2
       if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
       	  temp = (temp & (~0x1F)) | 0x13;
d5336 11
a5346 1
/* Set CRT2 FIFO on 315/330 series */
d5349 2
a5350 1
SiS_SetCRT2FIFO_310(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d5352 261
a5612 1
  USHORT temp;
d5614 2
a5615 4
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x01,0x3B);
  temp = 0x04;
  if(HwInfo->jChipType >= SIS_661) {
     if((SiS_GetReg(SiS_Pr->SiS_P3d4,0x5c) & 0xf8) == 0x80) temp = 0x44;
a5616 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x02,~0x3f,temp);
d5618 1
a5618 1
#endif
d5631 1
a5631 1
/* Set Part 1 / SiS bridge slave mode */
d5638 1
a5638 1
  USHORT  resinfo,modeflag,xres=0;
a5646 1
     xres = SiS_Pr->CHDisplay;
a5649 1
     xres = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes;
a5653 6
  if((HwInfo->jChipType >= SIS_661) && (ModeNo > 0x13)) {
     if(xres >= 1600) {
        SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x31,0x04);
     }
  }

d5714 2
a5715 2
           if((SiS_Pr->SiS_LCDResInfo != Panel_1280x960) &&
	      (SiS_Pr->SiS_LCDResInfo != Panel_1600x1200)) {
d5722 1
a5722 1
                          if(SiS_Pr->SiS_LCDResInfo != Panel_1280x1024)
d5727 1
a5727 1
		 if(SiS_Pr->SiS_LCDResInfo != Panel_1400x1050) {
d5817 1
a5817 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d5863 1
a5863 1
     if(SiS_Pr->SiS_LCDResInfo != Panel_1400x1050) {
d5941 1
a5941 1
  temp = SiS_GetRegByte((SiS_Pr->SiS_P3ca+0x02));
d5945 1
a5945 4
/* Setup panel link
 * This is used for LVDS, LCDA and Chrontel TV output
 * 300/LVDS+TV, 300/301B-DH, 315/LVDS+TV, 315/LCDA
 */
d5948 1
a5948 1
                   PSIS_HW_INFO HwInfo, USHORT RefreshRateTableIndex)
d5950 2
a5951 7
  USHORT modeflag,resinfo;
  USHORT push2,tempax,tempbx,tempcx,temp;
  ULONG tempeax=0,tempebx,tempecx,tempvcfact=0;
  BOOLEAN islvds = FALSE, issis  = FALSE, chkdclkfirst = FALSE;
#ifdef SIS300
  USHORT crt2crtc;
#endif
d5955 5
a5963 9
#ifdef SIS300
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
#endif
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
#ifdef SIS300
     crt2crtc = 0;
#endif
a5966 3
#ifdef SIS300
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
#endif
d5969 11
a5979 4
  /* is lvds if really LVDS, or SiS 301B-DH with external LVDS transmitter */
  if((SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
     ((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBType & VB_NoLCD))) {
     islvds = TRUE;
d5982 3
a5984 4
  /* is really sis if sis bridge, but not 301B-DH */
  if((SiS_Pr->SiS_VBType & VB_SISVB) && (!(SiS_Pr->SiS_VBType & VB_NoLCD))) {
     issis = TRUE;
  }
d5986 3
a5988 4
  if((HwInfo->jChipType >= SIS_315H) && (islvds) && (!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA))) {
     if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
        chkdclkfirst = TRUE;
     }
d5991 10
a6000 21
#ifdef SIS315H
  if((HwInfo->jChipType >= SIS_315H) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
     if(IS_SIS330) {
        SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x10);
     } else if(IS_SIS740) {
        if(islvds) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xfb,0x04);
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x03);
        } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
           SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x10);
        }
     } else {
        if(islvds) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,0xfb,0x04);
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x00);
        } else if(SiS_Pr->SiS_VBType & VB_SISVB) {
           SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x2D,0x0f);
	   if(SiS_Pr->SiS_VBType & VB_SIS301C) {
	      if((SiS_Pr->SiS_LCDResInfo == Panel_1024x768) ||
	         (SiS_Pr->SiS_LCDResInfo == Panel_1280x1024)) {
	         SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2D,0x20);
d6006 1
a6006 1
#endif
d6008 1
a6008 1
  /* Horizontal */
d6010 1
a6010 16
  tempax = SiS_Pr->SiS_LCDHDES;
  if(islvds) {
     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
        if((!SiS_Pr->SiS_IF_DEF_FSTN) && (!SiS_Pr->SiS_IF_DEF_DSTN)) {
           if((SiS_Pr->SiS_LCDResInfo == Panel_640x480) &&
              (!(SiS_Pr->SiS_VBInfo & SetInSlaveMode))) {
  	      tempax -= 8;
	   }
	}
     }
  }

  temp = (tempax & 0x0007);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1A,temp);			/* BPLHDESKEW[2:0]   */
  temp = (tempax >> 3) & 0x00FF;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,temp);			/* BPLHDESKEW[10:3]  */
a6011 12
  tempbx = SiS_Pr->SiS_HDE;
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if((SiS_Pr->SiS_LCDResInfo == Panel_640x480_2) ||
        (SiS_Pr->SiS_LCDResInfo == Panel_640x480_3)) {
        tempbx >>= 1;
     }
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        tempbx = SiS_Pr->PanelXRes;
     }
  }

  tempax += tempbx;
d6014 1
a6014 10
  temp = tempax;
#if 0
  /* TEST 2 */
  if((HwInfo->jChipType >= SIS_315H) && (islvds) && (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050)) {
  } else
  /* /TEST2 */
#endif
  if(temp & 0x07) temp += 8;
  temp >>= 3;
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,temp);			/* BPLHDEE  */
d6016 5
a6020 3
  tempcx = (SiS_Pr->SiS_HT - tempbx) >> 2;

  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
d6022 25
a6046 1
        if(SiS_Pr->PanelHRS != 999) tempcx = SiS_Pr->PanelHRS;
d6050 1
a6050 1
  tempcx += tempax;
d6053 30
a6082 20
  temp = (tempcx >> 3) & 0x00FF;
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
           switch(ModeNo) {
           case 0x04:
           case 0x05:
           case 0x0d: temp = 0x56; break;
           case 0x10: temp = 0x60; break;
           case 0x13: temp = 0x5f; break;
           case 0x40:
           case 0x41:
           case 0x4f:
           case 0x43:
           case 0x44:
           case 0x62:
           case 0x56:
           case 0x53:
           case 0x5d:
           case 0x5e: temp = 0x54; break;
a6086 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,temp);			/* BPLHRS */
d6088 2
a6089 4
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     temp += 2;
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        temp += 8;
d6091 1
a6091 5
        /* TEST 1 */
	if((HwInfo->jChipType >= SIS_315H) && (islvds) && (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050)) {
	   temp -= 16;
	} else
	/* /test1 */
d6093 42
a6134 5
        if(SiS_Pr->PanelHRE != 999) {
           temp = tempcx + SiS_Pr->PanelHRE;
	   if(temp >= SiS_Pr->SiS_HT) temp -= SiS_Pr->SiS_HT;
	   temp >>= 3;
        }
d6136 2
d6139 3
a6141 1
     temp += 10;
d6144 2
a6145 6
  temp &= 0x1F;
  temp |= ((tempcx & 0x07) << 5);
#if 0
  if(SiS_Pr->SiS_IF_DEF_FSTN) temp = 0x20;       		/* WRONG? BIOS loads cl, not ah */
#endif
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,temp);			/* BPLHRE */
d6147 1
a6147 1
  /* Vertical */
d6149 13
a6161 3
  tempax = SiS_Pr->SiS_VGAVDE;
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
d6166 1
a6166 1
  tempbx = SiS_Pr->SiS_LCDVDES + tempax;
d6171 39
a6209 5
  tempcx = SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE;
  if(HwInfo->jChipType < SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
        if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
	   tempcx = SiS_Pr->SiS_VGAVT - SiS_Pr->PanelYRes;
a6212 2
  if(islvds) tempcx >>= 1;
  else       tempcx >>= 2;
d6214 6
a6219 10
  if( (SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) &&
      (!(SiS_Pr->SiS_LCDInfo & LCDPass11)) 		    &&
      (SiS_Pr->PanelVRS != 999) ) {
     tempcx = SiS_Pr->PanelVRS;
     tempbx += tempcx;
     if(issis) tempbx++;
  } else {
     tempbx += tempcx;
     if(HwInfo->jChipType < SIS_315H) tempbx++;
     else if(issis)                   tempbx++;
d6222 1
a6222 1
  if(tempbx >= SiS_Pr->SiS_VT) tempbx -= SiS_Pr->SiS_VT;	/* BPLVRS  */
d6225 1
a6225 6
  if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
        if(ModeNo == 0x10) temp = 0xa9;
     }
  }
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,temp);
a6227 1
  tempcx++;
d6229 30
a6258 3
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
        if(SiS_Pr->PanelVRE != 999) tempcx = SiS_Pr->PanelVRE;
d6262 1
a6262 1
  tempcx += tempbx;
d6264 8
a6271 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0xF0,temp);	/* BPLVRE  */
d6273 1
a6273 1
  temp = ((tempbx >> 8) & 0x07) << 3;
d6276 1
a6276 1
        if(SiS_Pr->SiS_VGAVDE != SiS_Pr->SiS_VDE)  temp |= 0x40;
d6278 6
a6283 33
  } else if(SiS_Pr->SiS_VGAVDE != SiS_Pr->SiS_VDE) temp |= 0x40;
  if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA)          temp |= 0x40;
  tempbx = 0x87;
  if((HwInfo->jChipType >= SIS_315H) ||
     (HwInfo->jChipRevision >= 0x30)) {
     tempbx = 0x07;
     if((SiS_Pr->SiS_IF_DEF_CH70xx == 1) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
	if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x03)    temp |= 0x80;
     }
     /* Chrontel 701x operates in 24bit mode (8-8-8, 2x12bit mutliplexed) via VGA2 */
     if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	   if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x06) & 0x10)      temp |= 0x80;
	} else {
	   if(SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x01) temp |= 0x80;
	}
     }
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1A,tempbx,temp);

  tempbx = push2;                                      		/* BPLVDEE */

  tempcx = SiS_Pr->SiS_LCDVDES;                        		/* BPLVDES */

  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     switch(SiS_Pr->SiS_LCDResInfo) {
     case Panel_640x480:
        tempbx = SiS_Pr->SiS_VGAVDE - 1;
        tempcx = SiS_Pr->SiS_VGAVDE;
	break;
     case Panel_800x600:
        if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
           if(resinfo == SIS_RI_800x600) tempcx++;
d6285 5
a6289 6
	break;
     case Panel_1024x600:
        if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
           if(resinfo == SIS_RI_1024x600) tempcx++;
           if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
	      if(resinfo == SIS_RI_800x600) tempcx++;
d6291 1
a6291 9
        }
	break;
     case Panel_1024x768:
        if(HwInfo->jChipType < SIS_315H) {
           if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
              if(resinfo == SIS_RI_1024x768) tempcx++;
	   }
        }
	break;
d6294 1
a6294 9

  temp = ((tempbx >> 8) & 0x07) << 3;
  temp = temp | ((tempcx >> 8) & 0x07);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1D,temp);
  /* if(SiS_Pr->SiS_IF_DEF_FSTN) tempbx++;  */
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1C,tempbx);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1B,tempcx);

  /* Vertical scaling */
d6299 1
d6301 1
a6301 1
     temp = (tempeax % (ULONG)SiS_Pr->SiS_VDE);
d6303 4
a6306 1
     if(temp) tempeax++;
d6308 2
a6309 1
     if(SiS_Pr->SiS_SetFlag & EnableLVDSDDA) tempeax = 0x3F;
a6310 3
     temp = (USHORT)(tempeax & 0x00FF);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1E,temp);      	/* BPLVCFACT */
     tempvcfact = temp;
d6316 7
d6324 4
a6327 4
     tempebx = SiS_Pr->SiS_VDE;
     temp = (tempeax % tempebx);
     tempeax = tempeax / tempebx;
     if(temp) tempeax++;
d6329 12
d6342 4
a6345 7
     temp = (USHORT)(tempeax & 0x00FF);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x37,temp);
     temp = (USHORT)((tempeax & 0x00FF00) >> 8);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x36,temp);
     temp = (USHORT)((tempeax & 0x00030000) >> 16);
     if(SiS_Pr->SiS_VDE == SiS_Pr->SiS_VGAVDE) temp |= 0x04;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x35,temp);
d6347 17
a6363 10
     if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) {
        temp = (USHORT)(tempeax & 0x00FF);
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x3c,temp);
        temp = (USHORT)((tempeax & 0x00FF00) >> 8);
        SiS_SetReg(SiS_Pr->SiS_Part4Port,0x3b,temp);
        temp = (USHORT)(((tempeax & 0x00030000) >> 16) << 6);
        SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x3a,0x3f,temp);
        temp = 0;
        if(SiS_Pr->SiS_VDE != SiS_Pr->SiS_VGAVDE) temp |= 0x08;
        SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x30,0xf3,temp);
d6365 1
a6365 1
#endif
d6367 5
d6374 3
a6376 1
  /* Horizontal scaling */
d6378 14
a6391 3
  tempeax = SiS_Pr->SiS_VGAHDE;		/* 1f = ( (VGAHDE * 65536) / ( (VGAHDE * 65536) / HDE ) ) - 1*/
  if(chkdclkfirst) {
     if(modeflag & HalfDCLK) tempeax >>= 1;
d6393 7
a6399 5
  tempebx = tempeax << 16;
  if(SiS_Pr->SiS_HDE == tempeax) {
     tempecx = 0xFFFF;
  } else {
     tempecx = tempebx / SiS_Pr->SiS_HDE;
d6401 1
a6401 1
        if(tempebx % SiS_Pr->SiS_HDE) tempecx++;
d6404 1
d6407 6
a6412 1
     tempeax = (tempebx / tempecx) - 1;
d6416 2
a6417 1
  tempecx = (tempecx << 16) | (tempeax & 0xFFFF);
d6419 1
a6419 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1F,temp);
d6421 1
d6424 1
a6424 1
     tempbx = (USHORT)(tempeax & 0xFFFF);
d6427 1
a6427 1
     tempbx = tempvcfact & 0x3f;
d6430 1
a6430 1
     tempbx = (USHORT)(tempeax & 0xFFFF);
d6432 1
a6432 1
  if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) tempbx--;
d6435 1
a6435 1
     else if(SiS_Pr->SiS_LCDResInfo != Panel_640x480)             tempbx = 1;
d6438 6
a6443 4
  temp = ((tempbx >> 8) & 0x07) << 3;
  temp = temp | ((tempecx >> 8) & 0x07);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x20,temp);
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x21,tempbx);
d6445 2
a6446 2
  tempecx >>= 16;   	                                  	/* BPLHCFACT  */
  if(!chkdclkfirst) {
d6450 2
a6451 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x22,temp);
d6453 1
a6453 1
  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x23,temp);
d6455 1
a6455 44
#ifdef SIS315H
  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
        if((islvds) || (SiS_Pr->SiS_VBInfo & VB_SIS301LV302LV)) {
           SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1e,0x20);
	}
     } else {
        if(islvds) {
           if(HwInfo->jChipType == SIS_740) {
              SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x03);
           } else {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1e,0x23);
           }
        }
     }
  }
#endif

#ifdef SIS300
  if(SiS_Pr->SiS_IF_DEF_TRUMPION) {
     int i;
     UCHAR TrumpMode13[4]   = { 0x01, 0x10, 0x2c, 0x00 };
     UCHAR TrumpMode10_1[4] = { 0x01, 0x10, 0x27, 0x00 };
     UCHAR TrumpMode10_2[4] = { 0x01, 0x16, 0x10, 0x00 };

     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x02,0xbf);
     for(i=0; i<5; i++) {
        SiS_SetTrumpionBlock(SiS_Pr, &SiS300_TrumpionData[crt2crtc][0]);
     }
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
        if(ModeNo == 0x13) {
	   for(i=0; i<4; i++) {
	      SiS_SetTrumpionBlock(SiS_Pr, &TrumpMode13[0]);
	   }
	} else if(ModeNo == 0x10) {
	   for(i=0; i<4; i++) {
	      SiS_SetTrumpionBlock(SiS_Pr, &TrumpMode10_1[0]);
	      SiS_SetTrumpionBlock(SiS_Pr, &TrumpMode10_2[0]);
	   }
	}
     }
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x02,0x40);
  }
#endif
d6465 1
a6465 1
     SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x44,~0x07,0x03);
d6467 2
a6468 2
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempax >>= 1;
d6482 2
a6483 2
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempax >>= 1;
d6491 2
a6492 2
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempeax >>= 1;
d6506 2
a6507 2
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempax >>= 1;
d6516 2
a6517 2
     if(SiS_Pr->SiS_LCDResInfo == Panel_640x480_2 ||
        SiS_Pr->SiS_LCDResInfo == Panel_640x480_3) tempax >>= 1;
d6559 1
d6562 1
a6562 1
/* Set Part 1 */
d6567 1
a6567 1
  UCHAR   *ROMAddr = HwInfo->pjVirtualRomBase;
d6569 1
a6569 1
  USHORT  pushbx=0, CRT1Index=0, modeflag, resinfo=0;
d6573 1
a6573 5

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
     SiS_SetGroup1_LVDS(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
     return;
  }
d6585 8
a6592 1
  SiS_SetCRT2Offset(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
d6594 1
a6594 1
  if( ! ((HwInfo->jChipType >= SIS_315H) &&
d6596 1
a6596 1
         (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ) {
d6598 8
a6605 1
     if(HwInfo->jChipType < SIS_315H ) {
d6607 1
a6607 1
  	SiS_SetCRT2FIFO_300(SiS_Pr, ModeNo, HwInfo);
d6609 1
a6609 1
     } else {
d6611 1
a6611 1
        SiS_SetCRT2FIFO_310(SiS_Pr, HwInfo);
d6613 3
a6615 1
     }
d6617 1
a6617 1
     /* 1. Horizontal setup */
d6619 1
a6619 1
     if(HwInfo->jChipType < SIS_315H ) {
d6623 2
a6624 2
    	temp = (SiS_Pr->SiS_VGAHT - 1) & 0x0FF;   		  /* BTVGA2HT 0x08,0x09 */
    	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x08,temp);              /* CRT2 Horizontal Total */
d6626 2
a6627 2
    	temp = (((SiS_Pr->SiS_VGAHT - 1) & 0xFF00) >> 8) << 4;
    	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0x0f,temp);    /* CRT2 Horizontal Total Overflow [7:4] */
d6629 2
a6630 2
    	temp = (SiS_Pr->SiS_VGAHDE + 12) & 0x0FF;                 /* BTVGA2HDEE 0x0A,0x0C */
    	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0A,temp);              /* CRT2 Horizontal Display Enable End */
d6632 12
a6643 5
	pushbx = SiS_Pr->SiS_VGAHDE + 12;                         /* bx  BTVGA2HRS 0x0B,0x0C */
    	tempcx = (SiS_Pr->SiS_VGAHT - SiS_Pr->SiS_VGAHDE) >> 2;
    	tempbx = pushbx + tempcx;
    	tempcx <<= 1;
    	tempcx += tempbx;
d6645 24
a6668 33
    	if(SiS_Pr->SiS_VBType & VB_SISVB) {

	   if(SiS_Pr->UseCustomMode) {
	      tempbx = SiS_Pr->CHSyncStart + 12;
	      tempcx = SiS_Pr->CHSyncEnd + 12;
	   }

      	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
	      unsigned char cr4, cr14, cr5, cr15;
	      if(SiS_Pr->UseCustomMode) {
	         cr4  = SiS_Pr->CCRT1CRTC[4];
		 cr14 = SiS_Pr->CCRT1CRTC[14];
		 cr5  = SiS_Pr->CCRT1CRTC[5];
		 cr15 = SiS_Pr->CCRT1CRTC[15];
	      } else {
	         cr4  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[4];
		 cr14 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14];
		 cr5  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[5];
		 cr15 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[15];
	      }
              tempbx = ((cr4 | ((cr14 & 0xC0) << 2)) - 1) << 3;
              tempcx = (((cr5 & 0x1F) | ((cr15 & 0x04) << (6-2))) - 1) << 3;
      	   }

    	   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
      	      tempbx = 1040;
      	      tempcx = 1044;
    	   }

	}

    	temp = tempbx & 0x00FF;
    	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0B,temp);              /* CRT2 Horizontal Retrace Start */
d6670 2
d6674 1
a6674 1
     } else {
d6678 13
a6690 13
	tempcx = SiS_Pr->SiS_VGAHT;				  /* BTVGA2HT 0x08,0x09 */
	if(modeflag & HalfDCLK) {
	   if(SiS_Pr->SiS_VBType & VB_SISVB) {
	      tempcx >>= 1;
	   } else {
	      tempax = SiS_Pr->SiS_VGAHDE >> 1;
	      tempcx = SiS_Pr->SiS_HT - SiS_Pr->SiS_HDE + tempax;
	      if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
	         tempcx = SiS_Pr->SiS_HT - tempax;
	      }
	   }
	}
	tempcx--;
d6692 2
a6693 2
	temp = tempcx & 0xff;
	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x08,temp);              /* CRT2 Horizontal Total */
d6695 2
a6696 2
	temp = ((tempcx & 0xff00) >> 8) << 4;
	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0x0F,temp);    /* CRT2 Horizontal Total Overflow [7:4] */
d6698 9
a6706 9
	tempcx = SiS_Pr->SiS_VGAHT;				  /* BTVGA2HDEE 0x0A,0x0C */
	tempbx = SiS_Pr->SiS_VGAHDE;
	tempcx -= tempbx;
	tempcx >>= 2;
	if(modeflag & HalfDCLK) {
	   tempbx >>= 1;
	   tempcx >>= 1;
	}
	tempbx += 16;
d6708 2
a6709 2
	temp = tempbx & 0xff;
	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0A,temp);              /* CRT2 Horizontal Display Enable End */
d6711 17
a6727 4
	pushbx = tempbx;
	tempcx >>= 1;
	tempbx += tempcx;
	tempcx += tempbx;
d6729 8
a6736 1
	if(SiS_Pr->SiS_VBType & VB_SISVB) {
d6738 29
a6766 49
	   if(HwInfo->jChipType >= SIS_661) {
	      if((SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) ||
		 (SiS_Pr->SiS_LCDResInfo == Panel_1280x1024)) {
		 if(resinfo == SIS_RI_1280x1024) {
		    tempcx = 0x30;
		 } else if(resinfo == SIS_RI_1600x1200) {
		    tempcx = 0xff;
		 }
	      }
	   }

	   if(SiS_Pr->UseCustomMode) {
	      tempbx = SiS_Pr->CHSyncStart + 16;
	      tempcx = SiS_Pr->CHSyncEnd + 16;
	      tempax = SiS_Pr->SiS_VGAHT;
	      if(modeflag & HalfDCLK) tempax >>= 1;
	      tempax--;
	      if(tempcx > tempax)  tempcx = tempax;
	   }

           if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
	      unsigned char cr4, cr14, cr5, cr15;
	      if(SiS_Pr->UseCustomMode) {
	         cr4  = SiS_Pr->CCRT1CRTC[4];
		 cr14 = SiS_Pr->CCRT1CRTC[14];
		 cr5  = SiS_Pr->CCRT1CRTC[5];
		 cr15 = SiS_Pr->CCRT1CRTC[15];
	      } else {
	         cr4  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[4];
		 cr14 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14];
		 cr5  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[5];
		 cr15 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[15];
	      }
              tempbx = ((cr4 | ((cr14 & 0xC0) << 2)) - 3) << 3; 		/* (VGAHRS-3)*8 */
              tempcx = (((cr5 & 0x1f) | ((cr15 & 0x04) << (5-2))) - 3) << 3; 	/* (VGAHRE-3)*8 */
	      tempcx &= 0x00FF;
	      tempcx |= (tempbx & 0xFF00);
              tempbx += 16;
              tempcx += 16;
	      tempax = SiS_Pr->SiS_VGAHT;
	      if(modeflag & HalfDCLK) tempax >>= 1;
	      tempax--;
	      if(tempcx > tempax)  tempcx = tempax;
           }

	   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
      	      tempbx = 1040;
      	      tempcx = 1044;   /* HWCursor bug! */
      	   }
d6768 1
a6768 1
        }
d6770 2
a6771 2
	temp = tempbx & 0xff;
	SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0B,temp);              /* CRT2 Horizontal Retrace Start */
d6774 1
a6774 1
     }  /* 315/330 series */
d6776 6
a6781 6
     tempax = tempbx & 0xFF00;
     tempbx = pushbx;
     tempbx = (tempbx & 0x00FF) | ((tempbx & 0xFF00) << 4);
     tempax |= (tempbx & 0xFF00);
     temp = (tempax & 0xFF00) >> 8;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0C,temp);
d6783 2
a6784 2
     temp = tempcx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0D,temp);                 /* CRT2 Horizontal Retrace End */
d6786 1
a6786 1
     /* 2. Vertical setup */
d6788 2
a6789 2
     tempcx = SiS_Pr->SiS_VGAVT - 1;
     temp = tempcx & 0x00FF;
d6791 10
a6800 7
     if(HwInfo->jChipType < SIS_661) {
        if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
	   if(HwInfo->jChipType < SIS_315H) {
	      if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	         if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSVIDEO | SetCRT2ToAVIDEO)) {
	            temp--;
	         }
d6802 3
a6804 5
	   } else {
 	      temp--;
           }
        } else if(HwInfo->jChipType >= SIS_315H) {
	   temp--;
d6806 1
a6806 6
     }
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0E,temp);                 /* CRT2 Vertical Total */

     tempbx = SiS_Pr->SiS_VGAVDE - 1;
     temp = tempbx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x0F,temp);                 /* CRT2 Vertical Display Enable End */
d6808 23
a6830 21
     temp = ((tempbx & 0xFF00) << 3) >> 8;
     temp |= ((tempcx & 0xFF00) >> 8);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x12,temp);                 /* Overflow (and HWCursor Test Mode) */

     if((HwInfo->jChipType >= SIS_315H) && (HwInfo->jChipType < SIS_661)) {
        tempbx++;
   	tempax = tempbx;
	tempcx++;
	tempcx -= tempax;
	tempcx >>= 2;
	tempbx += tempcx;
	if(tempcx < 4) tempcx = 4;
	tempcx >>= 2;
	tempcx += tempbx;
	tempcx++;
     } else {
  	tempbx = (SiS_Pr->SiS_VGAVT + SiS_Pr->SiS_VGAVDE) >> 1;                 /*  BTVGA2VRS     0x10,0x11   */
  	tempcx = ((SiS_Pr->SiS_VGAVT - SiS_Pr->SiS_VGAVDE) >> 4) + tempbx + 1;  /*  BTVGA2VRE     0x11        */
     }

     if(SiS_Pr->SiS_VBType & VB_SISVB) {
d6832 1
a6832 4
	if(SiS_Pr->UseCustomMode) {
	   tempbx = SiS_Pr->CVSyncStart;
	   tempcx = (tempcx & 0xFF00) | (SiS_Pr->CVSyncEnd & 0x00FF);
	}
a6833 2
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {
	   unsigned char cr8, cr7, cr13, cr9;
d6835 3
a6837 18
	      cr8  = SiS_Pr->CCRT1CRTC[8];
	      cr7  = SiS_Pr->CCRT1CRTC[7];
	      cr13 = SiS_Pr->CCRT1CRTC[13];
	      cr9  = SiS_Pr->CCRT1CRTC[9];
	   } else {
	      cr8  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[8];
	      cr7  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[7];
	      cr13 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[13];
	      cr9  = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[9];
	   }
      	   tempbx = cr8;
      	   if(cr7 & 0x04)  tempbx |= 0x0100;
      	   if(cr7 & 0x80)  tempbx |= 0x0200;
      	   if(cr13 & 0x08) tempbx |= 0x0400;
      	   tempcx = (tempcx & 0xFF00) | (cr9 & 0x00FF);
    	}
     }
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x10,tempbx);               /* CRT2 Vertical Retrace Start */
d6839 26
a6864 3
     temp = ((tempbx & 0xFF00) >> 8) << 4;
     temp |= (tempcx & 0x000F);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x11,temp);                 /* CRT2 Vert. Retrace End; Overflow; "Enable CRTC Check" */
d6866 1
a6866 1
     /* 3. Panel delay compensation */
d6868 1
a6868 1
     if(HwInfo->jChipType < SIS_315H) {
d6872 2
a6873 2
	if(SiS_Pr->SiS_VBType & VB_SISVB) {
	   temp = 0x20;
d6875 44
a6918 44
	   if(HwInfo->jChipType == SIS_300) {
	      temp = 0x10;
	      if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)  temp = 0x2c;
	      if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) temp = 0x20;
	   }
	   if(SiS_Pr->SiS_VBType & VB_SIS301) {
	      if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) temp = 0x20;
	   }
	   if(SiS_Pr->SiS_LCDResInfo == Panel_1280x960)     temp = 0x24;
	   if(SiS_Pr->SiS_LCDResInfo == Panel_Custom)       temp = 0x2c;
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) 		temp = 0x08;
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
      	      if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) 	temp = 0x2c;
      	      else 					temp = 0x20;
    	   }
	   if(SiS_Pr->SiS_UseROM) {
	      if(ROMAddr[0x220] & 0x80) {
	         if(SiS_Pr->SiS_VBInfo & SetCRT2ToTVNoYPbPrHiVision)
	   	    temp = ROMAddr[0x221];
		 else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision)
		    temp = ROMAddr[0x222];
		 else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024)
		    temp = ROMAddr[0x223];
		 else
		    temp = ROMAddr[0x224];
		 temp &= 0x3c;
	      }
	   }
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	      if(SiS_Pr->PDC != -1)  temp = SiS_Pr->PDC & 0x3c;
	   }

	} else {
	   temp = 0x20;
	   if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
	      if(SiS_Pr->SiS_LCDResInfo == Panel_640x480) temp = 0x04;
	   }
	   if(SiS_Pr->SiS_UseROM) {
	      if(ROMAddr[0x220] & 0x80) {
	         temp = ROMAddr[0x220] & 0x3c;
	      }
	   }
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	      if(SiS_Pr->PDC != -1) temp = SiS_Pr->PDC & 0x3c;
a6919 1
        }
d6921 1
a6921 1
    	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,~0x3C,temp);   /* Panel Link Delay Compensation; (Software Command Reset; Power Saving) */
d6925 1
a6925 1
     } else {
d6929 1
a6929 1
        if(HwInfo->jChipType < SIS_661) {
d6931 1
a6931 1
	   if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
d6933 2
a6934 2
	      if(HwInfo->jChipType == SIS_740) temp = 0x03;
	      else 		               temp = 0x00;
d6936 6
a6941 5
	      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) temp = 0x0a;
	      tempbl = 0xF0;
	      if(HwInfo->jChipType == SIS_650) {
		 if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
		    if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) tempbl = 0x0F;
a6942 1
	      }
d6944 6
a6949 5
	      if(SiS_Pr->SiS_IF_DEF_DSTN || SiS_Pr->SiS_IF_DEF_FSTN) {
		 temp = 0x08;
		 tempbl = 0;
		 if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
		    if(ROMAddr[0x13c] & 0x80) tempbl = 0xf0;
d6951 2
d6955 1
a6955 4
	      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,tempbl,temp);	    /* Panel Link Delay Compensation */
	   }

	} /* < 661 */
d6957 4
a6960 4
    	tempax = 0;
    	if (modeflag & DoubleScanMode) tempax |= 0x80;
    	if (modeflag & HalfDCLK)       tempax |= 0x40;
    	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2C,0x3f,tempax);
d6964 3
a6966 1
     }
d6968 1
a6968 1
  }  /* Slavemode */
a6969 2
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
d6971 11
a6981 7
	SiS_SetGroup1_LVDS(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
     } else if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
    	SiS_SetGroup1_301(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
     }
  } else {
     if(HwInfo->jChipType < SIS_315H) {
	SiS_SetGroup1_LVDS(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
d6983 5
a6987 4
	if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
           if((!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) || (SiS_Pr->SiS_VBInfo & SetInSlaveMode)) {
    	      SiS_SetGroup1_LVDS(SiS_Pr, ModeNo,ModeIdIndex, HwInfo,RefreshRateTableIndex);
           }
d6989 11
a6999 1
	   SiS_SetGroup1_LVDS(SiS_Pr, ModeNo,ModeIdIndex, HwInfo,RefreshRateTableIndex);
d7001 1
d7003 1
a7003 1
  }
d7014 1
d7016 1
a7016 1
   USHORT       a, b, p = 0;
d7025 28
a7052 4
   if(a < b) {
      tableptr = SiS_Part2CLVX_1;
   } else if(a == b) {
      tableptr = SiS_Part2CLVX_2;
d7054 5
a7058 2
      if(SiS_Pr->SiS_TVMode & TVSetPAL) {
	 tableptr = SiS_Part2CLVX_4;
d7060 18
a7077 1
	 tableptr = SiS_Part2CLVX_3;
d7079 2
a7080 13
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) {
	 if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) 	tableptr = SiS_Part2CLVX_3;
	 else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) 	tableptr = SiS_Part2CLVX_3;
	 else 				         	tableptr = SiS_Part2CLVX_5;

      } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	 tableptr = SiS_Part2CLVX_6;
      }
      do {
	 if((tableptr[p] | tableptr[p+1] << 8) == a) break;
	 p += 0x42;
      } while((tableptr[p] | tableptr[p+1] << 8) != 0xffff);
      if((tableptr[p] | tableptr[p+1] << 8) == 0xffff) p -= 0x42;
a7081 2
   p += 2;
   return((UCHAR *)&tableptr[p]);
d7109 1
a7109 1
static BOOLEAN
d7114 2
a7115 3
  
  if(HwInfo->jChipType < SIS_315H) return FALSE;
  
d7117 1
a7117 1
     (*ResIndex) = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
d7119 3
a7121 1
     (*ResIndex) = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d7123 2
a7124 2
  (*ResIndex) &= 0x3f;
  (*CRT2Index) = 0;
d7126 17
a7142 3
  if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
     if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) {
        (*CRT2Index) = 200;
d7146 2
a7147 6
  if(SiS_Pr->SiS_CustomT == CUT_ASUSA2H_2) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
        if(SiS_Pr->SiS_SetFlag & LCDVESATiming) (*CRT2Index) = 206;
     }
  }
  return(((*CRT2Index) != 0));
a7151 59
static void
SiS_Group2LCDSpecial(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo, USHORT crt2crtc)
{
   USHORT tempcx;
   const UCHAR atable[] = {
       0xc3,0x9e,0xc3,0x9e,0x02,0x02,0x02,
       0xab,0x87,0xab,0x9e,0xe7,0x02,0x02
   };

   if(!SiS_Pr->UseCustomMode) {
      if( ( ( (HwInfo->jChipType == SIS_630) ||
              (HwInfo->jChipType == SIS_730) ) &&
            (HwInfo->jChipRevision > 2) )  &&
          (SiS_Pr->SiS_LCDResInfo == Panel_1024x768) &&
          (!(SiS_Pr->SiS_SetFlag & LCDVESATiming))  &&
          (!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) ) {
         if(ModeNo == 0x13) {
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,0xB9);
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,0xCC);
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xA6);
         } else {
            if((crt2crtc & 0x3F) == 4) {
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x2B);
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x13);
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,0xE5);
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,0x08);
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xE2);
            }
         }
      }

      if(HwInfo->jChipType < SIS_315H) {
         if(SiS_Pr->SiS_LCDTypeInfo == 0x0c) {
            crt2crtc &= 0x1f;
            tempcx = 0;
            if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
               if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
                  tempcx += 7;
               }
            }
            tempcx += crt2crtc;
            if(crt2crtc >= 4) {
               SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,0xff);
            }

            if(!(SiS_Pr->SiS_VBInfo & SetNotSimuMode)) {
               if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
                  if(crt2crtc == 4) {
                     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x01,0x28);
                  }
               }
            }
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x02,0x18);
            SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,atable[tempcx]);
         }
      }
   }
}

d7264 1
a7264 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) {
d7267 1
a7267 1
	   /* Not always for LV, see SetGrp2 */
d7303 1
a7303 1
  USHORT      push1, push2, modeflag, crt2crtc, bridgeoffset;
d7310 7
d7318 1
a7324 3
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     crt2crtc = 0;
d7326 7
a7332 2
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     crt2crtc = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
d7481 4
a7484 2
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1B,(tempcx & 0xff));
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1D,0xF0,((tempcx >> 8) & 0x0f));
d7494 2
a7495 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x22,0x0F,((tempcx << 4) & 0xf0));
d7497 1
a7497 1
  tempbx = TimingPoint[j] | (TimingPoint[j+1] << 8);
d7500 2
a7501 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x24,tempbx);
d7514 1
a7514 1
  tempcx += (TimingPoint[j] | (TimingPoint[j+1] << 8));
d7522 2
a7523 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x2A,0x0F,((tempcx << 4) & 0xf0));
d7529 2
a7530 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x2D,0x0F,((tempcx << 4) & 0xf0));
d7536 2
a7537 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2E,tempcx);
d7573 3
a7575 1
	      if(ModeNo == 0x03) temp++;
d7584 1
a7584 1
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSVIDEO | SetCRT2ToAVIDEO)) {
d7586 1
a7586 1
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToAVIDEO) temp |= 0x20;
d7590 11
d7609 2
a7610 2
     if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302LV | VB_SIS302ELV)) {  /* Why not 301B/LV? */
        if(HwInfo->jChipType >= SIS_661) {
a7614 8
	} else {
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
              if((SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
                 (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) ||
	         (SiS_Pr->SiS_LCDResInfo == Panel_1680x1050)) {
                 SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x10,0x60);
	      }
           }
d7621 3
a7623 1
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x47,tempbx);
d7682 4
a7685 2
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x4B,tempbx);
     SiS_SetReg(SiS_Pr->SiS_Part2Port,0x4C,tempcx);
d7729 2
a7730 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x2C,tempbx);
d7735 1
a7735 1
  if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
d7750 2
a7751 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x03,tempbx);
d7756 2
a7757 1
  SiS_SetReg(SiS_Pr->SiS_Part2Port,0x19,tempcx);
d7768 25
a7792 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1A,0x0f,temp);
d7800 127
a7926 3
#ifdef SIS315H
  if(SiS_GetCRT2Part2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex,
                          			&CRT2Index, &resindex, HwInfo)) {
d7928 20
a7947 3
        case 200: CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_1;   break;
	case 206: CRT2Part2Ptr = SiS310_CRT2Part2_Asus1024x768_3;    break;
	default:  CRT2Part2Ptr = SiS_Pr->SiS_CRT2Part2_1024x768_3;   break;
d7965 3
d7969 2
a7970 8
      
  } else {
#endif
	  
    /* Checked for 1024x768, 1280x1024, 1400x1050, 1600x1200 */
    /*             Clevo dual-link 1024x768 */
    /* 		   Compaq 1280x1024 has HT 1696 sometimes (calculation OK, if given HT is correct)  */
    /*		   Acer: OK, but uses different setting for VESA timing at 640/800/1024 and 640x400 */
d7973 8
a7980 13
       if((SiS_Pr->SiS_LCDInfo & LCDPass11) || (SiS_Pr->PanelYRes == SiS_Pr->SiS_VDE)) {
          tempbx = SiS_Pr->SiS_VDE - 1;
          tempcx = SiS_Pr->SiS_VT - 1;
       } else {
          tempbx = SiS_Pr->SiS_VDE + ((SiS_Pr->PanelYRes - SiS_Pr->SiS_VDE) / 2);
	  tempcx = SiS_Pr->SiS_VT - ((SiS_Pr->PanelYRes - SiS_Pr->SiS_VDE) / 2);
       }
    } else {
       tempbx = SiS_Pr->PanelYRes;
       tempcx = SiS_Pr->SiS_VT;
       tempax = 1;
       if(SiS_Pr->PanelYRes != SiS_Pr->SiS_VDE) {
          tempax = SiS_Pr->PanelYRes;
d7982 3
a7984 2
          if(SiS_Pr->PanelYRes < SiS_Pr->SiS_VDE) {
             tempax = tempcx = 0;
d8000 4
a8003 2
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x05,tempcx);	/* lcdvdes  */
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x06,tempbx);	/* lcdvdee  */
d8009 1
d8011 4
a8014 30
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       tempax = SiS_Pr->PanelYRes;
    }
    tempcx = (SiS_Pr->SiS_VT - tempax) >> 4;
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       if(SiS_Pr->PanelYRes != SiS_Pr->SiS_VDE) {
	  tempcx = (SiS_Pr->SiS_VT - tempax) / 10;
       }
    }

    tempbx = ((SiS_Pr->SiS_VT + SiS_Pr->SiS_VDE) >> 1) - 1;
    if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
       if(SiS_Pr->PanelYRes != SiS_Pr->SiS_VDE) {
          if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) { /* ? */
             tempax = SiS_Pr->SiS_VT - SiS_Pr->PanelYRes;
	     if(tempax % 4) { tempax >>= 2; tempax++; }
	     else           { tempax >>= 2;           }
             tempbx -= (tempax - 1);
	  } else tempbx -= 10;
       }
    }
    if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
       tempbx++;
       if((!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) || (crt2crtc == 6)) {
          if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
	     tempbx = 770;
	     tempcx = 3;
	  }
       }
    }
d8016 1
a8016 1
    /* non-expanding: lcdvrs = ((VT + VDE) / 2) - 10 */
d8026 2
a8027 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,tempbx);	    /* lcdvrs */
d8044 2
d8047 35
a8081 2
    SiS_Group2LCDSpecial(SiS_Pr, HwInfo, ModeNo, crt2crtc);
#endif
d8083 10
a8092 10
    bridgeoffset = 7;
    if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)          bridgeoffset += 2;
    if(SiS_Pr->SiS_VBType & (VB_SIS301C | VB_SIS302ELV)) bridgeoffset++;
    if(SiS_IsDualLink(SiS_Pr, HwInfo))        		 bridgeoffset++;

    temp = 0;
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       if(SiS_Pr->PanelXRes != SiS_Pr->SiS_HDE) {
          temp = SiS_Pr->SiS_HT - ((SiS_Pr->PanelXRes - SiS_Pr->SiS_HDE) / 2);
	  if(SiS_IsDualLink(SiS_Pr, HwInfo)) temp >>= 1;
d8095 1
a8095 4
    temp += bridgeoffset;
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1F,temp);  	    /* lcdhdes[7:0] */
    temp = (temp >> 4) & 0xf0;
    SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x20,0x0F,temp);  /* lcdhdes [11:8] */
d8098 1
a8098 7
    tempax = tempbx = SiS_Pr->SiS_HDE;
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       if(SiS_Pr->PanelXRes != SiS_Pr->SiS_HDE) {
          tempax = SiS_Pr->PanelXRes;
          tempbx = SiS_Pr->PanelXRes - ((SiS_Pr->PanelXRes - SiS_Pr->SiS_HDE) / 2);
       }
    }
a8101 1
       tempax >>= 1;		
d8103 7
d8115 3
a8117 4
    tempbx += bridgeoffset;

    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x23,tempbx);	    /* lcdhdee */
    temp = (tempbx >> 8) & 0x0f;
d8120 6
a8125 1
    tempcx = (tempcx - tempax) >> 2;
a8129 8
    if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
          if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
             if(SiS_Pr->SiS_HDE == 1280) tempbx = (tempbx & 0xff00) | 0x47;
	  }
       }
    }

d8131 4
a8134 3
       tempbx = SiS_Pr->CHSyncStart;
       if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
       tempbx += bridgeoffset;
d8141 9
a8149 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1C,tempbx);	    /* lcdhrs */
a8153 1

a8154 3
    if((SiS_Pr->SiS_LCDInfo & DontExpandLCD) && (!(SiS_Pr->SiS_LCDInfo & LCDPass11))) {
       if(SiS_Pr->PanelXRes != SiS_Pr->SiS_HDE) tempcx >>= 2;
    }
d8158 4
a8161 3
       tempbx = SiS_Pr->CHSyncEnd;
       if(SiS_IsDualLink(SiS_Pr, HwInfo)) tempbx >>= 1;
       tempbx += bridgeoffset;
d8168 2
a8169 1
    SiS_SetReg(SiS_Pr->SiS_Part2Port,0x21,tempbx);	    /* lcdhre */
d8174 2
a8175 1
    SiS_Set300Part2Regs(SiS_Pr, HwInfo, ModeIdIndex, RefreshRateTableIndex, ModeNo);
d8177 2
a8178 3
#ifdef SIS315H
  } /* CRT2-LCD from table */
#endif  
a8195 2
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
d8197 5
a8201 1
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d8265 1
a8265 22
SiS_ShiftXPos(SiS_Private *SiS_Pr, int shift)
{
   USHORT temp, temp1, temp2;

   temp1 = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x1f);
   temp2 = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x20);
   temp = (USHORT)((int)((temp1 | ((temp2 & 0xf0) << 4))) + shift);
   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x1f,temp);
   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x20,0x0f,((temp >> 4) & 0xf0));
   temp = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x2b) & 0x0f;
   temp = (USHORT)((int)(temp) + shift);
   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x2b,0xf0,(temp & 0x0f));
   temp1 = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x43);
   temp2 = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x42);
   temp = (USHORT)((int)((temp1 | ((temp2 & 0xf0) << 4))) + shift);
   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x43,temp);
   SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x42,0x0f,((temp >> 4) & 0xf0));
}

static void
SiS_SetGroup4_C_ELV(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                    USHORT ModeNo, USHORT ModeIdIndex)
d8267 1
a8267 1
   USHORT temp, temp1, resinfo = 0;
a8270 4
   if(ModeNo > 0x13) {
      resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
   }

d8277 12
a8288 1
         SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x25,0xf8);
a8289 5
      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x0f,0xfb);
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p)      temp = 0x0000;
      else if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) temp = 0x0002;
      else if(SiS_Pr->SiS_TVMode & TVSetHiVision)  temp = 0x0400;
      else					   temp = 0x0402;
d8291 4
a8294 5
         temp1 = 0;
	 if(SiS_Pr->SiS_TVMode & TVAspect43) temp1 = 4;
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0f,0xfb,temp1);
	 if(SiS_Pr->SiS_TVMode & TVAspect43LB) temp |= 0x01;
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0x7c,(temp & 0xff));
d8299 1
a8299 1
	 SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x26,0xf8,(temp & 0xff));
a8301 14

      if(HwInfo->jChipType >= SIS_661) { 		/* ? */
         if(SiS_Pr->SiS_TVMode & TVAspect43) {
            if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) {
	       if(resinfo == SIS_RI_1024x768) {
	          SiS_ShiftXPos(SiS_Pr, 97);
	       } else {
	          SiS_ShiftXPos(SiS_Pr, 111);
	       }
	    } else if(SiS_Pr->SiS_TVMode & TVSetHiVision) {
	       SiS_ShiftXPos(SiS_Pr, 136);
	    }
         }
      }
d8343 1
a8353 3
  } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     resinfo = 0;
d8355 7
a8361 2
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
d8400 2
a8401 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x14,tempbx);
d8403 1
a8403 1
  temp2 = (tempbx >> 1) & 0x0080;
d8406 2
a8407 1
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x16,tempcx);
d8409 2
a8410 1
  temp2 |= (((tempcx & 0xFF00) >> 8) << 3) & 0x00ff;
d8413 4
a8416 2
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) tempcx -= 5;
  SiS_SetReg(SiS_Pr->SiS_Part4Port,0x17,tempcx);
d8418 1
a8418 1
  temp = temp2 | (tempcx >> 8);
d8422 1
a8422 1
  if(modeflag & HalfDCLK) tempbx >>= 1;
d8459 1
a8459 1
     if(SiS_Pr->SiS_LCDResInfo != Panel_1280x1024)
d8591 1
d8601 1
a8601 1
        SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x20);
d8619 5
a8623 2
  if(ModeNo <= 0x13) modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  else               modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d8631 1
a8631 3
                          &ResIndex, &DisplayType))) {
     return;
  }
d8639 10
a8648 10
    case 1 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_1_H;         break;
    case 2 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_2;           break;
    case 3 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT1800x600_2_H;         break;
    case 4 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1;          break;
    case 5 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_1_H;        break;
    case 6 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_2;          break;
    case 7 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11024x768_2_H;        break;
    case 8 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_1;         break;
    case 9 : LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_1_H;       break;
    case 10: LVDSCRT1Ptr = SiS_Pr->SiS_LVDSCRT11280x1024_2;         break;
d8687 1
a8687 1
  SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);
d8722 6
d8742 1
a8742 1
  if((SiS_Pr->SiS_LCDResInfo == Panel_640x480) || (SiS_Pr->SiS_LCDInfo & LCDPass11)) {
d8759 1
a8759 1
     if(SiS_Pr->SiS_UseROM) {
d8818 10
a8827 10
     case  0: CHTVRegData = SiS_Pr->SiS_CHTVReg_UNTSC; break;
     case  1: CHTVRegData = SiS_Pr->SiS_CHTVReg_ONTSC; break;
     case  2: CHTVRegData = SiS_Pr->SiS_CHTVReg_UPAL;  break;
     case  3: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPAL;  break;
     case  4: CHTVRegData = SiS_Pr->SiS_CHTVReg_UPALM; break;
     case  5: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPALM; break;
     case  6: CHTVRegData = SiS_Pr->SiS_CHTVReg_UPALN; break;
     case  7: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPALN; break;
     case  8: CHTVRegData = SiS_Pr->SiS_CHTVReg_SOPAL; break;
     default: CHTVRegData = SiS_Pr->SiS_CHTVReg_OPAL;  break;
d9099 1
a9099 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d9102 3
a9104 3
     } else if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
               (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
	       (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200)) {
d9109 1
a9109 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d9111 3
a9113 3
     } else if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
               (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
	       (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200)) {
d9149 19
a9167 11
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)       tableptr = table1024_740;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) tableptr = table1280_740;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) tableptr = table1400_740;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) tableptr = table1600_740;
     else return;
  } else {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)       tableptr = table1024_650;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) tableptr = table1280_650;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) tableptr = table1400_650;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) tableptr = table1600_650;
     else return;
d9174 1
a9174 1
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) return;
d9176 2
a9177 2
        if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) return;
	if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) return;
d9179 1
a9179 1
        if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) return;
d9183 5
a9187 3
  if(HwInfo->jChipType == SIS_740) tempbh = 0x0d;
  else     			   tempbh = 0x0c;

d9574 1
a9574 2
   /* Set up Panel Link for LVDS and LCDA */
   SiS_Pr->SiS_LCDHDES = SiS_Pr->SiS_LCDVDES = 0;
d9579 2
d9608 1
a9608 1
	   SiS_SetGroup4_C_ELV(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
a9611 2
	   SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex, HwInfo);

d9614 1
a9614 1
	      if(SiS_Pr->SiS_LCDResInfo != Panel_640x480) {
d9629 4
a9632 4
        SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex, HwInfo);

        if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
    	   SiS_ModCRT1CRTC(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex,HwInfo);
d9641 1
a9641 1
#ifdef SIS315H
d9643 1
a9643 1
#endif
d9647 2
a9648 1
       		 SiS_SetCHTVReg(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex);
d9659 1
a9659 1
	    if((SiS_Pr->SiS_UseROM) && (SiS_Pr->SiS_UseOEM == -1)) {
d9696 1
a9696 1
         SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x40);
a9766 57
#ifdef SIS300
static UCHAR *
SiS_SetTrumpBlockLoop(SiS_Private *SiS_Pr, UCHAR *dataptr)
{
  int i, j, num;
  USHORT tempah,temp;
  UCHAR *mydataptr;

  for(i=0; i<20; i++) {				/* Do 20 attempts to write */
     mydataptr = dataptr;
     num = *mydataptr++;
     if(!num) return mydataptr;
     if(i) {
        SiS_SetStop(SiS_Pr);
	SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT*2);
     }
     if(SiS_SetStart(SiS_Pr)) continue;		/* Set start condition */
     tempah = SiS_Pr->SiS_DDC_DeviceAddr;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write DAB (S0=0=write) */
     if(temp) continue;				/*    (ERROR: no ack) */
     tempah = *mydataptr++;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	/* Write register number */
     if(temp) continue;				/*    (ERROR: no ack) */
     for(j=0; j<num; j++) {
        tempah = *mydataptr++;
        temp = SiS_WriteDDC2Data(SiS_Pr,tempah);/* Write DAB (S0=0=write) */
	if(temp) break;
     }
     if(temp) continue;
     if(SiS_SetStop(SiS_Pr)) continue;
     return mydataptr;
  }
  return NULL;
}

static BOOLEAN
SiS_SetTrumpionBlock(SiS_Private *SiS_Pr, UCHAR *dataptr)
{
  SiS_Pr->SiS_DDC_DeviceAddr = 0xF0;  		/* DAB (Device Address Byte) */
  SiS_Pr->SiS_DDC_Index = 0x11;			/* Bit 0 = SC;  Bit 1 = SD */
  SiS_Pr->SiS_DDC_Data  = 0x02;              	/* Bitmask in IndexReg for Data */
  SiS_Pr->SiS_DDC_Clk   = 0x01;              	/* Bitmask in IndexReg for Clk */
  SiS_SetupDDCN(SiS_Pr);

  SiS_SetSwitchDDC2(SiS_Pr);

  while(*dataptr) {
     dataptr = SiS_SetTrumpBlockLoop(SiS_Pr, dataptr);
     if(!dataptr) return FALSE;
  }
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "Trumpion block success\n");
#endif
  return TRUE;
}
#endif

a9801 14
#ifdef SIS300
/* Write Trumpion register */
void
SiS_SetTrumpReg(SiS_Private *SiS_Pr, USHORT tempbx)
{
  SiS_Pr->SiS_DDC_DeviceAddr = 0xF0;  		/* DAB (Device Address Byte) */
  SiS_Pr->SiS_DDC_Index = 0x11;			/* Bit 0 = SC;  Bit 1 = SD */
  SiS_Pr->SiS_DDC_Data  = 0x02;              	/* Bitmask in IndexReg for Data */
  SiS_Pr->SiS_DDC_Clk   = 0x01;              	/* Bitmask in IndexReg for Clk */
  SiS_SetupDDCN(SiS_Pr);
  SiS_SetChReg(SiS_Pr, tempbx, 0);
}
#endif

d9837 1
d9844 4
a9847 4
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 1)
     SiS_SetCH700x(SiS_Pr,tempbx);
  else
     SiS_SetCH701x(SiS_Pr,tempbx);
a9878 15
#ifdef SIS300
/* Read from Trumpion */
USHORT
SiS_GetTrumpReg(SiS_Private *SiS_Pr, USHORT tempbx)
{
  SiS_Pr->SiS_DDC_DeviceAddr = 0xF0;	/* DAB */
  SiS_Pr->SiS_DDC_Index = 0x11;		/* Bit 0 = SC;  Bit 1 = SD */
  SiS_Pr->SiS_DDC_Data  = 0x02;         /* Bitmask in IndexReg for Data */
  SiS_Pr->SiS_DDC_Clk   = 0x01;         /* Bitmask in IndexReg for Clk */
  SiS_SetupDDCN(SiS_Pr);
  SiS_Pr->SiS_DDC_ReadAddr = tempbx;
  return(SiS_GetChReg(SiS_Pr,0));
}
#endif

d9931 4
a9934 4
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 1)
     return(SiS_GetCH700x(SiS_Pr, tempbx));
  else
     return(SiS_GetCH701x(SiS_Pr, tempbx));
a10320 2
   SiS_Pr->CP_PreferredX = SiS_Pr->CP_PreferredY = 0;
   SiS_Pr->CP_PreferredIndex = -1;
a10414 1
#if 0	    /* Treat as custom */
a10420 1
#endif
d10458 3
a10460 5
		   if(pSiS->VBFlags & VB_301C) {
	              if(yres == 1200) {
	                 paneltype = Panel310_1600x1200;
		         checkexpand = TRUE;
		      }
a10585 4
		  if((SiS_Pr->CP_PreferredX == xres) && (SiS_Pr->CP_PreferredY == yres)) {
	             SiS_Pr->CP_PreferredIndex = i;
	          }

a10665 1
#if 0
a10671 1
#endif
d10678 10
d10712 3
a10714 5
	        if(pSiS->VBFlags & VB_301C) {
	           if(yres == 1200) {
	              paneltype = Panel310_1600x1200;
		      checkexpand = TRUE;
		   }
a10815 4
	       if((SiS_Pr->CP_MaxX == xres) && (SiS_Pr->CP_MaxY == yres)) {
	          SiS_Pr->CP_PreferredIndex = i;
	       }

d10870 3
a10873 4
       SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x36,0xf0,paneltype);
       cr37 &= 0xf1;
       SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,0xf3,cr37);
       SiS_Pr->PanelSelfDetected = TRUE;
d11154 1
a11154 1
     romptr = SISGETROMW(0x128);
d11156 1
a11156 1
        romptr = SISGETROMW(0x12a);
d11158 1
a11158 1
     romptr = SISGETROMW(0x1a8);
d11160 1
a11160 1
        romptr = SISGETROMW(0x1aa);
d11172 1
a11172 1
     romptr = SISGETROMW(0x120);
d11174 1
a11174 1
        romptr = SISGETROMW(0x122);
d11176 1
a11176 1
     romptr = SISGETROMW(0x1a0);
d11178 1
a11178 1
        romptr = SISGETROMW(0x1a2);
d11190 1
a11190 1
     romptr = SISGETROMW(0x114);
d11192 1
a11192 1
        romptr = SISGETROMW(0x11a);
d11194 1
a11194 1
     romptr = SISGETROMW(0x194);
d11196 1
a11196 1
        romptr = SISGETROMW(0x19a);
d11218 3
a11220 3
  index = SiS_GetBIOSLCDResInfo(SiS_Pr) & 0x0F;
  if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050)      index -= 5;
  else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) index -= 6;
d11233 4
a11236 2
  index = ((SiS_GetBIOSLCDResInfo(SiS_Pr) & 0x0F) - 1) * 3;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)         index += 2;
d11238 1
d11264 1
a11264 1
GetOEMTVPtr661_2_GEN(SiS_Private *SiS_Pr, int addme)
d11281 1
a11281 1
	 index += addme;
a11288 14
static ULONG
GetOEMTVPtr661_2_OLD(SiS_Private *SiS_Pr)
{
   return(GetOEMTVPtr661_2_GEN(SiS_Pr, 8));
}

#if 0
static ULONG
GetOEMTVPtr661_2_NEW(SiS_Private *SiS_Pr)
{
   return(GetOEMTVPtr661_2_GEN(SiS_Pr, 6));
}
#endif

d11294 5
a11298 12
   if(SiS_Pr->SiS_TVMode & TVSetPAL)          index = 2;
   if(SiS_Pr->SiS_ROMNew) {
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) index = 4;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) index = 6;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) index = 8;
      if(SiS_Pr->SiS_TVMode & TVSetHiVision)  index = 10;
   } else {
      if(SiS_Pr->SiS_TVMode & TVSetHiVision)  index = 4;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) index = 6;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) index = 8;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) index = 10;
   }
a11311 6
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x20,0xbf);
  } else {
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x35,0x7f);
  }

d11316 1
a11316 1
     if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
a11340 16
     /* Could we detect a PDC for LCD or did we get a user-defined? If yes, use it */

     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	if(SiS_Pr->PDC != -1) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,((SiS_Pr->PDC >> 1) & 0x0f));
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,0x7f,((SiS_Pr->PDC & 0x01) << 7));
	   return;
	}
     } else {
	if(SiS_Pr->PDCA != -1) {
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((SiS_Pr->PDCA << 3) & 0xf0));
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x20,0xbf,((SiS_Pr->PDCA & 0x01) << 6));
	   return;
	}
     }

d11343 1
a11343 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_Custom) {
d11362 11
d11381 1
a11381 1
	if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
d11389 5
a11393 3
	gotitfrompci = TRUE;
	dochiptest = FALSE;
	delay = 0x02;
d11397 1
a11397 1
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d11418 1
a11418 1
              if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
d11421 1
a11421 1
	         /* romptr = SISGETROMW(0x120);                       */
d11423 1
a11423 1
	         romptr = SISGETROMW(0x122);
d11438 4
a11441 5
        } else if(SiS_Pr->SiS_UseROM 			      &&
		  (!(SiS_Pr->SiS_ROMNew))		      &&
	          (SiS_Pr->SiS_LCDResInfo != Panel_1280x1024) &&
		  (SiS_Pr->SiS_LCDResInfo != Panel_1280x768)  &&
		  (SiS_Pr->SiS_LCDResInfo != Panel_1280x960)) {
d11484 1
a11484 1
           if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
d11487 3
a11489 3
              /* romptr = SISGETROMW(0x114);			   */
	      /* if(SiS_Pr->SiS_VBType & VB_SIS302LV)              */
	      romptr = SISGETROMW(0x11a);
d11522 1
a11522 1
     } else if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
d11547 1
a11547 1
     if(SiS_LCDAEnabled(SiS_Pr, HwInfo)) {
d11613 1
a11613 1
  if(SiS_Pr->SiS_UseROM && (!(SiS_Pr->SiS_ROMNew))) {
d11615 2
a11616 1
        temp1 = GetOEMTVPtr661(SiS_Pr);
a11617 4
        romptr = SISGETROMW(0x260);
        if(HwInfo->jChipType >= SIS_760) {
	   romptr = SISGETROMW(0x360);
	}
d11619 1
a11619 1
        romptr = SISGETROMW(0x192);
d11621 1
a11621 1
        romptr = SISGETROMW(0x112);
d11643 3
a11645 1
  temp = temp1 = GetTVPtrIndex(SiS_Pr) >> 1; 	/* 0: NTSC/YPbPr, 1: PAL, 2: HiTV */
d11647 1
a11647 1
  if(ModeNo <= 0x13)
d11652 1
a11652 1
  if(SiS_Pr->SiS_UseROM && (!(SiS_Pr->SiS_ROMNew))) {
d11654 1
a11654 4
        romptr = SISGETROMW(0x26c);
        if(HwInfo->jChipType >= SIS_760) {
	   romptr = SISGETROMW(0x36c);
	}
d11658 1
a11658 1
        romptr = SISGETROMW(0x1a4);
d11660 1
a11660 1
        romptr = SISGETROMW(0x124);
d11678 3
a11680 1
  USHORT index, temp, i, j;
d11682 2
a11683 2
  if(ModeNo <= 0x13) {
     index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].VB_StTVYFilterIndex;
d11685 43
a11727 1
     index = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].VB_ExtTVYFilterIndex;
d11730 4
a11733 1
  temp = GetTVPtrIndex(SiS_Pr) >> 1;  /* 0: NTSC/YPbPr, 1: PAL, 2: HiTV */
d11767 2
a11768 2
  if((HwInfo->jChipType >= SIS_661) || SiS_Pr->SiS_ROMNew) {
     lindex = GetOEMTVPtr661_2_OLD(SiS_Pr) & 0xffff;
d11770 12
a11781 2
     for(j=0, i=0x31; i<=0x34; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS661_TVPhase[lindex + j]);
d11799 2
a11800 2
  if(SiS_Pr->SiS_UseROM) {
     romptr = SISGETROMW(0x116);
d11802 1
a11802 1
        romptr = SISGETROMW(0x196);
d11805 1
a11805 1
        romptr = SISGETROMW(0x11c);
d11807 1
a11807 1
	   romptr = SISGETROMW(0x19c);
d11810 1
a11810 1
	   romptr = SISGETROMW(0x116);
d11812 1
a11812 1
              romptr = SISGETROMW(0x196);
d11865 1
a11865 1
      if(SiS_Pr->SiS_VBType & VB_SIS301) {
d11875 2
d11878 1
a11878 1
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
d11883 7
a11889 35
   /* 1. New ROM: VGA2 and LCD/LCDA-Pass1:1 */

   if(SiS_Pr->SiS_ROMNew) {
      if((SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) 			||
         ((SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) &&
	  (SiS_Pr->SiS_LCDInfo & LCDPass11))) {
         index = 25;
         if(SiS_Pr->UseCustomMode) {
	    index = SiS_Pr->CSRClock;
         } else if(ModeNo > 0x13) {
            index = SiS_GetVCLK2Ptr(SiS_Pr,ModeNo,ModeIdIndex,RTI,HwInfo);
            index = SiS_Pr->SiS_VCLKData[index].CLOCK;
         }
	 if(index < 25) index = 25;
         index = ((index / 25) - 1) << 1;
         if(SiS_Pr->SiS_VBInfo & (SetCRT2ToRAMDAC | SetCRT2ToLCD)) index++;
	 romptr = SISGETROMW(0x104);  /* 0x4ae */
         delay = ROMAddr[romptr + index];
         if(SiS_Pr->SiS_VBInfo & (SetCRT2ToRAMDAC | SetCRT2ToLCD)) {
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,((delay >> 1) & 0x0f));
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,0x7f,((delay & 0x01) << 7));
         } else {
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((delay << 3) & 0xf0));
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x20,0xbf,((delay & 0x01) << 6));
         }
         return;
      }
   }

   /* 2. Old ROM: VGA2 and LCD/LCDA-Pass 1:1 */

   if(SiS_Pr->UseCustomMode) delay = 0x04;
   else if(ModeNo <= 0x13)   delay = 0x04;
   else                      delay = (SiS_Pr->SiS_RefIndex[RTI].Ext_PDC >> 4);
   delay |= (delay << 8);
a11892 2
      /* 3. TV */

d11894 12
a11905 5
      if(SiS_Pr->SiS_ROMNew) {
         romptr = SISGETROMW(0x106);  /* 0x4ba */
         delay = ROMAddr[romptr + index];
      } else {
         delay = 0x04;
d11907 2
d11912 18
a11929 21
      /* 4. LCD, LCDA (for new ROM only LV and non-Pass 1:1) */

      if( (SiS_Pr->SiS_LCDResInfo != Panel_Custom) &&
          ((romptr = GetLCDStructPtr661_2(SiS_Pr, HwInfo))) ) {

	 /* For LV, the BIOS must know about the correct value */
	 delay = ROMAddr[romptr + 0x0d];		/* LCD  */
	 delay |= (ROMAddr[romptr + 0x0c] << 8);	/* LCDA */

      } else {

         /* TMDS: Set our own, since BIOS has no idea - TODO: Find out about values */
         if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
            if((SiS_Pr->PanelXRes <= 1024) && (SiS_Pr->PanelYRes <= 768)) {
	       delay = 0x0404;
            } else if((SiS_Pr->PanelXRes <= 1280) && (SiS_Pr->PanelYRes <= 1024)) {
	       delay = 0x0404;
            } else if((SiS_Pr->PanelXRes <= 1400) && (SiS_Pr->PanelYRes <= 1050)) {
	       delay = 0x1004;
            } else
	       delay = 0x0000;
a11930 9

      }

      /* Override by detected or user-set values */
      if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (SiS_Pr->PDC != -1)) {
         delay = SiS_Pr->PDC & 0x1f;
      }
      if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) && (SiS_Pr->PDCA != -1)) {
         delay = (SiS_Pr->PDCA & 0x1f) << 8;
d11934 7
a11940 7
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      delay >>= 8;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((delay << 3) & 0xf0));
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x20,0xbf,((delay & 0x01) << 6));
   } else {
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,((delay >> 1) & 0x0f));
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,0x7f,((delay & 0x01) << 7));
d11942 1
d11951 6
a11957 10

      if(ModeNo <= 0x13) {
         infoflag = SiS_GetRegByte(SiS_Pr->SiS_P3ca+2);
      } else if(SiS_Pr->UseCustomMode) {
         infoflag = SiS_Pr->CInfoFlag;
      } else {
         infoflag = SiS_Pr->SiS_RefIndex[RTI].Ext_InfoFlag;
      }
      infoflag &= 0xc0;

d11959 1
a11959 6
      if(SiS_Pr->SiS_LCDInfo & LCDPass11) {
         temp &= 0x3f;
	 temp |= infoflag;
      } else {
         if(temp & 0x20) infoflag = temp;
      }
d11961 16
a11976 17

      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
         temp = 0x0c;
         if(infoflag & 0x01) temp ^= 0x14;  /* BIOS: 18, wrong */
         temp |= (infoflag >> 6);
         SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xe0,temp);
      } else {
         temp = 0;
         if(infoflag & 0x01) temp |= 0x80;
         SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1a,0x7f,temp);
         temp = 0x30;
         if(infoflag & 0x01) temp = 0x20;
         infoflag &= 0xc0;
         temp |= infoflag;
         SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0f,temp);
      }

d11983 1
a11983 2
   UCHAR  *ROMAddr = HwInfo->pjVirtualRomBase;
   USHORT romptr, temp1, temp2;
d11991 8
a11998 14
   if(SiS_Pr->SiS_ROMNew) {

      if((romptr = GetLCDStructPtr661_2(SiS_Pr, HwInfo))) {
         if(SiS_Pr->SiS_VBType & (VB_SIS301LV | VB_SIS302LV | VB_SIS302ELV)) {
            temp1 = (ROMAddr[romptr] & 0x03) | 0x0c;
	    temp2 = 0xfc;
	    if(SiS_Pr->LVDSHL != -1) {
	      temp1 &= 0xfc;
	      temp2 = 0xf3;
	    }
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,temp2,temp1);
         }
         temp1 = (ROMAddr[romptr + 1] & 0x80) >> 1;
         SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0d,0xbf,temp1);
d12000 1
a12000 1

d12021 1
a12021 1
         if(SiS_Pr->SiS_VBType & VB_SIS301) {
d12050 1
a12050 1
  if(SiS_Pr->SiS_LCDResInfo == Panel_Custom) return;
d12080 1
a12080 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d12091 1
a12091 1
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d12111 1
a12111 1
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d12119 1
a12119 1
     } else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
d12127 1
a12127 1
	if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) {
d12129 1
a12129 1
	} else if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d12210 1
a12210 1
	if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d12301 1
a12301 1
    if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
d12304 1
a12304 1
    if(SiS_Pr->SiS_UseROM) {
d12308 6
a12313 3
	     romptr = SISGETROMW(0x255);
	     if(romptr) tempbx = ROMAddr[romptr + SiS_Pr->SiS_LCDTypeInfo];
	     else       tempbx = customtable300[SiS_Pr->SiS_LCDTypeInfo];
d12324 7
a12330 4
       if(SiS_Pr->SiS_UseROM) {
          romptr = SISGETROMW(0x255);
	  if(romptr) tempbx = ROMAddr[romptr + SiS_Pr->SiS_LCDTypeInfo];
	  else 	     tempbx = 0xff;
d12354 1
a12354 1
  if(SiS_Pr->SiS_LCDResInfo == Panel_Custom) return;
d12356 1
a12356 1
  if(SiS_Pr->SiS_UseROM) {
d12359 1
a12359 1
     romptr = SISGETROMW(0x24b);
d12381 1
a12381 1
	romptr = SISGETROMW(romptr);
d12392 1
a12392 1
     if(SiS_Pr->SiS_UseROM && (ROMAddr[0x235] & 0x80)) {
d12395 1
a12395 1
	   romptr = SISGETROMW(romptr);
d12402 1
a12402 1
        if(SiS_Pr->SiS_UseROM) {
d12406 1
a12406 1
	      romptr = SISGETROMW(romptr);
d12429 1
a12429 1
  if((SiS_Pr->SiS_UseROM) {
d12479 1
a12479 1
  if(SiS_Pr->SiS_UseROM) {
d12482 1
a12482 1
     romptr = SISGETROMW(0x241);
d12491 1
a12491 1
     romptr = SISGETROMW(romptr);
d12502 1
a12502 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,~0x3C,temp);
d12512 1
a12512 1
  if(SiS_Pr->SiS_UseROM) {
d12515 1
a12515 1
     romptr = SISGETROMW(0x243);
d12524 1
a12524 1
     romptr = SISGETROMW(romptr);
d12531 1
a12531 1
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x0A,0x8F,temp);
d12545 1
a12545 1
  if(SiS_Pr->SiS_UseROM) {
d12548 1
a12548 1
     romptr = SISGETROMW(0x245);
d12562 1
a12562 1
	romptr = SISGETROMW(romptr);
d12584 1
a12584 1
  if(SiS_Pr->SiS_UseROM) {
d12587 1
a12587 1
     romptr = SISGETROMW(0x247);
d12608 1
a12608 1
	 romptr = SISGETROMW(romptr);
@


