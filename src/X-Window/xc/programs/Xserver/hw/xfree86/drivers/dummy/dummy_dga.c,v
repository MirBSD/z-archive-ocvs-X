head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407221130:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.04.08.18.36.11;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.36.11;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.23.05;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include "xf86.h"
#include "xf86_OSproc.h"
#include "xf86_ansic.h"
#include "xf86Pci.h"
#include "xf86PciInfo.h"
#include "dgaproc.h"
#include "dummy.h"

static Bool DUMMY_OpenFramebuffer(ScrnInfoPtr, char **, unsigned char **, 
					int *, int *, int *);
static Bool DUMMY_SetMode(ScrnInfoPtr, DGAModePtr);
static int  DUMMY_GetViewport(ScrnInfoPtr);
static void DUMMY_SetViewport(ScrnInfoPtr, int, int, int);

static
DGAFunctionRec DUMMYDGAFuncs = {
   DUMMY_OpenFramebuffer,
   NULL,
   DUMMY_SetMode,
   DUMMY_SetViewport,
   DUMMY_GetViewport,
   NULL,
   NULL,
   NULL,
#if 0
   DUMMY_BlitTransRect
#else
   NULL
#endif
};

Bool
DUMMYDGAInit(ScreenPtr pScreen)
{   
   ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
   DUMMYPtr pDUMMY = DUMMYPTR(pScrn);
   DGAModePtr modes = NULL, newmodes = NULL, currentMode;
   DisplayModePtr pMode, firstMode;
   int Bpp = pScrn->bitsPerPixel >> 3;
   int num = 0, imlines, pixlines;

   imlines =  (pScrn->videoRam * 1024) /
      (pScrn->displayWidth * (pScrn->bitsPerPixel >> 3));

   pixlines =   imlines;

   pMode = firstMode = pScrn->modes;

   while(pMode) {

	newmodes = xrealloc(modes, (num + 1) * sizeof(DGAModeRec));

	if(!newmodes) {
	   xfree(modes);
	   return FALSE;
	}
	modes = newmodes;

	currentMode = modes + num;
	num++;

	currentMode->mode = pMode;
	currentMode->flags = DGA_CONCURRENT_ACCESS | DGA_PIXMAP_AVAILABLE;
	if(pMode->Flags & V_DBLSCAN)
	   currentMode->flags |= DGA_DOUBLESCAN;
	if(pMode->Flags & V_INTERLACE)
	   currentMode->flags |= DGA_INTERLACED;
	currentMode->byteOrder = pScrn->imageByteOrder;
	currentMode->depth = pScrn->depth;
	currentMode->bitsPerPixel = pScrn->bitsPerPixel;
	currentMode->red_mask = pScrn->mask.red;
	currentMode->green_mask = pScrn->mask.green;
	currentMode->blue_mask = pScrn->mask.blue;
	currentMode->visualClass = (Bpp == 1) ? PseudoColor : TrueColor;
	currentMode->viewportWidth = pMode->HDisplay;
	currentMode->viewportHeight = pMode->VDisplay;
	currentMode->xViewportStep = 1;
	currentMode->yViewportStep = 1;
	currentMode->viewportFlags = DGA_FLIP_RETRACE;
	currentMode->offset = 0;
	currentMode->address = (unsigned char *)pDUMMY->FBBase;

	currentMode->bytesPerScanline = 
			((pScrn->displayWidth * Bpp) + 3) & ~3L;
	currentMode->imageWidth = pScrn->displayWidth;
	currentMode->imageHeight =  imlines;
	currentMode->pixmapWidth = currentMode->imageWidth;
	currentMode->pixmapHeight = pixlines;
	currentMode->maxViewportX = currentMode->imageWidth - 
					currentMode->viewportWidth;
	currentMode->maxViewportY = currentMode->imageHeight -
					currentMode->viewportHeight;

	pMode = pMode->next;
	if(pMode == firstMode)
	   break;
   }

   pDUMMY->numDGAModes = num;
   pDUMMY->DGAModes = modes;

   return DGAInit(pScreen, &DUMMYDGAFuncs, modes, num);  
}

static DisplayModePtr DUMMYSavedDGAModes[MAXSCREENS];

static Bool
DUMMY_SetMode(
   ScrnInfoPtr pScrn,
   DGAModePtr pMode
){
   int index = pScrn->pScreen->myNum;
   DUMMYPtr pDUMMY = DUMMYPTR(pScrn);

   if(!pMode) { /* restore the original mode */
 	if(pDUMMY->DGAactive) {	
	    pScrn->currentMode = DUMMYSavedDGAModes[index];
            DUMMYSwitchMode(index, pScrn->currentMode, 0);
	    DUMMYAdjustFrame(index, 0, 0, 0);
 	    pDUMMY->DGAactive = FALSE;
	}
   } else {
	if(!pDUMMY->DGAactive) {  /* save the old parameters */
	    DUMMYSavedDGAModes[index] = pScrn->currentMode;
	    pDUMMY->DGAactive = TRUE;
	}

        DUMMYSwitchMode(index, pMode->mode, 0);
   }
   
   return TRUE;
}

static int  
DUMMY_GetViewport(
  ScrnInfoPtr pScrn
){
    DUMMYPtr pDUMMY = DUMMYPTR(pScrn);

    return pDUMMY->DGAViewportStatus;
}

static void 
DUMMY_SetViewport(
   ScrnInfoPtr pScrn, 
   int x, int y, 
   int flags
){
   DUMMYPtr pDUMMY = DUMMYPTR(pScrn);

   DUMMYAdjustFrame(pScrn->pScreen->myNum, x, y, flags);
   pDUMMY->DGAViewportStatus = 0;  
}


static Bool 
DUMMY_OpenFramebuffer(
   ScrnInfoPtr pScrn, 
   char **name,
   unsigned char **mem,
   int *size,
   int *offset,
   int *flags
){
    DUMMYPtr pDUMMY = DUMMYPTR(pScrn);

    *name = NULL; 		/* no special device */
    *mem = (unsigned char*)pDUMMY->FBBase;
    *size = pScrn->videoRam * 1024;
    *offset = 0;
    *flags = DGA_NEED_ROOT;

    return TRUE;
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@
