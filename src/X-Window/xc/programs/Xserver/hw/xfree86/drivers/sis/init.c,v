head	1.2;
access;
symbols
	tg-mergetmp-2:1.2
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407221130:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.2
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.03.07.18.37.06;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2003.04.08.18.36.38;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.36.38;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.18.19.23;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.27.16.32.34;	author tg;	state Exp;
branches;
next	;

1.1.9.1
date	2004.02.14.19.23.47;	author tg;	state Exp;
branches;
next	1.1.9.2;

1.1.9.2
date	2004.03.05.22.29.49;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@semi-automagic merge of these files (ie, I've skipped through the diffs,
and most of that was done by cvs or that weird script of some minutes ago)
@
text
@/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/sis/init.c,v 1.53 2004/02/26 15:58:43 twini Exp $ */
/*
 * Mode initializing code (CRT1 section) for
 * for SiS 300/305/540/630/730 and
 *     SiS 315/550/650/M650/651/661FX/M661FX/740/741/M741/330/660/M660/760/M760
 * (Universal module for Linux kernel framebuffer and XFree86 4.x)
 *
 * Copyright (C) 2001-2004 by Thomas Winischhofer, Vienna, Austria
 *
 * If distributed as part of the Linux kernel, the following license terms
 * apply:
 *
 * * This program is free software; you can redistribute it and/or modify
 * * it under the terms of the GNU General Public License as published by
 * * the Free Software Foundation; either version 2 of the named License,
 * * or any later version.
 * *
 * * This program is distributed in the hope that it will be useful,
 * * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * * GNU General Public License for more details.
 * *
 * * You should have received a copy of the GNU General Public License
 * * along with this program; if not, write to the Free Software
 * * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
 *
 * Otherwise, the following license terms apply:
 *
 * * Redistribution and use in source and binary forms, with or without
 * * modification, are permitted provided that the following conditions
 * * are met:
 * * 1) Redistributions of source code must retain the above copyright
 * *    notice, this list of conditions and the following disclaimer.
 * * 2) Redistributions in binary form must reproduce the above copyright
 * *    notice, this list of conditions and the following disclaimer in the
 * *    documentation and/or other materials provided with the distribution.
 * * 3) The name of the author may not be used to endorse or promote products
 * *    derived from this software without specific prior written permission.
 * *
 * * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESSED OR
 * * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: 	Thomas Winischhofer <thomas@@winischhofer.net>
 *
 * Formerly based on non-functional code-fragements for 300 series by SiS, Inc.
 * Used by permission.
 *
 * TW says: This code looks awful, I know. But please don't do anything about
 * this otherwise debugging will be hell.
 * The code is extremely fragile as regards the different chipsets, different
 * video bridges and combinations thereof. If anything is changed, extreme
 * care has to be taken that that change doesn't break it for other chipsets,
 * bridges or combinations thereof.
 * All comments in this file are by me, regardless if they are marked TW or not.
 *
 */
 
#include "init.h"

#ifdef SIS300
#include "300vtbl.h"
#endif

#ifdef SIS315H
#include "310vtbl.h"
#endif

#if defined(ALLOC_PRAGMA)
#pragma alloc_text(PAGE,SiSSetMode)
#endif

/*********************************************/
/*         POINTER INITIALIZATION            */
/*********************************************/

static void
InitCommonPointer(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   SiS_Pr->SiS_StResInfo     = SiS_StResInfo;
   SiS_Pr->SiS_ModeResInfo   = SiS_ModeResInfo;
   SiS_Pr->SiS_StandTable    = SiS_StandTable;

   SiS_Pr->SiS_NTSCPhase     = SiS_NTSCPhase;
   SiS_Pr->SiS_PALPhase      = SiS_PALPhase;
   SiS_Pr->SiS_NTSCPhase2    = SiS_NTSCPhase2;
   SiS_Pr->SiS_PALPhase2     = SiS_PALPhase2;
   SiS_Pr->SiS_PALMPhase     = SiS_PALMPhase;
   SiS_Pr->SiS_PALNPhase     = SiS_PALNPhase;
   SiS_Pr->SiS_PALMPhase2    = SiS_PALMPhase2;
   SiS_Pr->SiS_PALNPhase2    = SiS_PALNPhase2;
   SiS_Pr->SiS_SpecialPhase  = SiS_SpecialPhase;
   SiS_Pr->SiS_SpecialPhaseM = SiS_SpecialPhaseM;
   SiS_Pr->SiS_SpecialPhaseJ = SiS_SpecialPhaseJ;

   SiS_Pr->SiS_NTSCTiming     = SiS_NTSCTiming;
   SiS_Pr->SiS_PALTiming      = SiS_PALTiming;
   SiS_Pr->SiS_HiTVSt1Timing  = SiS_HiTVSt1Timing;
   SiS_Pr->SiS_HiTVSt2Timing  = SiS_HiTVSt2Timing;

   SiS_Pr->SiS_HiTVExtTiming  = SiS_HiTVExtTiming;
   SiS_Pr->SiS_HiTVGroup3Data = SiS_HiTVGroup3Data;
   SiS_Pr->SiS_HiTVGroup3Simu = SiS_HiTVGroup3Simu;
#if 0
   SiS_Pr->SiS_HiTVTextTiming = SiS_HiTVTextTiming;
   SiS_Pr->SiS_HiTVGroup3Text = SiS_HiTVGroup3Text;
#endif

   SiS_Pr->SiS_StPALData   = SiS_StPALData;
   SiS_Pr->SiS_ExtPALData  = SiS_ExtPALData;
   SiS_Pr->SiS_StNTSCData  = SiS_StNTSCData;
   SiS_Pr->SiS_ExtNTSCData = SiS_ExtNTSCData;
   SiS_Pr->SiS_St1HiTVData = SiS_StHiTVData; 
   SiS_Pr->SiS_St2HiTVData = SiS_St2HiTVData;
   SiS_Pr->SiS_ExtHiTVData = SiS_ExtHiTVData;
   SiS_Pr->SiS_St525iData  = SiS_StNTSCData;
   SiS_Pr->SiS_St525pData  = SiS_St525pData;
   SiS_Pr->SiS_St750pData  = SiS_St750pData;
   SiS_Pr->SiS_Ext525iData = SiS_ExtNTSCData;
   SiS_Pr->SiS_Ext525pData = SiS_ExtNTSCData;
   SiS_Pr->SiS_Ext750pData = SiS_Ext750pData;

   SiS_Pr->pSiS_OutputSelect = &SiS_OutputSelect;
   SiS_Pr->pSiS_SoftSetting  = &SiS_SoftSetting;

   SiS_Pr->SiS_LCD1280x720Data      = SiS_LCD1280x720Data;
   SiS_Pr->SiS_StLCD1280x768_2Data  = SiS_StLCD1280x768_2Data;
   SiS_Pr->SiS_ExtLCD1280x768_2Data = SiS_ExtLCD1280x768_2Data;
   SiS_Pr->SiS_LCD1280x768_3Data    = SiS_LCD1280x768_3Data;
   SiS_Pr->SiS_LCD1280x800Data      = SiS_LCD1280x800Data;
   SiS_Pr->SiS_LCD1280x960Data      = SiS_LCD1280x960Data;
   SiS_Pr->SiS_StLCD1400x1050Data   = SiS_StLCD1400x1050Data;
   SiS_Pr->SiS_ExtLCD1400x1050Data  = SiS_ExtLCD1400x1050Data;
   SiS_Pr->SiS_LCD1680x1050Data     = SiS_LCD1680x1050Data;
   SiS_Pr->SiS_StLCD1600x1200Data   = SiS_StLCD1600x1200Data;
   SiS_Pr->SiS_ExtLCD1600x1200Data  = SiS_ExtLCD1600x1200Data;
   SiS_Pr->SiS_NoScaleData          = SiS_NoScaleData;

   SiS_Pr->SiS_LVDS320x480Data_1   = SiS_LVDS320x480Data_1;
   SiS_Pr->SiS_LVDS800x600Data_1   = SiS_LVDS800x600Data_1;
   SiS_Pr->SiS_LVDS800x600Data_2   = SiS_LVDS800x600Data_2;
   SiS_Pr->SiS_LVDS1024x768Data_1  = SiS_LVDS1024x768Data_1;
   SiS_Pr->SiS_LVDS1024x768Data_2  = SiS_LVDS1024x768Data_2;
   SiS_Pr->SiS_LVDS1280x1024Data_1 = SiS_LVDS1280x1024Data_1;
   SiS_Pr->SiS_LVDS1280x1024Data_2 = SiS_LVDS1280x1024Data_2;
   SiS_Pr->SiS_LVDS1400x1050Data_1 = SiS_LVDS1400x1050Data_1;
   SiS_Pr->SiS_LVDS1400x1050Data_2 = SiS_LVDS1400x1050Data_2;
   SiS_Pr->SiS_LVDS1600x1200Data_1 = SiS_LVDS1600x1200Data_1;
   SiS_Pr->SiS_LVDS1600x1200Data_2 = SiS_LVDS1600x1200Data_2;
   SiS_Pr->SiS_LVDS1280x768Data_1  = SiS_LVDS1280x768Data_1;
   SiS_Pr->SiS_LVDS1280x768Data_2  = SiS_LVDS1280x768Data_2;
   SiS_Pr->SiS_LVDS1024x600Data_1  = SiS_LVDS1024x600Data_1;
   SiS_Pr->SiS_LVDS1024x600Data_2  = SiS_LVDS1024x600Data_2;
   SiS_Pr->SiS_LVDS1152x768Data_1  = SiS_LVDS1152x768Data_1;
   SiS_Pr->SiS_LVDS1152x768Data_2  = SiS_LVDS1152x768Data_2;
   SiS_Pr->SiS_LVDSXXXxXXXData_1   = SiS_LVDSXXXxXXXData_1;
   SiS_Pr->SiS_LVDS1280x960Data_1  = SiS_LVDS1280x960Data_1;
   SiS_Pr->SiS_LVDS1280x960Data_2  = SiS_LVDS1280x960Data_2;
   SiS_Pr->SiS_LVDS640x480Data_1   = SiS_LVDS640x480Data_1;
   SiS_Pr->SiS_LVDS1280x960Data_1  = SiS_LVDS1280x1024Data_1;
   SiS_Pr->SiS_LVDS1280x960Data_2  = SiS_LVDS1280x1024Data_2;
   SiS_Pr->SiS_LVDS640x480Data_1   = SiS_LVDS640x480Data_1;
   SiS_Pr->SiS_LVDS640x480Data_2   = SiS_LVDS640x480Data_2;

   SiS_Pr->SiS_LVDS848x480Data_1   = SiS_LVDS848x480Data_1;
   SiS_Pr->SiS_LVDS848x480Data_2   = SiS_LVDS848x480Data_2;
   SiS_Pr->SiS_LVDSBARCO1024Data_1 = SiS_LVDSBARCO1024Data_1;
   SiS_Pr->SiS_LVDSBARCO1024Data_2 = SiS_LVDSBARCO1024Data_2;
   SiS_Pr->SiS_LVDSBARCO1366Data_1 = SiS_LVDSBARCO1366Data_1;
   SiS_Pr->SiS_LVDSBARCO1366Data_2 = SiS_LVDSBARCO1366Data_2;

   SiS_Pr->SiS_LVDSCRT11280x768_1    = SiS_LVDSCRT11280x768_1;
   SiS_Pr->SiS_LVDSCRT11024x600_1    = SiS_LVDSCRT11024x600_1;
   SiS_Pr->SiS_LVDSCRT11152x768_1    = SiS_LVDSCRT11152x768_1;
   SiS_Pr->SiS_LVDSCRT11280x768_1_H  = SiS_LVDSCRT11280x768_1_H;
   SiS_Pr->SiS_LVDSCRT11024x600_1_H  = SiS_LVDSCRT11024x600_1_H;
   SiS_Pr->SiS_LVDSCRT11152x768_1_H  = SiS_LVDSCRT11152x768_1_H;
   SiS_Pr->SiS_LVDSCRT11280x768_2    = SiS_LVDSCRT11280x768_2;
   SiS_Pr->SiS_LVDSCRT11024x600_2    = SiS_LVDSCRT11024x600_2;
   SiS_Pr->SiS_LVDSCRT11152x768_2    = SiS_LVDSCRT11152x768_2;
   SiS_Pr->SiS_LVDSCRT11280x768_2_H  = SiS_LVDSCRT11280x768_2_H;
   SiS_Pr->SiS_LVDSCRT11024x600_2_H  = SiS_LVDSCRT11024x600_2_H;
   SiS_Pr->SiS_LVDSCRT11152x768_2_H  = SiS_LVDSCRT11152x768_2_H;
   SiS_Pr->SiS_LVDSCRT1320x480_1     = SiS_LVDSCRT1320x480_1;
   SiS_Pr->SiS_LVDSCRT1640x480_1     = SiS_LVDSCRT1640x480_1;
   SiS_Pr->SiS_LVDSCRT1640x480_1_H   = SiS_LVDSCRT1640x480_1_H;
   SiS_Pr->SiS_LVDSCRT1640x480_2     = SiS_LVDSCRT1640x480_2;
   SiS_Pr->SiS_LVDSCRT1640x480_2_H   = SiS_LVDSCRT1640x480_2_H;
   SiS_Pr->SiS_LVDSCRT1640x480_3     = SiS_LVDSCRT1640x480_3;
   SiS_Pr->SiS_LVDSCRT1640x480_3_H   = SiS_LVDSCRT1640x480_3_H;

   SiS_Pr->SiS_CHTVUNTSCData = SiS_CHTVUNTSCData;
   SiS_Pr->SiS_CHTVONTSCData = SiS_CHTVONTSCData;

   SiS_Pr->SiS_CHTVUNTSCDesData = SiS_CHTVUNTSCDesData;
   SiS_Pr->SiS_CHTVONTSCDesData = SiS_CHTVONTSCDesData;
   SiS_Pr->SiS_CHTVUPALDesData  = SiS_CHTVUPALDesData;
   SiS_Pr->SiS_CHTVOPALDesData  = SiS_CHTVOPALDesData;

   SiS_Pr->SiS_PanelMinLVDS   = Panel_800x600;    /* lowest value LVDS/LCDA */
   SiS_Pr->SiS_PanelMin301    = Panel_1024x768;   /* lowest value 301 */
}

#ifdef SIS300
static void
InitTo300Pointer(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   InitCommonPointer(SiS_Pr, HwInfo);

   SiS_StandTable[0x04].CRTC[4] = 0x2b;
   SiS_StandTable[0x05].CRTC[4] = 0x2b;
   SiS_StandTable[0x06].CRTC[4] = 0x54;
   SiS_StandTable[0x06].CRTC[5] = 0x80;
   SiS_StandTable[0x0d].CRTC[4] = 0x2b;
   SiS_StandTable[0x0e].CRTC[4] = 0x54;
   SiS_StandTable[0x0e].CRTC[5] = 0x80;
   SiS_StandTable[0x11].CRTC[4] = 0x54;
   SiS_StandTable[0x11].CRTC[5] = 0x80;
   SiS_StandTable[0x11].CRTC[16] = 0x83;
   SiS_StandTable[0x11].CRTC[17] = 0x85;
   SiS_StandTable[0x12].CRTC[4] = 0x54;
   SiS_StandTable[0x12].CRTC[5] = 0x80;
   SiS_StandTable[0x12].CRTC[16] = 0x83;
   SiS_StandTable[0x12].CRTC[17] = 0x85;
   SiS_StandTable[0x13].CRTC[5] = 0xa0;
   SiS_StandTable[0x17].CRTC[5] = 0xa0;
   SiS_StandTable[0x1a].CRTC[4] = 0x54;
   SiS_StandTable[0x1a].CRTC[5] = 0x80;
   SiS_StandTable[0x1a].CRTC[16] = 0xea;
   SiS_StandTable[0x1a].CRTC[17] = 0x8c;
   SiS_StandTable[0x1b].CRTC[4] = 0x54;
   SiS_StandTable[0x1b].CRTC[5] = 0x80;
   SiS_StandTable[0x1b].CRTC[16] = 0xea;
   SiS_StandTable[0x1b].CRTC[17] = 0x8c;
   SiS_StandTable[0x1c].CRTC[4] = 0x54;
   SiS_StandTable[0x1c].CRTC[5] = 0x80;

   SiS_Pr->SiS_SModeIDTable  = SiS300_SModeIDTable;
   SiS_Pr->SiS_VBModeIDTable = SiS300_VBModeIDTable;
   SiS_Pr->SiS_EModeIDTable  = SiS300_EModeIDTable;
   SiS_Pr->SiS_RefIndex      = SiS300_RefIndex;
   SiS_Pr->SiS_CRT1Table     = SiS300_CRT1Table;
   if(HwInfo->jChipType == SIS_300) {
      SiS_Pr->SiS_MCLKData_0    = SiS300_MCLKData_300; /* 300 */
   } else {
      SiS_Pr->SiS_MCLKData_0    = SiS300_MCLKData_630; /* 630, 730 */
   }
   SiS_Pr->SiS_VCLKData      = SiS300_VCLKData;
   SiS_Pr->SiS_VBVCLKData    = (SiS_VBVCLKDataStruct *)SiS300_VCLKData;

   SiS_Pr->SiS_SR15  = SiS300_SR15;

#ifndef LINUX_XF86
   SiS_Pr->pSiS_SR07 = &SiS300_SR07;
   SiS_Pr->SiS_CR40  = SiS300_CR40;
   SiS_Pr->SiS_CR49  = SiS300_CR49;
   SiS_Pr->pSiS_SR1F = &SiS300_SR1F;
   SiS_Pr->pSiS_SR21 = &SiS300_SR21;
   SiS_Pr->pSiS_SR22 = &SiS300_SR22;
   SiS_Pr->pSiS_SR23 = &SiS300_SR23;
   SiS_Pr->pSiS_SR24 = &SiS300_SR24;
   SiS_Pr->SiS_SR25  = SiS300_SR25;
   SiS_Pr->pSiS_SR31 = &SiS300_SR31;
   SiS_Pr->pSiS_SR32 = &SiS300_SR32;
   SiS_Pr->pSiS_SR33 = &SiS300_SR33;
   SiS_Pr->pSiS_CRT2Data_1_2  = &SiS300_CRT2Data_1_2;
   SiS_Pr->pSiS_CRT2Data_4_D  = &SiS300_CRT2Data_4_D;
   SiS_Pr->pSiS_CRT2Data_4_E  = &SiS300_CRT2Data_4_E;
   SiS_Pr->pSiS_CRT2Data_4_10 = &SiS300_CRT2Data_4_10;
   SiS_Pr->pSiS_RGBSenseData    = &SiS300_RGBSenseData;
   SiS_Pr->pSiS_VideoSenseData  = &SiS300_VideoSenseData;
   SiS_Pr->pSiS_YCSenseData     = &SiS300_YCSenseData;
   SiS_Pr->pSiS_RGBSenseData2   = &SiS300_RGBSenseData2;
   SiS_Pr->pSiS_VideoSenseData2 = &SiS300_VideoSenseData2;
   SiS_Pr->pSiS_YCSenseData2    = &SiS300_YCSenseData2;
#endif

   SiS_Pr->SiS_PanelDelayTbl     = SiS300_PanelDelayTbl;
   SiS_Pr->SiS_PanelDelayTblLVDS = SiS300_PanelDelayTbl;

   SiS_Pr->SiS_ExtLCD1024x768Data   = SiS300_ExtLCD1024x768Data;
   SiS_Pr->SiS_St2LCD1024x768Data   = SiS300_St2LCD1024x768Data;
   SiS_Pr->SiS_ExtLCD1280x1024Data  = SiS300_ExtLCD1280x1024Data;
   SiS_Pr->SiS_St2LCD1280x1024Data  = SiS300_St2LCD1280x1024Data;

   SiS_Pr->SiS_CRT2Part2_1024x768_1  = SiS300_CRT2Part2_1024x768_1;
   SiS_Pr->SiS_CRT2Part2_1280x1024_1 = SiS300_CRT2Part2_1280x1024_1;
   SiS_Pr->SiS_CRT2Part2_1024x768_2  = SiS300_CRT2Part2_1024x768_2;
   SiS_Pr->SiS_CRT2Part2_1280x1024_2 = SiS300_CRT2Part2_1280x1024_2;
   SiS_Pr->SiS_CRT2Part2_1024x768_3  = SiS300_CRT2Part2_1024x768_3;
   SiS_Pr->SiS_CRT2Part2_1280x1024_3 = SiS300_CRT2Part2_1280x1024_3;

   SiS_Pr->SiS_CHTVUPALData  = SiS300_CHTVUPALData;
   SiS_Pr->SiS_CHTVOPALData  = SiS300_CHTVOPALData;
   SiS_Pr->SiS_CHTVUPALMData = SiS_CHTVUNTSCData;    /* not supported on 300 series */
   SiS_Pr->SiS_CHTVOPALMData = SiS_CHTVONTSCData;    /* not supported on 300 series */
   SiS_Pr->SiS_CHTVUPALNData = SiS300_CHTVUPALData;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVOPALNData = SiS300_CHTVOPALData;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVSOPALData = SiS300_CHTVSOPALData;

   SiS_Pr->SiS_PanelType00_1 = SiS300_PanelType00_1;
   SiS_Pr->SiS_PanelType01_1 = SiS300_PanelType01_1;
   SiS_Pr->SiS_PanelType02_1 = SiS300_PanelType02_1;
   SiS_Pr->SiS_PanelType03_1 = SiS300_PanelType03_1;
   SiS_Pr->SiS_PanelType04_1 = SiS300_PanelType04_1;
   SiS_Pr->SiS_PanelType05_1 = SiS300_PanelType05_1;
   SiS_Pr->SiS_PanelType06_1 = SiS300_PanelType06_1;
   SiS_Pr->SiS_PanelType07_1 = SiS300_PanelType07_1;
   SiS_Pr->SiS_PanelType08_1 = SiS300_PanelType08_1;
   SiS_Pr->SiS_PanelType09_1 = SiS300_PanelType09_1;
   SiS_Pr->SiS_PanelType0a_1 = SiS300_PanelType0a_1;
   SiS_Pr->SiS_PanelType0b_1 = SiS300_PanelType0b_1;
   SiS_Pr->SiS_PanelType0c_1 = SiS300_PanelType0c_1;
   SiS_Pr->SiS_PanelType0d_1 = SiS300_PanelType0d_1;
   SiS_Pr->SiS_PanelType0e_1 = SiS300_PanelType0e_1;
   SiS_Pr->SiS_PanelType0f_1 = SiS300_PanelType0f_1;
   SiS_Pr->SiS_PanelType00_2 = SiS300_PanelType00_2;
   SiS_Pr->SiS_PanelType01_2 = SiS300_PanelType01_2;
   SiS_Pr->SiS_PanelType02_2 = SiS300_PanelType02_2;
   SiS_Pr->SiS_PanelType03_2 = SiS300_PanelType03_2;
   SiS_Pr->SiS_PanelType04_2 = SiS300_PanelType04_2;
   SiS_Pr->SiS_PanelType05_2 = SiS300_PanelType05_2;
   SiS_Pr->SiS_PanelType06_2 = SiS300_PanelType06_2;
   SiS_Pr->SiS_PanelType07_2 = SiS300_PanelType07_2;
   SiS_Pr->SiS_PanelType08_2 = SiS300_PanelType08_2;
   SiS_Pr->SiS_PanelType09_2 = SiS300_PanelType09_2;
   SiS_Pr->SiS_PanelType0a_2 = SiS300_PanelType0a_2;
   SiS_Pr->SiS_PanelType0b_2 = SiS300_PanelType0b_2;
   SiS_Pr->SiS_PanelType0c_2 = SiS300_PanelType0c_2;
   SiS_Pr->SiS_PanelType0d_2 = SiS300_PanelType0d_2;
   SiS_Pr->SiS_PanelType0e_2 = SiS300_PanelType0e_2;
   SiS_Pr->SiS_PanelType0f_2 = SiS300_PanelType0f_2;
   SiS_Pr->SiS_PanelTypeNS_1 = SiS300_PanelTypeNS_1;
   SiS_Pr->SiS_PanelTypeNS_2 = SiS300_PanelTypeNS_2;

   if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
      SiS_Pr->SiS_PanelType04_1 = SiS300_PanelType04_1a;
      SiS_Pr->SiS_PanelType04_2 = SiS300_PanelType04_2a;
   }
   if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
      SiS_Pr->SiS_PanelType04_1 = SiS300_PanelType04_1b;
      SiS_Pr->SiS_PanelType04_2 = SiS300_PanelType04_2b;
   }

   SiS_Pr->SiS_LVDSCRT1800x600_1     = SiS300_LVDSCRT1800x600_1;
   SiS_Pr->SiS_LVDSCRT1800x600_1_H   = SiS300_LVDSCRT1800x600_1_H;
   SiS_Pr->SiS_LVDSCRT1800x600_2     = SiS300_LVDSCRT1800x600_2;
   SiS_Pr->SiS_LVDSCRT1800x600_2_H   = SiS300_LVDSCRT1800x600_2_H;
   SiS_Pr->SiS_LVDSCRT11024x768_1    = SiS300_LVDSCRT11024x768_1;
   SiS_Pr->SiS_LVDSCRT11024x768_1_H  = SiS300_LVDSCRT11024x768_1_H;
   SiS_Pr->SiS_LVDSCRT11024x768_2    = SiS300_LVDSCRT11024x768_2;
   SiS_Pr->SiS_LVDSCRT11024x768_2_H  = SiS300_LVDSCRT11024x768_2_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_1   = SiS300_LVDSCRT11280x1024_1;
   SiS_Pr->SiS_LVDSCRT11280x1024_1_H = SiS300_LVDSCRT11280x1024_1_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_2   = SiS300_LVDSCRT11280x1024_2;
   SiS_Pr->SiS_LVDSCRT11280x1024_2_H = SiS300_LVDSCRT11280x1024_2_H;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1     = SiS300_LVDSCRT1XXXxXXX_1;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1_H   = SiS300_LVDSCRT1XXXxXXX_1_H;

   SiS_Pr->SiS_CHTVCRT1UNTSC = SiS300_CHTVCRT1UNTSC;
   SiS_Pr->SiS_CHTVCRT1ONTSC = SiS300_CHTVCRT1ONTSC;
   SiS_Pr->SiS_CHTVCRT1UPAL  = SiS300_CHTVCRT1UPAL;
   SiS_Pr->SiS_CHTVCRT1OPAL  = SiS300_CHTVCRT1OPAL;
   SiS_Pr->SiS_CHTVCRT1SOPAL = SiS300_CHTVCRT1SOPAL;
   SiS_Pr->SiS_CHTVReg_UNTSC = SiS300_CHTVReg_UNTSC;
   SiS_Pr->SiS_CHTVReg_ONTSC = SiS300_CHTVReg_ONTSC;
   SiS_Pr->SiS_CHTVReg_UPAL  = SiS300_CHTVReg_UPAL;
   SiS_Pr->SiS_CHTVReg_OPAL  = SiS300_CHTVReg_OPAL;
   SiS_Pr->SiS_CHTVReg_UPALM = SiS300_CHTVReg_UNTSC;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_OPALM = SiS300_CHTVReg_ONTSC;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_UPALN = SiS300_CHTVReg_UPAL;   /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_OPALN = SiS300_CHTVReg_OPAL;   /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_SOPAL = SiS300_CHTVReg_SOPAL;
   SiS_Pr->SiS_CHTVVCLKUNTSC = SiS300_CHTVVCLKUNTSC;
   SiS_Pr->SiS_CHTVVCLKONTSC = SiS300_CHTVVCLKONTSC;
   SiS_Pr->SiS_CHTVVCLKUPAL  = SiS300_CHTVVCLKUPAL;
   SiS_Pr->SiS_CHTVVCLKOPAL  = SiS300_CHTVVCLKOPAL;
   SiS_Pr->SiS_CHTVVCLKUPALM = SiS300_CHTVVCLKUNTSC;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVVCLKOPALM = SiS300_CHTVVCLKONTSC;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVVCLKUPALN = SiS300_CHTVVCLKUPAL;   /* not supported on 300 series */
   SiS_Pr->SiS_CHTVVCLKOPALN = SiS300_CHTVVCLKOPAL;   /* not supported on 300 series */
   SiS_Pr->SiS_CHTVVCLKSOPAL = SiS300_CHTVVCLKSOPAL;
}
#endif

#ifdef SIS315H
static void
InitTo310Pointer(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   InitCommonPointer(SiS_Pr, HwInfo);

   SiS_StandTable[0x04].CRTC[4] = 0x2c;
   SiS_StandTable[0x05].CRTC[4] = 0x2c;
   SiS_StandTable[0x06].CRTC[4] = 0x55;
   SiS_StandTable[0x06].CRTC[5] = 0x81;
   SiS_StandTable[0x0d].CRTC[4] = 0x2c;
   SiS_StandTable[0x0e].CRTC[4] = 0x55;
   SiS_StandTable[0x0e].CRTC[5] = 0x81;
   SiS_StandTable[0x11].CRTC[4] = 0x55;
   SiS_StandTable[0x11].CRTC[5] = 0x81;
   SiS_StandTable[0x11].CRTC[16] = 0x82;
   SiS_StandTable[0x11].CRTC[17] = 0x84;
   SiS_StandTable[0x12].CRTC[4] = 0x55;
   SiS_StandTable[0x12].CRTC[5] = 0x81;
   SiS_StandTable[0x12].CRTC[16] = 0x82;
   SiS_StandTable[0x12].CRTC[17] = 0x84;
   SiS_StandTable[0x13].CRTC[5] = 0xb1;
   SiS_StandTable[0x17].CRTC[5] = 0xb1;
   SiS_StandTable[0x1a].CRTC[4] = 0x55;
   SiS_StandTable[0x1a].CRTC[5] = 0x81;
   SiS_StandTable[0x1a].CRTC[16] = 0xe9;
   SiS_StandTable[0x1a].CRTC[17] = 0x8b;
   SiS_StandTable[0x1b].CRTC[4] = 0x55;
   SiS_StandTable[0x1b].CRTC[5] = 0x81;
   SiS_StandTable[0x1b].CRTC[16] = 0xe9;
   SiS_StandTable[0x1b].CRTC[17] = 0x8b;
   SiS_StandTable[0x1c].CRTC[4] = 0x55;
   SiS_StandTable[0x1c].CRTC[5] = 0x81;

   SiS_Pr->SiS_SModeIDTable  = SiS310_SModeIDTable;
   SiS_Pr->SiS_EModeIDTable  = SiS310_EModeIDTable;
   SiS_Pr->SiS_RefIndex      = (SiS_Ext2Struct *)SiS310_RefIndex;
   SiS_Pr->SiS_CRT1Table     = SiS310_CRT1Table;
   if(HwInfo->jChipType >= SIS_760) {
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_760;  /* 760 */
   } else if(HwInfo->jChipType >= SIS_661) {
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_660;  /* 661/741 */
   } else if(HwInfo->jChipType == SIS_330) {
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_330;  /* 330 */
   } else if(HwInfo->jChipType > SIS_315PRO) {
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_650;  /* 550, 650, 740 */
   } else {
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_315;  /* 315 */
   }
   SiS_Pr->SiS_MCLKData_1    = SiS310_MCLKData_1;
   SiS_Pr->SiS_VCLKData      = SiS310_VCLKData;
   SiS_Pr->SiS_VBVCLKData    = SiS310_VBVCLKData;

   SiS_Pr->SiS_SR15  = SiS310_SR15;

#ifndef LINUX_XF86
   SiS_Pr->pSiS_SR07 = &SiS310_SR07;
   SiS_Pr->SiS_CR40  = SiS310_CR40;
   SiS_Pr->SiS_CR49  = SiS310_CR49;
   SiS_Pr->pSiS_SR1F = &SiS310_SR1F;
   SiS_Pr->pSiS_SR21 = &SiS310_SR21;
   SiS_Pr->pSiS_SR22 = &SiS310_SR22;
   SiS_Pr->pSiS_SR23 = &SiS310_SR23;
   SiS_Pr->pSiS_SR24 = &SiS310_SR24;
   SiS_Pr->SiS_SR25  = SiS310_SR25;
   SiS_Pr->pSiS_SR31 = &SiS310_SR31;
   SiS_Pr->pSiS_SR32 = &SiS310_SR32;
   SiS_Pr->pSiS_SR33 = &SiS310_SR33;
   SiS_Pr->pSiS_CRT2Data_1_2  = &SiS310_CRT2Data_1_2;
   SiS_Pr->pSiS_CRT2Data_4_D  = &SiS310_CRT2Data_4_D;
   SiS_Pr->pSiS_CRT2Data_4_E  = &SiS310_CRT2Data_4_E;
   SiS_Pr->pSiS_CRT2Data_4_10 = &SiS310_CRT2Data_4_10;
   SiS_Pr->pSiS_RGBSenseData    = &SiS310_RGBSenseData;
   SiS_Pr->pSiS_VideoSenseData  = &SiS310_VideoSenseData;
   SiS_Pr->pSiS_YCSenseData     = &SiS310_YCSenseData;
   SiS_Pr->pSiS_RGBSenseData2   = &SiS310_RGBSenseData2;
   SiS_Pr->pSiS_VideoSenseData2 = &SiS310_VideoSenseData2;
   SiS_Pr->pSiS_YCSenseData2    = &SiS310_YCSenseData2;
#endif

   SiS_Pr->SiS_PanelDelayTbl     = SiS310_PanelDelayTbl;
   SiS_Pr->SiS_PanelDelayTblLVDS = SiS310_PanelDelayTblLVDS;

   SiS_Pr->SiS_St2LCD1024x768Data   = SiS310_St2LCD1024x768Data;
   SiS_Pr->SiS_ExtLCD1024x768Data   = SiS310_ExtLCD1024x768Data;
   SiS_Pr->SiS_St2LCD1280x1024Data  = SiS310_St2LCD1280x1024Data;
   SiS_Pr->SiS_ExtLCD1280x1024Data  = SiS310_ExtLCD1280x1024Data;

   SiS_Pr->SiS_CRT2Part2_1024x768_1  = SiS310_CRT2Part2_1024x768_1;

   SiS_Pr->SiS_PanelType00_1 = SiS310_PanelType00_1;
   SiS_Pr->SiS_PanelType01_1 = SiS310_PanelType01_1;
   SiS_Pr->SiS_PanelType02_1 = SiS310_PanelType02_1;
   SiS_Pr->SiS_PanelType03_1 = SiS310_PanelType03_1;
   SiS_Pr->SiS_PanelType04_1 = SiS310_PanelType04_1;
   SiS_Pr->SiS_PanelType05_1 = SiS310_PanelType05_1;
   SiS_Pr->SiS_PanelType06_1 = SiS310_PanelType06_1;
   SiS_Pr->SiS_PanelType07_1 = SiS310_PanelType07_1;
   SiS_Pr->SiS_PanelType08_1 = SiS310_PanelType08_1;
   SiS_Pr->SiS_PanelType09_1 = SiS310_PanelType09_1;
   SiS_Pr->SiS_PanelType0a_1 = SiS310_PanelType0a_1;
   SiS_Pr->SiS_PanelType0b_1 = SiS310_PanelType0b_1;
   SiS_Pr->SiS_PanelType0c_1 = SiS310_PanelType0c_1;
   SiS_Pr->SiS_PanelType0d_1 = SiS310_PanelType0d_1;
   SiS_Pr->SiS_PanelType0e_1 = SiS310_PanelType0e_1;
   SiS_Pr->SiS_PanelType0f_1 = SiS310_PanelType0f_1;
   SiS_Pr->SiS_PanelType00_2 = SiS310_PanelType00_2;
   SiS_Pr->SiS_PanelType01_2 = SiS310_PanelType01_2;
   SiS_Pr->SiS_PanelType02_2 = SiS310_PanelType02_2;
   SiS_Pr->SiS_PanelType03_2 = SiS310_PanelType03_2;
   SiS_Pr->SiS_PanelType04_2 = SiS310_PanelType04_2;
   SiS_Pr->SiS_PanelType05_2 = SiS310_PanelType05_2;
   SiS_Pr->SiS_PanelType06_2 = SiS310_PanelType06_2;
   SiS_Pr->SiS_PanelType07_2 = SiS310_PanelType07_2;
   SiS_Pr->SiS_PanelType08_2 = SiS310_PanelType08_2;
   SiS_Pr->SiS_PanelType09_2 = SiS310_PanelType09_2;
   SiS_Pr->SiS_PanelType0a_2 = SiS310_PanelType0a_2;
   SiS_Pr->SiS_PanelType0b_2 = SiS310_PanelType0b_2;
   SiS_Pr->SiS_PanelType0c_2 = SiS310_PanelType0c_2;
   SiS_Pr->SiS_PanelType0d_2 = SiS310_PanelType0d_2;
   SiS_Pr->SiS_PanelType0e_2 = SiS310_PanelType0e_2;
   SiS_Pr->SiS_PanelType0f_2 = SiS310_PanelType0f_2;
   SiS_Pr->SiS_PanelTypeNS_1 = SiS310_PanelTypeNS_1;
   SiS_Pr->SiS_PanelTypeNS_2 = SiS310_PanelTypeNS_2;

   SiS_Pr->SiS_CHTVUPALData  = SiS310_CHTVUPALData;
   SiS_Pr->SiS_CHTVOPALData  = SiS310_CHTVOPALData;
   SiS_Pr->SiS_CHTVUPALMData = SiS310_CHTVUPALMData;
   SiS_Pr->SiS_CHTVOPALMData = SiS310_CHTVOPALMData;
   SiS_Pr->SiS_CHTVUPALNData = SiS310_CHTVUPALNData;
   SiS_Pr->SiS_CHTVOPALNData = SiS310_CHTVOPALNData;
   SiS_Pr->SiS_CHTVSOPALData = SiS310_CHTVSOPALData;

   SiS_Pr->SiS_LVDSCRT1800x600_1     = SiS310_LVDSCRT1800x600_1;
   SiS_Pr->SiS_LVDSCRT11024x768_1    = SiS310_LVDSCRT11024x768_1;
   SiS_Pr->SiS_LVDSCRT11280x1024_1   = SiS310_LVDSCRT11280x1024_1;
   SiS_Pr->SiS_LVDSCRT11400x1050_1   = SiS310_LVDSCRT11400x1050_1;
   SiS_Pr->SiS_LVDSCRT11600x1200_1   = SiS310_LVDSCRT11600x1200_1;
   SiS_Pr->SiS_LVDSCRT1800x600_1_H   = SiS310_LVDSCRT1800x600_1_H;
   SiS_Pr->SiS_LVDSCRT11024x768_1_H  = SiS310_LVDSCRT11024x768_1_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_1_H = SiS310_LVDSCRT11280x1024_1_H;
   SiS_Pr->SiS_LVDSCRT11400x1050_1_H = SiS310_LVDSCRT11400x1050_1_H;
   SiS_Pr->SiS_LVDSCRT11600x1200_1_H = SiS310_LVDSCRT11600x1200_1_H;
   SiS_Pr->SiS_LVDSCRT1800x600_2     = SiS310_LVDSCRT1800x600_2;
   SiS_Pr->SiS_LVDSCRT11024x768_2    = SiS310_LVDSCRT11024x768_2;
   SiS_Pr->SiS_LVDSCRT11280x1024_2   = SiS310_LVDSCRT11280x1024_2;
   SiS_Pr->SiS_LVDSCRT11400x1050_2   = SiS310_LVDSCRT11400x1050_2;
   SiS_Pr->SiS_LVDSCRT11600x1200_2   = SiS310_LVDSCRT11600x1200_2;
   SiS_Pr->SiS_LVDSCRT1800x600_2_H   = SiS310_LVDSCRT1800x600_2_H;
   SiS_Pr->SiS_LVDSCRT11024x768_2_H  = SiS310_LVDSCRT11024x768_2_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_2_H = SiS310_LVDSCRT11280x1024_2_H;
   SiS_Pr->SiS_LVDSCRT11400x1050_2_H = SiS310_LVDSCRT11400x1050_2_H;
   SiS_Pr->SiS_LVDSCRT11600x1200_2_H = SiS310_LVDSCRT11600x1200_2_H;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1     = SiS310_LVDSCRT1XXXxXXX_1;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1_H   = SiS310_LVDSCRT1XXXxXXX_1_H;
   SiS_Pr->SiS_CHTVCRT1UNTSC         = SiS310_CHTVCRT1UNTSC;
   SiS_Pr->SiS_CHTVCRT1ONTSC         = SiS310_CHTVCRT1ONTSC;
   SiS_Pr->SiS_CHTVCRT1UPAL          = SiS310_CHTVCRT1UPAL;
   SiS_Pr->SiS_CHTVCRT1OPAL          = SiS310_CHTVCRT1OPAL;
   SiS_Pr->SiS_CHTVCRT1SOPAL         = SiS310_CHTVCRT1OPAL;

   SiS_Pr->SiS_CHTVReg_UNTSC = SiS310_CHTVReg_UNTSC;
   SiS_Pr->SiS_CHTVReg_ONTSC = SiS310_CHTVReg_ONTSC;
   SiS_Pr->SiS_CHTVReg_UPAL  = SiS310_CHTVReg_UPAL;
   SiS_Pr->SiS_CHTVReg_OPAL  = SiS310_CHTVReg_OPAL;
   SiS_Pr->SiS_CHTVReg_UPALM = SiS310_CHTVReg_UPALM;
   SiS_Pr->SiS_CHTVReg_OPALM = SiS310_CHTVReg_OPALM;
   SiS_Pr->SiS_CHTVReg_UPALN = SiS310_CHTVReg_UPALN;
   SiS_Pr->SiS_CHTVReg_OPALN = SiS310_CHTVReg_OPALN;
   SiS_Pr->SiS_CHTVReg_SOPAL = SiS310_CHTVReg_OPAL;

   SiS_Pr->SiS_CHTVVCLKUNTSC = SiS310_CHTVVCLKUNTSC;
   SiS_Pr->SiS_CHTVVCLKONTSC = SiS310_CHTVVCLKONTSC;
   SiS_Pr->SiS_CHTVVCLKUPAL  = SiS310_CHTVVCLKUPAL;
   SiS_Pr->SiS_CHTVVCLKOPAL  = SiS310_CHTVVCLKOPAL;
   SiS_Pr->SiS_CHTVVCLKUPALM = SiS310_CHTVVCLKUPALM;
   SiS_Pr->SiS_CHTVVCLKOPALM = SiS310_CHTVVCLKOPALM;
   SiS_Pr->SiS_CHTVVCLKUPALN = SiS310_CHTVVCLKUPALN;
   SiS_Pr->SiS_CHTVVCLKOPALN = SiS310_CHTVVCLKOPALN;
   SiS_Pr->SiS_CHTVVCLKSOPAL = SiS310_CHTVVCLKOPAL;
}
#endif

static void
SiSInitPtr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   switch(HwInfo->jChipType) {
#ifdef SIS315H
   case SIS_315H:
   case SIS_315:
   case SIS_315PRO:
   case SIS_550:
   case SIS_650:
   case SIS_740:
   case SIS_330:
   case SIS_661:
   case SIS_741:
   case SIS_660:
   case SIS_760:
      InitTo310Pointer(SiS_Pr, HwInfo);
      break;
#endif
#ifdef SIS300
   case SIS_300:
   case SIS_540:
   case SIS_630:
   case SIS_730:
      InitTo300Pointer(SiS_Pr, HwInfo);
      break;
#endif
   default:
      break;
   }
}

/*********************************************/
/*            HELPER: Get ModeID             */
/*********************************************/

USHORT
SiS_GetModeID(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay,
              int Depth, BOOLEAN FSTN, int LCDwidth, int LCDheight)
{
   USHORT ModeIndex = 0;

   switch(HDisplay)
   {
     case 320:
     	  if(VDisplay == 200)     ModeIndex = ModeIndex_320x200[Depth];
	  else if(VDisplay == 240) {
	     if(FSTN) ModeIndex = ModeIndex_320x240_FSTN[Depth];
	     else     ModeIndex = ModeIndex_320x240[Depth];
          }
          break;
     case 400:
          if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
          break;
     case 512:
          if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
          break;
     case 640:
          if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
	  else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
          break;
     case 720:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 480)      ModeIndex = ModeIndex_720x480[Depth];
             else if(VDisplay == 576) ModeIndex = ModeIndex_720x576[Depth];
          }
          break;
     case 768:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 576) ModeIndex = ModeIndex_768x576[Depth];
          }
	  break;
     case 800:
	  if(VDisplay == 600)    ModeIndex = ModeIndex_800x600[Depth];
	  else if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 480) ModeIndex = ModeIndex_800x480[Depth];
	  }
          break;
     case 848:
          if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 480) ModeIndex = ModeIndex_848x480[Depth];
	  }
	  break;
     case 856:
          if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 480) ModeIndex = ModeIndex_856x480[Depth];
	  }
	  break;
     case 1024:
          if(VDisplay == 768) ModeIndex = ModeIndex_1024x768[Depth];
	  else if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 576)    ModeIndex = ModeIndex_1024x576[Depth];
	     else if(VGAEngine == SIS_300_VGA) {
	        if(VDisplay == 600) ModeIndex = ModeIndex_1024x600[Depth];
             }
	  }
          break;
     case 1152:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 864)    ModeIndex = ModeIndex_1152x864[Depth];
             else if(VGAEngine == SIS_300_VGA) {
	        if(VDisplay == 768) ModeIndex = ModeIndex_1152x768[Depth];
             }
	  }
	  break;
     case 1280:
          if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
	  else if(VDisplay == 800) {
	     if(VGAEngine == SIS_315_VGA) {
	        if((VBFlags & CRT1_LCDA) && (LCDwidth == 1280) && (LCDheight == 800)) {
	           ModeIndex = ModeIndex_1280x800[Depth];
	        } else if(!(VBFlags & CRT1_LCDA)) {
	           ModeIndex = ModeIndex_1280x800[Depth];
	        }
	     }
	  } else if(VDisplay == 720) {
	     if((VBFlags & CRT1_LCDA) && (LCDwidth == 1280) && (LCDheight == 720)) {
	        ModeIndex = ModeIndex_1280x720[Depth];
	     } else if(!(VBFlags & CRT1_LCDA)) {
	        ModeIndex = ModeIndex_1280x720[Depth];
	     }
	  } else if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 960)      ModeIndex = ModeIndex_1280x960[Depth];
	     else if(VDisplay == 768) {
	        if(VGAEngine == SIS_300_VGA) {
	           ModeIndex = ModeIndex_300_1280x768[Depth];
	        } else {
	           ModeIndex = ModeIndex_310_1280x768[Depth];
	        }
	     }
	  }
          break;
     case 1360:
          if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 768)     ModeIndex = ModeIndex_1360x768[Depth];
	     else if(VGAEngine == SIS_300_VGA) {
	        if(VDisplay == 1024) ModeIndex = ModeIndex_300_1360x1024[Depth];
             }
	  }
          break;
     case 1400:
          if(VGAEngine == SIS_315_VGA) {
	     if(VDisplay == 1050) {
	        if((VBFlags & CRT1_LCDA) &&
	           (((LCDwidth == 1400) && (LCDheight == 1050)) ||
		    ((LCDwidth == 1600) && (LCDheight == 1200)))) {
	           ModeIndex = ModeIndex_1400x1050[Depth];
	        } else if(!(VBFlags & CRT1_LCDA)) {
	           ModeIndex = ModeIndex_1400x1050[Depth];
	        }
	     }
	  }
          break;
     case 1600:
          if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
          break;
     case 1680:
          if(VGAEngine == SIS_315_VGA) {
             if(VDisplay == 1050) ModeIndex = ModeIndex_1680x1050[Depth];
	  }
          break;
     case 1920:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 1440) ModeIndex = ModeIndex_1920x1440[Depth];
	  }
          break;
     case 2048:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 1536) {
                if(VGAEngine == SIS_300_VGA) {
	            ModeIndex = ModeIndex_300_2048x1536[Depth];
  	        } else {
	            ModeIndex = ModeIndex_310_2048x1536[Depth];
                }
	     }
	  }
          break;
   }

   return(ModeIndex);
}

USHORT
SiS_GetModeID_LCD(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay,
                  int Depth, BOOLEAN FSTN, USHORT CustomT, int LCDwidth, int LCDheight)
{
   USHORT ModeIndex = 0;

   if(VBFlags & (VB_LVDS | VB_30xBDH)) {

      switch(HDisplay)
      {
	case 320:
	     if(CustomT != CUT_PANEL848) {
     	  	if(VDisplay == 200) ModeIndex = ModeIndex_320x200[Depth];
	  	else if(VDisplay == 240) {
		   if(!FSTN) ModeIndex = ModeIndex_320x240[Depth];
          	   else if(VGAEngine == SIS_315_VGA) {
                      ModeIndex = ModeIndex_320x240_FSTN[Depth];
		   }
		}
	     }
             break;
     	case 400:
	     if(CustomT != CUT_PANEL848) {
	        if(!((VGAEngine == SIS_300_VGA) && (VBFlags & VB_TRUMPION))) {
          	   if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
		}
	     }
             break;
	case 512:
	     if(CustomT != CUT_PANEL848) {
	        if(!((VGAEngine == SIS_300_VGA) && (VBFlags & VB_TRUMPION))) {
		   if(LCDwidth != 1024 || LCDheight != 600) {
		      if(VDisplay == 384) {
		         ModeIndex = ModeIndex_512x384[Depth];
		      }
		   }
		}
	     }
	     break;
	case 640:
	     if(VDisplay == 480)            ModeIndex = ModeIndex_640x480[Depth];
	     else if(VDisplay == 400) {
	        if(CustomT != CUT_PANEL848) ModeIndex = ModeIndex_640x400[Depth];
	     }
	     break;
	case 800:
	     if(VDisplay == 600) ModeIndex = ModeIndex_800x600[Depth];
	     break;
	case 848:
	     if(CustomT == CUT_PANEL848) {
	        if(VDisplay == 480) ModeIndex = ModeIndex_848x480[Depth];
	     }
	     break;
	case 1024:
	     if(VDisplay == 768) ModeIndex = ModeIndex_1024x768[Depth];
	     else if(VGAEngine == SIS_300_VGA) {
		if((VDisplay == 600) && (LCDheight == 600)) {
		   ModeIndex = ModeIndex_1024x600[Depth];
		}
	     }
	     break;
	case 1152:
	     if(VGAEngine == SIS_300_VGA) {
	        if((VDisplay == 768) && (LCDheight == 768)) {
		   ModeIndex = ModeIndex_1152x768[Depth];
		}
	     }
	     break;
        case 1280:
	     if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
	     else if(VGAEngine == SIS_315_VGA) {
	        if((VDisplay == 768) && (LCDheight == 768)) {
		   ModeIndex = ModeIndex_310_1280x768[Depth];
		}
		if((VDisplay == 800) && (LCDheight == 800)) {
		   ModeIndex = ModeIndex_310_1280x768[Depth];
		}
	     }
	     break;
	case 1360:
	     if(VGAEngine == SIS_300_VGA) {
	        if(CustomT == CUT_BARCO1366) {
		   if(VDisplay == 1024) ModeIndex = ModeIndex_300_1360x1024[Depth];
		}
	     }
	     if(CustomT == CUT_PANEL848) {
	        if(VDisplay == 768) ModeIndex = ModeIndex_1360x768[Depth];
	     }
	     break;
	case 1400:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VDisplay == 1050) ModeIndex = ModeIndex_1400x1050[Depth];
	     }
	     break;
	case 1600:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
	     }
	     break;
      }

   } else if(VBFlags & VB_SISBRIDGE) {

      switch(HDisplay)
      {
	case 320:
     	     if(VDisplay == 200)      ModeIndex = ModeIndex_320x200[Depth];
	     else if(VDisplay == 240) ModeIndex = ModeIndex_320x240[Depth];
             break;
     	case 400:
             if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
             break;
	case 512:
	     if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
	     break;
	case 640:
	     if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
	     else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
	     break;
	case 800:
	     if(VDisplay == 600) ModeIndex = ModeIndex_800x600[Depth];
	     break;
	case 1024:
	     if(VDisplay == 768) ModeIndex = ModeIndex_1024x768[Depth];
	     break;
	case 1280:
	     if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
	     else if(VDisplay == 768) {
		if((LCDheight == 768) || (LCDwidth == 1680) ||
		   ((LCDheight == 1024) && (VBFlags & (VB_301|VB_301B|VB_301C|VB_302B)))) {
		   if(VGAEngine == SIS_300_VGA) {
		      ModeIndex = ModeIndex_300_1280x768[Depth];
		   } else {
		      ModeIndex = ModeIndex_310_1280x768[Depth];
		   }
		}
	     } else if(VDisplay == 960) {
	        if((LCDheight == 960) ||
		   ((LCDheight == 1024) && (VBFlags & (VB_301|VB_301B|VB_301C|VB_302B)))) {
		   ModeIndex = ModeIndex_1280x960[Depth];
		}
	     } else if(VGAEngine == SIS_315_VGA) {
	        if(VDisplay == 800) {
		   if((LCDheight == 800) || (LCDwidth == 1680) ||
		      ((LCDheight == 1024) && (VBFlags & (VB_301|VB_301B|VB_301C|VB_302B)))) {
		      ModeIndex = ModeIndex_1280x800[Depth];
		   }
		} else if(VDisplay == 720) {
		   if((LCDheight == 720) || (LCDwidth == 1680) ||
		      ((LCDheight == 1024) && (VBFlags & (VB_301|VB_301B|VB_301C|VB_302B)))) {
		      ModeIndex = ModeIndex_1280x720[Depth];
		   }
		}
	     }
	     break;
	case 1400:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VBFlags & (VB_301B | VB_301C | VB_302B | VB_302LV | VB_302ELV)) {
		   if((LCDwidth == 1400) || (LCDwidth == 1600) || (LCDwidth == 1680)) {
		      ModeIndex = ModeIndex_1400x1050[Depth];
		   }
		}
	     }
	     break;
	case 1600:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VBFlags & (VB_301C | VB_302B | VB_302LV | VB_302ELV)) {
	           if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
		}
	     }
	     break;
	case 1680:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VBFlags & (VB_301C | VB_302B | VB_302LV | VB_302ELV)) {
	           if(VDisplay == 1050) ModeIndex = ModeIndex_1680x1050[Depth];
		}
	     }
	     break;
      }
   }

   return ModeIndex;
}

USHORT
SiS_GetModeID_TV(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay, int Depth)
{
   USHORT ModeIndex = 0;

   if(VBFlags & VB_CHRONTEL) {

      switch(HDisplay)
      {
      	case 512:
	     if(VGAEngine == SIS_315_VGA) {
		if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
	     }
	     break;
	case 640:
	     if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
	     else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
	     break;
	case 800:
	     if(VDisplay == 600) ModeIndex = ModeIndex_800x600[Depth];
	     break;
	case 1024:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VDisplay == 768) ModeIndex = ModeIndex_1024x768[Depth];
	     }
	     break;
      }

   } else if(VBFlags & VB_SISTVBRIDGE) {

      switch(HDisplay)
      {
	case 320:
     	     if(VDisplay == 200)      ModeIndex = ModeIndex_320x200[Depth];
	     else if(VDisplay == 240) ModeIndex = ModeIndex_320x240[Depth];
             break;
        case 400:
             if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
             break;
      	case 512:
	     if( ((VBFlags & TV_YPBPR) && (VBFlags & (TV_YPBPR750P | TV_YPBPR1080I))) ||
	         (VBFlags & TV_HIVISION) 					      ||
	         ((!(VBFlags & (TV_YPBPR | TV_PALM))) && (VBFlags & TV_PAL)) ) {
	        if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
	     }
	     break;
	case 640:
	     if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
	     else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
	     break;
	case 720:
	     if((!(VBFlags & TV_HIVISION)) && (!((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I)))) {
                if(VDisplay == 480) {
		   if((VBFlags & TV_YPBPR) || (VBFlags & (TV_NTSC | TV_PALM)))
                      ModeIndex = ModeIndex_720x480[Depth];
                } else if(VDisplay == 576) {
		   if((!(VBFlags & (TV_YPBPR | TV_PALM))) && (VBFlags & TV_PAL))
                      ModeIndex = ModeIndex_720x576[Depth];
                }
	     }
             break;
	case 768:
	     if((!(VBFlags & TV_HIVISION)) && (!((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I)))) {
	        if((!(VBFlags & (TV_YPBPR | TV_PALM))) && (VBFlags & TV_PAL)) {
          	   if(VDisplay == 576) ModeIndex = ModeIndex_768x576[Depth];
		}
             }
	     break;
	case 800:
	     if(VDisplay == 600) ModeIndex = ModeIndex_800x600[Depth];
	     else if(VDisplay == 480) {
	        if((VBFlags & TV_HIVISION) || ((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I))) {
		   ModeIndex = ModeIndex_800x480[Depth];
		}
	     }
	     break;
	case 1024:
	     if(VDisplay == 768) {
		if(VBFlags & (VB_301B|VB_301C|VB_302B|VB_301LV|VB_302LV|VB_302ELV)) {
		   ModeIndex = ModeIndex_1024x768[Depth];
		}
	     } else if(VDisplay == 576) {
	        if((VBFlags & TV_HIVISION) || ((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I))) {
		   ModeIndex = ModeIndex_1024x576[Depth];
		}
	     }
	     break;
	case 1280:
	     if(VDisplay == 720) {
	        if((VBFlags & TV_HIVISION) ||
		   ((VBFlags & TV_YPBPR) && (VBFlags & (TV_YPBPR1080I | TV_YPBPR750P)))) {
	           ModeIndex = ModeIndex_1280x720[Depth];
		}
	     } else if(VDisplay == 1024) {
	        if((VBFlags & TV_HIVISION) ||
		   ((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I))) {
	           ModeIndex = ModeIndex_1280x1024[Depth];
		}
	     }
	     break;
      }
   }
   return ModeIndex;
}

USHORT
SiS_GetModeID_VGA2(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay, int Depth)
{
   USHORT ModeIndex = 0;

   if(!(VBFlags & (VB_301|VB_301B|VB_301C|VB_302B))) return 0;

   switch(HDisplay)
   {
	case 320:
     	  	if(VDisplay == 200)      ModeIndex = ModeIndex_320x200[Depth];
	  	else if(VDisplay == 240) ModeIndex = ModeIndex_320x240[Depth];
          	break;
     	case 400:
          	if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
          	break;
  	case 512:
		if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
		break;
	case 640:
		if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
		else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
		break;
	case 720:
		if(VDisplay == 480)      ModeIndex = ModeIndex_720x480[Depth];
		else if(VDisplay == 576) ModeIndex = ModeIndex_720x576[Depth];
		break;
	case 768:
          	if(VDisplay == 576) ModeIndex = ModeIndex_768x576[Depth];
	  	break;
	case 800:
		if(VDisplay == 600)      ModeIndex = ModeIndex_800x600[Depth];
   	        else if(VDisplay == 480) ModeIndex = ModeIndex_800x480[Depth];
		break;
	case 848:
		if(VDisplay == 480) ModeIndex = ModeIndex_848x480[Depth];
		break;
	case 856:
		if(VDisplay == 480) ModeIndex = ModeIndex_856x480[Depth];
		break;
	case 1024:
		if(VDisplay == 768)      ModeIndex = ModeIndex_1024x768[Depth];
		else if(VDisplay == 576) ModeIndex = ModeIndex_1024x576[Depth];
		break;
	case 1152:
	        if(VDisplay == 864)    ModeIndex = ModeIndex_1152x864[Depth];
		else if(VGAEngine == SIS_300_VGA) {
		   if(VDisplay == 768) ModeIndex = ModeIndex_1152x768[Depth];
		}
		break;
	case 1280:
	        if(VDisplay == 768) {
		   if(VGAEngine == SIS_300_VGA) {
		      ModeIndex = ModeIndex_300_1280x768[Depth];
		   } else {
		      ModeIndex = ModeIndex_310_1280x768[Depth];
		   }
		} else if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
		else if(VDisplay == 720)    ModeIndex = ModeIndex_1280x720[Depth];
		else if(VDisplay == 800)    ModeIndex = ModeIndex_1280x800[Depth];
		else if(VDisplay == 960)    ModeIndex = ModeIndex_1280x960[Depth];
		break;
        case 1360:
	        if(VDisplay == 768) ModeIndex = ModeIndex_1360x768[Depth];
                break;
        case 1400:
		if(VGAEngine == SIS_315_VGA) {
	           if(VDisplay == 1050) ModeIndex = ModeIndex_1400x1050[Depth];
		}
		break;
	case 1600:
		if(VGAEngine == SIS_315_VGA) {
		   if(VBFlags & (VB_301B|VB_301C|VB_302B)) {
	              if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
		   }
		}
		break;
	case 1680:
		if(VGAEngine == SIS_315_VGA) {
		   if(VBFlags & (VB_301B|VB_301C|VB_302B)) {
	              if(VDisplay == 1050) ModeIndex = ModeIndex_1680x1050[Depth];
		   }
		}
		break;
   }

   return ModeIndex;
}


/*********************************************/
/*          HELPER: SetReg, GetReg           */
/*********************************************/

void
SiS_SetReg(SISIOADDRESS port, USHORT index, USHORT data)
{
   OutPortByte(port,index);
   OutPortByte(port + 1,data);
}

void
SiS_SetRegByte(SISIOADDRESS port, USHORT data)
{
   OutPortByte(port,data);
}

void
SiS_SetRegShort(SISIOADDRESS port, USHORT data)
{
   OutPortWord(port,data);
}

void
SiS_SetRegLong(SISIOADDRESS port, ULONG data)
{
   OutPortLong(port,data);
}

UCHAR
SiS_GetReg(SISIOADDRESS port, USHORT index)
{
   OutPortByte(port,index);
   return(InPortByte(port + 1));
}

UCHAR
SiS_GetRegByte(SISIOADDRESS port)
{
   return(InPortByte(port));
}

USHORT
SiS_GetRegShort(SISIOADDRESS port)
{
   return(InPortWord(port));
}

ULONG
SiS_GetRegLong(SISIOADDRESS port)
{
   return(InPortLong(port));
}

void
SiS_SetRegANDOR(SISIOADDRESS Port,USHORT Index,USHORT DataAND,USHORT DataOR)
{
  USHORT temp;

  temp = SiS_GetReg(Port,Index);
  temp = (temp & (DataAND)) | DataOR;
  SiS_SetReg(Port,Index,temp);
}

void
SiS_SetRegAND(SISIOADDRESS Port,USHORT Index,USHORT DataAND)
{
  USHORT temp;

  temp = SiS_GetReg(Port,Index);
  temp &= DataAND;
  SiS_SetReg(Port,Index,temp);
}

void
SiS_SetRegOR(SISIOADDRESS Port,USHORT Index,USHORT DataOR)
{
  USHORT temp;

  temp = SiS_GetReg(Port,Index);
  temp |= DataOR;
  SiS_SetReg(Port,Index,temp);
}

/*********************************************/
/*      HELPER: DisplayOn, DisplayOff        */
/*********************************************/

void
SiS_DisplayOn(SiS_Private *SiS_Pr)
{
   SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x01,0xDF);
}

void
SiS_DisplayOff(SiS_Private *SiS_Pr)
{
   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x01,0x20);
}


/*********************************************/
/*        HELPER: Init Port Addresses        */
/*********************************************/

void
SiSRegInit(SiS_Private *SiS_Pr, SISIOADDRESS BaseAddr)
{
   SiS_Pr->SiS_P3c4 = BaseAddr + 0x14;
   SiS_Pr->SiS_P3d4 = BaseAddr + 0x24;
   SiS_Pr->SiS_P3c0 = BaseAddr + 0x10;
   SiS_Pr->SiS_P3ce = BaseAddr + 0x1e;
   SiS_Pr->SiS_P3c2 = BaseAddr + 0x12;
   SiS_Pr->SiS_P3ca = BaseAddr + 0x1a;
   SiS_Pr->SiS_P3c6 = BaseAddr + 0x16;
   SiS_Pr->SiS_P3c7 = BaseAddr + 0x17;
   SiS_Pr->SiS_P3c8 = BaseAddr + 0x18;
   SiS_Pr->SiS_P3c9 = BaseAddr + 0x19;
   SiS_Pr->SiS_P3cb = BaseAddr + 0x1b;
   SiS_Pr->SiS_P3cd = BaseAddr + 0x1d;
   SiS_Pr->SiS_P3da = BaseAddr + 0x2a;
   SiS_Pr->SiS_Part1Port = BaseAddr + SIS_CRT2_PORT_04;     /* Digital video interface registers (LCD) */
   SiS_Pr->SiS_Part2Port = BaseAddr + SIS_CRT2_PORT_10;     /* 301 TV Encoder registers */
   SiS_Pr->SiS_Part3Port = BaseAddr + SIS_CRT2_PORT_12;     /* 301 Macrovision registers */
   SiS_Pr->SiS_Part4Port = BaseAddr + SIS_CRT2_PORT_14;     /* 301 VGA2 (and LCD) registers */
   SiS_Pr->SiS_Part5Port = BaseAddr + SIS_CRT2_PORT_14 + 2; /* 301 palette address port registers */
   SiS_Pr->SiS_DDC_Port = BaseAddr + 0x14;                  /* DDC Port ( = P3C4, SR11/0A) */
   SiS_Pr->SiS_VidCapt = BaseAddr + SIS_VIDEO_CAPTURE;
   SiS_Pr->SiS_VidPlay = BaseAddr + SIS_VIDEO_PLAYBACK;
}

/*********************************************/
/*             HELPER: GetSysFlags           */
/*********************************************/

static void
SiS_GetSysFlags(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   unsigned char cr5f, temp1, temp2;

   /* 661 and newer: NEVER write non-zero to SR11[7:4] */
   /* (SR11 is used for DDC and in enable/disablebridge) */
   SiS_Pr->SiS_SensibleSR11 = FALSE;
   SiS_Pr->SiS_MyCR63 = 0x63;
   if(HwInfo->jChipType >= SIS_661) {
      SiS_Pr->SiS_SensibleSR11 = TRUE;
      SiS_Pr->SiS_MyCR63 = 0x53;
   }

   /* You should use the macros, not these flags directly */

   SiS_Pr->SiS_SysFlags = 0;
   if(HwInfo->jChipType == SIS_650) {
      cr5f = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f) & 0xf0;
      SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x5c,0x07);
      temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5c) & 0xf8;
      SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x5c,0xf8);
      temp2 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5c) & 0xf8;
      if((!temp1) || (temp2)) {
         switch(cr5f) {
	    case 0x80:
	    case 0x90:
	    case 0xc0:
	       SiS_Pr->SiS_SysFlags |= SF_IsM650;  break;
	    case 0xa0:
	    case 0xb0:
	    case 0xe0:
	       SiS_Pr->SiS_SysFlags |= SF_Is651;   break;
	 }
      } else {
         switch(cr5f) {
	    case 0x90:
	       temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5c) & 0xf8;
	       switch(temp1) {
	          case 0x00: SiS_Pr->SiS_SysFlags |= SF_IsM652; break;
		  case 0x40: SiS_Pr->SiS_SysFlags |= SF_IsM653; break;
		  default:   SiS_Pr->SiS_SysFlags |= SF_IsM650; break;
	       }
	       break;
	    case 0xb0:
	       SiS_Pr->SiS_SysFlags |= SF_Is652;  break;
	    default:
	       SiS_Pr->SiS_SysFlags |= SF_IsM650; break;
	 }
      }
   }
   if(HwInfo->jChipType == SIS_760) {
      temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x78);
      if(temp1 & 0x30) SiS_Pr->SiS_SysFlags |= SF_760UMA;
   }
}

/*********************************************/
/*         HELPER: Init PCI & Engines        */
/*********************************************/

static void
SiSInitPCIetc(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   switch(HwInfo->jChipType) {
   case SIS_300:
   case SIS_540:
   case SIS_630:
   case SIS_730:
      /* Set - PCI LINEAR ADDRESSING ENABLE (0x80)
       *     - RELOCATED VGA IO  (0x20)
       *     - MMIO ENABLE (0x1)
       */
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x20,0xa1);
      /*  - Enable 2D (0x40)
       *  - Enable 3D (0x02)
       *  - Enable 3D Vertex command fetch (0x10) ?
       *  - Enable 3D command parser (0x08) ?
       */
      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x5A);
      break;
   case SIS_315H:
   case SIS_315:
   case SIS_315PRO:
   case SIS_650:
   case SIS_740:
   case SIS_330:
   case SIS_661:
   case SIS_741:
   case SIS_660:
   case SIS_760:
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x20,0xa1);
      /*  - Enable 2D (0x40)
       *  - Enable 3D (0x02)
       *  - Enable 3D vertex command fetch (0x10)
       *  - Enable 3D command parser (0x08)
       *  - Enable 3D G/L transformation engine (0x80)
       */
      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0xDA);
      break;
   case SIS_550:
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x20,0xa1);
      /* No 3D engine ! */
      /*  - Enable 2D (0x40)
       */
      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x40);
   }
}

/*********************************************/
/*             HELPER: SetLVDSetc            */
/*********************************************/

void
SiSSetLVDSetc(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   ULONG   temp;

   SiS_Pr->SiS_IF_DEF_LVDS = 0;
   SiS_Pr->SiS_IF_DEF_TRUMPION = 0;
   SiS_Pr->SiS_IF_DEF_CH70xx = 0;
   SiS_Pr->SiS_IF_DEF_DSTN = 0;
   SiS_Pr->SiS_IF_DEF_FSTN = 0;
   SiS_Pr->SiS_IF_DEF_CONEX = 0;

   SiS_Pr->SiS_ChrontelInit = 0;

   /* Check for SiS30x first */
   temp = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x00);
   if((temp == 1) || (temp == 2)) return;

   switch(HwInfo->jChipType) {
#ifdef SIS300
   case SIS_540:
   case SIS_630:
   case SIS_730:
      	temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
      	temp = (temp & 0x0E) >> 1;
      	if((temp >= 2) && (temp <= 5)) 	SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)   		SiS_Pr->SiS_IF_DEF_TRUMPION = 1;
      	if((temp == 4) || (temp == 5)) {
		/* Save power status (and error check) - UNUSED */
		SiS_Pr->SiS_Backup70xx = SiS_GetCH700x(SiS_Pr, 0x0e);
		SiS_Pr->SiS_IF_DEF_CH70xx = 1;
        }
	break;
#endif
#ifdef SIS315H
   case SIS_550:
   case SIS_650:
   case SIS_740:
   case SIS_330:
        temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
      	temp = (temp & 0x0E) >> 1;
      	if((temp >= 2) && (temp <= 3)) 	SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)  			SiS_Pr->SiS_IF_DEF_CH70xx = 2;
        break;
   case SIS_661:
   case SIS_741:
   case SIS_660:
   case SIS_760:
        temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
      	temp = (temp & 0xe0) >> 5;
      	if((temp >= 2) && (temp <= 3)) 	SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)  			SiS_Pr->SiS_IF_DEF_CH70xx = 2;
	if(temp == 4)  			SiS_Pr->SiS_IF_DEF_CONEX = 1;  /* Not yet supported */
        break;
#endif
   default:
        break;
   }
}

/*********************************************/
/*          HELPER: Enable DSTN/FSTN         */
/*********************************************/

void
SiS_SetEnableDstn(SiS_Private *SiS_Pr, int enable)
{
   SiS_Pr->SiS_IF_DEF_DSTN = enable ? 1 : 0;
}

void
SiS_SetEnableFstn(SiS_Private *SiS_Pr, int enable)
{
   SiS_Pr->SiS_IF_DEF_FSTN = enable ? 1 : 0;
}

/*********************************************/
/*        HELPER: Determine ROM usage        */
/*********************************************/

BOOLEAN
SiSDetermineROMLayout661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
   USHORT romversoffs, romvmaj = 1, romvmin = 0;

   if(HwInfo->jChipType >= SIS_661) {
      romversoffs = ROMAddr[0x16] | (ROMAddr[0x17] << 8);
      if(romversoffs) {
	 if((ROMAddr[romversoffs+1] == '.') || (ROMAddr[romversoffs+4] == '.')) {
	    romvmaj = ROMAddr[romversoffs] - '0';
	    romvmin = ((ROMAddr[romversoffs+2] -'0') * 10) + (ROMAddr[romversoffs+3] - '0');
	 }
      }
      if((romvmaj != 0) || (romvmin >= 92)) {
	 return TRUE;
      }
   } else if(IS_SIS650740) {
      if((ROMAddr[0x1a] == 'N') &&
         (ROMAddr[0x1b] == 'e') &&
         (ROMAddr[0x1c] == 'w') &&
         (ROMAddr[0x1d] == 'V')) {
	 return TRUE;
      }
   }
   return FALSE;
}

static void
SiSDetermineROMUsage(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
   USHORT romptr = 0;

   SiS_Pr->SiS_UseROM = FALSE;
   SiS_Pr->SiS_ROMNew = FALSE;

   if((ROMAddr) && (HwInfo->UseROM)) {
      if(HwInfo->jChipType == SIS_300) {
         /* 300: We check if the code starts below 0x220 by
	  * checking the jmp instruction at the beginning
	  * of the BIOS image.
	  */
	 if((ROMAddr[3] == 0xe9) && ((ROMAddr[5] << 8) | ROMAddr[4]) > 0x21a)
	    SiS_Pr->SiS_UseROM = TRUE;
      } else if(HwInfo->jChipType < SIS_315H) {
	 /* Sony's VAIO BIOS 1.09 follows the standard, so perhaps
	  * the others do as well
	  */
	 SiS_Pr->SiS_UseROM = TRUE;
      } else {
         /* 315/330 series stick to the standard */
	 SiS_Pr->SiS_UseROM = TRUE;
	 if((SiS_Pr->SiS_ROMNew = SiSDetermineROMLayout661(SiS_Pr, HwInfo))) {
	    /* Find out about LCD data table entry size */
	    if((romptr = SISGETROMW(0x0102))) {
	       if(ROMAddr[romptr + (32 * 16)] == 0xff)
	          SiS_Pr->SiS661LCD2TableSize = 32;
	       else if(ROMAddr[romptr + (34 * 16)] == 0xff)
	          SiS_Pr->SiS661LCD2TableSize = 34;
	       else if(ROMAddr[romptr + (36 * 16)] == 0xff)
	          SiS_Pr->SiS661LCD2TableSize = 36;
	    }
	 }
      }
   }
}

/*********************************************/
/*        HELPER: SET SEGMENT REGISTERS      */
/*********************************************/

static void
SiS_SetSegRegLower(SiS_Private *SiS_Pr, USHORT value)
{
   USHORT temp;

   value &= 0x00ff;
   temp = SiS_GetRegByte(SiS_Pr->SiS_P3cb) & 0xf0;
   temp |= (value >> 4);
   SiS_SetRegByte(SiS_Pr->SiS_P3cb, temp);
   temp = SiS_GetRegByte(SiS_Pr->SiS_P3cd) & 0xf0;
   temp |= (value & 0x0f);
   SiS_SetRegByte(SiS_Pr->SiS_P3cd, temp);
}

static void
SiS_SetSegRegUpper(SiS_Private *SiS_Pr, USHORT value)
{
   USHORT temp;

   value &= 0x00ff;
   temp = SiS_GetRegByte(SiS_Pr->SiS_P3cb) & 0x0f;
   temp |= (value & 0xf0);
   SiS_SetRegByte(SiS_Pr->SiS_P3cb, temp);
   temp = SiS_GetRegByte(SiS_Pr->SiS_P3cd) & 0x0f;
   temp |= (value << 4);
   SiS_SetRegByte(SiS_Pr->SiS_P3cd, temp);
}

static void
SiS_SetSegmentReg(SiS_Private *SiS_Pr, USHORT value)
{
   SiS_SetSegRegLower(SiS_Pr, value);
   SiS_SetSegRegUpper(SiS_Pr, value);
}

static void
SiS_ResetSegmentReg(SiS_Private *SiS_Pr)
{
   SiS_SetSegmentReg(SiS_Pr, 0);
}

static void
SiS_SetSegmentRegOver(SiS_Private *SiS_Pr, USHORT value)
{
   USHORT temp = value >> 8;

   temp &= 0x07;
   temp |= (temp << 4);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x1d,temp);
   SiS_SetSegmentReg(SiS_Pr, value);
}

static void
SiS_ResetSegmentRegOver(SiS_Private *SiS_Pr)
{
   SiS_SetSegmentRegOver(SiS_Pr, 0);
}

static void
SiS_ResetSegmentRegisters(SiS_Private *SiS_Pr,PSIS_HW_INFO HwInfo)
{
   if((IS_SIS65x) || (HwInfo->jChipType >= SIS_661)) {
      SiS_ResetSegmentReg(SiS_Pr);
      SiS_ResetSegmentRegOver(SiS_Pr);
   }
}

/*********************************************/
/*             HELPER: GetVBType             */
/*********************************************/

void
SiS_GetVBType(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT flag=0, rev=0, nolcd=0;

  SiS_Pr->SiS_VBType = 0;

  if((SiS_Pr->SiS_IF_DEF_LVDS) || (SiS_Pr->SiS_IF_DEF_CONEX))
     return;

  flag = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x00);

  if(flag > 3) return;

  rev = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x01);

  if(flag >= 2) {
     SiS_Pr->SiS_VBType = VB_SIS302B;
  } else if(flag == 1) {
     if(rev >= 0xC0) {
       	SiS_Pr->SiS_VBType = VB_SIS301C;
     } else if(rev >= 0xB0) {
       	SiS_Pr->SiS_VBType = VB_SIS301B;
	/* Check if 30xB DH version (no LCD support, use Panel Link instead) */
    	nolcd = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x23);
        if(!(nolcd & 0x02)) SiS_Pr->SiS_VBType |= VB_NoLCD;
     } else {
        SiS_Pr->SiS_VBType = VB_SIS301;
     }
  }
  if(SiS_Pr->SiS_VBType & (VB_SIS301B | VB_SIS301C | VB_SIS302B)) {
     if(rev >= 0xE0) {
	flag = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x39);
	if(flag == 0xff) SiS_Pr->SiS_VBType = VB_SIS302LV;
	else 	 	 SiS_Pr->SiS_VBType = VB_SIS302ELV;
     } else if(rev >= 0xD0) {
	SiS_Pr->SiS_VBType = VB_SIS301LV;
     }
  }
}

/*********************************************/
/*            HELPER: GetDRAMSize            */
/*********************************************/

#ifndef LINUX_XF86
static ULONG
GetDRAMSize(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  ULONG   AdapterMemorySize = 0;
#ifdef SIS315H
  USHORT  counter;
#endif

  switch(HwInfo->jChipType) {
#ifdef SIS315H
  case SIS_315H:
  case SIS_315:
  case SIS_315PRO:
    	counter = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
	AdapterMemorySize = 1 << ((counter & 0xF0) >> 4);
	counter >>= 2;
	counter &= 0x03;
	if(counter == 0x02) {
		AdapterMemorySize += (AdapterMemorySize / 2);      /* DDR asymetric */
	} else if(counter != 0) {
		AdapterMemorySize <<= 1;                           /* SINGLE_CHANNEL_2_RANK or DUAL_CHANNEL_1_RANK */
	}
	AdapterMemorySize *= (1024*1024);
        break;

  case SIS_330:
    	counter = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
	AdapterMemorySize = 1 << ((counter & 0xF0) >> 4);
	counter &= 0x0c;
	if(counter != 0) {
		AdapterMemorySize <<= 1;
	}
	AdapterMemorySize *= (1024*1024);
	break;

  case SIS_550:
  case SIS_650:
  case SIS_740:
  	counter = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14) & 0x3F;
      	counter++;
      	AdapterMemorySize = counter * 4;
      	AdapterMemorySize *= (1024*1024);
	break;

  case SIS_661:
  case SIS_741:
        counter = (SiS_GetReg(SiS_Pr->SiS_P3c4,0x79) & 0xf0) >> 4;
	AdapterMemorySize = 1 << counter;
      	AdapterMemorySize *= (1024*1024);
        break;

  case SIS_660:
  case SIS_760:
        counter = (SiS_GetReg(SiS_Pr->SiS_P3c4,0x79) & 0xf0) >> 4;
	if(counter) {
	   AdapterMemorySize = 1 << counter;
      	   AdapterMemorySize *= (1024*1024);
	}
	counter = SiS_GetReg(SiS_Pr->SiS_P3c4,0x78) & 0x30;
	if(counter) {
	   if(counter == 0x10) AdapterMemorySize += (32 * 1024 * 1024);
	   else		       AdapterMemorySize += (64 * 1024 * 1024);
	}
	break;
#endif

#ifdef SIS300
  case SIS_300:
  case SIS_540:
  case SIS_630:
  case SIS_730:
      	AdapterMemorySize = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14) & 0x3F;
      	AdapterMemorySize++;
      	AdapterMemorySize *= (1024*1024);
	break;
#endif
  default:
        break;
  }

  return AdapterMemorySize;
}
#endif

/*********************************************/
/*           HELPER: Check RAM size          */
/*********************************************/

#ifndef LINUX_XF86
static BOOLEAN
SiS_CheckMemorySize(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                    USHORT ModeNo, USHORT ModeIdIndex)
{
  USHORT memorysize,modeflag;
  ULONG  temp;

  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     if(ModeNo <= 0x13) {
        modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     } else {
        modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     }
  }

  memorysize = modeflag & MemoryInfoFlag;
  memorysize >>= MemorySizeShift;		/* Get required memory size */
  memorysize++;

  temp = GetDRAMSize(SiS_Pr, HwInfo);       	/* Get adapter memory size (in MB) */
  temp /= (1024*1024);

  if(temp < memorysize) return(FALSE);
  else return(TRUE);
}
#endif

/*********************************************/
/*           HELPER: Get DRAM type           */
/*********************************************/

#ifdef SIS315H
static UCHAR
SiS_Get310DRAMType(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   UCHAR data, temp;

   if(*SiS_Pr->pSiS_SoftSetting & SoftDRAMType) {
     data = *SiS_Pr->pSiS_SoftSetting & 0x03;
   } else {
     if(HwInfo->jChipType >= SIS_660) {
        /* data = SiS_GetReg(SiS_Pr->SiS_P3d4,0x78) & 0x07; */
	data = ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x78) & 0xc0) >> 6);
     } else if(HwInfo->jChipType >= SIS_661) {
        data = SiS_GetReg(SiS_Pr->SiS_P3d4,0x78) & 0x07;
     } else if(IS_SIS550650740) {
        data = SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x07;
     } else {	/* 315, 330 */
        data = SiS_GetReg(SiS_Pr->SiS_P3c4,0x3a) & 0x03;
        if(HwInfo->jChipType == SIS_330) {
	   if(data > 1) {
	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f) & 0x30;
	      switch(temp) {
	      case 0x00: data = 1; break;
	      case 0x10: data = 3; break;
	      case 0x20: data = 3; break;
	      case 0x30: data = 2; break;
	      }
	   } else {
	      data = 0;
	   }
	}
     }
   }

   return data;
}

USHORT
SiS_GetMCLK(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT index;

  index = SiS_Get310DRAMType(SiS_Pr, HwInfo);
  if(HwInfo->jChipType >= SIS_661) {
     return(SiS_Pr->SiS_MCLKData_0[index].CLOCK);
  } else if(index >= 4) {
     index -= 4;
     return(SiS_Pr->SiS_MCLKData_1[index].CLOCK);
  } else {
     return(SiS_Pr->SiS_MCLKData_0[index].CLOCK);
  }
}
#endif

/*********************************************/
/*           HELPER: ClearBuffer             */
/*********************************************/

#ifndef LINUX_XF86
static void
SiS_ClearBuffer(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo)
{
  UCHAR   *VideoMemoryAddress = HwInfo->pjVideoMemoryAddress;
  ULONG   AdapterMemorySize  = (ULONG)HwInfo->ulVideoMemorySize;
  USHORT  *pBuffer;
  int i;

  if(SiS_Pr->SiS_ModeType >= ModeEGA) {
     if(ModeNo > 0x13) {
        AdapterMemorySize = GetDRAMSize(SiS_Pr, HwInfo);
        SiS_SetMemory(VideoMemoryAddress,AdapterMemorySize,0);
     } else {
        pBuffer = (USHORT *)VideoMemoryAddress;
        for(i=0; i<0x4000; i++)
           pBuffer[i] = 0x0000;
     }
  } else {
     pBuffer = (USHORT *)VideoMemoryAddress;
     if(SiS_Pr->SiS_ModeType < ModeCGA) {
        for(i=0; i<0x4000; i++)
           pBuffer[i] = 0x0720;
     } else {
        SiS_SetMemory(VideoMemoryAddress,0x8000,0);
     }
  }
}
#endif

/*********************************************/
/*           HELPER: SearchModeID            */
/*********************************************/

BOOLEAN
SiS_SearchModeID(SiS_Private *SiS_Pr, USHORT *ModeNo, USHORT *ModeIdIndex)
{
   UCHAR VGAINFO = SiS_Pr->SiS_VGAINFO;

   if(*ModeNo <= 0x13) {

      if((*ModeNo) <= 0x05) (*ModeNo) |= 0x01;

      for(*ModeIdIndex = 0; ;(*ModeIdIndex)++) {
         if(SiS_Pr->SiS_SModeIDTable[*ModeIdIndex].St_ModeID == (*ModeNo)) break;
         if(SiS_Pr->SiS_SModeIDTable[*ModeIdIndex].St_ModeID == 0xFF)   return FALSE;
      }

      if(*ModeNo == 0x07) {
          if(VGAINFO & 0x10) (*ModeIdIndex)++;   /* 400 lines */
          /* else 350 lines */
      }
      if(*ModeNo <= 0x03) {
         if(!(VGAINFO & 0x80)) (*ModeIdIndex)++;
         if(VGAINFO & 0x10)    (*ModeIdIndex)++; /* 400 lines  */
         /* else 350 lines  */
      }
      /* else 200 lines  */

   } else {

      for(*ModeIdIndex = 0; ;(*ModeIdIndex)++) {
         if(SiS_Pr->SiS_EModeIDTable[*ModeIdIndex].Ext_ModeID == (*ModeNo)) break;
         if(SiS_Pr->SiS_EModeIDTable[*ModeIdIndex].Ext_ModeID == 0xFF)      return FALSE;
      }

   }
   return TRUE;
}

/*********************************************/
/*            HELPER: GetModePtr             */
/*********************************************/

UCHAR
SiS_GetModePtr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex)
{
   UCHAR index;

   if(ModeNo <= 0x13) {
     	index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_StTableIndex;
   } else {
     	if(SiS_Pr->SiS_ModeType <= 0x02) index = 0x1B;    /* 02 -> ModeEGA  */
     	else index = 0x0F;
   }
   return index;
}

/*********************************************/
/*           HELPER: LowModeTests            */
/*********************************************/

static BOOLEAN
SiS_DoLowModeTest(SiS_Private *SiS_Pr, USHORT ModeNo, PSIS_HW_INFO HwInfo)
{
    USHORT temp,temp1,temp2;

    if((ModeNo != 0x03) && (ModeNo != 0x10) && (ModeNo != 0x12))
       return(1);
    temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x11);
    SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x11,0x80);
    temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x00);
    SiS_SetReg(SiS_Pr->SiS_P3d4,0x00,0x55);
    temp2 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x00);
    SiS_SetReg(SiS_Pr->SiS_P3d4,0x00,temp1);
    SiS_SetReg(SiS_Pr->SiS_P3d4,0x11,temp);
    if((HwInfo->jChipType >= SIS_315H) ||
       (HwInfo->jChipType == SIS_300)) {
       if(temp2 == 0x55) return(0);
       else return(1);
    } else {
       if(temp2 != 0x55) return(1);
       else {
          SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x35,0x01);
          return(0);
       }
    }
}

static void
SiS_SetLowModeTest(SiS_Private *SiS_Pr, USHORT ModeNo, PSIS_HW_INFO HwInfo)
{
    if(SiS_DoLowModeTest(SiS_Pr, ModeNo, HwInfo)) {
       SiS_Pr->SiS_SetFlag |= LowModeTests;
    }
}

/*********************************************/
/*            HELPER: ENABLE CRT1            */
/*********************************************/

static void
SiS_SetupCR5x(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(IS_SIS650) {
	 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	 if(IS_SIS651) SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x51,0x20);
	 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
      } else if(IS_SIS661741660760) {
         SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x61,0xf7);
	 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
	 if(!SiS_Pr->SiS_ROMNew) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x3a,0xef);
	 }
      }
   }
}

static void
SiS_HandleCRT1(SiS_Private *SiS_Pr)
{
  SiS_SetRegAND(SiS_Pr->SiS_P3d4,SiS_Pr->SiS_MyCR63,0xbf);
#if 0
  if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x15) & 0x01)) {
     if((SiS_GetReg(SiS_Pr->SiS_P3c4,0x15) & 0x0a) ||
        (SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x01)) {
        SiS_SetRegOR(SiS_Pr->SiS_P3d4,SiS_Pr->SiS_MyCR63,0x40);
     }
  }
#endif
}

/*********************************************/
/*           HELPER: GetColorDepth           */
/*********************************************/

USHORT
SiS_GetColorDepth(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex)
{
  USHORT ColorDepth[6] = { 1, 2, 4, 4, 6, 8};
  SHORT  index;
  USHORT modeflag;

  /* Do NOT check UseCustomMode, will skrew up FIFO */
  if(ModeNo == 0xfe) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     if(ModeNo <= 0x13)
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     else
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }

  index = (modeflag & ModeInfoFlag) - ModeEGA;
  if(index < 0) index = 0;
  return(ColorDepth[index]);
}

/*********************************************/
/*             HELPER: GetOffset             */
/*********************************************/

USHORT
SiS_GetOffset(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
              USHORT RefreshRateTableIndex,PSIS_HW_INFO HwInfo)
{
  USHORT xres, temp, colordepth, infoflag;

  if(SiS_Pr->UseCustomMode) {
     infoflag = SiS_Pr->CInfoFlag;
     xres = SiS_Pr->CHDisplay;
  } else {
     infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
     xres = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes;
  }

  colordepth = SiS_GetColorDepth(SiS_Pr,ModeNo,ModeIdIndex);

  temp = xres / 16;
  if(infoflag & InterlaceMode) temp <<= 1;
  temp *= colordepth;
  if(xres % 16) {
     colordepth >>= 1;
     temp += colordepth;
  }

  return(temp);
}

/*********************************************/
/*                   SEQ                     */
/*********************************************/

static void
SiS_SetSeqRegs(SiS_Private *SiS_Pr, USHORT StandTableIndex, PSIS_HW_INFO HwInfo)
{
   UCHAR SRdata;
   USHORT i;

   SiS_SetReg(SiS_Pr->SiS_P3c4,0x00,0x03);           	/* Set SR0  */

   SRdata = SiS_Pr->SiS_StandTable[StandTableIndex].SR[0];

   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
         SRdata |= 0x01;
      }
      if(HwInfo->jChipType >= SIS_661) {
         if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToTV)) {
	    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
               SRdata |= 0x01;          		/* 8 dot clock  */
            }
	 }
      } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
         if(SiS_Pr->SiS_VBType & VB_NoLCD) {
	    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
               SRdata |= 0x01;          		/* 8 dot clock  */
            }
	 }
      }
   }

   if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
      if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
         if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
            if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
               SRdata |= 0x01;        			/* 8 dot clock  */
            }
         }
      }
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
         if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
            SRdata |= 0x01;          			/* 8 dot clock  */
         }
      }
   }

   SRdata |= 0x20;                			/* screen off  */

   SiS_SetReg(SiS_Pr->SiS_P3c4,0x01,SRdata);

   for(i = 2; i <= 4; i++) {
      SRdata = SiS_Pr->SiS_StandTable[StandTableIndex].SR[i-1];
      SiS_SetReg(SiS_Pr->SiS_P3c4,i,SRdata);
   }
}

/*********************************************/
/*                  MISC                     */
/*********************************************/

static void
SiS_SetMiscRegs(SiS_Private *SiS_Pr, USHORT StandTableIndex, PSIS_HW_INFO HwInfo)
{
   UCHAR Miscdata;

   Miscdata = SiS_Pr->SiS_StandTable[StandTableIndex].MISC;

   if(HwInfo->jChipType < SIS_661) {
      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
         if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
            Miscdata |= 0x0C;
         }
      }
   }

   SiS_SetRegByte(SiS_Pr->SiS_P3c2,Miscdata);
}

/*********************************************/
/*                  CRTC                     */
/*********************************************/

static void
SiS_SetCRTCRegs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                USHORT StandTableIndex)
{
  UCHAR CRTCdata;
  USHORT i;

  SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);                       /* Unlock CRTC */

  for(i = 0; i <= 0x18; i++) {
     CRTCdata = SiS_Pr->SiS_StandTable[StandTableIndex].CRTC[i];
     SiS_SetReg(SiS_Pr->SiS_P3d4,i,CRTCdata);                     /* Set CRTC(3d4) */
  }
  if(HwInfo->jChipType >= SIS_661) {
     SiS_SetupCR5x(SiS_Pr, HwInfo);
     for(i = 0x13; i <= 0x14; i++) {
        CRTCdata = SiS_Pr->SiS_StandTable[StandTableIndex].CRTC[i];
        SiS_SetReg(SiS_Pr->SiS_P3d4,i,CRTCdata);
     }
  } else if( ( (HwInfo->jChipType == SIS_630) ||
               (HwInfo->jChipType == SIS_730) )  &&
             (HwInfo->jChipRevision >= 0x30) ) {       	   /* for 630S0 */
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToTV)) {
           SiS_SetReg(SiS_Pr->SiS_P3d4,0x18,0xFE);
        }
     }
  }
}

/*********************************************/
/*                   ATT                     */
/*********************************************/

static void
SiS_SetATTRegs(SiS_Private *SiS_Pr, USHORT StandTableIndex,
               PSIS_HW_INFO HwInfo)
{
   UCHAR ARdata;
   USHORT i;

   for(i = 0; i <= 0x13; i++) {
      ARdata = SiS_Pr->SiS_StandTable[StandTableIndex].ATTR[i];
#if 0
      if((i <= 0x0f) || (i == 0x11)) {
         if(ds:489 & 0x08) {
	    continue;
         }
      }
#endif
      if(i == 0x13) {
         /* Pixel shift. If screen on LCD or TV is shifted left or right,
          * this might be the cause.
          */
         if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
            if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)  ARdata=0;
         }
         if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
            if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
               if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
                  if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) ARdata=0;
               }
            }
         }
	 if(HwInfo->jChipType >= SIS_661) {
	    if(SiS_Pr->SiS_VBInfo & (SetCRT2ToTV | SetCRT2ToLCD)) {
	       if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) ARdata=0;
	    }
	 } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
            if(HwInfo->jChipType >= SIS_315H) {
	       if(IS_SIS550650740660) {
	          /* 315, 330 don't do this */
	          if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	             if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) ARdata=0;
	          } else {
	             ARdata = 0;
	          }
	       }
	    } else {
               if(SiS_Pr->SiS_VBInfo & SetInSlaveMode)  ARdata=0;
	    }
         }
      }
      SiS_GetRegByte(SiS_Pr->SiS_P3da);                         /* reset 3da  */
      SiS_SetRegByte(SiS_Pr->SiS_P3c0,i);                       /* set index  */
      SiS_SetRegByte(SiS_Pr->SiS_P3c0,ARdata);                  /* set data   */
   }
   SiS_GetRegByte(SiS_Pr->SiS_P3da);                            /* reset 3da  */
   SiS_SetRegByte(SiS_Pr->SiS_P3c0,0x14);                       /* set index  */
   SiS_SetRegByte(SiS_Pr->SiS_P3c0,0x00);                       /* set data   */

   SiS_GetRegByte(SiS_Pr->SiS_P3da);
   SiS_SetRegByte(SiS_Pr->SiS_P3c0,0x20);			/* Enable Attribute  */
   SiS_GetRegByte(SiS_Pr->SiS_P3da);
}

/*********************************************/
/*                   GRC                     */
/*********************************************/

static void
SiS_SetGRCRegs(SiS_Private *SiS_Pr, USHORT StandTableIndex)
{
   UCHAR GRdata;
   USHORT i;

   for(i = 0; i <= 0x08; i++) {
      GRdata = SiS_Pr->SiS_StandTable[StandTableIndex].GRC[i];
      SiS_SetReg(SiS_Pr->SiS_P3ce,i,GRdata);
   }

   if(SiS_Pr->SiS_ModeType > ModeVGA) {
      /* 256 color disable */
      SiS_SetRegAND(SiS_Pr->SiS_P3ce,0x05,0xBF);
   }
}

/*********************************************/
/*          CLEAR EXTENDED REGISTERS         */
/*********************************************/

static void
SiS_ClearExt1Regs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo)
{
  USHORT i;

  for(i = 0x0A; i <= 0x0E; i++) {
     SiS_SetReg(SiS_Pr->SiS_P3c4,i,0x00);
  }

  if(HwInfo->jChipType >= SIS_315H) {
     SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x37,0xFE);
     if(ModeNo <= 0x13) {
        if(ModeNo == 0x06 || ModeNo >= 0x0e) {
	   SiS_SetReg(SiS_Pr->SiS_P3c4,0x0e,0x20);
	}
     }
  }
}

/*********************************************/
/*                 RESET VCLK                */
/*********************************************/

static void
SiS_ResetCRT1VCLK(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   if(HwInfo->jChipType >= SIS_315H) {
      if(HwInfo->jChipType < SIS_661) {
         if(SiS_Pr->SiS_IF_DEF_LVDS == 0) return;
      }
   } else {
      if((SiS_Pr->SiS_IF_DEF_LVDS == 0) &&
         (!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) ) {
	 return;
      }
   }

   if(HwInfo->jChipType >= SIS_315H) {
      SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x31,0xCF,0x20);
   } else {
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x20);
   }
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2B,SiS_Pr->SiS_VCLKData[1].SR2B);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2C,SiS_Pr->SiS_VCLKData[1].SR2C);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2D,0x80);
   if(HwInfo->jChipType >= SIS_315H) {
      SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x31,0xcf,0x10);
   } else {
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x10);
   }
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2B,SiS_Pr->SiS_VCLKData[0].SR2B);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2C,SiS_Pr->SiS_VCLKData[0].SR2C);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2D,0x80);
}

/*********************************************/
/*                  SYNC                     */
/*********************************************/

static void
SiS_SetCRT1Sync(SiS_Private *SiS_Pr, USHORT RefreshRateTableIndex)
{
  USHORT sync;

  if(SiS_Pr->UseCustomMode) {
     sync = SiS_Pr->CInfoFlag >> 8;
  } else {
     sync = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag >> 8;
  }

  sync &= 0xC0;
  sync |= 0x2f;
  SiS_SetRegByte(SiS_Pr->SiS_P3c2,sync);
}

/*********************************************/
/*                  CRTC/2                   */
/*********************************************/

static void
SiS_SetCRT1CRTC(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex,
		PSIS_HW_INFO HwInfo)
{
  UCHAR  index;
  USHORT temp,i,j,modeflag;

  SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);		/* unlock cr0-7 */

  if(SiS_Pr->UseCustomMode) {

     modeflag = SiS_Pr->CModeFlag;

     for(i=0,j=0;i<=7;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
     }
     for(j=0x10;i<=10;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
     }
     for(j=0x15;i<=12;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
     }
     for(j=0x0A;i<=15;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3c4,j,SiS_Pr->CCRT1CRTC[i]);
     }

     temp = SiS_Pr->CCRT1CRTC[16] & 0xE0;
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x0E,temp);

     temp = (SiS_Pr->CCRT1CRTC[16] & 0x01) << 5;
     if(modeflag & DoubleScanMode) temp |= 0x80;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0x5F,temp);

  } else {

     if(ModeNo <= 0x13) {
        modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     } else {
        modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     }

     index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;

     for(i=0,j=0;i<=7;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
     }
     for(j=0x10;i<=10;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
     }
     for(j=0x15;i<=12;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
     }
     for(j=0x0A;i<=15;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3c4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
     }

     temp = SiS_Pr->SiS_CRT1Table[index].CR[16] & 0xE0;
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x0E,temp);

     temp = ((SiS_Pr->SiS_CRT1Table[index].CR[16]) & 0x01) << 5;
     if(modeflag & DoubleScanMode)  temp |= 0x80;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0x5F,temp);

  }

  if(SiS_Pr->SiS_ModeType > ModeVGA) SiS_SetReg(SiS_Pr->SiS_P3d4,0x14,0x4F);
}

/*********************************************/
/*               OFFSET & PITCH              */
/*********************************************/
/*  (partly overruled by SetPitch() in XF86) */
/*********************************************/

static void
SiS_SetCRT1Offset(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                  USHORT RefreshRateTableIndex,
		  PSIS_HW_INFO HwInfo)
{
   USHORT temp, DisplayUnit, infoflag;

   if(SiS_Pr->UseCustomMode) {
      infoflag = SiS_Pr->CInfoFlag;
   } else {
      infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
   }

   DisplayUnit = SiS_GetOffset(SiS_Pr,ModeNo,ModeIdIndex,
                     	       RefreshRateTableIndex,HwInfo);

   temp = (DisplayUnit >> 8) & 0x0f;
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0xF0,temp);

   temp = DisplayUnit & 0xFF;
   SiS_SetReg(SiS_Pr->SiS_P3d4,0x13,temp);

   if(infoflag & InterlaceMode) DisplayUnit >>= 1;

   DisplayUnit <<= 5;
   temp = (DisplayUnit & 0xff00) >> 8;
   if(DisplayUnit & 0xff) temp++;
   temp++;
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x10,temp);
}

/*********************************************/
/*                  VCLK                     */
/*********************************************/

static void
SiS_SetCRT1VCLK(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                PSIS_HW_INFO HwInfo, USHORT RefreshRateTableIndex)
{
  USHORT  index=0, clka, clkb;

  if(SiS_Pr->UseCustomMode) {
     clka = SiS_Pr->CSR2B;
     clkb = SiS_Pr->CSR2C;
  } else {
     index = SiS_GetVCLK2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
     if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
        clka = SiS_Pr->SiS_VBVCLKData[index].Part4_A;
	clkb = SiS_Pr->SiS_VBVCLKData[index].Part4_B;
     } else {
        clka = SiS_Pr->SiS_VCLKData[index].SR2B;
	clkb = SiS_Pr->SiS_VCLKData[index].SR2C;
     }
  }

  if(HwInfo->jChipType >= SIS_315H) {
     SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x31,0xCF);
  } else {
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x00);
  }

  SiS_SetReg(SiS_Pr->SiS_P3c4,0x2B,clka);
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x2C,clkb);

  if(HwInfo->jChipType >= SIS_315H) {
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x2D,0x01);
  } else {
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x2D,0x80);
  }
}

/*********************************************/
/*                  FIFO                     */
/*********************************************/

#ifdef SIS300
static USHORT
SiS_DoCalcDelay(SiS_Private *SiS_Pr, USHORT MCLK, USHORT VCLK, USHORT colordepth, USHORT key)
{
  const UCHAR ThLowA[]   = { 61, 3,52, 5,68, 7,100,11,
                             43, 3,42, 5,54, 7, 78,11,
                             34, 3,37, 5,47, 7, 67,11 };

  const UCHAR ThLowB[]   = { 81, 4,72, 6,88, 8,120,12,
                             55, 4,54, 6,66, 8, 90,12,
                             42, 4,45, 6,55, 8, 75,12 };

  const UCHAR ThTiming[] = {  1, 2, 2, 3, 0, 1,  1, 2 };

  USHORT tempah, tempal, tempcl, tempbx, temp;
  ULONG  longtemp;

  tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x18);
  tempah &= 0x62;
  tempah >>= 1;
  tempal = tempah;
  tempah >>= 3;
  tempal |= tempah;
  tempal &= 0x07;
  tempcl = ThTiming[tempal];
  tempbx = SiS_GetReg(SiS_Pr->SiS_P3c4,0x16);
  tempbx >>= 6;
  tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
  tempah >>= 4;
  tempah &= 0x0c;
  tempbx |= tempah;
  tempbx <<= 1;
  if(key == 0) {
     tempal = ThLowA[tempbx + 1];
     tempal *= tempcl;
     tempal += ThLowA[tempbx];
  } else {
     tempal = ThLowB[tempbx + 1];
     tempal *= tempcl;
     tempal += ThLowB[tempbx];
  }
  longtemp = tempal * VCLK * colordepth;
  temp = longtemp % (MCLK * 16);
  longtemp /= (MCLK * 16);
  if(temp) longtemp++;
  return((USHORT)longtemp);
}

static USHORT
SiS_CalcDelay(SiS_Private *SiS_Pr, USHORT VCLK, USHORT colordepth, USHORT MCLK)
{
  USHORT tempax, tempbx;

  tempbx = SiS_DoCalcDelay(SiS_Pr, MCLK, VCLK, colordepth, 0);
  tempax = SiS_DoCalcDelay(SiS_Pr, MCLK, VCLK, colordepth, 1);
  if(tempax < 4) tempax = 4;
  tempax -= 4;
  if(tempbx < tempax) tempbx = tempax;
  return(tempbx);
}

static void
SiS_SetCRT1FIFO_300(SiS_Private *SiS_Pr, USHORT ModeNo, PSIS_HW_INFO HwInfo,
                    USHORT RefreshRateTableIndex)
{
  USHORT  ThresholdLow = 0;
  USHORT  index, VCLK, MCLK, colorth=0;
  USHORT  tempah, temp;

  if(ModeNo > 0x13) {

     if(SiS_Pr->UseCustomMode) {
        VCLK = SiS_Pr->CSRClock;
     } else {
        index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
        index &= 0x3F;
        VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;             /* Get VCLK  */
     }

     switch (SiS_Pr->SiS_ModeType - ModeEGA) {     /* Get half colordepth */
        case 0 : colorth = 1; break;
        case 1 : colorth = 1; break;
        case 2 : colorth = 2; break;
        case 3 : colorth = 2; break;
        case 4 : colorth = 3; break;
        case 5 : colorth = 4; break;
     }

     index = SiS_GetReg(SiS_Pr->SiS_P3c4,0x3A);
     index &= 0x07;
     MCLK = SiS_Pr->SiS_MCLKData_0[index].CLOCK;           /* Get MCLK  */

     tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
     tempah &= 0xc3;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x16,0x3c,tempah);

     do {
        ThresholdLow = SiS_CalcDelay(SiS_Pr, VCLK, colorth, MCLK);
        ThresholdLow++;
        if(ThresholdLow < 0x13) break;
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x16,0xfc);
        ThresholdLow = 0x13;
        tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x16);
        tempah >>= 6;
        if(!(tempah)) break;
        tempah--;
        tempah <<= 6;
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x16,0x3f,tempah);
     } while(0);

  } else ThresholdLow = 2;

  /* Write CRT/CPU threshold low, CRT/Engine threshold high */
  temp = (ThresholdLow << 4) | 0x0f;
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,temp);

  temp = (ThresholdLow & 0x10) << 1;
  if(ModeNo > 0x13) temp |= 0x40;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0f,0x9f,temp);

  /* What is this? */
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x3B,0x09);

  /* Write CRT/CPU threshold high */
  temp = ThresholdLow + 3;
  if(temp > 0x0f) temp = 0x0f;
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x09,temp);
}

static USHORT
SiS_CalcDelay2(SiS_Private *SiS_Pr, UCHAR key, PSIS_HW_INFO HwInfo)
{
  USHORT data,index;
  const UCHAR  LatencyFactor[] = {
   	97, 88, 86, 79, 77, 00,       /*; 64  bit    BQ=2   */
        00, 87, 85, 78, 76, 54,       /*; 64  bit    BQ=1   */
        97, 88, 86, 79, 77, 00,       /*; 128 bit    BQ=2   */
        00, 79, 77, 70, 68, 48,       /*; 128 bit    BQ=1   */
        80, 72, 69, 63, 61, 00,       /*; 64  bit    BQ=2   */
        00, 70, 68, 61, 59, 37,       /*; 64  bit    BQ=1   */
        86, 77, 75, 68, 66, 00,       /*; 128 bit    BQ=2   */
        00, 68, 66, 59, 57, 37        /*; 128 bit    BQ=1   */
  };
  const UCHAR  LatencyFactor730[] = {
         69, 63, 61,
	 86, 79, 77,
	103, 96, 94,
	120,113,111,
	137,130,128,    /* --- Table ends with this entry, data below */
	137,130,128,	/* to avoid using illegal values              */
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
  };

  if(HwInfo->jChipType == SIS_730) {
     index = ((key & 0x0f) * 3) + ((key & 0xC0) >> 6);
     data = LatencyFactor730[index];
  } else {
     index = (key & 0xE0) >> 5;
     if(key & 0x10) index +=6;
     if(!(key & 0x01)) index += 24;
     data = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
     if(data & 0x0080) index += 12;
     data = LatencyFactor[index];
  }
  return(data);
}

static void
SiS_SetCRT1FIFO_630(SiS_Private *SiS_Pr, USHORT ModeNo,
 		    PSIS_HW_INFO HwInfo,
                    USHORT RefreshRateTableIndex)
{
  USHORT  i,index,data,VCLK,MCLK,colorth=0;
  ULONG   B,eax,bl,data2;
  USHORT  ThresholdLow=0;
  UCHAR   FQBQData[]= {
  	0x01,0x21,0x41,0x61,0x81,
        0x31,0x51,0x71,0x91,0xb1,
        0x00,0x20,0x40,0x60,0x80,
        0x30,0x50,0x70,0x90,0xb0,
	0xFF
  };
  UCHAR   FQBQData730[]= {
        0x34,0x74,0xb4,
	0x23,0x63,0xa3,
	0x12,0x52,0x92,
	0x01,0x41,0x81,
	0x00,0x40,0x80,
	0xff
  };

  i=0;
  if(ModeNo > 0x13) {
    if(SiS_Pr->UseCustomMode) {
       VCLK = SiS_Pr->CSRClock;
    } else {
       index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
       index &= 0x3F;
       VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;          /* Get VCLK  */
    }       

    index = SiS_GetReg(SiS_Pr->SiS_P3c4,0x1A);
    index &= 0x07;
    MCLK = SiS_Pr->SiS_MCLKData_0[index].CLOCK;           /* Get MCLK  */

    data2 = SiS_Pr->SiS_ModeType - ModeEGA;	  /* Get half colordepth */
    switch (data2) {
        case 0 : colorth = 1; break;
        case 1 : colorth = 1; break;
        case 2 : colorth = 2; break;
        case 3 : colorth = 2; break;
        case 4 : colorth = 3; break;
        case 5 : colorth = 4; break;
    }

    if(HwInfo->jChipType == SIS_730) {

       do {
          B = SiS_CalcDelay2(SiS_Pr, FQBQData730[i], HwInfo) * VCLK * colorth;
	  bl = B / (MCLK * 16);

          if(B == bl * 16 * MCLK) {
             bl = bl + 1;
          } else {
             bl = bl + 2;
          }

          if(bl > 0x13) {
             if(FQBQData730[i+1] == 0xFF) {
                ThresholdLow = 0x13;
                break;
             }
             i++;
          } else {
             ThresholdLow = bl;
             break;
          }
       } while(FQBQData730[i] != 0xFF);
       
    } else {
    
       do {
          B = SiS_CalcDelay2(SiS_Pr, FQBQData[i], HwInfo) * VCLK * colorth;
          bl = B / (MCLK * 16);

          if(B == bl * 16 * MCLK) {
             bl = bl + 1;
          } else {
             bl = bl + 2;
          }

          if(bl > 0x13) {
             if(FQBQData[i+1] == 0xFF) {
                ThresholdLow = 0x13;
                break;
             }
             i++;
          } else {
             ThresholdLow = bl;
             break;
          }
       } while(FQBQData[i] != 0xFF);
    }
  }
  else {
    if(HwInfo->jChipType == SIS_730) {
    } else {
      i = 9;
    }
    ThresholdLow = 0x02;
  }

  /* Write foreground and background queue */
  if(HwInfo->jChipType == SIS_730) {
   
     data2 = FQBQData730[i];
     data2 = (data2 & 0xC0) >> 5;
     data2 <<= 8;

#ifndef LINUX_XF86
     SiS_SetRegLong(0xcf8,0x80000050);
     eax = SiS_GetRegLong(0xcfc);
     eax &= 0xfffff9ff;
     eax |= data2;
     SiS_SetRegLong(0xcfc,eax);
#else
     /* We use pci functions X offers. We use pcitag 0, because
      * we want to read/write to the host bridge (which is always
      * 00:00.0 on 630, 730 and 540), not the VGA device.
      */
     eax = pciReadLong(0x00000000, 0x50);
     eax &= 0xfffff9ff;
     eax |= data2;
     pciWriteLong(0x00000000, 0x50, eax);
#endif

     /* Write GUI grant timer (PCI config 0xA3) */
     data2 = FQBQData730[i] << 8;
     data2 = (data2 & 0x0f00) | ((data2 & 0x3000) >> 8);
     data2 <<= 20;

#ifndef LINUX_XF86
     SiS_SetRegLong(0xcf8,0x800000A0);
     eax = SiS_GetRegLong(0xcfc);
     eax &= 0x00ffffff;
     eax |= data2;
     SiS_SetRegLong(0xcfc,eax);
#else
     eax = pciReadLong(0x00000000, 0xA0);
     eax &= 0x00ffffff;
     eax |= data2;
     pciWriteLong(0x00000000, 0xA0, eax);
#endif

  } else {

     data2 = FQBQData[i];
     data2 = (data2 & 0xf0) >> 4;
     data2 <<= 24;

#ifndef LINUX_XF86
     SiS_SetRegLong(0xcf8,0x80000050);
     eax = SiS_GetRegLong(0xcfc);
     eax &= 0xf0ffffff;
     eax |= data2;
     SiS_SetRegLong(0xcfc,eax);
#else
     eax = pciReadLong(0x00000000, 0x50);
     eax &= 0xf0ffffff;
     eax |= data2;
     pciWriteLong(0x00000000, 0x50, eax);
#endif

     /* Write GUI grant timer (PCI config 0xA3) */
     data2 = FQBQData[i];
     data2 &= 0x0f;
     data2 <<= 24;

#ifndef LINUX_XF86
     SiS_SetRegLong(0xcf8,0x800000A0);
     eax = SiS_GetRegLong(0xcfc);
     eax &= 0xf0ffffff;
     eax |= data2;
     SiS_SetRegLong(0xcfc,eax);
#else
     eax = pciReadLong(0x00000000, 0xA0);
     eax &= 0xf0ffffff;
     eax |= data2;
     pciWriteLong(0x00000000, 0xA0, eax);
#endif

  }

  /* Write CRT/CPU threshold low, CRT/Engine threshold high */
  data = ((ThresholdLow & 0x0f) << 4) | 0x0f;
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,data);

  data = (ThresholdLow & 0x10) << 1;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xDF,data);

  /* What is this? */
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x3B,0x09);

  /* Write CRT/CPU threshold high (gap = 3) */
  data = ThresholdLow + 3;
  if(data > 0x0f) data = 0x0f;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x09,0x80,data);
}
#endif

#ifdef SIS315H
static void
SiS_SetCRT1FIFO_310(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                    PSIS_HW_INFO HwInfo)
{
  USHORT modeflag;

  /* disable auto-threshold */
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x3D,0xFE);

  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }

  SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0xAE);
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
  if(ModeNo > 0x13) {
     if(HwInfo->jChipType >= SIS_661) {
        if(!(modeflag & HalfDCLK)) {
	   SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0x34);
	   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x3D,0x01);
	}
     } else {
        if((!(modeflag & DoubleScanMode)) || (!(modeflag & HalfDCLK))) {
           SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0x34);
           SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x3D,0x01);
	}
     }
  }
}
#endif

/*********************************************/
/*              MODE REGISTERS               */
/*********************************************/

static void
SiS_SetVCLKState(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                 USHORT ModeNo, USHORT RefreshRateTableIndex,
                 USHORT ModeIdIndex)
{
  USHORT data=0, VCLK=0, index=0;

  if(ModeNo > 0x13) {
     if(SiS_Pr->UseCustomMode) {
        VCLK = SiS_Pr->CSRClock;
     } else {
        index = SiS_GetVCLK2Ptr(SiS_Pr,ModeNo,ModeIdIndex,
	                      RefreshRateTableIndex,HwInfo);
        VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;
     }
  }

  if(HwInfo->jChipType < SIS_315H) {

     if(VCLK > 150) data |= 0x80;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0x7B,data);

     data = 0x00;
     if(VCLK >= 150) data |= 0x08;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x32,0xF7,data);

  } else {

     if(VCLK >= 166) data |= 0x0c;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x32,0xf3,data);

     if(VCLK >= 166) {
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1f,0xe7);
     }
  }

  /* DAC speed */
  if(HwInfo->jChipType >= SIS_661) {

     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xE8,0x10);

  } else {

     data = 0x03;
     if((VCLK >= 135) && (VCLK < 160))      data = 0x02;
     else if((VCLK >= 160) && (VCLK < 260)) data = 0x01;
     else if(VCLK >= 260)                   data = 0x00;

     if(HwInfo->jChipType == SIS_540) {
        if((VCLK == 203) || (VCLK < 234))   data = 0x02;
     }

     if(HwInfo->jChipType < SIS_315H) {
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xFC,data);
     } else {
        if(HwInfo->jChipType > SIS_315PRO) {
           if(ModeNo > 0x13) data &= 0xfc;
        }
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xF8,data);
     }

  }
}

static void
SiS_SetCRT1ModeRegs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                    USHORT ModeNo,USHORT ModeIdIndex,USHORT RefreshRateTableIndex)
{
  USHORT data,infoflag=0,modeflag;
  USHORT resindex,xres;
#ifdef SIS315H
  USHORT data2,data3;
  ULONG  longdata;
  UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
#endif

  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     infoflag = SiS_Pr->CInfoFlag;
     xres = SiS_Pr->CHDisplay;
  } else {
     resindex = SiS_GetResInfo(SiS_Pr,ModeNo,ModeIdIndex);
     if(ModeNo > 0x13) {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
	xres = SiS_Pr->SiS_ModeResInfo[resindex].HTotal;
     } else {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
	xres = SiS_Pr->SiS_StResInfo[resindex].HTotal;
     }
  }

  /* Disable DPMS */
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1F,0x3F);

  data = 0;
  if(ModeNo > 0x13) {
     if(SiS_Pr->SiS_ModeType > 0x02) {
        data |= 0x02;
        data |= ((SiS_Pr->SiS_ModeType - ModeVGA) << 2);
     }
     if(infoflag & InterlaceMode) data |= 0x20;
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x06,0xC0,data);

  if(HwInfo->jChipType != SIS_300) {
     data = 0;
     if(infoflag & InterlaceMode) {
        if(xres <= 800)       data = 0x0020;
        else if(xres <= 1024) data = 0x0035;
        else                  data = 0x0048;
     }
     SiS_SetReg(SiS_Pr->SiS_P3d4,0x19,(data & 0xFF));
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x1a,0xFC,(data >> 8));
  }

  if(modeflag & HalfDCLK) {
     SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x01,0x08);
  }

  data = 0;
  if(modeflag & LineCompareOff) data = 0x08;
  if(HwInfo->jChipType == SIS_300) {
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xF7,data);
  } else {
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xB7,data);
     if(SiS_Pr->SiS_ModeType == ModeEGA) {
        if(ModeNo > 0x13) {
  	   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x0F,0x40);
        }
     }
  }

  if(HwInfo->jChipType >= SIS_661) {
     SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x31,0xfb);
  }

#ifdef SIS315H
  if(HwInfo->jChipType == SIS_315PRO) {

     data = SiS_Get310DRAMType(SiS_Pr, HwInfo);
     data = SiS_Pr->SiS_SR15[2][data];
     if(SiS_Pr->SiS_ModeType == ModeText) {
        data &= 0xc7;
     } else {
        data2 = SiS_GetOffset(SiS_Pr,ModeNo,ModeIdIndex,
                              RefreshRateTableIndex,HwInfo);
	data2 >>= 1;
	if(infoflag & InterlaceMode) data2 >>= 1;
	data3 = SiS_GetColorDepth(SiS_Pr,ModeNo,ModeIdIndex) >> 1;
	if(!data3) data3++;
	data2 /= data3;
	if(data2 >= 0x50) {
	   data &= 0x0f;
	   data |= 0x50;
	}
     }
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x17,data);

  } else if( (HwInfo->jChipType == SIS_330) ||
             ((HwInfo->jChipType == SIS_760) && (SiS_Pr->SiS_SysFlags & SF_760UMA))) {

     data = SiS_Get310DRAMType(SiS_Pr, HwInfo);
     if(HwInfo->jChipType == SIS_330) {
        data = SiS_Pr->SiS_SR15[2][data];
     } else {
        if(SiS_Pr->SiS_ROMNew) 	    data = ROMAddr[0xf6];
        else if(SiS_Pr->SiS_UseROM) data = ROMAddr[0x100 + data];
	else                        data = 0xba;
     }
     if(SiS_Pr->SiS_ModeType <= ModeEGA) {
        data &= 0xc7;
     } else {
        if(SiS_Pr->UseCustomMode) {
	   data2 = SiS_Pr->CSRClock;
	} else {
           data2 = SiS_GetVCLK2Ptr(SiS_Pr,ModeNo,ModeIdIndex,
                                   RefreshRateTableIndex,HwInfo);
           data2 = SiS_Pr->SiS_VCLKData[data2].CLOCK;
	}

	data3 = SiS_GetColorDepth(SiS_Pr,ModeNo,ModeIdIndex) >> 1;
	if(data3) data2 *= data3;

	longdata = SiS_GetMCLK(SiS_Pr, HwInfo) * 1024;

	data2 = longdata / data2;

	if(HwInfo->jChipType == SIS_330) {
	   if(SiS_Pr->SiS_ModeType != Mode16Bpp) {
              if     (data2 >= 0x19c) data = 0xba;
	      else if(data2 >= 0x140) data = 0x7a;
	      else if(data2 >= 0x101) data = 0x3a;
	      else if(data2 >= 0xf5)  data = 0x32;
	      else if(data2 >= 0xe2)  data = 0x2a;
	      else if(data2 >= 0xc4)  data = 0x22;
	      else if(data2 >= 0xac)  data = 0x1a;
	      else if(data2 >= 0x9e)  data = 0x12;
	      else if(data2 >= 0x8e)  data = 0x0a;
	      else                    data = 0x02;
	   } else {
	      if(data2 >= 0x127)      data = 0xba;
	      else                    data = 0x7a;
	   }
	} else {
	   if     (data2 >= 0x190) data = 0xba;
	   else if(data2 >= 0xff)  data = 0x7a;
	   else if(data2 >= 0xd3)  data = 0x3a;
	   else if(data2 >= 0xa9)  data = 0x1a;
	   else if(data2 >= 0x93)  data = 0x0a;
	   else                    data = 0x02;
	}
     }
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x17,data);
  }
#endif

  data = 0x60;
  if(SiS_Pr->SiS_ModeType != ModeText) {
     data ^= 0x60;
     if(SiS_Pr->SiS_ModeType != ModeEGA) {
        data ^= 0xA0;
     }
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x21,0x1F,data);

  SiS_SetVCLKState(SiS_Pr, HwInfo, ModeNo, RefreshRateTableIndex, ModeIdIndex);

#ifdef SIS315H
  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) & 0x40) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,0x52,0x2c);
     } else {
        SiS_SetReg(SiS_Pr->SiS_P3d4,0x52,0x6c);
     }
  }
#endif
}

/*********************************************/
/*                 LOAD DAC                  */
/*********************************************/

#if 0
static void
SiS_ClearDAC(SiS_Private *SiS_Pr, ULONG port)
{
   int i;

   OutPortByte(port, 0);
   port++;
   for (i=0; i < (256 * 3); i++) {
      OutPortByte(port, 0);
   }
}
#endif

static void
SiS_WriteDAC(SiS_Private *SiS_Pr, SISIOADDRESS DACData, USHORT shiftflag,
             USHORT dl, USHORT ah, USHORT al, USHORT dh)
{
  USHORT temp,bh,bl;

  bh = ah;
  bl = al;
  if(dl != 0) {
     temp = bh;
     bh = dh;
     dh = temp;
     if(dl == 1) {
        temp = bl;
        bl = dh;
        dh = temp;
     } else {
        temp = bl;
        bl = bh;
        bh = temp;
     }
  }
  if(shiftflag) {
     dh <<= 2;
     bh <<= 2;
     bl <<= 2;
  }
  SiS_SetRegByte(DACData,(USHORT)dh);
  SiS_SetRegByte(DACData,(USHORT)bh);
  SiS_SetRegByte(DACData,(USHORT)bl);
}

void
SiS_LoadDAC(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
            USHORT ModeNo, USHORT ModeIdIndex)
{
   USHORT data,data2;
   USHORT time,i,j,k,m,n,o;
   USHORT si,di,bx,dl,al,ah,dh;
   USHORT shiftflag;
   SISIOADDRESS DACAddr, DACData;
   const USHORT *table = NULL;

   if(ModeNo <= 0x13) {
      data = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
   } else {
      if(SiS_Pr->UseCustomMode) {
	 data = SiS_Pr->CModeFlag;
      } else {
         data = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
      }
   }

   data &= DACInfoFlag;
   time = 64;
   if(data == 0x00) table = SiS_MDA_DAC;
   if(data == 0x08) table = SiS_CGA_DAC;
   if(data == 0x10) table = SiS_EGA_DAC;
   if(data == 0x18) {
      time = 256;
      table = SiS_VGA_DAC;
   }
   if(time == 256) j = 16;
   else            j = time;

   if( ( (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) &&        /* 301B-DH LCD */
         (SiS_Pr->SiS_VBType & VB_NoLCD) )        ||
       (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)       ||   /* LCDA */
       (!(SiS_Pr->SiS_SetFlag & ProgrammingCRT2)) ) {  /* Programming CRT1 */
      DACAddr = SiS_Pr->SiS_P3c8;
      DACData = SiS_Pr->SiS_P3c9;
      shiftflag = 0;
      SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xFF);
   } else {
      shiftflag = 1;
      DACAddr = SiS_Pr->SiS_Part5Port;
      DACData = SiS_Pr->SiS_Part5Port + 1;
   }

   SiS_SetRegByte(DACAddr,0x00);

   for(i=0; i<j; i++) {
      data = table[i];
      for(k=0; k<3; k++) {
	data2 = 0;
	if(data & 0x01) data2 = 0x2A;
	if(data & 0x02) data2 += 0x15;
	if(shiftflag) data2 <<= 2;
	SiS_SetRegByte(DACData, data2);
	data >>= 2;
      }
   }

   if(time == 256) {
      for(i = 16; i < 32; i++) {
   	 data = table[i];
	 if(shiftflag) data <<= 2;
	 for(k = 0; k < 3; k++) SiS_SetRegByte(DACData, data);
      }
      si = 32;
      for(m = 0; m < 9; m++) {
         di = si;
         bx = si + 4;
         dl = 0;
         for(n = 0; n < 3; n++) {
  	    for(o = 0; o < 5; o++) {
	       dh = table[si];
	       ah = table[di];
	       al = table[bx];
	       si++;
	       SiS_WriteDAC(SiS_Pr, DACData, shiftflag, dl, ah, al, dh);
	    }
	    si -= 2;
	    for(o = 0; o < 3; o++) {
	       dh = table[bx];
	       ah = table[di];
	       al = table[si];
	       si--;
	       SiS_WriteDAC(SiS_Pr, DACData, shiftflag, dl, ah, al, dh);
	    }
	    dl++;
	 }            /* for n < 3 */
	 si += 5;
      }               /* for m < 9 */
   }
}

/*********************************************/
/*         SET CRT1 REGISTER GROUP           */
/*********************************************/

static void
SiS_SetCRT1Group(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                 USHORT ModeNo, USHORT ModeIdIndex)
{
  USHORT  StandTableIndex,RefreshRateTableIndex;

  SiS_Pr->SiS_CRT1Mode = ModeNo;
  StandTableIndex = SiS_GetModePtr(SiS_Pr, ModeNo, ModeIdIndex);
  if(SiS_Pr->SiS_SetFlag & LowModeTests) {
     if(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SwitchCRT2)) {
        SiS_DisableBridge(SiS_Pr, HwInfo);
     }
  }

  SiS_ResetSegmentRegisters(SiS_Pr, HwInfo);

  SiS_SetSeqRegs(SiS_Pr, StandTableIndex, HwInfo);
  SiS_SetMiscRegs(SiS_Pr, StandTableIndex, HwInfo);
  SiS_SetCRTCRegs(SiS_Pr, HwInfo, StandTableIndex);
  SiS_SetATTRegs(SiS_Pr, StandTableIndex, HwInfo);
  SiS_SetGRCRegs(SiS_Pr, StandTableIndex);
  SiS_ClearExt1Regs(SiS_Pr, HwInfo, ModeNo);
  SiS_ResetCRT1VCLK(SiS_Pr, HwInfo);

  SiS_Pr->SiS_SelectCRT2Rate = 0;
  SiS_Pr->SiS_SetFlag &= (~ProgrammingCRT2);

#ifdef LINUX_XF86
  xf86DrvMsgVerb(0, X_PROBED, 4, "(init: VBType=0x%04x, VBInfo=0x%04x)\n",
                    SiS_Pr->SiS_VBType, SiS_Pr->SiS_VBInfo);
#endif

  if(SiS_Pr->SiS_VBInfo & SetSimuScanMode) {
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
     }
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
     SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
  }

  RefreshRateTableIndex = SiS_GetRatePtr(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);

  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
     SiS_Pr->SiS_SetFlag &= ~ProgrammingCRT2;
  }

  if(RefreshRateTableIndex != 0xFFFF) {
     SiS_SetCRT1Sync(SiS_Pr, RefreshRateTableIndex);
     SiS_SetCRT1CRTC(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
     SiS_SetCRT1Offset(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
     SiS_SetCRT1VCLK(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
  }

#ifdef SIS300
  if(HwInfo->jChipType == SIS_300) {
     SiS_SetCRT1FIFO_300(SiS_Pr, ModeNo,HwInfo,RefreshRateTableIndex);
  } else if((HwInfo->jChipType == SIS_630) ||
            (HwInfo->jChipType == SIS_730) ||
            (HwInfo->jChipType == SIS_540)) {
     SiS_SetCRT1FIFO_630(SiS_Pr, ModeNo, HwInfo, RefreshRateTableIndex);
  }
#endif
#ifdef SIS315H
  if(HwInfo->jChipType >= SIS_315H) {
     SiS_SetCRT1FIFO_310(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
  }
#endif

  SiS_SetCRT1ModeRegs(SiS_Pr, HwInfo, ModeNo, ModeIdIndex, RefreshRateTableIndex);

  SiS_LoadDAC(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);

#ifndef LINUX_XF86
  if(SiS_Pr->SiS_flag_clearbuffer) {
     SiS_ClearBuffer(SiS_Pr,HwInfo,ModeNo);
  }
#endif

  if(!(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SwitchCRT2 | SetCRT2ToLCDA))) {
     SiS_WaitRetrace1(SiS_Pr);
     SiS_DisplayOn(SiS_Pr);
  }
}



/*********************************************/
/*         HELPER: RESET VIDEO BRIDGE        */
/*********************************************/

static void
SiS_ResetVB(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
   USHORT temp;

   if(SiS_Pr->SiS_UseROM) {
      if(HwInfo->jChipType < SIS_330) {
         temp = ROMAddr[VB310Data_1_2_Offset] | 0x40;
	 if(SiS_Pr->SiS_ROMNew) temp = ROMAddr[0x80] | 0x40;
         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
      } else if(HwInfo->jChipType >= SIS_661) {
         temp = ROMAddr[0x7e];
         if(SiS_Pr->SiS_ROMNew) temp = ROMAddr[0x80];
         if(HwInfo->jChipType >= SIS_660)                  temp |= 0x40;
         else if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x7b) >= 100) temp |= 0x40;
         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
      }
   }
}

/*********************************************/
/*         HELPER: SET VIDEO REGISTERS       */
/*********************************************/

static void
SiS_StrangeStuff(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   if((IS_SIS651) || (IS_SISM650)) {
      SiS_SetReg(SiS_Pr->SiS_VidCapt, 0x3f, 0x00);   /* Fiddle with capture regs */
      SiS_SetReg(SiS_Pr->SiS_VidCapt, 0x00, 0x00);
      SiS_SetReg(SiS_Pr->SiS_VidPlay, 0x00, 0x86);   /* (BIOS does NOT unlock) */
      SiS_SetRegAND(SiS_Pr->SiS_VidPlay, 0x30, 0xfe); /* Fiddle with video regs */
      SiS_SetRegAND(SiS_Pr->SiS_VidPlay, 0x3f, 0xef);
   }
   /* !!! This does not support modes < 0x13 !!! */
}

/*********************************************/
/*         XFree86: SET SCREEN PITCH         */
/*********************************************/

#ifdef LINUX_XF86
static void
SiS_SetPitchCRT1(SiS_Private *SiS_Pr, ScrnInfoPtr pScrn)
{
   SISPtr pSiS = SISPTR(pScrn);
   UShort HDisplay = pSiS->scrnPitch >> 3;

   SiS_SetReg(SiS_Pr->SiS_P3d4,0x13,(HDisplay & 0xFF));
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0xF0,(HDisplay>>8));
}

static void
SiS_SetPitchCRT2(SiS_Private *SiS_Pr, ScrnInfoPtr pScrn)
{
   SISPtr pSiS = SISPTR(pScrn);
   UShort HDisplay = pSiS->scrnPitch2 >> 3;

    /* Unlock CRT2 */
   if(pSiS->VGAEngine == SIS_315_VGA)
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2F, 0x01);
   else
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x24, 0x01);

   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x07,(HDisplay & 0xFF));
   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0xF0,(HDisplay >> 8));
}

static void
SiS_SetPitch(SiS_Private *SiS_Pr, ScrnInfoPtr pScrn)
{
   SISPtr pSiS = SISPTR(pScrn);
   BOOLEAN isslavemode = FALSE;

   if( (pSiS->VBFlags & VB_VIDEOBRIDGE) &&
       ( ((pSiS->VGAEngine == SIS_300_VGA) &&
          (SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0xa0) == 0x20) ||
         ((pSiS->VGAEngine == SIS_315_VGA) &&
	  (SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x50) == 0x10) ) ) {
      isslavemode = TRUE;
   }

   /* We need to set pitch for CRT1 if bridge is in slave mode, too */
   if((pSiS->VBFlags & DISPTYPE_DISP1) || (isslavemode)) {
      SiS_SetPitchCRT1(SiS_Pr, pScrn);
   }
   /* We must not set the pitch for CRT2 if bridge is in slave mode */
   if((pSiS->VBFlags & DISPTYPE_DISP2) && (!isslavemode)) {
      SiS_SetPitchCRT2(SiS_Pr, pScrn);
   }
}
#endif

/*********************************************/
/*                 SiSSetMode()              */
/*********************************************/

#ifdef LINUX_XF86
/* We need pScrn for setting the pitch correctly */
BOOLEAN
SiSSetMode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,ScrnInfoPtr pScrn,USHORT ModeNo, BOOLEAN dosetpitch)
#else
BOOLEAN
SiSSetMode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,USHORT ModeNo)
#endif
{
   USHORT  ModeIdIndex;
   SISIOADDRESS BaseAddr = HwInfo->ulIOAddress;
   unsigned char backupreg=0;
#ifndef LINUX_XF86
   USHORT  KeepLockReg;
   ULONG   temp;

   SiS_Pr->UseCustomMode = FALSE;
   SiS_Pr->CRT1UsesCustomMode = FALSE;
#endif

   if(SiS_Pr->UseCustomMode) {
      ModeNo = 0xfe;
   }

   SiSInitPtr(SiS_Pr, HwInfo);
   SiSRegInit(SiS_Pr, BaseAddr);
   SiS_GetSysFlags(SiS_Pr, HwInfo);

#if defined(LINUX_XF86) && (defined(i386) || defined(__i386) || defined(__i386__) || defined(__AMD64__))
   if(pScrn) SiS_Pr->SiS_VGAINFO = SiS_GetSetBIOSScratch(pScrn, 0x489, 0xff);
   else
#endif
         SiS_Pr->SiS_VGAINFO = 0x11;

   SiSInitPCIetc(SiS_Pr, HwInfo);
   SiSSetLVDSetc(SiS_Pr, HwInfo);
   SiSDetermineROMUsage(SiS_Pr, HwInfo);

   SiS_Pr->SiS_flag_clearbuffer = 0;

   if(!SiS_Pr->UseCustomMode) {
#ifndef LINUX_XF86
      if(!(ModeNo & 0x80)) SiS_Pr->SiS_flag_clearbuffer = 1;
#endif
      ModeNo &= 0x7f;
   }

#ifndef LINUX_XF86
   KeepLockReg = SiS_GetReg(SiS_Pr->SiS_P3c4,0x05);
#endif
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x86);

   SiS_UnLockCRT2(SiS_Pr, HwInfo);

   if(!SiS_Pr->UseCustomMode) {
      if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return FALSE;
   } else {
      ModeIdIndex = 0;
   }

   SiS_GetVBType(SiS_Pr, HwInfo);

   /* Init/restore some VB registers */

   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
         SiS_ResetVB(SiS_Pr, HwInfo);
	 SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x32,0x10);
	 SiS_SetRegOR(SiS_Pr->SiS_Part2Port,0x00,0x0c);
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
      } else {
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
      }
   }

   /* Get VB information (connectors, connected devices) */
   SiS_GetVBInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, (SiS_Pr->UseCustomMode) ? 0 : 1);
   SiS_SetYPbPr(SiS_Pr, HwInfo);
   SiS_SetTVMode(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_GetLCDResInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_SetLowModeTest(SiS_Pr, ModeNo, HwInfo);

#ifndef LINUX_XF86
   /* 3. Check memory size (Kernel framebuffer driver only) */
   temp = SiS_CheckMemorySize(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
   if(!temp) return(0);
#endif

   if(HwInfo->jChipType >= SIS_315H) {
      SiS_SetupCR5x(SiS_Pr, HwInfo);
   }

   if(SiS_Pr->UseCustomMode) {
      SiS_Pr->CRT1UsesCustomMode = TRUE;
      SiS_Pr->CSRClock_CRT1 = SiS_Pr->CSRClock;
      SiS_Pr->CModeFlag_CRT1 = SiS_Pr->CModeFlag;
   } else {
      SiS_Pr->CRT1UsesCustomMode = FALSE;
   }

   /* Set mode on CRT1 */
   if( (SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SetCRT2ToLCDA)) ||
       (!(SiS_Pr->SiS_VBInfo & SwitchCRT2)) ) {
      SiS_SetCRT1Group(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
   }

   /* Set mode on CRT2 */
   if(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SwitchCRT2 | SetCRT2ToLCDA)) {
      if( (SiS_Pr->SiS_VBType & VB_SISVB)    ||
          (SiS_Pr->SiS_IF_DEF_LVDS     == 1) ||
          (SiS_Pr->SiS_IF_DEF_CH70xx   != 0) ||
          (SiS_Pr->SiS_IF_DEF_TRUMPION != 0) ) {
         SiS_SetCRT2Group(SiS_Pr, HwInfo, ModeNo);
      }
   }

   SiS_HandleCRT1(SiS_Pr);

   SiS_StrangeStuff(SiS_Pr, HwInfo);

   SiS_DisplayOn(SiS_Pr);
   SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xFF);

   if(HwInfo->jChipType >= SIS_315H) {
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
         if(!(SiS_IsDualEdge(SiS_Pr, HwInfo))) {
	    SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	 }
      }
   }

   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
         if(!SiS_Pr->SiS_ROMNew) {
	    if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x35,0x01);
	    } else {
	       SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x35,0xFE);
	    }
	 }

	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,backupreg);

	 if((IS_SIS650) && (SiS_GetReg(SiS_Pr->SiS_P3d4,0x30) & 0xfc)) {
	    if((ModeNo == 0x03) || (ModeNo == 0x10)) {
	       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x51,0x80);
	       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x56,0x08);
            }
	 }

	 if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x30) & SetCRT2ToLCD) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0xfc);
	 }
      } else if((HwInfo->jChipType == SIS_630) ||
                (HwInfo->jChipType == SIS_730)) {
         SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,backupreg);
      }
   }

#ifdef LINUX_XF86
   if(pScrn) {
      /* SetPitch: Adapt to virtual size & position */
      if((ModeNo > 0x13) && (dosetpitch)) {
         SiS_SetPitch(SiS_Pr, pScrn);
      }

      /* Backup/Set ModeNo in BIOS scratch area */
      SiS_GetSetModeID(pScrn, ModeNo);
   }
#endif

#ifndef LINUX_XF86  /* We never lock registers in XF86 */
   if(KeepLockReg == 0xA1) SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x86);
   else SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x00);
#endif

   return TRUE;
}

/*********************************************/
/*          XFree86: SiSBIOSSetMode()        */
/*           for non-Dual-Head mode          */
/*********************************************/

#ifdef LINUX_XF86
BOOLEAN
SiSBIOSSetMode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, ScrnInfoPtr pScrn,
               DisplayModePtr mode, BOOLEAN IsCustom)
{
   SISPtr  pSiS = SISPTR(pScrn);
   UShort  ModeNo=0;
   
   SiS_Pr->UseCustomMode = FALSE;

   if((IsCustom) && (SiS_CheckBuildCustomMode(pScrn, mode, pSiS->VBFlags))) {

         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3, "Setting custom mode %dx%d\n",
	 	SiS_Pr->CHDisplay,
		(mode->Flags & V_INTERLACE ? SiS_Pr->CVDisplay * 2 :
		   (mode->Flags & V_DBLSCAN ? SiS_Pr->CVDisplay / 2 :
		      SiS_Pr->CVDisplay)));

	 return(SiSSetMode(SiS_Pr, HwInfo, pScrn, ModeNo, TRUE));

   }

   ModeNo = SiS_CalcModeIndex(pScrn, mode, pSiS->VBFlags, pSiS->HaveCustomModes);
   if(!ModeNo) return FALSE;

   xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3, "Setting standard mode 0x%x\n", ModeNo);

   return(SiSSetMode(SiS_Pr, HwInfo, pScrn, ModeNo, TRUE));
}

/*********************************************/
/*       XFree86: SiSBIOSSetModeCRT2()       */
/*           for Dual-Head modes             */
/*********************************************/
BOOLEAN
SiSBIOSSetModeCRT2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, ScrnInfoPtr pScrn,
               DisplayModePtr mode, BOOLEAN IsCustom)
{
   USHORT  ModeIdIndex;
   SISIOADDRESS BaseAddr = HwInfo->ulIOAddress;
   UShort  ModeNo   = 0;
   unsigned char backupreg=0;
   SISPtr  pSiS     = SISPTR(pScrn);
#ifdef SISDUALHEAD
   SISEntPtr pSiSEnt = pSiS->entityPrivate;
#endif

   SiS_Pr->UseCustomMode = FALSE;

   /* Remember: Custom modes for CRT2 are ONLY supported
    * 		-) on 315/330 series,
    *           -) on the 30x/B/C, and
    *           -) if CRT2 is LCD or VGA
    */

   if((IsCustom) && (SiS_CheckBuildCustomMode(pScrn, mode, pSiS->VBFlags))) {

	 ModeNo = 0xfe;

   } else {

         BOOLEAN havecustommodes = pSiS->HaveCustomModes;

#ifdef SISMERGED
	 if(pSiS->MergedFB) havecustommodes = pSiS->HaveCustomModes2;
#endif

         ModeNo = SiS_CalcModeIndex(pScrn, mode, pSiS->VBFlags, havecustommodes);
         if(!ModeNo) return FALSE;

   }

   SiSRegInit(SiS_Pr, BaseAddr);
   SiSInitPtr(SiS_Pr, HwInfo);
   SiS_GetSysFlags(SiS_Pr, HwInfo);
#if (defined(i386) || defined(__i386) || defined(__i386__) || defined(__AMD64__))
   SiS_Pr->SiS_VGAINFO = SiS_GetSetBIOSScratch(pScrn, 0x489, 0xff);
#else
   SiS_Pr->SiS_VGAINFO = 0x11;
#endif
   SiSInitPCIetc(SiS_Pr, HwInfo);
   SiSSetLVDSetc(SiS_Pr, HwInfo);
   SiSDetermineROMUsage(SiS_Pr, HwInfo);

   /* Save mode info so we can set it from within SetMode for CRT1 */
#ifdef SISDUALHEAD
   if(pSiS->DualHeadMode) {
      pSiSEnt->CRT2ModeNo = ModeNo;
      pSiSEnt->CRT2DMode = mode;
      pSiSEnt->CRT2IsCustom = IsCustom;
      pSiSEnt->CRT2CR30 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
      pSiSEnt->CRT2CR31 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x31);
      pSiSEnt->CRT2CR35 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
      pSiSEnt->CRT2CR38 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
#if 0
      /* We can't set CRT2 mode before CRT1 mode is set */
      if(pSiSEnt->CRT1ModeNo == -1) {
    	 xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
		"Setting CRT2 mode delayed until after setting CRT1 mode\n");
   	 return TRUE;
      }
#endif      
      pSiSEnt->CRT2ModeSet = TRUE;
   }
#endif

   /* We don't clear the buffer under X */
   SiS_Pr->SiS_flag_clearbuffer=0;

   if(SiS_Pr->UseCustomMode) {

      USHORT temptemp = SiS_Pr->CVDisplay;

      if(SiS_Pr->CModeFlag & DoubleScanMode)     temptemp >>= 1;
      else if(SiS_Pr->CInfoFlag & InterlaceMode) temptemp <<= 1;

      xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
	  "Setting custom mode %dx%d on CRT2\n",
	  SiS_Pr->CHDisplay, temptemp);

   } else {

      xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
   	  "Setting standard mode 0x%x on CRT2\n", ModeNo);

   }

   SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x86);

   SiS_UnLockCRT2(SiS_Pr, HwInfo);

   if(!SiS_Pr->UseCustomMode) {
      if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return FALSE;
   } else {
      ModeIdIndex = 0;
   }

   SiS_GetVBType(SiS_Pr, HwInfo);

   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
	 SiS_ResetVB(SiS_Pr, HwInfo);
	 SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x32,0x10);
	 SiS_SetRegOR(SiS_Pr->SiS_Part2Port,0x00,0x0c);
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
      } else {
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
      }
   }

   /* Get VB information (connectors, connected devices) */
   if(!SiS_Pr->UseCustomMode) {
      SiS_GetVBInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, 1);
   } else {
      /* If this is a custom mode, we don't check the modeflag for CRT2Mode */
      SiS_GetVBInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, 0);
   }
   SiS_SetYPbPr(SiS_Pr, HwInfo);
   SiS_SetTVMode(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_GetLCDResInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_SetLowModeTest(SiS_Pr, ModeNo, HwInfo);

   /* Set mode on CRT2 */
   if( (SiS_Pr->SiS_VBType & VB_SISVB)    ||
       (SiS_Pr->SiS_IF_DEF_LVDS     == 1) ||
       (SiS_Pr->SiS_IF_DEF_CH70xx   != 0) ||
       (SiS_Pr->SiS_IF_DEF_TRUMPION != 0) ) {
      SiS_SetCRT2Group(SiS_Pr, HwInfo, ModeNo);
   }

   SiS_StrangeStuff(SiS_Pr, HwInfo);

   SiS_DisplayOn(SiS_Pr);
   SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xFF);

   if(HwInfo->jChipType >= SIS_315H) {
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
         if(!(SiS_IsDualEdge(SiS_Pr, HwInfo))) {
	    SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	 }
      }
   }

   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
         if(!SiS_Pr->SiS_ROMNew) {
	    if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x35,0x01);
	    } else {
	       SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x35,0xFE);
	    }
	 }

	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,backupreg);

	 if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x30) & SetCRT2ToLCD) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0xfc);
	 }
      } else if((HwInfo->jChipType == SIS_630) ||
                (HwInfo->jChipType == SIS_730)) {
         SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,backupreg);
      }
   }

   /* SetPitch: Adapt to virtual size & position */
   SiS_SetPitchCRT2(SiS_Pr, pScrn);

   return TRUE;
}

/*********************************************/
/*       XFree86: SiSBIOSSetModeCRT1()       */
/*           for Dual-Head modes             */
/*********************************************/

BOOLEAN
SiSBIOSSetModeCRT1(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, ScrnInfoPtr pScrn,
                   DisplayModePtr mode, BOOLEAN IsCustom)
{
   SISPtr  pSiS = SISPTR(pScrn);
   SISIOADDRESS BaseAddr = HwInfo->ulIOAddress;
   USHORT  ModeIdIndex, ModeNo=0;
   UCHAR backupreg=0;
#ifdef SISDUALHEAD
   SISEntPtr pSiSEnt = pSiS->entityPrivate;
   UCHAR backupcr30, backupcr31, backupcr38, backupcr35, backupp40d=0;
   BOOLEAN backupcustom;
#endif

   SiS_Pr->UseCustomMode = FALSE;

   if((IsCustom) && (SiS_CheckBuildCustomMode(pScrn, mode, pSiS->VBFlags))) {

         USHORT temptemp = SiS_Pr->CVDisplay;

         if(SiS_Pr->CModeFlag & DoubleScanMode)     temptemp >>= 1;
         else if(SiS_Pr->CInfoFlag & InterlaceMode) temptemp <<= 1;

         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
	 	"Setting custom mode %dx%d on CRT1\n",
	 	SiS_Pr->CHDisplay, temptemp);
	 ModeNo = 0xfe;

   } else {

         ModeNo = SiS_CalcModeIndex(pScrn, mode, pSiS->VBFlags, pSiS->HaveCustomModes);
         if(!ModeNo) return FALSE;

         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
	 	"Setting standard mode 0x%x on CRT1\n", ModeNo);
   }

   SiSInitPtr(SiS_Pr, HwInfo);
   SiSRegInit(SiS_Pr, BaseAddr);
   SiS_GetSysFlags(SiS_Pr, HwInfo);
#if (defined(i386) || defined(__i386) || defined(__i386__) || defined(__AMD64__))
   SiS_Pr->SiS_VGAINFO = SiS_GetSetBIOSScratch(pScrn, 0x489, 0xff);
#else
   SiS_Pr->SiS_VGAINFO = 0x11;
#endif
   SiSInitPCIetc(SiS_Pr, HwInfo);
   SiSSetLVDSetc(SiS_Pr, HwInfo);
   SiSDetermineROMUsage(SiS_Pr, HwInfo);

   /* We don't clear the buffer under X */
   SiS_Pr->SiS_flag_clearbuffer = 0;

   SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x86);

   SiS_UnLockCRT2(SiS_Pr, HwInfo);

   if(!SiS_Pr->UseCustomMode) {
      if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return FALSE;
   } else {
      ModeIdIndex = 0;
   }

   /* Determine VBType */
   SiS_GetVBType(SiS_Pr, HwInfo);

   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
      } else {
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
      }
   }

   /* Get VB information (connectors, connected devices) */
   /* (We don't care if the current mode is a CRT2 mode) */
   SiS_GetVBInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, 0);
   SiS_SetYPbPr(SiS_Pr, HwInfo);
   SiS_SetTVMode(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_GetLCDResInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_SetLowModeTest(SiS_Pr, ModeNo, HwInfo);

   if(HwInfo->jChipType >= SIS_315H) {
      SiS_SetupCR5x(SiS_Pr, HwInfo);
   }

   /* Set mode on CRT1 */
   SiS_SetCRT1Group(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      SiS_SetCRT2Group(SiS_Pr, HwInfo, ModeNo);
   }

   /* SetPitch: Adapt to virtual size & position */
   SiS_SetPitchCRT1(SiS_Pr, pScrn);

#ifdef SISDUALHEAD
   if(pSiS->DualHeadMode) {
      pSiSEnt->CRT1ModeNo = ModeNo;
      pSiSEnt->CRT1DMode = mode;
   }
#endif

   if(SiS_Pr->UseCustomMode) {
      SiS_Pr->CRT1UsesCustomMode = TRUE;
      SiS_Pr->CSRClock_CRT1 = SiS_Pr->CSRClock;
      SiS_Pr->CModeFlag_CRT1 = SiS_Pr->CModeFlag;
   } else {
      SiS_Pr->CRT1UsesCustomMode = FALSE;
   }

   /* Reset CRT2 if changing mode on CRT1 */
#ifdef SISDUALHEAD
   if(pSiS->DualHeadMode) {
      if(pSiSEnt->CRT2ModeNo != -1) {
         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
				"(Re-)Setting mode for CRT2\n");
	 backupcustom = SiS_Pr->UseCustomMode;
	 backupcr30 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
	 backupcr31 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x31);
	 backupcr35 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
	 backupcr38 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
	 if(SiS_Pr->SiS_VBType & VB_SISVB) {
	    /* Backup LUT-enable */
	    if(pSiSEnt->CRT2ModeSet) {
	       backupp40d = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x0d) & 0x08;
	    }
	 }
	 if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	    SiS_SetReg(SiS_Pr->SiS_P3d4,0x30,pSiSEnt->CRT2CR30);
	    SiS_SetReg(SiS_Pr->SiS_P3d4,0x31,pSiSEnt->CRT2CR31);
	    SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,pSiSEnt->CRT2CR35);
	    SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,pSiSEnt->CRT2CR38);
	 }
	 SiSBIOSSetModeCRT2(SiS_Pr, HwInfo, pSiSEnt->pScrn_1,
			    pSiSEnt->CRT2DMode, pSiSEnt->CRT2IsCustom);
         SiS_SetReg(SiS_Pr->SiS_P3d4,0x30,backupcr30);
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x31,backupcr31);
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,backupcr35);
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,backupcr38);
	 if(SiS_Pr->SiS_VBType & VB_SISVB) {
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0d, ~0x08, backupp40d);
	 }
	 SiS_Pr->UseCustomMode = backupcustom;
      }
   }
#endif

   /* Warning: From here, the custom mode entries in SiS_Pr are
    * possibly overwritten
    */

   SiS_HandleCRT1(SiS_Pr);

   SiS_StrangeStuff(SiS_Pr, HwInfo);

   SiS_DisplayOn(SiS_Pr);
   SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xFF);

   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,backupreg);
      } else if((HwInfo->jChipType == SIS_630) ||
                (HwInfo->jChipType == SIS_730)) {
         SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,backupreg);
      }
   }

   /* Backup/Set ModeNo in BIOS scratch area */
   SiS_GetSetModeID(pScrn,ModeNo);

   return TRUE;
}
#endif /* Linux_XF86 */


#ifdef LINUX_XF86
BOOLEAN
SiS_GetPanelID(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  const USHORT PanelTypeTable300[16] = {
      0xc101, 0xc117, 0x0121, 0xc135, 0xc142, 0xc152, 0xc162, 0xc072,
      0xc181, 0xc192, 0xc1a1, 0xc1b6, 0xc1c2, 0xc0d2, 0xc1e2, 0xc1f2
  };
  const USHORT PanelTypeTable31030x[16] = {
      0xc102, 0xc112, 0x0122, 0xc132, 0xc142, 0xc152, 0xc169, 0xc179,
      0x0189, 0xc192, 0xc1a2, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  };
  const USHORT PanelTypeTable310LVDS[16] = {
      0xc111, 0xc122, 0xc133, 0xc144, 0xc155, 0xc166, 0xc177, 0xc188,
      0xc199, 0xc0aa, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  };
  USHORT tempax,tempbx,temp;

  if(HwInfo->jChipType < SIS_315H) {

     tempax = SiS_GetReg(SiS_Pr->SiS_P3c4,0x18);
     tempbx = tempax & 0x0F;
     if(!(tempax & 0x10)){
        if(SiS_Pr->SiS_IF_DEF_LVDS == 1){
           tempbx = 0;
           temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x38);
           if(temp & 0x40) tempbx |= 0x08;
           if(temp & 0x20) tempbx |= 0x02;
           if(temp & 0x01) tempbx |= 0x01;
           temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x39);
           if(temp & 0x80) tempbx |= 0x04;
        } else {
           return 0;
        }
     }
     tempbx = PanelTypeTable300[tempbx];
     tempbx |= LCDSync;
     temp = tempbx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_P3d4,0x36,temp);
     temp = (tempbx & 0xFF00) >> 8;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,~(LCDSyncBit|LCDRGB18Bit),temp);

  } else {

     if(HwInfo->jChipType >= SIS_661) return 0;

     tempax = SiS_GetReg(SiS_Pr->SiS_P3c4,0x1a);
     tempax &= 0x1e;
     tempax >>= 1;
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        if(tempax == 0) {
           /* TODO: Include HUGE detection routine
	            (Probably not worth bothering)
	    */
           return 0;
        }
        temp = tempax & 0xff;
        tempax--;
        tempbx = PanelTypeTable310LVDS[tempax];
     } else {
        tempbx = PanelTypeTable31030x[tempax];
        temp = tempbx & 0xff;
     }
     SiS_SetReg(SiS_Pr->SiS_P3d4,0x36,temp);
     tempbx = (tempbx & 0xff00) >> 8;
     temp = tempbx & 0xc1;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,~(LCDSyncBit|LCDRGB18Bit),temp);
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        temp = tempbx & 0x04;
        SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x39,0xfb,temp);
     }

  }
  return 1;
}
#endif

#ifndef GETBITSTR
#define BITMASK(h,l)    	(((unsigned)(1U << ((h)-(l)+1))-1)<<(l))
#define GENMASK(mask)   	BITMASK(1?mask,0?mask)
#define GETBITS(var,mask)   	(((var) & GENMASK(mask)) >> (0?mask))
#define GETBITSTR(val,from,to)  ((GETBITS(val,from)) << (0?to))
#endif

static void
SiS_CalcCRRegisters(SiS_Private *SiS_Pr, int depth)
{
   SiS_Pr->CCRT1CRTC[0]  =  ((SiS_Pr->CHTotal >> 3) - 5) & 0xff;		/* CR0 */
   SiS_Pr->CCRT1CRTC[1]  =  (SiS_Pr->CHDisplay >> 3) - 1;			/* CR1 */
   SiS_Pr->CCRT1CRTC[2]  =  (SiS_Pr->CHBlankStart >> 3) - 1;			/* CR2 */
   SiS_Pr->CCRT1CRTC[3]  =  (((SiS_Pr->CHBlankEnd >> 3) - 1) & 0x1F) | 0x80;	/* CR3 */
   SiS_Pr->CCRT1CRTC[4]  =  (SiS_Pr->CHSyncStart >> 3) + 3;			/* CR4 */
   SiS_Pr->CCRT1CRTC[5]  =  ((((SiS_Pr->CHBlankEnd >> 3) - 1) & 0x20) << 2) |	/* CR5 */
       			    (((SiS_Pr->CHSyncEnd >> 3) + 3) & 0x1F);

   SiS_Pr->CCRT1CRTC[6]  =  (SiS_Pr->CVTotal - 2) & 0xFF;			/* CR6 */
   SiS_Pr->CCRT1CRTC[7]  =  (((SiS_Pr->CVTotal - 2) & 0x100) >> 8)		/* CR7 */
 	 		  | (((SiS_Pr->CVDisplay - 1) & 0x100) >> 7)
	 		  | ((SiS_Pr->CVSyncStart & 0x100) >> 6)
	 	  	  | (((SiS_Pr->CVBlankStart - 1) & 0x100) >> 5)
			  | 0x10
	 		  | (((SiS_Pr->CVTotal - 2) & 0x200)   >> 4)
	 		  | (((SiS_Pr->CVDisplay - 1) & 0x200) >> 3)
	 		  | ((SiS_Pr->CVSyncStart & 0x200) >> 2);

   SiS_Pr->CCRT1CRTC[16] = ((((SiS_Pr->CVBlankStart - 1) & 0x200) >> 4) >> 5); 	/* CR9 */

   if(depth != 8) {
      if(SiS_Pr->CHDisplay >= 1600)      SiS_Pr->CCRT1CRTC[16] |= 0x60;		/* SRE */
      else if(SiS_Pr->CHDisplay >= 640)  SiS_Pr->CCRT1CRTC[16] |= 0x40;
   }

#if 0
   if (mode->VScan >= 32)
	regp->CRTC[9] |= 0x1F;
   else if (mode->VScan > 1)
	regp->CRTC[9] |= mode->VScan - 1;
#endif

   SiS_Pr->CCRT1CRTC[8] =  (SiS_Pr->CVSyncStart     ) & 0xFF;			/* CR10 */
   SiS_Pr->CCRT1CRTC[9] =  ((SiS_Pr->CVSyncEnd      ) & 0x0F) | 0x80;		/* CR11 */
   SiS_Pr->CCRT1CRTC[10] = (SiS_Pr->CVDisplay    - 1) & 0xFF;			/* CR12 */
   SiS_Pr->CCRT1CRTC[11] = (SiS_Pr->CVBlankStart - 1) & 0xFF;			/* CR15 */
   SiS_Pr->CCRT1CRTC[12] = (SiS_Pr->CVBlankEnd   - 1) & 0xFF;			/* CR16 */

   SiS_Pr->CCRT1CRTC[13] =							/* SRA */
                        GETBITSTR((SiS_Pr->CVTotal     -2), 10:10, 0:0) |
                        GETBITSTR((SiS_Pr->CVDisplay   -1), 10:10, 1:1) |
                        GETBITSTR((SiS_Pr->CVBlankStart-1), 10:10, 2:2) |
                        GETBITSTR((SiS_Pr->CVSyncStart   ), 10:10, 3:3) |
                        GETBITSTR((SiS_Pr->CVBlankEnd  -1),   8:8, 4:4) |
                        GETBITSTR((SiS_Pr->CVSyncEnd     ),   4:4, 5:5) ;

   SiS_Pr->CCRT1CRTC[14] =							/* SRB */
                        GETBITSTR((SiS_Pr->CHTotal      >> 3) - 5, 9:8, 1:0) |
                        GETBITSTR((SiS_Pr->CHDisplay    >> 3) - 1, 9:8, 3:2) |
                        GETBITSTR((SiS_Pr->CHBlankStart >> 3) - 1, 9:8, 5:4) |
                        GETBITSTR((SiS_Pr->CHSyncStart  >> 3) + 3, 9:8, 7:6) ;


   SiS_Pr->CCRT1CRTC[15] =							/* SRC */
                        GETBITSTR((SiS_Pr->CHBlankEnd >> 3) - 1, 7:6, 1:0) |
                        GETBITSTR((SiS_Pr->CHSyncEnd  >> 3) + 3, 5:5, 2:2) ;
}

void
SiS_CalcLCDACRT1Timing(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex)
{
   USHORT modeflag, tempax, tempbx, VGAHDE = SiS_Pr->SiS_VGAHDE;
   int i,j;

   /* 1:1 data: use data set by setcrt1crtc() */
   if(SiS_Pr->SiS_LCDInfo & LCDPass11) return;

   if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
   } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
   } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
   }

   if(modeflag & HalfDCLK) VGAHDE >>= 1;

   SiS_Pr->CHDisplay = VGAHDE;
   SiS_Pr->CHBlankStart = VGAHDE;

   SiS_Pr->CVDisplay = SiS_Pr->SiS_VGAVDE;
   SiS_Pr->CVBlankStart = SiS_Pr->SiS_VGAVDE;

   tempbx = SiS_Pr->PanelHT - SiS_Pr->PanelXRes;
   tempax = SiS_Pr->SiS_VGAHDE;  /* not /2 ! */
   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
      tempax = SiS_Pr->PanelXRes;
   }
   tempbx += tempax;
   if(modeflag & HalfDCLK) tempbx -= VGAHDE;
   SiS_Pr->CHTotal = SiS_Pr->CHBlankEnd = tempbx;

   tempax = VGAHDE;
   tempbx = SiS_Pr->CHTotal;
   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
      tempbx = SiS_Pr->PanelXRes;
      if(modeflag & HalfDCLK) tempbx >>= 1;
      tempax += ((tempbx - tempax) >> 1);
   }

   tempax += SiS_Pr->PanelHRS;
   SiS_Pr->CHSyncStart = tempax;
   tempax += SiS_Pr->PanelHRE;
   SiS_Pr->CHSyncEnd = tempax;

   tempbx = SiS_Pr->PanelVT - SiS_Pr->PanelYRes;
   tempax = SiS_Pr->SiS_VGAVDE;
   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
      tempax = SiS_Pr->PanelYRes;
   }
   SiS_Pr->CVTotal = SiS_Pr->CVBlankEnd = tempbx + tempax;

   tempax = SiS_Pr->SiS_VGAVDE;
   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
      tempax += (SiS_Pr->PanelYRes - tempax) >> 1;
   }
   tempax += SiS_Pr->PanelVRS;
   SiS_Pr->CVSyncStart = tempax;
   tempax += SiS_Pr->PanelVRE;
   SiS_Pr->CVSyncEnd = tempax;

   SiS_CalcCRRegisters(SiS_Pr, 8);
   SiS_Pr->CCRT1CRTC[16] &= ~0xE0;

   SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);

   for(i=0,j=0;i<=7;i++,j++) {
      SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
   }
   for(j=0x10;i<=10;i++,j++) {
      SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
   }
   for(j=0x15;i<=12;i++,j++) {
      SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
   }
   for(j=0x0A;i<=15;i++,j++) {
      SiS_SetReg(SiS_Pr->SiS_P3c4,j,SiS_Pr->CCRT1CRTC[i]);
   }

   tempax = SiS_Pr->CCRT1CRTC[16] & 0xE0;
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0x1F,tempax);

   tempax = (SiS_Pr->CCRT1CRTC[16] & 0x01) << 5;
   if(modeflag & DoubleScanMode) tempax |= 0x80;
   SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0x5F,tempax);

#ifdef TWDEBUG
   xf86DrvMsg(0, X_INFO, "%d %d %d %d  %d %d %d %d  (%d %d %d %d)\n",
       	SiS_Pr->CHDisplay, SiS_Pr->CHSyncStart, SiS_Pr->CHSyncEnd, SiS_Pr->CHTotal,
	SiS_Pr->CVDisplay, SiS_Pr->CVSyncStart, SiS_Pr->CVSyncEnd, SiS_Pr->CVTotal,
	SiS_Pr->CHBlankStart, SiS_Pr->CHBlankEnd, SiS_Pr->CVBlankStart, SiS_Pr->CVBlankEnd);

   xf86DrvMsg(0, X_INFO, " {{0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,\n",
   	SiS_Pr->CCRT1CRTC[0], SiS_Pr->CCRT1CRTC[1],
	SiS_Pr->CCRT1CRTC[2], SiS_Pr->CCRT1CRTC[3],
	SiS_Pr->CCRT1CRTC[4], SiS_Pr->CCRT1CRTC[5],
	SiS_Pr->CCRT1CRTC[6], SiS_Pr->CCRT1CRTC[7]);
   xf86DrvMsg(0, X_INFO, "   0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,\n",
   	SiS_Pr->CCRT1CRTC[8], SiS_Pr->CCRT1CRTC[9],
	SiS_Pr->CCRT1CRTC[10], SiS_Pr->CCRT1CRTC[11],
	SiS_Pr->CCRT1CRTC[12], SiS_Pr->CCRT1CRTC[13],
	SiS_Pr->CCRT1CRTC[14], SiS_Pr->CCRT1CRTC[15]);
   xf86DrvMsg(0, X_INFO, "   0x%02x}},\n", SiS_Pr->CCRT1CRTC[16]);
#endif
}

/* ================ XFREE86 ================= */

/* Helper functions */

#ifdef LINUX_XF86

USHORT
SiS_CheckBuildCustomMode(ScrnInfoPtr pScrn, DisplayModePtr mode, int VBFlags)
{
   SISPtr pSiS = SISPTR(pScrn);
   int    out_n, out_dn, out_div, out_sbit, out_scale;
   int    depth = pSiS->CurrentLayout.bitsPerPixel;
   unsigned int vclk[5];

#define Midx         0
#define Nidx         1
#define VLDidx       2
#define Pidx         3
#define PSNidx       4

   pSiS->SiS_Pr->CModeFlag = 0;
   
   pSiS->SiS_Pr->CDClock = mode->Clock;

   pSiS->SiS_Pr->CHDisplay = mode->HDisplay;
   pSiS->SiS_Pr->CHSyncStart = mode->HSyncStart;
   pSiS->SiS_Pr->CHSyncEnd = mode->HSyncEnd;
   pSiS->SiS_Pr->CHTotal = mode->HTotal;

   pSiS->SiS_Pr->CVDisplay = mode->VDisplay;
   pSiS->SiS_Pr->CVSyncStart = mode->VSyncStart;
   pSiS->SiS_Pr->CVSyncEnd = mode->VSyncEnd;
   pSiS->SiS_Pr->CVTotal = mode->VTotal;

   pSiS->SiS_Pr->CFlags = mode->Flags;

   if(pSiS->SiS_Pr->CFlags & V_INTERLACE) {
      pSiS->SiS_Pr->CVDisplay >>= 1;
      pSiS->SiS_Pr->CVSyncStart >>= 1;
      pSiS->SiS_Pr->CVSyncEnd >>= 1;
      pSiS->SiS_Pr->CVTotal >>= 1;
   }
   if(pSiS->SiS_Pr->CFlags & V_DBLSCAN) {
      /* pSiS->SiS_Pr->CDClock <<= 1; */
      pSiS->SiS_Pr->CVDisplay <<= 1;
      pSiS->SiS_Pr->CVSyncStart <<= 1;
      pSiS->SiS_Pr->CVSyncEnd <<= 1;
      pSiS->SiS_Pr->CVTotal <<= 1;
   }

   pSiS->SiS_Pr->CHBlankStart = pSiS->SiS_Pr->CHDisplay;
   pSiS->SiS_Pr->CHBlankEnd = pSiS->SiS_Pr->CHTotal;
   pSiS->SiS_Pr->CVBlankStart = pSiS->SiS_Pr->CVSyncStart - 1;
   pSiS->SiS_Pr->CVBlankEnd = pSiS->SiS_Pr->CVTotal;

   if(SiS_compute_vclk(pSiS->SiS_Pr->CDClock, &out_n, &out_dn, &out_div, &out_sbit, &out_scale)) {
      pSiS->SiS_Pr->CSR2B = (out_div == 2) ? 0x80 : 0x00;
      pSiS->SiS_Pr->CSR2B |= ((out_n - 1) & 0x7f);
      pSiS->SiS_Pr->CSR2C = (out_dn - 1) & 0x1f;
      pSiS->SiS_Pr->CSR2C |= (((out_scale - 1) & 3) << 5);
      pSiS->SiS_Pr->CSR2C |= ((out_sbit & 0x01) << 7);
#ifdef TWDEBUG
      xf86DrvMsg(pScrn->scrnIndex, X_INFO, "Clock %d: n %d dn %d div %d sb %d sc %d\n",
        	pSiS->SiS_Pr->CDClock, out_n, out_dn, out_div, out_sbit, out_scale);
#endif
   } else {
      SiSCalcClock(pScrn, pSiS->SiS_Pr->CDClock, 2, vclk);
      pSiS->SiS_Pr->CSR2B = (vclk[VLDidx] == 2) ? 0x80 : 0x00;
      pSiS->SiS_Pr->CSR2B |= (vclk[Midx] - 1) & 0x7f;
      pSiS->SiS_Pr->CSR2C = (vclk[Nidx] - 1) & 0x1f;
      if(vclk[Pidx] <= 4) {
         /* postscale 1,2,3,4 */
         pSiS->SiS_Pr->CSR2C |= ((vclk[Pidx] - 1) & 3) << 5;
      } else {
         /* postscale 6,8 */
         pSiS->SiS_Pr->CSR2C |= (((vclk[Pidx] / 2) - 1) & 3) << 5;
	 pSiS->SiS_Pr->CSR2C |= 0x80;
      }
#ifdef TWDEBUG
      xf86DrvMsg(pScrn->scrnIndex, X_INFO, "Clock %d: n %d dn %d div %d sc %d\n",
        	pSiS->SiS_Pr->CDClock, vclk[Midx], vclk[Nidx], vclk[VLDidx], vclk[Pidx]);
#endif
   }

   pSiS->SiS_Pr->CSRClock = (pSiS->SiS_Pr->CDClock / 1000) + 1;

   SiS_CalcCRRegisters(pSiS->SiS_Pr, depth);

   switch(depth) {
   case 8:  pSiS->SiS_Pr->CModeFlag |= 0x223b; break;
   case 16: pSiS->SiS_Pr->CModeFlag |= 0x227d; break;
   case 32: pSiS->SiS_Pr->CModeFlag |= 0x22ff; break;
   default: return 0;
   }

   if(pSiS->SiS_Pr->CFlags & V_DBLSCAN)
      pSiS->SiS_Pr->CModeFlag |= DoubleScanMode;

   if((pSiS->SiS_Pr->CVDisplay >= 1024)	||
      (pSiS->SiS_Pr->CVTotal >= 1024)   ||
      (pSiS->SiS_Pr->CHDisplay >= 1024))
      pSiS->SiS_Pr->CModeFlag |= LineCompareOff;

   if(pSiS->SiS_Pr->CFlags & V_CLKDIV2)
      pSiS->SiS_Pr->CModeFlag |= HalfDCLK;

   pSiS->SiS_Pr->CInfoFlag = 0x0007;

   if(pSiS->SiS_Pr->CFlags & V_NHSYNC)
      pSiS->SiS_Pr->CInfoFlag |= 0x4000;

   if(pSiS->SiS_Pr->CFlags & V_NVSYNC)
      pSiS->SiS_Pr->CInfoFlag |= 0x8000;

   if(pSiS->SiS_Pr->CFlags & V_INTERLACE)
      pSiS->SiS_Pr->CInfoFlag |= InterlaceMode;

   pSiS->SiS_Pr->UseCustomMode = TRUE;
#ifdef TWDEBUG
   xf86DrvMsg(0, X_INFO, "Custom mode %dx%d:\n",
   	pSiS->SiS_Pr->CHDisplay,pSiS->SiS_Pr->CVDisplay);
   xf86DrvMsg(0, X_INFO, "Modeflag %04x, Infoflag %04x\n",
   	pSiS->SiS_Pr->CModeFlag, pSiS->SiS_Pr->CInfoFlag);
   xf86DrvMsg(0, X_INFO, " {{0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,\n",
   	pSiS->SiS_Pr->CCRT1CRTC[0], pSiS->SiS_Pr->CCRT1CRTC[1],
	pSiS->SiS_Pr->CCRT1CRTC[2], pSiS->SiS_Pr->CCRT1CRTC[3],
	pSiS->SiS_Pr->CCRT1CRTC[4], pSiS->SiS_Pr->CCRT1CRTC[5],
	pSiS->SiS_Pr->CCRT1CRTC[6], pSiS->SiS_Pr->CCRT1CRTC[7]);
   xf86DrvMsg(0, X_INFO, "  0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,\n",
   	pSiS->SiS_Pr->CCRT1CRTC[8], pSiS->SiS_Pr->CCRT1CRTC[9],
	pSiS->SiS_Pr->CCRT1CRTC[10], pSiS->SiS_Pr->CCRT1CRTC[11],
	pSiS->SiS_Pr->CCRT1CRTC[12], pSiS->SiS_Pr->CCRT1CRTC[13],
	pSiS->SiS_Pr->CCRT1CRTC[14], pSiS->SiS_Pr->CCRT1CRTC[15]);
   xf86DrvMsg(0, X_INFO, "  0x%02x}},\n", pSiS->SiS_Pr->CCRT1CRTC[16]);
   xf86DrvMsg(0, X_INFO, "Clock: 0x%02x, 0x%02x, %d\n",
   	pSiS->SiS_Pr->CSR2B, pSiS->SiS_Pr->CSR2C, pSiS->SiS_Pr->CSRClock);
#endif
   return 1;
}

/* Build a list of supported modes */
DisplayModePtr
SiSBuildBuiltInModeList(ScrnInfoPtr pScrn, BOOLEAN includelcdmodes, BOOLEAN isfordvi)
{
   SISPtr         pSiS = SISPTR(pScrn);
   unsigned short VRE, VBE, VRS, VBS, VDE, VT;
   unsigned short HRE, HBE, HRS, HBS, HDE, HT;
   unsigned char  sr_data, cr_data, cr_data2, cr_data3;
   unsigned char  sr2b, sr2c;
   float          num, denum, postscalar, divider;
   int            A, B, C, D, E, F, temp, i, j, k, l, index, vclkindex;
   DisplayModePtr new = NULL, current = NULL, first = NULL;
   BOOLEAN        done = FALSE;
#if 0
   DisplayModePtr backup = NULL;
#endif

   pSiS->backupmodelist = NULL;
   pSiS->AddedPlasmaModes = FALSE;

   /* Initialize our pointers */
   if(pSiS->VGAEngine == SIS_300_VGA) {
#ifdef SIS300
      InitTo300Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
#else
      return NULL;
#endif
   } else if(pSiS->VGAEngine == SIS_315_VGA) {
#ifdef SIS315H
      InitTo310Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
#else
      return NULL;
#endif
   } else return NULL;

   i = 0;
   while(pSiS->SiS_Pr->SiS_RefIndex[i].Ext_InfoFlag != 0xFFFF) {

      index = pSiS->SiS_Pr->SiS_RefIndex[i].Ext_CRT1CRTC;

      /* 0x5a (320x240) is a pure FTSN mode, not DSTN! */
      if((!pSiS->FSTN) &&
	 (pSiS->SiS_Pr->SiS_RefIndex[i].ModeID == 0x5a))  {
           i++;
      	   continue;
      }
      if((pSiS->FSTN) &&
         (pSiS->SiS_Pr->SiS_RefIndex[i].XRes == 320) &&
	 (pSiS->SiS_Pr->SiS_RefIndex[i].YRes == 240) &&
	 (pSiS->SiS_Pr->SiS_RefIndex[i].ModeID != 0x5a)) {
	   i++;
	   continue;
      }

      if(!(new = xalloc(sizeof(DisplayModeRec)))) return first;
      memset(new, 0, sizeof(DisplayModeRec));
      if(!(new->name = xalloc(10))) {
      		xfree(new);
		return first;
      }
      if(!first) first = new;
      if(current) {
         current->next = new;
	 new->prev = current;
      }

      current = new;

      sprintf(current->name, "%dx%d", pSiS->SiS_Pr->SiS_RefIndex[i].XRes,
                                      pSiS->SiS_Pr->SiS_RefIndex[i].YRes);

      current->status = MODE_OK;

      current->type = M_T_DEFAULT;

      vclkindex = pSiS->SiS_Pr->SiS_RefIndex[i].Ext_CRTVCLK;
      if(pSiS->VGAEngine == SIS_300_VGA) vclkindex &= 0x3F;

      sr2b = pSiS->SiS_Pr->SiS_VCLKData[vclkindex].SR2B;
      sr2c = pSiS->SiS_Pr->SiS_VCLKData[vclkindex].SR2C;

      divider = (sr2b & 0x80) ? 2.0 : 1.0;
      postscalar = (sr2c & 0x80) ?
              ( (((sr2c >> 5) & 0x03) == 0x02) ? 6.0 : 8.0) : (((sr2c >> 5) & 0x03) + 1.0);
      num = (sr2b & 0x7f) + 1.0;
      denum = (sr2c & 0x1f) + 1.0;

#ifdef TWDEBUG
      xf86DrvMsg(0, X_INFO, "------------\n");
      xf86DrvMsg(0, X_INFO, "sr2b: %x sr2c %x div %f ps %f num %f denum %f\n",
         sr2b, sr2c, divider, postscalar, num, denum);
#endif

      current->Clock = (int)(14318 * (divider / postscalar) * (num / denum));

      sr_data = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[14];
	/* inSISIDXREG(SISSR, 0x0b, sr_data); */

      cr_data = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[0];
	/* inSISIDXREG(SISCR, 0x00, cr_data); */

      /* Horizontal total */
      HT = (cr_data & 0xff) |
           ((unsigned short) (sr_data & 0x03) << 8);
      A = HT + 5;

      cr_data = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[1];
	/* inSISIDXREG(SISCR, 0x01, cr_data); */

      /* Horizontal display enable end */
      HDE = (cr_data & 0xff) |
            ((unsigned short) (sr_data & 0x0C) << 6);
      E = HDE + 1;  /* 0x80 0x64 */

      cr_data = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[4];
	/* inSISIDXREG(SISCR, 0x04, cr_data); */

      /* Horizontal retrace (=sync) start */
      HRS = (cr_data & 0xff) |
            ((unsigned short) (sr_data & 0xC0) << 2);
      F = HRS - E - 3;  /* 0x06 0x06 */

      cr_data = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[2];
	/* inSISIDXREG(SISCR, 0x02, cr_data); */

      /* Horizontal blank start */
      HBS = (cr_data & 0xff) |
            ((unsigned short) (sr_data & 0x30) << 4);

      sr_data = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[15];
	/* inSISIDXREG(SISSR, 0x0c, sr_data); */

      cr_data = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[3];
	/* inSISIDXREG(SISCR, 0x03, cr_data);  */

      cr_data2 = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[5];
	/* inSISIDXREG(SISCR, 0x05, cr_data2); */

      /* Horizontal blank end */
      HBE = (cr_data & 0x1f) |
            ((unsigned short) (cr_data2 & 0x80) >> 2) |
	    ((unsigned short) (sr_data & 0x03) << 6);

      /* Horizontal retrace (=sync) end */
      HRE = (cr_data2 & 0x1f) | ((sr_data & 0x04) << 3);

      temp = HBE - ((E - 1) & 255);
      B = (temp > 0) ? temp : (temp + 256);

      temp = HRE - ((E + F + 3) & 63);
      C = (temp > 0) ? temp : (temp + 64); /* 0x0b 0x0b */

      D = B - F - C;

      if((pSiS->SiS_Pr->SiS_RefIndex[i].XRes == 320) &&
	 ((pSiS->SiS_Pr->SiS_RefIndex[i].YRes == 200) ||
	  (pSiS->SiS_Pr->SiS_RefIndex[i].YRes == 240))) {

	 /* Terrible hack, but correct CRTC data for
	  * these modes only produces a black screen...
	  * (HRE is 0, leading into a too large C and
	  * a negative D. The CRT controller does not
	  * seem to like correcting HRE to 50
	  */
	 current->HDisplay   = 320;
         current->HSyncStart = 328;
         current->HSyncEnd   = 376;
         current->HTotal     = 400;

      } else {

         current->HDisplay   = (E * 8);
         current->HSyncStart = (E * 8) + (F * 8);
         current->HSyncEnd   = (E * 8) + (F * 8) + (C * 8);
         current->HTotal     = (E * 8) + (F * 8) + (C * 8) + (D * 8);

      }

#ifdef TWDEBUG
      xf86DrvMsg(0, X_INFO,
        "H: A %d B %d C %d D %d E %d F %d  HT %d HDE %d HRS %d HBS %d HBE %d HRE %d\n",
      	A, B, C, D, E, F, HT, HDE, HRS, HBS, HBE, HRE);
#endif

      sr_data = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[13];
	/* inSISIDXREG(SISSR, 0x0A, sr_data); */

      cr_data = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[6];
        /* inSISIDXREG(SISCR, 0x06, cr_data); */

      cr_data2 = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[7];
        /* inSISIDXREG(SISCR, 0x07, cr_data2);  */

      /* Vertical total */
      VT = (cr_data & 0xFF) |
           ((unsigned short) (cr_data2 & 0x01) << 8) |
	   ((unsigned short)(cr_data2 & 0x20) << 4) |
	   ((unsigned short) (sr_data & 0x01) << 10);
      A = VT + 2;

      cr_data = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[10];
	/* inSISIDXREG(SISCR, 0x12, cr_data);  */

      /* Vertical display enable end */
      VDE = (cr_data & 0xff) |
            ((unsigned short) (cr_data2 & 0x02) << 7) |
	    ((unsigned short) (cr_data2 & 0x40) << 3) |
	    ((unsigned short) (sr_data & 0x02) << 9);
      E = VDE + 1;

      cr_data = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[8];
	/* inSISIDXREG(SISCR, 0x10, cr_data); */

      /* Vertical retrace (=sync) start */
      VRS = (cr_data & 0xff) |
            ((unsigned short) (cr_data2 & 0x04) << 6) |
	    ((unsigned short) (cr_data2 & 0x80) << 2) |
	    ((unsigned short) (sr_data & 0x08) << 7);
      F = VRS + 1 - E;

      cr_data =  pSiS->SiS_Pr->SiS_CRT1Table[index].CR[11];
	/* inSISIDXREG(SISCR, 0x15, cr_data);  */

      cr_data3 = (pSiS->SiS_Pr->SiS_CRT1Table[index].CR[16] & 0x01) << 5;
	/* inSISIDXREG(SISCR, 0x09, cr_data3);  */

      /* Vertical blank start */
      VBS = (cr_data & 0xff) |
            ((unsigned short) (cr_data2 & 0x08) << 5) |
	    ((unsigned short) (cr_data3 & 0x20) << 4) |
	    ((unsigned short) (sr_data & 0x04) << 8);

      cr_data =  pSiS->SiS_Pr->SiS_CRT1Table[index].CR[12];
	/* inSISIDXREG(SISCR, 0x16, cr_data); */

      /* Vertical blank end */
      VBE = (cr_data & 0xff) |
            ((unsigned short) (sr_data & 0x10) << 4);
      temp = VBE - ((E - 1) & 511);
      B = (temp > 0) ? temp : (temp + 512);

      cr_data = pSiS->SiS_Pr->SiS_CRT1Table[index].CR[9];
	/* inSISIDXREG(SISCR, 0x11, cr_data); */

      /* Vertical retrace (=sync) end */
      VRE = (cr_data & 0x0f) | ((sr_data & 0x20) >> 1);
      temp = VRE - ((E + F - 1) & 31);
      C = (temp > 0) ? temp : (temp + 32);

      D = B - F - C;

      current->VDisplay   = VDE + 1;
      current->VSyncStart = VRS + 1;
      current->VSyncEnd   = ((VRS & ~0x1f) | VRE) + 1;
      if(VRE <= (VRS & 0x1f)) current->VSyncEnd += 32;
      current->VTotal     = E + D + C + F;

#if 0
      current->VDisplay   = E;
      current->VSyncStart = E + D;
      current->VSyncEnd   = E + D + C;
      current->VTotal     = E + D + C + F;
#endif

#ifdef TWDEBUG
      xf86DrvMsg(0, X_INFO,
        "V: A %d B %d C %d D %d E %d F %d  VT %d VDE %d VRS %d VBS %d VBE %d VRE %d\n",
      	A, B, C, D, E, F, VT, VDE, VRS, VBS, VBE, VRE);
#endif

      if(pSiS->SiS_Pr->SiS_RefIndex[i].Ext_InfoFlag & 0x4000)
          current->Flags |= V_NHSYNC;
      else
          current->Flags |= V_PHSYNC;

      if(pSiS->SiS_Pr->SiS_RefIndex[i].Ext_InfoFlag & 0x8000)
      	  current->Flags |= V_NVSYNC;
      else
          current->Flags |= V_PVSYNC;

      if(pSiS->SiS_Pr->SiS_RefIndex[i].Ext_InfoFlag & 0x0080)
          current->Flags |= V_INTERLACE;

      j = 0;
      while(pSiS->SiS_Pr->SiS_EModeIDTable[j].Ext_ModeID != 0xff) {
          if(pSiS->SiS_Pr->SiS_EModeIDTable[j].Ext_ModeID ==
	                  pSiS->SiS_Pr->SiS_RefIndex[i].ModeID) {
              if(pSiS->SiS_Pr->SiS_EModeIDTable[j].Ext_ModeFlag & DoubleScanMode) {
	      	  current->Flags |= V_DBLSCAN;
              }
	      break;
          }
	  j++;
      }

      if(current->Flags & V_INTERLACE) {
         current->VDisplay <<= 1;
	 current->VSyncStart <<= 1;
	 current->VSyncEnd <<= 1;
	 current->VTotal <<= 1;
	 current->VTotal |= 1;
      }
      if(current->Flags & V_DBLSCAN) {
         current->Clock >>= 1;
	 current->VDisplay >>= 1;
	 current->VSyncStart >>= 1;
	 current->VSyncEnd >>= 1;
	 current->VTotal >>= 1;
      }

#if 0
      if((backup = xalloc(sizeof(DisplayModeRec)))) {
         if(!pSiS->backupmodelist) pSiS->backupmodelist = backup;
	 else {
	    pSiS->backupmodelist->next = backup;
	    backup->prev = pSiS->backupmodelist;
	 }
	 backup->next = NULL;
	 backup->HDisplay = current->HDisplay;
         backup->HSyncStart = current->HSyncStart;
         backup->HSyncEnd = current->HSyncEnd;
         backup->HTotal = current->HTotal;
         backup->VDisplay = current->VDisplay;
         backup->VSyncStart = current->VSyncStart;
         backup->VSyncEnd = current->VSyncEnd;
         backup->VTotal = current->VTotal;
	 backup->Flags = current->Flags;
	 backup->Clock = current->Clock;
      }
#endif

#ifdef TWDEBUG
      xf86DrvMsg(pScrn->scrnIndex, X_INFO,
      	"Built-in: %s %.2f %d %d %d %d %d %d %d %d\n",
	current->name, (float)current->Clock / 1000,
	current->HDisplay, current->HSyncStart, current->HSyncEnd, current->HTotal,
	current->VDisplay, current->VSyncStart, current->VSyncEnd, current->VTotal);
#else
        (void)VBS;  (void)HBS;  (void)A;
#endif

      i++;
   }

   /* Add non-standard LCD modes for panel's detailed timings */

   if(!includelcdmodes) return first;

   if(pSiS->SiS_Pr->CP_Vendor) {
      xf86DrvMsg(0, X_INFO, "Checking database for vendor %x, product %x\n",
         pSiS->SiS_Pr->CP_Vendor, pSiS->SiS_Pr->CP_Product);
   }

   i = 0;
   while((!done) && (SiS_PlasmaTable[i].vendor) && (pSiS->SiS_Pr->CP_Vendor)) {

     if(SiS_PlasmaTable[i].vendor == pSiS->SiS_Pr->CP_Vendor) {

        for(j=0; j<SiS_PlasmaTable[i].productnum; j++) {

	    if(SiS_PlasmaTable[i].product[j] == pSiS->SiS_Pr->CP_Product) {

	       xf86DrvMsg(pScrn->scrnIndex, X_PROBED,
	       	  "Identified %s panel, adding specific modes\n",
		  SiS_PlasmaTable[i].plasmaname);

	       for(k=0; k<SiS_PlasmaTable[i].modenum; k++) {

	          if(isfordvi) {
		     if(!(SiS_PlasmaTable[i].plasmamodes[k] & 0x80)) continue;
		  } else {
		     if(!(SiS_PlasmaTable[i].plasmamodes[k] & 0x40)) continue;
		  }

	          if(!(new = xalloc(sizeof(DisplayModeRec)))) return first;

                  memset(new, 0, sizeof(DisplayModeRec));
                  if(!(new->name = xalloc(10))) {
      		     xfree(new);
		     return first;
                  }
                  if(!first) first = new;
                  if(current) {
                     current->next = new;
	             new->prev = current;
                  }

                  current = new;

		  pSiS->AddedPlasmaModes = TRUE;

		  l = SiS_PlasmaTable[i].plasmamodes[k] & 0x3f;

	          sprintf(current->name, "%dx%d", SiS_PlasmaMode[l].HDisplay,
                                                  SiS_PlasmaMode[l].VDisplay);

                  current->status = MODE_OK;

                  current->type = M_T_BUILTIN;

		  current->Clock = SiS_PlasmaMode[l].clock;
            	  current->SynthClock = current->Clock;

                  current->HDisplay   = SiS_PlasmaMode[l].HDisplay;
                  current->HSyncStart = current->HDisplay + SiS_PlasmaMode[l].HFrontPorch;
                  current->HSyncEnd   = current->HSyncStart + SiS_PlasmaMode[l].HSyncWidth;
                  current->HTotal     = SiS_PlasmaMode[l].HTotal;

		  current->VDisplay   = SiS_PlasmaMode[l].VDisplay;
                  current->VSyncStart = current->VDisplay + SiS_PlasmaMode[l].VFrontPorch;
                  current->VSyncEnd   = current->VSyncStart + SiS_PlasmaMode[l].VSyncWidth;
                  current->VTotal     = SiS_PlasmaMode[l].VTotal;

                  current->CrtcHDisplay = current->HDisplay;
                  current->CrtcHBlankStart = current->HSyncStart;
                  current->CrtcHSyncStart = current->HSyncStart;
                  current->CrtcHSyncEnd = current->HSyncEnd;
                  current->CrtcHBlankEnd = current->HSyncEnd;
                  current->CrtcHTotal = current->HTotal;

                  current->CrtcVDisplay = current->VDisplay;
                  current->CrtcVBlankStart = current->VSyncStart;
                  current->CrtcVSyncStart = current->VSyncStart;
                  current->CrtcVSyncEnd = current->VSyncEnd;
                  current->CrtcVBlankEnd = current->VSyncEnd;
                  current->CrtcVTotal = current->VTotal;

                  if(SiS_PlasmaMode[l].SyncFlags & SIS_PL_HSYNCP)
                     current->Flags |= V_PHSYNC;
                  else
                     current->Flags |= V_NHSYNC;

                  if(SiS_PlasmaMode[l].SyncFlags & SIS_PL_VSYNCP)
                     current->Flags |= V_PVSYNC;
                  else
                     current->Flags |= V_NVSYNC;

		  if(current->HDisplay > pSiS->LCDwidth)
		     pSiS->LCDwidth = pSiS->SiS_Pr->CP_MaxX = current->HDisplay;
	          if(current->VDisplay > pSiS->LCDheight)
		     pSiS->LCDheight = pSiS->SiS_Pr->CP_MaxY = current->VDisplay;

               }
	       done = TRUE;
	       break;
	    }
	}
     }

     i++;

   }

   if(pSiS->SiS_Pr->CP_HaveCustomData) {

      for(i=0; i<7; i++) {

         if(pSiS->SiS_Pr->CP_DataValid[i]) {

            if(!(new = xalloc(sizeof(DisplayModeRec)))) return first;

            memset(new, 0, sizeof(DisplayModeRec));
            if(!(new->name = xalloc(10))) {
      		xfree(new);
		return first;
            }
            if(!first) first = new;
            if(current) {
               current->next = new;
	       new->prev = current;
            }

            current = new;

            sprintf(current->name, "%dx%d", pSiS->SiS_Pr->CP_HDisplay[i],
                                            pSiS->SiS_Pr->CP_VDisplay[i]);

            current->status = MODE_OK;

            current->type = M_T_BUILTIN;

            current->Clock = pSiS->SiS_Pr->CP_Clock[i];
            current->SynthClock = current->Clock;

            current->HDisplay   = pSiS->SiS_Pr->CP_HDisplay[i];
            current->HSyncStart = pSiS->SiS_Pr->CP_HSyncStart[i];
            current->HSyncEnd   = pSiS->SiS_Pr->CP_HSyncEnd[i];
            current->HTotal     = pSiS->SiS_Pr->CP_HTotal[i];

            current->VDisplay   = pSiS->SiS_Pr->CP_VDisplay[i];
            current->VSyncStart = pSiS->SiS_Pr->CP_VSyncStart[i];
            current->VSyncEnd   = pSiS->SiS_Pr->CP_VSyncEnd[i];
            current->VTotal     = pSiS->SiS_Pr->CP_VTotal[i];

            current->CrtcHDisplay = current->HDisplay;
            current->CrtcHBlankStart = pSiS->SiS_Pr->CP_HBlankStart[i];
            current->CrtcHSyncStart = current->HSyncStart;
            current->CrtcHSyncEnd = current->HSyncEnd;
            current->CrtcHBlankEnd = pSiS->SiS_Pr->CP_HBlankEnd[i];
            current->CrtcHTotal = current->HTotal;

            current->CrtcVDisplay = current->VDisplay;
            current->CrtcVBlankStart = pSiS->SiS_Pr->CP_VBlankStart[i];
            current->CrtcVSyncStart = current->VSyncStart;
            current->CrtcVSyncEnd = current->VSyncEnd;
            current->CrtcVBlankEnd = pSiS->SiS_Pr->CP_VBlankEnd[i];
            current->CrtcVTotal = current->VTotal;

	    if(pSiS->SiS_Pr->CP_SyncValid[i]) {
               if(pSiS->SiS_Pr->CP_HSync_P[i])
                  current->Flags |= V_PHSYNC;
               else
                  current->Flags |= V_NHSYNC;

               if(pSiS->SiS_Pr->CP_VSync_P[i])
                  current->Flags |= V_PVSYNC;
               else
                  current->Flags |= V_NVSYNC;
	    } else {
	       /* No sync data? Use positive sync... */
	       current->Flags |= V_PHSYNC;
	       current->Flags |= V_PVSYNC;
	    }
         }
      }
   }

   return first;

}

/* Build a list of supported modes */
int
SiSTranslateToVESA(ScrnInfoPtr pScrn, int modenumber)
{
   SISPtr         pSiS = SISPTR(pScrn);
   int i;

   /* Initialize our pointers */
   if(pSiS->VGAEngine == SIS_300_VGA) {
#ifdef SIS300
	InitTo300Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
#else
	return -1;
#endif
   } else if(pSiS->VGAEngine == SIS_315_VGA) {
#ifdef SIS315H
       	InitTo310Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
#else
	return -1;
#endif
   } else return -1;

   if(modenumber <= 0x13) return modenumber;

   i = 0;
   while(pSiS->SiS_Pr->SiS_EModeIDTable[i].Ext_ModeID != 0xff) {
      if(pSiS->SiS_Pr->SiS_EModeIDTable[i].Ext_ModeID == modenumber) {
         return (int)pSiS->SiS_Pr->SiS_EModeIDTable[i].Ext_VESAID;
      }
      i++;
   }
   return -1;
}
#endif  /* Xfree86 */

#ifdef LINUX_KERNEL
int
sisfb_mode_rate_to_dclock(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
			  unsigned char modeno, unsigned char rateindex)
{
    USHORT ModeNo = modeno;
    USHORT ModeIdIndex = 0, ClockIndex = 0;
    USHORT RefreshRateTableIndex = 0;
    int    Clock;

    if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
       InitTo300Pointer(SiS_Pr, HwInfo);
#else
       return 65 * 1000;
#endif
    } else {
#ifdef SIS315H
       InitTo310Pointer(SiS_Pr, HwInfo);
#else
       return 65 * 1000;
#endif
    }

    if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) {;
    	printk(KERN_ERR "Could not find mode %x\n", ModeNo);
    	return 65 * 1000;
    }

    RefreshRateTableIndex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].REFindex;
    RefreshRateTableIndex += (rateindex - 1);
    ClockIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
    if(HwInfo->jChipType < SIS_315H) {
       ClockIndex &= 0x3F;
    }
    Clock = SiS_Pr->SiS_VCLKData[ClockIndex].CLOCK * 1000;
    
    return(Clock);
}

BOOLEAN
sisfb_gettotalfrommode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
		       unsigned char modeno, int *htotal, int *vtotal, unsigned char rateindex)
{
    USHORT ModeNo = modeno;
    USHORT ModeIdIndex = 0, CRT1Index = 0;
    USHORT RefreshRateTableIndex = 0;
    unsigned char  sr_data, cr_data, cr_data2;

    if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
       InitTo300Pointer(SiS_Pr, HwInfo);
#else
       return FALSE;
#endif
    } else {
#ifdef SIS315H
       InitTo310Pointer(SiS_Pr, HwInfo);
#else
       return FALSE;
#endif
    }

    if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return FALSE;

    RefreshRateTableIndex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].REFindex;
    RefreshRateTableIndex += (rateindex - 1);
    CRT1Index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;

    sr_data = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14];
    cr_data = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[0];
    *htotal = (((cr_data & 0xff) | ((unsigned short) (sr_data & 0x03) << 8)) + 5) * 8;

    sr_data = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[13];
    cr_data = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[6];
    cr_data2 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[7];
    *vtotal = ((cr_data & 0xFF) |
               ((unsigned short)(cr_data2 & 0x01) <<  8) |
	       ((unsigned short)(cr_data2 & 0x20) <<  4) |
	       ((unsigned short)(sr_data  & 0x01) << 10)) + 2;

    if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag & InterlaceMode)
       *vtotal *= 2;

    return TRUE;
}

int
sisfb_mode_rate_to_ddata(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
			 unsigned char modeno, unsigned char rateindex,
			 ULONG *left_margin, ULONG *right_margin, 
			 ULONG *upper_margin, ULONG *lower_margin,
			 ULONG *hsync_len, ULONG *vsync_len,
			 ULONG *sync, ULONG *vmode)
{
    USHORT ModeNo = modeno;
    USHORT ModeIdIndex = 0, index = 0;
    USHORT RefreshRateTableIndex = 0;
    unsigned short VRE, VBE, VRS, VBS, VDE, VT;
    unsigned short HRE, HBE, HRS, HBS, HDE, HT;
    unsigned char  sr_data, cr_data, cr_data2, cr_data3;
    int            A, B, C, D, E, F, temp, j;
   
    if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
       InitTo300Pointer(SiS_Pr, HwInfo);
#else
       return 0;
#endif
    } else {
#ifdef SIS315H
       InitTo310Pointer(SiS_Pr, HwInfo);
#else
       return 0;
#endif
    }

    if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return 0;

    RefreshRateTableIndex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].REFindex;
    RefreshRateTableIndex += (rateindex - 1);
    index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;

    sr_data = SiS_Pr->SiS_CRT1Table[index].CR[14];

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[0];

    /* Horizontal total */
    HT = (cr_data & 0xff) |
         ((unsigned short) (sr_data & 0x03) << 8);
    A = HT + 5;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[1];
	
    /* Horizontal display enable end */
    HDE = (cr_data & 0xff) |
          ((unsigned short) (sr_data & 0x0C) << 6);
    E = HDE + 1;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[4];
	
    /* Horizontal retrace (=sync) start */
    HRS = (cr_data & 0xff) |
          ((unsigned short) (sr_data & 0xC0) << 2);
    F = HRS - E - 3;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[2];
	
    /* Horizontal blank start */
    HBS = (cr_data & 0xff) |
          ((unsigned short) (sr_data & 0x30) << 4);

    sr_data = SiS_Pr->SiS_CRT1Table[index].CR[15];
	
    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[3];

    cr_data2 = SiS_Pr->SiS_CRT1Table[index].CR[5];
	
    /* Horizontal blank end */
    HBE = (cr_data & 0x1f) |
          ((unsigned short) (cr_data2 & 0x80) >> 2) |
	  ((unsigned short) (sr_data & 0x03) << 6);

    /* Horizontal retrace (=sync) end */
    HRE = (cr_data2 & 0x1f) | ((sr_data & 0x04) << 3);

    temp = HBE - ((E - 1) & 255);
    B = (temp > 0) ? temp : (temp + 256);

    temp = HRE - ((E + F + 3) & 63);
    C = (temp > 0) ? temp : (temp + 64);

    D = B - F - C;

    if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes == 320) &&
       ((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes == 200) ||
	(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes == 240))) {

	 /* Terrible hack, but the correct CRTC data for
	  * these modes only produces a black screen...
	  */
       *left_margin = (400 - 376);
       *right_margin = (328 - 320);
       *hsync_len = (376 - 328);

    } else {

       *left_margin = D * 8;
       *right_margin = F * 8;
       *hsync_len = C * 8;

    }

    sr_data = SiS_Pr->SiS_CRT1Table[index].CR[13];

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[6];

    cr_data2 = SiS_Pr->SiS_CRT1Table[index].CR[7];

    /* Vertical total */
    VT = (cr_data & 0xFF) |
         ((unsigned short) (cr_data2 & 0x01) << 8) |
	 ((unsigned short)(cr_data2 & 0x20) << 4) |
	 ((unsigned short) (sr_data & 0x01) << 10);
    A = VT + 2;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[10];
	
    /* Vertical display enable end */
    VDE = (cr_data & 0xff) |
          ((unsigned short) (cr_data2 & 0x02) << 7) |
	  ((unsigned short) (cr_data2 & 0x40) << 3) |
	  ((unsigned short) (sr_data & 0x02) << 9);
    E = VDE + 1;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[8];

    /* Vertical retrace (=sync) start */
    VRS = (cr_data & 0xff) |
          ((unsigned short) (cr_data2 & 0x04) << 6) |
	  ((unsigned short) (cr_data2 & 0x80) << 2) |
	  ((unsigned short) (sr_data & 0x08) << 7);
    F = VRS + 1 - E;

    cr_data =  SiS_Pr->SiS_CRT1Table[index].CR[11];

    cr_data3 = (SiS_Pr->SiS_CRT1Table[index].CR[16] & 0x01) << 5;

    /* Vertical blank start */
    VBS = (cr_data & 0xff) |
          ((unsigned short) (cr_data2 & 0x08) << 5) |
	  ((unsigned short) (cr_data3 & 0x20) << 4) |
	  ((unsigned short) (sr_data & 0x04) << 8);

    cr_data =  SiS_Pr->SiS_CRT1Table[index].CR[12];

    /* Vertical blank end */
    VBE = (cr_data & 0xff) |
          ((unsigned short) (sr_data & 0x10) << 4);
    temp = VBE - ((E - 1) & 511);
    B = (temp > 0) ? temp : (temp + 512);

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[9];

    /* Vertical retrace (=sync) end */
    VRE = (cr_data & 0x0f) | ((sr_data & 0x20) >> 1);
    temp = VRE - ((E + F - 1) & 31);
    C = (temp > 0) ? temp : (temp + 32);

    D = B - F - C;
      
    *upper_margin = D;
    *lower_margin = F;
    *vsync_len = C;

    if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag & 0x8000)
       *sync &= ~FB_SYNC_VERT_HIGH_ACT;
    else
       *sync |= FB_SYNC_VERT_HIGH_ACT;

    if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag & 0x4000)       
       *sync &= ~FB_SYNC_HOR_HIGH_ACT;
    else
       *sync |= FB_SYNC_HOR_HIGH_ACT;
		
    *vmode = FB_VMODE_NONINTERLACED;
    if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag & 0x0080)
       *vmode = FB_VMODE_INTERLACED;
    else {
      j = 0;
      while(SiS_Pr->SiS_EModeIDTable[j].Ext_ModeID != 0xff) {
          if(SiS_Pr->SiS_EModeIDTable[j].Ext_ModeID ==
	                  SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].ModeID) {
              if(SiS_Pr->SiS_EModeIDTable[j].Ext_ModeFlag & DoubleScanMode) {
	      	  *vmode = FB_VMODE_DOUBLE;
              }
	      break;
          }
	  j++;
      }
    }       

    if((*vmode & FB_VMODE_MASK) == FB_VMODE_INTERLACED) {
#if 0  /* Do this? */
       *upper_margin <<= 1;
       *lower_margin <<= 1;
       *vsync_len <<= 1;
#endif
    } else if((*vmode & FB_VMODE_MASK) == FB_VMODE_DOUBLE) {
       *upper_margin >>= 1;
       *lower_margin >>= 1;
       *vsync_len >>= 1;
    }

    return 1;       
}			  

#endif

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/sis/init.c,v 1.6 2003/02/04 02:44:28 dawes Exp $ */
d3 3
a5 1
 * Mode switching code (CRT1 section) for SiS 300/540/630/730/315/550/650/740/330
d8 1
a8 3
 * Assembler-To-C translation
 * Copyright 2002 by Thomas Winischhofer <thomas@@winischhofer.net>
 * Minor parts Copyright SiS, Inc.
d10 2
a11 11
 * Based on BIOS
 *     1.10.07, 1.10a for SiS650/LVDS+CH7019
 *     1.11.05 for 650/LVDS (w/o Chrontel)
 *     1.07.1b, 1.11.6s, 1.11.6w, 1.11.7w, 1.11.8r for SiS650/301(B/LV)
 *     2.04.50 (I) and 2.04.5c (II) for SiS630/301(B)
 *     2.06.50 for 630/301B (dual VGA)
 *     2.02.3b, 2.03.02, 2.04.5c, 2.07a and 2.08.b3 for 630/LVDS/LVDS+CH7005
 *     2.04.5c, 2.04.6c for 730+LVDS+CH7005
 *     1.09b for 315/301(B)
 *     1.16.51 for 300+301LVX (ECS A907)
 *     1.01.03 for 330 (Xabre 400)
d13 13
a25 9
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of the copyright holder not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  The copyright holder makes no representations
 * about the suitability of this software for any purpose.  It is provided
 * "as is" without express or implied warranty.
d27 28
a54 7
 * THE COPYRIGHT HOLDER DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
a75 24
#ifdef LINUX_XF86
BOOLEAN SiSBIOSSetMode(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,
                       ScrnInfoPtr pScrn, DisplayModePtr mode, BOOLEAN IsCustom);
DisplayModePtr SiSBuildBuiltInModeList(ScrnInfoPtr pScrn);
#ifdef SISDUALHEAD /* TW: For dual head */
BOOLEAN SiSBIOSSetModeCRT1(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,
                       ScrnInfoPtr pScrn, DisplayModePtr mode, BOOLEAN IsCustom);
BOOLEAN SiSBIOSSetModeCRT2(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,
                       ScrnInfoPtr pScrn, DisplayModePtr mode);
#endif /* dual head */
#endif /* linux_xf86 */

#ifdef LINUXBIOS
BOOLEAN SiSInit(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension);
#endif

#ifdef LINUX_XF86
BOOLEAN SiSSetMode(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,
                   ScrnInfoPtr pScrn,USHORT ModeNo, BOOLEAN dosetpitch);
#else
BOOLEAN SiSSetMode(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,
                   USHORT ModeNo);
#endif

a77 1
#pragma alloc_text(PAGE,SiSInit)
d80 3
a82 35
static ULONG GetDRAMSize(SiS_Private *SiS_Pr,
                         PSIS_HW_DEVICE_INFO HwDeviceExtension);

static void DelaySeconds(int seconds);
void SiS_DebugCode(SiS_Private *SiS_Pr, UCHAR code);

#ifdef LINUX_XF86
/* TW: Mode table for X driver */
const UShort  ModeIndex_320x480[]      = {0x5a, 0x5b, 0x00, 0x00};  /* DSTN/FSTN */
const UShort  ModeIndex_512x384[]      = {0x52, 0x58, 0x00, 0x5c};
const UShort  ModeIndex_640x400[]      = {0x2f, 0x5d, 0x00, 0x5e};
const UShort  ModeIndex_640x480[]      = {0x2e, 0x44, 0x00, 0x62};
const UShort  ModeIndex_720x480[]      = {0x31, 0x33, 0x00, 0x35};
const UShort  ModeIndex_720x576[]      = {0x32, 0x34, 0x00, 0x36};
const UShort  ModeIndex_800x480[]      = {0x70, 0x7a, 0x00, 0x76};
const UShort  ModeIndex_800x600[]      = {0x30, 0x47, 0x00, 0x63};
const UShort  ModeIndex_848x480[]      = {0x39, 0x3b, 0x00, 0x3e};
const UShort  ModeIndex_856x480[]      = {0x3f, 0x42, 0x00, 0x45};
const UShort  ModeIndex_1024x768[]     = {0x38, 0x4a, 0x00, 0x64};
const UShort  ModeIndex_1024x576[]     = {0x71, 0x74, 0x00, 0x77};
const UShort  ModeIndex_1024x600[]     = {0x20, 0x21, 0x00, 0x22};  /* 300 series only */
const UShort  ModeIndex_1280x1024[]    = {0x3a, 0x4d, 0x00, 0x65};
const UShort  ModeIndex_300_1280x960[] = {0x6e, 0x6f, 0x00, 0x7b};
const UShort  ModeIndex_310_1280x960[] = {0x7c, 0x7d, 0x00, 0x7e};
const UShort  ModeIndex_1152x768[]     = {0x23, 0x24, 0x00, 0x25};  /* 300 series only */
const UShort  ModeIndex_1152x864[]     = {0x29, 0x2a, 0x00, 0x2b}; 
const UShort  ModeIndex_1280x768[]     = {0x23, 0x24, 0x00, 0x25};  /* 310/325 series only */
const UShort  ModeIndex_1280x720[]     = {0x79, 0x75, 0x00, 0x78};  
const UShort  ModeIndex_1360x768[]     = {0x48, 0x4b, 0x00, 0x4e};
const UShort  ModeIndex_1400x1050[]    = {0x26, 0x27, 0x00, 0x28};  /* 310/325 series only */
const UShort  ModeIndex_1600x1200[]    = {0x3c, 0x3d, 0x00, 0x66};
const UShort  ModeIndex_1920x1440[]    = {0x68, 0x69, 0x00, 0x6b};
const UShort  ModeIndex_300_2048x1536[]= {0x6c, 0x6d, 0x00, 0x00};
const UShort  ModeIndex_310_2048x1536[]= {0x6c, 0x6d, 0x00, 0x6e};
#endif
d85 1
a85 1
DelaySeconds(int seconds)
d87 27
a113 16
  int i;
#ifdef WIN2000
  int j;
#endif

  for (i=0;i<seconds;i++) {
#ifdef TC
    delay(1000);
#endif

#ifdef WIN2000
    for (j=0;j<20000;j++)
      VideoPortStallExecution(50);
#endif

#ifdef WINCE_HEADER
d116 90
a205 4
#ifdef LINUX_KERNEL
#endif
  }
}
d207 2
a208 5
void
SiS_DebugCode(SiS_Private *SiS_Pr, UCHAR code)
{
  OutPortByte(0x80, code);
  DelaySeconds(0x3);
d213 1
a213 1
InitTo300Pointer(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
d215 37
a251 8
   SiS_Pr->SiS_SModeIDTable  = (SiS_StStruct *)SiS300_SModeIDTable;
   SiS_Pr->SiS_VBModeIDTable = (SiS_VBModeStruct *)SiS300_VBModeIDTable;
   SiS_Pr->SiS_StandTable    = (SiS_StandTableStruct *)SiS300_StandTable;
   SiS_Pr->SiS_EModeIDTable  = (SiS_ExtStruct *)SiS300_EModeIDTable;
   SiS_Pr->SiS_RefIndex      = (SiS_Ext2Struct *)SiS300_RefIndex;
   SiS_Pr->SiS_CRT1Table     = (SiS_CRT1TableStruct *)SiS300_CRT1Table;
   if(HwDeviceExtension->jChipType == SIS_300) {
      SiS_Pr->SiS_MCLKData_0    = (SiS_MCLKDataStruct *)SiS300_MCLKData_300; /* 300 */
d253 1
a253 1
      SiS_Pr->SiS_MCLKData_0    = (SiS_MCLKDataStruct *)SiS300_MCLKData_630; /* 630 */
d255 1
a255 2
   SiS_Pr->SiS_ECLKData      = (SiS_ECLKDataStruct *)SiS300_ECLKData;
   SiS_Pr->SiS_VCLKData      = (SiS_VCLKDataStruct *)SiS300_VCLKData;
a256 6
   SiS_Pr->SiS_ScreenOffset  = SiS300_ScreenOffset;
   SiS_Pr->SiS_StResInfo     = (SiS_StResInfoStruct *)SiS300_StResInfo;
   SiS_Pr->SiS_ModeResInfo   = (SiS_ModeResInfoStruct *)SiS300_ModeResInfo;

   SiS_Pr->pSiS_OutputSelect = &SiS300_OutputSelect;
   SiS_Pr->pSiS_SoftSetting  = &SiS300_SoftSetting;
d285 96
a380 151
   SiS_Pr->SiS_NTSCPhase  = SiS300_NTSCPhase;
   SiS_Pr->SiS_PALPhase   = SiS300_PALPhase;
   SiS_Pr->SiS_NTSCPhase2 = SiS300_NTSCPhase2;
   SiS_Pr->SiS_PALPhase2  = SiS300_PALPhase2;
   SiS_Pr->SiS_PALMPhase  = SiS300_PALMPhase;
   SiS_Pr->SiS_PALNPhase  = SiS300_PALNPhase;
   SiS_Pr->SiS_PALMPhase2 = SiS300_PALMPhase2;
   SiS_Pr->SiS_PALNPhase2 = SiS300_PALNPhase2;

   SiS_Pr->SiS_StLCD1024x768Data    = (SiS_LCDDataStruct *)SiS300_StLCD1024x768Data;
   SiS_Pr->SiS_ExtLCD1024x768Data   = (SiS_LCDDataStruct *)SiS300_ExtLCD1024x768Data;
   SiS_Pr->SiS_St2LCD1024x768Data   = (SiS_LCDDataStruct *)SiS300_St2LCD1024x768Data;
   SiS_Pr->SiS_StLCD1280x1024Data   = (SiS_LCDDataStruct *)SiS300_StLCD1280x1024Data;
   SiS_Pr->SiS_ExtLCD1280x1024Data  = (SiS_LCDDataStruct *)SiS300_ExtLCD1280x1024Data;
   SiS_Pr->SiS_St2LCD1280x1024Data  = (SiS_LCDDataStruct *)SiS300_St2LCD1280x1024Data;
   SiS_Pr->SiS_NoScaleData1024x768  = (SiS_LCDDataStruct *)SiS300_NoScaleData1024x768;
   SiS_Pr->SiS_NoScaleData1280x1024 = (SiS_LCDDataStruct *)SiS300_NoScaleData1280x1024;
   SiS_Pr->SiS_LCD1280x960Data      = (SiS_LCDDataStruct *)SiS300_LCD1280x960Data;
   SiS_Pr->SiS_ExtLCD1400x1050Data  = (SiS_LCDDataStruct *)SiS300_ExtLCD1400x1050Data;
   SiS_Pr->SiS_ExtLCD1600x1200Data  = (SiS_LCDDataStruct *)SiS300_ExtLCD1600x1200Data;
   SiS_Pr->SiS_StLCD1400x1050Data   = (SiS_LCDDataStruct *)SiS300_StLCD1400x1050Data;
   SiS_Pr->SiS_StLCD1600x1200Data   = (SiS_LCDDataStruct *)SiS300_StLCD1600x1200Data;
   SiS_Pr->SiS_NoScaleData1400x1050 = (SiS_LCDDataStruct *)SiS300_NoScaleData1400x1050;
   SiS_Pr->SiS_NoScaleData1600x1200 = (SiS_LCDDataStruct *)SiS300_NoScaleData1600x1200;

   SiS_Pr->SiS_StPALData   = (SiS_TVDataStruct *)SiS300_StPALData;
   SiS_Pr->SiS_ExtPALData  = (SiS_TVDataStruct *)SiS300_ExtPALData;
   SiS_Pr->SiS_StNTSCData  = (SiS_TVDataStruct *)SiS300_StNTSCData;
   SiS_Pr->SiS_ExtNTSCData = (SiS_TVDataStruct *)SiS300_ExtNTSCData;
#ifdef oldHV
   SiS_Pr->SiS_St1HiTVData = (SiS_TVDataStruct *)SiS300_St1HiTVData;
   SiS_Pr->SiS_St2HiTVData = (SiS_TVDataStruct *)SiS300_St2HiTVData;
   SiS_Pr->SiS_ExtHiTVData = (SiS_TVDataStruct *)SiS300_ExtHiTVData;
#endif

   SiS_Pr->SiS_NTSCTiming     = SiS300_NTSCTiming;
   SiS_Pr->SiS_PALTiming      = SiS300_PALTiming;
#ifdef oldHV
   SiS_Pr->SiS_HiTVSt1Timing  = SiS300_HiTVSt1Timing;
   SiS_Pr->SiS_HiTVSt2Timing  = SiS300_HiTVSt2Timing;
   SiS_Pr->SiS_HiTVTextTiming = SiS300_HiTVTextTiming;
   SiS_Pr->SiS_HiTVGroup3Data = SiS300_HiTVGroup3Data;
   SiS_Pr->SiS_HiTVGroup3Simu = SiS300_HiTVGroup3Simu;
   SiS_Pr->SiS_HiTVGroup3Text = SiS300_HiTVGroup3Text;
#endif

   SiS_Pr->SiS_PanelDelayTbl     = (SiS_PanelDelayTblStruct *)SiS300_PanelDelayTbl;
   SiS_Pr->SiS_PanelDelayTblLVDS = (SiS_PanelDelayTblStruct *)SiS300_PanelDelayTblLVDS;

   SiS_Pr->SiS_LVDS800x600Data_1   = (SiS_LVDSDataStruct *)SiS300_LVDS800x600Data_1;
   SiS_Pr->SiS_LVDS800x600Data_2   = (SiS_LVDSDataStruct *)SiS300_LVDS800x600Data_2;
   SiS_Pr->SiS_LVDS1024x768Data_1  = (SiS_LVDSDataStruct *)SiS300_LVDS1024x768Data_1;
   SiS_Pr->SiS_LVDS1024x768Data_2  = (SiS_LVDSDataStruct *)SiS300_LVDS1024x768Data_2;
   SiS_Pr->SiS_LVDS1280x1024Data_1 = (SiS_LVDSDataStruct *)SiS300_LVDS1280x1024Data_1;
   SiS_Pr->SiS_LVDS1280x1024Data_2 = (SiS_LVDSDataStruct *)SiS300_LVDS1280x1024Data_2;
   SiS_Pr->SiS_LVDS1280x960Data_1  = (SiS_LVDSDataStruct *)SiS300_LVDS1280x1024Data_1;
   SiS_Pr->SiS_LVDS1280x960Data_2  = (SiS_LVDSDataStruct *)SiS300_LVDS1280x1024Data_2;
   SiS_Pr->SiS_LVDS1400x1050Data_1 = (SiS_LVDSDataStruct *)SiS300_LVDS1400x1050Data_1;
   SiS_Pr->SiS_LVDS1400x1050Data_2 = (SiS_LVDSDataStruct *)SiS300_LVDS1400x1050Data_2;
   SiS_Pr->SiS_LVDS1280x768Data_1  = (SiS_LVDSDataStruct *)SiS300_LVDS1280x768Data_1;
   SiS_Pr->SiS_LVDS1280x768Data_2  = (SiS_LVDSDataStruct *)SiS300_LVDS1280x768Data_2;
   SiS_Pr->SiS_LVDS1024x600Data_1  = (SiS_LVDSDataStruct *)SiS300_LVDS1024x600Data_1;
   SiS_Pr->SiS_LVDS1024x600Data_2  = (SiS_LVDSDataStruct *)SiS300_LVDS1024x600Data_2;
   SiS_Pr->SiS_LVDS1152x768Data_1  = (SiS_LVDSDataStruct *)SiS300_LVDS1152x768Data_1;
   SiS_Pr->SiS_LVDS1152x768Data_2  = (SiS_LVDSDataStruct *)SiS300_LVDS1152x768Data_2;
   SiS_Pr->SiS_LVDSXXXxXXXData_1   = (SiS_LVDSDataStruct *)SiS300_LVDSXXXxXXXData_1;
   SiS_Pr->SiS_LVDS320x480Data_1   = (SiS_LVDSDataStruct *)SiS300_LVDS320x480Data_1;
   SiS_Pr->SiS_LVDS640x480Data_1   = (SiS_LVDSDataStruct *)SiS300_LVDS640x480Data_1;
   SiS_Pr->SiS_LCDA1400x1050Data_1 = (SiS_LVDSDataStruct *)SiS300_LCDA1400x1050Data_1;
   SiS_Pr->SiS_LCDA1400x1050Data_2 = (SiS_LVDSDataStruct *)SiS300_LCDA1400x1050Data_2;
   SiS_Pr->SiS_LCDA1600x1200Data_1 = (SiS_LVDSDataStruct *)SiS300_LCDA1600x1200Data_1;
   SiS_Pr->SiS_LCDA1600x1200Data_2 = (SiS_LVDSDataStruct *)SiS300_LCDA1600x1200Data_2;
   SiS_Pr->SiS_CHTVUNTSCData = (SiS_LVDSDataStruct *)SiS300_CHTVUNTSCData;
   SiS_Pr->SiS_CHTVONTSCData = (SiS_LVDSDataStruct *)SiS300_CHTVONTSCData;
   SiS_Pr->SiS_CHTVUPALData  = (SiS_LVDSDataStruct *)SiS300_CHTVUPALData;
   SiS_Pr->SiS_CHTVOPALData  = (SiS_LVDSDataStruct *)SiS300_CHTVOPALData;
   SiS_Pr->SiS_CHTVUPALMData = (SiS_LVDSDataStruct *)SiS300_CHTVUNTSCData; /* not supported on 300 series */
   SiS_Pr->SiS_CHTVOPALMData = (SiS_LVDSDataStruct *)SiS300_CHTVONTSCData; /* not supported on 300 series */
   SiS_Pr->SiS_CHTVUPALNData = (SiS_LVDSDataStruct *)SiS300_CHTVUPALData;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVOPALNData = (SiS_LVDSDataStruct *)SiS300_CHTVOPALData;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVSOPALData = (SiS_LVDSDataStruct *)SiS300_CHTVSOPALData;
   SiS_Pr->SiS_PanelType00_1 = (SiS_LVDSDesStruct *)SiS300_PanelType00_1;
   SiS_Pr->SiS_PanelType01_1 = (SiS_LVDSDesStruct *)SiS300_PanelType01_1;
   SiS_Pr->SiS_PanelType02_1 = (SiS_LVDSDesStruct *)SiS300_PanelType02_1;
   SiS_Pr->SiS_PanelType03_1 = (SiS_LVDSDesStruct *)SiS300_PanelType03_1;
   SiS_Pr->SiS_PanelType04_1 = (SiS_LVDSDesStruct *)SiS300_PanelType04_1;
   SiS_Pr->SiS_PanelType05_1 = (SiS_LVDSDesStruct *)SiS300_PanelType05_1;
   SiS_Pr->SiS_PanelType06_1 = (SiS_LVDSDesStruct *)SiS300_PanelType06_1;
   SiS_Pr->SiS_PanelType07_1 = (SiS_LVDSDesStruct *)SiS300_PanelType07_1;
   SiS_Pr->SiS_PanelType08_1 = (SiS_LVDSDesStruct *)SiS300_PanelType08_1;
   SiS_Pr->SiS_PanelType09_1 = (SiS_LVDSDesStruct *)SiS300_PanelType09_1;
   SiS_Pr->SiS_PanelType0a_1 = (SiS_LVDSDesStruct *)SiS300_PanelType0a_1;
   SiS_Pr->SiS_PanelType0b_1 = (SiS_LVDSDesStruct *)SiS300_PanelType0b_1;
   SiS_Pr->SiS_PanelType0c_1 = (SiS_LVDSDesStruct *)SiS300_PanelType0c_1;
   SiS_Pr->SiS_PanelType0d_1 = (SiS_LVDSDesStruct *)SiS300_PanelType0d_1;
   SiS_Pr->SiS_PanelType0e_1 = (SiS_LVDSDesStruct *)SiS300_PanelType0e_1;
   SiS_Pr->SiS_PanelType0f_1 = (SiS_LVDSDesStruct *)SiS300_PanelType0f_1;
   SiS_Pr->SiS_PanelType00_2 = (SiS_LVDSDesStruct *)SiS300_PanelType00_2;
   SiS_Pr->SiS_PanelType01_2 = (SiS_LVDSDesStruct *)SiS300_PanelType01_2;
   SiS_Pr->SiS_PanelType02_2 = (SiS_LVDSDesStruct *)SiS300_PanelType02_2;
   SiS_Pr->SiS_PanelType03_2 = (SiS_LVDSDesStruct *)SiS300_PanelType03_2;
   SiS_Pr->SiS_PanelType04_2 = (SiS_LVDSDesStruct *)SiS300_PanelType04_2;
   SiS_Pr->SiS_PanelType05_2 = (SiS_LVDSDesStruct *)SiS300_PanelType05_2;
   SiS_Pr->SiS_PanelType06_2 = (SiS_LVDSDesStruct *)SiS300_PanelType06_2;
   SiS_Pr->SiS_PanelType07_2 = (SiS_LVDSDesStruct *)SiS300_PanelType07_2;
   SiS_Pr->SiS_PanelType08_2 = (SiS_LVDSDesStruct *)SiS300_PanelType08_2;
   SiS_Pr->SiS_PanelType09_2 = (SiS_LVDSDesStruct *)SiS300_PanelType09_2;
   SiS_Pr->SiS_PanelType0a_2 = (SiS_LVDSDesStruct *)SiS300_PanelType0a_2;
   SiS_Pr->SiS_PanelType0b_2 = (SiS_LVDSDesStruct *)SiS300_PanelType0b_2;
   SiS_Pr->SiS_PanelType0c_2 = (SiS_LVDSDesStruct *)SiS300_PanelType0c_2;
   SiS_Pr->SiS_PanelType0d_2 = (SiS_LVDSDesStruct *)SiS300_PanelType0d_2;
   SiS_Pr->SiS_PanelType0e_2 = (SiS_LVDSDesStruct *)SiS300_PanelType0e_2;
   SiS_Pr->SiS_PanelType0f_2 = (SiS_LVDSDesStruct *)SiS300_PanelType0f_2;
   SiS_Pr->SiS_CHTVUNTSCDesData = (SiS_LVDSDesStruct *)SiS300_CHTVUNTSCDesData;
   SiS_Pr->SiS_CHTVONTSCDesData = (SiS_LVDSDesStruct *)SiS300_CHTVONTSCDesData;
   SiS_Pr->SiS_CHTVUPALDesData  = (SiS_LVDSDesStruct *)SiS300_CHTVUPALDesData;
   SiS_Pr->SiS_CHTVOPALDesData  = (SiS_LVDSDesStruct *)SiS300_CHTVOPALDesData;
   SiS_Pr->SiS_LVDSCRT1800x600_1     = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT1800x600_1;
   SiS_Pr->SiS_LVDSCRT11024x768_1    = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11024x768_1;
   SiS_Pr->SiS_LVDSCRT11280x1024_1   = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11280x1024_1;
   SiS_Pr->SiS_LVDSCRT11024x600_1    = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11024x600_1;
   SiS_Pr->SiS_LVDSCRT11152x768_1    = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11152x768_1;
   SiS_Pr->SiS_LVDSCRT1800x600_1_H   = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT1800x600_1_H;
   SiS_Pr->SiS_LVDSCRT11024x768_1_H  = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11024x768_1_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_1_H = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11280x1024_1_H;
   SiS_Pr->SiS_LVDSCRT11024x600_1_H  = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11024x600_1_H;
   SiS_Pr->SiS_LVDSCRT11152x768_1_H  = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11152x768_1_H;
   SiS_Pr->SiS_LVDSCRT1800x600_2     = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT1800x600_2;
   SiS_Pr->SiS_LVDSCRT11024x768_2    = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11024x768_2;
   SiS_Pr->SiS_LVDSCRT11280x1024_2   = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11280x1024_2;
   SiS_Pr->SiS_LVDSCRT11024x600_2    = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11024x600_2;
   SiS_Pr->SiS_LVDSCRT11152x768_2    = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11152x768_2;
   SiS_Pr->SiS_LVDSCRT1800x600_2_H   = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT1800x600_2_H;
   SiS_Pr->SiS_LVDSCRT11024x768_2_H  = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11024x768_2_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_2_H = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11280x1024_2_H;
   SiS_Pr->SiS_LVDSCRT11024x600_2_H  = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11024x600_2_H;
   SiS_Pr->SiS_LVDSCRT11152x768_2_H  = (SiS_LVDSCRT1DataStruct *)SiS300_LVDSCRT11152x768_2_H;
   SiS_Pr->SiS_CHTVCRT1UNTSC = (SiS_LVDSCRT1DataStruct *)SiS300_CHTVCRT1UNTSC;
   SiS_Pr->SiS_CHTVCRT1ONTSC = (SiS_LVDSCRT1DataStruct *)SiS300_CHTVCRT1ONTSC;
   SiS_Pr->SiS_CHTVCRT1UPAL  = (SiS_LVDSCRT1DataStruct *)SiS300_CHTVCRT1UPAL;
   SiS_Pr->SiS_CHTVCRT1OPAL  = (SiS_LVDSCRT1DataStruct *)SiS300_CHTVCRT1OPAL;
   SiS_Pr->SiS_CHTVCRT1SOPAL = (SiS_LVDSCRT1DataStruct *)SiS300_CHTVCRT1SOPAL;
   SiS_Pr->SiS_CHTVReg_UNTSC = (SiS_CHTVRegDataStruct *)SiS300_CHTVReg_UNTSC;
   SiS_Pr->SiS_CHTVReg_ONTSC = (SiS_CHTVRegDataStruct *)SiS300_CHTVReg_ONTSC;
   SiS_Pr->SiS_CHTVReg_UPAL  = (SiS_CHTVRegDataStruct *)SiS300_CHTVReg_UPAL;
   SiS_Pr->SiS_CHTVReg_OPAL  = (SiS_CHTVRegDataStruct *)SiS300_CHTVReg_OPAL;
   SiS_Pr->SiS_CHTVReg_UPALM = (SiS_CHTVRegDataStruct *)SiS300_CHTVReg_UNTSC;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_OPALM = (SiS_CHTVRegDataStruct *)SiS300_CHTVReg_ONTSC;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_UPALN = (SiS_CHTVRegDataStruct *)SiS300_CHTVReg_UPAL;   /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_OPALN = (SiS_CHTVRegDataStruct *)SiS300_CHTVReg_OPAL;   /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_SOPAL = (SiS_CHTVRegDataStruct *)SiS300_CHTVReg_SOPAL;
a389 31

   /* TW: New from 300/301LV BIOS */
   SiS_Pr->SiS_CRT2Part2_1024x768_1  = (SiS_Part2PortTblStruct *)SiS300_CRT2Part2_1024x768_1;
   SiS_Pr->SiS_CRT2Part2_1280x1024_1 = (SiS_Part2PortTblStruct *)SiS300_CRT2Part2_1280x1024_1;
   SiS_Pr->SiS_CRT2Part2_1400x1050_1 = (SiS_Part2PortTblStruct *)SiS300_CRT2Part2_1400x1050_1;
   SiS_Pr->SiS_CRT2Part2_1600x1200_1 = (SiS_Part2PortTblStruct *)SiS300_CRT2Part2_1600x1200_1;
   SiS_Pr->SiS_CRT2Part2_1024x768_2  = (SiS_Part2PortTblStruct *)SiS300_CRT2Part2_1024x768_2;
   SiS_Pr->SiS_CRT2Part2_1280x1024_2 = (SiS_Part2PortTblStruct *)SiS300_CRT2Part2_1280x1024_2;
   SiS_Pr->SiS_CRT2Part2_1400x1050_2 = (SiS_Part2PortTblStruct *)SiS300_CRT2Part2_1400x1050_2;
   SiS_Pr->SiS_CRT2Part2_1600x1200_2 = (SiS_Part2PortTblStruct *)SiS300_CRT2Part2_1600x1200_2;
   SiS_Pr->SiS_CRT2Part2_1024x768_3  = (SiS_Part2PortTblStruct *)SiS300_CRT2Part2_1024x768_3;
   SiS_Pr->SiS_CRT2Part2_1280x1024_3 = (SiS_Part2PortTblStruct *)SiS300_CRT2Part2_1280x1024_3;
   SiS_Pr->SiS_CRT2Part2_1400x1050_3 = (SiS_Part2PortTblStruct *)SiS300_CRT2Part2_1400x1050_3;
   SiS_Pr->SiS_CRT2Part2_1600x1200_3 = (SiS_Part2PortTblStruct *)SiS300_CRT2Part2_1600x1200_3;

   /* TW: LCDResInfo will on 300 series be translated to 310/325 series definitions */
   SiS_Pr->SiS_Panel320x480   = Panel_320x480;
   SiS_Pr->SiS_Panel640x480   = Panel_640x480;
   SiS_Pr->SiS_Panel800x600   = Panel_800x600;
   SiS_Pr->SiS_Panel1024x768  = Panel_1024x768;
   SiS_Pr->SiS_Panel1280x1024 = Panel_1280x1024;
   SiS_Pr->SiS_Panel1280x960  = Panel_1280x960;
   SiS_Pr->SiS_Panel1024x600  = Panel_1024x600;
   SiS_Pr->SiS_Panel1152x768  = Panel_1152x768;
   SiS_Pr->SiS_Panel1600x1200 = 16;  		/* TW: Something illegal */
   SiS_Pr->SiS_Panel1400x1050 = 16;  		/* TW: Something illegal */
   SiS_Pr->SiS_Panel1152x864  = 16;   		/* TW: Something illegal */
   SiS_Pr->SiS_Panel1280x768  = 16;   		/* TW: Something illegal */
   SiS_Pr->SiS_PanelMax       = Panel_320x480;     /* TW: highest value */
   SiS_Pr->SiS_PanelMinLVDS   = Panel_800x600;     /* TW: Lowest value LVDS */
   SiS_Pr->SiS_PanelMin301    = Panel_1024x768;    /* TW: lowest value 301 */
d395 1
a395 1
InitTo310Pointer(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
d397 32
a428 3
   SiS_Pr->SiS_SModeIDTable  = (SiS_StStruct *)SiS310_SModeIDTable;
   SiS_Pr->SiS_StandTable    = (SiS_StandTableStruct *)SiS310_StandTable;
   SiS_Pr->SiS_EModeIDTable  = (SiS_ExtStruct *)SiS310_EModeIDTable;
d430 9
a438 6
   SiS_Pr->SiS_CRT1Table     = (SiS_CRT1TableStruct *)SiS310_CRT1Table;
   /* TW: MCLK is different */
   if(HwDeviceExtension->jChipType == SIS_330) {
      SiS_Pr->SiS_MCLKData_0 = (SiS_MCLKDataStruct *)SiS310_MCLKData_0_330;  /* 330 */
   } else if(HwDeviceExtension->jChipType > SIS_315PRO) {
      SiS_Pr->SiS_MCLKData_0 = (SiS_MCLKDataStruct *)SiS310_MCLKData_0_650;  /* 550, 650 */
d440 1
a440 1
      SiS_Pr->SiS_MCLKData_0 = (SiS_MCLKDataStruct *)SiS310_MCLKData_0_315;  /* 315 */
d442 3
a444 10
   SiS_Pr->SiS_MCLKData_1    = (SiS_MCLKDataStruct *)SiS310_MCLKData_1;
   SiS_Pr->SiS_ECLKData      = (SiS_ECLKDataStruct *)SiS310_ECLKData;
   SiS_Pr->SiS_VCLKData      = (SiS_VCLKDataStruct *)SiS310_VCLKData;
   SiS_Pr->SiS_VBVCLKData    = (SiS_VBVCLKDataStruct *)SiS310_VBVCLKData;
   SiS_Pr->SiS_ScreenOffset  = SiS310_ScreenOffset;
   SiS_Pr->SiS_StResInfo     = (SiS_StResInfoStruct *)SiS310_StResInfo;
   SiS_Pr->SiS_ModeResInfo   = (SiS_ModeResInfoStruct *)SiS310_ModeResInfo;

   SiS_Pr->pSiS_OutputSelect = &SiS310_OutputSelect;
   SiS_Pr->pSiS_SoftSetting  = &SiS310_SoftSetting;
d473 91
a563 212
   SiS_Pr->SiS_NTSCPhase    = SiS310_NTSCPhase;
   SiS_Pr->SiS_PALPhase     = SiS310_PALPhase;
   SiS_Pr->SiS_NTSCPhase2   = SiS310_NTSCPhase2;
   SiS_Pr->SiS_PALPhase2    = SiS310_PALPhase2;
   SiS_Pr->SiS_PALMPhase    = SiS310_PALMPhase;
   SiS_Pr->SiS_PALNPhase    = SiS310_PALNPhase;
   SiS_Pr->SiS_PALMPhase2   = SiS310_PALMPhase2;
   SiS_Pr->SiS_PALNPhase2   = SiS310_PALNPhase2;
   SiS_Pr->SiS_SpecialPhase = SiS310_SpecialPhase;

   SiS_Pr->SiS_StLCD1024x768Data    = (SiS_LCDDataStruct *)SiS310_StLCD1024x768Data;
   SiS_Pr->SiS_ExtLCD1024x768Data   = (SiS_LCDDataStruct *)SiS310_ExtLCD1024x768Data;
   SiS_Pr->SiS_St2LCD1024x768Data   = (SiS_LCDDataStruct *)SiS310_St2LCD1024x768Data;
   SiS_Pr->SiS_StLCD1280x1024Data   = (SiS_LCDDataStruct *)SiS310_StLCD1280x1024Data;
   SiS_Pr->SiS_ExtLCD1280x1024Data  = (SiS_LCDDataStruct *)SiS310_ExtLCD1280x1024Data;
   SiS_Pr->SiS_St2LCD1280x1024Data  = (SiS_LCDDataStruct *)SiS310_St2LCD1280x1024Data;
   SiS_Pr->SiS_NoScaleData1024x768  = (SiS_LCDDataStruct *)SiS310_NoScaleData1024x768;
   SiS_Pr->SiS_NoScaleData1280x1024 = (SiS_LCDDataStruct *)SiS310_NoScaleData1280x1024;
   SiS_Pr->SiS_LCD1280x960Data      = (SiS_LCDDataStruct *)SiS310_LCD1280x960Data;
   SiS_Pr->SiS_ExtLCD1400x1050Data  = (SiS_LCDDataStruct *)SiS310_ExtLCD1400x1050Data;
   SiS_Pr->SiS_ExtLCD1600x1200Data  = (SiS_LCDDataStruct *)SiS310_ExtLCD1600x1200Data;
   SiS_Pr->SiS_StLCD1400x1050Data   = (SiS_LCDDataStruct *)SiS310_StLCD1400x1050Data;
   SiS_Pr->SiS_StLCD1600x1200Data   = (SiS_LCDDataStruct *)SiS310_StLCD1600x1200Data;
   SiS_Pr->SiS_NoScaleData1400x1050 = (SiS_LCDDataStruct *)SiS310_NoScaleData1400x1050;
   SiS_Pr->SiS_NoScaleData1600x1200 = (SiS_LCDDataStruct *)SiS310_NoScaleData1600x1200;

   SiS_Pr->SiS_StPALData   = (SiS_TVDataStruct *)SiS310_StPALData;
   SiS_Pr->SiS_ExtPALData  = (SiS_TVDataStruct *)SiS310_ExtPALData;
   SiS_Pr->SiS_StNTSCData  = (SiS_TVDataStruct *)SiS310_StNTSCData;
   SiS_Pr->SiS_ExtNTSCData = (SiS_TVDataStruct *)SiS310_ExtNTSCData;
#ifdef oldHV
   SiS_Pr->SiS_St1HiTVData = (SiS_TVDataStruct *)SiS310_St1HiTVData;
   SiS_Pr->SiS_St2HiTVData = (SiS_TVDataStruct *)SiS310_St2HiTVData;
   SiS_Pr->SiS_ExtHiTVData = (SiS_TVDataStruct *)SiS310_ExtHiTVData;
#endif

   SiS_Pr->SiS_NTSCTiming     = SiS310_NTSCTiming;
   SiS_Pr->SiS_PALTiming      = SiS310_PALTiming;
#ifdef oldHV
   SiS_Pr->SiS_HiTVSt1Timing  = SiS310_HiTVSt1Timing;
   SiS_Pr->SiS_HiTVSt2Timing  = SiS310_HiTVSt2Timing;
   SiS_Pr->SiS_HiTVTextTiming = SiS310_HiTVTextTiming;
   SiS_Pr->SiS_HiTVExtTiming  = SiS310_HiTVExtTiming;
   SiS_Pr->SiS_HiTVGroup3Data = SiS310_HiTVGroup3Data;
   SiS_Pr->SiS_HiTVGroup3Simu = SiS310_HiTVGroup3Simu;
   SiS_Pr->SiS_HiTVGroup3Text = SiS310_HiTVGroup3Text;
#endif

   SiS_Pr->SiS_PanelDelayTbl = (SiS_PanelDelayTblStruct *)SiS310_PanelDelayTbl;
   SiS_Pr->SiS_PanelDelayTblLVDS = (SiS_PanelDelayTblStruct *)SiS310_PanelDelayTblLVDS;

   SiS_Pr->SiS_LVDS800x600Data_1   = (SiS_LVDSDataStruct *)SiS310_LVDS800x600Data_1;
   SiS_Pr->SiS_LVDS800x600Data_2   = (SiS_LVDSDataStruct *)SiS310_LVDS800x600Data_2;
   SiS_Pr->SiS_LVDS1024x768Data_1  = (SiS_LVDSDataStruct *)SiS310_LVDS1024x768Data_1;
   SiS_Pr->SiS_LVDS1024x768Data_2  = (SiS_LVDSDataStruct *)SiS310_LVDS1024x768Data_2;
   SiS_Pr->SiS_LVDS1280x1024Data_1 = (SiS_LVDSDataStruct *)SiS310_LVDS1280x1024Data_1;
   SiS_Pr->SiS_LVDS1280x1024Data_2 = (SiS_LVDSDataStruct *)SiS310_LVDS1280x1024Data_2;
   SiS_Pr->SiS_LVDS1280x960Data_1  = (SiS_LVDSDataStruct *)SiS310_LVDS1280x960Data_1;
   SiS_Pr->SiS_LVDS1280x960Data_2  = (SiS_LVDSDataStruct *)SiS310_LVDS1280x960Data_2;
   SiS_Pr->SiS_LVDS1400x1050Data_1 = (SiS_LVDSDataStruct *)SiS310_LVDS1400x1050Data_1;
   SiS_Pr->SiS_LVDS1400x1050Data_2 = (SiS_LVDSDataStruct *)SiS310_LVDS1400x1050Data_2;
   SiS_Pr->SiS_LVDS1280x768Data_1  = (SiS_LVDSDataStruct *)SiS310_LVDS1280x768Data_1;
   SiS_Pr->SiS_LVDS1280x768Data_2  = (SiS_LVDSDataStruct *)SiS310_LVDS1280x768Data_2;
   SiS_Pr->SiS_LVDS1024x600Data_1  = (SiS_LVDSDataStruct *)SiS310_LVDS1024x600Data_1;
   SiS_Pr->SiS_LVDS1024x600Data_2  = (SiS_LVDSDataStruct *)SiS310_LVDS1024x600Data_2;
   SiS_Pr->SiS_LVDS1152x768Data_1  = (SiS_LVDSDataStruct *)SiS310_LVDS1152x768Data_1;
   SiS_Pr->SiS_LVDS1152x768Data_2  = (SiS_LVDSDataStruct *)SiS310_LVDS1152x768Data_2;
   SiS_Pr->SiS_LVDSXXXxXXXData_1   = (SiS_LVDSDataStruct *)SiS310_LVDSXXXxXXXData_1;
   SiS_Pr->SiS_LVDS320x480Data_1   = (SiS_LVDSDataStruct *)SiS310_LVDS320x480Data_1;
   SiS_Pr->SiS_LVDS640x480Data_1   = (SiS_LVDSDataStruct *)SiS310_LVDS640x480Data_1;
   SiS_Pr->SiS_LCDA1400x1050Data_1  = (SiS_LVDSDataStruct *)SiS310_LCDA1400x1050Data_1;
   SiS_Pr->SiS_LCDA1400x1050Data_2  = (SiS_LVDSDataStruct *)SiS310_LCDA1400x1050Data_2;
   SiS_Pr->SiS_LCDA1600x1200Data_1  = (SiS_LVDSDataStruct *)SiS310_LCDA1600x1200Data_1;
   SiS_Pr->SiS_LCDA1600x1200Data_2  = (SiS_LVDSDataStruct *)SiS310_LCDA1600x1200Data_2;
   SiS_Pr->SiS_CHTVUNTSCData = (SiS_LVDSDataStruct *)SiS310_CHTVUNTSCData;
   SiS_Pr->SiS_CHTVONTSCData = (SiS_LVDSDataStruct *)SiS310_CHTVONTSCData;
   SiS_Pr->SiS_CHTVUPALData  = (SiS_LVDSDataStruct *)SiS310_CHTVUPALData;
   SiS_Pr->SiS_CHTVOPALData  = (SiS_LVDSDataStruct *)SiS310_CHTVOPALData;
   SiS_Pr->SiS_CHTVUPALMData = (SiS_LVDSDataStruct *)SiS310_CHTVUPALMData;
   SiS_Pr->SiS_CHTVOPALMData = (SiS_LVDSDataStruct *)SiS310_CHTVOPALMData;
   SiS_Pr->SiS_CHTVUPALNData = (SiS_LVDSDataStruct *)SiS310_CHTVUPALNData;
   SiS_Pr->SiS_CHTVOPALNData = (SiS_LVDSDataStruct *)SiS310_CHTVOPALNData;
   SiS_Pr->SiS_CHTVSOPALData = (SiS_LVDSDataStruct *)SiS310_CHTVSOPALData;
   SiS_Pr->SiS_PanelType00_1 = (SiS_LVDSDesStruct *)SiS310_PanelType00_1;
   SiS_Pr->SiS_PanelType01_1 = (SiS_LVDSDesStruct *)SiS310_PanelType01_1;
   SiS_Pr->SiS_PanelType02_1 = (SiS_LVDSDesStruct *)SiS310_PanelType02_1;
   SiS_Pr->SiS_PanelType03_1 = (SiS_LVDSDesStruct *)SiS310_PanelType03_1;
   SiS_Pr->SiS_PanelType04_1 = (SiS_LVDSDesStruct *)SiS310_PanelType04_1;
   SiS_Pr->SiS_PanelType05_1 = (SiS_LVDSDesStruct *)SiS310_PanelType05_1;
   SiS_Pr->SiS_PanelType06_1 = (SiS_LVDSDesStruct *)SiS310_PanelType06_1;
   SiS_Pr->SiS_PanelType07_1 = (SiS_LVDSDesStruct *)SiS310_PanelType07_1;
   SiS_Pr->SiS_PanelType08_1 = (SiS_LVDSDesStruct *)SiS310_PanelType08_1;
   SiS_Pr->SiS_PanelType09_1 = (SiS_LVDSDesStruct *)SiS310_PanelType09_1;
   SiS_Pr->SiS_PanelType0a_1 = (SiS_LVDSDesStruct *)SiS310_PanelType0a_1;
   SiS_Pr->SiS_PanelType0b_1 = (SiS_LVDSDesStruct *)SiS310_PanelType0b_1;
   SiS_Pr->SiS_PanelType0c_1 = (SiS_LVDSDesStruct *)SiS310_PanelType0c_1;
   SiS_Pr->SiS_PanelType0d_1 = (SiS_LVDSDesStruct *)SiS310_PanelType0d_1;
   SiS_Pr->SiS_PanelType0e_1 = (SiS_LVDSDesStruct *)SiS310_PanelType0e_1;
   SiS_Pr->SiS_PanelType0f_1 = (SiS_LVDSDesStruct *)SiS310_PanelType0f_1;
   SiS_Pr->SiS_PanelType00_2 = (SiS_LVDSDesStruct *)SiS310_PanelType00_2;
   SiS_Pr->SiS_PanelType01_2 = (SiS_LVDSDesStruct *)SiS310_PanelType01_2;
   SiS_Pr->SiS_PanelType02_2 = (SiS_LVDSDesStruct *)SiS310_PanelType02_2;
   SiS_Pr->SiS_PanelType03_2 = (SiS_LVDSDesStruct *)SiS310_PanelType03_2;
   SiS_Pr->SiS_PanelType04_2 = (SiS_LVDSDesStruct *)SiS310_PanelType04_2;
   SiS_Pr->SiS_PanelType05_2 = (SiS_LVDSDesStruct *)SiS310_PanelType05_2;
   SiS_Pr->SiS_PanelType06_2 = (SiS_LVDSDesStruct *)SiS310_PanelType06_2;
   SiS_Pr->SiS_PanelType07_2 = (SiS_LVDSDesStruct *)SiS310_PanelType07_2;
   SiS_Pr->SiS_PanelType08_2 = (SiS_LVDSDesStruct *)SiS310_PanelType08_2;
   SiS_Pr->SiS_PanelType09_2 = (SiS_LVDSDesStruct *)SiS310_PanelType09_2;
   SiS_Pr->SiS_PanelType0a_2 = (SiS_LVDSDesStruct *)SiS310_PanelType0a_2;
   SiS_Pr->SiS_PanelType0b_2 = (SiS_LVDSDesStruct *)SiS310_PanelType0b_2;
   SiS_Pr->SiS_PanelType0c_2 = (SiS_LVDSDesStruct *)SiS310_PanelType0c_2;
   SiS_Pr->SiS_PanelType0d_2 = (SiS_LVDSDesStruct *)SiS310_PanelType0d_2;
   SiS_Pr->SiS_PanelType0e_2 = (SiS_LVDSDesStruct *)SiS310_PanelType0e_2;
   SiS_Pr->SiS_PanelType0f_2 = (SiS_LVDSDesStruct *)SiS310_PanelType0f_2;

   SiS_Pr->LVDS1024x768Des_1  = (SiS_LVDSDesStruct *)SiS310_PanelType1076_1;
   SiS_Pr->LVDS1280x1024Des_1 = (SiS_LVDSDesStruct *)SiS310_PanelType1210_1;
   SiS_Pr->LVDS1400x1050Des_1 = (SiS_LVDSDesStruct *)SiS310_PanelType1296_1 ;
   SiS_Pr->LVDS1600x1200Des_1 = (SiS_LVDSDesStruct *)SiS310_PanelType1600_1 ;
   SiS_Pr->LVDS1024x768Des_2  = (SiS_LVDSDesStruct *)SiS310_PanelType1076_2;
   SiS_Pr->LVDS1280x1024Des_2 = (SiS_LVDSDesStruct *)SiS310_PanelType1210_2;
   SiS_Pr->LVDS1400x1050Des_2 = (SiS_LVDSDesStruct *)SiS310_PanelType1296_2;
   SiS_Pr->LVDS1600x1200Des_2 = (SiS_LVDSDesStruct *)SiS310_PanelType1600_2 ;

   /* TW: New from 650/301LV BIOS */
   SiS_Pr->SiS_CRT2Part2_1024x768_1  = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_1024x768_1;
   SiS_Pr->SiS_CRT2Part2_1280x1024_1 = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_1280x1024_1;
   SiS_Pr->SiS_CRT2Part2_1400x1050_1 = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_1400x1050_1;
   SiS_Pr->SiS_CRT2Part2_1600x1200_1 = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_1600x1200_1;
   SiS_Pr->SiS_CRT2Part2_1024x768_2  = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_1024x768_2;
   SiS_Pr->SiS_CRT2Part2_1280x1024_2 = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_1280x1024_2;
   SiS_Pr->SiS_CRT2Part2_1400x1050_2 = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_1400x1050_2;
   SiS_Pr->SiS_CRT2Part2_1600x1200_2 = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_1600x1200_2;
   SiS_Pr->SiS_CRT2Part2_1024x768_3  = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_1024x768_3;
   SiS_Pr->SiS_CRT2Part2_1280x1024_3 = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_1280x1024_3;
   SiS_Pr->SiS_CRT2Part2_1400x1050_3 = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_1400x1050_3;
   SiS_Pr->SiS_CRT2Part2_1600x1200_3 = (SiS_Part2PortTblStruct *)SiS310_CRT2Part2_1600x1200_3;

   SiS_Pr->SiS_CHTVUNTSCDesData = (SiS_LVDSDesStruct *)SiS310_CHTVUNTSCDesData;
   SiS_Pr->SiS_CHTVONTSCDesData = (SiS_LVDSDesStruct *)SiS310_CHTVONTSCDesData;
   SiS_Pr->SiS_CHTVUPALDesData  = (SiS_LVDSDesStruct *)SiS310_CHTVUPALDesData;
   SiS_Pr->SiS_CHTVOPALDesData  = (SiS_LVDSDesStruct *)SiS310_CHTVOPALDesData;

   SiS_Pr->SiS_LVDSCRT1800x600_1     = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT1800x600_1;
   SiS_Pr->SiS_LVDSCRT11024x768_1    = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11024x768_1;
   SiS_Pr->SiS_LVDSCRT11280x1024_1   = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11280x1024_1;
   SiS_Pr->SiS_LVDSCRT11400x1050_1   = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11400x1050_1;
   SiS_Pr->SiS_LVDSCRT11280x768_1    = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11280x768_1;
   SiS_Pr->SiS_LVDSCRT11024x600_1    = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11024x600_1;
   SiS_Pr->SiS_LVDSCRT11152x768_1    = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11152x768_1;
   SiS_Pr->SiS_LVDSCRT11600x1200_1   = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11600x1200_1;
   SiS_Pr->SiS_LVDSCRT1800x600_1_H   = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT1800x600_1_H;
   SiS_Pr->SiS_LVDSCRT11024x768_1_H  = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11024x768_1_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_1_H = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11280x1024_1_H;
   SiS_Pr->SiS_LVDSCRT11400x1050_1_H = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11400x1050_1_H;
   SiS_Pr->SiS_LVDSCRT11280x768_1_H  = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11280x768_1_H;
   SiS_Pr->SiS_LVDSCRT11024x600_1_H  = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11024x600_1_H;
   SiS_Pr->SiS_LVDSCRT11152x768_1_H  = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11152x768_1_H;
   SiS_Pr->SiS_LVDSCRT11600x1200_1_H = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11600x1200_1_H;
   SiS_Pr->SiS_LVDSCRT1800x600_2     = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT1800x600_2;
   SiS_Pr->SiS_LVDSCRT11024x768_2    = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11024x768_2;
   SiS_Pr->SiS_LVDSCRT11280x1024_2   = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11280x1024_2;
   SiS_Pr->SiS_LVDSCRT11400x1050_2   = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11400x1050_2;
   SiS_Pr->SiS_LVDSCRT11280x768_2    = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11280x768_2;
   SiS_Pr->SiS_LVDSCRT11024x600_2    = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11024x600_2;
   SiS_Pr->SiS_LVDSCRT11152x768_2    = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11152x768_2;
   SiS_Pr->SiS_LVDSCRT11600x1200_2   = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11600x1200_2;
   SiS_Pr->SiS_LVDSCRT1800x600_2_H   = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT1800x600_2_H;
   SiS_Pr->SiS_LVDSCRT11024x768_2_H  = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11024x768_2_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_2_H = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11280x1024_2_H;
   SiS_Pr->SiS_LVDSCRT11400x1050_2_H = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11400x1050_2_H;
   SiS_Pr->SiS_LVDSCRT11280x768_2_H  = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11280x768_2_H;
   SiS_Pr->SiS_LVDSCRT11024x600_2_H  = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11024x600_2_H;
   SiS_Pr->SiS_LVDSCRT11152x768_2_H  = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11152x768_2_H;
   SiS_Pr->SiS_LVDSCRT11600x1200_2_H = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT11600x1200_2_H;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1     = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT1XXXxXXX_1;
   SiS_Pr->SiS_LVDSCRT1320x480_1     = (SiS_LVDSCRT1DataStruct *)SiS310_LVDSCRT1320x480_1;
   SiS_Pr->SiS_CHTVCRT1UNTSC = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1UNTSC;
   SiS_Pr->SiS_CHTVCRT1ONTSC = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1ONTSC;
   SiS_Pr->SiS_CHTVCRT1UPAL  = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1UPAL;
   SiS_Pr->SiS_CHTVCRT1OPAL  = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1OPAL;
   SiS_Pr->SiS_CHTVCRT1SOPAL = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1SOPAL;
   SiS_Pr->SiS_CHTVReg_UNTSC = (SiS_CHTVRegDataStruct *)SiS310_CHTVReg_UNTSC;
   SiS_Pr->SiS_CHTVReg_ONTSC = (SiS_CHTVRegDataStruct *)SiS310_CHTVReg_ONTSC;
   SiS_Pr->SiS_CHTVReg_UPAL  = (SiS_CHTVRegDataStruct *)SiS310_CHTVReg_UPAL;
   SiS_Pr->SiS_CHTVReg_OPAL  = (SiS_CHTVRegDataStruct *)SiS310_CHTVReg_OPAL;
   SiS_Pr->SiS_CHTVReg_UPALM = (SiS_CHTVRegDataStruct *)SiS310_CHTVReg_UPALM;
   SiS_Pr->SiS_CHTVReg_OPALM = (SiS_CHTVRegDataStruct *)SiS310_CHTVReg_OPALM;
   SiS_Pr->SiS_CHTVReg_UPALN = (SiS_CHTVRegDataStruct *)SiS310_CHTVReg_UPALN;
   SiS_Pr->SiS_CHTVReg_OPALN = (SiS_CHTVRegDataStruct *)SiS310_CHTVReg_OPALN;
   SiS_Pr->SiS_CHTVReg_SOPAL = (SiS_CHTVRegDataStruct *)SiS310_CHTVReg_SOPAL;
   SiS_Pr->SiS_LCDACRT1800x600_1     = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT1800x600_1;
   SiS_Pr->SiS_LCDACRT11024x768_1    = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11024x768_1;
   SiS_Pr->SiS_LCDACRT11280x1024_1   = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11280x1024_1;
   SiS_Pr->SiS_LCDACRT11400x1050_1   = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11400x1050_1;
   SiS_Pr->SiS_LCDACRT11600x1200_1   = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11600x1200_1;
   SiS_Pr->SiS_LCDACRT1800x600_1_H   = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT1800x600_1_H;
   SiS_Pr->SiS_LCDACRT11024x768_1_H  = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11024x768_1_H;
   SiS_Pr->SiS_LCDACRT11280x1024_1_H = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11280x1024_1_H;
   SiS_Pr->SiS_LCDACRT11400x1050_1_H = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11400x1050_1_H;
   SiS_Pr->SiS_LCDACRT11600x1200_1_H = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11600x1200_1_H;
   SiS_Pr->SiS_LCDACRT1800x600_2     = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT1800x600_2;
   SiS_Pr->SiS_LCDACRT11024x768_2    = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11024x768_2;
   SiS_Pr->SiS_LCDACRT11280x1024_2   = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11280x1024_2;
   SiS_Pr->SiS_LCDACRT11400x1050_2   = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11400x1050_2;
   SiS_Pr->SiS_LCDACRT11600x1200_2   = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11600x1200_2;
   SiS_Pr->SiS_LCDACRT1800x600_2_H   = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT1800x600_2_H;
   SiS_Pr->SiS_LCDACRT11024x768_2_H  = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11024x768_2_H;
   SiS_Pr->SiS_LCDACRT11280x1024_2_H = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11280x1024_2_H;
   SiS_Pr->SiS_LCDACRT11400x1050_2_H = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11400x1050_2_H;
   SiS_Pr->SiS_LCDACRT11600x1200_2_H = (SiS_LCDACRT1DataStruct *)SiS310_LCDACRT11600x1200_2_H;
d571 2
a572 18
   SiS_Pr->SiS_CHTVVCLKOPALN = SiS310_CHTVVCLKOPALN;   
   SiS_Pr->SiS_CHTVVCLKSOPAL = SiS310_CHTVVCLKSOPAL;

   SiS_Pr->SiS_Panel320x480   = Panel_320x480;
   SiS_Pr->SiS_Panel640x480   = Panel_640x480;
   SiS_Pr->SiS_Panel800x600   = Panel_800x600;
   SiS_Pr->SiS_Panel1024x768  = Panel_1024x768;
   SiS_Pr->SiS_Panel1280x1024 = Panel_1280x1024;
   SiS_Pr->SiS_Panel1280x960  = Panel_1280x960;
   SiS_Pr->SiS_Panel1600x1200 = Panel_1600x1200;
   SiS_Pr->SiS_Panel1400x1050 = Panel_1400x1050;
   SiS_Pr->SiS_Panel1152x768  = Panel_1152x768;
   SiS_Pr->SiS_Panel1152x864  = Panel_1152x864;
   SiS_Pr->SiS_Panel1280x768  = Panel_1280x768;
   SiS_Pr->SiS_Panel1024x600  = Panel_1024x600;
   SiS_Pr->SiS_PanelMax       = Panel_320x480;    /* TW: highest value */
   SiS_Pr->SiS_PanelMinLVDS   = Panel_800x600;    /* TW: lowest value LVDS/LCDA */
   SiS_Pr->SiS_PanelMin301    = Panel_1024x768;   /* TW: lowest value 301 */
d576 2
a577 10
#ifdef LINUXBIOS
/* -------------- SiSInit -----------------*/
/* TW: I degraded this for LINUXBIOS only, because we
 *     don't need this otherwise. Under normal
 *     circumstances, the video BIOS has initialized
 *     the adapter for us. BTW, this code is incomplete
 *     and very possibly not functioning on newer chipsets.
 */
BOOLEAN
SiSInit(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
d579 1
a579 41
   UCHAR  *ROMAddr  = HwDeviceExtension->pjVirtualRomBase;
   ULONG   FBAddr   = (ULONG)HwDeviceExtension->pjVideoMemoryAddress;
   USHORT  BaseAddr = (USHORT)HwDeviceExtension->ulIOAddress;
   UCHAR   i, temp=0;
   UCHAR   SR11;
#ifdef LINUX_KERNEL
   UCHAR   temp1;
   ULONG   base;
#endif
   UCHAR   SR13=0, SR14=0, SR16=0
   UCHAR   SR17=0, SR19=0, SR1A=0;
#ifdef SIS300
   UCHAR   SR18=0, SR12=0;
#endif
#ifdef SIS315H
   UCHAR   CR37=0, CR38=0, CR79=0,
   UCHAR   CR7A=0, CR7B=0, CR7C=0;
   UCHAR   SR1B=0, SR15=0;
   PSIS_DSReg pSR;
   ULONG   Temp;
#endif
   UCHAR   VBIOSVersion[5];

   if(FBAddr==0)    return (FALSE);
   if(BaseAddr==0)  return (FALSE);

   SiS_SetReg3((USHORT)(BaseAddr+0x12),  0x67);  /* Misc */

#ifdef SIS315H
   if(HwDeviceExtension->jChipType > SIS_315PRO) {
     if(!HwDeviceExtension->bIntegratedMMEnabled)
     	return (FALSE);
   }
#endif

   SiS_MemoryCopy(VBIOSVersion,HwDeviceExtension->szVBIOSVer,4);
   VBIOSVersion[4]= 0x00;

   SiSDetermineROMUsage(SiS_Pr, HwDeviceExtension, ROMAddr);

   /* TW: Init pointers */
d581 13
a593 8
   if((HwDeviceExtension->jChipType == SIS_315H) ||
      (HwDeviceExtension->jChipType == SIS_315) ||
      (HwDeviceExtension->jChipType == SIS_315PRO) ||
      (HwDeviceExtension->jChipType == SIS_550) ||
      (HwDeviceExtension->jChipType == SIS_650) ||
      (HwDeviceExtension->jChipType == SIS_740) ||
      (HwDeviceExtension->jChipType == SIS_330))
     InitTo310Pointer(SiS_Pr, HwDeviceExtension);
a594 1

d596 6
a601 5
   if((HwDeviceExtension->jChipType == SIS_540) ||
      (HwDeviceExtension->jChipType == SIS_630) ||
      (HwDeviceExtension->jChipType == SIS_730) ||
      (HwDeviceExtension->jChipType == SIS_300))
     InitTo300Pointer(SiS_Pr, HwDeviceExtension);
d603 2
a604 30

   /* TW: Set SiS Register definitions */
   SiSRegInit(SiS_Pr, BaseAddr);

   /* TW: Determine LVDS/CH70xx/TRUMPION */
   SiS_Set_LVDS_TRUMPION(SiS_Pr, HwDeviceExtension);

   /* TW: Unlock registers */
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x05,0x86);

#ifdef LINUX_KERNEL

#ifdef SIS300                                         	/* Set SR14 */
   if((HwDeviceExtension->jChipType==SIS_540) ||
      (HwDeviceExtension->jChipType==SIS_630) ||
      (HwDeviceExtension->jChipType==SIS_730)) {
     base=0x80000060;
     OutPortLong(base,0xcf8);
     temp1 = InPortLong(0xcfc);
     temp1 >>= (16+8+4);
     temp1 &= 0x07;
     temp1++;
     temp1 = 1 << temp1;
     SR14 = temp1 - 1;
     base = 0x80000064;
     OutPortLong(base,0xcf8);
     temp1 = InPortLong(0xcfc);
     temp1 &= 0x00000020;
     if(temp1) 	SR14 |= 0x80;
     else      	SR14 |= 0x40;
d606 1
a606 1
#endif
d608 3
a610 45
#ifdef SIS315H                                          /* Set SR14 */
   if(HwDeviceExtension->jChipType == SIS_550) {
     base = 0x80000060;
     OutPortLong(base,0xcf8);
     temp1 = InPortLong(0xcfc);
     temp1 >>= (16+8+4);
     temp1 &= 0x07;
     temp1++;
     temp1 = 1 << temp1;
     SR14 = temp1 - 1;
     base = 0x80000064;
     OutPortLong(base,0xcf8);
     temp1 = InPortLong(0xcfc);
     temp1 &= 0x00000020;
     if(temp1)  SR14 |= 0x80;
     else       SR14 |= 0x40;
   }

   if((HwDeviceExtension->jChipType == SIS_740) ||     /* Set SR14 */
      (HwDeviceExtension->jChipType == SIS_650))  {
     base = 0x80000064;
     OutPortLong(base,0xcf8);
     temp1=InPortLong(0xcfc);
     temp1 >>= 4;
     temp1 &= 0x07;
     if(temp1 > 2) {
       temp = temp1;
       switch(temp) {
        case 3: temp1 = 0x07;  break;
        case 4: temp1 = 0x0F;  break;
        case 5: temp1 = 0x1F;  break;
        case 6: temp1 = 0x05;  break;
        case 7: temp1 = 0x17;  break;
        case 8: break;
        case 9: break;
       }
     }
     SR14 = temp1;
     base = 0x8000007C;
     OutPortLong(base,0xcf8);
     temp1 = InPortLong(0xcfc);
     temp1 &= 0x00000020;
     if(temp1)  SR14 |= 0x80;
   }
#endif
d612 5
a616 1
#endif  /* Linux kernel */
d618 135
a752 52
#ifdef SIS300
   if((HwDeviceExtension->jChipType == SIS_540)||
      (HwDeviceExtension->jChipType == SIS_630)||
      (HwDeviceExtension->jChipType == SIS_730)) {
     SR12 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x12);
     SR13 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13);
     SR14 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
     SR16 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x16);
     SR17 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x17);
     SR18 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x18);
     SR19 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x19);
     SR1A = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1A);
   } else if(HwDeviceExtension->jChipType == SIS_300){
     SR13 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13);
     SR14 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
   }
#endif
#ifdef SIS315H
   if((HwDeviceExtension->jChipType == SIS_550) ||
      (HwDeviceExtension->jChipType == SIS_740) ||
      (HwDeviceExtension->jChipType == SIS_650)) {
     SR19 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x19);
     SR19 = (SR19)||0x01;  /* TW: ??? || ??? */
     if(SR19==0x00) {
     	SR13 = 0x22;
     	SR14 = 0x00;
    	SR15 = 0x01;
     	SR16 = 0x00;
     	SR17 = 0x00;
     	SR1A = 0x00;
     	SR1B = 0x00;
     	CR37 = 0x00;
     	CR38 = 0x00;
     	CR79 = 0x00;
     	CR7A = 0x00;
     	CR7B = 0x00;
     	CR7C = 0x00;
     } else {
     	SR13 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13);
     	SR14 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
     	SR15 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x15);
     	SR16 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x16);
     	SR17 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x17);
     	SR1A = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1A);
     	SR1B = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1B);
     	CR37 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3d4,0x37);  /* TW: Was 0x02 - why? */
     	CR38 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
     	CR79 = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3d4,0x79);
     	CR7A = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3d4,0x7A);
     	CR7B = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3d4,0x7B);
     	CR7C = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3d4,0x7C);
     }
a753 1
#endif
d755 2
a756 5
   /* Reset extended registers */

   for(i=0x06; i< 0x20; i++) SiS_SetReg1(SiS_Pr->SiS_P3c4,i,0);
   for(i=0x21; i<=0x27; i++) SiS_SetReg1(SiS_Pr->SiS_P3c4,i,0);
   for(i=0x31; i<=0x3D; i++) SiS_SetReg1(SiS_Pr->SiS_P3c4,i,0);
d758 5
a762 8
#ifdef SIS300
   if((HwDeviceExtension->jChipType == SIS_540) ||
      (HwDeviceExtension->jChipType == SIS_630) ||
      (HwDeviceExtension->jChipType == SIS_730) ||
      (HwDeviceExtension->jChipType == SIS_300)) {
     	for(i=0x38; i<=0x3F; i++) SiS_SetReg1(SiS_Pr->SiS_P3d4,i,0);
   }
#endif
d764 1
a764 12
#ifdef SIS315H
   if((HwDeviceExtension->jChipType == SIS_315H) ||
      (HwDeviceExtension->jChipType == SIS_315) ||
      (HwDeviceExtension->jChipType == SIS_315PRO) ||
      (HwDeviceExtension->jChipType == SIS_550) ||
      (HwDeviceExtension->jChipType == SIS_650) ||
      (HwDeviceExtension->jChipType == SIS_740) ||
      (HwDeviceExtension->jChipType == SIS_330)) {
   	for(i=0x12; i<=0x1B; i++) SiS_SetReg1(SiS_Pr->SiS_P3c4,i,0);
   	for(i=0x79; i<=0x7C; i++) SiS_SetReg1(SiS_Pr->SiS_P3d4,i,0);
   }
#endif
d766 92
a857 1
   /* Restore Extended Registers */
d859 1
a859 14
#ifdef SIS300
   if((HwDeviceExtension->jChipType == SIS_540) ||
      (HwDeviceExtension->jChipType == SIS_630) ||
      (HwDeviceExtension->jChipType == SIS_730)) {
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x12,SR12);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x13,SR13);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,SR14);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x16,SR16);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x17,SR17);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x18,SR18);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x19,SR19);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x1A,SR1A);
   }
#endif
d861 76
a936 18
#ifdef SIS315H
   if((HwDeviceExtension->jChipType == SIS_550) ||
      (HwDeviceExtension->jChipType == SIS_740) ||
      (HwDeviceExtension->jChipType == SIS_650)) {
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x13,SR13);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,SR14);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x15,SR15);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x16,SR16);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x17,SR17);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x19,SR19);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x1A,SR1A);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x1B,SR1B);
     SiS_SetReg1(SiS_Pr->SiS_P3d4,0x37,CR37);
     SiS_SetReg1(SiS_Pr->SiS_P3d4,0x38,CR38);
     SiS_SetReg1(SiS_Pr->SiS_P3d4,0x79,CR79);
     SiS_SetReg1(SiS_Pr->SiS_P3d4,0x7A,CR7A);
     SiS_SetReg1(SiS_Pr->SiS_P3d4,0x7B,CR7B);
     SiS_SetReg1(SiS_Pr->SiS_P3d4,0x7C,CR7C);
a937 1
#endif
d939 2
a940 26
#ifdef SIS300
   if((HwDeviceExtension->jChipType==SIS_540) ||
      (HwDeviceExtension->jChipType==SIS_630) ||
      (HwDeviceExtension->jChipType==SIS_730)) {
     	temp = (UCHAR)SR1A & 0x03;
   } else if(HwDeviceExtension->jChipType == SIS_300) {
        /* TW: Nothing */
   }
#endif
#ifdef SIS315H
   if((HwDeviceExtension->jChipType == SIS_315H)   ||
      (HwDeviceExtension->jChipType == SIS_315)    ||
      (HwDeviceExtension->jChipType == SIS_315PRO) ||
      (HwDeviceExtension->jChipType == SIS_330) ) {
      	if((*SiS_Pr->pSiS_SoftSetting & SoftDRAMType) == 0) {
          	temp = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x3A) & 0x03;
        }
   }
   if((HwDeviceExtension->jChipType == SIS_550) ||
      (HwDeviceExtension->jChipType == SIS_740) ||
      (HwDeviceExtension->jChipType == SIS_650)) {
        if((*SiS_Pr->pSiS_SoftSetting & SoftDRAMType) == 0) {
          	temp = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13) & 0x07;
        }
   }
#endif
d942 4
a945 2
   SiS_Pr->SiS_RAMType = temp;
   SiS_SetMemoryClock(SiS_Pr, ROMAddr, HwDeviceExtension);
d947 1
a947 1
   /* Set default register contents */
d949 20
a968 1
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x07,*SiS_Pr->pSiS_SR07); 		/* DAC speed */
d970 1
a970 7
   if((HwDeviceExtension->jChipType != SIS_540) &&
      (HwDeviceExtension->jChipType != SIS_630) &&
      (HwDeviceExtension->jChipType != SIS_730)){
     	for(i=0x15;i<0x1C;i++) {
       	    SiS_SetReg1(SiS_Pr->SiS_P3c4,i,SiS_Pr->SiS_SR15[i-0x15][SiS_Pr->SiS_RAMType]);
     	}
   }
d972 71
a1042 11
#ifdef SIS315H
   if((HwDeviceExtension->jChipType == SIS_315H) ||
      (HwDeviceExtension->jChipType == SIS_315)  ||
      (HwDeviceExtension->jChipType == SIS_315PRO) ||
      (HwDeviceExtension->jChipType == SIS_330)) {
     	for(i=0x40;i<=0x44;i++) {
       	    SiS_SetReg1(SiS_Pr->SiS_P3d4,i,SiS_Pr->SiS_CR40[i-0x40][SiS_Pr->SiS_RAMType]);
     	}
     	SiS_SetReg1(SiS_Pr->SiS_P3d4,0x48,0x23);
     	SiS_SetReg1(SiS_Pr->SiS_P3d4,0x49,SiS_Pr->SiS_CR49[0]);
    /*  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x25,SiS_Pr->SiS_SR25[0]);  */
d1044 2
a1045 1
#endif
d1047 4
a1050 5
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x1F,*SiS_Pr->pSiS_SR1F); 	/* DAC pedestal */
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x20,0xA0);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x23,*SiS_Pr->pSiS_SR23);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x24,*SiS_Pr->pSiS_SR24);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x25,SiS_Pr->SiS_SR25[0]);
d1052 1
a1052 6
#ifdef SIS300
   if(HwDeviceExtension->jChipType == SIS_300) {
     	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x21,0x84);
     	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x22,0x00);
   }
#endif
d1054 77
a1130 21
   SR11 = 0x0F;
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x11,SR11);		/* Power Management & DDC port */

   SiS_UnLockCRT2(SiS_Pr, HwDeviceExtension, BaseAddr);
   SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x00,0x00);
   SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x02,*SiS_Pr->pSiS_CRT2Data_1_2);

#ifdef SIS315H
   if((HwDeviceExtension->jChipType == SIS_315H) ||
      (HwDeviceExtension->jChipType == SIS_315) ||
      (HwDeviceExtension->jChipType == SIS_315PRO) ||
      (HwDeviceExtension->jChipType == SIS_550) ||
      (HwDeviceExtension->jChipType == SIS_650) ||
      (HwDeviceExtension->jChipType == SIS_740) ||
      (HwDeviceExtension->jChipType == SIS_330))
     	SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x2E,0x08);    /* use VB */
#endif

   temp = *SiS_Pr->pSiS_SR32;
   if(SiS_BridgeIsOn(SiS_Pr, BaseAddr)) {
     	temp &= 0xEF;
a1131 1
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x32,temp);
d1133 2
a1134 20
#ifdef SIS315H
   if((HwDeviceExtension->jChipType == SIS_315H)   ||
      (HwDeviceExtension->jChipType == SIS_315)    ||
      (HwDeviceExtension->jChipType == SIS_315PRO) ||
      (HwDeviceExtension->jChipType == SIS_330)) {
     HwDeviceExtension->pQueryVGAConfigSpace(HwDeviceExtension,0x50,0,&Temp);
     Temp >>= 20;
     Temp &= 0xF;
     if (Temp != 1) {
     	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x25,SiS_Pr->SiS_SR25[1]);
     	SiS_SetReg1(SiS_Pr->SiS_P3d4,0x49,SiS_Pr->SiS_CR49[1]);
     }

     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x27,0x1F);

     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x31,*SiS_Pr->pSiS_SR31);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x32,*SiS_Pr->pSiS_SR32);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x33,*SiS_Pr->pSiS_SR33);
   }
#endif
a1135 11
   if (SiS_BridgeIsOn(SiS_Pr, BaseAddr) == 0) {
     	if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
       		SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x00,0x1C);
       		SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x0D,*SiS_Pr->pSiS_CRT2Data_4_D);
       		SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x0E,*SiS_Pr->pSiS_CRT2Data_4_E);
       		SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x10,*SiS_Pr->pSiS_CRT2Data_4_10);
       		SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x0F,0x3F);
     	}
     	SiS_LockCRT2(SiS_Pr, HwDeviceExtension, BaseAddr);
   }
   SiS_SetReg1(SiS_Pr->SiS_P3d4,0x83,0x00);
d1137 3
a1139 17
#ifdef SIS315H
   if((HwDeviceExtension->jChipType == SIS_315H)   ||
      (HwDeviceExtension->jChipType == SIS_315)    ||
      (HwDeviceExtension->jChipType == SIS_315PRO) ||
      (HwDeviceExtension->jChipType == SIS_330)) {
       	if(HwDeviceExtension->bSkipDramSizing==TRUE) {
         	SiS_SetDRAMModeRegister(SiS_Pr, ROMAddr,HwDeviceExtension);
         	pSR = HwDeviceExtension->pSR;
         	if(pSR != NULL) {
           		while(pSR->jIdx != 0xFF) {
             			SiS_SetReg1(SiS_Pr->SiS_P3c4,pSR->jIdx,pSR->jVal);
             			pSR++;
           		}
         	}
       } else SiS_SetDRAMSize_310(SiS_Pr, HwDeviceExtension);
   }
#endif
d1141 6
a1146 14
#ifdef SIS315H
   if(HwDeviceExtension->jChipType == SIS_550) {
       /* SetDRAMConfig begin */
/*     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x12,SR12);
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x13,SR13);
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,SR14);
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x16,SR16);
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x17,SR17);
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x18,SR18);
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x19,SR19);
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x1A,SR1A);   */
       /* SetDRAMConfig end */
   }
#endif
d1148 5
a1152 35
#ifdef SIS300
   if(HwDeviceExtension->jChipType == SIS_300) {
       	if (HwDeviceExtension->bSkipDramSizing == TRUE) {
/*       	SiS_SetDRAMModeRegister(ROMAddr,HwDeviceExtension);
         	temp = (HwDeviceExtension->pSR)->jVal;
         	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x13,temp);
         	temp = (HwDeviceExtension->pSR)->jVal;
         	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,temp);   */
       } else {
#ifdef TC
         	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x13,SR13);
         	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,SR14);
         	SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x15,0xFF,0x04);
#else
         	SiS_SetDRAMSize_300(SiS_Pr, HwDeviceExtension);
         	SiS_SetDRAMSize_300(SiS_Pr, HwDeviceExtension);
#endif
       }
   }
   if((HwDeviceExtension->jChipType==SIS_540)||
      (HwDeviceExtension->jChipType==SIS_630)||
      (HwDeviceExtension->jChipType==SIS_730)) {
#if 0
     	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x12,SR12);
       	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x13,SR13);
       	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,SR14);
       	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x16,SR16);
       	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x17,SR17);
       	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x18,SR18);
       	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x19,SR19);
       	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x1A,SR1A);
#endif
   }
/* SetDRAMSize end */
#endif /* SIS300 */
d1154 4
a1157 25
   /* Set default Ext2Regs */
#if 0
   AGP=1;
   temp=(UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x3A);
   temp &= 0x30;
   if(temp == 0x30) AGP=0;
   if(AGP == 0) *SiS_Pr->pSiS_SR21 &= 0xEF;
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x21,*SiS_Pr->pSiS_SR21);
   if(AGP == 1) *SiS_Pr->pSiS_SR22 &= 0x20;
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x22,*SiS_Pr->pSiS_SR22);
#endif
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x21,*SiS_Pr->pSiS_SR21);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x22,*SiS_Pr->pSiS_SR22);

#if 0
   SiS_SetReg3(SiS_Pr->SiS_P3c6,0xff);
   SiS_ClearDAC(SiS_Pr, SiS_Pr->SiS_P3c8);
#endif

#ifdef LINUXBIOS   /* TW: This is not needed for our purposes */
   SiS_DetectMonitor(SiS_Pr, HwDeviceExtension,BaseAddr);    /* Sense CRT1 */
   SiS_GetSenseStatus(SiS_Pr, HwDeviceExtension,ROMAddr);    /* Sense CRT2 */
#endif

   return(TRUE);
d1161 1
a1161 1
SiS_Set_LVDS_TRUMPION(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
d1163 2
a1164 1
  USHORT temp = 0;
d1166 5
a1170 24
#ifdef SiS300
  if((HwDeviceExtension->jChipType == SIS_540) ||
     (HwDeviceExtension->jChipType == SIS_630) ||
     (HwDeviceExtension->jChipType == SIS_730)) {
        /* TW: Read POWER_ON_TRAP and copy to CR37 */
    	temp = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1A);
    	temp = (temp & 0xE0) >> 4;
   	SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,0xF1,temp);
  }
#endif
#ifdef SIS315H
  if((HwDeviceExtension->jChipType == SIS_650) ||
     (HwDeviceExtension->jChipType == SIS_740) ||
     (HwDeviceExtension->jChipType == SIS_330)) {
#if 0 /* TW: This is not required */
        /* TW: Read POWER_ON_TRAP and copy to CR37 */
    	temp = (UCHAR)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1A);
    	temp = (temp & 0xE0) >> 4;
   	SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,0xF1,temp);
#endif
  }
#endif

   SiSSetLVDSetc(SiS_Pr, HwDeviceExtension, 0);
d1173 2
a1174 4
/* ===============  SiS 300 dram sizing begin  =============== */
#ifdef SIS300
void
SiS_SetDRAMSize_300(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
d1176 1
a1176 77
   ULONG   FBAddr = (ULONG)HwDeviceExtension->pjVideoMemoryAddress;
   USHORT  SR13, SR14=0, buswidth, Done;
   SHORT   i, j, k;
   USHORT  data, TotalCapacity, PhysicalAdrOtherPage=0;
   ULONG   Addr;
   UCHAR   temp;
   int     PseudoRankCapacity, PseudoTotalCapacity, PseudoAdrPinCount;
   int     RankCapacity, AdrPinCount, BankNumHigh, BankNumMid, MB2Bank;
   int     PageCapacity, PhysicalAdrHigh, PhysicalAdrHalfPage;

   SiSSetMode(SiS_Pr, HwDeviceExtension, 0x2e);

   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x01,0x20);        /* Turn OFF Display  */

   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x13,0x00);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,0xBF);

   buswidth = SiS_ChkBUSWidth_300(SiS_Pr, FBAddr);

   MB2Bank = 16;
   Done = 0;
   for(i=6; i>=0; i--) {
      if(Done == 1) break;
      PseudoRankCapacity = 1 << i;
      for(j=4; j>=1; j--) {
         if(Done == 1) break;
         PseudoTotalCapacity = PseudoRankCapacity * j;
         PseudoAdrPinCount = 15 - j;
         if(PseudoTotalCapacity <= 64) {
            for(k=0; k<=16; k++) {
               if(Done == 1) break;
               RankCapacity = buswidth * SiS_DRAMType[k][3];
               AdrPinCount = SiS_DRAMType[k][2] + SiS_DRAMType[k][0];
               if(RankCapacity == PseudoRankCapacity)
                 if(AdrPinCount <= PseudoAdrPinCount) {
                    if(j == 3) {             /* Rank No */
                       BankNumHigh = RankCapacity * MB2Bank * 3 - 1;
                       BankNumMid = RankCapacity * MB2Bank * 1 - 1;
                    } else {
                       BankNumHigh = RankCapacity * MB2Bank * j - 1;
                       BankNumMid = RankCapacity * MB2Bank * j / 2 - 1;
                    }
                    PageCapacity = (1 << SiS_DRAMType[k][1]) * buswidth * 4;
                    PhysicalAdrHigh = BankNumHigh;
                    PhysicalAdrHalfPage = (PageCapacity / 2 + PhysicalAdrHigh) % PageCapacity;
                    PhysicalAdrOtherPage = PageCapacity * SiS_DRAMType[k][2] + PhysicalAdrHigh;
                    /* Write data */
                    /*Test*/
                    SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x15,0xFB);
                    SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x15,0x04);
                    /*/Test*/
                    TotalCapacity = SiS_DRAMType[k][3] * buswidth;
                    SR13 = SiS_DRAMType[k][4];
                    if(buswidth == 4) SR14 = (TotalCapacity - 1) | 0x80;
                    if(buswidth == 2) SR14 = (TotalCapacity - 1) | 0x40;
                    if(buswidth == 1) SR14 = (TotalCapacity - 1) | 0x00;
                    SiS_SetReg1(SiS_Pr->SiS_P3c4,0x13,SR13);
                    SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,SR14);

                    Addr = FBAddr + (BankNumHigh) * 64 * 1024 + PhysicalAdrHigh;
                    *((USHORT *)(Addr)) = (USHORT)PhysicalAdrHigh;
                    Addr = FBAddr + (BankNumMid) * 64 * 1024 + PhysicalAdrHigh;
                    *((USHORT *)(Addr)) = (USHORT)BankNumMid;
                    Addr = FBAddr + (BankNumHigh) * 64 * 1024 + PhysicalAdrHalfPage;
                    *((USHORT *)(Addr)) = (USHORT)PhysicalAdrHalfPage;
                    Addr = FBAddr + (BankNumHigh) * 64 * 1024 + PhysicalAdrOtherPage;
                    *((USHORT *)(Addr)) = PhysicalAdrOtherPage;

                    /* Read data */
                    Addr = FBAddr + (BankNumHigh) * 64 * 1024 + PhysicalAdrHigh;
                    data = *((USHORT *)(Addr));
                    if(data == PhysicalAdrHigh) Done = 1;
                 }  /* if struct */
            }  /* for loop (k) */
         }  /* if struct */
      }  /* for loop (j) */
   }  /* for loop (i) */
d1180 1
a1180 1
SiS_ChkBUSWidth_300(SiS_Private *SiS_Pr, ULONG FBAddress)
d1182 2
a1183 1
   PULONG  pVideoMemory;
d1185 4
a1188 13
   pVideoMemory = (PULONG)FBAddress;

   pVideoMemory[0] = 0x01234567L;
   pVideoMemory[1] = 0x456789ABL;
   pVideoMemory[2] = 0x89ABCDEFL;
   pVideoMemory[3] = 0xCDEF0123L;
   if (pVideoMemory[3]==0xCDEF0123L) {  /* Channel A 128bit */
     return(4);
   }
   if (pVideoMemory[1]==0x456789ABL) {  /* Channel B 64bit */
     return(2);
   }
   return(1);
a1189 7
#endif
/* ===============  SiS 300 dram sizing end    =============== */

/* ============  SiS 310/325 dram sizing begin  ============== */
#ifdef SIS315H

/* TW: Moved Get310DRAMType further down */
d1192 1
a1192 1
SiS_Delay15us(SiS_Private *SiS_Pr, ULONG ulMicrsoSec)
d1194 5
d1202 1
a1202 1
SiS_SDR_MRS(SiS_Private *SiS_Pr, )
d1204 1
a1204 1
   USHORT  data;
d1206 3
a1208 7
   data = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x16);
   data &= 0x3F;          		        /* SR16 D7=0, D6=0 */
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x16,data);   	/* enable mode register set(MRS) low */
   SiS_Delay15us(SiS_Pr, 0x100);
   data |= 0x80;          		        /* SR16 D7=1, D6=0 */
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x16,data);   	/* enable mode register set(MRS) high */
   SiS_Delay15us(SiS_Pr, 0x100);
d1212 1
a1212 1
SiS_DDR_MRS(SiS_Private *SiS_Pr)
d1214 1
a1214 1
   USHORT  data;
d1216 4
a1219 10
   /* SR16 <- 1F,DF,2F,AF */

   /* enable DLL of DDR SD/SGRAM , SR16 D4=1 */
   data=SiS_GetReg1(SiS_Pr->SiS_P3c4,0x16);
   data &= 0x0F;
   data |= 0x10;
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x16,data);

   if (!(SiS_Pr->SiS_SR15[1][SiS_Pr->SiS_RAMType] & 0x10))
     data &= 0x0F;
d1221 3
a1223 15
   /* SR16 D7=1,D6=1 */
   data |= 0xC0;
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x16,data);
   
   /* SR16 D7=1,D6=0,D5=1,D4=0 */
   data &= 0x0F;
   data |= 0x20;
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x16,data);
   if (!(SiS_Pr->SiS_SR15[1][SiS_Pr->SiS_RAMType] & 0x10))
     data &= 0x0F;

   /* SR16 D7=1 */
   data |= 0x80;
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x16,data);
}
d1226 1
a1226 1
SiS_SetDRAMModeRegister(SiS_Private *SiS_Pr, UCHAR *ROMAddr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
d1228 1
a1228 5
    if (SiS_Get310DRAMType(ROMAddr,HwDeviceExtension) < 2)
        SiS_SDR_MRS(SiS_Pr);
    else
        /* SR16 <- 0F,CF,0F,8F */
        SiS_DDR_MRS(SiS_Pr);
d1232 1
a1232 1
SiS_DisableRefresh(SiS_Private *SiS_Pr)
d1234 1
a1234 2
   SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x17,0xF8);
   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x19,0x03);
d1237 5
d1243 1
a1243 1
SiS_EnableRefresh(SiS_Private *SiS_Pr, UCHAR *ROMAddr)
d1245 26
a1270 3
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x17,SiS_Pr->SiS_SR15[2][SiS_Pr->SiS_RAMType]);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x19,SiS_Pr->SiS_SR15[4][SiS_Pr->SiS_RAMType]);
}
d1272 2
a1273 3
void
SiS_DisableChannelInterleaving(SiS_Private *SiS_Pr, int index,
                               USHORT SiS_DDRDRAM_TYPE[][5])
d1275 1
a1275 1
   USHORT  data;
d1277 49
a1325 8
   data=SiS_GetReg1(SiS_Pr->SiS_P3c4,0x15);
   data &= 0x1F;
   switch (SiS_DDRDRAM_TYPE[index][3])
   {
     case 64: data |= 0; 	break;
     case 32: data |= 0x20;	break;
     case 16: data |= 0x40;     break;
     case 4:  data |= 0x60;     break;
a1326 1
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x15,data);
d1329 6
a1334 2
void
SiS_SetDRAMSizingType(SiS_Private *SiS_Pr, int index, USHORT DRAMTYPE_TABLE[][5])
d1336 43
a1378 2
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x13,DRAMTYPE_TABLE[index][4]);
   /* should delay 50 ns */
d1381 4
d1386 1
a1386 2
SiS_CheckBusWidth_310(SiS_Private *SiS_Pr, UCHAR *ROMAddress,ULONG FBAddress,
                      PSIS_HW_DEVICE_INFO HwDeviceExtension)
d1388 8
a1395 2
   USHORT  data, temp;
   PULONG  volatile pVideoMemory;
d1397 1
a1397 1
   pVideoMemory = (PULONG)FBAddress;
d1399 3
a1401 2
   if(HwDeviceExtension->jChipType == SIS_330) temp = 1;
   else temp = 2;
d1403 41
a1443 1
   if(SiS_Get310DRAMType(ROMAddress,HwDeviceExtension) < temp) {
d1445 3
a1447 8
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x13,0x00);
     if(HwDeviceExtension->jChipType != SIS_330) {
        SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,0x12);
     } else {
        SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,0x02);
     }
     /* should delay */
     SiS_SDR_MRS(SiS_Pr);
d1449 5
a1453 23
     SiS_Pr->SiS_ChannelAB = 0;
     SiS_Pr->SiS_DataBusWidth = 128;
     pVideoMemory[0] = 0x01234567L;
     pVideoMemory[1] = 0x456789ABL;
     pVideoMemory[2] = 0x89ABCDEFL;
     pVideoMemory[3] = 0xCDEF0123L;
     pVideoMemory[4] = 0x55555555L;
     pVideoMemory[5] = 0x55555555L;
     pVideoMemory[6] = 0xFFFFFFFFL;
     pVideoMemory[7] = 0xFFFFFFFFL;
     if((pVideoMemory[3] != 0xCDEF0123L) || (pVideoMemory[2] != 0x89ABCDEFL)) {
       /* Channel A 64Bit */
       SiS_Pr->SiS_DataBusWidth = 64;
       SiS_Pr->SiS_ChannelAB = 0;
       SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x14, 0xFD);
     }
     if((pVideoMemory[1] != 0x456789ABL) || (pVideoMemory[0] != 0x01234567L)) {
       /* Channel B 64Bit */
       SiS_Pr->SiS_DataBusWidth = 64;
       SiS_Pr->SiS_ChannelAB = 1;
       SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x14,0xfd,0x01);
     }
     return;
d1455 5
a1459 1
   } else {
d1461 3
a1463 30
     /* DDR Dual channel */
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x13,0x00);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,0x02); /* Channel A, 64bit */
     /* should delay */
     SiS_DDR_MRS(SiS_Pr);

     SiS_Pr->SiS_ChannelAB = 0;
     SiS_Pr->SiS_DataBusWidth = 64;
     pVideoMemory[0] = 0x01234567L;
     pVideoMemory[1] = 0x456789ABL;
     pVideoMemory[2] = 0x89ABCDEFL;
     pVideoMemory[3] = 0xCDEF0123L;
     pVideoMemory[4] = 0x55555555L;
     pVideoMemory[5] = 0x55555555L;
     pVideoMemory[6] = 0xAAAAAAAAL;
     pVideoMemory[7] = 0xAAAAAAAAL;

     if (pVideoMemory[1] == 0x456789ABL) {
       if (pVideoMemory[0] == 0x01234567L) {
         /* Channel A 64bit */
         return;
       }
     } else {
       if (pVideoMemory[0] == 0x01234567L) {
         /* Channel A 32bit */
         SiS_Pr->SiS_DataBusWidth = 32;
         SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,0x00);
         return;
       }
     }
d1465 5
a1469 2
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,0x03); /* Channel B, 64bit */
     SiS_DDR_MRS(SiS_Pr);
d1471 18
a1488 27
     SiS_Pr->SiS_ChannelAB = 1;
     SiS_Pr->SiS_DataBusWidth = 64;
     pVideoMemory[0] = 0x01234567L;
     pVideoMemory[1] = 0x456789ABL;
     pVideoMemory[2] = 0x89ABCDEFL;
     pVideoMemory[3] = 0xCDEF0123L;
     pVideoMemory[4] = 0x55555555L;
     pVideoMemory[5] = 0x55555555L;
     pVideoMemory[6] = 0xAAAAAAAAL;
     pVideoMemory[7] = 0xAAAAAAAAL;
     if(pVideoMemory[1] == 0x456789ABL) {
       /* Channel B 64 */
       if(pVideoMemory[0] == 0x01234567L) {
         /* Channel B 64bit */
         return;
       } else {
         /* error */
       }
     } else {
       if(pVideoMemory[0] == 0x01234567L) {
         /* Channel B 32 */
         SiS_Pr->SiS_DataBusWidth = 32;
         SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,0x01);
       } else {
         /* error */
       }
     }
d1490 1
d1493 2
a1494 2
int
SiS_SetRank(SiS_Private *SiS_Pr, int index,UCHAR RankNo,USHORT DRAMTYPE_TABLE[][5])
d1496 2
a1497 2
  USHORT  data;
  int RankSize;
d1499 2
a1500 2
  if ((RankNo==2)&&(DRAMTYPE_TABLE[index][0]==2))
         return 0;
d1502 30
a1531 1
  RankSize = DRAMTYPE_TABLE[index][3]/2 * SiS_Pr->SiS_DataBusWidth / 32;
d1533 3
a1535 15
  if (RankNo * RankSize <= 128) {
    data = 0;
    while((RankSize >>= 1) > 0) {
      data += 0x10;
    }
    data |= (RankNo - 1) << 2;
    data |= (SiS_Pr->SiS_DataBusWidth / 64) & 2;
    data |= SiS_Pr->SiS_ChannelAB;
    SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,data);
    /* should delay */
    SiS_SDR_MRS(SiS_Pr);
    return 1;
  } else
    return 0;
}
d1537 2
a1538 3
int
SiS_SetDDRChannel(SiS_Private *SiS_Pr, int index,UCHAR ChannelNo,
                  USHORT DRAMTYPE_TABLE[][5])
d1540 1
a1540 2
  USHORT  data;
  int RankSize;
d1542 7
a1548 16
  RankSize = DRAMTYPE_TABLE[index][3]/2 * SiS_Pr->SiS_DataBusWidth / 32;
  /* RankSize = DRAMTYPE_TABLE[index][3]; */
  if (ChannelNo * RankSize <= 128) {
    data = 0;
    while((RankSize >>= 1) > 0) {
      data += 0x10;
    }
    if(ChannelNo == 2) data |= 0x0C;
    data |= (SiS_Pr->SiS_DataBusWidth / 32) & 2;
    data |= SiS_Pr->SiS_ChannelAB;
    SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,data);
    /* should delay */
    SiS_DDR_MRS(SiS_Pr);
    return 1;
  } else
    return 0;
d1551 2
a1552 2
int
SiS_CheckColumn(SiS_Private *SiS_Pr, int index,USHORT DRAMTYPE_TABLE[][5],ULONG FBAddress)
d1554 1
a1554 5
  int i;
  ULONG Increment,Position;

  /*Increment = 1<<(DRAMTYPE_TABLE[index][2] + SiS_Pr->SiS_DataBusWidth / 64 + 1); */
  Increment = 1 << (10 + SiS_Pr->SiS_DataBusWidth / 64);
d1556 7
a1562 12
  for (i=0,Position=0;i<2;i++) {
         *((PULONG)(FBAddress + Position)) = Position;
         Position += Increment;
  }

  for (i=0,Position=0;i<2;i++) {
/*    if (FBAddress[Position]!=Position) */
         if((*(PULONG)(FBAddress + Position)) != Position)
                return 0;
         Position += Increment;
  }
  return 1;
d1565 2
a1566 2
int
SiS_CheckBanks(SiS_Private *SiS_Pr, int index,USHORT DRAMTYPE_TABLE[][5],ULONG FBAddress)
d1568 2
a1569 17
  int i;
  ULONG Increment,Position;
  Increment = 1 << (DRAMTYPE_TABLE[index][2] + SiS_Pr->SiS_DataBusWidth / 64 + 2);

  for (i=0,Position=0;i<4;i++) {
/*    FBAddress[Position]=Position; */
    *((PULONG)(FBAddress + Position)) = Position;
    Position += Increment;
  }

  for (i=0,Position=0;i<4;i++) {
/*    if (FBAddress[Position]!=Position) */
    if((*(PULONG)(FBAddress + Position)) != Position)
      return 0;
    Position += Increment;
  }
  return 1;
d1572 2
a1573 2
int
SiS_CheckRank(SiS_Private *SiS_Pr, int RankNo,int index,USHORT DRAMTYPE_TABLE[][5],ULONG FBAddress)
d1575 1
a1575 20
  int i;
  ULONG Increment,Position;
  Increment = 1<<(DRAMTYPE_TABLE[index][2] + DRAMTYPE_TABLE[index][1] +
                  DRAMTYPE_TABLE[index][0] + SiS_Pr->SiS_DataBusWidth / 64 + RankNo);

  for (i=0,Position=0;i<2;i++) {
/*    FBAddress[Position]=Position; */
    *((PULONG)(FBAddress+Position))=Position;
    /* *((PULONG)(FBAddress))=Position; */
    Position += Increment;
  }

  for (i=0,Position=0;i<2;i++) {
/*    if (FBAddress[Position]!=Position) */
         if ( (*(PULONG) (FBAddress + Position)) !=Position)
    /*if ( (*(PULONG) (FBAddress )) !=Position) */
      return 0;
    Position += Increment;
  }
  return 1;
d1578 2
a1579 2
int
SiS_CheckDDRRank(SiS_Private *SiS_Pr, int RankNo,int index,USHORT DRAMTYPE_TABLE[][5],ULONG FBAddress)
d1581 1
a1581 2
  ULONG Increment,Position;
  USHORT  data;
d1583 5
a1587 2
  Increment = 1<<(DRAMTYPE_TABLE[index][2] + DRAMTYPE_TABLE[index][1] +
                  DRAMTYPE_TABLE[index][0] + SiS_Pr->SiS_DataBusWidth / 64 + RankNo);
d1589 4
a1592 25
  Increment += Increment/2;

  Position =0;
  *((PULONG)(FBAddress+Position + 0)) = 0x01234567;
  *((PULONG)(FBAddress+Position + 1)) = 0x456789AB;
  *((PULONG)(FBAddress+Position + 2)) = 0x55555555;
  *((PULONG)(FBAddress+Position + 3)) = 0x55555555;
  *((PULONG)(FBAddress+Position + 4)) = 0xAAAAAAAA;
  *((PULONG)(FBAddress+Position + 5)) = 0xAAAAAAAA;

  if ( (*(PULONG) (FBAddress + 1)) == 0x456789AB)
    return 1;

  if ( (*(PULONG) (FBAddress + 0)) == 0x01234567)
    return 0;

  data=SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
  data &= 0xF3;
  data |= 0x08;
  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x14,data);
  data=SiS_GetReg1(SiS_Pr->SiS_P3c4,0x15);
  data += 0x20;
  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x15,data);

  return 1;
d1595 2
a1596 2
int
SiS_CheckRanks(SiS_Private *SiS_Pr, int RankNo,int index,USHORT DRAMTYPE_TABLE[][5],ULONG FBAddress)
d1598 5
a1602 1
  int r;
d1604 3
a1606 6
  for (r=RankNo;r>=1;r--) {
    if (!SiS_CheckRank(SiS_Pr, r, index, DRAMTYPE_TABLE, FBAddress))
      return 0;
  }
  if (!SiS_CheckBanks(SiS_Pr, index, DRAMTYPE_TABLE, FBAddress))
    return 0;
d1608 4
a1611 2
  if (!SiS_CheckColumn(SiS_Pr, index, DRAMTYPE_TABLE, FBAddress))
    return 0;
d1613 1
a1613 2
  return 1;
}
d1615 2
a1616 5
int
SiS_CheckDDRRanks(SiS_Private *SiS_Pr, int RankNo,int index,USHORT DRAMTYPE_TABLE[][5],
                  ULONG FBAddress)
{
  int r;
d1618 1
a1618 6
  for (r=RankNo;r>=1;r--) {
    if (!SiS_CheckDDRRank(SiS_Pr, r,index,DRAMTYPE_TABLE,FBAddress))
      return 0;
  }
  if (!SiS_CheckBanks(SiS_Pr, index,DRAMTYPE_TABLE,FBAddress))
    return 0;
d1620 1
a1620 2
  if (!SiS_CheckColumn(SiS_Pr, index,DRAMTYPE_TABLE,FBAddress))
    return 0;
d1622 1
a1622 2
  return 1;
}
d1624 22
a1645 16
int
SiS_SDRSizing(SiS_Private *SiS_Pr, ULONG FBAddress)
{
  int    i;
  UCHAR  j;

  for (i=0;i<13;i++) {
    SiS_SetDRAMSizingType(SiS_Pr, i, SiS_SDRDRAM_TYPE);
    for (j=2;j>0;j--) {
      if (!SiS_SetRank(SiS_Pr, i,(UCHAR) j, SiS_SDRDRAM_TYPE))
        continue;
      else {
        if (SiS_CheckRanks(SiS_Pr, j,i,SiS_SDRDRAM_TYPE, FBAddress))
          return 1;
      }
    }
a1646 1
  return 0;
d1649 7
a1655 2
int
SiS_DDRSizing(SiS_Private *SiS_Pr, ULONG FBAddress)
d1657 4
d1662 16
a1677 2
  int    i;
  UCHAR  j;
d1679 9
a1687 15
  for (i=0; i<4; i++){
    SiS_SetDRAMSizingType(SiS_Pr, i, SiS_DDRDRAM_TYPE);
    SiS_DisableChannelInterleaving(SiS_Pr, i, SiS_DDRDRAM_TYPE);
    for (j=2; j>0; j--) {
      SiS_SetDDRChannel(SiS_Pr, i, j, SiS_DDRDRAM_TYPE);
      if (!SiS_SetRank(SiS_Pr, i, (UCHAR) j, SiS_DDRDRAM_TYPE))
        continue;
      else {
        if (SiS_CheckDDRRanks(SiS_Pr, j, i, SiS_DDRDRAM_TYPE, FBAddress))
          return 1;
      }
    }
  }
  return 0;
}
d1689 8
a1696 35
/*
 check if read cache pointer is correct
*/
void
SiS_VerifyMclk(SiS_Private *SiS_Pr, ULONG FBAddr)
{
   PUCHAR  pVideoMemory = (PUCHAR) FBAddr;
   UCHAR   i, j;
   USHORT  Temp,SR21;

   pVideoMemory[0] = 0xaa;  /* alan */
   pVideoMemory[16] = 0x55; /* note: PCI read cache is off */

   if((pVideoMemory[0] != 0xaa) || (pVideoMemory[16] != 0x55)) {
     for (i=0,j=16; i<2; i++,j+=16)  {
       SR21 = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x21);
       Temp = SR21 & 0xFB;           /* disable PCI post write buffer empty gating */
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x21,Temp);

       Temp = SiS_GetReg1(SiS_Pr->SiS_P3c4, 0x3C);
       Temp |= 0x01;                 /* MCLK reset */
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x3C,Temp);
       Temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x3C);
       Temp &= 0xFE;                 /* MCLK normal operation */
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x3C,Temp);
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x21,SR21);

       pVideoMemory[16+j] = j;
       if(pVideoMemory[16+j] == j) {
         pVideoMemory[j] = j;
         break;
       }
     }
   }
}
d1698 6
a1703 5
/* TW: Is this a 315E? */
int
Is315E(SiS_Private *SiS_Pr)
{
   USHORT  data;
d1705 14
a1718 4
   data = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x5F);
   if(data & 0x10) return 1;
   else return 0;
}
d1720 13
a1732 7
/* TW: For 315 only */
void
SiS_SetDRAMSize_310(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
   UCHAR  *ROMAddr  = HwDeviceExtension->pjVirtualRomBase;
   ULONG   FBAddr   = (ULONG)HwDeviceExtension->pjVideoMemoryAddress;
   USHORT  data;
d1734 2
a1735 7
#ifdef SIS301	/* TW: SIS301 ??? */
   /*SiS_SetReg1(SiS_Pr->SiS_P3d4,0x30,0x40);   */
#endif
#ifdef SIS302   /* TW: SIS302 ??? */
   SiS_SetReg1(SiS_Pr->SiS_P3d4,0x30,0x4D);  /* alan,should change value */
   SiS_SetReg1(SiS_Pr->SiS_P3d4,0x31,0xc0);  /* alan,should change value */
   SiS_SetReg1(SiS_Pr->SiS_P3d4,0x34,0x3F);  /* alan,should change value */
d1738 3
a1740 1
   SiSSetMode(SiS_Pr, HwDeviceExtension, 0x2e);
d1742 7
a1748 2
   data = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x21);
   SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x21,0xDF);                 /* disable read cache */
d1750 9
a1758 1
   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x01,0x20);                  /* Turn OFF Display */
d1760 3
a1762 1
   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x16,0x0F);                  /* assume lowest speed DRAM */
d1764 2
a1765 3
   SiS_SetDRAMModeRegister(SiS_Pr, ROMAddr, HwDeviceExtension);
   SiS_DisableRefresh(SiS_Pr);
   SiS_CheckBusWidth_310(SiS_Pr, ROMAddr, FBAddr, HwDeviceExtension);
d1767 2
a1768 27
   SiS_VerifyMclk(SiS_Pr, FBAddr);

   if(HwDeviceExtension->jChipType == SIS_330) temp = 1;
   else temp = 2;

   if(SiS_Get310DRAMType(SiS_Pr, ROMAddr, HwDeviceExtension) < temp)
     SiS_SDRSizing(SiS_Pr, FBAddr);
   else
     SiS_DDRSizing(SiS_Pr, FBAddr);

   if(HwDeviceExtension->jChipType != SIS_330) {
     if(Is315E(SiS_Pr)) {
       data = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
       if((data & 0x0C) == 0x0C) { 	/* dual channel */
     	 if((data & 0xF0) > 0x40)
     	   data = (data & 0x0F) | 0x40;
       } else { 				/* single channel */
     	 if((data & 0xF0) > 0x50)
     	   data = (data & 0x0F) | 0x50;
       }
     }
   }

   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x16,SiS_Pr->SiS_SR15[1][SiS_Pr->SiS_RAMType]);  /* restore SR16 */

   SiS_EnableRefresh(SiS_Pr, ROMAddr);
   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x21,0x20);      	/* enable read cache */
d1772 3
a1774 21
void
SiS_SetMemoryClock(SiS_Private *SiS_Pr, UCHAR *ROMAddr,PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x28,SiS_Pr->SiS_MCLKData_0[SiS_Pr->SiS_RAMType].SR28);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x29,SiS_Pr->SiS_MCLKData_0[SiS_Pr->SiS_RAMType].SR29);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2A,SiS_Pr->SiS_MCLKData_0[SiS_Pr->SiS_RAMType].SR2A);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2E,SiS_Pr->SiS_ECLKData[SiS_Pr->SiS_RAMType].SR2E);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2F,SiS_Pr->SiS_ECLKData[SiS_Pr->SiS_RAMType].SR2F);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x30,SiS_Pr->SiS_ECLKData[SiS_Pr->SiS_RAMType].SR30);

#ifdef SIS315H
   if (Is315E(SiS_Pr)) {
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x28,0x3B); /* 143 */
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x29,0x22);
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2E,0x3B); /* 143 */
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2F,0x22);
   }
#endif
}

#endif /* ifdef LINUXBIOS */
d1777 2
a1778 2
UCHAR
SiS_Get310DRAMType(SiS_Private *SiS_Pr, UCHAR *ROMAddr,PSIS_HW_DEVICE_INFO HwDeviceExtension)
d1785 10
a1794 6
     if((HwDeviceExtension->jChipType > SIS_315PRO) &&
        (HwDeviceExtension->jChipType < SIS_330)) {
        data = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x13) & 0x07;
     } else {	/* TW: 315, 330 */
        data = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x3a) & 0x03;
        if(HwDeviceExtension->jChipType == SIS_330) {
d1796 1
a1796 1
	      temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x5f) & 0x30;
a1811 1
#endif
d1813 2
a1814 5
/* SiSInit END */

/* ----------------------------------------- */

void SiSRegInit(SiS_Private *SiS_Pr, USHORT BaseAddr)
d1816 1
a1816 18
   SiS_Pr->SiS_P3c4 = BaseAddr + 0x14;
   SiS_Pr->SiS_P3d4 = BaseAddr + 0x24;
   SiS_Pr->SiS_P3c0 = BaseAddr + 0x10;
   SiS_Pr->SiS_P3ce = BaseAddr + 0x1e;
   SiS_Pr->SiS_P3c2 = BaseAddr + 0x12;
   SiS_Pr->SiS_P3ca = BaseAddr + 0x1a;
   SiS_Pr->SiS_P3c6 = BaseAddr + 0x16;
   SiS_Pr->SiS_P3c7 = BaseAddr + 0x17;
   SiS_Pr->SiS_P3c8 = BaseAddr + 0x18;
   SiS_Pr->SiS_P3c9 = BaseAddr + 0x19;
   SiS_Pr->SiS_P3da = BaseAddr + 0x2A;
   SiS_Pr->SiS_Part1Port = BaseAddr + SIS_CRT2_PORT_04;   /* Digital video interface registers (LCD) */
   SiS_Pr->SiS_Part2Port = BaseAddr + SIS_CRT2_PORT_10;   /* 301 TV Encoder registers */
   SiS_Pr->SiS_Part3Port = BaseAddr + SIS_CRT2_PORT_12;   /* 301 Macrovision registers */
   SiS_Pr->SiS_Part4Port = BaseAddr + SIS_CRT2_PORT_14;   /* 301 VGA2 (and LCD) registers */
   SiS_Pr->SiS_Part5Port = BaseAddr + SIS_CRT2_PORT_14+2; /* 301 palette address port registers */
   SiS_Pr->SiS_DDC_Port = BaseAddr + 0x14;                /* DDC Port ( = P3C4, SR11/0A) */
}
d1818 9
a1826 28
void
SiSInitPCIetc(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
/* #ifdef LINUX_XF86 */
   if ((HwDeviceExtension->jChipType == SIS_540)||
       (HwDeviceExtension->jChipType == SIS_630)||
       (HwDeviceExtension->jChipType == SIS_730)||
       (HwDeviceExtension->jChipType == SIS_300)) {
       /* TW: Set - PCI LINEAR ADDRESSING ENABLE (0x80)
		  - PCI IO ENABLE  (0x20)
		  - MMIO ENABLE (0x1)
  	*/
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x20,0xa1);
       /* TW: Enable 2D (0x42) & 3D accelerator (0x18) */
       SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x1E,0xFF,0x5A);
   }
   if((HwDeviceExtension->jChipType == SIS_315H)||
      (HwDeviceExtension->jChipType == SIS_315) ||
      (HwDeviceExtension->jChipType == SIS_315PRO)||
      (HwDeviceExtension->jChipType == SIS_550) ||
      (HwDeviceExtension->jChipType == SIS_650) ||
      (HwDeviceExtension->jChipType == SIS_740) ||
      (HwDeviceExtension->jChipType == SIS_330)) {
      /* TW: This seems to be done the same way on these chipsets */
      SiS_SetReg1(SiS_Pr->SiS_P3c4,0x20,0xa1);
      SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x1E,0xFF,0x5A);
   }
/* #endif */
a1827 38

void
SiSSetLVDSetc(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT ModeNo)
{
   ULONG   temp;

   SiS_Pr->SiS_IF_DEF_LVDS = 0;
   SiS_Pr->SiS_IF_DEF_TRUMPION = 0;
   SiS_Pr->SiS_IF_DEF_CH70xx = 0;
   SiS_Pr->SiS_IF_DEF_HiVision = 0;
   SiS_Pr->SiS_IF_DEF_DSTN = 0;
   SiS_Pr->SiS_IF_DEF_FSTN = 0;

   SiS_Pr->SiS_ChrontelInit = 0;

   if((ModeNo == 0x5a) || (ModeNo == 0x5b)) {
   	SiS_Pr->SiS_IF_DEF_DSTN = 1;   /* for 550 dstn */
   	SiS_Pr->SiS_IF_DEF_FSTN = 1;   /* for fstn */
   }

#ifdef SIS300
   if((HwDeviceExtension->jChipType == SIS_540) ||
      (HwDeviceExtension->jChipType == SIS_630) ||
      (HwDeviceExtension->jChipType == SIS_730))
    {
        /* TW: Check for SiS30x first */
        temp = SiS_GetReg1(SiS_Pr->SiS_Part4Port,0x00);
	if((temp == 1) || (temp == 2)) return;
      	temp = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x37);
      	temp = (temp & 0x0E) >> 1;
      	if((temp >= 2) && (temp <= 5)) SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)   SiS_Pr->SiS_IF_DEF_TRUMPION = 1;
      	if((temp == 4) || (temp == 5)) {
		/* TW: Save power status (and error check) - UNUSED */
		SiS_Pr->SiS_Backup70xx = SiS_GetCH700x(SiS_Pr, 0x0e);
		SiS_Pr->SiS_IF_DEF_CH70xx = 1;
        }
   }
a1828 9
#ifdef SIS315H
   if((HwDeviceExtension->jChipType == SIS_550) ||
      (HwDeviceExtension->jChipType == SIS_650) ||
      (HwDeviceExtension->jChipType == SIS_740) ||
      (HwDeviceExtension->jChipType == SIS_330))
    {
        /* TW: CR37 is different on 310/325 series */
        if(SiS_Pr->SiS_IF_DEF_FSTN)                       /* fstn: set CR37=0x04 */
             SiS_SetReg1(SiS_Pr->SiS_P3d4,0x37,0x04);      /* (fake LVDS bridge) */
d1830 3
a1832 12
	temp=SiS_GetReg1(SiS_Pr->SiS_P3d4,0x37);
      	temp = (temp & 0x0E) >> 1;
      	if((temp >= 2) && (temp <= 3)) SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)  {
			SiS_Pr->SiS_IF_DEF_CH70xx = 2;
        }
	
	/* HiVision (HDTV) is done differently now. */
	/* SiS_Pr->SiS_IF_DEF_HiVision = 1; */
    }
#endif
}
d1834 3
a1836 2
void
SiSInitPtr(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
d1838 4
a1841 10
#ifdef SIS315H
   if((HwDeviceExtension->jChipType == SIS_315H) ||
      (HwDeviceExtension->jChipType == SIS_315) ||
      (HwDeviceExtension->jChipType == SIS_315PRO) ||
      (HwDeviceExtension->jChipType == SIS_550) ||
      (HwDeviceExtension->jChipType == SIS_650) ||
      (HwDeviceExtension->jChipType == SIS_740) ||
      (HwDeviceExtension->jChipType == SIS_330))
     InitTo310Pointer(SiS_Pr, HwDeviceExtension);
#endif
d1843 14
a1856 31
#ifdef SIS300
   if ((HwDeviceExtension->jChipType == SIS_540) ||
       (HwDeviceExtension->jChipType == SIS_630) ||
       (HwDeviceExtension->jChipType == SIS_730) ||
       (HwDeviceExtension->jChipType == SIS_300))
     InitTo300Pointer(SiS_Pr, HwDeviceExtension);
#endif
}

void
SiSDetermineROMUsage(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, UCHAR *ROMAddr)
{
   if((ROMAddr) && (HwDeviceExtension->UseROM)) {
     if((ROMAddr[0x00] != 0x55) || (ROMAddr[0x01] != 0xAA)) {
        SiS_Pr->SiS_UseROM = FALSE;
     } else if(HwDeviceExtension->jChipType == SIS_300) {
        /* TW: 300: We check if the code starts below 0x220 by
	 *     checking the jmp instruction at the beginning
	 *     of the BIOS image.
	 */
	 if((ROMAddr[3] == 0xe9) &&
	    ((ROMAddr[5] << 8) | ROMAddr[4]) > 0x21a)
	      SiS_Pr->SiS_UseROM = TRUE;
	 else SiS_Pr->SiS_UseROM = FALSE;
     } else if(HwDeviceExtension->jChipType < SIS_315H) {
        /* TW: Rest of 300 series: We don't use the ROM image if
	 *     the BIOS version < 2.0.0 as such old BIOSes don't
	 *     have the needed data at the expected locations.
	 */
        if(ROMAddr[0x06] < '2')  SiS_Pr->SiS_UseROM = FALSE;
	else                     SiS_Pr->SiS_UseROM = TRUE;
d1858 1
a1858 2
        /* TW: 310/325/330 series stick to the standard */
	SiS_Pr->SiS_UseROM = TRUE;
d1860 3
a1862 1
   } else SiS_Pr->SiS_UseROM = FALSE;
d1864 3
a1866 1
}
a1867 7
/*
 	=========================================
 	======== SiS SetMode Functions ==========
 	=========================================
*/
#ifdef LINUX_XF86
/* TW: This is used for non-Dual-Head mode from X */
d1869 1
a1869 2
SiSBIOSSetMode(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, ScrnInfoPtr pScrn,
               DisplayModePtr mode, BOOLEAN IsCustom)
d1871 1
a1871 4
   SISPtr  pSiS = SISPTR(pScrn);
   UShort  ModeNo=0;
   
   SiS_Pr->UseCustomMode = FALSE;
d1873 1
a1873 11
   if((IsCustom) && (SiS_CheckBuildCustomMode(pScrn, mode, pSiS->VBFlags))) {
   
         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3, "Setting custom mode %dx%d\n", 
	 	SiS_Pr->CHDisplay, SiS_Pr->CVDisplay);
		
	 return(SiSSetMode(SiS_Pr, HwDeviceExtension, pScrn, ModeNo, TRUE));
   
   }
   
   ModeNo = SiS_CalcModeIndex(pScrn, mode);
   if(!ModeNo) return FALSE;
d1875 1
a1875 1
   xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3, "Setting mode 0x%x\n", ModeNo);
d1877 4
a1880 2
   return(SiSSetMode(SiS_Pr, HwDeviceExtension, pScrn, ModeNo, TRUE));   
}
d1882 10
a1891 14
#ifdef SISDUALHEAD
/* TW: Set CRT1 mode (used for dual head) */
BOOLEAN
SiSBIOSSetModeCRT1(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, ScrnInfoPtr pScrn,
               DisplayModePtr mode, BOOLEAN IsCustom)
{
   ULONG   temp;
   USHORT  ModeIdIndex;
   UCHAR  *ROMAddr  = HwDeviceExtension->pjVirtualRomBase;
   USHORT  BaseAddr = (USHORT)HwDeviceExtension->ulIOAddress;
   SISPtr  pSiS = SISPTR(pScrn);
   SISEntPtr pSiSEnt = pSiS->entityPrivate;
   unsigned char backupreg=0;
   BOOLEAN backupcustom;
a1892 11
   UShort  ModeNo=0;
   
   SiS_Pr->UseCustomMode = FALSE;
   
   if((IsCustom) && (SiS_CheckBuildCustomMode(pScrn, mode, pSiS->VBFlags))) {
   
         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
	 	"Setting custom mode %dx%d in CRT1\n", 
	 	SiS_Pr->CHDisplay, SiS_Pr->CVDisplay);
	 ModeNo = 0xfe;
	 
d1895 4
a1898 2
         ModeNo = SiS_CalcModeIndex(pScrn, mode);
         if(!ModeNo) return FALSE;
a1899 2
         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
	 	"Setting mode 0x%x on CRT1\n", ModeNo);
d1901 2
d1904 3
a1906 1
   SiSInitPtr(SiS_Pr, HwDeviceExtension);
d1908 4
a1911 1
   SiSRegInit(SiS_Pr, BaseAddr);
d1913 8
a1920 1
   SiS_Pr->SiS_VGAINFO = SiS_GetSetBIOSScratch(pScrn, 0x489, 0xff);
d1922 30
a1951 1
   SiSInitPCIetc(SiS_Pr, HwDeviceExtension);
d1953 7
a1959 1
   SiSSetLVDSetc(SiS_Pr, HwDeviceExtension, ModeNo);
d1961 3
a1963 20
   SiSDetermineROMUsage(SiS_Pr, HwDeviceExtension, ROMAddr);

   /* TW: We don't clear the buffer under X */
   SiS_Pr->SiS_flag_clearbuffer = 0;

   /* 1.Openkey */
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x05,0x86);

   SiS_UnLockCRT2(SiS_Pr, HwDeviceExtension, BaseAddr);

   if(!SiS_Pr->UseCustomMode) {
      /* 2.Get ModeID Table  */
      temp = SiS_SearchModeID(SiS_Pr, ROMAddr,&ModeNo,&ModeIdIndex);
      if(temp == 0)  return(0);
   } else {
      ModeIdIndex = 0;
   }

   /* TW: Determine VBType (301,301B,301LV,302B,302LV) */
   SiS_GetVBType(SiS_Pr, BaseAddr,HwDeviceExtension);
d1965 3
d1969 11
a1979 4
      if(HwDeviceExtension->jChipType >= SIS_315H) {
         backupreg = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
      } else {
         backupreg = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x35);
d1982 1
d1984 39
a2022 1
   SiS_SetHiVision(SiS_Pr, BaseAddr,HwDeviceExtension);
d2024 9
a2032 4
   /* TW: Get VB information (connectors, connected devices) */
   /* (We don't care if the current mode is a CRT2 mode) */
   SiS_GetVBInfo(SiS_Pr, BaseAddr,ROMAddr,ModeNo,ModeIdIndex,HwDeviceExtension,0);
   SiS_GetLCDResInfo(SiS_Pr, ROMAddr,ModeNo,ModeIdIndex,HwDeviceExtension);
d2034 7
a2040 5
   if(HwDeviceExtension->jChipType >= SIS_315H) {
      if(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x17) & 0x08)  {
          /* TW: I am not sure the flag's name is correct */
          if(ModeNo != 0x10)  SiS_Pr->SiS_SetFlag |= CRT2IsVGA;
      }
d2042 1
a2042 8
      /* TW: New from 650/LV 1.10.6x */
      if(IS_SIS650740) {
          if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	      SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	      SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
	  }
      }
   }
d2044 7
a2050 2
   /* TW: Set mode on CRT1 */
   SiS_SetCRT1Group(SiS_Pr, ROMAddr,HwDeviceExtension,ModeNo,ModeIdIndex,BaseAddr);
d2052 2
a2053 2
   pSiSEnt->CRT1ModeNo = ModeNo;
   pSiSEnt->CRT1DMode = mode;
d2055 3
a2057 2
   /* TW: SetPitch: Adapt to virtual size & position */
   SiS_SetPitchCRT1(SiS_Pr, pScrn, BaseAddr);
d2059 5
a2063 16
   /* We have to reset CRT2 if changing mode on CRT1 */
   if(pSiSEnt->CRT2ModeNo != -1) {
        xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
				"(Re-)Setting mode 0x%x on CRT2\n",
				pSiSEnt->CRT2ModeNo);
	backupcustom = SiS_Pr->UseCustomMode;
	if(SiS_Pr->UseCustomMode) {
	   SiS_Pr->CRT1UsesCustomMode = TRUE;
	} else {
	   SiS_Pr->CRT1UsesCustomMode = FALSE;
	}
	SiSBIOSSetModeCRT2(SiS_Pr, HwDeviceExtension, pSiSEnt->pScrn_1,
				pSiSEnt->CRT2DMode);
	SiS_Pr->UseCustomMode = backupcustom;
	SiS_Pr->CRT1UsesCustomMode = FALSE;
   }
d2065 1
a2065 3
   if(IS_SIS650740) {    /* TW: *** For 650 only! *** */
      SiS_HandleCRT1(SiS_Pr);
   }
d2067 1
a2067 2
   SiS_DisplayOn(SiS_Pr);
   SiS_SetReg3(SiS_Pr->SiS_P3c6,0xFF);
a2068 1
   /* TW: New from 650/LV 1.10.6x and 1.10.7w, 630/301B 2.06.50 */
d2070 15
a2084 5
      if(HwDeviceExtension->jChipType >= SIS_315H) {
	 SiS_SetReg1(SiS_Pr->SiS_P3d4,0x38,backupreg);
      } else if((HwDeviceExtension->jChipType == SIS_630) ||
                (HwDeviceExtension->jChipType == SIS_730)) {
         SiS_SetReg1(SiS_Pr->SiS_P3d4,0x35,backupreg);
d2088 14
a2101 2
   /* Backup/Set ModeNo in BIOS scratch area */
   SiS_GetSetModeID(pScrn,ModeNo);
d2103 1
a2103 2
   return TRUE;
}
d2105 1
a2105 18
/* TW: Set CRT2 mode (used for dual head) */
BOOLEAN
SiSBIOSSetModeCRT2(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension, ScrnInfoPtr pScrn,
               DisplayModePtr mode)
{
   ULONG   temp;
   USHORT  ModeIdIndex;
   UCHAR  *ROMAddr  = HwDeviceExtension->pjVirtualRomBase;
   USHORT  BaseAddr = (USHORT)HwDeviceExtension->ulIOAddress;
   UShort  ModeNo   = 0;
   SISPtr  pSiS     = SISPTR(pScrn);
   SISEntPtr pSiSEnt = pSiS->entityPrivate;
   unsigned char tempr1, tempr2, backupreg=0;
   
   SiS_Pr->UseCustomMode = FALSE;
   
   ModeNo = SiS_CalcModeIndex(pScrn, mode);
   if(!ModeNo) return FALSE;
d2107 5
a2111 1
   SiSInitPtr(SiS_Pr, HwDeviceExtension);
d2113 3
a2115 1
   SiSRegInit(SiS_Pr, BaseAddr);
d2117 4
a2120 1
   SiS_Pr->SiS_VGAINFO = SiS_GetSetBIOSScratch(pScrn, 0x489, 0xff);
d2122 1
a2122 1
   SiSInitPCIetc(SiS_Pr, HwDeviceExtension);
d2124 6
a2129 16
   SiSSetLVDSetc(SiS_Pr, HwDeviceExtension, ModeNo);

   SiSDetermineROMUsage(SiS_Pr, HwDeviceExtension, ROMAddr);

   /* TW: We don't clear the buffer under X */
   SiS_Pr->SiS_flag_clearbuffer=0;

   /* TW: Save ModeNo so we can set it from within SetMode for CRT1 */
   pSiSEnt->CRT2ModeNo = ModeNo;
   pSiSEnt->CRT2DMode = mode;

   /* TW: We can't set CRT2 mode before CRT1 mode is set */
   if(pSiSEnt->CRT1ModeNo == -1) {
   	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
		"Setting CRT2 mode delayed until after setting CRT1 mode\n");
   	return TRUE;
d2132 2
a2133 2
   xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
   		"Setting mode 0x%x on CRT2\n", ModeNo);
d2135 3
a2137 2
   /* 1.Openkey */
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x05,0x86);
d2139 6
a2144 1
   SiS_UnLockCRT2(SiS_Pr, HwDeviceExtension, BaseAddr);
d2146 1
a2146 3
   /* 2.Get ModeID */
   temp = SiS_SearchModeID(SiS_Pr, ROMAddr,&ModeNo,&ModeIdIndex);
   if(temp == 0)  return(0);
d2148 20
a2167 2
   /* TW: Determine VBType (301,301B,301LV,302B,302LV) */
   SiS_GetVBType(SiS_Pr, BaseAddr,HwDeviceExtension);
d2169 3
a2171 11
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwDeviceExtension->jChipType >= SIS_315H) {
         SiS_UnLockCRT2(SiS_Pr,HwDeviceExtension,BaseAddr);
	 if(HwDeviceExtension->jChipType < SIS_330) {
           if(ROMAddr && SiS_Pr->SiS_UseROM) {
             temp = ROMAddr[VB310Data_1_2_Offset];
	     temp |= 0x40;
             SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x02,temp);
           }
	 }
	 SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x32,0x10);
d2173 6
a2178 1
	 SiS_SetRegOR(SiS_Pr->SiS_Part2Port,0x02,0x0c);
d2180 41
a2220 3
         backupreg = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
      } else {
         backupreg = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x35);
d2222 16
a2237 1
   }
d2239 5
a2243 4
   /* TW: Get VB information (connectors, connected devices) */
   SiS_SetHiVision(SiS_Pr, BaseAddr,HwDeviceExtension);
   SiS_GetVBInfo(SiS_Pr, BaseAddr,ROMAddr,ModeNo,ModeIdIndex,HwDeviceExtension,1);
   SiS_GetLCDResInfo(SiS_Pr, ROMAddr,ModeNo,ModeIdIndex,HwDeviceExtension);
d2245 3
a2247 5
   if(HwDeviceExtension->jChipType >= SIS_315H) {
      if(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x17) & 0x08)  {
          /* TW: I am not sure the flag's name is correct */
          if(ModeNo != 0x10)  SiS_Pr->SiS_SetFlag |= CRT2IsVGA;
      }
d2250 3
a2252 21
   /* Set mode on CRT2 */
   switch (HwDeviceExtension->ujVBChipID) {
     case VB_CHIP_301:
     case VB_CHIP_301B:
     case VB_CHIP_301LV:
     case VB_CHIP_301LVX:
     case VB_CHIP_302:
     case VB_CHIP_302B:
     case VB_CHIP_302LV:
     case VB_CHIP_302LVX:
        SiS_SetCRT2Group301(SiS_Pr, BaseAddr,ROMAddr,ModeNo,HwDeviceExtension);
        break;
     case VB_CHIP_303:
        break;
     case VB_CHIP_UNKNOWN:
        if (SiS_Pr->SiS_IF_DEF_LVDS     == 1 ||
	    SiS_Pr->SiS_IF_DEF_CH70xx   != 0 ||
	    SiS_Pr->SiS_IF_DEF_TRUMPION != 0) {
             	SiS_SetCRT2Group301(SiS_Pr,BaseAddr,ROMAddr,ModeNo,HwDeviceExtension);
  	}
        break;
d2254 1
d2256 3
a2258 2
   SiS_DisplayOn(SiS_Pr);
   SiS_SetReg3(SiS_Pr->SiS_P3c6,0xFF);
d2260 4
a2263 7
   if(HwDeviceExtension->jChipType >= SIS_315H) {
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
         if(!(SiS_IsDualEdge(SiS_Pr, HwDeviceExtension, BaseAddr))) {
	     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	 }
      }
   }
d2265 3
a2267 8
   /* TW: New from 650/LV 1.10.6x and 1.10.7w, 630 2.06.50 */
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwDeviceExtension->jChipType >= SIS_315H) {
	 if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
	     SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x35,0x01);
	 } else {
	     SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x35,0xFE);
	 }
d2269 9
a2277 1
	 SiS_SetReg1(SiS_Pr->SiS_P3d4,0x38,backupreg);
d2279 3
a2281 5
	 tempr1 = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
	 tempr2 = SiS_GetReg1(SiS_Pr->SiS_Part2Port,0x00);
	 if(tempr1 & SetCRT2ToAVIDEO) tempr2 &= 0xF7;
	 if(tempr1 & SetCRT2ToSVIDEO) tempr2 &= 0xFB;
	 SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x00,tempr2);
d2283 11
a2293 6
	 if(tempr1 & SetCRT2ToLCD) {
	       SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0xfc);
	 }
      } else if((HwDeviceExtension->jChipType == SIS_630) ||
                (HwDeviceExtension->jChipType == SIS_730)) {
         SiS_SetReg1(SiS_Pr->SiS_P3d4,0x35,backupreg);
d2297 17
a2313 2
   /* TW: SetPitch: Adapt to virtual size & position */
   SiS_SetPitchCRT2(SiS_Pr, pScrn, BaseAddr);
d2315 3
a2317 4
   return TRUE;
}
#endif /* Dualhead */
#endif /* Linux_XF86 */
d2319 2
a2320 8
#ifdef LINUX_XF86
/* TW: We need pScrn for setting the pitch correctly */
BOOLEAN
SiSSetMode(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,ScrnInfoPtr pScrn,USHORT ModeNo, BOOLEAN dosetpitch)
#else
BOOLEAN
SiSSetMode(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT ModeNo)
#endif
d2322 12
a2333 5
   ULONG   temp;
   USHORT  ModeIdIndex,KeepLockReg;
   UCHAR  *ROMAddr  = HwDeviceExtension->pjVirtualRomBase;
   USHORT  BaseAddr = (USHORT)HwDeviceExtension->ulIOAddress;
   unsigned char backupreg=0, tempr1, tempr2;
d2335 3
a2337 10
#ifndef LINUX_XF86
   SiS_Pr->UseCustomMode = FALSE;
   SiS_Pr->CRT1UsesCustomMode = FALSE;
#endif
   
   if(SiS_Pr->UseCustomMode) {
      ModeNo = 0xfe;
   }      
   
   SiSInitPtr(SiS_Pr, HwDeviceExtension);
d2339 7
a2345 1
   SiSRegInit(SiS_Pr, BaseAddr);
d2347 1
a2347 5
#ifdef LINUX_XF86
   if(pScrn) SiS_Pr->SiS_VGAINFO = SiS_GetSetBIOSScratch(pScrn, 0x489, 0xff);
   else
#endif
         SiS_Pr->SiS_VGAINFO = 0x11;
d2349 1
a2349 1
   SiSInitPCIetc(SiS_Pr, HwDeviceExtension);
d2351 1
a2351 1
   SiSSetLVDSetc(SiS_Pr, HwDeviceExtension, ModeNo);
d2353 12
a2364 1
   SiSDetermineROMUsage(SiS_Pr, HwDeviceExtension, ROMAddr);
d2366 2
a2367 4
   if(!SiS_Pr->UseCustomMode) {
      /* TW: Shift the clear-buffer-bit away */
      ModeNo = ((ModeNo & 0x80) << 8) | (ModeNo & 0x7f);
   }      
d2369 3
a2371 4
#ifdef LINUX_XF86
   /* TW: We never clear the buffer in X */
   ModeNo |= 0x8000;
#endif
d2373 1
a2373 6
   if(ModeNo & 0x8000) {
     	ModeNo &= 0x7fff;
     	SiS_Pr->SiS_flag_clearbuffer = 0;
   } else {
     	SiS_Pr->SiS_flag_clearbuffer = 1;
   }
d2375 5
a2379 3
   /* 1.Openkey */
   KeepLockReg = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x05);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x05,0x86);
d2381 1
a2381 1
   SiS_UnLockCRT2(SiS_Pr, HwDeviceExtension, BaseAddr);
d2383 12
a2394 14
   if(!SiS_Pr->UseCustomMode) {
   
      /* 2.Get ModeID Table  */
      temp = SiS_SearchModeID(SiS_Pr,ROMAddr,&ModeNo,&ModeIdIndex);
      if(temp == 0) return(0);
      
   } else {
   
      ModeIdIndex = 0;
      
   }
    
   /* TW: Determine VBType (301,301B,301LV,302B,302LV) */
   SiS_GetVBType(SiS_Pr,BaseAddr,HwDeviceExtension);
d2396 2
a2397 12
   /* TW: Init/restore some VB registers */
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
       if(HwDeviceExtension->jChipType >= SIS_315H) {
         SiS_UnLockCRT2(SiS_Pr,HwDeviceExtension,BaseAddr);
	 if(HwDeviceExtension->jChipType < SIS_330) {
           if(ROMAddr && SiS_Pr->SiS_UseROM) {
             temp = ROMAddr[VB310Data_1_2_Offset];
	     temp |= 0x40;
             SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x02,temp);
           }
	 }
	 SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x32,0x10);
d2399 3
a2401 1
	 SiS_SetRegOR(SiS_Pr->SiS_Part2Port,0x02,0x0c);
d2403 1
a2403 10
         backupreg = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x38);
       } else {
         backupreg = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x35);
       }
   }
   
   /* TW: Get VB information (connectors, connected devices) */
   SiS_SetHiVision(SiS_Pr,BaseAddr,HwDeviceExtension);
   SiS_GetVBInfo(SiS_Pr,BaseAddr,ROMAddr,ModeNo,ModeIdIndex,HwDeviceExtension,1);
   SiS_GetLCDResInfo(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,HwDeviceExtension);
d2405 2
a2406 3
   /* 3. Check memory size */
   temp = SiS_CheckMemorySize(SiS_Pr,ROMAddr,HwDeviceExtension,ModeNo,ModeIdIndex);
   if(!temp) return(0);
d2408 5
a2412 5
   if(HwDeviceExtension->jChipType >= SIS_315H) {
      if(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x17) & 0x08)  {
          /* TW: I am not sure the flag's name is correct */
          if(ModeNo != 0x10)  SiS_Pr->SiS_SetFlag |= CRT2IsVGA;
      }
d2414 6
a2419 8
      /* TW: New from 650/LV 1.10.6x */
      if(IS_SIS650740) {
          if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
	      SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	      SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
	  }
      }
   }
d2421 2
a2422 3
   /* TW: Set mode on CRT1 */
   if(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SetCRT2ToLCDA)) {
   	SiS_SetCRT1Group(SiS_Pr,ROMAddr,HwDeviceExtension,ModeNo,ModeIdIndex,BaseAddr);
d2424 1
a2424 3
     if(!(SiS_Pr->SiS_VBInfo & SwitchToCRT2)) {
       	SiS_SetCRT1Group(SiS_Pr,ROMAddr,HwDeviceExtension,ModeNo,ModeIdIndex,BaseAddr);
     }
d2427 2
a2428 23
   /* TW: Set mode on CRT2 */
   if(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SwitchToCRT2 | SetCRT2ToLCDA)) {
     switch (HwDeviceExtension->ujVBChipID) {
     case VB_CHIP_301:
     case VB_CHIP_301B:
     case VB_CHIP_301LV:
     case VB_CHIP_301LVX:
     case VB_CHIP_302:
     case VB_CHIP_302B:
     case VB_CHIP_302LV:
     case VB_CHIP_302LVX:
        SiS_SetCRT2Group301(SiS_Pr,BaseAddr,ROMAddr,ModeNo,HwDeviceExtension);
        break;
     case VB_CHIP_303:
        break;
     case VB_CHIP_UNKNOWN:
	if(SiS_Pr->SiS_IF_DEF_LVDS     == 1 ||
	   SiS_Pr->SiS_IF_DEF_CH70xx   != 0 ||
	   SiS_Pr->SiS_IF_DEF_TRUMPION != 0)
             	SiS_SetCRT2Group301(SiS_Pr,BaseAddr,ROMAddr,ModeNo,HwDeviceExtension);
        break;
     }
   }
d2430 2
a2431 3
   if(IS_SIS650740) {  /* TW: For 650 only! */
      SiS_HandleCRT1(SiS_Pr);
   }
d2433 2
a2434 2
   SiS_DisplayOn(SiS_Pr);
   SiS_SetReg3(SiS_Pr->SiS_P3c6,0xFF);
d2436 1
a2436 14
   if(HwDeviceExtension->jChipType >= SIS_315H) {
#if 0
      if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
         if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1400x1050) {
             SiS_Handle301B_1400x1050(SiS_Pr, ModeNo);
	 }
      }
#endif
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
         if(!(SiS_IsDualEdge(SiS_Pr, HwDeviceExtension, BaseAddr))) {
	     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	 }
      }
   }
d2438 5
a2442 53
   /* TW: New from 650/LV 1.10.6x and 1.10.7w */
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwDeviceExtension->jChipType >= SIS_315H) {
	 if(SiS_IsVAMode(SiS_Pr,HwDeviceExtension, BaseAddr)) {
	     SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x35,0x01);
	 } else {
	     SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x35,0xFE);
	 }

	 SiS_SetReg1(SiS_Pr->SiS_P3d4,0x38,backupreg);

	 tempr1 = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30);
	 tempr2 = SiS_GetReg1(SiS_Pr->SiS_Part2Port,0x00);
	 if(tempr1 & SetCRT2ToAVIDEO) tempr2 &= 0xF7;
	 if(tempr1 & SetCRT2ToSVIDEO) tempr2 &= 0xFB;
	 SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x00,tempr2);

	 if((IS_SIS650740) && (SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30) & 0xfc)) {
	     if((ModeNo == 0x03) || (ModeNo == 0x10)) {
	         SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x51,0x80);
	         SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x56,0x08);
             }
	 }

	 if(tempr1 & SetCRT2ToLCD) {
/*	    if(ModeNo <= 0x13) {    - not in 1.10.8r */
	       SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0xfc);
/*	    }   		    */
	 }
      } else if((HwDeviceExtension->jChipType == SIS_630) ||
                (HwDeviceExtension->jChipType == SIS_730)) {
         SiS_SetReg1(SiS_Pr->SiS_P3d4,0x35,backupreg);
      }
   }

#ifdef LINUX_XF86
   if(pScrn) {
      /* TW: SetPitch: Adapt to virtual size & position */
      if((ModeNo > 0x13) && (dosetpitch)) {
         SiS_SetPitch(SiS_Pr, pScrn, BaseAddr);
      }

      /* Backup/Set ModeNo in BIOS scratch area */
      SiS_GetSetModeID(pScrn, ModeNo);
   }
#endif

#ifndef LINUX_XF86  /* TW: We never lock registers in XF86 */
   if(KeepLockReg == 0xA1) SiS_SetReg1(SiS_Pr->SiS_P3c4,0x05,0x86);
   else SiS_SetReg1(SiS_Pr->SiS_P3c4,0x05,0x00);
#endif

   return TRUE;
d2445 3
a2447 6
void
SiS_SetEnableDstn(SiS_Private *SiS_Pr)	/* TW: Called from sis_main.c */
{
   /* For 550 dstn */
   SiS_Pr->SiS_IF_DEF_DSTN = 1;
}
d2449 3
a2451 2
void
SiS_HandleCRT1(SiS_Private *SiS_Pr)
d2453 1
a2453 1
  /* TW: Do this on 650 only! */
d2455 11
a2465 23
  /* TW: No, we don't do this at all. There is a new
   * CRT1-is-connected-at-boot-time logic in the 650, which
   * confuses our own. So just clear the bit and skip the rest.
   */

  SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x63,0xbf);

#if 0
  if(!(SiS_GetReg1(SiS_Pr->SiS_P3c4,0x15) & 0x01))
     SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x63,0x40);
  }
#endif
}

#if 0
void
SiS_Handle301B_1400x1050(SiS_Private *SiS_Pr, USHORT ModeNo)
{
  if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x30) & SetCRT2ToLCD) {
     if(ModeNo <= 0x13) {
        if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x31) & (SetNotSimuMode >> 8)) {
	   SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0xFC);
	}
a2467 2
}
#endif
d2469 4
a2472 12
void
SiS_SetCRT1Group(SiS_Private *SiS_Pr, UCHAR *ROMAddr,PSIS_HW_DEVICE_INFO HwDeviceExtension,
                 USHORT ModeNo,USHORT ModeIdIndex,USHORT BaseAddr)
{
  USHORT  StandTableIndex,RefreshRateTableIndex;

  SiS_Pr->SiS_CRT1Mode = ModeNo;
  StandTableIndex = SiS_GetModePtr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex);
  if(SiS_LowModeStuff(SiS_Pr,ModeNo,HwDeviceExtension)) {
    if(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SwitchToCRT2)) {
       SiS_DisableBridge(SiS_Pr,HwDeviceExtension,BaseAddr);
    }
d2475 2
a2476 7
  SiS_SetSeqRegs(SiS_Pr,ROMAddr,StandTableIndex);
  SiS_SetMiscRegs(SiS_Pr,ROMAddr,StandTableIndex);
  SiS_SetCRTCRegs(SiS_Pr,ROMAddr,HwDeviceExtension,StandTableIndex);
  SiS_SetATTRegs(SiS_Pr,ROMAddr,StandTableIndex,HwDeviceExtension);
  SiS_SetGRCRegs(SiS_Pr,ROMAddr,StandTableIndex);
  SiS_ClearExt1Regs(SiS_Pr,HwDeviceExtension);
  SiS_ResetCRT1VCLK(SiS_Pr,ROMAddr,HwDeviceExtension);
d2478 4
a2481 22
  SiS_Pr->SiS_SelectCRT2Rate = 0;
  SiS_Pr->SiS_SetFlag &= (~ProgrammingCRT2);

#ifdef LINUX_XF86
  xf86DrvMsgVerb(0, X_PROBED, 3, "(init: VBType=0x%04x, VBInfo=0x%04x)\n",
                    SiS_Pr->SiS_VBType, SiS_Pr->SiS_VBInfo);
#endif

  if(SiS_Pr->SiS_VBInfo & SetSimuScanMode) {
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
     }
  }

  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
  }

  RefreshRateTableIndex = SiS_GetRatePtrCRT2(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,HwDeviceExtension);

  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
	SiS_Pr->SiS_SetFlag &= ~ProgrammingCRT2;
d2483 1
d2485 3
a2487 6
  if(RefreshRateTableIndex != 0xFFFF) {
    	SiS_SetSync(SiS_Pr,ROMAddr,RefreshRateTableIndex);
    	SiS_SetCRT1CRTC(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,HwDeviceExtension);
    	SiS_SetCRT1Offset(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,RefreshRateTableIndex,HwDeviceExtension);
    	SiS_SetCRT1VCLK(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,HwDeviceExtension,RefreshRateTableIndex);
  }
d2490 6
a2495 14
  if(HwDeviceExtension->jChipType == SIS_300) {
     	SiS_SetCRT1FIFO_300(SiS_Pr,ROMAddr,ModeNo,HwDeviceExtension,RefreshRateTableIndex);
  }
  if((HwDeviceExtension->jChipType == SIS_630) ||
     (HwDeviceExtension->jChipType == SIS_730) ||
     (HwDeviceExtension->jChipType == SIS_540)) {
     	SiS_SetCRT1FIFO_630(SiS_Pr,ROMAddr,ModeNo,HwDeviceExtension,RefreshRateTableIndex);
  }
#endif
#ifdef SIS315H
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     	SiS_SetCRT1FIFO_310(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,HwDeviceExtension);
  }
#endif
d2497 3
a2499 1
  SiS_SetCRT1ModeRegs(SiS_Pr,ROMAddr,HwDeviceExtension,ModeNo,ModeIdIndex,RefreshRateTableIndex);
d2501 1
a2501 1
  SiS_LoadDAC(SiS_Pr,HwDeviceExtension,ROMAddr,ModeNo,ModeIdIndex);
d2503 2
a2504 5
#ifndef LINUX_XF86
  if(SiS_Pr->SiS_flag_clearbuffer) {
        SiS_ClearBuffer(SiS_Pr,HwDeviceExtension,ModeNo);
  }
#endif
d2506 23
a2528 3
  if(!(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SwitchToCRT2 | SetCRT2ToLCDA))) {
        SiS_LongWait(SiS_Pr);
        SiS_DisplayOn(SiS_Pr);
d2530 5
d2537 2
a2538 3
#ifdef LINUX_XF86
void
SiS_SetPitch(SiS_Private *SiS_Pr, ScrnInfoPtr pScrn, UShort BaseAddr)
d2540 1
a2540 1
   SISPtr pSiS = SISPTR(pScrn);
d2542 6
a2547 10
   /* TW: We need to set pitch for CRT1 if bridge is in SlaveMode, too */
   if( (pSiS->VBFlags & DISPTYPE_DISP1) ||
       ( (pSiS->VBFlags & VB_VIDEOBRIDGE) &&
         ( ((pSiS->VGAEngine == SIS_300_VGA) && (SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00) & 0xa0) == 0x20) ||
           ((pSiS->VGAEngine == SIS_315_VGA) && (SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x00) & 0x50) == 0x10) ) ) ) {
   	SiS_SetPitchCRT1(SiS_Pr, pScrn, BaseAddr);
   }
   if (pSiS->VBFlags & DISPTYPE_DISP2) {
   	SiS_SetPitchCRT2(SiS_Pr, pScrn, BaseAddr);
   }
d2550 3
a2552 2
void
SiS_SetPitchCRT1(SiS_Private *SiS_Pr, ScrnInfoPtr pScrn, UShort BaseAddr)
d2554 3
a2556 2
    SISPtr pSiS = SISPTR(pScrn);
    ULong  HDisplay,temp;
d2558 1
a2558 5
    HDisplay = pSiS->scrnPitch / 8;
    SiS_SetReg1(SiS_Pr->SiS_P3d4, 0x13, (HDisplay & 0xFF));
    temp = (SiS_GetReg1(SiS_Pr->SiS_P3c4, 0x0E) & 0xF0) | (HDisplay>>8);
    SiS_SetReg1(SiS_Pr->SiS_P3c4, 0x0E, temp);
}
d2560 7
a2566 5
void
SiS_SetPitchCRT2(SiS_Private *SiS_Pr, ScrnInfoPtr pScrn, UShort BaseAddr)
{
    SISPtr pSiS = SISPTR(pScrn);
    ULong  HDisplay,temp;
d2568 8
a2575 1
    HDisplay = pSiS->scrnPitch / 8;
d2577 3
a2579 5
    /* Unlock CRT2 */
    if (pSiS->VGAEngine == SIS_315_VGA)
        SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2F, 0x01);
    else
        SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x24, 0x01);
d2581 3
a2583 5
    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x07, (HDisplay & 0xFF));
    temp = (SiS_GetReg1(SiS_Pr->SiS_Part1Port,0x09) & 0xF0) | ((HDisplay >> 8) & 0xFF);
    SiS_SetReg1(SiS_Pr->SiS_Part1Port,0x09, temp);
}
#endif
d2585 13
a2597 6
/* TW: Checked against 650/301 and 630/301B BIOS */
/* TW: Re-written for 650/301LVx 1.10.6s BIOS */
void
SiS_GetVBType(SiS_Private *SiS_Pr, USHORT BaseAddr,PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT flag=0, rev=0, nolcd=0;
d2599 1
a2599 1
  SiS_Pr->SiS_VBType = 0;
d2601 3
a2603 1
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) return;
d2605 3
a2607 1
  flag = SiS_GetReg1(SiS_Pr->SiS_Part4Port,0x00);
d2609 2
a2610 2
  /* TW: Illegal values not welcome... */
  if(flag > 10) return;
d2612 4
a2615 28
  rev = SiS_GetReg1(SiS_Pr->SiS_Part4Port,0x01);

  if (flag >= 2) {
        SiS_Pr->SiS_VBType = VB_SIS302B;
  } else if (flag == 1) {
        SiS_Pr->SiS_VBType = VB_SIS301;
        if(rev >= 0xB0) {
            	SiS_Pr->SiS_VBType = VB_SIS301B;
		if((HwDeviceExtension->jChipType >= SIS_315H) ||
		   (HwDeviceExtension->jChipType == SIS_300))  {
		    /* 650/301LV and 300/301LV use this, 630/301B does not */
    		    nolcd = SiS_GetReg1(SiS_Pr->SiS_Part4Port,0x23);
                    if(!(nolcd & 0x02))
       	                SiS_Pr->SiS_VBType |= VB_NoLCD;
		}
        }
  }
  if(SiS_Pr->SiS_VBType & (VB_SIS301B | VB_SIS302B)) {
        if(rev >= 0xD0) {
	        SiS_Pr->SiS_VBType &= ~(VB_SIS301B | VB_SIS302B);
          	SiS_Pr->SiS_VBType |= VB_SIS30xLV;
		SiS_Pr->SiS_VBType &= ~(VB_NoLCD);
		if(rev >= 0xE0) {
		    SiS_Pr->SiS_VBType &= ~(VB_SIS30xLV);
		    SiS_Pr->SiS_VBType |= VB_SIS30xNEW;
		}
        }
  }
d2618 2
a2619 3
/* TW: Checked against 650/301LVx 1.10.6s */
BOOLEAN
SiS_SearchModeID(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT *ModeNo,USHORT *ModeIdIndex)
d2621 29
a2649 1
   UCHAR VGAINFO = SiS_Pr->SiS_VGAINFO;
d2651 13
a2663 1
   if(*ModeNo <= 0x13) {
d2665 23
a2687 1
      if((*ModeNo) <= 5) (*ModeNo) |= 1;
d2689 9
a2697 4
      for(*ModeIdIndex=0;;(*ModeIdIndex)++) {
         if(SiS_Pr->SiS_SModeIDTable[*ModeIdIndex].St_ModeID == (*ModeNo)) break;
         if(SiS_Pr->SiS_SModeIDTable[*ModeIdIndex].St_ModeID == 0xFF)   return FALSE;
      }
d2699 3
a2701 10
      if(*ModeNo == 0x07) {
          if(VGAINFO & 0x10) (*ModeIdIndex)++;   /* 400 lines */
          /* else 350 lines */
      }
      if(*ModeNo <= 3) {
         if(!(VGAINFO & 0x80)) (*ModeIdIndex)++;
         if(VGAINFO & 0x10)    (*ModeIdIndex)++; /* 400 lines  */
         /* else 350 lines  */
      }
      /* else 200 lines  */
d2703 9
a2711 1
   } else {
d2713 1
a2713 4
      for(*ModeIdIndex=0;;(*ModeIdIndex)++) {
         if(SiS_Pr->SiS_EModeIDTable[*ModeIdIndex].Ext_ModeID == (*ModeNo)) break;
         if(SiS_Pr->SiS_EModeIDTable[*ModeIdIndex].Ext_ModeID == 0xFF)      return FALSE;
      }
d2715 3
a2717 3
   }
   return TRUE;
}
d2719 5
a2723 6
/* For SiS 300 oem util: Search VBModeID */
BOOLEAN
SiS_SearchVBModeID(SiS_Private *SiS_Pr, UCHAR *ROMAddr, USHORT *ModeNo)
{
   USHORT ModeIdIndex;
   UCHAR VGAINFO = SiS_Pr->SiS_VGAINFO;
d2725 17
a2741 1
   if(*ModeNo <= 5) *ModeNo |= 1;
d2743 5
a2747 4
   for(ModeIdIndex=0; ; ModeIdIndex++) {
        if(SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].ModeID == *ModeNo) break;
        if(SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].ModeID == 0xFF)    return FALSE;
   }
d2749 20
a2768 9
   if(*ModeNo != 0x07) {
        if(*ModeNo > 0x03) return ((BOOLEAN)ModeIdIndex);
	if(VGAINFO & 0x80) return ((BOOLEAN)ModeIdIndex);
	ModeIdIndex++;
   }
   if(VGAINFO & 0x10) ModeIdIndex++;   /* 400 lines */
	                               /* else 350 lines */
   return ((BOOLEAN)ModeIdIndex);
}
d2770 6
a2775 7
/* TW: Checked against 630/301B, 315 1.09 and 650/301LVx 1.10.6s BIOS */
BOOLEAN
SiS_CheckMemorySize(SiS_Private *SiS_Pr, UCHAR *ROMAddr,PSIS_HW_DEVICE_INFO HwDeviceExtension,
                    USHORT ModeNo,USHORT ModeIdIndex)
{
  USHORT memorysize,modeflag;
  ULONG  temp;
d2777 16
a2792 9
  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     if(ModeNo <= 0x13) {
        modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     } else {
        modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     }
  }
d2794 4
a2797 3
  memorysize = modeflag & MemoryInfoFlag;
  memorysize >>= MemorySizeShift;			/* Get required memory size */
  memorysize++;
d2799 12
a2810 2
  temp = GetDRAMSize(SiS_Pr, HwDeviceExtension);       	/* Get adapter memory size */
  temp /= (1024*1024);   				/* (in MB) */
d2812 1
a2812 3
  if(temp < memorysize) return(FALSE);
  else return(TRUE);
}
d2814 3
a2816 4
UCHAR
SiS_GetModePtr(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
{
   UCHAR index;
d2818 12
a2829 8
   if(ModeNo <= 0x13) {
     	index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_StTableIndex;
   } else {
     	if(SiS_Pr->SiS_ModeType <= 0x02) index = 0x1B;    /* 02 -> ModeEGA  */
     	else index = 0x0F;
   }
   return index;
}
d2831 4
a2834 6
/* TW: Checked against 300, 330, 650/LVDS (1.10.07, 1.10a) and 650/301LV BIOS */
void
SiS_SetSeqRegs(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT StandTableIndex)
{
   UCHAR SRdata;
   USHORT i;
d2836 12
a2847 1
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x00,0x03);           	/* Set SR0  */
d2849 1
a2849 1
   SRdata = SiS_Pr->SiS_StandTable[StandTableIndex].SR[0];
d2851 3
a2853 19
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      	if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
        	SRdata |= 0x01;
        }
   }
   if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
     if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
       if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
         if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
           SRdata |= 0x01;        			/* 8 dot clock  */
         }
       }
     }
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
       if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
         SRdata |= 0x01;          			/* 8 dot clock  */
       }
     }
   }
d2855 2
a2856 1
   SRdata |= 0x20;                			/* screen off  */
d2858 2
a2859 1
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x01,SRdata);
d2861 4
a2864 4
   for(i = 2; i <= 4; i++) {
       	SRdata = SiS_Pr->SiS_StandTable[StandTableIndex].SR[i-1];
     	SiS_SetReg1(SiS_Pr->SiS_P3c4,i,SRdata);
   }
d2866 1
d2868 4
a2871 3
/* Checked against 300, 650/301LVx 1.10.6s and 650/LVDS 1.10.07 BIOS */
void
SiS_SetMiscRegs(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT StandTableIndex)
d2873 1
a2873 1
   UCHAR Miscdata;
d2875 2
a2876 1
   Miscdata = SiS_Pr->SiS_StandTable[StandTableIndex].MISC;
d2878 5
a2882 5
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
        Miscdata |= 0x0C;
      }
   }
d2884 15
a2898 1
   SiS_SetReg3(SiS_Pr->SiS_P3c2,Miscdata);
a2899 42

/* Checked against 300, 330, 650/LVDS (1.10.07) and 650/301LVx (1.10.6s) BIOS (630 code still there!) */
void
SiS_SetCRTCRegs(SiS_Private *SiS_Pr, UCHAR *ROMAddr,PSIS_HW_DEVICE_INFO HwDeviceExtension,
                USHORT StandTableIndex)
{
  UCHAR CRTCdata;
  USHORT i;

  SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);                       /* Unlock CRTC */

  for(i = 0; i <= 0x18; i++) {
     CRTCdata = SiS_Pr->SiS_StandTable[StandTableIndex].CRTC[i];
     SiS_SetReg1(SiS_Pr->SiS_P3d4,i,CRTCdata);                     /* Set CRTC(3d4) */
  }
  if( ( (HwDeviceExtension->jChipType == SIS_630) ||
        (HwDeviceExtension->jChipType == SIS_730) )  &&
      (HwDeviceExtension->jChipRevision >= 0x30) ) {       	   /* for 630S0 */
    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToTV)) {
        SiS_SetReg1(SiS_Pr->SiS_P3d4,0x18,0xFE);
      }
    }
  }
}

/* TW: Checked against 300, 650/LVDS (1.10.07), 650/301LVx (1.10.6s) and 630/301B BIOS */
void
SiS_SetATTRegs(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT StandTableIndex,
               PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
   UCHAR ARdata;
   USHORT i;

   for(i = 0; i <= 0x13; i++) {
    ARdata = SiS_Pr->SiS_StandTable[StandTableIndex].ATTR[i];
#if 0
    if((i <= 0x0f) || (i == 0x11)) {
        if(ds:489 & 0x08) {
	   continue;
        }
    }
a2900 29
    if(i == 0x13) {
      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)  ARdata=0;
      }
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
          if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
            if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) ARdata=0;
          }
        }
      }
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
        if(HwDeviceExtension->jChipType >= SIS_315H) {
	  /* TW: From 650/LVDS 1.10.07, 1.10a; 650/301LVx 1.10.6s; not in 330 BIOS */
	  ARdata = 0;
	} else {
          if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
	     ARdata=0;
          }
	}
      }
    }
    SiS_GetReg2(SiS_Pr->SiS_P3da);                              /* reset 3da  */
    SiS_SetReg3(SiS_Pr->SiS_P3c0,i);                            /* set index  */
    SiS_SetReg3(SiS_Pr->SiS_P3c0,ARdata);                       /* set data   */
   }
   SiS_GetReg2(SiS_Pr->SiS_P3da);                               /* reset 3da  */
   SiS_SetReg3(SiS_Pr->SiS_P3c0,0x14);                          /* set index  */
   SiS_SetReg3(SiS_Pr->SiS_P3c0,0x00);                          /* set data   */
d2902 3
a2904 4
   SiS_GetReg2(SiS_Pr->SiS_P3da);
   SiS_SetReg3(SiS_Pr->SiS_P3c0,0x20);				/* Enable Attribute  */
   SiS_GetReg2(SiS_Pr->SiS_P3da);
}
d2906 4
a2909 3
/* TW: Checked against 300, 330, 650/LVDS (1.10.07, 1.10a) and 650/301LV BIOS */
void
SiS_SetGRCRegs(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT StandTableIndex)
d2911 1
a2911 2
   UCHAR GRdata;
   USHORT i;
d2913 3
a2915 65
   for(i = 0; i <= 0x08; i++) {
     GRdata = SiS_Pr->SiS_StandTable[StandTableIndex].GRC[i];
     SiS_SetReg1(SiS_Pr->SiS_P3ce,i,GRdata);                    /* Set GR(3ce) */
   }

   if(SiS_Pr->SiS_ModeType > ModeVGA) {
     SiS_SetRegAND(SiS_Pr->SiS_P3ce,0x05,0xBF);			/* 256 color disable */
   }
}

/* TW: Checked against 650/LVDS (1.10.07, 1.10a), 650/301LVx (1.10.6s) and 630/301B BIOS */
void
SiS_ClearExt1Regs(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT i;

  for(i = 0x0A; i <= 0x0E; i++) {
      SiS_SetReg1(SiS_Pr->SiS_P3c4,i,0x00);      /* Clear SR0A-SR0E */
  }

  /* TW: New from 330, 650/LVDS/301LV BIOSes: */
  if(HwDeviceExtension->jChipType >= SIS_315H) {
     SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x37,0xFE);
  }
}

/* TW: Checked against 300, 330, 650/LVDS (1.10.07) and 650/301LV BIOS */
void
SiS_SetSync(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT RefreshRateTableIndex)
{
  USHORT sync;
  USHORT temp;

  if(SiS_Pr->UseCustomMode) {
     sync = SiS_Pr->CInfoFlag >> 8;
  } else {
     sync = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag >> 8;
  }     

  sync &= 0xC0;
  temp = 0x2F | sync;
  SiS_SetReg3(SiS_Pr->SiS_P3c2,temp);           /* Set Misc(3c2) */
}

/* TW: Checked against 300, 330, 650/LVDS (1.10.07) and 650/301LVx (1.10.6s) BIOS */
void
SiS_SetCRT1CRTC(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex,
		PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  UCHAR  index;
  USHORT tempah,i,modeflag,j;
#ifdef SIS315H
  USHORT temp;
  USHORT ResInfo,DisplayType;
  const SiS_LCDACRT1DataStruct *LCDACRT1Ptr = NULL;
#endif

  SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);		/*unlock cr0-7  */

  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     if(ModeNo <= 0x13) {
        modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
d2917 3
a2919 1
        modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d2921 1
a2921 5
  }     

  if((SiS_Pr->SiS_IF_DEF_LVDS == 0) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {

#ifdef SIS315H
d2923 1
a2923 1
     /* LCDA */
d2925 2
a2926 2
     temp = SiS_GetLCDACRT1Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
                       RefreshRateTableIndex,&ResInfo,&DisplayType);
d2928 3
a2930 54
     switch(DisplayType) {
      case Panel_800x600       : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT1800x600_1;           break;
      case Panel_1024x768      : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_1;          break;
      case Panel_1280x1024     : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_1;         break;
      case Panel_1400x1050     : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11400x1050_1;         break;
      case Panel_1600x1200     : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11600x1200_1;         break;
      case Panel_800x600 + 16  : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT1800x600_1_H;         break;
      case Panel_1024x768 + 16 : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_1_H;        break;
      case Panel_1280x1024 + 16: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_1_H;       break;
      case Panel_1400x1050 + 16: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11400x1050_1_H;       break;
      case Panel_1600x1200 + 16: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11600x1200_1_H;       break;
      case Panel_800x600 + 32  : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT1800x600_2;           break;
      case Panel_1024x768 + 32 : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_2;          break;
      case Panel_1280x1024 + 32: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_2;         break;
      case Panel_1400x1050 + 32: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11400x1050_2;         break;
      case Panel_1600x1200 + 32: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11600x1200_2;         break;
      case Panel_800x600 + 48  : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT1800x600_2_H;         break;
      case Panel_1024x768 + 48 : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_2_H;        break;
      case Panel_1280x1024 + 48: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_2_H;       break;
      case Panel_1400x1050 + 48: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11400x1050_2_H;       break;
      case Panel_1600x1200 + 48: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11600x1200_2_H;       break;
      default:                   LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_1;          break;
     }

     tempah = (LCDACRT1Ptr+ResInfo)->CR[0];
     SiS_SetReg1(SiS_Pr->SiS_P3d4,0x00,tempah);
     for(i=0x01,j=1;i<=0x07;i++,j++){
       tempah = (LCDACRT1Ptr+ResInfo)->CR[j];
       SiS_SetReg1(SiS_Pr->SiS_P3d4,i,tempah);
     }
     for(i=0x10,j=8;i<=0x12;i++,j++){
       tempah = (LCDACRT1Ptr+ResInfo)->CR[j];
       SiS_SetReg1(SiS_Pr->SiS_P3d4,i,tempah);
     }
     for(i=0x15,j=11;i<=0x16;i++,j++){
       tempah =(LCDACRT1Ptr+ResInfo)->CR[j];
       SiS_SetReg1(SiS_Pr->SiS_P3d4,i,tempah);
     }
     for(i=0x0A,j=13;i<=0x0C;i++,j++){
       tempah = (LCDACRT1Ptr+ResInfo)->CR[j];
       SiS_SetReg1(SiS_Pr->SiS_P3c4,i,tempah);
     }

     tempah = (LCDACRT1Ptr+ResInfo)->CR[16];
     tempah &= 0x0E0;
     SiS_SetReg1(SiS_Pr->SiS_P3c4,0x0E,tempah);

     tempah = (LCDACRT1Ptr+ResInfo)->CR[16];
     tempah &= 0x01;
     tempah <<= 5;
     if(modeflag & DoubleScanMode)  tempah |= 0x080;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,~0x020,tempah);

#endif
d2934 2
a2935 62
     /* LVDS, 301, 301B, 301LV, 302LV, ... (non-LCDA) */

     if(SiS_Pr->UseCustomMode) {
     
        for(i=0,j=0;i<=07;i++,j++) {
          SiS_SetReg1(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
        }
        for(j=0x10;i<=10;i++,j++) {
          SiS_SetReg1(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
        }
        for(j=0x15;i<=12;i++,j++) {
          SiS_SetReg1(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
        }
        for(j=0x0A;i<=15;i++,j++) {
          SiS_SetReg1(SiS_Pr->SiS_P3c4,j,SiS_Pr->CCRT1CRTC[i]);
        }

        tempah = SiS_Pr->CCRT1CRTC[16] & 0xE0;
        SiS_SetReg1(SiS_Pr->SiS_P3c4,0x0E,tempah);

        tempah = SiS_Pr->CCRT1CRTC[16];
        tempah &= 0x01;
        tempah <<= 5;
        if(modeflag & DoubleScanMode)  tempah |= 0x80;
        SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0xDF,tempah);
     
     
     } else {
     
        index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;  	/* Get index */
#if 0   /* Not any longer... */     
        if(HwDeviceExtension->jChipType < SIS_315H) {
           index &= 0x3F;
        }
#endif

        for(i=0,j=0;i<=07;i++,j++) {
          tempah=SiS_Pr->SiS_CRT1Table[index].CR[i];
          SiS_SetReg1(SiS_Pr->SiS_P3d4,j,tempah);
        }
        for(j=0x10;i<=10;i++,j++) {
          tempah=SiS_Pr->SiS_CRT1Table[index].CR[i];
          SiS_SetReg1(SiS_Pr->SiS_P3d4,j,tempah);
        }
        for(j=0x15;i<=12;i++,j++) {
          tempah=SiS_Pr->SiS_CRT1Table[index].CR[i];
          SiS_SetReg1(SiS_Pr->SiS_P3d4,j,tempah);
        }
        for(j=0x0A;i<=15;i++,j++) {
          tempah=SiS_Pr->SiS_CRT1Table[index].CR[i];
          SiS_SetReg1(SiS_Pr->SiS_P3c4,j,tempah);
        }

        tempah = SiS_Pr->SiS_CRT1Table[index].CR[16];
        tempah &= 0xE0;
        SiS_SetReg1(SiS_Pr->SiS_P3c4,0x0E,tempah);

        tempah = SiS_Pr->SiS_CRT1Table[index].CR[16];
        tempah &= 0x01;
        tempah <<= 5;
        if(modeflag & DoubleScanMode)  tempah |= 0x80;
        SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0xDF,tempah);
d2937 2
d2942 2
a2943 26
  if(SiS_Pr->SiS_ModeType > ModeVGA) SiS_SetReg1(SiS_Pr->SiS_P3d4,0x14,0x4F);
}

BOOLEAN
SiS_GetLCDACRT1Ptr(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
		   USHORT RefreshRateTableIndex,USHORT *ResInfo,
		   USHORT *DisplayType)
 {
  USHORT tempbx=0,modeflag=0;
  USHORT CRT2CRTC=0;

  if(ModeNo <= 0x13) {
  	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  	CRT2CRTC = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
  	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  	CRT2CRTC = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }

  tempbx = SiS_Pr->SiS_LCDResInfo;

  if(SiS_Pr->SiS_LCDInfo & LCDNonExpanding) tempbx += 32;
  if(modeflag & HalfDCLK)                   tempbx += 16;

  *ResInfo = CRT2CRTC & 0x3F;
  *DisplayType = tempbx;
d2945 1
a2945 100
  return 1;
}

/* TW: Set offset and pitch - partly overruled by SetPitch() in XF86 */
/* TW: Checked against 330, 650/LVDS (1.10.07), 650/301LV and 315 BIOS */
void
SiS_SetCRT1Offset(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                  USHORT RefreshRateTableIndex,
		  PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
   USHORT temp, DisplayUnit, infoflag;

   if(SiS_Pr->UseCustomMode) {
      infoflag = SiS_Pr->CInfoFlag;
   } else {
      infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
   }
   
   DisplayUnit = SiS_GetOffset(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
                     RefreshRateTableIndex,HwDeviceExtension);		     

   temp = (DisplayUnit >> 8) & 0x0f;
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0xF0,temp);

   temp = DisplayUnit & 0xFF;
   SiS_SetReg1(SiS_Pr->SiS_P3d4,0x13,temp);

   if(infoflag & InterlaceMode) DisplayUnit >>= 1;

   DisplayUnit <<= 5;
   temp = (DisplayUnit & 0xff00) >> 8;
   if (DisplayUnit & 0xff) temp++;
   temp++;
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x10,temp);
}

/* TW: New from 650/LVDS 1.10.07, 630/301B and 630/LVDS BIOS */
void
SiS_ResetCRT1VCLK(SiS_Private *SiS_Pr, UCHAR *ROMAddr,PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
   USHORT index;

   /* TW: We only need to do this if Panel Link is to be
    *     initialized, thus on 630/LVDS/301B, and 650/LVDS
    */
   if(HwDeviceExtension->jChipType >= SIS_315H) {
       if (SiS_Pr->SiS_IF_DEF_LVDS == 0)  return;
   } else {
       if( (SiS_Pr->SiS_IF_DEF_LVDS == 0) &&
           (!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) ) {
	   return;
      }
   }

   if(HwDeviceExtension->jChipType >= SIS_315H) {
   	SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x31,0xCF,0x20);
   } else {
   	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x31,0x20);
   }
   index = 1;
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2B,SiS_Pr->SiS_VCLKData[index].SR2B);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2C,SiS_Pr->SiS_VCLKData[index].SR2C);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2D,0x80);
   if(HwDeviceExtension->jChipType >= SIS_315H) {
   	SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x31,0xcf,0x10);
   } else {
   	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x31,0x10);
   }
   index = 0;
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2B,SiS_Pr->SiS_VCLKData[index].SR2B);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2C,SiS_Pr->SiS_VCLKData[index].SR2C);
   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2D,0x80);
}

/* TW: Checked against 300, 330, 650/LVDS, 650/301LVx, 315, 630/301B, 630/LVDS BIOS */
void
SiS_SetCRT1VCLK(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                PSIS_HW_DEVICE_INFO HwDeviceExtension,
		USHORT RefreshRateTableIndex)
{
  USHORT  index=0;

  if(!SiS_Pr->UseCustomMode) {
     index = SiS_GetVCLK2Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
	                  RefreshRateTableIndex,HwDeviceExtension);
  }			  

  if( (SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)
                       && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) ){

    	SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x31,0xCF);

    	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2B,SiS_Pr->SiS_VBVCLKData[index].Part4_A);
    	SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2C,SiS_Pr->SiS_VBVCLKData[index].Part4_B);

    	if(HwDeviceExtension->jChipType >= SIS_315H) {
		SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2D,0x01);
   	} else {
    		SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2D,0x80);
    	}
d2949 4
a2952 5
	if(HwDeviceExtension->jChipType >= SIS_315H) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x31,0xCF);
	} else {
	    SiS_SetReg1(SiS_Pr->SiS_P3c4,0x31,0x00);
	}
d2954 3
a2956 7
	if(SiS_Pr->UseCustomMode) {
	   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2B,SiS_Pr->CSR2B);
	   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2C,SiS_Pr->CSR2C);
	} else {
    	   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2B,SiS_Pr->SiS_VCLKData[index].SR2B);
    	   SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2C,SiS_Pr->SiS_VCLKData[index].SR2C);
  	}	   
d2958 5
a2962 4
    	if(HwDeviceExtension->jChipType >= SIS_315H) {
	    SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2D,0x01);
	} else {
      	    SiS_SetReg1(SiS_Pr->SiS_P3c4,0x2D,0x80);
d2964 2
a2965 8
  }
}

#if 0  /* TW: Not used */
void
SiS_IsLowResolution(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
{
  USHORT ModeFlag;
a2966 8
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x0F,0x7F);

  if(ModeNo > 0x13) {
    ModeFlag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    if ((ModeFlag & HalfDCLK) && (ModeFlag & DoubleScanMode)) {
      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x0F,0x80);
      SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x01,0xF7);
    }
a2968 1
#endif
d2970 2
a2971 3
/* TW: Checked against 300, 630/LVDS, 650/LVDS, 315 and 330 BIOS */
void
SiS_SetCRT1ModeRegs(SiS_Private *SiS_Pr, UCHAR *ROMAddr,PSIS_HW_DEVICE_INFO HwDeviceExtension,
d2974 1
a2974 2
  USHORT data,data2,data3;
  USHORT infoflag=0,modeflag;
d2976 5
d2985 1
d2987 1
d2991 1
d2994 1
d2998 2
a2999 4
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1F,0x3F); 		/* DAC pedestal */

  if(ModeNo > 0x13) data = infoflag;
  else data = 0;
d3001 1
a3001 1
  data2 = 0;
d3003 3
a3005 21
    if(SiS_Pr->SiS_ModeType > 0x02) {
       data2 |= 0x02;
       data3 = (SiS_Pr->SiS_ModeType - ModeVGA) << 2;
       data2 |= data3;
    }
  }
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "Debug: Mode infoflag = %x, Chiptype %d\n", 
  	data, HwDeviceExtension->jChipType);
#endif  
  if(data & InterlaceMode) data2 |= 0x20;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x06,0xC0,data2);

  if(SiS_Pr->UseCustomMode) {
     xres = SiS_Pr->CHDisplay;
  } else {
     resindex = SiS_GetResInfo(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex);
     if(ModeNo <= 0x13) {
      	xres = SiS_Pr->SiS_StResInfo[resindex].HTotal;
     } else {
      	xres = SiS_Pr->SiS_ModeResInfo[resindex].HTotal;
d3007 1
d3009 1
d3011 2
a3012 2
  if(HwDeviceExtension->jChipType != SIS_300) {
     data = 0x0000;
d3014 3
a3016 2
        if(xres == 1024) data = 0x0035;
        else data = 0x0048;
d3018 2
a3019 4
     data2 = data & 0x00FF;
     SiS_SetReg1(SiS_Pr->SiS_P3d4,0x19,data2);
     data2 = (data & 0xFF00) >> 8;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x1a,0xFC,data2);
d3026 4
a3029 13
  if(HwDeviceExtension->jChipType == SIS_300) {
     if(modeflag & LineCompareOff) {
        SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x0F,0x08);
     } else {
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x0F,0xF7);
     }
  } else if(HwDeviceExtension->jChipType < SIS_315H) {
     if(modeflag & LineCompareOff) {
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xB7,0x08);
     } else {
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x0F,0xB7);
     }
     /* 630 BIOS does something for mode 0x12 here */
d3031 1
a3031 8
     if(modeflag & LineCompareOff) {
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xB7,0x08);
     } else {
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x0F,0xB7);
     }
  }

  if(HwDeviceExtension->jChipType != SIS_300) {
d3039 4
d3044 23
a3066 22
  /* TW: 315 BIOS sets SR17 at this point */
  if(HwDeviceExtension->jChipType == SIS_315PRO) {
      data = SiS_Get310DRAMType(SiS_Pr,ROMAddr,HwDeviceExtension);
      data = SiS_Pr->SiS_SR15[2][data];
      if(SiS_Pr->SiS_ModeType == ModeText) {
          data &= 0xc7;
      } else {
          data2 = SiS_GetOffset(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
                                RefreshRateTableIndex,HwDeviceExtension);
	  data2 >>= 1;
	  if(infoflag & InterlaceMode) data2 >>= 1;
	  data3 = SiS_GetColorDepth(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex);
	  data3 >>= 1;
	  if(data3 == 0) data3++;
	  data2 /= data3;
	  if(data2 >= 0x50) {
	      data &= 0x0f;
	      data |= 0x50;
	  }
      }
      SiS_SetReg1(SiS_Pr->SiS_P3c4,0x17,data);
  }
d3068 18
a3085 14
  /* TW: 330 BIOS sets SR17 at this point */
  if(HwDeviceExtension->jChipType == SIS_330) {
      data = SiS_Get310DRAMType(SiS_Pr,ROMAddr,HwDeviceExtension);
      data = SiS_Pr->SiS_SR15[2][data];
      if(SiS_Pr->SiS_ModeType <= ModeEGA) {
          data &= 0xc7;
      } else {
          if(SiS_Pr->UseCustomMode) {
	     data2 = SiS_Pr->CSRClock;
	  } else {
             data2 = SiS_GetVCLK2Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
                               RefreshRateTableIndex,HwDeviceExtension);
             data2 = SiS_Pr->SiS_VCLKData[data2].CLOCK;
	  }
d3087 2
a3088 2
	  data3 = SiS_GetColorDepth(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex);
	  data3 >>= 1;
d3090 1
a3090 1
	  data2 *= data3;
d3092 1
a3092 2
	  data3 = SiS_GetMCLK(SiS_Pr,ROMAddr, HwDeviceExtension);
	  data3 *= 1024;
d3094 26
a3119 19
	  data2 = data3 / data2;

	  if(SiS_Pr->SiS_ModeType != Mode16Bpp) {
            if(data2 >= 0x19c)      data = 0xba;
	    else if(data2 >= 0x140) data = 0x7a;
	    else if(data2 >= 0x101) data = 0x3a;
	    else if(data2 >= 0xf5)  data = 0x32;
	    else if(data2 >= 0xe2)  data = 0x2a;
	    else if(data2 >= 0xc4)  data = 0x22;
	    else if(data2 >= 0xac)  data = 0x1a;
	    else if(data2 >= 0x9e)  data = 0x12;
	    else if(data2 >= 0x8e)  data = 0x0a;
	    else                    data = 0x02;
	  } else {
	    if(data2 >= 0x127)      data = 0xba;
	    else                    data = 0x7a;
	  }
      }
      SiS_SetReg1(SiS_Pr->SiS_P3c4,0x17,data);
d3125 4
a3128 4
      data ^= 0x60;
      if(SiS_Pr->SiS_ModeType != ModeEGA) {
          data ^= 0xA0;
      }
d3132 1
a3132 1
  SiS_SetVCLKState(SiS_Pr,ROMAddr,HwDeviceExtension,ModeNo,RefreshRateTableIndex,ModeIdIndex);
d3135 6
a3140 6
  if(HwDeviceExtension->jChipType >= SIS_315H) {
    if(SiS_GetReg1(SiS_Pr->SiS_P3d4,0x31) & 0x40) {
        SiS_SetReg1(SiS_Pr->SiS_P3d4,0x52,0x2c);
    } else {
        SiS_SetReg1(SiS_Pr->SiS_P3d4,0x52,0x6c);
    }
d3145 7
a3151 5
/* TW: Checked against 300, 315, 330, 650/LVDS, 650/301LVx, 630/301B and 630/LVDS BIOS */
void
SiS_SetVCLKState(SiS_Private *SiS_Pr, UCHAR *ROMAddr,PSIS_HW_DEVICE_INFO HwDeviceExtension,
                 USHORT ModeNo,USHORT RefreshRateTableIndex,
                 USHORT ModeIdIndex)
d3153 9
a3161 2
  USHORT data, data2=0;
  USHORT VCLK, index=0;
d3163 16
a3178 4
  if (ModeNo <= 0x13) VCLK = 0;
  else {
     if(SiS_Pr->UseCustomMode) {
        VCLK = SiS_Pr->CSRClock;
d3180 4
a3183 4
        index = SiS_GetVCLK2Ptr(SiS_Pr,ROMAddr,ModeNo,ModeIdIndex,
	               RefreshRateTableIndex,HwDeviceExtension);
        VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;
     }	
d3185 4
a3188 45

  if(HwDeviceExtension->jChipType < SIS_315H) {		/* 300 series */

    data2 = 0x00;
    if(VCLK > 150) data2 |= 0x80;
    SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0x7B,data2); 	/* DAC speed */

    data2 = 0x00;
    if(VCLK >= 150) data2 |= 0x08;       	/* VCLK > 150 */
    SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x32,0xF7,data2);

  } else { 						/* 310/325 series */

    data = 0;
    if(VCLK >= 166) data |= 0x0c;         	/* TW: Was 200; is 166 in 650, 315 and 330 BIOSes */
    SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x32,0xf3,data);

    if(VCLK >= 166) {				/* TW: Was 200, is 166 in 650, 315 and 330 BIOSes */
       SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1f,0xe7);
    }
#if 0 /* Not done in 315 and 650/301LV/LVDS BIOSes: */
    data = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1F);	  	/* DAC pedestal */
    data &= 0xE7;
    if(VCLK<200) data |= 0x10;
    SiS_SetReg1(SiS_Pr->SiS_P3c4,0x1F,data);	  	/* DAC pedestal */
#endif
  }

  data2 = 0x03;
  if((VCLK >= 135) && (VCLK < 160)) data2 = 0x02;
  if((VCLK >= 160) && (VCLK < 260)) data2 = 0x01;
  if(VCLK >= 260) data2 = 0x00;

  if(HwDeviceExtension->jChipType == SIS_540) {
    	if((VCLK == 203) || (VCLK < 234)) data2 = 0x02;
  }
  
  if(HwDeviceExtension->jChipType < SIS_315H) {
      SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xFC,data2);  	/* DAC speed */
  } else {
      if(HwDeviceExtension->jChipType > SIS_315PRO) {
         /* TW: This "if" is done in 330 and 650/LVDS/301LV BIOSes; Not in 315 BIOS */
         if(ModeNo > 0x13) data2 &= 0xfc;
      }
      SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xF8,data2);  	/* DAC speed */
d3190 3
a3194 1
/* TW: Checked against 650/301LVx 1.10.6s, 315, 630/301B BIOS */
d3196 2
a3197 2
SiS_LoadDAC(SiS_Private *SiS_Pr,PSIS_HW_DEVICE_INFO HwDeviceExtension,
            UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex)
d3200 4
a3203 5
   USHORT time,i,j,k;
   USHORT m,n,o;
   USHORT si,di,bx,dl;
   USHORT al,ah,dh;
   USHORT DACAddr, DACData, shiftflag;
a3204 3
#if 0
   USHORT tempah,tempch,tempcl,tempdh,tempal,tempbx;
#endif
d3207 1
a3207 1
        data = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
d3209 5
a3213 5
        if(SiS_Pr->UseCustomMode) {
	   data = SiS_Pr->CModeFlag;
	} else {
           data = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
 	}	   
d3216 39
a3254 3
#if 0
   if(!(ds:489 & 0x08)) {
#endif
d3256 33
a3288 11
	data &= DACInfoFlag;
	time = 64;
	if(data == 0x00) table = SiS_MDA_DAC;
	if(data == 0x08) table = SiS_CGA_DAC;
	if(data == 0x10) table = SiS_EGA_DAC;
	if(data == 0x18) {
	   time = 256;
	   table = SiS_VGA_DAC;
	}
	if(time == 256) j = 16;
	else            j = time;
d3290 3
a3292 14
	if( ( (HwDeviceExtension->jChipType == SIS_630)        &&      /* 630/301B LCD */
	      (SiS_Pr->SiS_VBType & (VB_SIS301B | VB_SIS302B)) &&
	      (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) )               ||
	    (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)                  ||   /* LCDA */
	    (!(SiS_Pr->SiS_SetFlag & ProgrammingCRT2)) ) {             /* Programming CRT1 */
	   DACAddr = SiS_Pr->SiS_P3c8;
	   DACData = SiS_Pr->SiS_P3c9;
	   shiftflag = 0;
	   SiS_SetReg3(SiS_Pr->SiS_P3c6,0xFF);
	} else {
	   shiftflag = 1;
	   DACAddr = SiS_Pr->SiS_Part5Port;
	   DACData = SiS_Pr->SiS_Part5Port + 1;
	}
d3294 5
a3298 1
	SiS_SetReg3(DACAddr,0x00);
d3300 7
a3306 11
	for(i=0; i<j; i++) {
	   data = table[i];
	   for(k=0; k<3; k++) {
		data2 = 0;
		if(data & 0x01) data2 = 0x2A;
		if(data & 0x02) data2 += 0x15;
		if(shiftflag) data2 <<= 2;
		SiS_SetReg3(DACData,data2);
		data >>= 2;
	   }
	}
d3308 1
a3308 35
	if(time == 256) {
	   for(i = 16; i < 32; i++) {
		data = table[i];
		if(shiftflag) data <<= 2;
		for(k=0; k<3; k++) SiS_SetReg3(DACData,data);
	   }
	   si = 32;
	   for(m = 0; m < 9; m++) {
	      di = si;
	      bx = si + 4;
	      dl = 0;
	      for(n = 0; n < 3; n++) {
		 for(o = 0; o < 5; o++) {
		    dh = table[si];
		    ah = table[di];
		    al = table[bx];
		    si++;
		    SiS_WriteDAC(SiS_Pr,DACData,shiftflag,dl,ah,al,dh);
		 }
		 si -= 2;
		 for(o = 0; o < 3; o++) {
		    dh = table[bx];
		    ah = table[di];
		    al = table[si];
		    si--;
		    SiS_WriteDAC(SiS_Pr,DACData,shiftflag,dl,ah,al,dh);
		 }
		 dl++;
	      }            /* for n < 3 */
	      si += 5;
	   }               /* for m < 9 */
	}
#if 0
    }  /* ds:489 & 0x08 */
#endif
d3310 7
a3316 27
#if 0
    if((!(ds:489 & 0x08)) && (ds:489 & 0x06)) {
           tempbx = 0;
	   for(i=0; i< 256; i++) {
               SiS_SetReg3(SiS_Pr->SiS_P3c8-1,tempbx);    	/* 7f87 */
               tempah = SiS_GetReg3(SiS_Pr->SiS_P3c8+1);  	/* 7f83 */
	       tempch = SiS_GetReg3(SiS_Pr->SiS_P3c8+1);
	       tempcl = SiS_GetReg3(SiS_Pr->SiS_P3c8+1);
	       tempdh = tempah;
	       tempal = 0x4d * tempdh;          	/* 7fb8 */
	       tempbx += tempal;
	       tempal = 0x97 * tempch;
	       tempbx += tempal;
	       tempal = 0x1c * tempcl;
	       tempbx += tempal;
	       if((tempbx & 0x00ff) > 0x80) tempbx += 0x100;
	       tempdh = (tempbx & 0x00ff) >> 8;
	       tempch = tempdh;
	       tempcl = tempdh;
	       SiS_SetReg3(SiS_Pr->SiS_P3c8,(tempbx & 0xff));  	/* 7f7c */
	       SiS_SetReg3(SiS_Pr->SiS_P3c8+1,tempdh);          /* 7f92 */
	       SiS_SetReg3(SiS_Pr->SiS_P3c8+1,tempch);
	       SiS_SetReg3(SiS_Pr->SiS_P3c8+1,tempcl);
           }
    }
#endif
}
d3318 2
a3319 6
void
SiS_WriteDAC(SiS_Private *SiS_Pr, USHORT DACData, USHORT shiftflag,
             USHORT dl, USHORT ah, USHORT al, USHORT dh)
{
  USHORT temp;
  USHORT bh,bl;
d3321 3
a3323 32
  bh = ah;
  bl = al;
  if(dl != 0) {
    temp = bh;
    bh = dh;
    dh = temp;
    if(dl == 1) {
       temp = bl;
       bl = dh;
       dh = temp;
    } else {
       temp = bl;
       bl = bh;
       bh = temp;
    }
  }
  if(shiftflag) {
     dh <<= 2;
     bh <<= 2;
     bl <<= 2;
  }
  SiS_SetReg3(DACData,(USHORT)dh);
  SiS_SetReg3(DACData,(USHORT)bh);
  SiS_SetReg3(DACData,(USHORT)bl);
}

static ULONG
GetDRAMSize(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  ULONG   AdapterMemorySize = 0;
#ifdef SIS315H
  USHORT  counter;
d3326 5
a3330 4
#ifdef SIS315H
  if ((HwDeviceExtension->jChipType == SIS_315H) ||
      (HwDeviceExtension->jChipType == SIS_315)  ||
      (HwDeviceExtension->jChipType == SIS_315PRO)) {
d3332 3
a3334 10
    	counter = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
	AdapterMemorySize = 1 << ((counter & 0xF0) >> 4);
	counter >>= 2;
	counter &= 0x03;
	if(counter == 0x02) {
		AdapterMemorySize += (AdapterMemorySize / 2);      /* DDR asymetric */
	} else if(counter != 0) {
		AdapterMemorySize <<= 1;                           /* SINGLE_CHANNEL_2_RANK or DUAL_CHANNEL_1_RANK */
	}
	AdapterMemorySize *= (1024*1024);
d3336 1
a3336 1
  } else if(HwDeviceExtension->jChipType == SIS_330) {
d3338 3
a3340 7
    	counter = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
	AdapterMemorySize = 1 << ((counter & 0xF0) >> 4);
	counter &= 0x0c;
	if(counter != 0) {
		AdapterMemorySize <<= 1;
	}
	AdapterMemorySize *= (1024*1024);
d3342 6
a3347 3
  } else if((HwDeviceExtension->jChipType == SIS_550) ||
            (HwDeviceExtension->jChipType == SIS_740) ||
            (HwDeviceExtension->jChipType == SIS_650)) {
d3349 12
a3360 4
  	counter = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14) & 0x3F;
      	counter++;
      	AdapterMemorySize = counter * 4;
      	AdapterMemorySize *= (1024*1024);
d3364 1
a3364 5
#ifdef SIS300
  if ((HwDeviceExtension->jChipType==SIS_300) ||
      (HwDeviceExtension->jChipType==SIS_540) ||
      (HwDeviceExtension->jChipType==SIS_630) ||
      (HwDeviceExtension->jChipType==SIS_730)) {
d3366 1
a3366 3
      	AdapterMemorySize = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14) & 0x3F;
      	AdapterMemorySize++;
      	AdapterMemorySize *= (1024*1024);
d3368 3
d3374 4
a3377 1
  return AdapterMemorySize;
d3380 8
a3387 3
#ifndef LINUX_XF86
void
SiS_ClearBuffer(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT ModeNo)
d3389 2
a3390 4
  PVOID   VideoMemoryAddress = (PVOID)HwDeviceExtension->pjVideoMemoryAddress;
  ULONG   AdapterMemorySize  = (ULONG)HwDeviceExtension->ulVideoMemorySize;
  PUSHORT pBuffer;
  int i;
d3392 13
a3404 18
  if (SiS_Pr->SiS_ModeType>=ModeEGA) {
    if(ModeNo > 0x13) {
      AdapterMemorySize = GetDRAMSize(SiS_Pr, HwDeviceExtension);
      SiS_SetMemory(VideoMemoryAddress,AdapterMemorySize,0);
    } else {
      pBuffer = VideoMemoryAddress;
      for(i=0; i<0x4000; i++)
         pBuffer[i] = 0x0000;
    }
  } else {
    pBuffer = VideoMemoryAddress;
    if (SiS_Pr->SiS_ModeType < ModeCGA) {
      for(i=0; i<0x4000; i++)
         pBuffer[i] = 0x0720;
    } else {
      SiS_SetMemory(VideoMemoryAddress,0x8000,0);
    }
  }
a3405 1
#endif
d3407 3
a3409 5
void
SiS_DisplayOn(SiS_Private *SiS_Pr)
{
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x01,0xDF,0x00);
}
d3411 2
a3412 2
void
SiS_DisplayOff(SiS_Private *SiS_Pr)
d3414 8
a3421 1
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x01,0xDF,0x20);
d3424 3
d3428 3
a3430 4
/* ========================================== */
/*  SR CRTC GR */
void
SiS_SetReg1(USHORT port, USHORT index, USHORT data)
d3432 2
a3433 3
   OutPortByte(port,index);
   OutPortByte(port+1,data);
}
d3435 2
a3436 9
/* ========================================== */
/*  AR(3C0) */
void
SiS_SetReg2(SiS_Private *SiS_Pr, USHORT port, USHORT index, USHORT data)
{
   InPortByte(port+0x3da-0x3c0);
   OutPortByte(SiS_Pr->SiS_P3c0,index);
   OutPortByte(SiS_Pr->SiS_P3c0,data);
   OutPortByte(SiS_Pr->SiS_P3c0,0x20);
d3439 2
a3440 2
void
SiS_SetReg3(USHORT port, USHORT data)
d3442 2
a3443 2
   OutPortByte(port,data);
}
d3445 5
a3449 5
void
SiS_SetReg4(USHORT port, ULONG data)
{
   OutPortLong(port,data);
}
d3451 2
a3452 4
void
SiS_SetReg5(USHORT port, USHORT data)
{
   OutPortWord(port,data);
d3455 2
a3456 1
UCHAR SiS_GetReg1(USHORT port, USHORT index)
d3458 2
a3459 1
   UCHAR   data;
d3461 7
a3467 2
   OutPortByte(port,index);
   data = InPortByte(port+1);
d3469 8
a3476 1
   return(data);
d3478 5
d3484 8
a3491 2
UCHAR
SiS_GetReg2(USHORT port)
d3493 6
a3498 1
   UCHAR   data;
d3500 3
a3502 1
   data= InPortByte(port);
d3504 3
a3506 2
   return(data);
}
d3508 3
a3510 4
ULONG
SiS_GetReg3(USHORT port)
{
   ULONG   data;
d3512 5
a3516 1
   data = InPortLong(port);
d3518 3
a3520 2
   return(data);
}
d3522 1
a3522 4
USHORT
SiS_GetReg4(USHORT port)
{
   ULONG   data;
d3524 6
a3529 1
   data = InPortWord(port);
d3531 4
a3534 2
   return(data);
}
d3536 1
a3536 4
void
SiS_ClearDAC(SiS_Private *SiS_Pr, ULONG port)
{
   int i;
d3538 4
a3541 4
   OutPortByte(port, 0);
   port++;
   for (i=0; i < (256 * 3); i++) {
      OutPortByte(port, 0);
d3544 1
a3544 1
}
d3546 1
a3546 6
#if 0  /* TW: Unused */
void
SiS_SetInterlace(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT RefreshRateTableIndex)
{
  ULONG Temp;
  USHORT data,Temp2;
d3548 10
a3557 1
  if (ModeNo<=0x13) return;
d3559 6
a3564 3
  Temp = (ULONG)SiS_GetReg1(SiS_Pr->SiS_P3d4,0x01);
  Temp++;
  Temp <<= 3;
d3566 5
a3570 3
  if(Temp == 1024) data = 0x0035;
  else if(Temp == 1280) data = 0x0048;
  else data = 0x0000;
d3572 3
a3574 3
  Temp2 = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
  Temp2 &= InterlaceMode;
  if(Temp2 == 0) data=0x0000;
d3576 7
a3582 1
  SiS_SetReg1(SiS_Pr->SiS_P3d4,0x19,data);
d3584 5
a3588 3
  Temp = (ULONG)SiS_GetReg1(SiS_Pr->SiS_P3d4,0x1A);
  Temp = (USHORT)(Temp & 0xFC);
  SiS_SetReg1(SiS_Pr->SiS_P3d4,0x1A,(USHORT)Temp);
d3590 9
a3598 6
  Temp = (ULONG)SiS_GetReg1(SiS_Pr->SiS_P3c4,0x0f);
  Temp2 = (USHORT)Temp & 0xBF;
  if(ModeNo==0x37) Temp2 |= 0x40;
  SiS_SetReg1(SiS_Pr->SiS_P3d4,0x1A,(USHORT)Temp2);
}
#endif
d3600 1
a3600 7
/* TW: Checked against 330, 650/LVDS (1.10.07), 650/301LVx (1.10.6s) and 315 BIOS */
#ifdef SIS315H
void
SiS_SetCRT1FIFO_310(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,USHORT ModeIdIndex,
                PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT modeflag;
d3602 1
a3602 1
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x3D,0xFE);  /* disable auto-threshold */
d3604 92
a3695 18
  if(ModeNo > 0x13) {
    if(SiS_Pr->UseCustomMode) {
       modeflag = SiS_Pr->CModeFlag;
    } else {
       modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    }       
    if( (!(modeflag & DoubleScanMode)) || (!(modeflag & HalfDCLK))) {
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x08,0x34);
       SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
       SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x3D,0x01);
    } else {
       SiS_SetReg1(SiS_Pr->SiS_P3c4,0x08,0xAE);
       SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
    }
  } else {
    SiS_SetReg1(SiS_Pr->SiS_P3c4,0x08,0xAE);
    SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
  }
d3697 36
d3735 43
a3777 8
#ifdef SIS300
void
SiS_SetCRT1FIFO_300(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,PSIS_HW_DEVICE_INFO HwDeviceExtension,
                    USHORT RefreshRateTableIndex)
{
  USHORT  ThresholdLow = 0;
  USHORT  index, VCLK, MCLK, colorth=0;
  USHORT  tempah, temp;
d3779 1
a3779 1
  if(ModeNo > 0x13) {
d3781 2
a3782 7
     if(SiS_Pr->UseCustomMode) {
        VCLK = SiS_Pr->CSRClock;
     } else {
        index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
        index &= 0x3F;
        VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;             /* Get VCLK  */
     }
d3784 3
a3786 8
     switch (SiS_Pr->SiS_ModeType - ModeEGA) {     /* Get half colordepth */
        case 0 : colorth = 1; break;
        case 1 : colorth = 1; break;
        case 2 : colorth = 2; break;
        case 3 : colorth = 2; break;
        case 4 : colorth = 3; break;
        case 5 : colorth = 4; break;
     }
d3788 1
a3788 3
     index = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x3A);
     index &= 0x07;
     MCLK = SiS_Pr->SiS_MCLKData_0[index].CLOCK;           /* Get MCLK  */
d3790 2
a3791 3
     tempah = SiS_GetReg1(SiS_Pr->SiS_P3d4,0x35);
     tempah &= 0xc3;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x16,0x3c,tempah);
d3793 1
a3793 13
     do {
        ThresholdLow = SiS_CalcDelay(SiS_Pr, ROMAddr, VCLK, colorth, MCLK);
        ThresholdLow++;
        if(ThresholdLow < 0x13) break;
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x16,0xfc);
        ThresholdLow = 0x13;
        tempah = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x16);
        tempah >>= 6;
        if(!(tempah)) break;
        tempah--;
        tempah <<= 6;
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x16,0x3f,tempah);
     } while(0);
d3795 1
a3795 1
  } else ThresholdLow = 2;
d3797 1
a3797 3
  /* Write CRT/CPU threshold low, CRT/Engine threshold high */
  temp = (ThresholdLow << 4) | 0x0f;
  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x08,temp);
d3799 5
a3803 3
  temp = (ThresholdLow & 0x10) << 1;
  if(ModeNo > 0x13) temp |= 0x40;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0f,0x9f,temp);
d3805 1
a3805 2
  /* What is this? */
  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x3B,0x09);
d3807 10
a3816 5
  /* Write CRT/CPU threshold high */
  temp = ThresholdLow + 3;
  if(temp > 0x0f) temp = 0x0f;
  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x09,temp);
}
d3818 11
a3828 4
USHORT
SiS_CalcDelay(SiS_Private *SiS_Pr, UCHAR *ROMAddr, USHORT VCLK, USHORT colordepth, USHORT MCLK)
{
  USHORT tempax, tempbx;
d3830 7
a3836 7
  tempbx = SiS_DoCalcDelay(SiS_Pr, MCLK, VCLK, colordepth, 0);
  tempax = SiS_DoCalcDelay(SiS_Pr, MCLK, VCLK, colordepth, 1);
  if(tempax < 4) tempax = 4;
  tempax -= 4;
  if(tempbx < tempax) tempbx = tempax;
  return(tempbx);
}
d3838 1
a3838 6
USHORT
SiS_DoCalcDelay(SiS_Private *SiS_Pr, USHORT MCLK, USHORT VCLK, USHORT colordepth, USHORT key)
{
  const UCHAR ThLowA[]   = { 61, 3,52, 5,68, 7,100,11,
                             43, 3,42, 5,54, 7, 78,11,
                             34, 3,37, 5,47, 7, 67,11 };
d3840 2
a3841 3
  const UCHAR ThLowB[]   = { 81, 4,72, 6,88, 8,120,12,
                             55, 4,54, 6,66, 8, 90,12,
                             42, 4,45, 6,55, 8, 75,12 };
d3843 7
a3849 1
  const UCHAR ThTiming[] = {  1, 2, 2, 3, 0, 1,  1, 2 };
d3851 9
a3859 2
  USHORT tempah, tempal, tempcl, tempbx, temp;
  ULONG  longtemp;
d3861 1
a3861 30
  tempah = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x18);
  tempah &= 0x62;
  tempah >>= 1;
  tempal = tempah;
  tempah >>= 3;
  tempal |= tempah;
  tempal &= 0x07;
  tempcl = ThTiming[tempal];
  tempbx = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x16);
  tempbx >>= 6;
  tempah = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
  tempah >>= 4;
  tempah &= 0x0c;
  tempbx |= tempah;
  tempbx <<= 1;
  if(key == 0) {
     tempal = ThLowA[tempbx + 1];
     tempal *= tempcl;
     tempal += ThLowA[tempbx];
  } else {
     tempal = ThLowB[tempbx + 1];
     tempal *= tempcl;
     tempal += ThLowB[tempbx];
  }
  longtemp = tempal * VCLK * colordepth;
  temp = longtemp % (MCLK * 16);
  longtemp /= (MCLK * 16);
  if(temp) longtemp++;
  return((USHORT)longtemp);
}
d3863 8
a3870 28
#if 0  /* TW: Old fragment, unused */
USHORT
SiS_CalcDelay(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT key)
{
  USHORT data,data2,temp0,temp1;
  UCHAR   ThLowA[]=   {61,3,52,5,68,7,100,11,
                       43,3,42,5,54,7, 78,11,
                       34,3,37,5,47,7, 67,11};

  UCHAR   ThLowB[]=   {81,4,72,6,88,8,120,12,
                       55,4,54,6,66,8, 90,12,
                       42,4,45,6,55,8, 75,12};

  UCHAR   ThTiming[]= {1,2,2,3,0,1,1,2};

  data=SiS_GetReg1(SiS_Pr->SiS_P3c4,0x16);
  data=data>>6;
  data2=SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
  data2=(data2>>4)&0x0C;
  data=data|data2;
  data=data<1;
  if(key==0) {
    temp0=(USHORT)ThLowA[data];
    temp1=(USHORT)ThLowA[data+1];
  } else {
    temp0=(USHORT)ThLowB[data];
    temp1=(USHORT)ThLowB[data+1];
  }
d3872 2
a3873 5
  data2=0;
  data=SiS_GetReg1(SiS_Pr->SiS_P3c4,0x18);
  if(data&0x02) data2=data2|0x01;
  if(data&0x20) data2=data2|0x02;
  if(data&0x40) data2=data2|0x04;
d3875 1
a3875 2
  data=temp1*ThTiming[data2]+temp0;
  return(data);
a3876 1
#endif
d3878 8
a3885 4
void
SiS_SetCRT1FIFO_630(SiS_Private *SiS_Pr, UCHAR *ROMAddr,USHORT ModeNo,
 		    PSIS_HW_DEVICE_INFO HwDeviceExtension,
                    USHORT RefreshRateTableIndex)
d3887 9
a3895 18
  USHORT  i,index,data,VCLK,MCLK,colorth=0;
  ULONG   B,eax,bl,data2;
  USHORT  ThresholdLow=0;
  UCHAR   FQBQData[]= { 
  	0x01,0x21,0x41,0x61,0x81,
        0x31,0x51,0x71,0x91,0xb1,
        0x00,0x20,0x40,0x60,0x80,
        0x30,0x50,0x70,0x90,0xb0,
	0xFF
  };
  UCHAR   FQBQData730[]= {
        0x34,0x74,0xb4,
	0x23,0x63,0xa3,
	0x12,0x52,0x92,
	0x01,0x41,0x81,
	0x00,0x40,0x80,
	0xff
  };
d3897 1
a3897 9
  i=0;
  if(ModeNo >= 0x13) {
    if(SiS_Pr->UseCustomMode) {
       VCLK = SiS_Pr->CSRClock;
    } else {
       index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
       index &= 0x3F;
       VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;          /* Get VCLK  */
    }       
d3899 1
a3899 3
    index = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1A);
    index &= 0x07;
    MCLK = SiS_Pr->SiS_MCLKData_0[index].CLOCK;           /* Get MCLK  */
d3901 1
a3901 9
    data2 = SiS_Pr->SiS_ModeType - ModeEGA;	  /* Get half colordepth */
    switch (data2) {
        case 0 : colorth = 1; break;
        case 1 : colorth = 1; break;
        case 2 : colorth = 2; break;
        case 3 : colorth = 2; break;
        case 4 : colorth = 3; break;
        case 5 : colorth = 4; break;
    }
d3903 2
a3904 5
    if(HwDeviceExtension->jChipType == SIS_730) {
    
       do {
          B = SiS_CalcDelay2(SiS_Pr, ROMAddr, FQBQData730[i], HwDeviceExtension) * VCLK * colorth;
	  bl = B / (MCLK * 16);
d3906 4
a3909 5
          if(B == bl * 16 * MCLK) {
             bl = bl + 1;
          } else {
             bl = bl + 2;
          }
d3911 1
a3911 17
          if(bl > 0x13) {
             if(FQBQData730[i+1] == 0xFF) {
                ThresholdLow = 0x13;
                break;
             }
             i++;
          } else {
             ThresholdLow = bl;
             break;
          }
       } while(FQBQData730[i] != 0xFF);
       
    } else {
    
       do {
          B = SiS_CalcDelay2(SiS_Pr, ROMAddr, FQBQData[i], HwDeviceExtension) * VCLK * colorth;
          bl = B / (MCLK * 16);
d3913 2
a3914 5
          if(B == bl * 16 * MCLK) {
             bl = bl + 1;
          } else {
             bl = bl + 2;
          }
d3916 3
a3918 20
          if(bl > 0x13) {
             if(FQBQData[i+1] == 0xFF) {
                ThresholdLow = 0x13;
                break;
             }
             i++;
          } else {
             ThresholdLow = bl;
             break;
          }
       } while(FQBQData[i] != 0xFF);
    }
  }
  else {
    if(HwDeviceExtension->jChipType == SIS_730) { 
    } else {
      i = 9;
    }
    ThresholdLow = 0x02;
  }
d3920 5
a3924 13
  /* Write foreground and background queue */
  if(HwDeviceExtension->jChipType == SIS_730) {  
   
     data2 = FQBQData730[i];
     data2 = (data2 & 0xC0) >> 5;
     data2 <<= 8;

#ifndef LINUX_XF86
     SiS_SetReg4(0xcf8,0x80000050);
     eax = SiS_GetReg3(0xcfc);
     eax &= 0xfffff9ff;
     eax |= data2;
     SiS_SetReg4(0xcfc,eax);
d3926 1
a3926 8
     /* We use pci functions X offers. We use pcitag 0, because
      * we want to read/write to the host bridge (which is always
      * 00:00.0 on 630, 730 and 540), not the VGA device.
      */
     eax = pciReadLong(0x00000000, 0x50);
     eax &= 0xfffff9ff;
     eax |= data2;
     pciWriteLong(0x00000000, 0x50, eax);
d3928 39
d3968 5
a3972 17
     /* Write GUI grant timer (PCI config 0xA3) */
     data2 = FQBQData730[i] << 8;
     data2 = (data2 & 0x0f00) | ((data2 & 0x3000) >> 8);
     data2 <<= 20;
     
#ifndef LINUX_XF86
     SiS_SetReg4(0xcf8,0x800000A0);
     eax = SiS_GetReg3(0xcfc);
     eax &= 0x00ffffff;
     eax |= data2;
     SiS_SetReg4(0xcfc,eax);
#else
     eax = pciReadLong(0x00000000, 0xA0);
     eax &= 0x00ffffff;
     eax |= data2;
     pciWriteLong(0x00000000, 0xA0, eax);
#endif          
d3974 2
a3975 5
  } else {
  
     data2 = FQBQData[i];
     data2 = (data2 & 0xf0) >> 4;
     data2 <<= 24;
d3977 5
a3981 11
#ifndef LINUX_XF86
     SiS_SetReg4(0xcf8,0x80000050);
     eax = SiS_GetReg3(0xcfc);
     eax &= 0xf0ffffff;
     eax |= data2;
     SiS_SetReg4(0xcfc,eax);
#else
     eax = pciReadLong(0x00000000, 0x50);
     eax &= 0xf0ffffff;
     eax |= data2;
     pciWriteLong(0x00000000, 0x50, eax);
d3984 7
a3990 4
     /* Write GUI grant timer (PCI config 0xA3) */
     data2 = FQBQData[i];
     data2 &= 0x0f;
     data2 <<= 24;
d3992 35
a4026 11
#ifndef LINUX_XF86
     SiS_SetReg4(0xcf8,0x800000A0);
     eax = SiS_GetReg3(0xcfc);
     eax &= 0xf0ffffff;
     eax |= data2;
     SiS_SetReg4(0xcfc,eax);
#else
     eax = pciReadLong(0x00000000, 0xA0);
     eax &= 0xf0ffffff;
     eax |= data2;
     pciWriteLong(0x00000000, 0xA0, eax);
a4027 2
     
  }
d4029 5
a4033 3
  /* Write CRT/CPU threshold low, CRT/Engine threshold high */
  data = ((ThresholdLow & 0x0f) << 4) | 0x0f;
  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x08,data);
d4035 1
a4035 2
  data = (ThresholdLow & 0x10) << 1;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xDF,data);
d4037 2
a4038 2
  /* What is this? */
  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x3B,0x09);
d4040 8
a4047 5
  /* Write CRT/CPU threshold high (gap = 3) */
  data = ThresholdLow + 3;
  if(data > 0x0f) data = 0x0f;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x09,0x80,data);
}
d4049 2
a4050 32
USHORT
SiS_CalcDelay2(SiS_Private *SiS_Pr, UCHAR *ROMAddr,UCHAR key, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT data,index;
  const UCHAR  LatencyFactor[] = { 
   	97, 88, 86, 79, 77, 00,       /*; 64  bit    BQ=2   */
        00, 87, 85, 78, 76, 54,       /*; 64  bit    BQ=1   */
        97, 88, 86, 79, 77, 00,       /*; 128 bit    BQ=2   */
        00, 79, 77, 70, 68, 48,       /*; 128 bit    BQ=1   */
        80, 72, 69, 63, 61, 00,       /*; 64  bit    BQ=2   */
        00, 70, 68, 61, 59, 37,       /*; 64  bit    BQ=1   */
        86, 77, 75, 68, 66, 00,       /*; 128 bit    BQ=2   */
        00, 68, 66, 59, 57, 37        /*; 128 bit    BQ=1   */
  };
  const UCHAR  LatencyFactor730[] = {
         69, 63, 61, 
	 86, 79, 77,
	103, 96, 94,
	120,113,111,
	137,130,128,    /* --- Table ends with this entry, data below */
	137,130,128,	/* to avoid using illegal values              */
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
  };
d4052 1
a4052 12
  if(HwDeviceExtension->jChipType == SIS_730) {
     index = ((key & 0x0f) * 3) + ((key & 0xC0) >> 6);
     data = LatencyFactor730[index];
  } else {			    
     index = (key & 0xE0) >> 5;
     if(key & 0x10) index +=6;
     if(!(key & 0x01)) index += 24;
     data = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x14);
     if(data & 0x0080) index += 12;
     data = LatencyFactor[index];
  }
  return(data);
d4054 1
a4054 1
#endif
a4055 2
/* =============== Autodetection ================ */
/*             I N C O M P L E T E                */
d4057 1
d4059 1
a4059 1
SiS_GetPanelID(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
d4067 1
a4067 1
      0x0189, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
d4073 1
a4073 1
  USHORT tempax,tempbx,tempah,temp;
d4075 1
a4075 1
  if(HwDeviceExtension->jChipType < SIS_315H) {
d4077 21
a4097 21
    tempax = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x18);
    tempbx = tempax & 0x0F;
    if(!(tempax & 0x10)){
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1){
        tempbx = 0;
        temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x38);
        if(temp & 0x40) tempbx |= 0x08;
        if(temp & 0x20) tempbx |= 0x02;
        if(temp & 0x01) tempbx |= 0x01;
        temp = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x39);
        if(temp & 0x80) tempbx |= 0x04;
      } else {
        return 0;
      }
    }
    tempbx = PanelTypeTable300[tempbx];
    tempbx |= LCDSync;
    temp = tempbx & 0x00FF;
    SiS_SetReg1(SiS_Pr->SiS_P3d4,0x36,temp);
    temp = (tempbx & 0xFF00) >> 8;
    SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,~(LCDSyncBit|LCDRGB18Bit),temp);
d4101 7
a4107 5
    tempax = tempah = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1a);
    tempax &= 0x1e;
    tempax >>= 1;
    if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
       if(tempax == 0) {
d4112 16
a4127 16
       }
       temp = tempax & 0xff;
       tempax--;
       tempbx = PanelTypeTable310LVDS[tempax];
    } else {
       tempbx = PanelTypeTable31030x[tempax];
       temp = tempbx & 0xff;
    }
    SiS_SetReg1(SiS_Pr->SiS_P3d4,0x36,temp);
    tempbx = (tempbx & 0xff00) >> 8;
    temp = tempbx & 0xc1;
    SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,~(LCDSyncBit|LCDRGB18Bit),temp);
    if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
       temp = tempbx & 0x04;
       SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x39,0xfb,temp);
    }
d4132 1
d4134 6
d4141 2
a4142 4
#ifdef LINUXBIOS

void
SiS_DetectMonitor(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,USHORT BaseAddr)
d4144 24
a4167 12
  UCHAR  DAC_TEST_PARMS[] = {0x0F,0x0F,0x0F};
  UCHAR  DAC_CLR_PARMS[]  = {0x00,0x00,0x00};
  USHORT SR1F;

  SR1F = SiS_GetReg1(SiS_Pr->SiS_P3c4,0x1F);		/* backup DAC pedestal */
  SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1F,0x04);

  if(SiS_Pr->SiS_IF_DEF_LVDS == 0) {
    if(!(SiS_BridgeIsOn(SiS_Pr, BaseAddr))) {
      SiS_SetReg1(SiS_Pr->SiS_P3d4,0x30,0x41);
    }
  }
d4169 5
a4173 115
  SiSSetMode(SiS_Pr,HwDeviceExtension,0x2E);
  if(HwDeviceExtension->jChipType >= SIS_650) {
     /* TW: On 650 only - enable CRT1 */
     SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x63,0xbf);
  }
  SiS_SetReg3(SiS_Pr->SiS_P3c6,0xff);
  SiS_ClearDAC(SiS_Pr, SiS_Pr->SiS_P3c8);
  SiS_LongWait(SiS_Pr);
  SiS_LongWait(SiS_Pr);
  SiS_LongWait(SiS_Pr);
  SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x32,0xDF,0x00);
  if(SiS_TestMonitorType(SiS_Pr, DAC_TEST_PARMS[0],DAC_TEST_PARMS[1],DAC_TEST_PARMS[2])) {
    SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x32,0xDF,0x20);
  } else if(SiS_TestMonitorType(SiS_Pr, DAC_TEST_PARMS[0],DAC_TEST_PARMS[1],DAC_TEST_PARMS[2])) {
    SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x32,0xDF,0x20);
  }
  SiS_TestMonitorType(SiS_Pr, DAC_CLR_PARMS[0],DAC_CLR_PARMS[1],DAC_CLR_PARMS[2]);

  SiS_SetReg1(SiS_Pr->SiS_P3c4,0x1F,SR1F);
}

USHORT
SiS_TestMonitorType(SiS_Private *SiS_Pr, UCHAR R_DAC,UCHAR G_DAC,UCHAR B_DAC)
{
   USHORT temp,tempbx;

   tempbx = R_DAC * 0x4d + G_DAC * 0x97 + B_DAC * 0x1c;
   if((tempbx & 0x00ff) > 0x80) tempbx += 0x100;
   tempbx = (tempbx & 0xFF00) >> 8;
   R_DAC = (UCHAR) tempbx;
   G_DAC = (UCHAR) tempbx;
   B_DAC = (UCHAR) tempbx;

   SiS_SetReg3(SiS_Pr->SiS_P3c8,0x00);
   SiS_SetReg3(SiS_Pr->SiS_P3c9,R_DAC);
   SiS_SetReg3(SiS_Pr->SiS_P3c9,G_DAC);
   SiS_SetReg3(SiS_Pr->SiS_P3c9,B_DAC);
   SiS_LongWait(SiS_Pr);
   temp=SiS_GetReg2(SiS_Pr->SiS_P3c2);
   if(temp & 0x10) return(1);
   else return(0);
}

void
SiS_GetSenseStatus(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension,UCHAR *ROMAddr)
{
  USHORT tempax=0,tempbx,tempcx,temp;
  USHORT P2reg0=0,SenseModeNo=0,OutputSelect=*SiS_Pr->pSiS_OutputSelect;
  USHORT ModeIdIndex,i;
  USHORT BaseAddr = (USHORT)HwDeviceExtension->ulIOAddress;

  if(SiS_Pr->SiS_IF_DEF_LVDS == 1){
    SiS_GetPanelID(SiS_Pr);
    temp=LCDSense;
    temp=temp|SiS_SenseCHTV(SiS_Pr);
    tempbx=~(LCDSense|AVIDEOSense|SVIDEOSense);
    SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x32,tempbx,temp);
  } else {       /* for 301 */
    if(SiS_Pr->SiS_IF_DEF_HiVision==1) {  /* for HiVision */
      tempax=SiS_GetReg1(SiS_Pr->SiS_P3c4,0x38);
      temp=tempax&0x01;
      tempax=SiS_GetReg1(SiS_Pr->SiS_P3c4,0x3A);
      temp=temp|(tempax&0x02);
      SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x32,0xA0,temp);
    } else {
      if(SiS_BridgeIsOn(SiS_Pr, BaseAddr)==0) {    /* TW: Inserted "==0" */
        P2reg0 = SiS_GetReg1(SiS_Pr->SiS_Part2Port,0x00);
        if(!(SiS_BridgeIsEnable(SiS_Pr, BaseAddr,HwDeviceExtension))) {
          SenseModeNo=0x2e;
          temp = SiS_SearchModeID(SiS_Pr, ROMAddr,&SenseModeNo,&ModeIdIndex);
          SiS_Pr->SiS_SetFlag = 0x00;
          SiS_Pr->SiS_ModeType = ModeVGA;
          SiS_Pr->SiS_VBInfo = SetCRT2ToRAMDAC |LoadDACFlag |SetInSlaveMode;
          SiS_SetCRT2Group301(SiS_Pr, BaseAddr,ROMAddr,SenseModeNo,HwDeviceExtension);
          for(i=0;i<20;i++) {
            SiS_LongWait(SiS_Pr);
          }
        }
        SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x00,0x1c);
        tempax=0;
        tempbx=*SiS_Pr->pSiS_RGBSenseData;
	if(SiS_Is301B(SiS_Pr, BaseAddr)){
                tempbx=*SiS_Pr->pSiS_RGBSenseData2;
        }
        tempcx=0x0E08;
        if(SiS_Sense(SiS_Pr, tempbx,tempcx)){
          if(SiS_Sense(SiS_Pr, tempbx,tempcx)){
            tempax=tempax|Monitor2Sense;
          }
        }
        tempbx=*SiS_Pr->pSiS_YCSenseData;
        if(SiS_Is301B(SiS_Pr, BaseAddr)){
               tempbx=*SiS_Pr->pSiS_YCSenseData2;
        }
        tempcx=0x0604;
        if(SiS_Sense(SiS_Pr, tempbx,tempcx)){
          if(SiS_Sense(SiS_Pr,tempbx,tempcx)){
            tempax=tempax|SVIDEOSense;
          }
        }

	if(ROMAddr && SiS_Pr->SiS_UseROM) {
#ifdef SIS300
	   if((HwDeviceExtension->jChipType==SIS_630)||
              (HwDeviceExtension->jChipType==SIS_730)) {
		OutputSelect = ROMAddr[0xfe];
	   }
#endif
#ifdef SIS315H
	   if(HwDeviceExtension->jChipType >= SIS_315H) {
	        OutputSelect = ROMAddr[0xf3];
		if(HwDeviceExtension->jChipType == SIS_330) {
		     OutputSelect = ROMAddr[0x11b];
		}
	   }
a4174 112
        }
        if(OutputSelect & BoardTVType){
          tempbx = *SiS_Pr->pSiS_VideoSenseData;
          if(SiS_Is301B(SiS_Pr, BaseAddr)){
             tempbx = *SiS_Pr->pSiS_VideoSenseData2;
          }
          tempcx = 0x0804;
          if(SiS_Sense(SiS_Pr, tempbx,tempcx)){
            if(SiS_Sense(SiS_Pr, tempbx,tempcx)){
              tempax |= AVIDEOSense;
            }
          }
        } else {
          if(!(tempax & SVIDEOSense)){
            tempbx = *SiS_Pr->pSiS_VideoSenseData;
            if(SiS_Is301B(SiS_Pr, BaseAddr)){
              tempbx = *SiS_Pr->pSiS_VideoSenseData2;
            }
            tempcx = 0x0804;
            if(SiS_Sense(SiS_Pr,tempbx,tempcx)){
              if(SiS_Sense(SiS_Pr, tempbx,tempcx)){
                tempax |= AVIDEOSense;
              }
            }
          }
        }
      }

      if(SiS_SenseLCD(SiS_Pr, HwDeviceExtension)){
        tempax |= LCDSense;
      }

      tempbx=0;
      tempcx=0;
      SiS_Sense(SiS_Pr, tempbx,tempcx);

      if(SiS_Pr->SiS_VBType & (VB_SIS30xLV|VB_SIS30xNEW)) {
         tempax &= 0x00ef;   /* 301lv to disable CRT2*/
      }
      SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x32,~0xDF,tempax);
      SiS_SetReg1(SiS_Pr->SiS_Part2Port,0x00,P2reg0);
      if(!(P2reg0 & 0x20)) {
        SiS_Pr->SiS_VBInfo = DisableCRT2Display;
        SiS_SetCRT2Group301(SiS_Pr,BaseAddr,ROMAddr,SenseModeNo,HwDeviceExtension);
      }
    }
  }
}

BOOLEAN
SiS_Sense(SiS_Private *SiS_Pr, USHORT tempbx,USHORT tempcx)
{
  USHORT temp,i,tempch;

  temp = tempbx & 0xFF;
  SiS_SetReg1(SiS_Pr->SiS_Part4Port,0x11,temp);
  temp = (tempbx & 0xFF00) >> 8;
  temp |= (tempcx & 0x00FF);
  SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x10,~0x1F,temp);

  for(i=0; i<10; i++) SiS_LongWait(SiS_Pr);

  tempch = (tempcx & 0x7F00) >> 8;
  temp = SiS_GetReg1(SiS_Pr->SiS_Part4Port,0x03);
  temp ^= 0x0E;
  temp &= tempch;
  if(temp>0) return 1;
  else return 0;
}

USHORT
SiS_SenseLCD(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT temp;

  temp=SiS_GetPanelID(SiS_Pr);
  if(!temp)  temp=SiS_GetLCDDDCInfo(SiS_Pr, HwDeviceExtension);
  return(temp);
}

BOOLEAN
SiS_GetLCDDDCInfo(SiS_Private *SiS_Pr, PSIS_HW_DEVICE_INFO HwDeviceExtension)
{
  USHORT temp;
  /*add lcd sense*/
  if(HwDeviceExtension->ulCRT2LCDType==LCD_UNKNOWN)
    	return 0;
  else{
     	temp=(USHORT)HwDeviceExtension->ulCRT2LCDType;
     	SiS_SetReg1(SiS_Pr->SiS_P3d4,0x36,temp);
  	return 1;
  }
}

USHORT
SiS_SenseCHTV(SiS_Private *SiS_Pr)
{
  USHORT temp,push0e,status;

  status=0;
  push0e = SiS_GetCH700x(SiS_Pr, 0x0e);
  push0e = (push0e << 8) | 0x0e;
  SiS_SetCH700x(SiS_Pr, 0x0b0e);
  SiS_SetCH700x(SiS_Pr, 0x0110);
  SiS_SetCH700x(SiS_Pr, 0x0010);
  temp = SiS_GetCH700x(SiS_Pr, 0x10);
  if(temp & 0x08) status |= SVIDEOSense;
  if(temp & 0x02) status |= AVIDEOSense;
  SiS_SetCH700x(SiS_Pr, push0e);
  return(status);
}
#endif /* LINUXBIOS */
d4176 5
a4180 1
/*  ================ for TC only =================  */
d4182 7
a4188 1
#ifdef TC
d4190 5
a4194 28
int
INT1AReturnCode(union REGS regs)
{
  if (regs.x.cflag)
  {
    /*printf("Error to find pci device!\n"); */
    return 1;
  }

  switch(regs.h.ah)
  {
    case 0: return 0;
            break;
    case 0x81: printf("Function not support\n");
               break;
    case 0x83: printf("bad vendor id\n");
               break;
    case 0x86: printf("device not found\n");
               break;
    case 0x87: printf("bad register number\n");
               break;
    case 0x88: printf("set failed\n");
               break;
    case 0x89: printf("buffer too small");
               break;
  }
  return 1;
}
a4195 4
unsigned
FindPCIIOBase(unsigned index,unsigned deviceid)
{
  union REGS regs;
d4197 3
a4199 23
  regs.h.ah = 0xb1;  /*PCI_FUNCTION_ID */
  regs.h.al = 0x02;  /*FIND_PCI_DEVICE */
  regs.x.cx = deviceid;
  regs.x.dx = 0x1039;
  regs.x.si = index;  /* find n-th device */

  int86(0x1A, &regs, &regs);

  if (INT1AReturnCode(regs)!=0)
    return 0;

  /* regs.h.bh *//* bus number */
  /* regs.h.bl *//* device number */
  regs.h.ah = 0xb1;  /*PCI_FUNCTION_ID */
  regs.h.al = 0x09;  /*READ_CONFIG_WORD */
  regs.x.cx = deviceid;
  regs.x.dx = 0x1039;
  regs.x.di = 0x18;  /* register number */
  int86(0x1A, &regs, &regs);

  if (INT1AReturnCode(regs)!=0)
    return 0;
  return regs.x.cx;
a4201 1

d4203 1
a4203 1
main(int argc, char *argv[])
d4205 2
a4206 3
  SIS_HW_DEVICE_INFO  HwDeviceExtension;
  USHORT temp;
  USHORT ModeNo;
d4208 2
a4209 2
  /*HwDeviceExtension.pjVirtualRomBase =(PUCHAR) MK_FP(0xC000,0); */
  /*HwDeviceExtension.pjVideoMemoryAddress = (PUCHAR)MK_FP(0xA000,0);*/
d4211 7
a4217 4
#ifdef SIS300  
  HwDeviceExtension.ulIOAddress = (FindPCIIOBase(0,0x6300)&0xFF80) + 0x30;
  HwDeviceExtension.jChipType = SIS_630;
#endif
d4219 1
a4219 6
#ifdef SIS315H  
//  HwDeviceExtension.ulIOAddress = (FindPCIIOBase(0,0x5315)&0xFF80) + 0x30;
//  HwDeviceExtension.jChipType = SIS_550;
  HwDeviceExtension.ulIOAddress = (FindPCIIOBase(0,0x325)&0xFF80) + 0x30;
  HwDeviceExtension.jChipType = SIS_315H;
#endif
d4221 2
a4222 18
  HwDeviceExtension.ujVBChipID = VB_CHIP_301;
  strcpy(HwDeviceExtension.szVBIOSVer,"0.84");
  HwDeviceExtension.bSkipDramSizing = FALSE;
  HwDeviceExtension.ulVideoMemorySize = 0;
  if(argc==2) {
    ModeNo=atoi(argv[1]);
  }
  else {
    ModeNo=0x2e;
    /*ModeNo=0x37; */ /* 1024x768x 4bpp */
    /*ModeNo=0x38; *//* 1024x768x 8bpp */
    /*ModeNo=0x4A; *//* 1024x768x 16bpp */
    /*ModeNo=0x47;*/ /* 800x600x 16bpp */
  }
 /* SiSInit(SiS_Pr, &HwDeviceExtension);*/
  SiSSetMode(SiS_Pr, &HwDeviceExtension, ModeNo);
}
#endif /* TC END */
d4224 2
a4225 1
/* ================ LINUX XFREE86 ====================== */
d4227 8
a4234 1
/* Helper functions */
d4236 6
a4241 122
#ifdef LINUX_XF86
USHORT
SiS_CalcModeIndex(ScrnInfoPtr pScrn, DisplayModePtr mode)
{
   SISPtr pSiS = SISPTR(pScrn);
   UShort i = (pSiS->CurrentLayout.bitsPerPixel+7)/8 - 1;
   UShort ModeIndex = 0;

   if((pSiS->HaveCustomModes) && (!(mode->type & M_T_DEFAULT))) 
   	return 0xfe;
   
   switch(mode->HDisplay)
   {
     case 320:
          if(mode->VDisplay == 480) {
                ModeIndex = ModeIndex_320x480[i];
	  }
          break;
     case 512:
          if(mode->VDisplay == 384) {
             ModeIndex = ModeIndex_512x384[i];
	  }
          break;
     case 640:
          if(mode->VDisplay == 480) {
             ModeIndex = ModeIndex_640x480[i];
	  } else if(mode->VDisplay == 400) {
	     ModeIndex = ModeIndex_640x400[i];
	  }
          break;
     case 720:
          if(mode->VDisplay == 480) {
                ModeIndex = ModeIndex_720x480[i];
          } else if(mode->VDisplay == 576) {
                ModeIndex = ModeIndex_720x576[i];
          }
          break;
     case 800:
	  if(mode->VDisplay == 600) {
             ModeIndex = ModeIndex_800x600[i];
	  } else if(mode->VDisplay == 480) {
	     ModeIndex = ModeIndex_800x480[i];
	  }
          break;
     case 848:
	  if(mode->VDisplay == 480) {
             ModeIndex = ModeIndex_848x480[i];
	  }
	  break;
     case 856:
	  if(mode->VDisplay == 480) {
             ModeIndex = ModeIndex_856x480[i];
	  }
	  break;
     case 1024:
          if(mode->VDisplay == 768) {
	        ModeIndex = ModeIndex_1024x768[i];
	  } else if(mode->VDisplay == 576) {
	        ModeIndex = ModeIndex_1024x576[i];
	  } else if(pSiS->VGAEngine == SIS_300_VGA) {
	     if(mode->VDisplay == 600) {
	        ModeIndex = ModeIndex_1024x600[i];
             }
	  }
          break;
     case 1152:
          if(mode->VDisplay == 864) {
	        ModeIndex = ModeIndex_1152x864[i];
          } else if(pSiS->VGAEngine == SIS_300_VGA) {
	     if(mode->VDisplay == 768) {
	        ModeIndex = ModeIndex_1152x768[i];
             }
	  }
	  break;
     case 1280:
          if(mode->VDisplay == 960) {
             if(pSiS->VGAEngine == SIS_300_VGA) {
	        ModeIndex = ModeIndex_300_1280x960[i];
             } else {
                ModeIndex = ModeIndex_310_1280x960[i];
             }
	  } else if (mode->VDisplay == 1024) {
	     ModeIndex = ModeIndex_1280x1024[i];
	  } else if (mode->VDisplay == 720) {
	        ModeIndex = ModeIndex_1280x720[i];
	  } else if(pSiS->VGAEngine == SIS_315_VGA) {
	     if (mode->VDisplay == 768) {
	        ModeIndex = ModeIndex_1280x768[i];
	     }
	  }
          break;
     case 1360:
	  if(mode->VDisplay == 768) {
	     ModeIndex = ModeIndex_1360x768[i];
	  }
          break;
     case 1400:
          if(pSiS->VGAEngine == SIS_315_VGA) {
	     if(mode->VDisplay == 1050) {
	        ModeIndex = ModeIndex_1400x1050[i];
             }
	  }
          break;
     case 1600:
          if(mode->VDisplay == 1200) {
             ModeIndex = ModeIndex_1600x1200[i];
	  }
          break;
     case 1920:
          if(mode->VDisplay == 1440) {
             ModeIndex = ModeIndex_1920x1440[i];
	  }
          break;
     case 2048:
          if(mode->VDisplay == 1536) {
             if(pSiS->VGAEngine == SIS_300_VGA) {
	         ModeIndex = ModeIndex_300_2048x1536[i];
  	     } else {
	         ModeIndex = ModeIndex_310_2048x1536[i];
             }
	  }
          break;
d4244 4
a4247 2
   return(ModeIndex);
}
d4249 6
a4254 6
USHORT
SiS_CheckCalcModeIndex(ScrnInfoPtr pScrn, DisplayModePtr mode, int VBFlags)
{
   SISPtr pSiS = SISPTR(pScrn);
   UShort i = (pSiS->CurrentLayout.bitsPerPixel+7)/8 - 1;    
   UShort ModeIndex = 0;
d4256 8
a4263 120
   if(VBFlags & CRT2_LCD) {

      if( (mode->HDisplay <= pSiS->LCDwidth) &&
          (mode->VDisplay <= pSiS->LCDheight) ) {

        if(VBFlags & VB_LVDS) {        		/* LCD on LVDS */

          switch(mode->HDisplay)
  	  {
	  case 512:
		if(mode->VDisplay == 384) {
		   if(pSiS->LCDwidth != 1024 || pSiS->LCDheight != 600) { /* not supported on 1024x600 panels */
		      ModeIndex = ModeIndex_512x384[i];
		   }
		}
		break;
	  case 640:
		if(mode->VDisplay == 480) {
		   ModeIndex = ModeIndex_640x480[i];
		} else if(mode->VDisplay == 400) {
		   ModeIndex = ModeIndex_640x400[i];
		}
		break;
	  case 800:
		if(mode->VDisplay == 600) {
		   ModeIndex = ModeIndex_800x600[i];
		}
		break;
	  case 1024:
		if(mode->VDisplay == 768) {
		   ModeIndex = ModeIndex_1024x768[i];
		} else if(pSiS->VGAEngine == SIS_300_VGA) {
		   if(mode->VDisplay == 600) {
		      if(pSiS->LCDheight == 600) {  /* This mode only supported on 1024x600 panels */
		         ModeIndex = ModeIndex_1024x600[i];
		      }
		   }
		}
		break;
	  case 1152:
		if(pSiS->VGAEngine == SIS_300_VGA) {
		   if(mode->VDisplay == 768) {
			ModeIndex = ModeIndex_1152x768[i];
		   }
		}
		break;
	  case 1280:
		if(mode->VDisplay == 1024) {
		   ModeIndex = ModeIndex_1280x1024[i];
		} else if(pSiS->VGAEngine == SIS_315_VGA) {
		   if(mode->VDisplay == 768) {
		      ModeIndex = ModeIndex_1280x768[i];
		   }
		}
		break;
	  case 1400:
	        if(mode->VDisplay == 1050) {
		   if(pSiS->VGAEngine == SIS_315_VGA) {
		      ModeIndex = ModeIndex_1400x1050[i];
		   }
		}
		break;
          }

        } else {                       	 	/* LCD on 301(B) */

          switch(mode->HDisplay)
	  {
	  case 512:
		if(mode->VDisplay == 384) {
		   ModeIndex = ModeIndex_512x384[i];
		}
		break;
	  case 640:
		if(mode->VDisplay == 480) {
		   ModeIndex = ModeIndex_640x480[i];
		} else if(mode->VDisplay == 400) {
		   ModeIndex = ModeIndex_640x400[i];
		}
		break;
	  case 800:
		if(mode->VDisplay == 600) {
		   ModeIndex = ModeIndex_800x600[i];
		}
		break;
	  case 1024:
		if(mode->VDisplay == 768) {
		   ModeIndex = ModeIndex_1024x768[i];
		} 
		break;
	  case 1280:
		if(mode->VDisplay == 960) {
		   if(pSiS->VGAEngine == SIS_300_VGA) {
		      ModeIndex = ModeIndex_300_1280x960[i];
		   } else {
		      ModeIndex = ModeIndex_310_1280x960[i];
		   }
                } else if (mode->VDisplay == 1024) {
	             ModeIndex = ModeIndex_1280x1024[i];
	        }
		break;
	  case 1400:
	        if(mode->VDisplay == 1050) {
		   if(pSiS->VGAEngine == SIS_315_VGA) {
		      ModeIndex = ModeIndex_1400x1050[i];
		   }
		}
		break;
	  case 1600:
		if(mode->VDisplay == 1200) {
		   ModeIndex = ModeIndex_1600x1200[i];
		}
		break;
	  }

        }

      }

   } else if(VBFlags & CRT2_TV) {
d4265 2
a4266 31
      if(VBFlags & VB_CHRONTEL) {		/* TV on Chrontel */

        switch(mode->HDisplay)
	{
      	case 512:
	        if(pSiS->VGAEngine == SIS_315_VGA) {
		   if(mode->VDisplay == 384) {
		      ModeIndex = ModeIndex_512x384[i];
		   }
		}
		break;
	case 640:
		if(mode->VDisplay == 480) {
		   ModeIndex = ModeIndex_640x480[i];
		} else if(mode->VDisplay == 400) {
		   ModeIndex = ModeIndex_640x400[i];
		}
		break;
	case 800:
		if(mode->VDisplay == 600) {
		   ModeIndex = ModeIndex_800x600[i];
		}
		break;
	case 1024:
		if(mode->VDisplay == 768) {
		   if(pSiS->VGAEngine == SIS_315_VGA) {
		      ModeIndex = ModeIndex_1024x768[i];
		   }
		}
		break;
        }
d4268 1
a4268 1
      } else {				    /* TV on 301(B/LV) */
d4270 12
a4281 32
        switch(mode->HDisplay)
	{
      	case 512:
		if(mode->VDisplay == 384) {
		   ModeIndex = ModeIndex_512x384[i];
		}
		break;
	case 640:
		if(mode->VDisplay == 480) {
		   ModeIndex = ModeIndex_640x480[i];
		}
		break;
	case 720:
                if(mode->VDisplay == 480) {
                   ModeIndex = ModeIndex_720x480[i];
                } else if(mode->VDisplay == 576) {
                   ModeIndex = ModeIndex_720x576[i];
                }
                break;
	case 800:
		if(mode->VDisplay == 600) {
		   ModeIndex = ModeIndex_800x600[i];
		}
		break;
	case 1024:  /* Not supported with depth 32 */
		if((mode->VDisplay == 768) && (i != 3) ) {
		   if(VBFlags & (VB_301B|VB_302B|VB_30xLV|VB_30xLVX)) {
		      ModeIndex = ModeIndex_1024x768[i];
		   }
		}
		break;
        }
d4283 2
a4284 1
      }
d4286 3
a4288 1
   } else if(VBFlags & CRT2_VGA) {		/* CRT2 is VGA2 */
d4290 5
a4294 54
	switch(mode->HDisplay)
	{
	case 640:
		if(mode->VDisplay == 480) {
		   ModeIndex = ModeIndex_640x480[i];
		} else if(mode->VDisplay == 400) {
		   ModeIndex = ModeIndex_640x400[i];
		}
		break;
	case 800:
		if(mode->VDisplay == 600) {
		   ModeIndex = ModeIndex_800x600[i];
   	        } else if(mode->VDisplay == 480) {
		   ModeIndex = ModeIndex_800x480[i];
		}
		break;
	case 848:
		if(mode->VDisplay == 480) {
		   ModeIndex = ModeIndex_848x480[i];
		}
		break;
	case 856:
		if(mode->VDisplay == 480) {
		   ModeIndex = ModeIndex_856x480[i];
		}
		break;		
	case 1024:
		if(mode->VDisplay == 768) {
			ModeIndex = ModeIndex_1024x768[i];
		} else if(mode->VDisplay == 576) {
			ModeIndex = ModeIndex_1024x576[i];
		}
		break;
	case 1152:
	        if(mode->VDisplay == 864) {
		   ModeIndex = ModeIndex_1152x864[i];
		} else if(pSiS->VGAEngine == SIS_300_VGA) {
		   if(mode->VDisplay == 768) {
			ModeIndex = ModeIndex_1152x768[i];
		   }
		}
		break;
	case 1280:
		if (mode->VDisplay == 1024) {
		   ModeIndex = ModeIndex_1280x1024[i];
		} else if (mode->VDisplay == 720) {
		   ModeIndex = ModeIndex_1280x720[i];
		} else if(pSiS->VGAEngine == SIS_315_VGA) {
		   if (mode->VDisplay == 768) {
			ModeIndex = ModeIndex_1280x768[i];
		   }
		}
		break;
	}
d4296 13
a4308 1
   } else {				/* CRT1 only, no CRT2 */
d4310 1
a4310 1
       ModeIndex = SiS_CalcModeIndex(pScrn, mode);
d4312 1
a4312 1
   }
d4314 1
a4314 2
   return(ModeIndex);
}
d4322 9
a4330 7
   
#ifdef SISDUALHEAD
   if( ((!pSiS->DualHeadMode) && (VBFlags & DISPTYPE_DISP2)) ||
       ((pSiS->DualHeadMode) && (!pSiS->SecondHead)) ) return 0;
#else      
   if(VBFlags & DISPTYPE_DISP2) return 0; 
#endif   
d4333 1
a4333 1
   
d4338 1
a4338 3
   pSiS->SiS_Pr->CHBlankStart = pSiS->SiS_Pr->CHDisplay;
   pSiS->SiS_Pr->CHBlankEnd = pSiS->SiS_Pr->CHTotal;
   
d4343 19
a4363 2
   
   pSiS->SiS_Pr->CFlags = mode->Flags;
d4365 23
a4387 2
   SiS_compute_vclk(pSiS->SiS_Pr->CDClock, &out_n, &out_dn, &out_div, &out_sbit, &out_scale);
   
d4389 5
a4393 9
   xf86DrvMsg(pScrn->scrnIndex, X_INFO, "Clock %d: n %d dn %d div %d sb %d sc %d\n",
      	pSiS->SiS_Pr->CDClock, out_n, out_dn, out_div, out_sbit, out_scale);
#endif	

   pSiS->SiS_Pr->CSR2B = (out_div == 2) ? 0x80 : 0x00;
   pSiS->SiS_Pr->CSR2B |= ((out_n - 1) & 0x7f);
   pSiS->SiS_Pr->CSR2C = (out_dn - 1) & 0x1f;
   pSiS->SiS_Pr->CSR2C |= (((out_scale - 1) & 3) << 5);
   pSiS->SiS_Pr->CSR2C |= ((out_sbit & 0x01) << 7);
d4396 1
a4396 26
   pSiS->SiS_Pr->CCRT1CRTC[0]  =  ((pSiS->SiS_Pr->CHTotal >> 3) - 5) & 0xff;
   pSiS->SiS_Pr->CCRT1CRTC[1]  =  (pSiS->SiS_Pr->CHDisplay >> 3) - 1;
   pSiS->SiS_Pr->CCRT1CRTC[2]  =  (pSiS->SiS_Pr->CHBlankStart >> 3) - 1;
   pSiS->SiS_Pr->CCRT1CRTC[3]  =  (((pSiS->SiS_Pr->CHBlankEnd >> 3) - 1) & 0x1F) | 0x80;
   pSiS->SiS_Pr->CCRT1CRTC[4]  =  (pSiS->SiS_Pr->CHSyncStart >> 3) + 3;
   pSiS->SiS_Pr->CCRT1CRTC[5]  =  ((((pSiS->SiS_Pr->CHBlankEnd >> 3) - 1) & 0x20) << 2) | 
       				  (((pSiS->SiS_Pr->CHSyncEnd >> 3) + 3) & 0x1F);
   
   pSiS->SiS_Pr->CCRT1CRTC[6]  =  (pSiS->SiS_Pr->CVTotal - 2) & 0xFF;
   pSiS->SiS_Pr->CCRT1CRTC[7]  =  (((pSiS->SiS_Pr->CVTotal - 2) & 0x100) >> 8)
 	 			| (((pSiS->SiS_Pr->CVDisplay - 1) & 0x100) >> 7)
	 			| ((pSiS->SiS_Pr->CVSyncStart & 0x100) >> 6)
	 			| (((pSiS->SiS_Pr->CVBlankStart - 1) & 0x100) >> 5)
	 			| 0x10
	 			| (((pSiS->SiS_Pr->CVTotal - 2) & 0x200)   >> 4)
	 			| (((pSiS->SiS_Pr->CVDisplay - 1) & 0x200) >> 3)
	 			| ((pSiS->SiS_Pr->CVSyncStart & 0x200) >> 2);
    
   pSiS->SiS_Pr->CCRT1CRTC[16] = ((((pSiS->SiS_Pr->CVBlankStart - 1) & 0x200) >> 4) >> 5); 	/* cr9 */
    
#if 0    
   if (mode->VScan >= 32)
	regp->CRTC[9] |= 0x1F;
   else if (mode->VScan > 1)
	regp->CRTC[9] |= mode->VScan - 1;
#endif	
a4397 25
   pSiS->SiS_Pr->CCRT1CRTC[8] =  (pSiS->SiS_Pr->CVSyncStart - 1) & 0xFF;	/* cr10 */
   pSiS->SiS_Pr->CCRT1CRTC[9] =  ((pSiS->SiS_Pr->CVSyncEnd - 1) & 0x0F) | 0x80;	/* cr11 */
   pSiS->SiS_Pr->CCRT1CRTC[10] = (pSiS->SiS_Pr->CVDisplay - 1) & 0xFF;		/* cr12 */
   pSiS->SiS_Pr->CCRT1CRTC[11] = (pSiS->SiS_Pr->CVBlankStart - 1) & 0xFF;	/* cr15 */
   pSiS->SiS_Pr->CCRT1CRTC[12] = (pSiS->SiS_Pr->CVBlankEnd - 1) & 0xFF;		/* cr16 */
   
   pSiS->SiS_Pr->CCRT1CRTC[13] = 
                        GETBITSTR((pSiS->SiS_Pr->CVTotal     -2), 10:10, 0:0) |
                        GETBITSTR((pSiS->SiS_Pr->CVDisplay   -1), 10:10, 1:1) |
                        GETBITSTR((pSiS->SiS_Pr->CVBlankStart-1), 10:10, 2:2) |
                        GETBITSTR((pSiS->SiS_Pr->CVSyncStart   ), 10:10, 3:3) |
                        GETBITSTR((pSiS->SiS_Pr->CVBlankEnd  -1),   8:8, 4:4) |
                        GETBITSTR((pSiS->SiS_Pr->CVSyncEnd   -1),   4:4, 5:5) ;  

   pSiS->SiS_Pr->CCRT1CRTC[14] = 
                        GETBITSTR((pSiS->SiS_Pr->CHTotal      >> 3) - 5, 9:8, 1:0) |
                        GETBITSTR((pSiS->SiS_Pr->CHDisplay    >> 3) - 1, 9:8, 3:2) |
                        GETBITSTR((pSiS->SiS_Pr->CHBlankStart >> 3) - 1, 9:8, 5:4) |
                        GETBITSTR((pSiS->SiS_Pr->CHSyncStart  >> 3) + 3, 9:8, 7:6) ;

        
   pSiS->SiS_Pr->CCRT1CRTC[15] =
                        GETBITSTR((pSiS->SiS_Pr->CHBlankEnd >> 3) - 1, 7:6, 1:0) |
                        GETBITSTR((pSiS->SiS_Pr->CHSyncEnd  >> 3) + 3, 5:5, 2:2) ; 
			
d4399 11
a4409 17
   case 8: 			
      	pSiS->SiS_Pr->CModeFlag = 0x223b;
	break;
   case 16: 			
      	pSiS->SiS_Pr->CModeFlag = 0x227d;
	break;
   case 32: 			
      	pSiS->SiS_Pr->CModeFlag = 0x22ff;
	break;		
   default: 
   	return 0;	
   }	
   
   if(pSiS->SiS_Pr->CFlags & V_DBLSCAN) 
   	pSiS->SiS_Pr->CModeFlag |= DoubleScanMode;
   if((pSiS->SiS_Pr->CVDisplay >= 1024)	|| 
      (pSiS->SiS_Pr->CVTotal >= 1024)   || 
d4411 2
a4412 1
	pSiS->SiS_Pr->CModeFlag |= LineCompareOff;
d4414 2
a4415 2
        pSiS->SiS_Pr->CModeFlag |= HalfDCLK;
   
d4417 9
a4425 6
   if(pSiS->SiS_Pr->CFlags & V_NHSYNC) 
   	pSiS->SiS_Pr->CInfoFlag |= 0x4000;
   if(pSiS->SiS_Pr->CFlags & V_NVSYNC) 
   	pSiS->SiS_Pr->CInfoFlag |= 0x8000;
   if(pSiS->SiS_Pr->CFlags & V_INTERLACE)	
	pSiS->SiS_Pr->CInfoFlag |= InterlaceMode;
d4429 1
a4429 1
   xf86DrvMsg(0, X_INFO, "Custom mode %dx%d:\n", 
d4434 4
a4437 8
   	pSiS->SiS_Pr->CCRT1CRTC[0],
	pSiS->SiS_Pr->CCRT1CRTC[1],
	pSiS->SiS_Pr->CCRT1CRTC[2],
	pSiS->SiS_Pr->CCRT1CRTC[3],
	pSiS->SiS_Pr->CCRT1CRTC[4],
	pSiS->SiS_Pr->CCRT1CRTC[5],
	pSiS->SiS_Pr->CCRT1CRTC[6],
	pSiS->SiS_Pr->CCRT1CRTC[7]);
d4439 4
a4442 8
   	pSiS->SiS_Pr->CCRT1CRTC[8],
	pSiS->SiS_Pr->CCRT1CRTC[9],
	pSiS->SiS_Pr->CCRT1CRTC[10],
	pSiS->SiS_Pr->CCRT1CRTC[11],
	pSiS->SiS_Pr->CCRT1CRTC[12],
	pSiS->SiS_Pr->CCRT1CRTC[13],
	pSiS->SiS_Pr->CCRT1CRTC[14],
	pSiS->SiS_Pr->CCRT1CRTC[15]);
d4445 2
a4446 4
   	pSiS->SiS_Pr->CSR2B,
	pSiS->SiS_Pr->CSR2C,
	pSiS->SiS_Pr->CSRClock);
#endif   	
d4450 1
a4450 1
/* TW: Build a list of supported modes */
d4452 1
a4452 1
SiSBuildBuiltInModeList(ScrnInfoPtr pScrn)
d4460 6
a4465 2
   int            A, B, C, D, E, F, temp, i, j, index, vclkindex;
   DisplayModePtr new = NULL, current = NULL, first = NULL, backup = NULL;
d4468 2
a4469 1
   
d4473 1
a4473 1
	InitTo300Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
d4475 1
a4475 1
	return NULL;
d4479 1
a4479 1
       	InitTo310Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
d4481 1
a4481 1
	return NULL;
a4488 3
#if 0 /* Not any longer */    
      if(pSiS->VGAEngine == SIS_300_VGA) index &= 0x3F;
#endif      
d4490 3
a4492 5
      if(((pSiS->SiS_Pr->SiS_RefIndex[i].XRes < 512) && (!pSiS->DSTN)) ||
      	 ((pSiS->DSTN) &&
	  (pSiS->SiS_Pr->SiS_RefIndex[i].XRes < 512) &&
	  (pSiS->SiS_Pr->SiS_RefIndex[i].XRes != 320) &&
	  (pSiS->SiS_Pr->SiS_RefIndex[i].YRes != 480)))  {
d4496 8
a4503 1
      
d4517 1
a4517 1
      
d4523 1
a4523 1
      current->type = M_T_DEFAULT; 
d4536 1
a4536 1
      
d4562 1
a4562 1
      E = HDE + 1;
d4570 1
a4570 1
      F = HRS - E - 3;
d4600 1
a4600 1
      C = (temp > 0) ? temp : (temp + 64);
d4604 23
a4626 4
      current->HDisplay   = (E * 8);
      current->HSyncStart = (E * 8) + (F * 8);
      current->HSyncEnd   = (E * 8) + (F * 8) + (C * 8);
      current->HTotal     = (E * 8) + (F * 8) + (C * 8) + (D * 8);
d4750 1
a4750 1
	 current->VTotal |= 1; 
d4760 1
d4779 1
d4787 2
d4794 183
d4981 34
a5014 1
#define MODEID_OFF 0x449
d5016 4
a5019 2
unsigned char
SiS_GetSetModeID(ScrnInfoPtr pScrn, unsigned char id)
d5021 33
a5053 1
    return(SiS_GetSetBIOSScratch(pScrn, MODEID_OFF, id));
d5056 3
a5058 2
unsigned char
SiS_GetSetBIOSScratch(ScrnInfoPtr pScrn, USHORT offset, unsigned char value)
d5060 4
a5063 2
    unsigned char ret;
    unsigned char *base;
d5065 12
a5076 5
    base = xf86MapVidMem(pScrn->scrnIndex, VIDMEM_MMIO, 0, 0x2000);
    if(!base) {
	     xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
	          "(init.c: Could not map BIOS scratch area)\n");
	     return 0;
d5079 1
a5079 1
    ret = *(base + offset);
d5081 15
a5095 3
    /* value != 0xff means: set register */
    if (value != 0xff)
	*(base + offset) = value;
d5097 2
a5098 1
    xf86UnMapVidMem(pScrn->scrnIndex, base, 0x2000);
d5100 1
a5100 1
    return ret;
d5103 21
d5125 42
d5168 102
d5271 43
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/sis/init.c,v 1.46 2004/01/24 21:29:20 twini Exp $ */
d3 1
a3 3
 * Mode initializing code (CRT1 section) for
 * for SiS 300/305/540/630/730 and
 *     SiS 315/550/650/M650/651/661FX/M661FX/740/741/M741/330/660/M660/760/M760
d6 3
a8 1
 * Copyright (C) 2001-2004 by Thomas Winischhofer, Vienna, Austria
d10 11
a20 2
 * If distributed as part of the Linux kernel, the following license terms
 * apply:
d22 9
a30 13
 * * This program is free software; you can redistribute it and/or modify
 * * it under the terms of the GNU General Public License as published by
 * * the Free Software Foundation; either version 2 of the named License,
 * * or any later version.
 * *
 * * This program is distributed in the hope that it will be useful,
 * * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * * GNU General Public License for more details.
 * *
 * * You should have received a copy of the GNU General Public License
 * * along with this program; if not, write to the Free Software
 * * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
d32 7
a38 31
 * Otherwise, the following license terms apply:
 *
 * * Redistribution and use in source and binary forms, with or without
 * * modification, are permitted provided that the following conditions
 * * are met:
 * * 1) Redistributions of source code must retain the above copyright
 * *    notice, this list of conditions and the following disclaimer.
 * * 2) Redistributions in binary form must reproduce the above copyright
 * *    notice, this list of conditions and the following disclaimer in the
 * *    documentation and/or other materials provided with the distribution.
 * * 3) All advertising materials mentioning features or use of this software
 * *    must display the following acknowledgement: "This product includes
 * *    software developed by Thomas Winischhofer, Vienna, Austria."
 * * 4) The name of the author may not be used to endorse or promote products
 * *    derived from this software without specific prior written permission.
 * *
 * * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESSED OR
 * * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: 	Thomas Winischhofer <thomas@@winischhofer.net>
 *
 * Formerly based on non-functional code-fragements for 300 series by SiS, Inc.
 * Used by permission.
d60 24
d89 35
a123 3
/*********************************************/
/*         POINTER INITIALIZATION            */
/*********************************************/
d126 1
a126 1
InitCommonPointer(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d128 19
a146 27
   SiS_Pr->SiS_StResInfo     = SiS_StResInfo;
   SiS_Pr->SiS_ModeResInfo   = SiS_ModeResInfo;
   SiS_Pr->SiS_StandTable    = SiS_StandTable;

   SiS_Pr->SiS_NTSCPhase     = SiS_NTSCPhase;
   SiS_Pr->SiS_PALPhase      = SiS_PALPhase;
   SiS_Pr->SiS_NTSCPhase2    = SiS_NTSCPhase2;
   SiS_Pr->SiS_PALPhase2     = SiS_PALPhase2;
   SiS_Pr->SiS_PALMPhase     = SiS_PALMPhase;
   SiS_Pr->SiS_PALNPhase     = SiS_PALNPhase;
   SiS_Pr->SiS_PALMPhase2    = SiS_PALMPhase2;
   SiS_Pr->SiS_PALNPhase2    = SiS_PALNPhase2;
   SiS_Pr->SiS_SpecialPhase  = SiS_SpecialPhase;
   SiS_Pr->SiS_SpecialPhaseM = SiS_SpecialPhaseM;
   SiS_Pr->SiS_SpecialPhaseJ = SiS_SpecialPhaseJ;

   SiS_Pr->SiS_NTSCTiming     = SiS_NTSCTiming;
   SiS_Pr->SiS_PALTiming      = SiS_PALTiming;
   SiS_Pr->SiS_HiTVSt1Timing  = SiS_HiTVSt1Timing;
   SiS_Pr->SiS_HiTVSt2Timing  = SiS_HiTVSt2Timing;

   SiS_Pr->SiS_HiTVExtTiming  = SiS_HiTVExtTiming;
   SiS_Pr->SiS_HiTVGroup3Data = SiS_HiTVGroup3Data;
   SiS_Pr->SiS_HiTVGroup3Simu = SiS_HiTVGroup3Simu;
#if 0
   SiS_Pr->SiS_HiTVTextTiming = SiS_HiTVTextTiming;
   SiS_Pr->SiS_HiTVGroup3Text = SiS_HiTVGroup3Text;
d148 2
d151 5
a155 112
   SiS_Pr->SiS_StPALData   = SiS_StPALData;
   SiS_Pr->SiS_ExtPALData  = SiS_ExtPALData;
   SiS_Pr->SiS_StNTSCData  = SiS_StNTSCData;
   SiS_Pr->SiS_ExtNTSCData = SiS_ExtNTSCData;
   SiS_Pr->SiS_St1HiTVData = SiS_StHiTVData; 
   SiS_Pr->SiS_St2HiTVData = SiS_St2HiTVData;
   SiS_Pr->SiS_ExtHiTVData = SiS_ExtHiTVData;
   SiS_Pr->SiS_St525iData  = SiS_StNTSCData;
   SiS_Pr->SiS_St525pData  = SiS_St525pData;
   SiS_Pr->SiS_St750pData  = SiS_St750pData;
   SiS_Pr->SiS_Ext525iData = SiS_ExtNTSCData;
   SiS_Pr->SiS_Ext525pData = SiS_ExtNTSCData;
   SiS_Pr->SiS_Ext750pData = SiS_Ext750pData;

   SiS_Pr->pSiS_OutputSelect = &SiS_OutputSelect;
   SiS_Pr->pSiS_SoftSetting  = &SiS_SoftSetting;

   SiS_Pr->SiS_LCD1280x960Data      = SiS_LCD1280x960Data;
   SiS_Pr->SiS_ExtLCD1400x1050Data  = SiS_ExtLCD1400x1050Data;
   SiS_Pr->SiS_ExtLCD1600x1200Data  = SiS_ExtLCD1600x1200Data;
   SiS_Pr->SiS_StLCD1400x1050Data   = SiS_StLCD1400x1050Data;
   SiS_Pr->SiS_StLCD1600x1200Data   = SiS_StLCD1600x1200Data;
   SiS_Pr->SiS_NoScaleData1400x1050 = SiS_NoScaleData1400x1050;
   SiS_Pr->SiS_NoScaleData1600x1200 = SiS_NoScaleData1600x1200;
   SiS_Pr->SiS_ExtLCD1280x768Data   = SiS_ExtLCD1280x768Data;
   SiS_Pr->SiS_StLCD1280x768Data    = SiS_StLCD1280x768Data;
   SiS_Pr->SiS_NoScaleData1280x768  = SiS_NoScaleData1280x768;
   SiS_Pr->SiS_NoScaleData          = SiS_NoScaleData;

   SiS_Pr->SiS_LVDS320x480Data_1   = SiS_LVDS320x480Data_1;
   SiS_Pr->SiS_LVDS800x600Data_1   = SiS_LVDS800x600Data_1;
   SiS_Pr->SiS_LVDS800x600Data_2   = SiS_LVDS800x600Data_2;
   SiS_Pr->SiS_LVDS1024x768Data_1  = SiS_LVDS1024x768Data_1;
   SiS_Pr->SiS_LVDS1024x768Data_2  = SiS_LVDS1024x768Data_2;
   SiS_Pr->SiS_LVDS1280x1024Data_1 = SiS_LVDS1280x1024Data_1;
   SiS_Pr->SiS_LVDS1280x1024Data_2 = SiS_LVDS1280x1024Data_2;
   SiS_Pr->SiS_LVDS1400x1050Data_1 = SiS_LVDS1400x1050Data_1;
   SiS_Pr->SiS_LVDS1400x1050Data_2 = SiS_LVDS1400x1050Data_2;
   SiS_Pr->SiS_LVDS1600x1200Data_1 = SiS_LVDS1600x1200Data_1;
   SiS_Pr->SiS_LVDS1600x1200Data_2 = SiS_LVDS1600x1200Data_2;
   SiS_Pr->SiS_LVDS1280x768Data_1  = SiS_LVDS1280x768Data_1;
   SiS_Pr->SiS_LVDS1280x768Data_2  = SiS_LVDS1280x768Data_2;
   SiS_Pr->SiS_LVDS1024x600Data_1  = SiS_LVDS1024x600Data_1;
   SiS_Pr->SiS_LVDS1024x600Data_2  = SiS_LVDS1024x600Data_2;
   SiS_Pr->SiS_LVDS1152x768Data_1  = SiS_LVDS1152x768Data_1;
   SiS_Pr->SiS_LVDS1152x768Data_2  = SiS_LVDS1152x768Data_2;
   SiS_Pr->SiS_LVDSXXXxXXXData_1   = SiS_LVDSXXXxXXXData_1;
   SiS_Pr->SiS_LVDS1280x960Data_1  = SiS_LVDS1280x960Data_1;
   SiS_Pr->SiS_LVDS1280x960Data_2  = SiS_LVDS1280x960Data_2;
   SiS_Pr->SiS_LVDS640x480Data_1   = SiS_LVDS640x480Data_1;
   SiS_Pr->SiS_LVDS1280x960Data_1  = SiS_LVDS1280x1024Data_1;
   SiS_Pr->SiS_LVDS1280x960Data_2  = SiS_LVDS1280x1024Data_2;
   SiS_Pr->SiS_LVDS640x480Data_1   = SiS_LVDS640x480Data_1;
   SiS_Pr->SiS_LVDS640x480Data_2   = SiS_LVDS640x480Data_2;

   SiS_Pr->SiS_LVDSBARCO1366Data_1 = SiS_LVDSBARCO1366Data_1;
   SiS_Pr->SiS_LVDSBARCO1366Data_2 = SiS_LVDSBARCO1366Data_2;
   SiS_Pr->SiS_LVDSBARCO1024Data_1 = SiS_LVDSBARCO1024Data_1;
   SiS_Pr->SiS_LVDSBARCO1024Data_2 = SiS_LVDSBARCO1024Data_2;
   SiS_Pr->SiS_LVDS848x480Data_1   = SiS_LVDS848x480Data_1;
   SiS_Pr->SiS_LVDS848x480Data_2   = SiS_LVDS848x480Data_2;

   SiS_Pr->SiS_CHTVUNTSCData = SiS_CHTVUNTSCData;
   SiS_Pr->SiS_CHTVONTSCData = SiS_CHTVONTSCData;

   SiS_Pr->SiS_LCDA1024x768Data_1  = SiS_LCDA1024x768Data_1;
   SiS_Pr->SiS_LCDA1024x768Data_2  = SiS_LCDA1024x768Data_2;
   SiS_Pr->SiS_LCDA1280x1024Data_1 = SiS_LCDA1280x1024Data_1;
   SiS_Pr->SiS_LCDA1280x1024Data_2 = SiS_LCDA1280x1024Data_2;
   SiS_Pr->SiS_LCDA1400x1050Data_1 = SiS_LCDA1400x1050Data_1;
   SiS_Pr->SiS_LCDA1400x1050Data_2 = SiS_LCDA1400x1050Data_2;
   SiS_Pr->SiS_LCDA1600x1200Data_1 = SiS_LCDA1600x1200Data_1;
   SiS_Pr->SiS_LCDA1600x1200Data_2 = SiS_LCDA1600x1200Data_2;

   SiS_Pr->LVDS1024x768Des_1  = SiS_PanelType1076_1;
   SiS_Pr->LVDS1280x1024Des_1 = SiS_PanelType1210_1;
   SiS_Pr->LVDS1400x1050Des_1 = SiS_PanelType1296_1;
   SiS_Pr->LVDS1600x1200Des_1 = SiS_PanelType1600_1;
   SiS_Pr->LVDS1024x768Des_2  = SiS_PanelType1076_2;
   SiS_Pr->LVDS1280x1024Des_2 = SiS_PanelType1210_2;
   SiS_Pr->LVDS1400x1050Des_2 = SiS_PanelType1296_2;
   SiS_Pr->LVDS1600x1200Des_2 = SiS_PanelType1600_2;

   SiS_Pr->SiS_PanelTypeNS_1 = SiS_PanelTypeNS_1;
   SiS_Pr->SiS_PanelTypeNS_2 = SiS_PanelTypeNS_2;

   SiS_Pr->SiS_CHTVUNTSCDesData = SiS_CHTVUNTSCDesData;
   SiS_Pr->SiS_CHTVONTSCDesData = SiS_CHTVONTSCDesData;
   SiS_Pr->SiS_CHTVUPALDesData  = SiS_CHTVUPALDesData;
   SiS_Pr->SiS_CHTVOPALDesData  = SiS_CHTVOPALDesData;

   SiS_Pr->SiS_LVDSCRT11280x768_1    = SiS_LVDSCRT11280x768_1;
   SiS_Pr->SiS_LVDSCRT11024x600_1    = SiS_LVDSCRT11024x600_1;
   SiS_Pr->SiS_LVDSCRT11152x768_1    = SiS_LVDSCRT11152x768_1;
   SiS_Pr->SiS_LVDSCRT11280x768_1_H  = SiS_LVDSCRT11280x768_1_H;
   SiS_Pr->SiS_LVDSCRT11024x600_1_H  = SiS_LVDSCRT11024x600_1_H;
   SiS_Pr->SiS_LVDSCRT11152x768_1_H  = SiS_LVDSCRT11152x768_1_H;
   SiS_Pr->SiS_LVDSCRT11280x768_2    = SiS_LVDSCRT11280x768_2;
   SiS_Pr->SiS_LVDSCRT11024x600_2    = SiS_LVDSCRT11024x600_2;
   SiS_Pr->SiS_LVDSCRT11152x768_2    = SiS_LVDSCRT11152x768_2;
   SiS_Pr->SiS_LVDSCRT11280x768_2_H  = SiS_LVDSCRT11280x768_2_H;
   SiS_Pr->SiS_LVDSCRT11024x600_2_H  = SiS_LVDSCRT11024x600_2_H;
   SiS_Pr->SiS_LVDSCRT11152x768_2_H  = SiS_LVDSCRT11152x768_2_H;
   SiS_Pr->SiS_LVDSCRT1320x480_1     = SiS_LVDSCRT1320x480_1;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1     = SiS_LVDSCRT1XXXxXXX_1;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1_H   = SiS_LVDSCRT1XXXxXXX_1_H;
   SiS_Pr->SiS_LVDSCRT1640x480_1     = SiS_LVDSCRT1640x480_1;
   SiS_Pr->SiS_LVDSCRT1640x480_1_H   = SiS_LVDSCRT1640x480_1_H;
   SiS_Pr->SiS_LVDSCRT1640x480_2     = SiS_LVDSCRT1640x480_2;
   SiS_Pr->SiS_LVDSCRT1640x480_2_H   = SiS_LVDSCRT1640x480_2_H;
   SiS_Pr->SiS_LVDSCRT1640x480_3     = SiS_LVDSCRT1640x480_3;
   SiS_Pr->SiS_LVDSCRT1640x480_3_H   = SiS_LVDSCRT1640x480_3_H;
d160 1
a160 1
InitTo300Pointer(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
a161 30
   InitCommonPointer(SiS_Pr, HwInfo);

   SiS_StandTable[0x04].CRTC[4] = 0x2b;
   SiS_StandTable[0x05].CRTC[4] = 0x2b;
   SiS_StandTable[0x06].CRTC[4] = 0x54;
   SiS_StandTable[0x06].CRTC[5] = 0x80;
   SiS_StandTable[0x0d].CRTC[4] = 0x2b;
   SiS_StandTable[0x0e].CRTC[4] = 0x54;
   SiS_StandTable[0x0e].CRTC[5] = 0x80;
   SiS_StandTable[0x11].CRTC[4] = 0x54;
   SiS_StandTable[0x11].CRTC[5] = 0x80;
   SiS_StandTable[0x11].CRTC[16] = 0x83;
   SiS_StandTable[0x11].CRTC[17] = 0x85;
   SiS_StandTable[0x12].CRTC[4] = 0x54;
   SiS_StandTable[0x12].CRTC[5] = 0x80;
   SiS_StandTable[0x12].CRTC[16] = 0x83;
   SiS_StandTable[0x12].CRTC[17] = 0x85;
   SiS_StandTable[0x13].CRTC[5] = 0xa0;
   SiS_StandTable[0x17].CRTC[5] = 0xa0;
   SiS_StandTable[0x1a].CRTC[4] = 0x54;
   SiS_StandTable[0x1a].CRTC[5] = 0x80;
   SiS_StandTable[0x1a].CRTC[16] = 0xea;
   SiS_StandTable[0x1a].CRTC[17] = 0x8c;
   SiS_StandTable[0x1b].CRTC[4] = 0x54;
   SiS_StandTable[0x1b].CRTC[5] = 0x80;
   SiS_StandTable[0x1b].CRTC[16] = 0xea;
   SiS_StandTable[0x1b].CRTC[17] = 0x8c;
   SiS_StandTable[0x1c].CRTC[4] = 0x54;
   SiS_StandTable[0x1c].CRTC[5] = 0x80;

d164 1
d168 1
a168 1
   if(HwInfo->jChipType == SIS_300) {
d171 1
a171 1
      SiS_Pr->SiS_MCLKData_0    = (SiS_MCLKDataStruct *)SiS300_MCLKData_630; /* 630, 730 */
d173 1
d177 5
d210 9
d227 28
a256 2
   SiS_Pr->SiS_PanelDelayTblLVDS = (SiS_PanelDelayTblStruct *)SiS300_PanelDelayTbl;
#if 0
a257 1
#endif
d259 25
d286 2
a287 2
   SiS_Pr->SiS_CHTVUPALMData = SiS_CHTVUNTSCData; 			   /* not supported on 300 series */
   SiS_Pr->SiS_CHTVOPALMData = SiS_CHTVONTSCData; 			   /* not supported on 300 series */
a290 1

d323 4
a326 10

   if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
      SiS_Pr->SiS_PanelType04_1 = (SiS_LVDSDesStruct *)SiS300_PanelType04_1a;
      SiS_Pr->SiS_PanelType04_2 = (SiS_LVDSDesStruct *)SiS300_PanelType04_2a;
   }
   if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
      SiS_Pr->SiS_PanelType04_1 = (SiS_LVDSDesStruct *)SiS300_PanelType04_1b;
      SiS_Pr->SiS_PanelType04_2 = (SiS_LVDSDesStruct *)SiS300_PanelType04_2b;
   }

d330 2
d335 2
d340 2
d345 2
d371 1
d385 1
a385 1
   /* LCDResInfo will on 300 series be translated to 315 series definitions */
d394 7
a400 11
   SiS_Pr->SiS_Panel1280x768  = Panel_1280x768;
   SiS_Pr->SiS_Panel1600x1200 = 255;  		   /* Something illegal */
   SiS_Pr->SiS_Panel1400x1050 = 255;
   SiS_Pr->SiS_Panel640x480_2 = 255;
   SiS_Pr->SiS_Panel640x480_3 = 255;
   SiS_Pr->SiS_Panel1152x864  = 255;
   SiS_Pr->SiS_PanelMax       = Panel_320x480;     /* highest value */
   SiS_Pr->SiS_PanelMinLVDS   = Panel_800x600;     /* Lowest value LVDS */
   SiS_Pr->SiS_PanelMin301    = Panel_1024x768;    /* lowest value 301 */
   SiS_Pr->SiS_PanelCustom    = Panel_Custom;
   SiS_Pr->SiS_PanelBarco1366 = Panel_Barco1366;
d406 1
a406 1
InitTo310Pointer(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
a407 30
   InitCommonPointer(SiS_Pr, HwInfo);

   SiS_StandTable[0x04].CRTC[4] = 0x2c;
   SiS_StandTable[0x05].CRTC[4] = 0x2c;
   SiS_StandTable[0x06].CRTC[4] = 0x55;
   SiS_StandTable[0x06].CRTC[5] = 0x81;
   SiS_StandTable[0x0d].CRTC[4] = 0x2c;
   SiS_StandTable[0x0e].CRTC[4] = 0x55;
   SiS_StandTable[0x0e].CRTC[5] = 0x81;
   SiS_StandTable[0x11].CRTC[4] = 0x55;
   SiS_StandTable[0x11].CRTC[5] = 0x81;
   SiS_StandTable[0x11].CRTC[16] = 0x82;
   SiS_StandTable[0x11].CRTC[17] = 0x84;
   SiS_StandTable[0x12].CRTC[4] = 0x55;
   SiS_StandTable[0x12].CRTC[5] = 0x81;
   SiS_StandTable[0x12].CRTC[16] = 0x82;
   SiS_StandTable[0x12].CRTC[17] = 0x84;
   SiS_StandTable[0x13].CRTC[5] = 0xb1;
   SiS_StandTable[0x17].CRTC[5] = 0xb1;
   SiS_StandTable[0x1a].CRTC[4] = 0x55;
   SiS_StandTable[0x1a].CRTC[5] = 0x81;
   SiS_StandTable[0x1a].CRTC[16] = 0xe9;
   SiS_StandTable[0x1a].CRTC[17] = 0x8b;
   SiS_StandTable[0x1b].CRTC[4] = 0x55;
   SiS_StandTable[0x1b].CRTC[5] = 0x81;
   SiS_StandTable[0x1b].CRTC[16] = 0xe9;
   SiS_StandTable[0x1b].CRTC[17] = 0x8b;
   SiS_StandTable[0x1c].CRTC[4] = 0x55;
   SiS_StandTable[0x1c].CRTC[5] = 0x81;

d409 1
d413 2
a414 3
   if(HwInfo->jChipType >= SIS_661) {
      SiS_Pr->SiS_MCLKData_0 = (SiS_MCLKDataStruct *)SiS310_MCLKData_0_660;  /* 661/741/760 */
   } else if(HwInfo->jChipType == SIS_330) {
d416 2
a417 2
   } else if(HwInfo->jChipType > SIS_315PRO) {
      SiS_Pr->SiS_MCLKData_0 = (SiS_MCLKDataStruct *)SiS310_MCLKData_0_650;  /* 550, 650, 740 */
d422 1
d426 5
d459 10
d477 29
d507 1
a507 1
   SiS_Pr->SiS_PanelDelayTbl     = (SiS_PanelDelayTblStruct *)SiS310_PanelDelayTbl;
d510 25
a541 1

d575 10
d598 5
d607 3
d615 3
d623 3
d631 3
d635 7
a641 6
   SiS_Pr->SiS_CHTVCRT1UNTSC         = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1UNTSC;
   SiS_Pr->SiS_CHTVCRT1ONTSC         = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1ONTSC;
   SiS_Pr->SiS_CHTVCRT1UPAL          = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1UPAL;
   SiS_Pr->SiS_CHTVCRT1OPAL          = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1OPAL;
   SiS_Pr->SiS_CHTVCRT1SOPAL         = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1OPAL;

d650 2
a651 2
   SiS_Pr->SiS_CHTVReg_SOPAL = (SiS_CHTVRegDataStruct *)SiS310_CHTVReg_OPAL;

d656 1
d661 1
d666 1
a670 1

d679 1
a679 1
   SiS_Pr->SiS_CHTVVCLKSOPAL = SiS310_CHTVVCLKOPAL;
d693 3
a695 7
   SiS_Pr->SiS_Panel640x480_2 = Panel_640x480_2;
   SiS_Pr->SiS_Panel640x480_3 = Panel_640x480_3;
   SiS_Pr->SiS_PanelMax       = Panel_320x480;    /* highest value */
   SiS_Pr->SiS_PanelMinLVDS   = Panel_800x600;    /* lowest value LVDS/LCDA */
   SiS_Pr->SiS_PanelMin301    = Panel_1024x768;   /* lowest value 301 */
   SiS_Pr->SiS_PanelCustom    = Panel_Custom;
   SiS_Pr->SiS_PanelBarco1366 = 255;
d699 10
a708 2
static void
SiSInitPtr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d710 41
a750 1
   switch(HwInfo->jChipType) {
d752 8
a759 13
   case SIS_315H:
   case SIS_315:
   case SIS_315PRO:
   case SIS_550:
   case SIS_650:
   case SIS_740:
   case SIS_330:
   case SIS_661:
   case SIS_741:
   case SIS_660:
   case SIS_760:
      InitTo310Pointer(SiS_Pr, HwInfo);
      break;
d761 1
d763 5
a767 6
   case SIS_300:
   case SIS_540:
   case SIS_630:
   case SIS_730:
      InitTo300Pointer(SiS_Pr, HwInfo);
      break;
d769 30
a798 2
   default:
      break;
d800 1
a800 1
}
d802 45
a846 3
/*********************************************/
/*            HELPER: Get ModeID             */
/*********************************************/
d848 1
a848 4
USHORT
SiS_GetModeID(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay, int Depth, BOOLEAN FSTN)
{
   USHORT ModeIndex = 0;
d850 52
a901 109
   switch(HDisplay)
   {
     case 320:
     	  if(VDisplay == 200)     ModeIndex = ModeIndex_320x200[Depth];
	  else if(VDisplay == 240) {
	     if(FSTN) ModeIndex = ModeIndex_320x240_FSTN[Depth];
	     else     ModeIndex = ModeIndex_320x240[Depth];
          }
          break;
     case 400:
          if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
          break;
     case 512:
          if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
          break;
     case 640:
          if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
	  else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
          break;
     case 720:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 480)      ModeIndex = ModeIndex_720x480[Depth];
             else if(VDisplay == 576) ModeIndex = ModeIndex_720x576[Depth];
          }
          break;
     case 768:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 576) ModeIndex = ModeIndex_768x576[Depth];
          }
	  break;
     case 800:
	  if(VDisplay == 600)    ModeIndex = ModeIndex_800x600[Depth];
	  else if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 480) ModeIndex = ModeIndex_800x480[Depth];
	  }
          break;
     case 848:
          if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 480) ModeIndex = ModeIndex_848x480[Depth];
	  }
	  break;
     case 856:
          if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 480) ModeIndex = ModeIndex_856x480[Depth];
	  }
	  break;
     case 1024:
          if(VDisplay == 768) ModeIndex = ModeIndex_1024x768[Depth];
	  else if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 576)    ModeIndex = ModeIndex_1024x576[Depth];
	     else if(VGAEngine == SIS_300_VGA) {
	        if(VDisplay == 600) ModeIndex = ModeIndex_1024x600[Depth];
             }
	  }
          break;
     case 1152:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 864)    ModeIndex = ModeIndex_1152x864[Depth];
             else if(VGAEngine == SIS_300_VGA) {
	        if(VDisplay == 768) ModeIndex = ModeIndex_1152x768[Depth];
             }
	  }
	  break;
     case 1280:
          if(VDisplay == 1024)        ModeIndex = ModeIndex_1280x1024[Depth];
	  else if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 960)      ModeIndex = ModeIndex_1280x960[Depth];
	     else if(VDisplay == 720) ModeIndex = ModeIndex_1280x720[Depth];
	     else if(VDisplay == 768) {
	        if(VGAEngine == SIS_300_VGA) {
	           ModeIndex = ModeIndex_300_1280x768[Depth];
	        } else {
	           ModeIndex = ModeIndex_310_1280x768[Depth];
	        }
	     }
	  }
          break;
     case 1360:
          if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 768)     ModeIndex = ModeIndex_1360x768[Depth];
	     else if(VGAEngine == SIS_300_VGA) {
	        if(VDisplay == 1024) ModeIndex = ModeIndex_300_1360x1024[Depth];
             }
	  }
          break;
     case 1400:
          if(VGAEngine == SIS_315_VGA) {
	     if(VDisplay == 1050) ModeIndex = ModeIndex_1400x1050[Depth];
	  }
          break;
     case 1600:
          if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
          break;
     case 1920:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 1440) ModeIndex = ModeIndex_1920x1440[Depth];
	  }
          break;
     case 2048:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 1536) {
                if(VGAEngine == SIS_300_VGA) {
	            ModeIndex = ModeIndex_300_2048x1536[Depth];
  	        } else {
	            ModeIndex = ModeIndex_310_2048x1536[Depth];
                }
	     }
	  }
          break;
d903 1
d905 5
a909 2
   return(ModeIndex);
}
d911 8
a918 5
USHORT
SiS_GetModeID_LCD(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay,
                  int Depth, BOOLEAN FSTN, USHORT CustomT, int LCDwidth, int LCDheight)
{
   USHORT ModeIndex = 0;
d920 12
a931 1
   if(VBFlags & (VB_LVDS | VB_30xBDH)) {
d933 1
a933 85
      switch(HDisplay)
      {
	case 320:
	     if(CustomT != CUT_PANEL848) {
     	  	if(VDisplay == 200) ModeIndex = ModeIndex_320x200[Depth];
	  	else if(VDisplay == 240) {
		   if(!FSTN) ModeIndex = ModeIndex_320x240[Depth];
          	   else if(VGAEngine == SIS_315_VGA) {
                      ModeIndex = ModeIndex_320x240_FSTN[Depth];
		   }
		}
	     }
             break;
     	case 400:
	     if(CustomT != CUT_PANEL848) {
          	if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
	     }
             break;
	case 512:
	     if(CustomT != CUT_PANEL848) {
		if(VDisplay == 384) {
		   if(LCDwidth != 1024 || LCDheight != 600) {
		      ModeIndex = ModeIndex_512x384[Depth];
		   }
		}
	     }
	     break;
	case 640:
	     if(VDisplay == 480)            ModeIndex = ModeIndex_640x480[Depth];
	     else if(VDisplay == 400) {
	        if(CustomT != CUT_PANEL848) ModeIndex = ModeIndex_640x400[Depth];
	     }
	     break;
	case 800:
	     if(VDisplay == 600) ModeIndex = ModeIndex_800x600[Depth];
	     break;
	case 848:
	     if(CustomT == CUT_PANEL848) {
	        if(VDisplay == 480) ModeIndex = ModeIndex_848x480[Depth];
	     }
	     break;
	case 1024:
	     if(VDisplay == 768) ModeIndex = ModeIndex_1024x768[Depth];
	     else if(VGAEngine == SIS_300_VGA) {
		if((VDisplay == 600) && (LCDheight == 600)) {
		   ModeIndex = ModeIndex_1024x600[Depth];
		}
	     }
	     break;
	case 1152:
	     if(VGAEngine == SIS_300_VGA) {
	        if((VDisplay == 768) && (LCDheight == 768)) {
		   ModeIndex = ModeIndex_1152x768[Depth];
		}
	     }
	     break;
        case 1280:
	     if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
	     else if(VGAEngine == SIS_315_VGA) {
	        if((VDisplay == 768) && (LCDheight == 768)) {
		   ModeIndex = ModeIndex_310_1280x768[Depth];
		}
	     }
	     break;
	case 1360:
	     if(VGAEngine == SIS_300_VGA) {
	        if(CustomT == CUT_BARCO1366) {
		   if(VDisplay == 1024) ModeIndex = ModeIndex_300_1360x1024[Depth];
		}
	     }
	     if(CustomT == CUT_PANEL848) {
	        if(VDisplay == 768) ModeIndex = ModeIndex_1360x768[Depth];
	     }
	     break;
	case 1400:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VDisplay == 1050) ModeIndex = ModeIndex_1400x1050[Depth];
	     }
	     break;
	case 1600:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
	     }
	     break;
      }
d935 14
a948 1
   } else if(VBFlags & VB_SISBRIDGE) {
d950 18
a967 55
      switch(HDisplay)
      {
	case 320:
     	     if(VDisplay == 200)      ModeIndex = ModeIndex_320x200[Depth];
	     else if(VDisplay == 240) ModeIndex = ModeIndex_320x240[Depth];
             break;
     	case 400:
             if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
             break;
	case 512:
	     if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
	     break;
	case 640:
	     if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
	     else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
	     break;
	case 800:
	     if(VDisplay == 600) ModeIndex = ModeIndex_800x600[Depth];
	     break;
	case 1024:
	     if(VDisplay == 768) ModeIndex = ModeIndex_1024x768[Depth];
	     break;
	case 1280:
	     if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
	     else if(VDisplay == 768) {
		if((LCDheight == 768) ||
		   ((LCDheight == 1024) && (VBFlags & (VB_301|VB_301B|VB_301C|VB_302B)))) {
		   if(VGAEngine == SIS_300_VGA) {
		      ModeIndex = ModeIndex_300_1280x768[Depth];
		   } else {
		      ModeIndex = ModeIndex_310_1280x768[Depth];
		   }
		}
	     } else if(VDisplay == 960) {
	        if((LCDheight == 960) ||
		   ((LCDheight == 1024) && (VBFlags & (VB_301|VB_301B|VB_301C|VB_302B)))) {
		   ModeIndex = ModeIndex_1280x960[Depth];
		}
	     }
	     break;
	case 1400:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VBFlags & (VB_301B | VB_301C | VB_302B | VB_302LV | VB_302ELV)) {
		   if(LCDheight != 1200) {
	              if(VDisplay == 1050) ModeIndex = ModeIndex_1400x1050[Depth];
		   }
		}
	     }
	     break;
	case 1600:
	     if(VBFlags & (VB_301C | VB_302B | VB_302LV | VB_302ELV)) {
	        if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
	     }
	     break;
      }
d969 1
d971 26
a996 2
   return ModeIndex;
}
d998 2
a999 4
USHORT
SiS_GetModeID_TV(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay, int Depth)
{
   USHORT ModeIndex = 0;
d1001 1
a1001 1
   if(VBFlags & VB_CHRONTEL) {
d1003 1
a1003 20
      switch(HDisplay)
      {
      	case 512:
	     if(VGAEngine == SIS_315_VGA) {
		if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
	     }
	     break;
	case 640:
	     if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
	     else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
	     break;
	case 800:
	     if(VDisplay == 600) ModeIndex = ModeIndex_800x600[Depth];
	     break;
	case 1024:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VDisplay == 768) ModeIndex = ModeIndex_1024x768[Depth];
	     }
	     break;
      }
d1005 7
a1011 1
   } else if(VBFlags & VB_SISTVBRIDGE) {
d1013 11
a1023 64
      switch(HDisplay)
      {
	case 320:
     	     if(VDisplay == 200)      ModeIndex = ModeIndex_320x200[Depth];
	     else if(VDisplay == 240) ModeIndex = ModeIndex_320x240[Depth];
             break;
        case 400:
             if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
             break;
      	case 512:
	     if( ((VBFlags & TV_YPBPR) && (VBFlags & (TV_YPBPR525P | TV_YPBPR750P | TV_YPBPR1080I))) ||
	         (VBFlags & TV_HIVISION) 					    		     ||
	         ((!(VBFlags & (TV_YPBPR | TV_PALM))) && (VBFlags & TV_PAL)) ) {
	        if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
	     }
	     break;
	case 640:
	     if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
	     else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
	     break;
	case 720:
	     if((!(VBFlags & TV_HIVISION)) && (!((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I)))) {
                if(VDisplay == 480) {
		   if((VBFlags & TV_YPBPR) || (VBFlags & (TV_NTSC | TV_PALM)))
                      ModeIndex = ModeIndex_720x480[Depth];
                } else if(VDisplay == 576) {
		   if((!(VBFlags & (TV_YPBPR | TV_PALM))) && (VBFlags & TV_PAL))
                      ModeIndex = ModeIndex_720x576[Depth];
                }
	     }
             break;
	case 768:
	     if((!(VBFlags & TV_HIVISION)) && (!((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I)))) {
	        if((!(VBFlags & (TV_YPBPR | TV_PALM))) && (VBFlags & TV_PAL)) {
          	   if(VDisplay == 576) ModeIndex = ModeIndex_768x576[Depth];
		}
             }
	     break;
	case 800:
	     if(VDisplay == 600) ModeIndex = ModeIndex_800x600[Depth];
	     else if(VDisplay == 480) {
	        if((VBFlags & TV_HIVISION) || ((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I))) {
		   ModeIndex = ModeIndex_800x480[Depth];
		}
	     }
	     break;
	case 1024:
	     if(VDisplay == 768) {
		if(VBFlags & (VB_301B|VB_301C|VB_302B|VB_301LV|VB_302LV|VB_302ELV)) {
		   ModeIndex = ModeIndex_1024x768[Depth];
		}
	     } else if(VDisplay == 576) {
	        if((VBFlags & TV_HIVISION) || ((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I))) {
		   ModeIndex = ModeIndex_1024x576[Depth];
		}
	     }
	     break;
	case 1280:
	     if((VBFlags & TV_HIVISION) || ((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I))) {
	        if(VDisplay == 720)       ModeIndex = ModeIndex_1280x720[Depth];
		else if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
	     }
	     break;
      }
d1025 7
a1031 2
   return ModeIndex;
}
d1033 6
a1038 4
USHORT
SiS_GetModeID_VGA2(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay, int Depth)
{
   USHORT ModeIndex = 0;
d1040 2
a1041 1
   if(!(VBFlags & (VB_301|VB_301B|VB_301C|VB_302B))) return 0;
d1043 119
a1161 69
   switch(HDisplay)
   {
	case 320:
     	  	if(VDisplay == 200)      ModeIndex = ModeIndex_320x200[Depth];
	  	else if(VDisplay == 240) ModeIndex = ModeIndex_320x240[Depth];
          	break;
     	case 400:
          	if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
          	break;
  	case 512:
		if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
		break;
	case 640:
		if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
		else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
		break;
	case 720:
		if(VDisplay == 480)      ModeIndex = ModeIndex_720x480[Depth];
		else if(VDisplay == 576) ModeIndex = ModeIndex_720x576[Depth];
		break;
	case 768:
          	if(VDisplay == 576) ModeIndex = ModeIndex_768x576[Depth];
	  	break;
	case 800:
		if(VDisplay == 600)      ModeIndex = ModeIndex_800x600[Depth];
   	        else if(VDisplay == 480) ModeIndex = ModeIndex_800x480[Depth];
		break;
	case 848:
		if(VDisplay == 480) ModeIndex = ModeIndex_848x480[Depth];
		break;
	case 856:
		if(VDisplay == 480) ModeIndex = ModeIndex_856x480[Depth];
		break;
	case 1024:
		if(VDisplay == 768)      ModeIndex = ModeIndex_1024x768[Depth];
		else if(VDisplay == 576) ModeIndex = ModeIndex_1024x576[Depth];
		break;
	case 1152:
	        if(VDisplay == 864)    ModeIndex = ModeIndex_1152x864[Depth];
		else if(VGAEngine == SIS_300_VGA) {
		   if(VDisplay == 768) ModeIndex = ModeIndex_1152x768[Depth];
		}
		break;
	case 1280:
	        if(VDisplay == 768) {
		   if(VGAEngine == SIS_300_VGA) {
		      ModeIndex = ModeIndex_300_1280x768[Depth];
		   } else {
		      ModeIndex = ModeIndex_310_1280x768[Depth];
		   }
		} else if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
		else if(VDisplay == 720)    ModeIndex = ModeIndex_1280x720[Depth];
		else if(VDisplay == 960)    ModeIndex = ModeIndex_1280x960[Depth];
		break;
        case 1360:
	        if(VDisplay == 768) ModeIndex = ModeIndex_1360x768[Depth];
                break;
        case 1400:
		if(VGAEngine == SIS_315_VGA) {
	           if(VDisplay == 1050) ModeIndex = ModeIndex_1400x1050[Depth];
		}
		break;
	case 1600:
		if(VGAEngine == SIS_315_VGA) {
		   if(VBFlags & (VB_301B|VB_301C|VB_302B)) {
	              if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
		   }
		}
		break;
d1163 16
d1180 4
a1183 2
   return ModeIndex;
}
d1185 4
d1190 2
a1191 3
/*********************************************/
/*          HELPER: SetReg, GetReg           */
/*********************************************/
d1194 1
a1194 1
SiS_SetReg(SISIOADDRESS port, USHORT index, USHORT data)
d1196 26
a1221 2
   OutPortByte(port,index);
   OutPortByte(port + 1,data);
d1224 2
d1227 1
a1227 1
SiS_SetRegByte(SISIOADDRESS port, USHORT data)
d1229 77
a1305 1
   OutPortByte(port,data);
d1308 2
a1309 2
void
SiS_SetRegShort(SISIOADDRESS port, USHORT data)
d1311 15
a1325 1
   OutPortWord(port,data);
d1327 7
d1336 1
a1336 1
SiS_SetRegLong(SISIOADDRESS port, ULONG data)
a1337 1
   OutPortLong(port,data);
d1340 2
a1341 2
UCHAR
SiS_GetReg(SISIOADDRESS port, USHORT index)
d1343 9
a1351 2
   OutPortByte(port,index);
   return(InPortByte(port + 1));
d1354 2
a1355 2
UCHAR
SiS_GetRegByte(SISIOADDRESS port)
d1357 12
a1368 2
   return(InPortByte(port));
}
d1370 14
a1383 4
USHORT
SiS_GetRegShort(SISIOADDRESS port)
{
   return(InPortWord(port));
d1386 2
a1387 2
ULONG
SiS_GetRegLong(SISIOADDRESS port)
d1389 5
a1393 1
   return(InPortLong(port));
d1397 1
a1397 1
SiS_SetRegANDOR(SISIOADDRESS Port,USHORT Index,USHORT DataAND,USHORT DataOR)
d1399 2
a1400 5
  USHORT temp;

  temp = SiS_GetReg(Port,Index);
  temp = (temp & (DataAND)) | DataOR;
  SiS_SetReg(Port,Index,temp);
d1404 1
a1404 1
SiS_SetRegAND(SISIOADDRESS Port,USHORT Index,USHORT DataAND)
d1406 2
a1407 5
  USHORT temp;

  temp = SiS_GetReg(Port,Index);
  temp &= DataAND;
  SiS_SetReg(Port,Index,temp);
d1411 2
a1412 1
SiS_SetRegOR(SISIOADDRESS Port,USHORT Index,USHORT DataOR)
d1414 1
a1414 1
  USHORT temp;
d1416 10
a1425 3
  temp = SiS_GetReg(Port,Index);
  temp |= DataOR;
  SiS_SetReg(Port,Index,temp);
a1427 4
/*********************************************/
/*      HELPER: DisplayOn, DisplayOff        */
/*********************************************/

d1429 1
a1429 1
SiS_DisplayOn(SiS_Private *SiS_Pr)
d1431 2
a1432 1
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x01,0xDF,0x00);
d1436 2
a1437 1
SiS_DisplayOff(SiS_Private *SiS_Pr)
d1439 7
a1445 2
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x01,0xDF,0x20);
}
d1447 1
d1449 8
a1456 3
/*********************************************/
/*        HELPER: Init Port Addresses        */
/*********************************************/
d1458 23
a1480 29
void
SiSRegInit(SiS_Private *SiS_Pr, SISIOADDRESS BaseAddr)
{
   SiS_Pr->SiS_P3c4 = BaseAddr + 0x14;
   SiS_Pr->SiS_P3d4 = BaseAddr + 0x24;
   SiS_Pr->SiS_P3c0 = BaseAddr + 0x10;
   SiS_Pr->SiS_P3ce = BaseAddr + 0x1e;
   SiS_Pr->SiS_P3c2 = BaseAddr + 0x12;
   SiS_Pr->SiS_P3ca = BaseAddr + 0x1a;
   SiS_Pr->SiS_P3c6 = BaseAddr + 0x16;
   SiS_Pr->SiS_P3c7 = BaseAddr + 0x17;
   SiS_Pr->SiS_P3c8 = BaseAddr + 0x18;
   SiS_Pr->SiS_P3c9 = BaseAddr + 0x19;
   SiS_Pr->SiS_P3cb = BaseAddr + 0x1b;
   SiS_Pr->SiS_P3cd = BaseAddr + 0x1d;
   SiS_Pr->SiS_P3da = BaseAddr + 0x2a;
   SiS_Pr->SiS_Part1Port = BaseAddr + SIS_CRT2_PORT_04;     /* Digital video interface registers (LCD) */
   SiS_Pr->SiS_Part2Port = BaseAddr + SIS_CRT2_PORT_10;     /* 301 TV Encoder registers */
   SiS_Pr->SiS_Part3Port = BaseAddr + SIS_CRT2_PORT_12;     /* 301 Macrovision registers */
   SiS_Pr->SiS_Part4Port = BaseAddr + SIS_CRT2_PORT_14;     /* 301 VGA2 (and LCD) registers */
   SiS_Pr->SiS_Part5Port = BaseAddr + SIS_CRT2_PORT_14 + 2; /* 301 palette address port registers */
   SiS_Pr->SiS_DDC_Port = BaseAddr + 0x14;                  /* DDC Port ( = P3C4, SR11/0A) */
   SiS_Pr->SiS_VidCapt = BaseAddr + SIS_VIDEO_CAPTURE;
   SiS_Pr->SiS_VidPlay = BaseAddr + SIS_VIDEO_PLAYBACK;
}

/*********************************************/
/*             HELPER: GetSysFlags           */
/*********************************************/
d1482 1
a1482 4
static void
SiS_GetSysFlags(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   unsigned char cr5f, temp1, temp2;
d1484 30
a1513 47
   /* 661 and newer: NEVER write non-zero to SR11[7:4] */
   /* (SR11 is used for DDC and in enable/disablebridge) */
   SiS_Pr->SiS_SensibleSR11 = FALSE;
   SiS_Pr->SiS_MyCR63 = 0x63;
   if(HwInfo->jChipType >= SIS_661) {
      SiS_Pr->SiS_SensibleSR11 = TRUE;
      SiS_Pr->SiS_MyCR63 = 0x53;
   }

   /* You should use the macros, not these flags directly */

   SiS_Pr->SiS_SysFlags = 0;
   if(HwInfo->jChipType == SIS_650) {
      cr5f = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f) & 0xf0;
      SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x5c,0x07);
      temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5c) & 0xf8;
      SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x5c,0xf8);
      temp2 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5c) & 0xf8;
      if((!temp1) || (temp2)) {
         switch(cr5f) {
	    case 0x80:
	    case 0x90:
	    case 0xc0:
	       SiS_Pr->SiS_SysFlags |= SF_IsM650;  break;
	    case 0xa0:
	    case 0xb0:
	    case 0xe0:
	       SiS_Pr->SiS_SysFlags |= SF_Is651;   break;
	 }
      } else {
         switch(cr5f) {
	    case 0x90:
	       temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5c) & 0xf8;
	       switch(temp1) {
	          case 0x00: SiS_Pr->SiS_SysFlags |= SF_IsM652; break;
		  case 0x40: SiS_Pr->SiS_SysFlags |= SF_IsM653; break;
		  default:   SiS_Pr->SiS_SysFlags |= SF_IsM650; break;
	       }
	       break;
	    case 0xb0:
	       SiS_Pr->SiS_SysFlags |= SF_Is652;  break;
	    default:
	       SiS_Pr->SiS_SysFlags |= SF_IsM650; break;
	 }
      }
   }
}
d1515 2
a1516 3
/*********************************************/
/*         HELPER: Init PCI & Engines        */
/*********************************************/
d1518 27
a1544 45
static void
SiSInitPCIetc(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   switch(HwInfo->jChipType) {
   case SIS_300:
   case SIS_540:
   case SIS_630:
   case SIS_730:
      /* Set - PCI LINEAR ADDRESSING ENABLE (0x80)
       *     - RELOCATED VGA IO  (0x20)
       *     - MMIO ENABLE (0x1)
       */
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x20,0xa1);
      /*  - Enable 2D (0x40)
       *  - Enable 3D (0x02)
       *  - Enable 3D Vertex command fetch (0x10) ?
       *  - Enable 3D command parser (0x08) ?
       */
      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x5A);
      break;
   case SIS_315H:
   case SIS_315:
   case SIS_315PRO:
   case SIS_650:
   case SIS_740:
   case SIS_330:
   case SIS_661:
   case SIS_741:
   case SIS_660:
   case SIS_760:
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x20,0xa1);
      /*  - Enable 2D (0x40)
       *  - Enable 3D (0x02)
       *  - Enable 3D vertex command fetch (0x10)
       *  - Enable 3D command parser (0x08)
       *  - Enable 3D G/L transformation engine (0x80)
       */
      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0xDA);
      break;
   case SIS_550:
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x20,0xa1);
      /* No 3D engine ! */
      /*  - Enable 2D (0x40)
       */
      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x40);
d1548 2
a1549 6
/*********************************************/
/*             HELPER: SetLVDSetc            */
/*********************************************/

void
SiSSetLVDSetc(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d1551 2
a1552 1
   ULONG   temp;
d1554 2
a1555 6
   SiS_Pr->SiS_IF_DEF_LVDS = 0;
   SiS_Pr->SiS_IF_DEF_TRUMPION = 0;
   SiS_Pr->SiS_IF_DEF_CH70xx = 0;
   SiS_Pr->SiS_IF_DEF_DSTN = 0;
   SiS_Pr->SiS_IF_DEF_FSTN = 0;
   SiS_Pr->SiS_IF_DEF_CONEX = 0;
d1557 1
a1557 1
   SiS_Pr->SiS_ChrontelInit = 0;
d1559 14
a1572 43
   switch(HwInfo->jChipType) {
#ifdef SIS300
   case SIS_540:
   case SIS_630:
   case SIS_730:
        /* Check for SiS30x first */
        temp = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x00);
	if((temp == 1) || (temp == 2)) return;
      	temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
      	temp = (temp & 0x0E) >> 1;
      	if((temp >= 2) && (temp <= 5)) SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)   SiS_Pr->SiS_IF_DEF_TRUMPION = 1;
      	if((temp == 4) || (temp == 5)) {
		/* Save power status (and error check) - UNUSED */
		SiS_Pr->SiS_Backup70xx = SiS_GetCH700x(SiS_Pr, 0x0e);
		SiS_Pr->SiS_IF_DEF_CH70xx = 1;
        }
	break;
#endif
#ifdef SIS315H
   case SIS_550:
   case SIS_650:
   case SIS_740:
   case SIS_330:
        temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
      	temp = (temp & 0x0E) >> 1;
      	if((temp >= 2) && (temp <= 3)) SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)  SiS_Pr->SiS_IF_DEF_CH70xx = 2;
        break;
   case SIS_661:
   case SIS_741:
   case SIS_660:
   case SIS_760:
        temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
      	temp = (temp & 0xe0) >> 5;
      	if((temp >= 2) && (temp <= 3)) SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)  SiS_Pr->SiS_IF_DEF_CH70xx = 2;
	if(temp == 4)  SiS_Pr->SiS_IF_DEF_CONEX = 1;  /* Not yet supported */
        break;
#endif
   default:
        break;
   }
d1575 6
a1580 3
/*********************************************/
/*          HELPER: Enable DSTN/FSTN         */
/*********************************************/
d1582 16
a1597 4
void
SiS_SetEnableDstn(SiS_Private *SiS_Pr, int enable)
{
   SiS_Pr->SiS_IF_DEF_DSTN = enable ? 1 : 0;
d1600 2
a1601 2
void
SiS_SetEnableFstn(SiS_Private *SiS_Pr, int enable)
d1603 18
a1620 1
   SiS_Pr->SiS_IF_DEF_FSTN = enable ? 1 : 0;
d1623 2
a1624 6
/*********************************************/
/*        HELPER: Determine ROM usage        */
/*********************************************/

static void
SiSDetermineROMUsage(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d1626 3
a1628 1
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
d1630 5
a1634 32
   if((ROMAddr) && (HwInfo->UseROM)) {
      if((ROMAddr[0x00] != 0x55) || (ROMAddr[0x01] != 0xAA)) {
         SiS_Pr->SiS_UseROM = FALSE;
      } else if(HwInfo->jChipType == SIS_300) {
        /* 300: We check if the code starts below 0x220 by
	 * checking the jmp instruction at the beginning
	 * of the BIOS image.
	 */
	 if((ROMAddr[3] == 0xe9) &&
	    ((ROMAddr[5] << 8) | ROMAddr[4]) > 0x21a)
	    SiS_Pr->SiS_UseROM = TRUE;
	 else
	    SiS_Pr->SiS_UseROM = FALSE;
      } else if(HwInfo->jChipType < SIS_315H) {
#if 0
        /* Rest of 300 series: We don't use the ROM image if
	 * the BIOS version < 2.0.0 as such old BIOSes don't
	 * have the needed data at the expected locations.
	 */
         if(ROMAddr[0x06] < '2')  SiS_Pr->SiS_UseROM = FALSE;
	 else                     SiS_Pr->SiS_UseROM = TRUE;
#else
	/* Sony's VAIO BIOS 1.09 follows the standard, so perhaps
	 * the others do as well
	 */
	 SiS_Pr->SiS_UseROM = TRUE;
#endif
      } else {
         /* 315/330 series stick to the standard */
	 SiS_Pr->SiS_UseROM = TRUE;
      }
   } else SiS_Pr->SiS_UseROM = FALSE;
d1636 7
d1645 24
a1668 3
/*********************************************/
/*        HELPER: SET SEGMENT REGISTERS      */
/*********************************************/
d1670 2
a1671 2
static void
SiS_SetSegRegLower(SiS_Private *SiS_Pr, USHORT value)
d1673 5
a1677 1
   USHORT temp;
d1679 25
a1703 7
   value &= 0x00ff;
   temp = SiS_GetRegByte(SiS_Pr->SiS_P3cb) & 0xf0;
   temp |= (value >> 4);
   SiS_SetRegByte(SiS_Pr->SiS_P3cb, temp);
   temp = SiS_GetRegByte(SiS_Pr->SiS_P3cd) & 0xf0;
   temp |= (value & 0x0f);
   SiS_SetRegByte(SiS_Pr->SiS_P3cd, temp);
d1706 2
a1707 2
static void
SiS_SetSegRegUpper(SiS_Private *SiS_Pr, USHORT value)
d1709 8
a1716 1
   USHORT temp;
d1718 4
a1721 7
   value &= 0x00ff;
   temp = SiS_GetRegByte(SiS_Pr->SiS_P3cb) & 0x0f;
   temp |= (value & 0xf0);
   SiS_SetRegByte(SiS_Pr->SiS_P3cb, temp);
   temp = SiS_GetRegByte(SiS_Pr->SiS_P3cd) & 0x0f;
   temp |= (value << 4);
   SiS_SetRegByte(SiS_Pr->SiS_P3cd, temp);
d1724 3
a1726 2
static void
SiS_SetSegmentReg(SiS_Private *SiS_Pr, USHORT value)
d1728 13
a1740 2
   SiS_SetSegRegLower(SiS_Pr, value);
   SiS_SetSegRegUpper(SiS_Pr, value);
d1743 2
a1744 2
static void
SiS_ResetSegmentReg(SiS_Private *SiS_Pr)
d1746 15
a1760 1
   SiS_SetSegmentReg(SiS_Pr, 0);
d1763 2
a1764 2
static void
SiS_SetSegmentRegOver(SiS_Private *SiS_Pr, USHORT value)
a1765 1
   USHORT temp = value >> 8;
d1767 2
a1768 5
   temp &= 0x07;
   temp |= (temp << 4);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x1d,temp);
   SiS_SetSegmentReg(SiS_Pr, value);
}
d1770 14
a1783 4
static void
SiS_ResetSegmentRegOver(SiS_Private *SiS_Pr)
{
   SiS_SetSegmentRegOver(SiS_Pr, 0);
d1786 5
a1790 2
static void
SiS_ResetSegmentRegisters(SiS_Private *SiS_Pr,PSIS_HW_INFO HwInfo)
d1792 27
a1818 3
   if((IS_SIS65x) || (HwInfo->jChipType >= SIS_661)) {
      SiS_ResetSegmentReg(SiS_Pr);
      SiS_ResetSegmentRegOver(SiS_Pr);
d1822 10
a1831 3
/*********************************************/
/*             HELPER: GetVBType             */
/*********************************************/
d1833 1
d1835 1
a1835 1
SiS_GetVBType(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d1837 3
a1839 1
  USHORT flag=0, rev=0, nolcd=0;
d1841 8
a1848 1
  SiS_Pr->SiS_VBType = 0;
d1850 1
a1850 1
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) return;
d1852 2
a1853 1
  flag = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x00);
d1855 1
a1855 1
  if(flag > 3) return;
d1857 1
a1857 1
  rev = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x01);
d1859 3
a1861 28
  if(flag >= 2) {
     SiS_Pr->SiS_VBType = VB_SIS302B;
  } else if(flag == 1) {
     SiS_Pr->SiS_VBType = VB_SIS301;
     if(rev >= 0xC0) {
       	SiS_Pr->SiS_VBType = VB_SIS301C;
     } else if(rev >= 0xB0) {
       	SiS_Pr->SiS_VBType = VB_SIS301B;
	/* Check if 30xB DH version (no LCD support, use Panel Link instead) */
    	nolcd = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x23);
        if(!(nolcd & 0x02)) SiS_Pr->SiS_VBType |= VB_NoLCD;
     }
  }
  if(SiS_Pr->SiS_VBType & (VB_SIS301B | VB_SIS301C | VB_SIS302B)) {
     if(rev >= 0xD0) {
	SiS_Pr->SiS_VBType &= ~(VB_SIS301B | VB_SIS301C | VB_SIS302B | VB_NoLCD);
	if(rev >= 0xE0) {
	   flag = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x39);
	   if(flag == 0xff)
	      SiS_Pr->SiS_VBType |= VB_SIS302LV;
	   else
	      SiS_Pr->SiS_VBType |= VB_SIS302ELV;
	} else {
	   SiS_Pr->SiS_VBType |= VB_SIS301LV;
	}
     }
  }
}
d1863 1
a1863 3
/*********************************************/
/*            HELPER: GetDRAMSize            */
/*********************************************/
d1865 2
a1866 8
#ifndef LINUX_XF86
static ULONG
GetDRAMSize(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  ULONG   AdapterMemorySize = 0;
#ifdef SIS315H
  USHORT  counter;
#endif
d1868 4
a1871 16
  switch(HwInfo->jChipType) {
#ifdef SIS315H
  case SIS_315H:
  case SIS_315:
  case SIS_315PRO:
    	counter = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
	AdapterMemorySize = 1 << ((counter & 0xF0) >> 4);
	counter >>= 2;
	counter &= 0x03;
	if(counter == 0x02) {
		AdapterMemorySize += (AdapterMemorySize / 2);      /* DDR asymetric */
	} else if(counter != 0) {
		AdapterMemorySize <<= 1;                           /* SINGLE_CHANNEL_2_RANK or DUAL_CHANNEL_1_RANK */
	}
	AdapterMemorySize *= (1024*1024);
        break;
d1873 12
a1884 28
  case SIS_330:
    	counter = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
	AdapterMemorySize = 1 << ((counter & 0xF0) >> 4);
	counter &= 0x0c;
	if(counter != 0) {
		AdapterMemorySize <<= 1;
	}
	AdapterMemorySize *= (1024*1024);
	break;

  case SIS_550:
  case SIS_650:
  case SIS_740:
  	counter = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14) & 0x3F;
      	counter++;
      	AdapterMemorySize = counter * 4;
      	AdapterMemorySize *= (1024*1024);
	break;

  case SIS_661:
  case SIS_741:
  case SIS_660:
  case SIS_760:
        counter = (SiS_GetReg(SiS_Pr->SiS_P3c4,0x79) & 0xf0) >> 4;
	AdapterMemorySize = 1 << counter;
      	AdapterMemorySize *= (1024*1024);
        break;
#endif
d1886 1
a1886 13
#ifdef SIS300
  case SIS_300:
  case SIS_540:
  case SIS_630:
  case SIS_730:
      	AdapterMemorySize = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14) & 0x3F;
      	AdapterMemorySize++;
      	AdapterMemorySize *= (1024*1024);
	break;
#endif
  default:
        break;
  }
d1888 2
a1889 1
  return AdapterMemorySize;
d1893 2
a1894 8
/*********************************************/
/*           HELPER: Check RAM size          */
/*********************************************/

#ifndef LINUX_XF86
static BOOLEAN
SiS_CheckMemorySize(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                    USHORT ModeNo, USHORT ModeIdIndex)
d1896 6
a1901 2
  USHORT memorysize,modeflag;
  ULONG  temp;
d1903 8
a1910 19
  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     if(ModeNo <= 0x13) {
        modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     } else {
        modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     }
  }

  memorysize = modeflag & MemoryInfoFlag;
  memorysize >>= MemorySizeShift;		/* Get required memory size */
  memorysize++;

  temp = GetDRAMSize(SiS_Pr, HwInfo);       	/* Get adapter memory size (in MB) */
  temp /= (1024*1024);

  if(temp < memorysize) return(FALSE);
  else return(TRUE);
a1911 1
#endif
d1913 1
a1913 3
/*********************************************/
/*           HELPER: Get DRAM type           */
/*********************************************/
d1916 2
a1917 2
static UCHAR
SiS_Get310DRAMType(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d1924 6
a1929 7
     if(HwInfo->jChipType >= SIS_661) {
        data = SiS_GetReg(SiS_Pr->SiS_P3d4,0x78) & 0x07;
     } else if(IS_SIS550650740) {
        data = SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x07;
     } else {	/* 315, 330 */
        data = SiS_GetReg(SiS_Pr->SiS_P3c4,0x3a) & 0x03;
        if(HwInfo->jChipType == SIS_330) {
d1931 1
a1931 1
	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f) & 0x30;
d1947 3
d1951 3
a1953 2
USHORT
SiS_GetMCLK(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d1955 18
a1972 1
  USHORT index;
d1974 28
a2001 9
  index = SiS_Get310DRAMType(SiS_Pr, HwInfo);
  if(HwInfo->jChipType >= SIS_661) {
     return(SiS_Pr->SiS_MCLKData_0[index].CLOCK);
  } else if(index >= 4) {
     index -= 4;
     return(SiS_Pr->SiS_MCLKData_1[index].CLOCK);
  } else {
     return(SiS_Pr->SiS_MCLKData_0[index].CLOCK);
  }
d2003 38
d2042 9
d2052 12
a2063 3
/*********************************************/
/*           HELPER: ClearBuffer             */
/*********************************************/
d2065 2
a2066 3
#ifndef LINUX_XF86
static void
SiS_ClearBuffer(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo)
d2068 19
a2086 4
  UCHAR   *VideoMemoryAddress = HwInfo->pjVideoMemoryAddress;
  ULONG   AdapterMemorySize  = (ULONG)HwInfo->ulVideoMemorySize;
  USHORT  *pBuffer;
  int i;
d2088 22
a2109 4
  if(SiS_Pr->SiS_ModeType >= ModeEGA) {
     if(ModeNo > 0x13) {
        AdapterMemorySize = GetDRAMSize(SiS_Pr, HwInfo);
        SiS_SetMemory(VideoMemoryAddress,AdapterMemorySize,0);
d2111 2
a2112 3
        pBuffer = (USHORT *)VideoMemoryAddress;
        for(i=0; i<0x4000; i++)
           pBuffer[i] = 0x0000;
d2114 2
a2115 9
  } else {
     pBuffer = (USHORT *)VideoMemoryAddress;
     if(SiS_Pr->SiS_ModeType < ModeCGA) {
        for(i=0; i<0x4000; i++)
           pBuffer[i] = 0x0720;
     } else {
        SiS_SetMemory(VideoMemoryAddress,0x8000,0);
     }
  }
a2116 5
#endif

/*********************************************/
/*           HELPER: SearchModeID            */
/*********************************************/
d2118 7
d2126 2
a2127 1
SiS_SearchModeID(SiS_Private *SiS_Pr, USHORT *ModeNo, USHORT *ModeIdIndex)
d2129 4
a2132 1
   UCHAR VGAINFO = SiS_Pr->SiS_VGAINFO;
d2134 11
a2144 1
   if(*ModeNo <= 0x13) {
d2146 1
a2146 1
      if((*ModeNo) <= 0x05) (*ModeNo) |= 0x01;
d2148 2
a2149 4
      for(*ModeIdIndex = 0; ;(*ModeIdIndex)++) {
         if(SiS_Pr->SiS_SModeIDTable[*ModeIdIndex].St_ModeID == (*ModeNo)) break;
         if(SiS_Pr->SiS_SModeIDTable[*ModeIdIndex].St_ModeID == 0xFF)   return FALSE;
      }
d2151 14
a2164 10
      if(*ModeNo == 0x07) {
          if(VGAINFO & 0x10) (*ModeIdIndex)++;   /* 400 lines */
          /* else 350 lines */
      }
      if(*ModeNo <= 0x03) {
         if(!(VGAINFO & 0x80)) (*ModeIdIndex)++;
         if(VGAINFO & 0x10)    (*ModeIdIndex)++; /* 400 lines  */
         /* else 350 lines  */
      }
      /* else 200 lines  */
d2166 11
d2179 2
a2180 4
      for(*ModeIdIndex = 0; ;(*ModeIdIndex)++) {
         if(SiS_Pr->SiS_EModeIDTable[*ModeIdIndex].Ext_ModeID == (*ModeNo)) break;
         if(SiS_Pr->SiS_EModeIDTable[*ModeIdIndex].Ext_ModeID == 0xFF)      return FALSE;
      }
d2182 2
a2184 2
   return TRUE;
}
d2186 3
a2188 3
/*********************************************/
/*            HELPER: GetModePtr             */
/*********************************************/
d2190 1
a2190 4
UCHAR
SiS_GetModePtr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex)
{
   UCHAR index;
d2192 1
a2192 8
   if(ModeNo <= 0x13) {
     	index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_StTableIndex;
   } else {
     	if(SiS_Pr->SiS_ModeType <= 0x02) index = 0x1B;    /* 02 -> ModeEGA  */
     	else index = 0x0F;
   }
   return index;
}
d2194 1
a2194 30
/*********************************************/
/*           HELPER: LowModeTests            */
/*********************************************/

static BOOLEAN
SiS_DoLowModeTest(SiS_Private *SiS_Pr, USHORT ModeNo, PSIS_HW_INFO HwInfo)
{
    USHORT temp,temp1,temp2;

    if((ModeNo != 0x03) && (ModeNo != 0x10) && (ModeNo != 0x12))
       return(1);
    temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x11);
    SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x11,0x80);
    temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x00);
    SiS_SetReg(SiS_Pr->SiS_P3d4,0x00,0x55);
    temp2 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x00);
    SiS_SetReg(SiS_Pr->SiS_P3d4,0x00,temp1);
    SiS_SetReg(SiS_Pr->SiS_P3d4,0x11,temp);
    if((HwInfo->jChipType >= SIS_315H) ||
       (HwInfo->jChipType == SIS_300)) {
       if(temp2 == 0x55) return(0);
       else return(1);
    } else {
       if(temp2 != 0x55) return(1);
       else {
          SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x35,0x01);
          return(0);
       }
    }
}
d2196 1
a2196 7
static void
SiS_SetLowModeTest(SiS_Private *SiS_Pr, USHORT ModeNo, PSIS_HW_INFO HwInfo)
{
    if(SiS_DoLowModeTest(SiS_Pr, ModeNo, HwInfo)) {
       SiS_Pr->SiS_SetFlag |= LowModeTests;
    }
}
d2198 2
a2199 3
/*********************************************/
/*           HELPER: GetColorDepth           */
/*********************************************/
d2201 2
a2202 6
USHORT
SiS_GetColorDepth(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex)
{
  USHORT ColorDepth[6] = { 1, 2, 4, 4, 6, 8};
  SHORT  index;
  USHORT modeflag;
d2204 1
a2204 9
  /* Do NOT check UseCustomMode, will skrew up FIFO */
  if(ModeNo == 0xfe) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     if(ModeNo <= 0x13)
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     else
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }
d2206 7
a2212 4
  index = (modeflag & ModeInfoFlag) - ModeEGA;
  if(index < 0) index = 0;
  return(ColorDepth[index]);
}
d2214 2
a2215 3
/*********************************************/
/*             HELPER: GetOffset             */
/*********************************************/
d2217 7
a2223 5
USHORT
SiS_GetOffset(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
              USHORT RefreshRateTableIndex,PSIS_HW_INFO HwInfo)
{
  USHORT temp,colordepth,infoflag;
d2225 1
a2225 8
  if(SiS_Pr->UseCustomMode) {
     infoflag = SiS_Pr->CInfoFlag;
     temp = SiS_Pr->CHDisplay / 16;
  } else {
     infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
     temp = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeOffset;
     temp = SiS_Pr->SiS_ScreenOffset[temp];
  }
d2227 4
a2230 1
  colordepth = SiS_GetColorDepth(SiS_Pr,ModeNo,ModeIdIndex);
d2232 5
a2236 1
  if(infoflag & InterlaceMode) temp <<= 1;
d2238 8
a2245 1
  temp *= colordepth;
d2247 2
a2248 8
  if( ( ((ModeNo >= 0x26) && (ModeNo <= 0x28)) ||
        ModeNo == 0x3f ||
	ModeNo == 0x42 ||
	ModeNo == 0x45 ) ||
      (SiS_Pr->UseCustomMode && (SiS_Pr->CHDisplay % 16)) ) {
     colordepth >>= 1;
     temp += colordepth;
  }
d2250 2
a2251 2
  return(temp);
}
d2253 2
a2254 3
/*********************************************/
/*                   SEQ                     */
/*********************************************/
d2256 16
a2271 5
static void
SiS_SetSeqRegs(SiS_Private *SiS_Pr, USHORT StandTableIndex, PSIS_HW_INFO HwInfo)
{
   UCHAR SRdata;
   USHORT i;
d2273 3
a2275 1
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x00,0x03);           	/* Set SR0  */
d2277 2
a2278 1
   SRdata = SiS_Pr->SiS_StandTable[StandTableIndex].SR[0];
d2280 1
d2282 5
a2286 15
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
         SRdata |= 0x01;
      }
      if(HwInfo->jChipType >= SIS_661) {
         if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToTV)) {
	    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
               SRdata |= 0x01;          		/* 8 dot clock  */
            }
	 }
      } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
         if(SiS_Pr->SiS_VBType & VB_NoLCD) {
	    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
               SRdata |= 0x01;          		/* 8 dot clock  */
            }
	 }
d2290 26
a2315 14
   if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
      if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
         if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
            if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
               SRdata |= 0x01;        			/* 8 dot clock  */
            }
         }
      }
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
         if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
            SRdata |= 0x01;          			/* 8 dot clock  */
         }
      }
   }
d2317 1
a2317 1
   SRdata |= 0x20;                			/* screen off  */
d2319 1
a2319 1
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x01,SRdata);
d2321 1
a2321 5
   for(i = 2; i <= 4; i++) {
      SRdata = SiS_Pr->SiS_StandTable[StandTableIndex].SR[i-1];
      SiS_SetReg(SiS_Pr->SiS_P3c4,i,SRdata);
   }
}
d2323 1
a2323 3
/*********************************************/
/*                  MISC                     */
/*********************************************/
d2325 1
a2325 4
static void
SiS_SetMiscRegs(SiS_Private *SiS_Pr, USHORT StandTableIndex, PSIS_HW_INFO HwInfo)
{
   UCHAR Miscdata;
d2327 2
a2328 1
   Miscdata = SiS_Pr->SiS_StandTable[StandTableIndex].MISC;
d2330 9
a2338 6
   if(HwInfo->jChipType < SIS_661) {
      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
         if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
            Miscdata |= 0x0C;
         }
      }
d2341 2
a2342 2
   SiS_SetRegByte(SiS_Pr->SiS_P3c2,Miscdata);
}
d2344 2
a2345 3
/*********************************************/
/*                  CRTC                     */
/*********************************************/
d2347 1
a2347 6
static void
SiS_SetCRTCRegs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                USHORT StandTableIndex)
{
  UCHAR CRTCdata;
  USHORT i;
d2349 3
a2351 1
  SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);                       /* Unlock CRTC */
d2353 2
a2354 14
  for(i = 0; i <= 0x18; i++) {
     CRTCdata = SiS_Pr->SiS_StandTable[StandTableIndex].CRTC[i];
     SiS_SetReg(SiS_Pr->SiS_P3d4,i,CRTCdata);                     /* Set CRTC(3d4) */
  }
  if( ( (HwInfo->jChipType == SIS_630) ||
        (HwInfo->jChipType == SIS_730) )  &&
      (HwInfo->jChipRevision >= 0x30) ) {       	   /* for 630S0 */
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToTV)) {
           SiS_SetReg(SiS_Pr->SiS_P3d4,0x18,0xFE);
        }
     }
  }
}
d2356 11
a2366 3
/*********************************************/
/*                   ATT                     */
/*********************************************/
d2368 1
a2368 6
static void
SiS_SetATTRegs(SiS_Private *SiS_Pr, USHORT StandTableIndex,
               PSIS_HW_INFO HwInfo)
{
   UCHAR ARdata;
   USHORT i;
d2370 3
a2372 7
   for(i = 0; i <= 0x13; i++) {
      ARdata = SiS_Pr->SiS_StandTable[StandTableIndex].ATTR[i];
#if 0
      if((i <= 0x0f) || (i == 0x11)) {
         if(ds:489 & 0x08) {
	    continue;
         }
d2374 1
a2374 50
#endif
      if(i == 0x13) {
         /* Pixel shift. If screen on LCD or TV is shifted left or right,
          * this might be the cause.
          */
         if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
            if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)  ARdata=0;
         }
         if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
            if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
               if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
                  if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) ARdata=0;
               }
            }
         }
	 if(HwInfo->jChipType >= SIS_661) {
	    if(SiS_Pr->SiS_VBInfo & (SetCRT2ToTV | SetCRT2ToLCD)) {
	       if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) ARdata=0;
	    }
	 } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
            if(HwInfo->jChipType >= SIS_315H) {
	       if(IS_SIS550650740660) {
	          /* 315, 330 don't do this */
	          if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	             if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) ARdata=0;
	          } else {
	             ARdata = 0;
	          }
	       }
	    } else {
               if(SiS_Pr->SiS_VBInfo & SetInSlaveMode)  ARdata=0;
	    }
         }
      }
      SiS_GetRegByte(SiS_Pr->SiS_P3da);                         /* reset 3da  */
      SiS_SetRegByte(SiS_Pr->SiS_P3c0,i);                       /* set index  */
      SiS_SetRegByte(SiS_Pr->SiS_P3c0,ARdata);                  /* set data   */
   }
   SiS_GetRegByte(SiS_Pr->SiS_P3da);                            /* reset 3da  */
   SiS_SetRegByte(SiS_Pr->SiS_P3c0,0x14);                       /* set index  */
   SiS_SetRegByte(SiS_Pr->SiS_P3c0,0x00);                       /* set data   */

   SiS_GetRegByte(SiS_Pr->SiS_P3da);
   SiS_SetRegByte(SiS_Pr->SiS_P3c0,0x20);			/* Enable Attribute  */
   SiS_GetRegByte(SiS_Pr->SiS_P3da);
}

/*********************************************/
/*                   GRC                     */
/*********************************************/
d2376 4
a2379 5
static void
SiS_SetGRCRegs(SiS_Private *SiS_Pr, USHORT StandTableIndex)
{
   UCHAR GRdata;
   USHORT i;
d2381 5
a2385 3
   for(i = 0; i <= 0x08; i++) {
      GRdata = SiS_Pr->SiS_StandTable[StandTableIndex].GRC[i];
      SiS_SetReg(SiS_Pr->SiS_P3ce,i,GRdata);
d2388 21
a2408 3
   if(SiS_Pr->SiS_ModeType > ModeVGA) {
      /* 256 color disable */
      SiS_SetRegAND(SiS_Pr->SiS_P3ce,0x05,0xBF);
a2409 1
}
d2411 2
a2412 3
/*********************************************/
/*          CLEAR EXTENDED REGISTERS         */
/*********************************************/
d2414 7
a2420 4
static void
SiS_ClearExt1Regs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT i;
d2422 8
a2429 3
  for(i = 0x0A; i <= 0x0E; i++) {
     SiS_SetReg(SiS_Pr->SiS_P3c4,i,0x00);
  }
d2431 1
a2431 4
  if(HwInfo->jChipType >= SIS_315H) {
     SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x37,0xFE);
  }
}
d2433 5
a2437 3
/*********************************************/
/*                 RESET VCLK                */
/*********************************************/
d2439 6
a2444 11
static void
SiS_ResetCRT1VCLK(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   if(HwInfo->jChipType >= SIS_315H) {
      if(HwInfo->jChipType < SIS_661) {
         if(SiS_Pr->SiS_IF_DEF_LVDS == 0) return;
      }
   } else {
      if((SiS_Pr->SiS_IF_DEF_LVDS == 0) &&
         (!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) ) {
	 return;
d2448 4
a2451 16
   if(HwInfo->jChipType >= SIS_315H) {
      SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x31,0xCF,0x20);
   } else {
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x20);
   }
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2B,SiS_Pr->SiS_VCLKData[1].SR2B);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2C,SiS_Pr->SiS_VCLKData[1].SR2C);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2D,0x80);
   if(HwInfo->jChipType >= SIS_315H) {
      SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x31,0xcf,0x10);
   } else {
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x10);
   }
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2B,SiS_Pr->SiS_VCLKData[0].SR2B);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2C,SiS_Pr->SiS_VCLKData[0].SR2C);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2D,0x80);
d2453 2
d2456 8
a2463 6
/*********************************************/
/*                  SYNC                     */
/*********************************************/

static void
SiS_SetCRT1Sync(SiS_Private *SiS_Pr, USHORT RefreshRateTableIndex)
d2465 5
a2469 1
  USHORT sync;
d2471 10
a2480 5
  if(SiS_Pr->UseCustomMode) {
     sync = SiS_Pr->CInfoFlag >> 8;
  } else {
     sync = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag >> 8;
  }
d2482 1
a2482 4
  sync &= 0xC0;
  sync |= 0x2f;
  SiS_SetRegByte(SiS_Pr->SiS_P3c2,sync);
}
d2484 5
a2488 11
/*********************************************/
/*                  CRTC/2                   */
/*********************************************/

#ifdef SIS315H
static void
SiS_GetLCDACRT1Ptr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
		   USHORT RefreshRateTableIndex, USHORT *ResIndex,
		   USHORT *DisplayType)
 {
  USHORT modeflag = 0;
d2490 1
a2490 7
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     *ResIndex = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     *ResIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }
d2492 1
a2492 1
  *ResIndex &= 0x3F;
d2494 1
a2494 3
  *DisplayType = SiS_Pr->SiS_LCDResInfo;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) *DisplayType += 32;
  if(modeflag & HalfDCLK)                 *DisplayType += 16;
d2496 4
a2499 13
  if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
        *DisplayType = 100;
	if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) *DisplayType += 2;
        if(modeflag & HalfDCLK)                 *DisplayType += 1;
     }
  } else if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        *DisplayType = 104;
	if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) *DisplayType += 2;
        if(modeflag & HalfDCLK)                 *DisplayType += 1;
     }
  }
d2501 3
a2503 1
}
d2506 6
a2511 11
static void
SiS_SetCRT1CRTC(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex,
		PSIS_HW_INFO HwInfo)
{
  UCHAR  index;
  USHORT temp,i,j,modeflag;
#ifdef SIS315H
  USHORT ResIndex,DisplayType;
  const SiS_LCDACRT1DataStruct *LCDACRT1Ptr = NULL;
#endif
d2513 3
a2515 1
  SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);		/* unlock cr0-7 */
d2517 1
a2517 1
  if(SiS_Pr->UseCustomMode) {
d2519 14
a2532 1
     modeflag = SiS_Pr->CModeFlag;
d2534 12
a2545 12
     for(i=0,j=0;i<=7;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
     }
     for(j=0x10;i<=10;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
     }
     for(j=0x15;i<=12;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
     }
     for(j=0x0A;i<=15;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3c4,j,SiS_Pr->CCRT1CRTC[i]);
     }
d2547 1
a2547 2
     temp = SiS_Pr->CCRT1CRTC[16] & 0xE0;
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x0E,temp);
d2549 10
a2558 3
     temp = (SiS_Pr->CCRT1CRTC[16] & 0x01) << 5;
     if(modeflag & DoubleScanMode) temp |= 0x80;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0x5F,temp);
d2560 3
a2562 1
  } else {
d2564 5
a2568 5
     if(ModeNo <= 0x13) {
        modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     } else {
        modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     }
d2570 8
a2577 1
     if((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
d2579 8
a2586 1
#ifdef SIS315H
d2588 23
a2610 1
        SiS_GetLCDACRT1Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, &ResIndex, &DisplayType);
d2612 3
a2614 27
        switch(DisplayType) {
        case Panel_1024x768      : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_1;     break;
        case Panel_1280x1024     : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_1;    break;
        case Panel_1400x1050     : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11400x1050_1;    break;
        case Panel_1600x1200     : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11600x1200_1;    break;
        case Panel_1024x768  + 16: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_1_H;   break;
        case Panel_1280x1024 + 16: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_1_H;  break;
        case Panel_1400x1050 + 16: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11400x1050_1_H;  break;
        case Panel_1600x1200 + 16: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11600x1200_1_H;  break;
        case Panel_1024x768  + 32: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_2;     break;
        case Panel_1280x1024 + 32: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_2;    break;
        case Panel_1400x1050 + 32: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11400x1050_2;    break;
        case Panel_1600x1200 + 32: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11600x1200_2;    break;
        case Panel_1024x768  + 48: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_2_H;   break;
        case Panel_1280x1024 + 48: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_2_H;  break;
        case Panel_1400x1050 + 48: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11400x1050_2_H;  break;
        case Panel_1600x1200 + 48: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11600x1200_2_H;  break;
        case 100:	  	   LCDACRT1Ptr = Compaq1280x1024_LCDACRT1_1;         break;
        case 101:		   LCDACRT1Ptr = Compaq1280x1024_LCDACRT1_1_H;       break;
        case 102:		   LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_2;    break;
        case 103:		   LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_2_H;  break;
        case 104:		   LCDACRT1Ptr = Clevo1024x768_LCDACRT1_1;           break;
        case 105:		   LCDACRT1Ptr = Clevo1024x768_LCDACRT1_1_H;         break;
        case 106:		   LCDACRT1Ptr = Clevo1024x768_LCDACRT1_2;           break;
        case 107:		   LCDACRT1Ptr = Clevo1024x768_LCDACRT1_2_H;         break;
        default:                   LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_1;     break;
        }
d2616 2
a2617 19
        for(i=0, j=0; i<=0x07; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_P3d4,i,(LCDACRT1Ptr+ResIndex)->CR[j]);
        }
        for(i=0x10, j=8; i<=0x12; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_P3d4,i,(LCDACRT1Ptr+ResIndex)->CR[j]);
        }
        for(i=0x15, j=11; i<=0x16; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_P3d4,i,(LCDACRT1Ptr+ResIndex)->CR[j]);
        }
        for(i=0x0A, j=13; i<=0x0C; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_P3c4,i,(LCDACRT1Ptr+ResIndex)->CR[j]);
        }

        temp = (LCDACRT1Ptr+ResIndex)->CR[16] & 0xE0;
        SiS_SetReg(SiS_Pr->SiS_P3c4,0x0E,temp);

        temp = ((LCDACRT1Ptr+ResIndex)->CR[16] & 0x01) << 5;
        if(modeflag & DoubleScanMode) temp |= 0x80;
        SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0x5F,temp);
d2619 7
d2627 15
d2643 1
a2643 1
     } else {
d2645 12
a2656 1
        index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;
d2658 10
a2667 12
        for(i=0,j=0;i<=7;i++,j++) {
          SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
        }
        for(j=0x10;i<=10;i++,j++) {
          SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
        }
        for(j=0x15;i<=12;i++,j++) {
          SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
        }
        for(j=0x0A;i<=15;i++,j++) {
          SiS_SetReg(SiS_Pr->SiS_P3c4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
        }
d2669 6
a2674 2
        temp = SiS_Pr->SiS_CRT1Table[index].CR[16] & 0xE0;
        SiS_SetReg(SiS_Pr->SiS_P3c4,0x0E,temp);
d2676 4
a2679 3
        temp = ((SiS_Pr->SiS_CRT1Table[index].CR[16]) & 0x01) << 5;
        if(modeflag & DoubleScanMode)  temp |= 0x80;
        SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0x5F,temp);
d2681 4
a2684 2
     }
  }
d2686 1
a2686 1
  if(SiS_Pr->SiS_ModeType > ModeVGA) SiS_SetReg(SiS_Pr->SiS_P3d4,0x14,0x4F);
d2689 6
a2694 5
/*********************************************/
/*               OFFSET & PITCH              */
/*********************************************/
/*  (partly overruled by SetPitch() in XF86) */
/*********************************************/
d2696 2
a2697 4
static void
SiS_SetCRT1Offset(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                  USHORT RefreshRateTableIndex,
		  PSIS_HW_INFO HwInfo)
d2699 6
a2704 1
   USHORT temp, DisplayUnit, infoflag;
d2706 1
a2706 5
   if(SiS_Pr->UseCustomMode) {
      infoflag = SiS_Pr->CInfoFlag;
   } else {
      infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
   }
d2708 6
a2713 2
   DisplayUnit = SiS_GetOffset(SiS_Pr,ModeNo,ModeIdIndex,
                     	       RefreshRateTableIndex,HwInfo);
d2715 13
a2727 2
   temp = (DisplayUnit >> 8) & 0x0f;
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0xF0,temp);
d2729 5
a2733 2
   temp = DisplayUnit & 0xFF;
   SiS_SetReg(SiS_Pr->SiS_P3d4,0x13,temp);
d2735 7
a2741 1
   if(infoflag & InterlaceMode) DisplayUnit >>= 1;
d2743 7
a2749 6
   DisplayUnit <<= 5;
   temp = (DisplayUnit & 0xff00) >> 8;
   if (DisplayUnit & 0xff) temp++;
   temp++;
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x10,temp);
}
d2751 2
a2752 3
/*********************************************/
/*                  VCLK                     */
/*********************************************/
d2754 4
a2757 5
static void
SiS_SetCRT1VCLK(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                PSIS_HW_INFO HwInfo, USHORT RefreshRateTableIndex)
{
  USHORT  index=0, clka, clkb;
d2759 3
a2761 11
  if(SiS_Pr->UseCustomMode) {
     clka = SiS_Pr->CSR2B;
     clkb = SiS_Pr->CSR2C;
  } else {
     index = SiS_GetVCLK2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
     if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
        clka = SiS_Pr->SiS_VBVCLKData[index].Part4_A;
	clkb = SiS_Pr->SiS_VBVCLKData[index].Part4_B;
     } else {
        clka = SiS_Pr->SiS_VCLKData[index].SR2B;
	clkb = SiS_Pr->SiS_VCLKData[index].SR2C;
d2765 2
a2766 4
  if(HwInfo->jChipType >= SIS_315H) {
     SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x31,0xCF);
  } else {
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x00);
d2769 1
a2769 2
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x2B,clka);
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x2C,clkb);
d2771 2
a2772 4
  if(HwInfo->jChipType >= SIS_315H) {
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x2D,0x01);
  } else {
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x2D,0x80);
a2773 1
}
d2775 6
a2780 3
/*********************************************/
/*                  FIFO                     */
/*********************************************/
d2783 14
a2796 6
static USHORT
SiS_DoCalcDelay(SiS_Private *SiS_Pr, USHORT MCLK, USHORT VCLK, USHORT colordepth, USHORT key)
{
  const UCHAR ThLowA[]   = { 61, 3,52, 5,68, 7,100,11,
                             43, 3,42, 5,54, 7, 78,11,
                             34, 3,37, 5,47, 7, 67,11 };
d2798 1
a2798 3
  const UCHAR ThLowB[]   = { 81, 4,72, 6,88, 8,120,12,
                             55, 4,54, 6,66, 8, 90,12,
                             42, 4,45, 6,55, 8, 75,12 };
d2800 1
a2800 1
  const UCHAR ThTiming[] = {  1, 2, 2, 3, 0, 1,  1, 2 };
d2802 5
a2806 2
  USHORT tempah, tempal, tempcl, tempbx, temp;
  ULONG  longtemp;
d2808 3
a2810 23
  tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x18);
  tempah &= 0x62;
  tempah >>= 1;
  tempal = tempah;
  tempah >>= 3;
  tempal |= tempah;
  tempal &= 0x07;
  tempcl = ThTiming[tempal];
  tempbx = SiS_GetReg(SiS_Pr->SiS_P3c4,0x16);
  tempbx >>= 6;
  tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
  tempah >>= 4;
  tempah &= 0x0c;
  tempbx |= tempah;
  tempbx <<= 1;
  if(key == 0) {
     tempal = ThLowA[tempbx + 1];
     tempal *= tempcl;
     tempal += ThLowA[tempbx];
  } else {
     tempal = ThLowB[tempbx + 1];
     tempal *= tempcl;
     tempal += ThLowB[tempbx];
a2811 5
  longtemp = tempal * VCLK * colordepth;
  temp = longtemp % (MCLK * 16);
  longtemp /= (MCLK * 16);
  if(temp) longtemp++;
  return((USHORT)longtemp);
d2814 3
a2816 2
static USHORT
SiS_CalcDelay(SiS_Private *SiS_Pr, USHORT VCLK, USHORT colordepth, USHORT MCLK)
d2818 1
a2818 1
  USHORT tempax, tempbx;
d2820 10
a2829 6
  tempbx = SiS_DoCalcDelay(SiS_Pr, MCLK, VCLK, colordepth, 0);
  tempax = SiS_DoCalcDelay(SiS_Pr, MCLK, VCLK, colordepth, 1);
  if(tempax < 4) tempax = 4;
  tempax -= 4;
  if(tempbx < tempax) tempbx = tempax;
  return(tempbx);
d2832 2
a2833 3
static void
SiS_SetCRT1FIFO_300(SiS_Private *SiS_Pr, USHORT ModeNo, PSIS_HW_INFO HwInfo,
                    USHORT RefreshRateTableIndex)
d2835 8
a2842 3
  USHORT  ThresholdLow = 0;
  USHORT  index, VCLK, MCLK, colorth=0;
  USHORT  tempah, temp;
d2844 5
a2848 1
  if(ModeNo > 0x13) {
d2850 1
a2850 7
     if(SiS_Pr->UseCustomMode) {
        VCLK = SiS_Pr->CSRClock;
     } else {
        index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
        index &= 0x3F;
        VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;             /* Get VCLK  */
     }
d2852 5
a2856 8
     switch (SiS_Pr->SiS_ModeType - ModeEGA) {     /* Get half colordepth */
        case 0 : colorth = 1; break;
        case 1 : colorth = 1; break;
        case 2 : colorth = 2; break;
        case 3 : colorth = 2; break;
        case 4 : colorth = 3; break;
        case 5 : colorth = 4; break;
     }
d2858 5
a2862 3
     index = SiS_GetReg(SiS_Pr->SiS_P3c4,0x3A);
     index &= 0x07;
     MCLK = SiS_Pr->SiS_MCLKData_0[index].CLOCK;           /* Get MCLK  */
d2864 6
a2869 3
     tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
     tempah &= 0xc3;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x16,0x3c,tempah);
d2871 1
a2871 13
     do {
        ThresholdLow = SiS_CalcDelay(SiS_Pr, VCLK, colorth, MCLK);
        ThresholdLow++;
        if(ThresholdLow < 0x13) break;
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x16,0xfc);
        ThresholdLow = 0x13;
        tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x16);
        tempah >>= 6;
        if(!(tempah)) break;
        tempah--;
        tempah <<= 6;
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x16,0x3f,tempah);
     } while(0);
d2873 1
a2873 1
  } else ThresholdLow = 2;
d2875 1
a2875 3
  /* Write CRT/CPU threshold low, CRT/Engine threshold high */
  temp = (ThresholdLow << 4) | 0x0f;
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,temp);
d2877 2
a2878 3
  temp = (ThresholdLow & 0x10) << 1;
  if(ModeNo > 0x13) temp |= 0x40;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0f,0x9f,temp);
d2880 1
a2880 2
  /* What is this? */
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x3B,0x09);
d2882 26
a2907 4
  /* Write CRT/CPU threshold high */
  temp = ThresholdLow + 3;
  if(temp > 0x0f) temp = 0x0f;
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x09,temp);
d2910 3
a2912 2
static USHORT
SiS_CalcDelay2(SiS_Private *SiS_Pr, UCHAR key, PSIS_HW_INFO HwInfo)
d2914 571
a3484 29
  USHORT data,index;
  const UCHAR  LatencyFactor[] = {
   	97, 88, 86, 79, 77, 00,       /*; 64  bit    BQ=2   */
        00, 87, 85, 78, 76, 54,       /*; 64  bit    BQ=1   */
        97, 88, 86, 79, 77, 00,       /*; 128 bit    BQ=2   */
        00, 79, 77, 70, 68, 48,       /*; 128 bit    BQ=1   */
        80, 72, 69, 63, 61, 00,       /*; 64  bit    BQ=2   */
        00, 70, 68, 61, 59, 37,       /*; 64  bit    BQ=1   */
        86, 77, 75, 68, 66, 00,       /*; 128 bit    BQ=2   */
        00, 68, 66, 59, 57, 37        /*; 128 bit    BQ=1   */
  };
  const UCHAR  LatencyFactor730[] = {
         69, 63, 61,
	 86, 79, 77,
	103, 96, 94,
	120,113,111,
	137,130,128,    /* --- Table ends with this entry, data below */
	137,130,128,	/* to avoid using illegal values              */
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
  };
a3485 3
  if(HwInfo->jChipType == SIS_730) {
     index = ((key & 0x0f) * 3) + ((key & 0xC0) >> 6);
     data = LatencyFactor730[index];
d3487 37
a3523 6
     index = (key & 0xE0) >> 5;
     if(key & 0x10) index +=6;
     if(!(key & 0x01)) index += 24;
     data = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
     if(data & 0x0080) index += 12;
     data = LatencyFactor[index];
a3524 1
  return(data);
d3526 1
d3528 4
a3531 4
static void
SiS_SetCRT1FIFO_630(SiS_Private *SiS_Pr, USHORT ModeNo,
 		    PSIS_HW_INFO HwInfo,
                    USHORT RefreshRateTableIndex)
d3533 130
a3662 18
  USHORT  i,index,data,VCLK,MCLK,colorth=0;
  ULONG   B,eax,bl,data2;
  USHORT  ThresholdLow=0;
  UCHAR   FQBQData[]= {
  	0x01,0x21,0x41,0x61,0x81,
        0x31,0x51,0x71,0x91,0xb1,
        0x00,0x20,0x40,0x60,0x80,
        0x30,0x50,0x70,0x90,0xb0,
	0xFF
  };
  UCHAR   FQBQData730[]= {
        0x34,0x74,0xb4,
	0x23,0x63,0xa3,
	0x12,0x52,0x92,
	0x01,0x41,0x81,
	0x00,0x40,0x80,
	0xff
  };
d3664 2
a3665 9
  i=0;
  if(ModeNo > 0x13) {
    if(SiS_Pr->UseCustomMode) {
       VCLK = SiS_Pr->CSRClock;
    } else {
       index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
       index &= 0x3F;
       VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;          /* Get VCLK  */
    }       
d3667 1
a3667 3
    index = SiS_GetReg(SiS_Pr->SiS_P3c4,0x1A);
    index &= 0x07;
    MCLK = SiS_Pr->SiS_MCLKData_0[index].CLOCK;           /* Get MCLK  */
d3669 2
a3670 9
    data2 = SiS_Pr->SiS_ModeType - ModeEGA;	  /* Get half colordepth */
    switch (data2) {
        case 0 : colorth = 1; break;
        case 1 : colorth = 1; break;
        case 2 : colorth = 2; break;
        case 3 : colorth = 2; break;
        case 4 : colorth = 3; break;
        case 5 : colorth = 4; break;
    }
d3672 21
a3692 1
    if(HwInfo->jChipType == SIS_730) {
d3694 8
a3701 3
       do {
          B = SiS_CalcDelay2(SiS_Pr, FQBQData730[i], HwInfo) * VCLK * colorth;
	  bl = B / (MCLK * 16);
d3703 1
a3703 5
          if(B == bl * 16 * MCLK) {
             bl = bl + 1;
          } else {
             bl = bl + 2;
          }
d3705 4
a3708 12
          if(bl > 0x13) {
             if(FQBQData730[i+1] == 0xFF) {
                ThresholdLow = 0x13;
                break;
             }
             i++;
          } else {
             ThresholdLow = bl;
             break;
          }
       } while(FQBQData730[i] != 0xFF);
       
d3710 5
a3714 4
    
       do {
          B = SiS_CalcDelay2(SiS_Pr, FQBQData[i], HwInfo) * VCLK * colorth;
          bl = B / (MCLK * 16);
d3716 8
a3723 5
          if(B == bl * 16 * MCLK) {
             bl = bl + 1;
          } else {
             bl = bl + 2;
          }
d3725 1
a3725 13
          if(bl > 0x13) {
             if(FQBQData[i+1] == 0xFF) {
                ThresholdLow = 0x13;
                break;
             }
             i++;
          } else {
             ThresholdLow = bl;
             break;
          }
       } while(FQBQData[i] != 0xFF);
    }
  }
d3727 7
a3733 5
    if(HwInfo->jChipType == SIS_730) {
    } else {
      i = 9;
    }
    ThresholdLow = 0x02;
d3736 9
a3744 6
  /* Write foreground and background queue */
  if(HwInfo->jChipType == SIS_730) {
   
     data2 = FQBQData730[i];
     data2 = (data2 & 0xC0) >> 5;
     data2 <<= 8;
d3746 1
a3746 16
#ifndef LINUX_XF86
     SiS_SetRegLong(0xcf8,0x80000050);
     eax = SiS_GetRegLong(0xcfc);
     eax &= 0xfffff9ff;
     eax |= data2;
     SiS_SetRegLong(0xcfc,eax);
#else
     /* We use pci functions X offers. We use pcitag 0, because
      * we want to read/write to the host bridge (which is always
      * 00:00.0 on 630, 730 and 540), not the VGA device.
      */
     eax = pciReadLong(0x00000000, 0x50);
     eax &= 0xfffff9ff;
     eax |= data2;
     pciWriteLong(0x00000000, 0x50, eax);
#endif
d3748 3
a3750 4
     /* Write GUI grant timer (PCI config 0xA3) */
     data2 = FQBQData730[i] << 8;
     data2 = (data2 & 0x0f00) | ((data2 & 0x3000) >> 8);
     data2 <<= 20;
d3752 8
a3759 11
#ifndef LINUX_XF86
     SiS_SetRegLong(0xcf8,0x800000A0);
     eax = SiS_GetRegLong(0xcfc);
     eax &= 0x00ffffff;
     eax |= data2;
     SiS_SetRegLong(0xcfc,eax);
#else
     eax = pciReadLong(0x00000000, 0xA0);
     eax &= 0x00ffffff;
     eax |= data2;
     pciWriteLong(0x00000000, 0xA0, eax);
d3761 1
d3763 11
d3775 7
d3783 14
a3796 15
     data2 = FQBQData[i];
     data2 = (data2 & 0xf0) >> 4;
     data2 <<= 24;

#ifndef LINUX_XF86
     SiS_SetRegLong(0xcf8,0x80000050);
     eax = SiS_GetRegLong(0xcfc);
     eax &= 0xf0ffffff;
     eax |= data2;
     SiS_SetRegLong(0xcfc,eax);
#else
     eax = pciReadLong(0x00000000, 0x50);
     eax &= 0xf0ffffff;
     eax |= data2;
     pciWriteLong(0x00000000, 0x50, eax);
d3799 9
a3807 4
     /* Write GUI grant timer (PCI config 0xA3) */
     data2 = FQBQData[i];
     data2 &= 0x0f;
     data2 <<= 24;
d3809 2
a3810 11
#ifndef LINUX_XF86
     SiS_SetRegLong(0xcf8,0x800000A0);
     eax = SiS_GetRegLong(0xcfc);
     eax &= 0xf0ffffff;
     eax |= data2;
     SiS_SetRegLong(0xcfc,eax);
#else
     eax = pciReadLong(0x00000000, 0xA0);
     eax &= 0xf0ffffff;
     eax |= data2;
     pciWriteLong(0x00000000, 0xA0, eax);
d3813 26
a3838 1
  }
d3840 1
a3840 3
  /* Write CRT/CPU threshold low, CRT/Engine threshold high */
  data = ((ThresholdLow & 0x0f) << 4) | 0x0f;
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,data);
d3842 11
a3852 2
  data = (ThresholdLow & 0x10) << 1;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xDF,data);
d3854 35
a3888 2
  /* What is this? */
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x3B,0x09);
d3890 26
a3915 4
  /* Write CRT/CPU threshold high (gap = 3) */
  data = ThresholdLow + 3;
  if(data > 0x0f) data = 0x0f;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x09,0x80,data);
a3916 1
#endif
d3918 3
a3920 4
#ifdef SIS315H
static void
SiS_SetCRT1FIFO_310(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                    PSIS_HW_INFO HwInfo)
d3922 2
a3923 1
  USHORT modeflag;
d3925 15
a3939 6
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x3D,0xFE);  /* disable auto-threshold */

  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d3941 4
a3944 26

  if(HwInfo->jChipType >= SIS_661) {
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0xAE);
     SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
     if(ModeNo > 0x13) {
        if(!(modeflag & HalfDCLK)) {
	   SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0x34);
	   if(ModeNo != 0x38) {
	      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x3D,0x01);
	   }
	}
     }
  } else {
     if(ModeNo > 0x13) {
        if( (!(modeflag & DoubleScanMode)) || (!(modeflag & HalfDCLK))) {
           SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0x34);
           SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
           SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x3D,0x01);
        } else {
           SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0xAE);
           SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
        }
     } else {
        SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0xAE);
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
     }
d3946 3
d3950 7
d3959 15
a3973 3
/*********************************************/
/*              MODE REGISTERS               */
/*********************************************/
d3975 1
a3975 7
static void
SiS_SetVCLKState(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                 USHORT ModeNo, USHORT RefreshRateTableIndex,
                 USHORT ModeIdIndex)
{
  USHORT data, data2=0;
  USHORT VCLK, index=0;
d3977 7
a3983 10
  if(ModeNo <= 0x13) VCLK = 0;
  else {
     if(SiS_Pr->UseCustomMode) {
        VCLK = SiS_Pr->CSRClock;
     } else {
        index = SiS_GetVCLK2Ptr(SiS_Pr,ModeNo,ModeIdIndex,
	               RefreshRateTableIndex,HwInfo);
        VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;
     }
  }
d3985 3
a3987 1
  if(HwInfo->jChipType < SIS_315H) {		/* 300 series */
d3989 6
a3994 3
     data2 = 0x00;
     if(VCLK > 150) data2 |= 0x80;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0x7B,data2);
d3996 5
a4000 3
     data2 = 0x00;
     if(VCLK >= 150) data2 |= 0x08;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x32,0xF7,data2);
d4002 3
a4004 5
  } else { 					/* 315 series */

     data = 0;
     if(VCLK >= 166) data |= 0x0c;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x32,0xf3,data);
a4005 3
     if(VCLK >= 166) {
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1f,0xe7);
     }
d4007 1
d4009 2
a4010 4
  data2 = 0x03;
  if((VCLK >= 135) && (VCLK < 160))      data2 = 0x02;
  else if((VCLK >= 160) && (VCLK < 260)) data2 = 0x01;
  else if(VCLK >= 260)                   data2 = 0x00;
d4012 8
a4019 3
  if(HwInfo->jChipType == SIS_540) {
     if((VCLK == 203) || (VCLK < 234)) data2 = 0x02;
  }
d4021 9
a4029 2
  if(HwInfo->jChipType < SIS_315H) {
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xFC,data2);  	/* DAC speed */
d4031 7
a4037 5
     if(HwInfo->jChipType > SIS_315PRO) {
        /* This "if" is done in 330 and 650/LVDS/301LV BIOSes; Not in 315 BIOS */
        if(ModeNo > 0x13) data2 &= 0xfc;
     }
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xF8,data2);  	/* DAC speed */
d4040 1
d4042 2
a4043 3
static void
SiS_SetCRT1ModeRegs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                    USHORT ModeNo,USHORT ModeIdIndex,USHORT RefreshRateTableIndex)
d4045 2
a4046 10
  USHORT data,data2;
  USHORT infoflag=0,modeflag;
  USHORT resindex,xres;
#ifdef SIS315H
  USHORT data3;
  ULONG  longdata;
#if 0
  resinfo = 0;
#endif
#endif
d4048 5
a4052 16
  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     infoflag = SiS_Pr->CInfoFlag;
  } else {
     if(ModeNo > 0x13) {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
#ifdef SIS315H
#if 0
	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
#endif
#endif
     } else {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     }
  }
a4053 2
  /* Disable DPMS */
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1F,0x3F);
d4055 8
a4062 2
  if(ModeNo > 0x13) data = infoflag;
  else data = 0;
d4064 10
a4073 7
  data2 = 0;
  if(ModeNo > 0x13) {
     if(SiS_Pr->SiS_ModeType > 0x02) {
        data2 |= 0x02;
        data2 |= ((SiS_Pr->SiS_ModeType - ModeVGA) << 2);
     }
  }
d4075 5
a4079 4
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "Debug: Mode infoflag = %x, Chiptype %d\n",
  	data, HwInfo->jChipType);
#endif
d4081 5
a4085 2
  if(data & InterlaceMode) data2 |= 0x20;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x06,0xC0,data2);
d4087 5
a4091 10
  if(SiS_Pr->UseCustomMode) {
     xres = SiS_Pr->CHDisplay;
  } else {
     resindex = SiS_GetResInfo(SiS_Pr,ModeNo,ModeIdIndex);
     if(ModeNo <= 0x13) {
      	xres = SiS_Pr->SiS_StResInfo[resindex].HTotal;
     } else {
      	xres = SiS_Pr->SiS_ModeResInfo[resindex].HTotal;
     }
  }
d4093 3
a4095 10
  if(HwInfo->jChipType != SIS_300) {
     data = 0x0000;
     if(infoflag & InterlaceMode) {
        if(xres <= 800) data = 0x0020;
        else if(xres <= 1024) data = 0x0035;
        else data = 0x0048;
     }
     SiS_SetReg(SiS_Pr->SiS_P3d4,0x19,(data & 0x00FF));
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x1a,0xFC,(data >> 8));
  }
d4097 2
a4098 3
  if(modeflag & HalfDCLK) {
     SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x01,0x08);
  }
d4100 2
a4101 18
  if(HwInfo->jChipType == SIS_300) {
     if(modeflag & LineCompareOff) {
        SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x0F,0x08);
     } else {
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x0F,0xF7);
     }
  } else {
     if(modeflag & LineCompareOff) {
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xB7,0x08);
     } else {
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x0F,0xB7);
     }
     if(SiS_Pr->SiS_ModeType == ModeEGA) {
        if(ModeNo > 0x13) {
  	   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x0F,0x40);
        }
     }
  }
d4103 4
a4106 37
#ifdef SIS315H
  /* 315 BIOS sets SR17 at this point */
  if(HwInfo->jChipType == SIS_315PRO) {
     data = SiS_Get310DRAMType(SiS_Pr, HwInfo);
     data = SiS_Pr->SiS_SR15[2][data];
     if(SiS_Pr->SiS_ModeType == ModeText) {
        data &= 0xc7;
     } else {
        data2 = SiS_GetOffset(SiS_Pr,ModeNo,ModeIdIndex,
                              RefreshRateTableIndex,HwInfo);
	data2 >>= 1;
	if(infoflag & InterlaceMode) data2 >>= 1;
	data3 = SiS_GetColorDepth(SiS_Pr,ModeNo,ModeIdIndex) >> 1;
	if(!data3) data3++;
	data2 /= data3;
	if(data2 >= 0x50) {
	   data &= 0x0f;
	   data |= 0x50;
	}
     }
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x17,data);
  }

  /* 330 BIOS sets SR17 at this point */
  if(HwInfo->jChipType == SIS_330) {
     data = SiS_Get310DRAMType(SiS_Pr, HwInfo);
     data = SiS_Pr->SiS_SR15[2][data];
     if(SiS_Pr->SiS_ModeType <= ModeEGA) {
        data &= 0xc7;
     } else {
        if(SiS_Pr->UseCustomMode) {
	   data2 = SiS_Pr->CSRClock;
	} else {
           data2 = SiS_GetVCLK2Ptr(SiS_Pr,ModeNo,ModeIdIndex,
                                   RefreshRateTableIndex,HwInfo);
           data2 = SiS_Pr->SiS_VCLKData[data2].CLOCK;
	}
d4108 1
a4108 2
	data3 = SiS_GetColorDepth(SiS_Pr,ModeNo,ModeIdIndex) >> 1;
	if(!data3) data3++;
d4110 2
a4111 1
	data2 *= data3;
d4113 4
a4116 1
	longdata = SiS_GetMCLK(SiS_Pr, HwInfo) * 1024;
d4118 1
a4118 1
	data2 = longdata / data2;
d4120 2
a4121 19
	if(SiS_Pr->SiS_ModeType != Mode16Bpp) {
           if(data2 >= 0x19c)      data = 0xba;
	   else if(data2 >= 0x140) data = 0x7a;
	   else if(data2 >= 0x101) data = 0x3a;
	   else if(data2 >= 0xf5)  data = 0x32;
	   else if(data2 >= 0xe2)  data = 0x2a;
	   else if(data2 >= 0xc4)  data = 0x22;
	   else if(data2 >= 0xac)  data = 0x1a;
	   else if(data2 >= 0x9e)  data = 0x12;
	   else if(data2 >= 0x8e)  data = 0x0a;
	   else                    data = 0x02;
	 } else {
	   if(data2 >= 0x127)      data = 0xba;
	   else                    data = 0x7a;
	 }
      }
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x17,data);
  }
#endif
d4123 4
a4126 8
  data = 0x60;
  if(SiS_Pr->SiS_ModeType != ModeText) {
     data ^= 0x60;
     if(SiS_Pr->SiS_ModeType != ModeEGA) {
        data ^= 0xA0;
     }
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x21,0x1F,data);
d4128 1
a4128 1
  SiS_SetVCLKState(SiS_Pr, HwInfo, ModeNo, RefreshRateTableIndex, ModeIdIndex);
d4130 1
a4130 43
#ifdef SIS315H
  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) & 0x40) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,0x52,0x2c);
     } else {
        SiS_SetReg(SiS_Pr->SiS_P3d4,0x52,0x6c);
     }
#if 0   /* What is SR0E[D5:6]? */
        /* These are in the CRT1 table, and we set by CRT1CRTC */
     if(HwInfo->jChipType >= SIS_661) {
        data = 0;
        if((ModeNo == 6) || ((ModeNo >= 0x0e) && (ModeNo <= 0x13))) {
	   data |= 0x20;
	}
	if(SiS_Pr->SiS_ModeType != ModeVGA) {
	   if(ModeNo > 0x13) {
	      if(resinfo >= SIS_RI_640x480) {
	         if(resinfo <= SIS_RI_2048x1536) {
	            data |= 0x40;
		    if(resinfo > SIS_RI_1280x1024) {
		       data |= 0x60;
		       if(resinfo != SIS_RI_1600x1200) {
		          data = SiS_GetReg(SiS_Pr->SiS_P3c4,0x0e);
		          data += 0x60;
		          SiS_SetReg(SiS_Pr->SiS_P3c4,0x0e);
		          data = 0;
		       }
		    }
	         }
	         if(resinfo == SIS_RI_1152x864) {
		    data = 0x40;
	         }
	         if(resinfo == SIS_RI_1400x1050) { /* TW */
		    data = 0x60;
	         }
	      }
	   }
	}
	SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x0e,data);
     }
#endif
  }
#endif
d4133 1
a4133 6
/*********************************************/
/*                 LOAD DAC                  */
/*********************************************/

#if 0
static void
a4142 8
}
#endif

static void
SiS_WriteDAC(SiS_Private *SiS_Pr, SISIOADDRESS DACData, USHORT shiftflag,
             USHORT dl, USHORT ah, USHORT al, USHORT dh)
{
  USHORT temp,bh,bl;
a4143 24
  bh = ah;
  bl = al;
  if(dl != 0) {
     temp = bh;
     bh = dh;
     dh = temp;
     if(dl == 1) {
        temp = bl;
        bl = dh;
        dh = temp;
     } else {
        temp = bl;
        bl = bh;
        bh = temp;
     }
  }
  if(shiftflag) {
     dh <<= 2;
     bh <<= 2;
     bl <<= 2;
  }
  SiS_SetRegByte(DACData,(USHORT)dh);
  SiS_SetRegByte(DACData,(USHORT)bh);
  SiS_SetRegByte(DACData,(USHORT)bl);
d4146 1
d4148 1
a4148 2
SiS_LoadDAC(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
            USHORT ModeNo, USHORT ModeIdIndex)
d4150 2
a4151 90
   USHORT data,data2;
   USHORT time,i,j,k,m,n,o;
   USHORT si,di,bx,dl,al,ah,dh;
   USHORT shiftflag;
   SISIOADDRESS DACAddr, DACData;
   const USHORT *table = NULL;

   if(ModeNo <= 0x13) {
      data = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
   } else {
      if(SiS_Pr->UseCustomMode) {
	 data = SiS_Pr->CModeFlag;
      } else {
         data = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
      }
   }

   data &= DACInfoFlag;
   time = 64;
   if(data == 0x00) table = SiS_MDA_DAC;
   if(data == 0x08) table = SiS_CGA_DAC;
   if(data == 0x10) table = SiS_EGA_DAC;
   if(data == 0x18) {
      time = 256;
      table = SiS_VGA_DAC;
   }
   if(time == 256) j = 16;
   else            j = time;

   if( ( (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) &&        /* 301B-DH LCD */
         (SiS_Pr->SiS_VBType & VB_NoLCD) )        ||
       (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)       ||   /* LCDA */
       (!(SiS_Pr->SiS_SetFlag & ProgrammingCRT2)) ) {  /* Programming CRT1 */
      DACAddr = SiS_Pr->SiS_P3c8;
      DACData = SiS_Pr->SiS_P3c9;
      shiftflag = 0;
      SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xFF);
   } else {
      shiftflag = 1;
      DACAddr = SiS_Pr->SiS_Part5Port;
      DACData = SiS_Pr->SiS_Part5Port + 1;
   }

   SiS_SetRegByte(DACAddr,0x00);

   for(i=0; i<j; i++) {
      data = table[i];
      for(k=0; k<3; k++) {
	data2 = 0;
	if(data & 0x01) data2 = 0x2A;
	if(data & 0x02) data2 += 0x15;
	if(shiftflag) data2 <<= 2;
	SiS_SetRegByte(DACData, data2);
	data >>= 2;
      }
   }

   if(time == 256) {
      for(i = 16; i < 32; i++) {
   	 data = table[i];
	 if(shiftflag) data <<= 2;
	 for(k = 0; k < 3; k++) SiS_SetRegByte(DACData, data);
      }
      si = 32;
      for(m = 0; m < 9; m++) {
         di = si;
         bx = si + 4;
         dl = 0;
         for(n = 0; n < 3; n++) {
  	    for(o = 0; o < 5; o++) {
	       dh = table[si];
	       ah = table[di];
	       al = table[bx];
	       si++;
	       SiS_WriteDAC(SiS_Pr, DACData, shiftflag, dl, ah, al, dh);
	    }
	    si -= 2;
	    for(o = 0; o < 3; o++) {
	       dh = table[bx];
	       ah = table[di];
	       al = table[si];
	       si--;
	       SiS_WriteDAC(SiS_Pr, DACData, shiftflag, dl, ah, al, dh);
	    }
	    dl++;
	 }            /* for n < 3 */
	 si += 5;
      }               /* for m < 9 */
   }
}
d4153 1
a4153 3
/*********************************************/
/*         SET CRT1 REGISTER GROUP           */
/*********************************************/
d4155 3
a4157 5
static void
SiS_SetCRT1Group(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                 USHORT ModeNo, USHORT ModeIdIndex)
{
  USHORT  StandTableIndex,RefreshRateTableIndex;
d4159 3
a4161 7
  SiS_Pr->SiS_CRT1Mode = ModeNo;
  StandTableIndex = SiS_GetModePtr(SiS_Pr, ModeNo, ModeIdIndex);
  if(SiS_Pr->SiS_SetFlag & LowModeTests) {
     if(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SwitchCRT2)) {
        SiS_DisableBridge(SiS_Pr, HwInfo);
     }
  }
d4163 3
a4165 1
  SiS_ResetSegmentRegisters(SiS_Pr, HwInfo);
d4167 1
a4167 7
  SiS_SetSeqRegs(SiS_Pr, StandTableIndex, HwInfo);
  SiS_SetMiscRegs(SiS_Pr, StandTableIndex, HwInfo);
  SiS_SetCRTCRegs(SiS_Pr, HwInfo, StandTableIndex);
  SiS_SetATTRegs(SiS_Pr, StandTableIndex, HwInfo);
  SiS_SetGRCRegs(SiS_Pr, StandTableIndex);
  SiS_ClearExt1Regs(SiS_Pr,HwInfo);
  SiS_ResetCRT1VCLK(SiS_Pr, HwInfo);
d4169 3
a4171 2
  SiS_Pr->SiS_SelectCRT2Rate = 0;
  SiS_Pr->SiS_SetFlag &= (~ProgrammingCRT2);
d4173 5
a4177 3
#ifdef LINUX_XF86
  xf86DrvMsgVerb(0, X_PROBED, 4, "(init: VBType=0x%04x, VBInfo=0x%04x)\n",
                    SiS_Pr->SiS_VBType, SiS_Pr->SiS_VBInfo);
d4180 9
a4188 5
  if(SiS_Pr->SiS_VBInfo & SetSimuScanMode) {
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
     }
  }
d4190 17
a4206 2
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
     SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
d4208 2
d4211 8
a4218 1
  RefreshRateTableIndex = SiS_GetRatePtr(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
d4220 1
a4220 3
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
     SiS_Pr->SiS_SetFlag &= ~ProgrammingCRT2;
  }
d4222 7
a4228 6
  if(RefreshRateTableIndex != 0xFFFF) {
     SiS_SetCRT1Sync(SiS_Pr, RefreshRateTableIndex);
     SiS_SetCRT1CRTC(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
     SiS_SetCRT1Offset(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
     SiS_SetCRT1VCLK(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
  }
d4230 8
a4237 14
#ifdef SIS300
  if(HwInfo->jChipType == SIS_300) {
     SiS_SetCRT1FIFO_300(SiS_Pr, ModeNo,HwInfo,RefreshRateTableIndex);
  } else if((HwInfo->jChipType == SIS_630) ||
            (HwInfo->jChipType == SIS_730) ||
            (HwInfo->jChipType == SIS_540)) {
     SiS_SetCRT1FIFO_630(SiS_Pr, ModeNo, HwInfo, RefreshRateTableIndex);
  }
#endif
#ifdef SIS315H
  if(HwInfo->jChipType >= SIS_315H) {
     SiS_SetCRT1FIFO_310(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
  }
#endif
d4239 3
a4241 1
  SiS_SetCRT1ModeRegs(SiS_Pr, HwInfo, ModeNo, ModeIdIndex, RefreshRateTableIndex);
d4243 3
a4245 1
  SiS_LoadDAC(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
d4247 13
a4259 5
#ifndef LINUX_XF86
  if(SiS_Pr->SiS_flag_clearbuffer) {
     SiS_ClearBuffer(SiS_Pr,HwInfo,ModeNo);
  }
#endif
d4261 1
a4261 5
  if(!(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SwitchCRT2 | SetCRT2ToLCDA))) {
     SiS_WaitRetrace1(SiS_Pr);
     SiS_DisplayOn(SiS_Pr);
  }
}
d4263 3
a4265 3
/*********************************************/
/*            HELPER: ENABLE CRT1            */
/*********************************************/
d4267 3
a4269 13
static void
SiS_HandleCRT1(SiS_Private *SiS_Pr)
{
  SiS_SetRegAND(SiS_Pr->SiS_P3d4,SiS_Pr->SiS_MyCR63,0xbf);
#if 0
  if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x15) & 0x01)) {
     if((SiS_GetReg(SiS_Pr->SiS_P3c4,0x15) & 0x0a) ||
        (SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x01)) {
        SiS_SetRegOR(SiS_Pr->SiS_P3d4,SiS_Pr->SiS_MyCR63,0x40);
     }
  }
#endif
}
d4271 2
a4272 3
/*********************************************/
/*         HELPER: SET VIDEO REGISTERS       */
/*********************************************/
d4274 4
a4277 11
static void
SiS_StrangeStuff(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   if((IS_SIS651) || (IS_SISM650)) {
      SiS_SetReg(SiS_Pr->SiS_VidCapt, 0x3f, 0x00);   /* Fiddle with capture regs */
      SiS_SetReg(SiS_Pr->SiS_VidCapt, 0x00, 0x00);
      SiS_SetReg(SiS_Pr->SiS_VidPlay, 0x00, 0x86);   /* (BIOS does NOT unlock) */
      SiS_SetRegAND(SiS_Pr->SiS_VidPlay, 0x30, 0xfe); /* Fiddle with video regs */
      SiS_SetRegAND(SiS_Pr->SiS_VidPlay, 0x3f, 0xef);
   }
   /* !!! This does not support modes < 0x13 !!! */
d4280 2
a4281 7
/*********************************************/
/*         XFree86: SET SCREEN PITCH         */
/*********************************************/

#ifdef LINUX_XF86
static void
SiS_SetPitchCRT1(SiS_Private *SiS_Pr, ScrnInfoPtr pScrn)
d4283 1
a4283 2
   SISPtr pSiS = SISPTR(pScrn);
   UShort HDisplay = pSiS->scrnPitch >> 3;
d4285 6
a4290 2
   SiS_SetReg(SiS_Pr->SiS_P3d4,0x13,(HDisplay & 0xFF));
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0xF0,(HDisplay>>8));
d4293 2
a4294 2
static void
SiS_SetPitchCRT2(SiS_Private *SiS_Pr, ScrnInfoPtr pScrn)
d4296 9
a4304 2
   SISPtr pSiS = SISPTR(pScrn);
   UShort HDisplay = pSiS->scrnPitch2 >> 3;
d4306 2
a4307 5
    /* Unlock CRT2 */
   if(pSiS->VGAEngine == SIS_315_VGA)
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2F, 0x01);
   else
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x24, 0x01);
d4309 29
a4337 2
   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x07,(HDisplay & 0xFF));
   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0xF0,(HDisplay >> 8));
d4340 3
a4342 2
static void
SiS_SetPitch(SiS_Private *SiS_Pr, ScrnInfoPtr pScrn)
d4344 24
a4367 2
   SISPtr pSiS = SISPTR(pScrn);
   BOOLEAN isslavemode = FALSE;
d4369 5
a4373 7
   if( (pSiS->VBFlags & VB_VIDEOBRIDGE) &&
       ( ((pSiS->VGAEngine == SIS_300_VGA) &&
          (SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0xa0) == 0x20) ||
         ((pSiS->VGAEngine == SIS_315_VGA) &&
	  (SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x50) == 0x10) ) ) {
      isslavemode = TRUE;
   }
d4375 2
a4376 8
   /* We need to set pitch for CRT1 if bridge is in slave mode, too */
   if((pSiS->VBFlags & DISPTYPE_DISP1) || (isslavemode)) {
      SiS_SetPitchCRT1(SiS_Pr, pScrn);
   }
   /* We must not set the pitch for CRT2 if bridge is in slave mode */
   if((pSiS->VBFlags & DISPTYPE_DISP2) && (!isslavemode)) {
      SiS_SetPitchCRT2(SiS_Pr, pScrn);
   }
d4380 37
a4416 3
/*********************************************/
/*                 SiSSetMode()              */
/*********************************************/
d4418 9
a4426 16
#ifdef LINUX_XF86
/* We need pScrn for setting the pitch correctly */
BOOLEAN
SiSSetMode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,ScrnInfoPtr pScrn,USHORT ModeNo, BOOLEAN dosetpitch)
#else
BOOLEAN
SiSSetMode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,USHORT ModeNo)
#endif
{
   ULONG   temp;
   USHORT  ModeIdIndex;
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
   SISIOADDRESS BaseAddr = HwInfo->ulIOAddress;
   unsigned char backupreg=0;
#ifndef LINUX_XF86
   USHORT  KeepLockReg;
d4428 5
a4432 3
   SiS_Pr->UseCustomMode = FALSE;
   SiS_Pr->CRT1UsesCustomMode = FALSE;
#endif
d4434 5
a4438 3
   if(SiS_Pr->UseCustomMode) {
      ModeNo = 0xfe;
   }
d4440 17
a4456 3
   SiSInitPtr(SiS_Pr, HwInfo);
   SiSRegInit(SiS_Pr, BaseAddr);
   SiS_GetSysFlags(SiS_Pr, HwInfo);
d4458 5
a4462 5
#ifdef LINUX_XF86
   if(pScrn) SiS_Pr->SiS_VGAINFO = SiS_GetSetBIOSScratch(pScrn, 0x489, 0xff);
   else
#endif
         SiS_Pr->SiS_VGAINFO = 0x11;
d4464 20
a4483 3
   SiSInitPCIetc(SiS_Pr, HwInfo);
   SiSSetLVDSetc(SiS_Pr, HwInfo);
   SiSDetermineROMUsage(SiS_Pr, HwInfo);
d4485 6
a4490 1
   SiS_Pr->SiS_flag_clearbuffer = 0;
a4491 1
   if(!SiS_Pr->UseCustomMode) {
d4493 14
a4506 1
      if(!(ModeNo & 0x80)) SiS_Pr->SiS_flag_clearbuffer = 1;
d4508 24
a4531 2
      ModeNo &= 0x7f;
   }
d4534 10
a4543 1
   KeepLockReg = SiS_GetReg(SiS_Pr->SiS_P3c4,0x05);
a4544 1
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x86);
d4546 4
a4549 1
   SiS_UnLockCRT2(SiS_Pr, HwInfo);
d4551 14
a4564 5
   if(!SiS_Pr->UseCustomMode) {
      if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return FALSE;
   } else {
      ModeIdIndex = 0;
   }
d4566 3
a4568 1
   SiS_GetVBType(SiS_Pr, HwInfo);
d4570 2
a4571 1
   /* Init/restore some VB registers */
d4573 2
a4574 14
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
	 if(ROMAddr && SiS_Pr->SiS_UseROM) {
	    if(HwInfo->jChipType < SIS_330) {
               temp = ROMAddr[VB310Data_1_2_Offset];
	       temp |= 0x40;
	       SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
            } else if(HwInfo->jChipType >= SIS_661) {
	       temp = ROMAddr[0x7e];
	       if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x7b) >= 100) temp |= 0x40;
	       SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
	    }
	 }
	 SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x32,0x10);
d4576 5
a4580 1
	 SiS_SetRegOR(SiS_Pr->SiS_Part2Port,0x00,0x0c);
d4582 32
a4613 5
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
      } else {
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
      }
   }
d4615 13
a4627 11
   /* Get VB information (connectors, connected devices) */
   SiS_GetVBInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, (SiS_Pr->UseCustomMode) ? 0 : 1);
   SiS_SetYPbPr(SiS_Pr, HwInfo);
   SiS_SetTVMode(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_GetLCDResInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_SetLowModeTest(SiS_Pr, ModeNo, HwInfo);

#ifndef LINUX_XF86
   /* 3. Check memory size (Kernel framebuffer driver only) */
   temp = SiS_CheckMemorySize(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
   if(!temp) return(0);
d4630 2
a4631 10
   if(HwInfo->jChipType >= SIS_315H) {
#if 0
      if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x17) & 0x08)  {
         if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
            if(ModeNo != 0x10)  SiS_Pr->SiS_SetFlag |= SetDOSMode;
         } else if((IS_SIS651) && (SiS_Pr->SiS_VBType & VB_NoLCD)) {
            SiS_Pr->SiS_SetFlag |= SetDOSMode;
         }
      }
#endif
d4633 16
a4648 12
      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
         if(IS_SIS650) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	    if(IS_SIS651) SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x51,0x20);
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
	 } else if(IS_SIS661741660760) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x3a,0xef);
	 }
      }
   }
d4650 1
a4650 7
   if(SiS_Pr->UseCustomMode) {
      SiS_Pr->CRT1UsesCustomMode = TRUE;
      SiS_Pr->CSRClock_CRT1 = SiS_Pr->CSRClock;
      SiS_Pr->CModeFlag_CRT1 = SiS_Pr->CModeFlag;
   } else {
      SiS_Pr->CRT1UsesCustomMode = FALSE;
   }
d4652 13
a4664 13
   /* Set mode on CRT1 */
   if( (SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SetCRT2ToLCDA)) ||
       (!(SiS_Pr->SiS_VBInfo & SwitchCRT2)) ) {
      SiS_SetCRT1Group(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
   }

   /* Set mode on CRT2 */
   if(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SwitchCRT2 | SetCRT2ToLCDA)) {
      if( (SiS_Pr->SiS_VBType & VB_SISVB)    ||
          (SiS_Pr->SiS_IF_DEF_LVDS     == 1) ||
          (SiS_Pr->SiS_IF_DEF_CH70xx   != 0) ||
          (SiS_Pr->SiS_IF_DEF_TRUMPION != 0) ) {
         SiS_SetCRT2Group(SiS_Pr, HwInfo, ModeNo);
d4666 7
a4672 1
   }
d4674 1
a4674 1
   SiS_HandleCRT1(SiS_Pr);
d4676 25
a4700 1
   SiS_StrangeStuff(SiS_Pr, HwInfo);
d4702 3
a4704 10
   SiS_DisplayOn(SiS_Pr);
   SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xFF);

   if(HwInfo->jChipType >= SIS_315H) {
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
         if(!(SiS_IsDualEdge(SiS_Pr, HwInfo))) {
	    SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	 }
      }
   }
a4705 9
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
         if(HwInfo->jChipType < SIS_661) {
	    if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x35,0x01);
	    } else {
	       SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x35,0xFE);
	    }
	 }
d4707 1
a4707 1
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,backupreg);
d4709 15
a4723 6
	 if((IS_SIS650) && (SiS_GetReg(SiS_Pr->SiS_P3d4,0x30) & 0xfc)) {
	    if((ModeNo == 0x03) || (ModeNo == 0x10)) {
	       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x51,0x80);
	       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x56,0x08);
            }
	 }
d4725 17
a4741 25
	 if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x30) & SetCRT2ToLCD) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0xfc);
	 }
      } else if((HwInfo->jChipType == SIS_630) ||
                (HwInfo->jChipType == SIS_730)) {
         SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,backupreg);
      }
   }

#ifdef LINUX_XF86
   if(pScrn) {
      /* SetPitch: Adapt to virtual size & position */
      if((ModeNo > 0x13) && (dosetpitch)) {
         SiS_SetPitch(SiS_Pr, pScrn);
      }

      /* Backup/Set ModeNo in BIOS scratch area */
      SiS_GetSetModeID(pScrn, ModeNo);
   }
#endif

#ifndef LINUX_XF86  /* We never lock registers in XF86 */
   if(KeepLockReg == 0xA1) SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x86);
   else SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x00);
#endif
d4743 1
a4743 1
   return TRUE;
d4746 2
a4747 9
/*********************************************/
/*          XFree86: SiSBIOSSetMode()        */
/*           for non-Dual-Head mode          */
/*********************************************/

#ifdef LINUX_XF86
BOOLEAN
SiSBIOSSetMode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, ScrnInfoPtr pScrn,
               DisplayModePtr mode, BOOLEAN IsCustom)
d4749 1
a4749 12
   SISPtr  pSiS = SISPTR(pScrn);
   UShort  ModeNo=0;
   
   SiS_Pr->UseCustomMode = FALSE;

   if((IsCustom) && (SiS_CheckBuildCustomMode(pScrn, mode, pSiS->VBFlags))) {

         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3, "Setting custom mode %dx%d\n",
	 	SiS_Pr->CHDisplay,
		(mode->Flags & V_INTERLACE ? SiS_Pr->CVDisplay * 2 :
		   (mode->Flags & V_DBLSCAN ? SiS_Pr->CVDisplay / 2 :
		      SiS_Pr->CVDisplay)));
d4751 15
a4765 10
	 return(SiSSetMode(SiS_Pr, HwInfo, pScrn, ModeNo, TRUE));

   }

   ModeNo = SiS_CalcModeIndex(pScrn, mode, pSiS->VBFlags, pSiS->HaveCustomModes);
   if(!ModeNo) return FALSE;

   xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3, "Setting standard mode 0x%x\n", ModeNo);

   return(SiSSetMode(SiS_Pr, HwInfo, pScrn, ModeNo, TRUE));
d4768 2
a4769 7
/*********************************************/
/*       XFree86: SiSBIOSSetModeCRT2()       */
/*           for Dual-Head modes             */
/*********************************************/
BOOLEAN
SiSBIOSSetModeCRT2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, ScrnInfoPtr pScrn,
               DisplayModePtr mode, BOOLEAN IsCustom)
d4771 54
a4824 10
   ULONG   temp;
   USHORT  ModeIdIndex;
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
   SISIOADDRESS BaseAddr = HwInfo->ulIOAddress;
   UShort  ModeNo   = 0;
   unsigned char backupreg=0;
   SISPtr  pSiS     = SISPTR(pScrn);
#ifdef SISDUALHEAD
   SISEntPtr pSiSEnt = pSiS->entityPrivate;
#endif
d4826 6
a4831 18
   SiS_Pr->UseCustomMode = FALSE;

   /* Remember: Custom modes for CRT2 are ONLY supported
    * 		-) on 315/330 series,
    *           -) on the 30x/B/C, and
    *           -) if CRT2 is LCD or VGA
    */

   if((IsCustom) && (SiS_CheckBuildCustomMode(pScrn, mode, pSiS->VBFlags))) {

	 ModeNo = 0xfe;

   } else {

         BOOLEAN havecustommodes = pSiS->HaveCustomModes;

#ifdef SISMERGED
	 if(pSiS->MergedFB) havecustommodes = pSiS->HaveCustomModes2;
d4833 7
a4839 34

         ModeNo = SiS_CalcModeIndex(pScrn, mode, pSiS->VBFlags, havecustommodes);
         if(!ModeNo) return FALSE;

   }

   SiSRegInit(SiS_Pr, BaseAddr);
   SiSInitPtr(SiS_Pr, HwInfo);
   SiS_GetSysFlags(SiS_Pr, HwInfo);
   SiS_Pr->SiS_VGAINFO = SiS_GetSetBIOSScratch(pScrn, 0x489, 0xff);
   SiSInitPCIetc(SiS_Pr, HwInfo);
   SiSSetLVDSetc(SiS_Pr, HwInfo);
   SiSDetermineROMUsage(SiS_Pr, HwInfo);

   /* Save mode info so we can set it from within SetMode for CRT1 */
#ifdef SISDUALHEAD
   if(pSiS->DualHeadMode) {
      pSiSEnt->CRT2ModeNo = ModeNo;
      pSiSEnt->CRT2DMode = mode;
      pSiSEnt->CRT2IsCustom = IsCustom;
      pSiSEnt->CRT2CR30 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
      pSiSEnt->CRT2CR31 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x31);
      pSiSEnt->CRT2CR35 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
      pSiSEnt->CRT2CR38 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
#if 0
      /* We can't set CRT2 mode before CRT1 mode is set */
      if(pSiSEnt->CRT1ModeNo == -1) {
    	 xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
		"Setting CRT2 mode delayed until after setting CRT1 mode\n");
   	 return TRUE;
      }
#endif      
      pSiSEnt->CRT2ModeSet = TRUE;
   }
d4841 23
a4863 42

   /* We don't clear the buffer under X */
   SiS_Pr->SiS_flag_clearbuffer=0;

   if(SiS_Pr->UseCustomMode) {

      USHORT temptemp = SiS_Pr->CVDisplay;

      if(SiS_Pr->CModeFlag & DoubleScanMode)     temptemp >>= 1;
      else if(SiS_Pr->CInfoFlag & InterlaceMode) temptemp <<= 1;

      xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
	  "Setting custom mode %dx%d on CRT2\n",
	  SiS_Pr->CHDisplay, temptemp);

   } else {

      xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
   	  "Setting standard mode 0x%x on CRT2\n", ModeNo);

   }

   SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x86);

   SiS_UnLockCRT2(SiS_Pr, HwInfo);

   if(!SiS_Pr->UseCustomMode) {
      if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return FALSE;
   } else {
      ModeIdIndex = 0;
   }

   SiS_GetVBType(SiS_Pr, HwInfo);

   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
         SiS_UnLockCRT2(SiS_Pr,HwInfo);
         if(ROMAddr && SiS_Pr->SiS_UseROM) {
	    if(HwInfo->jChipType < SIS_330) {
               temp = ROMAddr[VB310Data_1_2_Offset];
	       temp |= 0x40;
               SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
d4865 3
a4867 7
	    if(HwInfo->jChipType > SIS_330) {
	       temp = ROMAddr[0x7e];
	       if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x7b) >= 100) temp |= 0x40;
	       SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
	    }
	 }
	 SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x32,0x10);
d4869 2
a4870 5
	 SiS_SetRegOR(SiS_Pr->SiS_Part2Port,0x00,0x0c);

         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
      } else {
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
a4871 21
   }

   /* Get VB information (connectors, connected devices) */
   if(!SiS_Pr->UseCustomMode) {
      SiS_GetVBInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, 1);
   } else {
      /* If this is a custom mode, we don't check the modeflag for CRT2Mode */
      SiS_GetVBInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, 0);
   }
   SiS_SetYPbPr(SiS_Pr, HwInfo);
   SiS_SetTVMode(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_GetLCDResInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_SetLowModeTest(SiS_Pr, ModeNo, HwInfo);

   /* Set mode on CRT2 */
   if( (SiS_Pr->SiS_VBType & VB_SISVB)    ||
       (SiS_Pr->SiS_IF_DEF_LVDS     == 1) ||
       (SiS_Pr->SiS_IF_DEF_CH70xx   != 0) ||
       (SiS_Pr->SiS_IF_DEF_TRUMPION != 0) ) {
      SiS_SetCRT2Group(SiS_Pr, HwInfo, ModeNo);
   }
d4873 12
a4884 10
   SiS_StrangeStuff(SiS_Pr, HwInfo);

   SiS_DisplayOn(SiS_Pr);
   SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xFF);

   if(HwInfo->jChipType >= SIS_315H) {
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
         if(!(SiS_IsDualEdge(SiS_Pr, HwInfo))) {
	    SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	 }
d4886 3
a4888 1
   }
d4890 4
a4893 9
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
         if(HwInfo->jChipType < SIS_661) {
	    if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x35,0x01);
	    } else {
	       SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x35,0xFE);
	    }
	 }
d4895 15
a4909 1
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,backupreg);
d4911 4
a4914 8
	 if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x30) & SetCRT2ToLCD) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0xfc);
	 }
      } else if((HwInfo->jChipType == SIS_630) ||
                (HwInfo->jChipType == SIS_730)) {
         SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,backupreg);
      }
   }
d4916 3
a4918 4
   /* SetPitch: Adapt to virtual size & position */
   SiS_SetPitchCRT2(SiS_Pr, pScrn);

   return TRUE;
a4920 5
/*********************************************/
/*       XFree86: SiSBIOSSetModeCRT1()       */
/*           for Dual-Head modes             */
/*********************************************/

d4922 1
a4922 2
SiSBIOSSetModeCRT1(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, ScrnInfoPtr pScrn,
                   DisplayModePtr mode, BOOLEAN IsCustom)
d4924 10
a4933 9
   SISPtr  pSiS = SISPTR(pScrn);
   SISIOADDRESS BaseAddr = HwInfo->ulIOAddress;
   USHORT  ModeIdIndex, ModeNo=0;
   UCHAR backupreg=0;
#ifdef SISDUALHEAD
   SISEntPtr pSiSEnt = pSiS->entityPrivate;
   UCHAR backupcr30, backupcr31, backupcr38, backupcr35, backupp40d=0;
   BOOLEAN backupcustom;
#endif
d4935 4
a4938 1
   SiS_Pr->UseCustomMode = FALSE;
d4940 13
a4952 1
   if((IsCustom) && (SiS_CheckBuildCustomMode(pScrn, mode, pSiS->VBFlags))) {
d4954 1
a4954 1
         USHORT temptemp = SiS_Pr->CVDisplay;
d4956 1
a4956 2
         if(SiS_Pr->CModeFlag & DoubleScanMode)     temptemp >>= 1;
         else if(SiS_Pr->CInfoFlag & InterlaceMode) temptemp <<= 1;
d4958 28
a4985 4
         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
	 	"Setting custom mode %dx%d on CRT1\n",
	 	SiS_Pr->CHDisplay, temptemp);
	 ModeNo = 0xfe;
d4987 4
a4990 1
   } else {
d4992 24
a5015 2
         ModeNo = SiS_CalcModeIndex(pScrn, mode, pSiS->VBFlags, pSiS->HaveCustomModes);
         if(!ModeNo) return FALSE;
a5016 3
         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
	 	"Setting standard mode 0x%x on CRT1\n", ModeNo);
   }
d5018 6
a5023 7
   SiSInitPtr(SiS_Pr, HwInfo);
   SiSRegInit(SiS_Pr, BaseAddr);
   SiS_GetSysFlags(SiS_Pr, HwInfo);
   SiS_Pr->SiS_VGAINFO = SiS_GetSetBIOSScratch(pScrn, 0x489, 0xff);
   SiSInitPCIetc(SiS_Pr, HwInfo);
   SiSSetLVDSetc(SiS_Pr, HwInfo);
   SiSDetermineROMUsage(SiS_Pr, HwInfo);
d5025 2
a5026 2
   /* We don't clear the buffer under X */
   SiS_Pr->SiS_flag_clearbuffer = 0;
d5028 4
a5031 1
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x86);
d5033 6
a5038 1
   SiS_UnLockCRT2(SiS_Pr, HwInfo);
d5040 18
a5057 5
   if(!SiS_Pr->UseCustomMode) {
      if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return FALSE;
   } else {
      ModeIdIndex = 0;
   }
d5059 1
a5059 2
   /* Determine VBType */
   SiS_GetVBType(SiS_Pr, HwInfo);
d5061 1
a5061 7
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
      } else {
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
      }
   }
d5063 7
a5069 7
   /* Get VB information (connectors, connected devices) */
   /* (We don't care if the current mode is a CRT2 mode) */
   SiS_GetVBInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, 0);
   SiS_SetYPbPr(SiS_Pr, HwInfo);
   SiS_SetTVMode(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_GetLCDResInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_SetLowModeTest(SiS_Pr, ModeNo, HwInfo);
d5071 114
a5184 22
   if(HwInfo->jChipType >= SIS_315H) {
#if 0
      if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x17) & 0x08)  {
         if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
            if(ModeNo != 0x10)  SiS_Pr->SiS_SetFlag |= SetDOSMode;
         } else if((IS_SIS651) && (SiS_Pr->SiS_VBType & VB_NoLCD)) {
            SiS_Pr->SiS_SetFlag |= SetDOSMode;
         }
      }
#endif

      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
         if(IS_SIS650) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	    if(IS_SIS651) SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x51,0x20);
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
	 } else if(IS_SIS661741660760) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x3a,0xef);
	 }
      }
d5187 2
a5188 5
   /* Set mode on CRT1 */
   SiS_SetCRT1Group(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      SiS_SetCRT2Group(SiS_Pr, HwInfo, ModeNo);
   }
d5190 6
a5195 2
   /* SetPitch: Adapt to virtual size & position */
   SiS_SetPitchCRT1(SiS_Pr, pScrn);
d5197 1
a5197 6
#ifdef SISDUALHEAD
   if(pSiS->DualHeadMode) {
      pSiSEnt->CRT1ModeNo = ModeNo;
      pSiSEnt->CRT1DMode = mode;
   }
#endif
d5199 2
a5200 7
   if(SiS_Pr->UseCustomMode) {
      SiS_Pr->CRT1UsesCustomMode = TRUE;
      SiS_Pr->CSRClock_CRT1 = SiS_Pr->CSRClock;
      SiS_Pr->CModeFlag_CRT1 = SiS_Pr->CModeFlag;
   } else {
      SiS_Pr->CRT1UsesCustomMode = FALSE;
   }
d5202 58
a5259 36
   /* Reset CRT2 if changing mode on CRT1 */
#ifdef SISDUALHEAD
   if(pSiS->DualHeadMode) {
      if(pSiSEnt->CRT2ModeNo != -1) {
         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
				"(Re-)Setting mode for CRT2\n");
	 backupcustom = SiS_Pr->UseCustomMode;
	 backupcr30 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
	 backupcr31 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x31);
	 backupcr35 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
	 backupcr38 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
	 if(SiS_Pr->SiS_VBType & VB_SISVB) {
	    /* Backup LUT-enable */
	    if(pSiSEnt->CRT2ModeSet) {
	       backupp40d = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x0d) & 0x08;
	    }
	 }
	 if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	    SiS_SetReg(SiS_Pr->SiS_P3d4,0x30,pSiSEnt->CRT2CR30);
	    SiS_SetReg(SiS_Pr->SiS_P3d4,0x31,pSiSEnt->CRT2CR31);
	    SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,pSiSEnt->CRT2CR35);
	    SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,pSiSEnt->CRT2CR38);
	 }
	 SiSBIOSSetModeCRT2(SiS_Pr, HwInfo, pSiSEnt->pScrn_1,
			    pSiSEnt->CRT2DMode, pSiSEnt->CRT2IsCustom);
         SiS_SetReg(SiS_Pr->SiS_P3d4,0x30,backupcr30);
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x31,backupcr31);
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,backupcr35);
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,backupcr38);
	 if(SiS_Pr->SiS_VBType & VB_SISVB) {
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0d, ~0x08, backupp40d);
	 }
	 SiS_Pr->UseCustomMode = backupcustom;
      }
   }
#endif
d5261 1
a5261 3
   /* Warning: From here, the custom mode entries in SiS_Pr are
    * possibly overwritten
    */
d5263 48
a5310 1
   SiS_HandleCRT1(SiS_Pr);
d5312 1
a5312 1
   SiS_StrangeStuff(SiS_Pr, HwInfo);
d5314 1
a5314 2
   SiS_DisplayOn(SiS_Pr);
   SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xFF);
d5316 1
a5316 8
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,backupreg);
      } else if((HwInfo->jChipType == SIS_630) ||
                (HwInfo->jChipType == SIS_730)) {
         SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,backupreg);
      }
   }
d5318 1
a5318 2
   /* Backup/Set ModeNo in BIOS scratch area */
   SiS_GetSetModeID(pScrn,ModeNo);
d5320 29
a5348 3
   return TRUE;
}
#endif /* Linux_XF86 */
d5350 1
d5352 31
a5382 33
#ifdef LINUX_XF86
BOOLEAN
SiS_GetPanelID(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  const USHORT PanelTypeTable300[16] = {
      0xc101, 0xc117, 0x0121, 0xc135, 0xc142, 0xc152, 0xc162, 0xc072,
      0xc181, 0xc192, 0xc1a1, 0xc1b6, 0xc1c2, 0xc0d2, 0xc1e2, 0xc1f2
  };
  const USHORT PanelTypeTable31030x[16] = {
      0xc102, 0xc112, 0x0122, 0xc132, 0xc142, 0xc152, 0xc169, 0xc179,
      0x0189, 0xc192, 0xc1a2, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  };
  const USHORT PanelTypeTable310LVDS[16] = {
      0xc111, 0xc122, 0xc133, 0xc144, 0xc155, 0xc166, 0xc177, 0xc188,
      0xc199, 0xc0aa, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  };
  USHORT tempax,tempbx,temp;

  if(HwInfo->jChipType < SIS_315H) {

     tempax = SiS_GetReg(SiS_Pr->SiS_P3c4,0x18);
     tempbx = tempax & 0x0F;
     if(!(tempax & 0x10)){
        if(SiS_Pr->SiS_IF_DEF_LVDS == 1){
           tempbx = 0;
           temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x38);
           if(temp & 0x40) tempbx |= 0x08;
           if(temp & 0x20) tempbx |= 0x02;
           if(temp & 0x01) tempbx |= 0x01;
           temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x39);
           if(temp & 0x80) tempbx |= 0x04;
        } else {
           return 0;
a5383 7
     }
     tempbx = PanelTypeTable300[tempbx];
     tempbx |= LCDSync;
     temp = tempbx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_P3d4,0x36,temp);
     temp = (tempbx & 0xFF00) >> 8;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,~(LCDSyncBit|LCDRGB18Bit),temp);
d5385 1
a5385 1
  } else {
d5387 1
a5387 1
     if(HwInfo->jChipType >= SIS_661) return 0;
d5389 54
a5442 25
     tempax = SiS_GetReg(SiS_Pr->SiS_P3c4,0x1a);
     tempax &= 0x1e;
     tempax >>= 1;
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        if(tempax == 0) {
           /* TODO: Include HUGE detection routine
	            (Probably not worth bothering)
	    */
           return 0;
        }
        temp = tempax & 0xff;
        tempax--;
        tempbx = PanelTypeTable310LVDS[tempax];
     } else {
        tempbx = PanelTypeTable31030x[tempax];
        temp = tempbx & 0xff;
     }
     SiS_SetReg(SiS_Pr->SiS_P3d4,0x36,temp);
     tempbx = (tempbx & 0xff00) >> 8;
     temp = tempbx & 0xc1;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,~(LCDSyncBit|LCDRGB18Bit),temp);
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        temp = tempbx & 0x04;
        SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x39,0xfb,temp);
     }
d5444 1
a5444 4
  }
  return 1;
}
#endif
d5446 1
d5448 1
a5448 1
/* ================ XFREE86 ================= */
d5450 2
a5451 1
/* Helper functions */
a5452 1
#ifdef LINUX_XF86
d5459 7
a5465 9
   unsigned int vclk[5];

#define Midx         0
#define Nidx         1
#define VLDidx       2
#define Pidx         3
#define PSNidx       4

   pSiS->SiS_Pr->CModeFlag = 0;
d5468 1
a5468 1

d5473 3
a5475 1

a5479 19

   pSiS->SiS_Pr->CFlags = mode->Flags;

   if(pSiS->SiS_Pr->CFlags & V_INTERLACE) {
      pSiS->SiS_Pr->CVDisplay >>= 1;
      pSiS->SiS_Pr->CVSyncStart >>= 1;
      pSiS->SiS_Pr->CVSyncEnd >>= 1;
      pSiS->SiS_Pr->CVTotal >>= 1;
   }
   if(pSiS->SiS_Pr->CFlags & V_DBLSCAN) {
      /* pSiS->SiS_Pr->CDClock <<= 1; */
      pSiS->SiS_Pr->CVDisplay <<= 1;
      pSiS->SiS_Pr->CVSyncStart <<= 1;
      pSiS->SiS_Pr->CVSyncEnd <<= 1;
      pSiS->SiS_Pr->CVTotal <<= 1;
   }

   pSiS->SiS_Pr->CHBlankStart = pSiS->SiS_Pr->CHDisplay;
   pSiS->SiS_Pr->CHBlankEnd = pSiS->SiS_Pr->CHTotal;
d5482 2
d5485 2
a5486 23
   if(SiS_compute_vclk(pSiS->SiS_Pr->CDClock, &out_n, &out_dn, &out_div, &out_sbit, &out_scale)) {
      pSiS->SiS_Pr->CSR2B = (out_div == 2) ? 0x80 : 0x00;
      pSiS->SiS_Pr->CSR2B |= ((out_n - 1) & 0x7f);
      pSiS->SiS_Pr->CSR2C = (out_dn - 1) & 0x1f;
      pSiS->SiS_Pr->CSR2C |= (((out_scale - 1) & 3) << 5);
      pSiS->SiS_Pr->CSR2C |= ((out_sbit & 0x01) << 7);
#ifdef TWDEBUG
      xf86DrvMsg(pScrn->scrnIndex, X_INFO, "Clock %d: n %d dn %d div %d sb %d sc %d\n",
        	pSiS->SiS_Pr->CDClock, out_n, out_dn, out_div, out_sbit, out_scale);
#endif
   } else {
      SiSCalcClock(pScrn, pSiS->SiS_Pr->CDClock, 2, vclk);
      pSiS->SiS_Pr->CSR2B = (vclk[VLDidx] == 2) ? 0x80 : 0x00;
      pSiS->SiS_Pr->CSR2B |= (vclk[Midx] - 1) & 0x7f;
      pSiS->SiS_Pr->CSR2C = (vclk[Nidx] - 1) & 0x1f;
      if(vclk[Pidx] <= 4) {
         /* postscale 1,2,3,4 */
         pSiS->SiS_Pr->CSR2C |= ((vclk[Pidx] - 1) & 3) << 5;
      } else {
         /* postscale 6,8 */
         pSiS->SiS_Pr->CSR2C |= (((vclk[Pidx] / 2) - 1) & 3) << 5;
	 pSiS->SiS_Pr->CSR2C |= 0x80;
      }
d5488 9
a5496 5
      xf86DrvMsg(pScrn->scrnIndex, X_INFO, "Clock %d: n %d dn %d div %d sc %d\n",
        	pSiS->SiS_Pr->CDClock, vclk[Midx], vclk[Nidx], vclk[VLDidx], vclk[Pidx]);
#endif
   }

d5504 1
a5504 1
   pSiS->SiS_Pr->CCRT1CRTC[5]  =  ((((pSiS->SiS_Pr->CHBlankEnd >> 3) - 1) & 0x20) << 2) |
d5506 1
a5506 1

d5516 1
a5516 1

d5518 2
a5519 2

#if 0
d5524 1
a5524 1
#endif
d5526 7
a5532 7
   pSiS->SiS_Pr->CCRT1CRTC[8] =  (pSiS->SiS_Pr->CVSyncStart     ) & 0xFF;		/* cr10 */
   pSiS->SiS_Pr->CCRT1CRTC[9] =  ((pSiS->SiS_Pr->CVSyncEnd      ) & 0x0F) | 0x80;	/* cr11 */
   pSiS->SiS_Pr->CCRT1CRTC[10] = (pSiS->SiS_Pr->CVDisplay    - 1) & 0xFF;		/* cr12 */
   pSiS->SiS_Pr->CCRT1CRTC[11] = (pSiS->SiS_Pr->CVBlankStart - 1) & 0xFF;		/* cr15 */
   pSiS->SiS_Pr->CCRT1CRTC[12] = (pSiS->SiS_Pr->CVBlankEnd   - 1) & 0xFF;		/* cr16 */

   pSiS->SiS_Pr->CCRT1CRTC[13] =
d5538 1
a5538 1
                        GETBITSTR((pSiS->SiS_Pr->CVSyncEnd     ),   4:4, 5:5) ;
d5540 1
a5540 1
   pSiS->SiS_Pr->CCRT1CRTC[14] =
d5546 1
a5546 1

d5549 2
a5550 2
                        GETBITSTR((pSiS->SiS_Pr->CHSyncEnd  >> 3) + 3, 5:5, 2:2) ;

d5552 2
a5553 2
   case 8:
      	pSiS->SiS_Pr->CModeFlag |= 0x223b;
d5555 2
a5556 2
   case 16:
      	pSiS->SiS_Pr->CModeFlag |= 0x227d;
d5558 2
a5559 2
   case 32:
      	pSiS->SiS_Pr->CModeFlag |= 0x22ff;
d5566 3
a5568 4
      pSiS->SiS_Pr->CModeFlag |= DoubleScanMode;

   if((pSiS->SiS_Pr->CVDisplay >= 1024)	||
      (pSiS->SiS_Pr->CVTotal >= 1024)   ||
d5570 1
a5570 2
      pSiS->SiS_Pr->CModeFlag |= LineCompareOff;

d5572 2
a5573 2
      pSiS->SiS_Pr->CModeFlag |= HalfDCLK;

d5575 6
a5580 9

   if(pSiS->SiS_Pr->CFlags & V_NHSYNC)
      pSiS->SiS_Pr->CInfoFlag |= 0x4000;

   if(pSiS->SiS_Pr->CFlags & V_NVSYNC)
      pSiS->SiS_Pr->CInfoFlag |= 0x8000;

   if(pSiS->SiS_Pr->CFlags & V_INTERLACE)
      pSiS->SiS_Pr->CInfoFlag |= InterlaceMode;
d5611 1
a5611 1
#endif
d5615 1
a5615 1
/* Build a list of supported modes */
d5617 1
a5617 1
SiSBuildBuiltInModeList(ScrnInfoPtr pScrn, BOOLEAN includelcdmodes, BOOLEAN isfordvi)
d5625 2
a5626 6
   int            A, B, C, D, E, F, temp, i, j, k, l, index, vclkindex;
   DisplayModePtr new = NULL, current = NULL, first = NULL;
   BOOLEAN        done = FALSE;
#if 0
   DisplayModePtr backup = NULL;
#endif
d5629 1
a5629 2
   pSiS->AddedPlasmaModes = FALSE;

d5633 1
a5633 1
      InitTo300Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
d5635 1
a5635 1
      return NULL;
d5639 1
a5639 1
      InitTo310Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
d5641 1
a5641 1
      return NULL;
d5649 3
d5653 5
a5657 3
      /* 0x5a (320x240) is a pure FTSN mode, not DSTN! */
      if((!pSiS->FSTN) &&
	 (pSiS->SiS_Pr->SiS_RefIndex[i].ModeID == 0x5a))  {
d5661 1
a5661 8
      if((pSiS->FSTN) &&
         (pSiS->SiS_Pr->SiS_RefIndex[i].XRes == 320) &&
	 (pSiS->SiS_Pr->SiS_RefIndex[i].YRes == 240) &&
	 (pSiS->SiS_Pr->SiS_RefIndex[i].ModeID != 0x5a)) {
	   i++;
	   continue;
      }

d5675 1
a5675 1

d5681 1
a5681 1
      current->type = M_T_DEFAULT;
d5694 1
a5694 1

d5762 4
a5765 23
      if((pSiS->SiS_Pr->SiS_RefIndex[i].XRes == 320) &&
	 ((pSiS->SiS_Pr->SiS_RefIndex[i].YRes == 200) ||
	  (pSiS->SiS_Pr->SiS_RefIndex[i].YRes == 240))) {

	 /* Terrible hack, but correct CRTC data for
	  * these modes only produces a black screen...
	  * (HRE is 0, leading into a too large C and
	  * a negative D. The CRT controller does not
	  * seem to like correcting HRE to 50
	  */
	 current->HDisplay   = 320;
         current->HSyncStart = 328;
         current->HSyncEnd   = 376;
         current->HTotal     = 400;

      } else {

         current->HDisplay   = (E * 8);
         current->HSyncStart = (E * 8) + (F * 8);
         current->HSyncEnd   = (E * 8) + (F * 8) + (C * 8);
         current->HTotal     = (E * 8) + (F * 8) + (C * 8) + (D * 8);

      }
d5889 1
a5889 1
	 current->VTotal |= 1;
a5898 1
#if 0
a5916 1
#endif
a5923 2
#else
        (void)VBS;  (void)HBS;  (void)A;
a5928 183
   /* Add non-standard LCD modes for panel's detailed timings */

   if(!includelcdmodes) return first;

   if(pSiS->SiS_Pr->CP_Vendor) {
      xf86DrvMsg(0, X_INFO, "Checking database for vendor %x, product %x\n",
         pSiS->SiS_Pr->CP_Vendor, pSiS->SiS_Pr->CP_Product);
   }

   i = 0;
   while((!done) && (SiS_PlasmaTable[i].vendor) && (pSiS->SiS_Pr->CP_Vendor)) {

     if(SiS_PlasmaTable[i].vendor == pSiS->SiS_Pr->CP_Vendor) {

        for(j=0; j<SiS_PlasmaTable[i].productnum; j++) {

	    if(SiS_PlasmaTable[i].product[j] == pSiS->SiS_Pr->CP_Product) {

	       xf86DrvMsg(pScrn->scrnIndex, X_PROBED,
	       	  "Identified %s panel, adding specific modes\n",
		  SiS_PlasmaTable[i].plasmaname);

	       for(k=0; k<SiS_PlasmaTable[i].modenum; k++) {

	          if(isfordvi) {
		     if(!(SiS_PlasmaTable[i].plasmamodes[k] & 0x80)) continue;
		  } else {
		     if(!(SiS_PlasmaTable[i].plasmamodes[k] & 0x40)) continue;
		  }

	          if(!(new = xalloc(sizeof(DisplayModeRec)))) return first;

                  memset(new, 0, sizeof(DisplayModeRec));
                  if(!(new->name = xalloc(10))) {
      		     xfree(new);
		     return first;
                  }
                  if(!first) first = new;
                  if(current) {
                     current->next = new;
	             new->prev = current;
                  }

                  current = new;

		  pSiS->AddedPlasmaModes = TRUE;

		  l = SiS_PlasmaTable[i].plasmamodes[k] & 0x3f;

	          sprintf(current->name, "%dx%d", SiS_PlasmaMode[l].HDisplay,
                                                  SiS_PlasmaMode[l].VDisplay);

                  current->status = MODE_OK;

                  current->type = M_T_BUILTIN;

		  current->Clock = SiS_PlasmaMode[l].clock;
            	  current->SynthClock = current->Clock;

                  current->HDisplay   = SiS_PlasmaMode[l].HDisplay;
                  current->HSyncStart = current->HDisplay + SiS_PlasmaMode[l].HFrontPorch;
                  current->HSyncEnd   = current->HSyncStart + SiS_PlasmaMode[l].HSyncWidth;
                  current->HTotal     = SiS_PlasmaMode[l].HTotal;

		  current->VDisplay   = SiS_PlasmaMode[l].VDisplay;
                  current->VSyncStart = current->VDisplay + SiS_PlasmaMode[l].VFrontPorch;
                  current->VSyncEnd   = current->VSyncStart + SiS_PlasmaMode[l].VSyncWidth;
                  current->VTotal     = SiS_PlasmaMode[l].VTotal;

                  current->CrtcHDisplay = current->HDisplay;
                  current->CrtcHBlankStart = current->HSyncStart;
                  current->CrtcHSyncStart = current->HSyncStart;
                  current->CrtcHSyncEnd = current->HSyncEnd;
                  current->CrtcHBlankEnd = current->HSyncEnd;
                  current->CrtcHTotal = current->HTotal;

                  current->CrtcVDisplay = current->VDisplay;
                  current->CrtcVBlankStart = current->VSyncStart;
                  current->CrtcVSyncStart = current->VSyncStart;
                  current->CrtcVSyncEnd = current->VSyncEnd;
                  current->CrtcVBlankEnd = current->VSyncEnd;
                  current->CrtcVTotal = current->VTotal;

                  if(SiS_PlasmaMode[l].SyncFlags & SIS_PL_HSYNCP)
                     current->Flags |= V_PHSYNC;
                  else
                     current->Flags |= V_NHSYNC;

                  if(SiS_PlasmaMode[l].SyncFlags & SIS_PL_VSYNCP)
                     current->Flags |= V_PVSYNC;
                  else
                     current->Flags |= V_NVSYNC;

		  if(current->HDisplay > pSiS->LCDwidth)
		     pSiS->LCDwidth = pSiS->SiS_Pr->CP_MaxX = current->HDisplay;
	          if(current->VDisplay > pSiS->LCDheight)
		     pSiS->LCDheight = pSiS->SiS_Pr->CP_MaxY = current->VDisplay;

               }
	       done = TRUE;
	       break;
	    }
	}
     }

     i++;

   }

   if(pSiS->SiS_Pr->CP_HaveCustomData) {

      for(i=0; i<7; i++) {

         if(pSiS->SiS_Pr->CP_DataValid[i]) {

            if(!(new = xalloc(sizeof(DisplayModeRec)))) return first;

            memset(new, 0, sizeof(DisplayModeRec));
            if(!(new->name = xalloc(10))) {
      		xfree(new);
		return first;
            }
            if(!first) first = new;
            if(current) {
               current->next = new;
	       new->prev = current;
            }

            current = new;

            sprintf(current->name, "%dx%d", pSiS->SiS_Pr->CP_HDisplay[i],
                                            pSiS->SiS_Pr->CP_VDisplay[i]);

            current->status = MODE_OK;

            current->type = M_T_BUILTIN;

            current->Clock = pSiS->SiS_Pr->CP_Clock[i];
            current->SynthClock = current->Clock;

            current->HDisplay   = pSiS->SiS_Pr->CP_HDisplay[i];
            current->HSyncStart = pSiS->SiS_Pr->CP_HSyncStart[i];
            current->HSyncEnd   = pSiS->SiS_Pr->CP_HSyncEnd[i];
            current->HTotal     = pSiS->SiS_Pr->CP_HTotal[i];

            current->VDisplay   = pSiS->SiS_Pr->CP_VDisplay[i];
            current->VSyncStart = pSiS->SiS_Pr->CP_VSyncStart[i];
            current->VSyncEnd   = pSiS->SiS_Pr->CP_VSyncEnd[i];
            current->VTotal     = pSiS->SiS_Pr->CP_VTotal[i];

            current->CrtcHDisplay = current->HDisplay;
            current->CrtcHBlankStart = pSiS->SiS_Pr->CP_HBlankStart[i];
            current->CrtcHSyncStart = current->HSyncStart;
            current->CrtcHSyncEnd = current->HSyncEnd;
            current->CrtcHBlankEnd = pSiS->SiS_Pr->CP_HBlankEnd[i];
            current->CrtcHTotal = current->HTotal;

            current->CrtcVDisplay = current->VDisplay;
            current->CrtcVBlankStart = pSiS->SiS_Pr->CP_VBlankStart[i];
            current->CrtcVSyncStart = current->VSyncStart;
            current->CrtcVSyncEnd = current->VSyncEnd;
            current->CrtcVBlankEnd = pSiS->SiS_Pr->CP_VBlankEnd[i];
            current->CrtcVTotal = current->VTotal;

	    if(pSiS->SiS_Pr->CP_SyncValid[i]) {
               if(pSiS->SiS_Pr->CP_HSync_P[i])
                  current->Flags |= V_PHSYNC;
               else
                  current->Flags |= V_NHSYNC;

               if(pSiS->SiS_Pr->CP_VSync_P[i])
                  current->Flags |= V_PVSYNC;
               else
                  current->Flags |= V_NVSYNC;
	    } else {
	       /* No sync data? Use positive sync... */
	       current->Flags |= V_PHSYNC;
	       current->Flags |= V_PVSYNC;
	    }
         }
      }
   }

d5933 1
a5933 34
/* Build a list of supported modes */
int
SiSTranslateToVESA(ScrnInfoPtr pScrn, int modenumber)
{
   SISPtr         pSiS = SISPTR(pScrn);
   int i;

   /* Initialize our pointers */
   if(pSiS->VGAEngine == SIS_300_VGA) {
#ifdef SIS300
	InitTo300Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
#else
	return -1;
#endif
   } else if(pSiS->VGAEngine == SIS_315_VGA) {
#ifdef SIS315H
       	InitTo310Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
#else
	return -1;
#endif
   } else return -1;

   if(modenumber <= 0x13) return modenumber;

   i = 0;
   while(pSiS->SiS_Pr->SiS_EModeIDTable[i].Ext_ModeID != 0xff) {
      if(pSiS->SiS_Pr->SiS_EModeIDTable[i].Ext_ModeID == modenumber) {
         return (int)pSiS->SiS_Pr->SiS_EModeIDTable[i].Ext_VESAID;
      }
      i++;
   }
   return -1;
}
#endif  /* Xfree86 */
d5935 2
a5936 4
#ifdef LINUX_KERNEL
int
sisfb_mode_rate_to_dclock(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
			  unsigned char modeno, unsigned char rateindex)
d5938 1
a5938 33
    USHORT ModeNo = modeno;
    USHORT ModeIdIndex = 0, ClockIndex = 0;
    USHORT RefreshRateTableIndex = 0;
    int    Clock;

    if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
       InitTo300Pointer(SiS_Pr, HwInfo);
#else
       return 65 * 1000;
#endif
    } else {
#ifdef SIS315H
       InitTo310Pointer(SiS_Pr, HwInfo);
#else
       return 65 * 1000;
#endif
    }

    if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) {;
    	printk(KERN_ERR "Could not find mode %x\n", ModeNo);
    	return 65 * 1000;
    }

    RefreshRateTableIndex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].REFindex;
    RefreshRateTableIndex += (rateindex - 1);
    ClockIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
    if(HwInfo->jChipType < SIS_315H) {
       ClockIndex &= 0x3F;
    }
    Clock = SiS_Pr->SiS_VCLKData[ClockIndex].CLOCK * 1000;
    
    return(Clock);
d5941 2
a5942 3
BOOLEAN
sisfb_gettotalfrommode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
		       unsigned char modeno, int *htotal, int *vtotal, unsigned char rateindex)
d5944 2
a5945 4
    USHORT ModeNo = modeno;
    USHORT ModeIdIndex = 0, CRT1Index = 0;
    USHORT RefreshRateTableIndex = 0;
    unsigned char  sr_data, cr_data, cr_data2;
d5947 5
a5951 12
    if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
       InitTo300Pointer(SiS_Pr, HwInfo);
#else
       return FALSE;
#endif
    } else {
#ifdef SIS315H
       InitTo310Pointer(SiS_Pr, HwInfo);
#else
       return FALSE;
#endif
d5954 1
a5954 1
    if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return FALSE;
d5956 3
a5958 15
    RefreshRateTableIndex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].REFindex;
    RefreshRateTableIndex += (rateindex - 1);
    CRT1Index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;

    sr_data = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14];
    cr_data = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[0];
    *htotal = (((cr_data & 0xff) | ((unsigned short) (sr_data & 0x03) << 8)) + 5) * 8;

    sr_data = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[13];
    cr_data = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[6];
    cr_data2 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[7];
    *vtotal = ((cr_data & 0xFF) |
               ((unsigned short)(cr_data2 & 0x01) <<  8) |
	       ((unsigned short)(cr_data2 & 0x20) <<  4) |
	       ((unsigned short)(sr_data  & 0x01) << 10)) + 2;
d5960 1
a5960 2
    if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag & InterlaceMode)
       *vtotal *= 2;
d5962 1
a5962 1
    return TRUE;
a5964 21
int
sisfb_mode_rate_to_ddata(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
			 unsigned char modeno, unsigned char rateindex,
			 ULONG *left_margin, ULONG *right_margin, 
			 ULONG *upper_margin, ULONG *lower_margin,
			 ULONG *hsync_len, ULONG *vsync_len,
			 ULONG *sync, ULONG *vmode)
{
    USHORT ModeNo = modeno;
    USHORT ModeIdIndex = 0, index = 0;
    USHORT RefreshRateTableIndex = 0;
    unsigned short VRE, VBE, VRS, VBS, VDE, VT;
    unsigned short HRE, HBE, HRS, HBS, HDE, HT;
    unsigned char  sr_data, cr_data, cr_data2, cr_data3;
    int            A, B, C, D, E, F, temp, j;
   
    if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
       InitTo300Pointer(SiS_Pr, HwInfo);
#else
       return 0;
a5965 42
    } else {
#ifdef SIS315H
       InitTo310Pointer(SiS_Pr, HwInfo);
#else
       return 0;
#endif
    }
    
    if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return 0;

    RefreshRateTableIndex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].REFindex;
    RefreshRateTableIndex += (rateindex - 1);
    index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;

    sr_data = SiS_Pr->SiS_CRT1Table[index].CR[14];

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[0];

    /* Horizontal total */
    HT = (cr_data & 0xff) |
         ((unsigned short) (sr_data & 0x03) << 8);
    A = HT + 5;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[1];
	
    /* Horizontal display enable end */
    HDE = (cr_data & 0xff) |
          ((unsigned short) (sr_data & 0x0C) << 6);
    E = HDE + 1;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[4];
	
    /* Horizontal retrace (=sync) start */
    HRS = (cr_data & 0xff) |
          ((unsigned short) (sr_data & 0xC0) << 2);
    F = HRS - E - 3;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[2];
	
    /* Horizontal blank start */
    HBS = (cr_data & 0xff) |
          ((unsigned short) (sr_data & 0x30) << 4);
a5966 102
    sr_data = SiS_Pr->SiS_CRT1Table[index].CR[15];
	
    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[3];

    cr_data2 = SiS_Pr->SiS_CRT1Table[index].CR[5];
	
    /* Horizontal blank end */
    HBE = (cr_data & 0x1f) |
          ((unsigned short) (cr_data2 & 0x80) >> 2) |
	  ((unsigned short) (sr_data & 0x03) << 6);

    /* Horizontal retrace (=sync) end */
    HRE = (cr_data2 & 0x1f) | ((sr_data & 0x04) << 3);

    temp = HBE - ((E - 1) & 255);
    B = (temp > 0) ? temp : (temp + 256);

    temp = HRE - ((E + F + 3) & 63);
    C = (temp > 0) ? temp : (temp + 64);

    D = B - F - C;

    if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes == 320) &&
       ((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes == 200) ||
	(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes == 240))) {

	 /* Terrible hack, but the correct CRTC data for
	  * these modes only produces a black screen...
	  */
       *left_margin = (400 - 376);
       *right_margin = (328 - 320);
       *hsync_len = (376 - 328);

    } else {

       *left_margin = D * 8;
       *right_margin = F * 8;
       *hsync_len = C * 8;

    }

    sr_data = SiS_Pr->SiS_CRT1Table[index].CR[13];

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[6];

    cr_data2 = SiS_Pr->SiS_CRT1Table[index].CR[7];

    /* Vertical total */
    VT = (cr_data & 0xFF) |
         ((unsigned short) (cr_data2 & 0x01) << 8) |
	 ((unsigned short)(cr_data2 & 0x20) << 4) |
	 ((unsigned short) (sr_data & 0x01) << 10);
    A = VT + 2;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[10];
	
    /* Vertical display enable end */
    VDE = (cr_data & 0xff) |
          ((unsigned short) (cr_data2 & 0x02) << 7) |
	  ((unsigned short) (cr_data2 & 0x40) << 3) |
	  ((unsigned short) (sr_data & 0x02) << 9);
    E = VDE + 1;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[8];

    /* Vertical retrace (=sync) start */
    VRS = (cr_data & 0xff) |
          ((unsigned short) (cr_data2 & 0x04) << 6) |
	  ((unsigned short) (cr_data2 & 0x80) << 2) |
	  ((unsigned short) (sr_data & 0x08) << 7);
    F = VRS + 1 - E;

    cr_data =  SiS_Pr->SiS_CRT1Table[index].CR[11];

    cr_data3 = (SiS_Pr->SiS_CRT1Table[index].CR[16] & 0x01) << 5;

    /* Vertical blank start */
    VBS = (cr_data & 0xff) |
          ((unsigned short) (cr_data2 & 0x08) << 5) |
	  ((unsigned short) (cr_data3 & 0x20) << 4) |
	  ((unsigned short) (sr_data & 0x04) << 8);

    cr_data =  SiS_Pr->SiS_CRT1Table[index].CR[12];

    /* Vertical blank end */
    VBE = (cr_data & 0xff) |
          ((unsigned short) (sr_data & 0x10) << 4);
    temp = VBE - ((E - 1) & 511);
    B = (temp > 0) ? temp : (temp + 512);

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[9];

    /* Vertical retrace (=sync) end */
    VRE = (cr_data & 0x0f) | ((sr_data & 0x20) >> 1);
    temp = VRE - ((E + F - 1) & 31);
    C = (temp > 0) ? temp : (temp + 32);

    D = B - F - C;
      
    *upper_margin = D;
    *lower_margin = F;
    *vsync_len = C;
a5967 43
    if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag & 0x8000)
       *sync &= ~FB_SYNC_VERT_HIGH_ACT;
    else
       *sync |= FB_SYNC_VERT_HIGH_ACT;

    if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag & 0x4000)       
       *sync &= ~FB_SYNC_HOR_HIGH_ACT;
    else
       *sync |= FB_SYNC_HOR_HIGH_ACT;
		
    *vmode = FB_VMODE_NONINTERLACED;
    if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag & 0x0080)
       *vmode = FB_VMODE_INTERLACED;
    else {
      j = 0;
      while(SiS_Pr->SiS_EModeIDTable[j].Ext_ModeID != 0xff) {
          if(SiS_Pr->SiS_EModeIDTable[j].Ext_ModeID ==
	                  SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].ModeID) {
              if(SiS_Pr->SiS_EModeIDTable[j].Ext_ModeFlag & DoubleScanMode) {
	      	  *vmode = FB_VMODE_DOUBLE;
              }
	      break;
          }
	  j++;
      }
    }       

    if((*vmode & FB_VMODE_MASK) == FB_VMODE_INTERLACED) {
#if 0  /* Do this? */
       *upper_margin <<= 1;
       *lower_margin <<= 1;
       *vsync_len <<= 1;
#endif
    } else if((*vmode & FB_VMODE_MASK) == FB_VMODE_DOUBLE) {
       *upper_margin >>= 1;
       *lower_margin >>= 1;
       *vsync_len >>= 1;
    }

    return 1;       
}			  

#endif
@


1.1.9.2
log
@Import XFree86 4.4 from The XFree86(TM) Project, Inc.
(integrity cannot be checked)

got via cvs -qd anoncvs@@anoncvs.xfree86.org:/cvs co -Prxf-4_4_0 xc
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/sis/init.c,v 1.53 2004/02/26 15:58:43 twini Exp $ */
d37 4
a40 1
 * * 3) The name of the author may not be used to endorse or promote products
d81 1
a136 5
   SiS_Pr->SiS_LCD1280x720Data      = SiS_LCD1280x720Data;
   SiS_Pr->SiS_StLCD1280x768_2Data  = SiS_StLCD1280x768_2Data;
   SiS_Pr->SiS_ExtLCD1280x768_2Data = SiS_ExtLCD1280x768_2Data;
   SiS_Pr->SiS_LCD1280x768_3Data    = SiS_LCD1280x768_3Data;
   SiS_Pr->SiS_LCD1280x800Data      = SiS_LCD1280x800Data;
d138 2
a140 2
   SiS_Pr->SiS_ExtLCD1400x1050Data  = SiS_ExtLCD1400x1050Data;
   SiS_Pr->SiS_LCD1680x1050Data     = SiS_LCD1680x1050Data;
d142 5
a146 1
   SiS_Pr->SiS_ExtLCD1600x1200Data  = SiS_ExtLCD1600x1200Data;
d175 4
d181 29
a209 4
   SiS_Pr->SiS_LVDSBARCO1024Data_1 = SiS_LVDSBARCO1024Data_1;
   SiS_Pr->SiS_LVDSBARCO1024Data_2 = SiS_LVDSBARCO1024Data_2;
   SiS_Pr->SiS_LVDSBARCO1366Data_1 = SiS_LVDSBARCO1366Data_1;
   SiS_Pr->SiS_LVDSBARCO1366Data_2 = SiS_LVDSBARCO1366Data_2;
d224 2
a231 11

   SiS_Pr->SiS_CHTVUNTSCData = SiS_CHTVUNTSCData;
   SiS_Pr->SiS_CHTVONTSCData = SiS_CHTVONTSCData;

   SiS_Pr->SiS_CHTVUNTSCDesData = SiS_CHTVUNTSCDesData;
   SiS_Pr->SiS_CHTVONTSCDesData = SiS_CHTVONTSCDesData;
   SiS_Pr->SiS_CHTVUPALDesData  = SiS_CHTVUPALDesData;
   SiS_Pr->SiS_CHTVOPALDesData  = SiS_CHTVOPALDesData;

   SiS_Pr->SiS_PanelMinLVDS   = Panel_800x600;    /* lowest value LVDS/LCDA */
   SiS_Pr->SiS_PanelMin301    = Panel_1024x768;   /* lowest value 301 */
d268 5
a272 5
   SiS_Pr->SiS_SModeIDTable  = SiS300_SModeIDTable;
   SiS_Pr->SiS_VBModeIDTable = SiS300_VBModeIDTable;
   SiS_Pr->SiS_EModeIDTable  = SiS300_EModeIDTable;
   SiS_Pr->SiS_RefIndex      = SiS300_RefIndex;
   SiS_Pr->SiS_CRT1Table     = SiS300_CRT1Table;
d274 1
a274 1
      SiS_Pr->SiS_MCLKData_0    = SiS300_MCLKData_300; /* 300 */
d276 1
a276 1
      SiS_Pr->SiS_MCLKData_0    = SiS300_MCLKData_630; /* 630, 730 */
d278 1
a278 1
   SiS_Pr->SiS_VCLKData      = SiS300_VCLKData;
d280 1
d309 14
a322 2
   SiS_Pr->SiS_PanelDelayTbl     = SiS300_PanelDelayTbl;
   SiS_Pr->SiS_PanelDelayTblLVDS = SiS300_PanelDelayTbl;
d324 40
a363 54
   SiS_Pr->SiS_ExtLCD1024x768Data   = SiS300_ExtLCD1024x768Data;
   SiS_Pr->SiS_St2LCD1024x768Data   = SiS300_St2LCD1024x768Data;
   SiS_Pr->SiS_ExtLCD1280x1024Data  = SiS300_ExtLCD1280x1024Data;
   SiS_Pr->SiS_St2LCD1280x1024Data  = SiS300_St2LCD1280x1024Data;

   SiS_Pr->SiS_CRT2Part2_1024x768_1  = SiS300_CRT2Part2_1024x768_1;
   SiS_Pr->SiS_CRT2Part2_1280x1024_1 = SiS300_CRT2Part2_1280x1024_1;
   SiS_Pr->SiS_CRT2Part2_1024x768_2  = SiS300_CRT2Part2_1024x768_2;
   SiS_Pr->SiS_CRT2Part2_1280x1024_2 = SiS300_CRT2Part2_1280x1024_2;
   SiS_Pr->SiS_CRT2Part2_1024x768_3  = SiS300_CRT2Part2_1024x768_3;
   SiS_Pr->SiS_CRT2Part2_1280x1024_3 = SiS300_CRT2Part2_1280x1024_3;

   SiS_Pr->SiS_CHTVUPALData  = SiS300_CHTVUPALData;
   SiS_Pr->SiS_CHTVOPALData  = SiS300_CHTVOPALData;
   SiS_Pr->SiS_CHTVUPALMData = SiS_CHTVUNTSCData;    /* not supported on 300 series */
   SiS_Pr->SiS_CHTVOPALMData = SiS_CHTVONTSCData;    /* not supported on 300 series */
   SiS_Pr->SiS_CHTVUPALNData = SiS300_CHTVUPALData;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVOPALNData = SiS300_CHTVOPALData;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVSOPALData = SiS300_CHTVSOPALData;

   SiS_Pr->SiS_PanelType00_1 = SiS300_PanelType00_1;
   SiS_Pr->SiS_PanelType01_1 = SiS300_PanelType01_1;
   SiS_Pr->SiS_PanelType02_1 = SiS300_PanelType02_1;
   SiS_Pr->SiS_PanelType03_1 = SiS300_PanelType03_1;
   SiS_Pr->SiS_PanelType04_1 = SiS300_PanelType04_1;
   SiS_Pr->SiS_PanelType05_1 = SiS300_PanelType05_1;
   SiS_Pr->SiS_PanelType06_1 = SiS300_PanelType06_1;
   SiS_Pr->SiS_PanelType07_1 = SiS300_PanelType07_1;
   SiS_Pr->SiS_PanelType08_1 = SiS300_PanelType08_1;
   SiS_Pr->SiS_PanelType09_1 = SiS300_PanelType09_1;
   SiS_Pr->SiS_PanelType0a_1 = SiS300_PanelType0a_1;
   SiS_Pr->SiS_PanelType0b_1 = SiS300_PanelType0b_1;
   SiS_Pr->SiS_PanelType0c_1 = SiS300_PanelType0c_1;
   SiS_Pr->SiS_PanelType0d_1 = SiS300_PanelType0d_1;
   SiS_Pr->SiS_PanelType0e_1 = SiS300_PanelType0e_1;
   SiS_Pr->SiS_PanelType0f_1 = SiS300_PanelType0f_1;
   SiS_Pr->SiS_PanelType00_2 = SiS300_PanelType00_2;
   SiS_Pr->SiS_PanelType01_2 = SiS300_PanelType01_2;
   SiS_Pr->SiS_PanelType02_2 = SiS300_PanelType02_2;
   SiS_Pr->SiS_PanelType03_2 = SiS300_PanelType03_2;
   SiS_Pr->SiS_PanelType04_2 = SiS300_PanelType04_2;
   SiS_Pr->SiS_PanelType05_2 = SiS300_PanelType05_2;
   SiS_Pr->SiS_PanelType06_2 = SiS300_PanelType06_2;
   SiS_Pr->SiS_PanelType07_2 = SiS300_PanelType07_2;
   SiS_Pr->SiS_PanelType08_2 = SiS300_PanelType08_2;
   SiS_Pr->SiS_PanelType09_2 = SiS300_PanelType09_2;
   SiS_Pr->SiS_PanelType0a_2 = SiS300_PanelType0a_2;
   SiS_Pr->SiS_PanelType0b_2 = SiS300_PanelType0b_2;
   SiS_Pr->SiS_PanelType0c_2 = SiS300_PanelType0c_2;
   SiS_Pr->SiS_PanelType0d_2 = SiS300_PanelType0d_2;
   SiS_Pr->SiS_PanelType0e_2 = SiS300_PanelType0e_2;
   SiS_Pr->SiS_PanelType0f_2 = SiS300_PanelType0f_2;
   SiS_Pr->SiS_PanelTypeNS_1 = SiS300_PanelTypeNS_1;
   SiS_Pr->SiS_PanelTypeNS_2 = SiS300_PanelTypeNS_2;
d366 2
a367 2
      SiS_Pr->SiS_PanelType04_1 = SiS300_PanelType04_1a;
      SiS_Pr->SiS_PanelType04_2 = SiS300_PanelType04_2a;
d370 2
a371 2
      SiS_Pr->SiS_PanelType04_1 = SiS300_PanelType04_1b;
      SiS_Pr->SiS_PanelType04_2 = SiS300_PanelType04_2b;
d374 26
a399 29
   SiS_Pr->SiS_LVDSCRT1800x600_1     = SiS300_LVDSCRT1800x600_1;
   SiS_Pr->SiS_LVDSCRT1800x600_1_H   = SiS300_LVDSCRT1800x600_1_H;
   SiS_Pr->SiS_LVDSCRT1800x600_2     = SiS300_LVDSCRT1800x600_2;
   SiS_Pr->SiS_LVDSCRT1800x600_2_H   = SiS300_LVDSCRT1800x600_2_H;
   SiS_Pr->SiS_LVDSCRT11024x768_1    = SiS300_LVDSCRT11024x768_1;
   SiS_Pr->SiS_LVDSCRT11024x768_1_H  = SiS300_LVDSCRT11024x768_1_H;
   SiS_Pr->SiS_LVDSCRT11024x768_2    = SiS300_LVDSCRT11024x768_2;
   SiS_Pr->SiS_LVDSCRT11024x768_2_H  = SiS300_LVDSCRT11024x768_2_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_1   = SiS300_LVDSCRT11280x1024_1;
   SiS_Pr->SiS_LVDSCRT11280x1024_1_H = SiS300_LVDSCRT11280x1024_1_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_2   = SiS300_LVDSCRT11280x1024_2;
   SiS_Pr->SiS_LVDSCRT11280x1024_2_H = SiS300_LVDSCRT11280x1024_2_H;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1     = SiS300_LVDSCRT1XXXxXXX_1;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1_H   = SiS300_LVDSCRT1XXXxXXX_1_H;

   SiS_Pr->SiS_CHTVCRT1UNTSC = SiS300_CHTVCRT1UNTSC;
   SiS_Pr->SiS_CHTVCRT1ONTSC = SiS300_CHTVCRT1ONTSC;
   SiS_Pr->SiS_CHTVCRT1UPAL  = SiS300_CHTVCRT1UPAL;
   SiS_Pr->SiS_CHTVCRT1OPAL  = SiS300_CHTVCRT1OPAL;
   SiS_Pr->SiS_CHTVCRT1SOPAL = SiS300_CHTVCRT1SOPAL;
   SiS_Pr->SiS_CHTVReg_UNTSC = SiS300_CHTVReg_UNTSC;
   SiS_Pr->SiS_CHTVReg_ONTSC = SiS300_CHTVReg_ONTSC;
   SiS_Pr->SiS_CHTVReg_UPAL  = SiS300_CHTVReg_UPAL;
   SiS_Pr->SiS_CHTVReg_OPAL  = SiS300_CHTVReg_OPAL;
   SiS_Pr->SiS_CHTVReg_UPALM = SiS300_CHTVReg_UNTSC;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_OPALM = SiS300_CHTVReg_ONTSC;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_UPALN = SiS300_CHTVReg_UPAL;   /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_OPALN = SiS300_CHTVReg_OPAL;   /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_SOPAL = SiS300_CHTVReg_SOPAL;
d409 34
d480 2
a481 2
   SiS_Pr->SiS_SModeIDTable  = SiS310_SModeIDTable;
   SiS_Pr->SiS_EModeIDTable  = SiS310_EModeIDTable;
d483 3
a485 5
   SiS_Pr->SiS_CRT1Table     = SiS310_CRT1Table;
   if(HwInfo->jChipType >= SIS_760) {
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_760;  /* 760 */
   } else if(HwInfo->jChipType >= SIS_661) {
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_660;  /* 661/741 */
d487 1
a487 1
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_330;  /* 330 */
d489 1
a489 1
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_650;  /* 550, 650, 740 */
d491 1
a491 1
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_315;  /* 315 */
d493 4
a496 3
   SiS_Pr->SiS_MCLKData_1    = SiS310_MCLKData_1;
   SiS_Pr->SiS_VCLKData      = SiS310_VCLKData;
   SiS_Pr->SiS_VBVCLKData    = SiS310_VBVCLKData;
d525 118
a642 90
   SiS_Pr->SiS_PanelDelayTbl     = SiS310_PanelDelayTbl;
   SiS_Pr->SiS_PanelDelayTblLVDS = SiS310_PanelDelayTblLVDS;

   SiS_Pr->SiS_St2LCD1024x768Data   = SiS310_St2LCD1024x768Data;
   SiS_Pr->SiS_ExtLCD1024x768Data   = SiS310_ExtLCD1024x768Data;
   SiS_Pr->SiS_St2LCD1280x1024Data  = SiS310_St2LCD1280x1024Data;
   SiS_Pr->SiS_ExtLCD1280x1024Data  = SiS310_ExtLCD1280x1024Data;

   SiS_Pr->SiS_CRT2Part2_1024x768_1  = SiS310_CRT2Part2_1024x768_1;

   SiS_Pr->SiS_PanelType00_1 = SiS310_PanelType00_1;
   SiS_Pr->SiS_PanelType01_1 = SiS310_PanelType01_1;
   SiS_Pr->SiS_PanelType02_1 = SiS310_PanelType02_1;
   SiS_Pr->SiS_PanelType03_1 = SiS310_PanelType03_1;
   SiS_Pr->SiS_PanelType04_1 = SiS310_PanelType04_1;
   SiS_Pr->SiS_PanelType05_1 = SiS310_PanelType05_1;
   SiS_Pr->SiS_PanelType06_1 = SiS310_PanelType06_1;
   SiS_Pr->SiS_PanelType07_1 = SiS310_PanelType07_1;
   SiS_Pr->SiS_PanelType08_1 = SiS310_PanelType08_1;
   SiS_Pr->SiS_PanelType09_1 = SiS310_PanelType09_1;
   SiS_Pr->SiS_PanelType0a_1 = SiS310_PanelType0a_1;
   SiS_Pr->SiS_PanelType0b_1 = SiS310_PanelType0b_1;
   SiS_Pr->SiS_PanelType0c_1 = SiS310_PanelType0c_1;
   SiS_Pr->SiS_PanelType0d_1 = SiS310_PanelType0d_1;
   SiS_Pr->SiS_PanelType0e_1 = SiS310_PanelType0e_1;
   SiS_Pr->SiS_PanelType0f_1 = SiS310_PanelType0f_1;
   SiS_Pr->SiS_PanelType00_2 = SiS310_PanelType00_2;
   SiS_Pr->SiS_PanelType01_2 = SiS310_PanelType01_2;
   SiS_Pr->SiS_PanelType02_2 = SiS310_PanelType02_2;
   SiS_Pr->SiS_PanelType03_2 = SiS310_PanelType03_2;
   SiS_Pr->SiS_PanelType04_2 = SiS310_PanelType04_2;
   SiS_Pr->SiS_PanelType05_2 = SiS310_PanelType05_2;
   SiS_Pr->SiS_PanelType06_2 = SiS310_PanelType06_2;
   SiS_Pr->SiS_PanelType07_2 = SiS310_PanelType07_2;
   SiS_Pr->SiS_PanelType08_2 = SiS310_PanelType08_2;
   SiS_Pr->SiS_PanelType09_2 = SiS310_PanelType09_2;
   SiS_Pr->SiS_PanelType0a_2 = SiS310_PanelType0a_2;
   SiS_Pr->SiS_PanelType0b_2 = SiS310_PanelType0b_2;
   SiS_Pr->SiS_PanelType0c_2 = SiS310_PanelType0c_2;
   SiS_Pr->SiS_PanelType0d_2 = SiS310_PanelType0d_2;
   SiS_Pr->SiS_PanelType0e_2 = SiS310_PanelType0e_2;
   SiS_Pr->SiS_PanelType0f_2 = SiS310_PanelType0f_2;
   SiS_Pr->SiS_PanelTypeNS_1 = SiS310_PanelTypeNS_1;
   SiS_Pr->SiS_PanelTypeNS_2 = SiS310_PanelTypeNS_2;

   SiS_Pr->SiS_CHTVUPALData  = SiS310_CHTVUPALData;
   SiS_Pr->SiS_CHTVOPALData  = SiS310_CHTVOPALData;
   SiS_Pr->SiS_CHTVUPALMData = SiS310_CHTVUPALMData;
   SiS_Pr->SiS_CHTVOPALMData = SiS310_CHTVOPALMData;
   SiS_Pr->SiS_CHTVUPALNData = SiS310_CHTVUPALNData;
   SiS_Pr->SiS_CHTVOPALNData = SiS310_CHTVOPALNData;
   SiS_Pr->SiS_CHTVSOPALData = SiS310_CHTVSOPALData;

   SiS_Pr->SiS_LVDSCRT1800x600_1     = SiS310_LVDSCRT1800x600_1;
   SiS_Pr->SiS_LVDSCRT11024x768_1    = SiS310_LVDSCRT11024x768_1;
   SiS_Pr->SiS_LVDSCRT11280x1024_1   = SiS310_LVDSCRT11280x1024_1;
   SiS_Pr->SiS_LVDSCRT11400x1050_1   = SiS310_LVDSCRT11400x1050_1;
   SiS_Pr->SiS_LVDSCRT11600x1200_1   = SiS310_LVDSCRT11600x1200_1;
   SiS_Pr->SiS_LVDSCRT1800x600_1_H   = SiS310_LVDSCRT1800x600_1_H;
   SiS_Pr->SiS_LVDSCRT11024x768_1_H  = SiS310_LVDSCRT11024x768_1_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_1_H = SiS310_LVDSCRT11280x1024_1_H;
   SiS_Pr->SiS_LVDSCRT11400x1050_1_H = SiS310_LVDSCRT11400x1050_1_H;
   SiS_Pr->SiS_LVDSCRT11600x1200_1_H = SiS310_LVDSCRT11600x1200_1_H;
   SiS_Pr->SiS_LVDSCRT1800x600_2     = SiS310_LVDSCRT1800x600_2;
   SiS_Pr->SiS_LVDSCRT11024x768_2    = SiS310_LVDSCRT11024x768_2;
   SiS_Pr->SiS_LVDSCRT11280x1024_2   = SiS310_LVDSCRT11280x1024_2;
   SiS_Pr->SiS_LVDSCRT11400x1050_2   = SiS310_LVDSCRT11400x1050_2;
   SiS_Pr->SiS_LVDSCRT11600x1200_2   = SiS310_LVDSCRT11600x1200_2;
   SiS_Pr->SiS_LVDSCRT1800x600_2_H   = SiS310_LVDSCRT1800x600_2_H;
   SiS_Pr->SiS_LVDSCRT11024x768_2_H  = SiS310_LVDSCRT11024x768_2_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_2_H = SiS310_LVDSCRT11280x1024_2_H;
   SiS_Pr->SiS_LVDSCRT11400x1050_2_H = SiS310_LVDSCRT11400x1050_2_H;
   SiS_Pr->SiS_LVDSCRT11600x1200_2_H = SiS310_LVDSCRT11600x1200_2_H;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1     = SiS310_LVDSCRT1XXXxXXX_1;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1_H   = SiS310_LVDSCRT1XXXxXXX_1_H;
   SiS_Pr->SiS_CHTVCRT1UNTSC         = SiS310_CHTVCRT1UNTSC;
   SiS_Pr->SiS_CHTVCRT1ONTSC         = SiS310_CHTVCRT1ONTSC;
   SiS_Pr->SiS_CHTVCRT1UPAL          = SiS310_CHTVCRT1UPAL;
   SiS_Pr->SiS_CHTVCRT1OPAL          = SiS310_CHTVCRT1OPAL;
   SiS_Pr->SiS_CHTVCRT1SOPAL         = SiS310_CHTVCRT1OPAL;

   SiS_Pr->SiS_CHTVReg_UNTSC = SiS310_CHTVReg_UNTSC;
   SiS_Pr->SiS_CHTVReg_ONTSC = SiS310_CHTVReg_ONTSC;
   SiS_Pr->SiS_CHTVReg_UPAL  = SiS310_CHTVReg_UPAL;
   SiS_Pr->SiS_CHTVReg_OPAL  = SiS310_CHTVReg_OPAL;
   SiS_Pr->SiS_CHTVReg_UPALM = SiS310_CHTVReg_UPALM;
   SiS_Pr->SiS_CHTVReg_OPALM = SiS310_CHTVReg_OPALM;
   SiS_Pr->SiS_CHTVReg_UPALN = SiS310_CHTVReg_UPALN;
   SiS_Pr->SiS_CHTVReg_OPALN = SiS310_CHTVReg_OPALN;
   SiS_Pr->SiS_CHTVReg_SOPAL = SiS310_CHTVReg_OPAL;
d651 1
a651 1
   SiS_Pr->SiS_CHTVVCLKOPALN = SiS310_CHTVVCLKOPALN;
d653 20
d713 1
a713 2
SiS_GetModeID(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay,
              int Depth, BOOLEAN FSTN, int LCDwidth, int LCDheight)
d781 2
a782 16
          if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
	  else if(VDisplay == 800) {
	     if(VGAEngine == SIS_315_VGA) {
	        if((VBFlags & CRT1_LCDA) && (LCDwidth == 1280) && (LCDheight == 800)) {
	           ModeIndex = ModeIndex_1280x800[Depth];
	        } else if(!(VBFlags & CRT1_LCDA)) {
	           ModeIndex = ModeIndex_1280x800[Depth];
	        }
	     }
	  } else if(VDisplay == 720) {
	     if((VBFlags & CRT1_LCDA) && (LCDwidth == 1280) && (LCDheight == 720)) {
	        ModeIndex = ModeIndex_1280x720[Depth];
	     } else if(!(VBFlags & CRT1_LCDA)) {
	        ModeIndex = ModeIndex_1280x720[Depth];
	     }
	  } else if(!(VBFlags & CRT1_LCDA)) {
d784 1
d804 1
a804 9
	     if(VDisplay == 1050) {
	        if((VBFlags & CRT1_LCDA) &&
	           (((LCDwidth == 1400) && (LCDheight == 1050)) ||
		    ((LCDwidth == 1600) && (LCDheight == 1200)))) {
	           ModeIndex = ModeIndex_1400x1050[Depth];
	        } else if(!(VBFlags & CRT1_LCDA)) {
	           ModeIndex = ModeIndex_1400x1050[Depth];
	        }
	     }
a809 5
     case 1680:
          if(VGAEngine == SIS_315_VGA) {
             if(VDisplay == 1050) ModeIndex = ModeIndex_1680x1050[Depth];
	  }
          break;
d854 1
a854 3
	        if(!((VGAEngine == SIS_300_VGA) && (VBFlags & VB_TRUMPION))) {
          	   if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
		}
d859 1
a859 1
	        if(!((VGAEngine == SIS_300_VGA) && (VBFlags & VB_TRUMPION))) {
d861 1
a861 3
		      if(VDisplay == 384) {
		         ModeIndex = ModeIndex_512x384[Depth];
		      }
a900 3
		if((VDisplay == 800) && (LCDheight == 800)) {
		   ModeIndex = ModeIndex_310_1280x768[Depth];
		}
d952 1
a952 1
		if((LCDheight == 768) || (LCDwidth == 1680) ||
a964 12
	     } else if(VGAEngine == SIS_315_VGA) {
	        if(VDisplay == 800) {
		   if((LCDheight == 800) || (LCDwidth == 1680) ||
		      ((LCDheight == 1024) && (VBFlags & (VB_301|VB_301B|VB_301C|VB_302B)))) {
		      ModeIndex = ModeIndex_1280x800[Depth];
		   }
		} else if(VDisplay == 720) {
		   if((LCDheight == 720) || (LCDwidth == 1680) ||
		      ((LCDheight == 1024) && (VBFlags & (VB_301|VB_301B|VB_301C|VB_302B)))) {
		      ModeIndex = ModeIndex_1280x720[Depth];
		   }
		}
d970 2
a971 2
		   if((LCDwidth == 1400) || (LCDwidth == 1600) || (LCDwidth == 1680)) {
		      ModeIndex = ModeIndex_1400x1050[Depth];
d977 2
a978 11
	     if(VGAEngine == SIS_315_VGA) {
	        if(VBFlags & (VB_301C | VB_302B | VB_302LV | VB_302ELV)) {
	           if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
		}
	     }
	     break;
	case 1680:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VBFlags & (VB_301C | VB_302B | VB_302LV | VB_302ELV)) {
	           if(VDisplay == 1050) ModeIndex = ModeIndex_1680x1050[Depth];
		}
d1027 2
a1028 2
	     if( ((VBFlags & TV_YPBPR) && (VBFlags & (TV_YPBPR750P | TV_YPBPR1080I))) ||
	         (VBFlags & TV_HIVISION) 					      ||
d1075 3
a1077 10
	     if(VDisplay == 720) {
	        if((VBFlags & TV_HIVISION) ||
		   ((VBFlags & TV_YPBPR) && (VBFlags & (TV_YPBPR1080I | TV_YPBPR750P)))) {
	           ModeIndex = ModeIndex_1280x720[Depth];
		}
	     } else if(VDisplay == 1024) {
	        if((VBFlags & TV_HIVISION) ||
		   ((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I))) {
	           ModeIndex = ModeIndex_1280x1024[Depth];
		}
a1143 1
		else if(VDisplay == 800)    ModeIndex = ModeIndex_1280x800[Depth];
a1160 7
	case 1680:
		if(VGAEngine == SIS_315_VGA) {
		   if(VBFlags & (VB_301B|VB_301C|VB_302B)) {
	              if(VDisplay == 1050) ModeIndex = ModeIndex_1680x1050[Depth];
		   }
		}
		break;
d1258 1
a1258 1
   SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x01,0xDF);
d1264 1
a1264 1
   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x01,0x20);
a1352 4
   if(HwInfo->jChipType == SIS_760) {
      temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x78);
      if(temp1 & 0x30) SiS_Pr->SiS_SysFlags |= SF_760UMA;
   }
a1424 4
   /* Check for SiS30x first */
   temp = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x00);
   if((temp == 1) || (temp == 2)) return;

d1430 3
d1435 2
a1436 2
      	if((temp >= 2) && (temp <= 5)) 	SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)   		SiS_Pr->SiS_IF_DEF_TRUMPION = 1;
d1451 2
a1452 2
      	if((temp >= 2) && (temp <= 3)) 	SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)  			SiS_Pr->SiS_IF_DEF_CH70xx = 2;
d1460 3
a1462 3
      	if((temp >= 2) && (temp <= 3)) 	SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)  			SiS_Pr->SiS_IF_DEF_CH70xx = 2;
	if(temp == 4)  			SiS_Pr->SiS_IF_DEF_CONEX = 1;  /* Not yet supported */
a1489 28
BOOLEAN
SiSDetermineROMLayout661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
   USHORT romversoffs, romvmaj = 1, romvmin = 0;

   if(HwInfo->jChipType >= SIS_661) {
      romversoffs = ROMAddr[0x16] | (ROMAddr[0x17] << 8);
      if(romversoffs) {
	 if((ROMAddr[romversoffs+1] == '.') || (ROMAddr[romversoffs+4] == '.')) {
	    romvmaj = ROMAddr[romversoffs] - '0';
	    romvmin = ((ROMAddr[romversoffs+2] -'0') * 10) + (ROMAddr[romversoffs+3] - '0');
	 }
      }
      if((romvmaj != 0) || (romvmin >= 92)) {
	 return TRUE;
      }
   } else if(IS_SIS650740) {
      if((ROMAddr[0x1a] == 'N') &&
         (ROMAddr[0x1b] == 'e') &&
         (ROMAddr[0x1c] == 'w') &&
         (ROMAddr[0x1d] == 'V')) {
	 return TRUE;
      }
   }
   return FALSE;
}

a1493 4
   USHORT romptr = 0;

   SiS_Pr->SiS_UseROM = FALSE;
   SiS_Pr->SiS_ROMNew = FALSE;
d1496 9
a1504 6
      if(HwInfo->jChipType == SIS_300) {
         /* 300: We check if the code starts below 0x220 by
	  * checking the jmp instruction at the beginning
	  * of the BIOS image.
	  */
	 if((ROMAddr[3] == 0xe9) && ((ROMAddr[5] << 8) | ROMAddr[4]) > 0x21a)
d1506 2
d1509 11
a1519 3
	 /* Sony's VAIO BIOS 1.09 follows the standard, so perhaps
	  * the others do as well
	  */
d1521 1
a1524 11
	 if((SiS_Pr->SiS_ROMNew = SiSDetermineROMLayout661(SiS_Pr, HwInfo))) {
	    /* Find out about LCD data table entry size */
	    if((romptr = SISGETROMW(0x0102))) {
	       if(ROMAddr[romptr + (32 * 16)] == 0xff)
	          SiS_Pr->SiS661LCD2TableSize = 32;
	       else if(ROMAddr[romptr + (34 * 16)] == 0xff)
	          SiS_Pr->SiS661LCD2TableSize = 34;
	       else if(ROMAddr[romptr + (36 * 16)] == 0xff)
	          SiS_Pr->SiS661LCD2TableSize = 36;
	    }
	 }
d1526 2
a1527 1
   }
d1612 1
a1612 2
  if((SiS_Pr->SiS_IF_DEF_LVDS) || (SiS_Pr->SiS_IF_DEF_CONEX))
     return;
d1623 1
a1630 2
     } else {
        SiS_Pr->SiS_VBType = VB_SIS301;
d1634 11
a1644 6
     if(rev >= 0xE0) {
	flag = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x39);
	if(flag == 0xff) SiS_Pr->SiS_VBType = VB_SIS302LV;
	else 	 	 SiS_Pr->SiS_VBType = VB_SIS302ELV;
     } else if(rev >= 0xD0) {
	SiS_Pr->SiS_VBType = VB_SIS301LV;
d1700 2
a1705 14

  case SIS_660:
  case SIS_760:
        counter = (SiS_GetReg(SiS_Pr->SiS_P3c4,0x79) & 0xf0) >> 4;
	if(counter) {
	   AdapterMemorySize = 1 << counter;
      	   AdapterMemorySize *= (1024*1024);
	}
	counter = SiS_GetReg(SiS_Pr->SiS_P3c4,0x78) & 0x30;
	if(counter) {
	   if(counter == 0x10) AdapterMemorySize += (32 * 1024 * 1024);
	   else		       AdapterMemorySize += (64 * 1024 * 1024);
	}
	break;
d1773 1
a1773 4
     if(HwInfo->jChipType >= SIS_660) {
        /* data = SiS_GetReg(SiS_Pr->SiS_P3d4,0x78) & 0x07; */
	data = ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x78) & 0xc0) >> 6);
     } else if(HwInfo->jChipType >= SIS_661) {
a1946 37
/*            HELPER: ENABLE CRT1            */
/*********************************************/

static void
SiS_SetupCR5x(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(IS_SIS650) {
	 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	 if(IS_SIS651) SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x51,0x20);
	 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
      } else if(IS_SIS661741660760) {
         SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x61,0xf7);
	 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
	 if(!SiS_Pr->SiS_ROMNew) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x3a,0xef);
	 }
      }
   }
}

static void
SiS_HandleCRT1(SiS_Private *SiS_Pr)
{
  SiS_SetRegAND(SiS_Pr->SiS_P3d4,SiS_Pr->SiS_MyCR63,0xbf);
#if 0
  if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x15) & 0x01)) {
     if((SiS_GetReg(SiS_Pr->SiS_P3c4,0x15) & 0x0a) ||
        (SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x01)) {
        SiS_SetRegOR(SiS_Pr->SiS_P3d4,SiS_Pr->SiS_MyCR63,0x40);
     }
  }
#endif
}

/*********************************************/
d1980 1
a1980 1
  USHORT xres, temp, colordepth, infoflag;
d1984 1
a1984 1
     xres = SiS_Pr->CHDisplay;
d1987 2
a1988 1
     xres = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes;
a1992 1
  temp = xres / 16;
d1994 1
d1996 6
a2001 1
  if(xres % 16) {
d2106 3
a2108 9
  if(HwInfo->jChipType >= SIS_661) {
     SiS_SetupCR5x(SiS_Pr, HwInfo);
     for(i = 0x13; i <= 0x14; i++) {
        CRTCdata = SiS_Pr->SiS_StandTable[StandTableIndex].CRTC[i];
        SiS_SetReg(SiS_Pr->SiS_P3d4,i,CRTCdata);
     }
  } else if( ( (HwInfo->jChipType == SIS_630) ||
               (HwInfo->jChipType == SIS_730) )  &&
             (HwInfo->jChipRevision >= 0x30) ) {       	   /* for 630S0 */
d2209 1
a2209 1
SiS_ClearExt1Regs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo)
a2218 5
     if(ModeNo <= 0x13) {
        if(ModeNo == 0x06 || ModeNo >= 0x0e) {
	   SiS_SetReg(SiS_Pr->SiS_P3c4,0x0e,0x20);
	}
     }
d2282 39
d2328 4
d2367 59
a2425 1
     index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;
d2427 12
a2438 12
     for(i=0,j=0;i<=7;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
     }
     for(j=0x10;i<=10;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
     }
     for(j=0x15;i<=12;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
     }
     for(j=0x0A;i<=15;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3c4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
     }
d2440 2
a2441 2
     temp = SiS_Pr->SiS_CRT1Table[index].CR[16] & 0xE0;
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x0E,temp);
d2443 3
a2445 3
     temp = ((SiS_Pr->SiS_CRT1Table[index].CR[16]) & 0x01) << 5;
     if(modeflag & DoubleScanMode)  temp |= 0x80;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0x5F,temp);
d2447 1
d2485 1
a2485 1
   if(DisplayUnit & 0xff) temp++;
d2920 1
a2920 2
  /* disable auto-threshold */
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x3D,0xFE);
d2928 4
a2931 4
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0xAE);
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
  if(ModeNo > 0x13) {
     if(HwInfo->jChipType >= SIS_661) {
d2934 3
a2936 1
	   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x3D,0x01);
d2938 4
a2941 2
     } else {
        if((!(modeflag & DoubleScanMode)) || (!(modeflag & HalfDCLK))) {
d2943 1
d2945 7
a2951 1
	}
d2966 2
a2967 1
  USHORT data=0, VCLK=0, index=0;
d2969 2
a2970 1
  if(ModeNo > 0x13) {
d2975 1
a2975 1
	                      RefreshRateTableIndex,HwInfo);
d2980 1
a2980 1
  if(HwInfo->jChipType < SIS_315H) {
d2982 3
a2984 2
     if(VCLK > 150) data |= 0x80;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0x7B,data);
d2986 3
a2988 3
     data = 0x00;
     if(VCLK >= 150) data |= 0x08;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x32,0xF7,data);
d2990 1
a2990 1
  } else {
d2992 1
d3001 4
a3004 2
  /* DAC speed */
  if(HwInfo->jChipType >= SIS_661) {
d3006 3
a3008 1
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xE8,0x10);
d3010 2
d3013 3
a3015 17

     data = 0x03;
     if((VCLK >= 135) && (VCLK < 160))      data = 0x02;
     else if((VCLK >= 160) && (VCLK < 260)) data = 0x01;
     else if(VCLK >= 260)                   data = 0x00;

     if(HwInfo->jChipType == SIS_540) {
        if((VCLK == 203) || (VCLK < 234))   data = 0x02;
     }

     if(HwInfo->jChipType < SIS_315H) {
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xFC,data);
     } else {
        if(HwInfo->jChipType > SIS_315PRO) {
           if(ModeNo > 0x13) data &= 0xfc;
        }
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xF8,data);
d3017 1
a3017 1

d3025 2
a3026 1
  USHORT data,infoflag=0,modeflag;
d3029 1
a3029 1
  USHORT data2,data3;
d3031 3
a3033 1
  UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
a3038 1
     xres = SiS_Pr->CHDisplay;
a3039 1
     resindex = SiS_GetResInfo(SiS_Pr,ModeNo,ModeIdIndex);
d3043 5
a3047 1
	xres = SiS_Pr->SiS_ModeResInfo[resindex].HTotal;
a3049 1
	xres = SiS_Pr->SiS_StResInfo[resindex].HTotal;
d3056 4
a3059 1
  data = 0;
d3062 21
a3082 2
        data |= 0x02;
        data |= ((SiS_Pr->SiS_ModeType - ModeVGA) << 2);
a3083 1
     if(infoflag & InterlaceMode) data |= 0x20;
a3084 1
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x06,0xC0,data);
d3087 1
a3087 1
     data = 0;
d3089 1
a3089 1
        if(xres <= 800)       data = 0x0020;
d3091 1
a3091 1
        else                  data = 0x0048;
d3093 1
a3093 1
     SiS_SetReg(SiS_Pr->SiS_P3d4,0x19,(data & 0xFF));
a3100 2
  data = 0;
  if(modeflag & LineCompareOff) data = 0x08;
d3102 5
a3106 1
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xF7,data);
d3108 5
a3112 1
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xB7,data);
a3119 4
  if(HwInfo->jChipType >= SIS_661) {
     SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x31,0xfb);
  }

d3121 1
a3122 1

d3141 1
d3143 2
a3144 3
  } else if( (HwInfo->jChipType == SIS_330) ||
             ((HwInfo->jChipType == SIS_760) && (SiS_Pr->SiS_SysFlags & SF_760UMA))) {

d3146 1
a3146 7
     if(HwInfo->jChipType == SIS_330) {
        data = SiS_Pr->SiS_SR15[2][data];
     } else {
        if(SiS_Pr->SiS_ROMNew) 	    data = ROMAddr[0xf6];
        else if(SiS_Pr->SiS_UseROM) data = ROMAddr[0x100 + data];
	else                        data = 0xba;
     }
d3159 3
a3161 1
	if(data3) data2 *= data3;
d3167 10
a3176 22
	if(HwInfo->jChipType == SIS_330) {
	   if(SiS_Pr->SiS_ModeType != Mode16Bpp) {
              if     (data2 >= 0x19c) data = 0xba;
	      else if(data2 >= 0x140) data = 0x7a;
	      else if(data2 >= 0x101) data = 0x3a;
	      else if(data2 >= 0xf5)  data = 0x32;
	      else if(data2 >= 0xe2)  data = 0x2a;
	      else if(data2 >= 0xc4)  data = 0x22;
	      else if(data2 >= 0xac)  data = 0x1a;
	      else if(data2 >= 0x9e)  data = 0x12;
	      else if(data2 >= 0x8e)  data = 0x0a;
	      else                    data = 0x02;
	   } else {
	      if(data2 >= 0x127)      data = 0xba;
	      else                    data = 0x7a;
	   }
	} else {
	   if     (data2 >= 0x190) data = 0xba;
	   else if(data2 >= 0xff)  data = 0x7a;
	   else if(data2 >= 0xd3)  data = 0x3a;
	   else if(data2 >= 0xa9)  data = 0x1a;
	   else if(data2 >= 0x93)  data = 0x0a;
d3178 6
a3183 3
	}
     }
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x17,data);
d3205 34
d3413 1
a3413 1
  SiS_ClearExt1Regs(SiS_Pr, HwInfo, ModeNo);
a3477 2


d3479 1
a3479 1
/*         HELPER: RESET VIDEO BRIDGE        */
d3483 1
a3483 1
SiS_ResetVB(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d3485 9
a3493 16
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
   USHORT temp;

   if(SiS_Pr->SiS_UseROM) {
      if(HwInfo->jChipType < SIS_330) {
         temp = ROMAddr[VB310Data_1_2_Offset] | 0x40;
	 if(SiS_Pr->SiS_ROMNew) temp = ROMAddr[0x80] | 0x40;
         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
      } else if(HwInfo->jChipType >= SIS_661) {
         temp = ROMAddr[0x7e];
         if(SiS_Pr->SiS_ROMNew) temp = ROMAddr[0x80];
         if(HwInfo->jChipType >= SIS_660)                  temp |= 0x40;
         else if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x7b) >= 100) temp |= 0x40;
         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
      }
   }
d3582 1
d3584 1
a3588 1
   ULONG   temp;
d3602 1
a3602 1
#if defined(LINUX_XF86) && (defined(i386) || defined(__i386) || defined(__i386__) || defined(__AMD64__))
d3640 11
a3650 1
         SiS_ResetVB(SiS_Pr, HwInfo);
d3652 1
d3654 1
d3675 21
a3695 1
      SiS_SetupCR5x(SiS_Pr, HwInfo);
d3739 1
a3739 1
         if(!SiS_Pr->SiS_ROMNew) {
d3828 1
d3830 1
a3866 1
#if (defined(i386) || defined(__i386) || defined(__i386__) || defined(__AMD64__))
a3867 3
#else
   SiS_Pr->SiS_VGAINFO = 0x11;
#endif
d3929 13
a3941 1
	 SiS_ResetVB(SiS_Pr, HwInfo);
d3943 1
d3945 1
d3987 1
a3987 1
         if(!SiS_Pr->SiS_ROMNew) {
a4056 1
#if (defined(i386) || defined(__i386) || defined(__i386__) || defined(__AMD64__))
a4057 3
#else
   SiS_Pr->SiS_VGAINFO = 0x11;
#endif
d4095 21
a4115 1
      SiS_SetupCR5x(SiS_Pr, HwInfo);
a4283 175
#ifndef GETBITSTR
#define BITMASK(h,l)    	(((unsigned)(1U << ((h)-(l)+1))-1)<<(l))
#define GENMASK(mask)   	BITMASK(1?mask,0?mask)
#define GETBITS(var,mask)   	(((var) & GENMASK(mask)) >> (0?mask))
#define GETBITSTR(val,from,to)  ((GETBITS(val,from)) << (0?to))
#endif

static void
SiS_CalcCRRegisters(SiS_Private *SiS_Pr, int depth)
{
   SiS_Pr->CCRT1CRTC[0]  =  ((SiS_Pr->CHTotal >> 3) - 5) & 0xff;		/* CR0 */
   SiS_Pr->CCRT1CRTC[1]  =  (SiS_Pr->CHDisplay >> 3) - 1;			/* CR1 */
   SiS_Pr->CCRT1CRTC[2]  =  (SiS_Pr->CHBlankStart >> 3) - 1;			/* CR2 */
   SiS_Pr->CCRT1CRTC[3]  =  (((SiS_Pr->CHBlankEnd >> 3) - 1) & 0x1F) | 0x80;	/* CR3 */
   SiS_Pr->CCRT1CRTC[4]  =  (SiS_Pr->CHSyncStart >> 3) + 3;			/* CR4 */
   SiS_Pr->CCRT1CRTC[5]  =  ((((SiS_Pr->CHBlankEnd >> 3) - 1) & 0x20) << 2) |	/* CR5 */
       			    (((SiS_Pr->CHSyncEnd >> 3) + 3) & 0x1F);

   SiS_Pr->CCRT1CRTC[6]  =  (SiS_Pr->CVTotal - 2) & 0xFF;			/* CR6 */
   SiS_Pr->CCRT1CRTC[7]  =  (((SiS_Pr->CVTotal - 2) & 0x100) >> 8)		/* CR7 */
 	 		  | (((SiS_Pr->CVDisplay - 1) & 0x100) >> 7)
	 		  | ((SiS_Pr->CVSyncStart & 0x100) >> 6)
	 	  	  | (((SiS_Pr->CVBlankStart - 1) & 0x100) >> 5)
			  | 0x10
	 		  | (((SiS_Pr->CVTotal - 2) & 0x200)   >> 4)
	 		  | (((SiS_Pr->CVDisplay - 1) & 0x200) >> 3)
	 		  | ((SiS_Pr->CVSyncStart & 0x200) >> 2);

   SiS_Pr->CCRT1CRTC[16] = ((((SiS_Pr->CVBlankStart - 1) & 0x200) >> 4) >> 5); 	/* CR9 */

   if(depth != 8) {
      if(SiS_Pr->CHDisplay >= 1600)      SiS_Pr->CCRT1CRTC[16] |= 0x60;		/* SRE */
      else if(SiS_Pr->CHDisplay >= 640)  SiS_Pr->CCRT1CRTC[16] |= 0x40;
   }

#if 0
   if (mode->VScan >= 32)
	regp->CRTC[9] |= 0x1F;
   else if (mode->VScan > 1)
	regp->CRTC[9] |= mode->VScan - 1;
#endif

   SiS_Pr->CCRT1CRTC[8] =  (SiS_Pr->CVSyncStart     ) & 0xFF;			/* CR10 */
   SiS_Pr->CCRT1CRTC[9] =  ((SiS_Pr->CVSyncEnd      ) & 0x0F) | 0x80;		/* CR11 */
   SiS_Pr->CCRT1CRTC[10] = (SiS_Pr->CVDisplay    - 1) & 0xFF;			/* CR12 */
   SiS_Pr->CCRT1CRTC[11] = (SiS_Pr->CVBlankStart - 1) & 0xFF;			/* CR15 */
   SiS_Pr->CCRT1CRTC[12] = (SiS_Pr->CVBlankEnd   - 1) & 0xFF;			/* CR16 */

   SiS_Pr->CCRT1CRTC[13] =							/* SRA */
                        GETBITSTR((SiS_Pr->CVTotal     -2), 10:10, 0:0) |
                        GETBITSTR((SiS_Pr->CVDisplay   -1), 10:10, 1:1) |
                        GETBITSTR((SiS_Pr->CVBlankStart-1), 10:10, 2:2) |
                        GETBITSTR((SiS_Pr->CVSyncStart   ), 10:10, 3:3) |
                        GETBITSTR((SiS_Pr->CVBlankEnd  -1),   8:8, 4:4) |
                        GETBITSTR((SiS_Pr->CVSyncEnd     ),   4:4, 5:5) ;

   SiS_Pr->CCRT1CRTC[14] =							/* SRB */
                        GETBITSTR((SiS_Pr->CHTotal      >> 3) - 5, 9:8, 1:0) |
                        GETBITSTR((SiS_Pr->CHDisplay    >> 3) - 1, 9:8, 3:2) |
                        GETBITSTR((SiS_Pr->CHBlankStart >> 3) - 1, 9:8, 5:4) |
                        GETBITSTR((SiS_Pr->CHSyncStart  >> 3) + 3, 9:8, 7:6) ;


   SiS_Pr->CCRT1CRTC[15] =							/* SRC */
                        GETBITSTR((SiS_Pr->CHBlankEnd >> 3) - 1, 7:6, 1:0) |
                        GETBITSTR((SiS_Pr->CHSyncEnd  >> 3) + 3, 5:5, 2:2) ;
}

void
SiS_CalcLCDACRT1Timing(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex)
{
   USHORT modeflag, tempax, tempbx, VGAHDE = SiS_Pr->SiS_VGAHDE;
   int i,j;

   /* 1:1 data: use data set by setcrt1crtc() */
   if(SiS_Pr->SiS_LCDInfo & LCDPass11) return;

   if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
   } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
   } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
   }

   if(modeflag & HalfDCLK) VGAHDE >>= 1;

   SiS_Pr->CHDisplay = VGAHDE;
   SiS_Pr->CHBlankStart = VGAHDE;

   SiS_Pr->CVDisplay = SiS_Pr->SiS_VGAVDE;
   SiS_Pr->CVBlankStart = SiS_Pr->SiS_VGAVDE;

   tempbx = SiS_Pr->PanelHT - SiS_Pr->PanelXRes;
   tempax = SiS_Pr->SiS_VGAHDE;  /* not /2 ! */
   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
      tempax = SiS_Pr->PanelXRes;
   }
   tempbx += tempax;
   if(modeflag & HalfDCLK) tempbx -= VGAHDE;
   SiS_Pr->CHTotal = SiS_Pr->CHBlankEnd = tempbx;

   tempax = VGAHDE;
   tempbx = SiS_Pr->CHTotal;
   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
      tempbx = SiS_Pr->PanelXRes;
      if(modeflag & HalfDCLK) tempbx >>= 1;
      tempax += ((tempbx - tempax) >> 1);
   }

   tempax += SiS_Pr->PanelHRS;
   SiS_Pr->CHSyncStart = tempax;
   tempax += SiS_Pr->PanelHRE;
   SiS_Pr->CHSyncEnd = tempax;

   tempbx = SiS_Pr->PanelVT - SiS_Pr->PanelYRes;
   tempax = SiS_Pr->SiS_VGAVDE;
   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
      tempax = SiS_Pr->PanelYRes;
   }
   SiS_Pr->CVTotal = SiS_Pr->CVBlankEnd = tempbx + tempax;

   tempax = SiS_Pr->SiS_VGAVDE;
   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
      tempax += (SiS_Pr->PanelYRes - tempax) >> 1;
   }
   tempax += SiS_Pr->PanelVRS;
   SiS_Pr->CVSyncStart = tempax;
   tempax += SiS_Pr->PanelVRE;
   SiS_Pr->CVSyncEnd = tempax;

   SiS_CalcCRRegisters(SiS_Pr, 8);
   SiS_Pr->CCRT1CRTC[16] &= ~0xE0;

   SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);

   for(i=0,j=0;i<=7;i++,j++) {
      SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
   }
   for(j=0x10;i<=10;i++,j++) {
      SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
   }
   for(j=0x15;i<=12;i++,j++) {
      SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
   }
   for(j=0x0A;i<=15;i++,j++) {
      SiS_SetReg(SiS_Pr->SiS_P3c4,j,SiS_Pr->CCRT1CRTC[i]);
   }

   tempax = SiS_Pr->CCRT1CRTC[16] & 0xE0;
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0x1F,tempax);

   tempax = (SiS_Pr->CCRT1CRTC[16] & 0x01) << 5;
   if(modeflag & DoubleScanMode) tempax |= 0x80;
   SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0x5F,tempax);

#ifdef TWDEBUG
   xf86DrvMsg(0, X_INFO, "%d %d %d %d  %d %d %d %d  (%d %d %d %d)\n",
       	SiS_Pr->CHDisplay, SiS_Pr->CHSyncStart, SiS_Pr->CHSyncEnd, SiS_Pr->CHTotal,
	SiS_Pr->CVDisplay, SiS_Pr->CVSyncStart, SiS_Pr->CVSyncEnd, SiS_Pr->CVTotal,
	SiS_Pr->CHBlankStart, SiS_Pr->CHBlankEnd, SiS_Pr->CVBlankStart, SiS_Pr->CVBlankEnd);

   xf86DrvMsg(0, X_INFO, " {{0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,\n",
   	SiS_Pr->CCRT1CRTC[0], SiS_Pr->CCRT1CRTC[1],
	SiS_Pr->CCRT1CRTC[2], SiS_Pr->CCRT1CRTC[3],
	SiS_Pr->CCRT1CRTC[4], SiS_Pr->CCRT1CRTC[5],
	SiS_Pr->CCRT1CRTC[6], SiS_Pr->CCRT1CRTC[7]);
   xf86DrvMsg(0, X_INFO, "   0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,\n",
   	SiS_Pr->CCRT1CRTC[8], SiS_Pr->CCRT1CRTC[9],
	SiS_Pr->CCRT1CRTC[10], SiS_Pr->CCRT1CRTC[11],
	SiS_Pr->CCRT1CRTC[12], SiS_Pr->CCRT1CRTC[13],
	SiS_Pr->CCRT1CRTC[14], SiS_Pr->CCRT1CRTC[15]);
   xf86DrvMsg(0, X_INFO, "   0x%02x}},\n", SiS_Pr->CCRT1CRTC[16]);
#endif
}
a4289 1

d4370 51
a4420 1
   SiS_CalcCRRegisters(pSiS->SiS_Pr, depth);
d4423 14
a4436 7
   case 8:  pSiS->SiS_Pr->CModeFlag |= 0x223b; break;
   case 16: pSiS->SiS_Pr->CModeFlag |= 0x227d; break;
   case 32: pSiS->SiS_Pr->CModeFlag |= 0x22ff; break;
   default: return 0;
   }

   if(pSiS->SiS_Pr->CFlags & V_DBLSCAN)
d4460 1
a4460 1
   xf86DrvMsg(0, X_INFO, "Custom mode %dx%d:\n",
d4465 8
a4472 4
   	pSiS->SiS_Pr->CCRT1CRTC[0], pSiS->SiS_Pr->CCRT1CRTC[1],
	pSiS->SiS_Pr->CCRT1CRTC[2], pSiS->SiS_Pr->CCRT1CRTC[3],
	pSiS->SiS_Pr->CCRT1CRTC[4], pSiS->SiS_Pr->CCRT1CRTC[5],
	pSiS->SiS_Pr->CCRT1CRTC[6], pSiS->SiS_Pr->CCRT1CRTC[7]);
d4474 8
a4481 4
   	pSiS->SiS_Pr->CCRT1CRTC[8], pSiS->SiS_Pr->CCRT1CRTC[9],
	pSiS->SiS_Pr->CCRT1CRTC[10], pSiS->SiS_Pr->CCRT1CRTC[11],
	pSiS->SiS_Pr->CCRT1CRTC[12], pSiS->SiS_Pr->CCRT1CRTC[13],
	pSiS->SiS_Pr->CCRT1CRTC[14], pSiS->SiS_Pr->CCRT1CRTC[15]);
d4484 3
a4486 1
   	pSiS->SiS_Pr->CSR2B, pSiS->SiS_Pr->CSR2C, pSiS->SiS_Pr->CSRClock);
d4603 1
a4603 1
      E = HDE + 1;  /* 0x80 0x64 */
d4611 1
a4611 1
      F = HRS - E - 3;  /* 0x06 0x06 */
d4641 1
a4641 1
      C = (temp > 0) ? temp : (temp + 64); /* 0x0b 0x0b */
d5173 1
a5173 1

@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/sis/init.c,v 1.46 2004/01/24 21:29:20 twini Exp $ */
d3 1
a3 3
 * Mode initializing code (CRT1 section) for
 * for SiS 300/305/540/630/730 and
 *     SiS 315/550/650/M650/651/661FX/M661FX/740/741/M741/330/660/M660/760/M760
d6 3
a8 1
 * Copyright (C) 2001-2004 by Thomas Winischhofer, Vienna, Austria
d10 11
a20 2
 * If distributed as part of the Linux kernel, the following license terms
 * apply:
d22 9
a30 13
 * * This program is free software; you can redistribute it and/or modify
 * * it under the terms of the GNU General Public License as published by
 * * the Free Software Foundation; either version 2 of the named License,
 * * or any later version.
 * *
 * * This program is distributed in the hope that it will be useful,
 * * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * * GNU General Public License for more details.
 * *
 * * You should have received a copy of the GNU General Public License
 * * along with this program; if not, write to the Free Software
 * * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
d32 7
a38 31
 * Otherwise, the following license terms apply:
 *
 * * Redistribution and use in source and binary forms, with or without
 * * modification, are permitted provided that the following conditions
 * * are met:
 * * 1) Redistributions of source code must retain the above copyright
 * *    notice, this list of conditions and the following disclaimer.
 * * 2) Redistributions in binary form must reproduce the above copyright
 * *    notice, this list of conditions and the following disclaimer in the
 * *    documentation and/or other materials provided with the distribution.
 * * 3) All advertising materials mentioning features or use of this software
 * *    must display the following acknowledgement: "This product includes
 * *    software developed by Thomas Winischhofer, Vienna, Austria."
 * * 4) The name of the author may not be used to endorse or promote products
 * *    derived from this software without specific prior written permission.
 * *
 * * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESSED OR
 * * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: 	Thomas Winischhofer <thomas@@winischhofer.net>
 *
 * Formerly based on non-functional code-fragements for 300 series by SiS, Inc.
 * Used by permission.
d60 24
d89 35
a123 3
/*********************************************/
/*         POINTER INITIALIZATION            */
/*********************************************/
d126 1
a126 1
InitCommonPointer(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d128 19
a146 27
   SiS_Pr->SiS_StResInfo     = SiS_StResInfo;
   SiS_Pr->SiS_ModeResInfo   = SiS_ModeResInfo;
   SiS_Pr->SiS_StandTable    = SiS_StandTable;

   SiS_Pr->SiS_NTSCPhase     = SiS_NTSCPhase;
   SiS_Pr->SiS_PALPhase      = SiS_PALPhase;
   SiS_Pr->SiS_NTSCPhase2    = SiS_NTSCPhase2;
   SiS_Pr->SiS_PALPhase2     = SiS_PALPhase2;
   SiS_Pr->SiS_PALMPhase     = SiS_PALMPhase;
   SiS_Pr->SiS_PALNPhase     = SiS_PALNPhase;
   SiS_Pr->SiS_PALMPhase2    = SiS_PALMPhase2;
   SiS_Pr->SiS_PALNPhase2    = SiS_PALNPhase2;
   SiS_Pr->SiS_SpecialPhase  = SiS_SpecialPhase;
   SiS_Pr->SiS_SpecialPhaseM = SiS_SpecialPhaseM;
   SiS_Pr->SiS_SpecialPhaseJ = SiS_SpecialPhaseJ;

   SiS_Pr->SiS_NTSCTiming     = SiS_NTSCTiming;
   SiS_Pr->SiS_PALTiming      = SiS_PALTiming;
   SiS_Pr->SiS_HiTVSt1Timing  = SiS_HiTVSt1Timing;
   SiS_Pr->SiS_HiTVSt2Timing  = SiS_HiTVSt2Timing;

   SiS_Pr->SiS_HiTVExtTiming  = SiS_HiTVExtTiming;
   SiS_Pr->SiS_HiTVGroup3Data = SiS_HiTVGroup3Data;
   SiS_Pr->SiS_HiTVGroup3Simu = SiS_HiTVGroup3Simu;
#if 0
   SiS_Pr->SiS_HiTVTextTiming = SiS_HiTVTextTiming;
   SiS_Pr->SiS_HiTVGroup3Text = SiS_HiTVGroup3Text;
d148 2
d151 5
a155 112
   SiS_Pr->SiS_StPALData   = SiS_StPALData;
   SiS_Pr->SiS_ExtPALData  = SiS_ExtPALData;
   SiS_Pr->SiS_StNTSCData  = SiS_StNTSCData;
   SiS_Pr->SiS_ExtNTSCData = SiS_ExtNTSCData;
   SiS_Pr->SiS_St1HiTVData = SiS_StHiTVData; 
   SiS_Pr->SiS_St2HiTVData = SiS_St2HiTVData;
   SiS_Pr->SiS_ExtHiTVData = SiS_ExtHiTVData;
   SiS_Pr->SiS_St525iData  = SiS_StNTSCData;
   SiS_Pr->SiS_St525pData  = SiS_St525pData;
   SiS_Pr->SiS_St750pData  = SiS_St750pData;
   SiS_Pr->SiS_Ext525iData = SiS_ExtNTSCData;
   SiS_Pr->SiS_Ext525pData = SiS_ExtNTSCData;
   SiS_Pr->SiS_Ext750pData = SiS_Ext750pData;

   SiS_Pr->pSiS_OutputSelect = &SiS_OutputSelect;
   SiS_Pr->pSiS_SoftSetting  = &SiS_SoftSetting;

   SiS_Pr->SiS_LCD1280x960Data      = SiS_LCD1280x960Data;
   SiS_Pr->SiS_ExtLCD1400x1050Data  = SiS_ExtLCD1400x1050Data;
   SiS_Pr->SiS_ExtLCD1600x1200Data  = SiS_ExtLCD1600x1200Data;
   SiS_Pr->SiS_StLCD1400x1050Data   = SiS_StLCD1400x1050Data;
   SiS_Pr->SiS_StLCD1600x1200Data   = SiS_StLCD1600x1200Data;
   SiS_Pr->SiS_NoScaleData1400x1050 = SiS_NoScaleData1400x1050;
   SiS_Pr->SiS_NoScaleData1600x1200 = SiS_NoScaleData1600x1200;
   SiS_Pr->SiS_ExtLCD1280x768Data   = SiS_ExtLCD1280x768Data;
   SiS_Pr->SiS_StLCD1280x768Data    = SiS_StLCD1280x768Data;
   SiS_Pr->SiS_NoScaleData1280x768  = SiS_NoScaleData1280x768;
   SiS_Pr->SiS_NoScaleData          = SiS_NoScaleData;

   SiS_Pr->SiS_LVDS320x480Data_1   = SiS_LVDS320x480Data_1;
   SiS_Pr->SiS_LVDS800x600Data_1   = SiS_LVDS800x600Data_1;
   SiS_Pr->SiS_LVDS800x600Data_2   = SiS_LVDS800x600Data_2;
   SiS_Pr->SiS_LVDS1024x768Data_1  = SiS_LVDS1024x768Data_1;
   SiS_Pr->SiS_LVDS1024x768Data_2  = SiS_LVDS1024x768Data_2;
   SiS_Pr->SiS_LVDS1280x1024Data_1 = SiS_LVDS1280x1024Data_1;
   SiS_Pr->SiS_LVDS1280x1024Data_2 = SiS_LVDS1280x1024Data_2;
   SiS_Pr->SiS_LVDS1400x1050Data_1 = SiS_LVDS1400x1050Data_1;
   SiS_Pr->SiS_LVDS1400x1050Data_2 = SiS_LVDS1400x1050Data_2;
   SiS_Pr->SiS_LVDS1600x1200Data_1 = SiS_LVDS1600x1200Data_1;
   SiS_Pr->SiS_LVDS1600x1200Data_2 = SiS_LVDS1600x1200Data_2;
   SiS_Pr->SiS_LVDS1280x768Data_1  = SiS_LVDS1280x768Data_1;
   SiS_Pr->SiS_LVDS1280x768Data_2  = SiS_LVDS1280x768Data_2;
   SiS_Pr->SiS_LVDS1024x600Data_1  = SiS_LVDS1024x600Data_1;
   SiS_Pr->SiS_LVDS1024x600Data_2  = SiS_LVDS1024x600Data_2;
   SiS_Pr->SiS_LVDS1152x768Data_1  = SiS_LVDS1152x768Data_1;
   SiS_Pr->SiS_LVDS1152x768Data_2  = SiS_LVDS1152x768Data_2;
   SiS_Pr->SiS_LVDSXXXxXXXData_1   = SiS_LVDSXXXxXXXData_1;
   SiS_Pr->SiS_LVDS1280x960Data_1  = SiS_LVDS1280x960Data_1;
   SiS_Pr->SiS_LVDS1280x960Data_2  = SiS_LVDS1280x960Data_2;
   SiS_Pr->SiS_LVDS640x480Data_1   = SiS_LVDS640x480Data_1;
   SiS_Pr->SiS_LVDS1280x960Data_1  = SiS_LVDS1280x1024Data_1;
   SiS_Pr->SiS_LVDS1280x960Data_2  = SiS_LVDS1280x1024Data_2;
   SiS_Pr->SiS_LVDS640x480Data_1   = SiS_LVDS640x480Data_1;
   SiS_Pr->SiS_LVDS640x480Data_2   = SiS_LVDS640x480Data_2;

   SiS_Pr->SiS_LVDSBARCO1366Data_1 = SiS_LVDSBARCO1366Data_1;
   SiS_Pr->SiS_LVDSBARCO1366Data_2 = SiS_LVDSBARCO1366Data_2;
   SiS_Pr->SiS_LVDSBARCO1024Data_1 = SiS_LVDSBARCO1024Data_1;
   SiS_Pr->SiS_LVDSBARCO1024Data_2 = SiS_LVDSBARCO1024Data_2;
   SiS_Pr->SiS_LVDS848x480Data_1   = SiS_LVDS848x480Data_1;
   SiS_Pr->SiS_LVDS848x480Data_2   = SiS_LVDS848x480Data_2;

   SiS_Pr->SiS_CHTVUNTSCData = SiS_CHTVUNTSCData;
   SiS_Pr->SiS_CHTVONTSCData = SiS_CHTVONTSCData;

   SiS_Pr->SiS_LCDA1024x768Data_1  = SiS_LCDA1024x768Data_1;
   SiS_Pr->SiS_LCDA1024x768Data_2  = SiS_LCDA1024x768Data_2;
   SiS_Pr->SiS_LCDA1280x1024Data_1 = SiS_LCDA1280x1024Data_1;
   SiS_Pr->SiS_LCDA1280x1024Data_2 = SiS_LCDA1280x1024Data_2;
   SiS_Pr->SiS_LCDA1400x1050Data_1 = SiS_LCDA1400x1050Data_1;
   SiS_Pr->SiS_LCDA1400x1050Data_2 = SiS_LCDA1400x1050Data_2;
   SiS_Pr->SiS_LCDA1600x1200Data_1 = SiS_LCDA1600x1200Data_1;
   SiS_Pr->SiS_LCDA1600x1200Data_2 = SiS_LCDA1600x1200Data_2;

   SiS_Pr->LVDS1024x768Des_1  = SiS_PanelType1076_1;
   SiS_Pr->LVDS1280x1024Des_1 = SiS_PanelType1210_1;
   SiS_Pr->LVDS1400x1050Des_1 = SiS_PanelType1296_1;
   SiS_Pr->LVDS1600x1200Des_1 = SiS_PanelType1600_1;
   SiS_Pr->LVDS1024x768Des_2  = SiS_PanelType1076_2;
   SiS_Pr->LVDS1280x1024Des_2 = SiS_PanelType1210_2;
   SiS_Pr->LVDS1400x1050Des_2 = SiS_PanelType1296_2;
   SiS_Pr->LVDS1600x1200Des_2 = SiS_PanelType1600_2;

   SiS_Pr->SiS_PanelTypeNS_1 = SiS_PanelTypeNS_1;
   SiS_Pr->SiS_PanelTypeNS_2 = SiS_PanelTypeNS_2;

   SiS_Pr->SiS_CHTVUNTSCDesData = SiS_CHTVUNTSCDesData;
   SiS_Pr->SiS_CHTVONTSCDesData = SiS_CHTVONTSCDesData;
   SiS_Pr->SiS_CHTVUPALDesData  = SiS_CHTVUPALDesData;
   SiS_Pr->SiS_CHTVOPALDesData  = SiS_CHTVOPALDesData;

   SiS_Pr->SiS_LVDSCRT11280x768_1    = SiS_LVDSCRT11280x768_1;
   SiS_Pr->SiS_LVDSCRT11024x600_1    = SiS_LVDSCRT11024x600_1;
   SiS_Pr->SiS_LVDSCRT11152x768_1    = SiS_LVDSCRT11152x768_1;
   SiS_Pr->SiS_LVDSCRT11280x768_1_H  = SiS_LVDSCRT11280x768_1_H;
   SiS_Pr->SiS_LVDSCRT11024x600_1_H  = SiS_LVDSCRT11024x600_1_H;
   SiS_Pr->SiS_LVDSCRT11152x768_1_H  = SiS_LVDSCRT11152x768_1_H;
   SiS_Pr->SiS_LVDSCRT11280x768_2    = SiS_LVDSCRT11280x768_2;
   SiS_Pr->SiS_LVDSCRT11024x600_2    = SiS_LVDSCRT11024x600_2;
   SiS_Pr->SiS_LVDSCRT11152x768_2    = SiS_LVDSCRT11152x768_2;
   SiS_Pr->SiS_LVDSCRT11280x768_2_H  = SiS_LVDSCRT11280x768_2_H;
   SiS_Pr->SiS_LVDSCRT11024x600_2_H  = SiS_LVDSCRT11024x600_2_H;
   SiS_Pr->SiS_LVDSCRT11152x768_2_H  = SiS_LVDSCRT11152x768_2_H;
   SiS_Pr->SiS_LVDSCRT1320x480_1     = SiS_LVDSCRT1320x480_1;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1     = SiS_LVDSCRT1XXXxXXX_1;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1_H   = SiS_LVDSCRT1XXXxXXX_1_H;
   SiS_Pr->SiS_LVDSCRT1640x480_1     = SiS_LVDSCRT1640x480_1;
   SiS_Pr->SiS_LVDSCRT1640x480_1_H   = SiS_LVDSCRT1640x480_1_H;
   SiS_Pr->SiS_LVDSCRT1640x480_2     = SiS_LVDSCRT1640x480_2;
   SiS_Pr->SiS_LVDSCRT1640x480_2_H   = SiS_LVDSCRT1640x480_2_H;
   SiS_Pr->SiS_LVDSCRT1640x480_3     = SiS_LVDSCRT1640x480_3;
   SiS_Pr->SiS_LVDSCRT1640x480_3_H   = SiS_LVDSCRT1640x480_3_H;
d160 1
a160 1
InitTo300Pointer(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
a161 30
   InitCommonPointer(SiS_Pr, HwInfo);

   SiS_StandTable[0x04].CRTC[4] = 0x2b;
   SiS_StandTable[0x05].CRTC[4] = 0x2b;
   SiS_StandTable[0x06].CRTC[4] = 0x54;
   SiS_StandTable[0x06].CRTC[5] = 0x80;
   SiS_StandTable[0x0d].CRTC[4] = 0x2b;
   SiS_StandTable[0x0e].CRTC[4] = 0x54;
   SiS_StandTable[0x0e].CRTC[5] = 0x80;
   SiS_StandTable[0x11].CRTC[4] = 0x54;
   SiS_StandTable[0x11].CRTC[5] = 0x80;
   SiS_StandTable[0x11].CRTC[16] = 0x83;
   SiS_StandTable[0x11].CRTC[17] = 0x85;
   SiS_StandTable[0x12].CRTC[4] = 0x54;
   SiS_StandTable[0x12].CRTC[5] = 0x80;
   SiS_StandTable[0x12].CRTC[16] = 0x83;
   SiS_StandTable[0x12].CRTC[17] = 0x85;
   SiS_StandTable[0x13].CRTC[5] = 0xa0;
   SiS_StandTable[0x17].CRTC[5] = 0xa0;
   SiS_StandTable[0x1a].CRTC[4] = 0x54;
   SiS_StandTable[0x1a].CRTC[5] = 0x80;
   SiS_StandTable[0x1a].CRTC[16] = 0xea;
   SiS_StandTable[0x1a].CRTC[17] = 0x8c;
   SiS_StandTable[0x1b].CRTC[4] = 0x54;
   SiS_StandTable[0x1b].CRTC[5] = 0x80;
   SiS_StandTable[0x1b].CRTC[16] = 0xea;
   SiS_StandTable[0x1b].CRTC[17] = 0x8c;
   SiS_StandTable[0x1c].CRTC[4] = 0x54;
   SiS_StandTable[0x1c].CRTC[5] = 0x80;

d164 1
d168 1
a168 1
   if(HwInfo->jChipType == SIS_300) {
d171 1
a171 1
      SiS_Pr->SiS_MCLKData_0    = (SiS_MCLKDataStruct *)SiS300_MCLKData_630; /* 630, 730 */
d173 1
d177 5
d210 9
d227 28
a256 2
   SiS_Pr->SiS_PanelDelayTblLVDS = (SiS_PanelDelayTblStruct *)SiS300_PanelDelayTbl;
#if 0
a257 1
#endif
d259 25
d286 2
a287 2
   SiS_Pr->SiS_CHTVUPALMData = SiS_CHTVUNTSCData; 			   /* not supported on 300 series */
   SiS_Pr->SiS_CHTVOPALMData = SiS_CHTVONTSCData; 			   /* not supported on 300 series */
a290 1

d323 4
a326 10

   if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
      SiS_Pr->SiS_PanelType04_1 = (SiS_LVDSDesStruct *)SiS300_PanelType04_1a;
      SiS_Pr->SiS_PanelType04_2 = (SiS_LVDSDesStruct *)SiS300_PanelType04_2a;
   }
   if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
      SiS_Pr->SiS_PanelType04_1 = (SiS_LVDSDesStruct *)SiS300_PanelType04_1b;
      SiS_Pr->SiS_PanelType04_2 = (SiS_LVDSDesStruct *)SiS300_PanelType04_2b;
   }

d330 2
d335 2
d340 2
d345 2
d371 1
d385 1
a385 1
   /* LCDResInfo will on 300 series be translated to 315 series definitions */
d394 7
a400 11
   SiS_Pr->SiS_Panel1280x768  = Panel_1280x768;
   SiS_Pr->SiS_Panel1600x1200 = 255;  		   /* Something illegal */
   SiS_Pr->SiS_Panel1400x1050 = 255;
   SiS_Pr->SiS_Panel640x480_2 = 255;
   SiS_Pr->SiS_Panel640x480_3 = 255;
   SiS_Pr->SiS_Panel1152x864  = 255;
   SiS_Pr->SiS_PanelMax       = Panel_320x480;     /* highest value */
   SiS_Pr->SiS_PanelMinLVDS   = Panel_800x600;     /* Lowest value LVDS */
   SiS_Pr->SiS_PanelMin301    = Panel_1024x768;    /* lowest value 301 */
   SiS_Pr->SiS_PanelCustom    = Panel_Custom;
   SiS_Pr->SiS_PanelBarco1366 = Panel_Barco1366;
d406 1
a406 1
InitTo310Pointer(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
a407 30
   InitCommonPointer(SiS_Pr, HwInfo);

   SiS_StandTable[0x04].CRTC[4] = 0x2c;
   SiS_StandTable[0x05].CRTC[4] = 0x2c;
   SiS_StandTable[0x06].CRTC[4] = 0x55;
   SiS_StandTable[0x06].CRTC[5] = 0x81;
   SiS_StandTable[0x0d].CRTC[4] = 0x2c;
   SiS_StandTable[0x0e].CRTC[4] = 0x55;
   SiS_StandTable[0x0e].CRTC[5] = 0x81;
   SiS_StandTable[0x11].CRTC[4] = 0x55;
   SiS_StandTable[0x11].CRTC[5] = 0x81;
   SiS_StandTable[0x11].CRTC[16] = 0x82;
   SiS_StandTable[0x11].CRTC[17] = 0x84;
   SiS_StandTable[0x12].CRTC[4] = 0x55;
   SiS_StandTable[0x12].CRTC[5] = 0x81;
   SiS_StandTable[0x12].CRTC[16] = 0x82;
   SiS_StandTable[0x12].CRTC[17] = 0x84;
   SiS_StandTable[0x13].CRTC[5] = 0xb1;
   SiS_StandTable[0x17].CRTC[5] = 0xb1;
   SiS_StandTable[0x1a].CRTC[4] = 0x55;
   SiS_StandTable[0x1a].CRTC[5] = 0x81;
   SiS_StandTable[0x1a].CRTC[16] = 0xe9;
   SiS_StandTable[0x1a].CRTC[17] = 0x8b;
   SiS_StandTable[0x1b].CRTC[4] = 0x55;
   SiS_StandTable[0x1b].CRTC[5] = 0x81;
   SiS_StandTable[0x1b].CRTC[16] = 0xe9;
   SiS_StandTable[0x1b].CRTC[17] = 0x8b;
   SiS_StandTable[0x1c].CRTC[4] = 0x55;
   SiS_StandTable[0x1c].CRTC[5] = 0x81;

d409 1
d413 2
a414 3
   if(HwInfo->jChipType >= SIS_661) {
      SiS_Pr->SiS_MCLKData_0 = (SiS_MCLKDataStruct *)SiS310_MCLKData_0_660;  /* 661/741/760 */
   } else if(HwInfo->jChipType == SIS_330) {
d416 2
a417 2
   } else if(HwInfo->jChipType > SIS_315PRO) {
      SiS_Pr->SiS_MCLKData_0 = (SiS_MCLKDataStruct *)SiS310_MCLKData_0_650;  /* 550, 650, 740 */
d422 1
d426 5
d459 10
d477 29
d507 1
a507 1
   SiS_Pr->SiS_PanelDelayTbl     = (SiS_PanelDelayTblStruct *)SiS310_PanelDelayTbl;
d510 25
a541 1

d575 10
d598 5
d607 3
d615 3
d623 3
d631 3
d635 7
a641 6
   SiS_Pr->SiS_CHTVCRT1UNTSC         = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1UNTSC;
   SiS_Pr->SiS_CHTVCRT1ONTSC         = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1ONTSC;
   SiS_Pr->SiS_CHTVCRT1UPAL          = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1UPAL;
   SiS_Pr->SiS_CHTVCRT1OPAL          = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1OPAL;
   SiS_Pr->SiS_CHTVCRT1SOPAL         = (SiS_LVDSCRT1DataStruct *)SiS310_CHTVCRT1OPAL;

d650 2
a651 2
   SiS_Pr->SiS_CHTVReg_SOPAL = (SiS_CHTVRegDataStruct *)SiS310_CHTVReg_OPAL;

d656 1
d661 1
d666 1
a670 1

d679 1
a679 1
   SiS_Pr->SiS_CHTVVCLKSOPAL = SiS310_CHTVVCLKOPAL;
d693 3
a695 7
   SiS_Pr->SiS_Panel640x480_2 = Panel_640x480_2;
   SiS_Pr->SiS_Panel640x480_3 = Panel_640x480_3;
   SiS_Pr->SiS_PanelMax       = Panel_320x480;    /* highest value */
   SiS_Pr->SiS_PanelMinLVDS   = Panel_800x600;    /* lowest value LVDS/LCDA */
   SiS_Pr->SiS_PanelMin301    = Panel_1024x768;   /* lowest value 301 */
   SiS_Pr->SiS_PanelCustom    = Panel_Custom;
   SiS_Pr->SiS_PanelBarco1366 = 255;
d699 10
a708 2
static void
SiSInitPtr(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d710 41
a750 1
   switch(HwInfo->jChipType) {
d752 8
a759 13
   case SIS_315H:
   case SIS_315:
   case SIS_315PRO:
   case SIS_550:
   case SIS_650:
   case SIS_740:
   case SIS_330:
   case SIS_661:
   case SIS_741:
   case SIS_660:
   case SIS_760:
      InitTo310Pointer(SiS_Pr, HwInfo);
      break;
d761 1
d763 5
a767 6
   case SIS_300:
   case SIS_540:
   case SIS_630:
   case SIS_730:
      InitTo300Pointer(SiS_Pr, HwInfo);
      break;
d769 30
a798 2
   default:
      break;
d800 1
a800 1
}
d802 45
a846 3
/*********************************************/
/*            HELPER: Get ModeID             */
/*********************************************/
d848 1
a848 4
USHORT
SiS_GetModeID(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay, int Depth, BOOLEAN FSTN)
{
   USHORT ModeIndex = 0;
d850 52
a901 109
   switch(HDisplay)
   {
     case 320:
     	  if(VDisplay == 200)     ModeIndex = ModeIndex_320x200[Depth];
	  else if(VDisplay == 240) {
	     if(FSTN) ModeIndex = ModeIndex_320x240_FSTN[Depth];
	     else     ModeIndex = ModeIndex_320x240[Depth];
          }
          break;
     case 400:
          if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
          break;
     case 512:
          if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
          break;
     case 640:
          if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
	  else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
          break;
     case 720:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 480)      ModeIndex = ModeIndex_720x480[Depth];
             else if(VDisplay == 576) ModeIndex = ModeIndex_720x576[Depth];
          }
          break;
     case 768:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 576) ModeIndex = ModeIndex_768x576[Depth];
          }
	  break;
     case 800:
	  if(VDisplay == 600)    ModeIndex = ModeIndex_800x600[Depth];
	  else if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 480) ModeIndex = ModeIndex_800x480[Depth];
	  }
          break;
     case 848:
          if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 480) ModeIndex = ModeIndex_848x480[Depth];
	  }
	  break;
     case 856:
          if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 480) ModeIndex = ModeIndex_856x480[Depth];
	  }
	  break;
     case 1024:
          if(VDisplay == 768) ModeIndex = ModeIndex_1024x768[Depth];
	  else if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 576)    ModeIndex = ModeIndex_1024x576[Depth];
	     else if(VGAEngine == SIS_300_VGA) {
	        if(VDisplay == 600) ModeIndex = ModeIndex_1024x600[Depth];
             }
	  }
          break;
     case 1152:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 864)    ModeIndex = ModeIndex_1152x864[Depth];
             else if(VGAEngine == SIS_300_VGA) {
	        if(VDisplay == 768) ModeIndex = ModeIndex_1152x768[Depth];
             }
	  }
	  break;
     case 1280:
          if(VDisplay == 1024)        ModeIndex = ModeIndex_1280x1024[Depth];
	  else if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 960)      ModeIndex = ModeIndex_1280x960[Depth];
	     else if(VDisplay == 720) ModeIndex = ModeIndex_1280x720[Depth];
	     else if(VDisplay == 768) {
	        if(VGAEngine == SIS_300_VGA) {
	           ModeIndex = ModeIndex_300_1280x768[Depth];
	        } else {
	           ModeIndex = ModeIndex_310_1280x768[Depth];
	        }
	     }
	  }
          break;
     case 1360:
          if(!(VBFlags & CRT1_LCDA)) {
	     if(VDisplay == 768)     ModeIndex = ModeIndex_1360x768[Depth];
	     else if(VGAEngine == SIS_300_VGA) {
	        if(VDisplay == 1024) ModeIndex = ModeIndex_300_1360x1024[Depth];
             }
	  }
          break;
     case 1400:
          if(VGAEngine == SIS_315_VGA) {
	     if(VDisplay == 1050) ModeIndex = ModeIndex_1400x1050[Depth];
	  }
          break;
     case 1600:
          if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
          break;
     case 1920:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 1440) ModeIndex = ModeIndex_1920x1440[Depth];
	  }
          break;
     case 2048:
          if(!(VBFlags & CRT1_LCDA)) {
             if(VDisplay == 1536) {
                if(VGAEngine == SIS_300_VGA) {
	            ModeIndex = ModeIndex_300_2048x1536[Depth];
  	        } else {
	            ModeIndex = ModeIndex_310_2048x1536[Depth];
                }
	     }
	  }
          break;
d903 1
d905 5
a909 2
   return(ModeIndex);
}
d911 8
a918 5
USHORT
SiS_GetModeID_LCD(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay,
                  int Depth, BOOLEAN FSTN, USHORT CustomT, int LCDwidth, int LCDheight)
{
   USHORT ModeIndex = 0;
d920 12
a931 1
   if(VBFlags & (VB_LVDS | VB_30xBDH)) {
d933 1
a933 85
      switch(HDisplay)
      {
	case 320:
	     if(CustomT != CUT_PANEL848) {
     	  	if(VDisplay == 200) ModeIndex = ModeIndex_320x200[Depth];
	  	else if(VDisplay == 240) {
		   if(!FSTN) ModeIndex = ModeIndex_320x240[Depth];
          	   else if(VGAEngine == SIS_315_VGA) {
                      ModeIndex = ModeIndex_320x240_FSTN[Depth];
		   }
		}
	     }
             break;
     	case 400:
	     if(CustomT != CUT_PANEL848) {
          	if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
	     }
             break;
	case 512:
	     if(CustomT != CUT_PANEL848) {
		if(VDisplay == 384) {
		   if(LCDwidth != 1024 || LCDheight != 600) {
		      ModeIndex = ModeIndex_512x384[Depth];
		   }
		}
	     }
	     break;
	case 640:
	     if(VDisplay == 480)            ModeIndex = ModeIndex_640x480[Depth];
	     else if(VDisplay == 400) {
	        if(CustomT != CUT_PANEL848) ModeIndex = ModeIndex_640x400[Depth];
	     }
	     break;
	case 800:
	     if(VDisplay == 600) ModeIndex = ModeIndex_800x600[Depth];
	     break;
	case 848:
	     if(CustomT == CUT_PANEL848) {
	        if(VDisplay == 480) ModeIndex = ModeIndex_848x480[Depth];
	     }
	     break;
	case 1024:
	     if(VDisplay == 768) ModeIndex = ModeIndex_1024x768[Depth];
	     else if(VGAEngine == SIS_300_VGA) {
		if((VDisplay == 600) && (LCDheight == 600)) {
		   ModeIndex = ModeIndex_1024x600[Depth];
		}
	     }
	     break;
	case 1152:
	     if(VGAEngine == SIS_300_VGA) {
	        if((VDisplay == 768) && (LCDheight == 768)) {
		   ModeIndex = ModeIndex_1152x768[Depth];
		}
	     }
	     break;
        case 1280:
	     if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
	     else if(VGAEngine == SIS_315_VGA) {
	        if((VDisplay == 768) && (LCDheight == 768)) {
		   ModeIndex = ModeIndex_310_1280x768[Depth];
		}
	     }
	     break;
	case 1360:
	     if(VGAEngine == SIS_300_VGA) {
	        if(CustomT == CUT_BARCO1366) {
		   if(VDisplay == 1024) ModeIndex = ModeIndex_300_1360x1024[Depth];
		}
	     }
	     if(CustomT == CUT_PANEL848) {
	        if(VDisplay == 768) ModeIndex = ModeIndex_1360x768[Depth];
	     }
	     break;
	case 1400:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VDisplay == 1050) ModeIndex = ModeIndex_1400x1050[Depth];
	     }
	     break;
	case 1600:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
	     }
	     break;
      }
d935 14
a948 1
   } else if(VBFlags & VB_SISBRIDGE) {
d950 18
a967 55
      switch(HDisplay)
      {
	case 320:
     	     if(VDisplay == 200)      ModeIndex = ModeIndex_320x200[Depth];
	     else if(VDisplay == 240) ModeIndex = ModeIndex_320x240[Depth];
             break;
     	case 400:
             if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
             break;
	case 512:
	     if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
	     break;
	case 640:
	     if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
	     else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
	     break;
	case 800:
	     if(VDisplay == 600) ModeIndex = ModeIndex_800x600[Depth];
	     break;
	case 1024:
	     if(VDisplay == 768) ModeIndex = ModeIndex_1024x768[Depth];
	     break;
	case 1280:
	     if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
	     else if(VDisplay == 768) {
		if((LCDheight == 768) ||
		   ((LCDheight == 1024) && (VBFlags & (VB_301|VB_301B|VB_301C|VB_302B)))) {
		   if(VGAEngine == SIS_300_VGA) {
		      ModeIndex = ModeIndex_300_1280x768[Depth];
		   } else {
		      ModeIndex = ModeIndex_310_1280x768[Depth];
		   }
		}
	     } else if(VDisplay == 960) {
	        if((LCDheight == 960) ||
		   ((LCDheight == 1024) && (VBFlags & (VB_301|VB_301B|VB_301C|VB_302B)))) {
		   ModeIndex = ModeIndex_1280x960[Depth];
		}
	     }
	     break;
	case 1400:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VBFlags & (VB_301B | VB_301C | VB_302B | VB_302LV | VB_302ELV)) {
		   if(LCDheight != 1200) {
	              if(VDisplay == 1050) ModeIndex = ModeIndex_1400x1050[Depth];
		   }
		}
	     }
	     break;
	case 1600:
	     if(VBFlags & (VB_301C | VB_302B | VB_302LV | VB_302ELV)) {
	        if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
	     }
	     break;
      }
d969 1
d971 26
a996 2
   return ModeIndex;
}
d998 2
a999 4
USHORT
SiS_GetModeID_TV(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay, int Depth)
{
   USHORT ModeIndex = 0;
d1001 1
a1001 1
   if(VBFlags & VB_CHRONTEL) {
d1003 1
a1003 20
      switch(HDisplay)
      {
      	case 512:
	     if(VGAEngine == SIS_315_VGA) {
		if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
	     }
	     break;
	case 640:
	     if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
	     else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
	     break;
	case 800:
	     if(VDisplay == 600) ModeIndex = ModeIndex_800x600[Depth];
	     break;
	case 1024:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VDisplay == 768) ModeIndex = ModeIndex_1024x768[Depth];
	     }
	     break;
      }
d1005 7
a1011 1
   } else if(VBFlags & VB_SISTVBRIDGE) {
d1013 11
a1023 64
      switch(HDisplay)
      {
	case 320:
     	     if(VDisplay == 200)      ModeIndex = ModeIndex_320x200[Depth];
	     else if(VDisplay == 240) ModeIndex = ModeIndex_320x240[Depth];
             break;
        case 400:
             if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
             break;
      	case 512:
	     if( ((VBFlags & TV_YPBPR) && (VBFlags & (TV_YPBPR525P | TV_YPBPR750P | TV_YPBPR1080I))) ||
	         (VBFlags & TV_HIVISION) 					    		     ||
	         ((!(VBFlags & (TV_YPBPR | TV_PALM))) && (VBFlags & TV_PAL)) ) {
	        if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
	     }
	     break;
	case 640:
	     if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
	     else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
	     break;
	case 720:
	     if((!(VBFlags & TV_HIVISION)) && (!((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I)))) {
                if(VDisplay == 480) {
		   if((VBFlags & TV_YPBPR) || (VBFlags & (TV_NTSC | TV_PALM)))
                      ModeIndex = ModeIndex_720x480[Depth];
                } else if(VDisplay == 576) {
		   if((!(VBFlags & (TV_YPBPR | TV_PALM))) && (VBFlags & TV_PAL))
                      ModeIndex = ModeIndex_720x576[Depth];
                }
	     }
             break;
	case 768:
	     if((!(VBFlags & TV_HIVISION)) && (!((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I)))) {
	        if((!(VBFlags & (TV_YPBPR | TV_PALM))) && (VBFlags & TV_PAL)) {
          	   if(VDisplay == 576) ModeIndex = ModeIndex_768x576[Depth];
		}
             }
	     break;
	case 800:
	     if(VDisplay == 600) ModeIndex = ModeIndex_800x600[Depth];
	     else if(VDisplay == 480) {
	        if((VBFlags & TV_HIVISION) || ((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I))) {
		   ModeIndex = ModeIndex_800x480[Depth];
		}
	     }
	     break;
	case 1024:
	     if(VDisplay == 768) {
		if(VBFlags & (VB_301B|VB_301C|VB_302B|VB_301LV|VB_302LV|VB_302ELV)) {
		   ModeIndex = ModeIndex_1024x768[Depth];
		}
	     } else if(VDisplay == 576) {
	        if((VBFlags & TV_HIVISION) || ((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I))) {
		   ModeIndex = ModeIndex_1024x576[Depth];
		}
	     }
	     break;
	case 1280:
	     if((VBFlags & TV_HIVISION) || ((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I))) {
	        if(VDisplay == 720)       ModeIndex = ModeIndex_1280x720[Depth];
		else if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
	     }
	     break;
      }
d1025 7
a1031 2
   return ModeIndex;
}
d1033 6
a1038 4
USHORT
SiS_GetModeID_VGA2(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay, int Depth)
{
   USHORT ModeIndex = 0;
d1040 2
a1041 1
   if(!(VBFlags & (VB_301|VB_301B|VB_301C|VB_302B))) return 0;
d1043 119
a1161 69
   switch(HDisplay)
   {
	case 320:
     	  	if(VDisplay == 200)      ModeIndex = ModeIndex_320x200[Depth];
	  	else if(VDisplay == 240) ModeIndex = ModeIndex_320x240[Depth];
          	break;
     	case 400:
          	if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
          	break;
  	case 512:
		if(VDisplay == 384) ModeIndex = ModeIndex_512x384[Depth];
		break;
	case 640:
		if(VDisplay == 480)      ModeIndex = ModeIndex_640x480[Depth];
		else if(VDisplay == 400) ModeIndex = ModeIndex_640x400[Depth];
		break;
	case 720:
		if(VDisplay == 480)      ModeIndex = ModeIndex_720x480[Depth];
		else if(VDisplay == 576) ModeIndex = ModeIndex_720x576[Depth];
		break;
	case 768:
          	if(VDisplay == 576) ModeIndex = ModeIndex_768x576[Depth];
	  	break;
	case 800:
		if(VDisplay == 600)      ModeIndex = ModeIndex_800x600[Depth];
   	        else if(VDisplay == 480) ModeIndex = ModeIndex_800x480[Depth];
		break;
	case 848:
		if(VDisplay == 480) ModeIndex = ModeIndex_848x480[Depth];
		break;
	case 856:
		if(VDisplay == 480) ModeIndex = ModeIndex_856x480[Depth];
		break;
	case 1024:
		if(VDisplay == 768)      ModeIndex = ModeIndex_1024x768[Depth];
		else if(VDisplay == 576) ModeIndex = ModeIndex_1024x576[Depth];
		break;
	case 1152:
	        if(VDisplay == 864)    ModeIndex = ModeIndex_1152x864[Depth];
		else if(VGAEngine == SIS_300_VGA) {
		   if(VDisplay == 768) ModeIndex = ModeIndex_1152x768[Depth];
		}
		break;
	case 1280:
	        if(VDisplay == 768) {
		   if(VGAEngine == SIS_300_VGA) {
		      ModeIndex = ModeIndex_300_1280x768[Depth];
		   } else {
		      ModeIndex = ModeIndex_310_1280x768[Depth];
		   }
		} else if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
		else if(VDisplay == 720)    ModeIndex = ModeIndex_1280x720[Depth];
		else if(VDisplay == 960)    ModeIndex = ModeIndex_1280x960[Depth];
		break;
        case 1360:
	        if(VDisplay == 768) ModeIndex = ModeIndex_1360x768[Depth];
                break;
        case 1400:
		if(VGAEngine == SIS_315_VGA) {
	           if(VDisplay == 1050) ModeIndex = ModeIndex_1400x1050[Depth];
		}
		break;
	case 1600:
		if(VGAEngine == SIS_315_VGA) {
		   if(VBFlags & (VB_301B|VB_301C|VB_302B)) {
	              if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
		   }
		}
		break;
d1163 16
d1180 4
a1183 2
   return ModeIndex;
}
d1185 4
d1190 2
a1191 3
/*********************************************/
/*          HELPER: SetReg, GetReg           */
/*********************************************/
d1194 1
a1194 1
SiS_SetReg(SISIOADDRESS port, USHORT index, USHORT data)
d1196 26
a1221 2
   OutPortByte(port,index);
   OutPortByte(port + 1,data);
d1224 2
d1227 1
a1227 1
SiS_SetRegByte(SISIOADDRESS port, USHORT data)
d1229 77
a1305 1
   OutPortByte(port,data);
d1308 2
a1309 2
void
SiS_SetRegShort(SISIOADDRESS port, USHORT data)
d1311 15
a1325 1
   OutPortWord(port,data);
d1327 7
d1336 1
a1336 1
SiS_SetRegLong(SISIOADDRESS port, ULONG data)
a1337 1
   OutPortLong(port,data);
d1340 2
a1341 2
UCHAR
SiS_GetReg(SISIOADDRESS port, USHORT index)
d1343 9
a1351 2
   OutPortByte(port,index);
   return(InPortByte(port + 1));
d1354 2
a1355 2
UCHAR
SiS_GetRegByte(SISIOADDRESS port)
d1357 12
a1368 2
   return(InPortByte(port));
}
d1370 14
a1383 4
USHORT
SiS_GetRegShort(SISIOADDRESS port)
{
   return(InPortWord(port));
d1386 2
a1387 2
ULONG
SiS_GetRegLong(SISIOADDRESS port)
d1389 5
a1393 1
   return(InPortLong(port));
d1397 1
a1397 1
SiS_SetRegANDOR(SISIOADDRESS Port,USHORT Index,USHORT DataAND,USHORT DataOR)
d1399 2
a1400 5
  USHORT temp;

  temp = SiS_GetReg(Port,Index);
  temp = (temp & (DataAND)) | DataOR;
  SiS_SetReg(Port,Index,temp);
d1404 1
a1404 1
SiS_SetRegAND(SISIOADDRESS Port,USHORT Index,USHORT DataAND)
d1406 2
a1407 5
  USHORT temp;

  temp = SiS_GetReg(Port,Index);
  temp &= DataAND;
  SiS_SetReg(Port,Index,temp);
d1411 2
a1412 1
SiS_SetRegOR(SISIOADDRESS Port,USHORT Index,USHORT DataOR)
d1414 1
a1414 1
  USHORT temp;
d1416 10
a1425 3
  temp = SiS_GetReg(Port,Index);
  temp |= DataOR;
  SiS_SetReg(Port,Index,temp);
a1427 4
/*********************************************/
/*      HELPER: DisplayOn, DisplayOff        */
/*********************************************/

d1429 1
a1429 1
SiS_DisplayOn(SiS_Private *SiS_Pr)
d1431 2
a1432 1
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x01,0xDF,0x00);
d1436 2
a1437 1
SiS_DisplayOff(SiS_Private *SiS_Pr)
d1439 7
a1445 2
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x01,0xDF,0x20);
}
d1447 1
d1449 8
a1456 3
/*********************************************/
/*        HELPER: Init Port Addresses        */
/*********************************************/
d1458 23
a1480 29
void
SiSRegInit(SiS_Private *SiS_Pr, SISIOADDRESS BaseAddr)
{
   SiS_Pr->SiS_P3c4 = BaseAddr + 0x14;
   SiS_Pr->SiS_P3d4 = BaseAddr + 0x24;
   SiS_Pr->SiS_P3c0 = BaseAddr + 0x10;
   SiS_Pr->SiS_P3ce = BaseAddr + 0x1e;
   SiS_Pr->SiS_P3c2 = BaseAddr + 0x12;
   SiS_Pr->SiS_P3ca = BaseAddr + 0x1a;
   SiS_Pr->SiS_P3c6 = BaseAddr + 0x16;
   SiS_Pr->SiS_P3c7 = BaseAddr + 0x17;
   SiS_Pr->SiS_P3c8 = BaseAddr + 0x18;
   SiS_Pr->SiS_P3c9 = BaseAddr + 0x19;
   SiS_Pr->SiS_P3cb = BaseAddr + 0x1b;
   SiS_Pr->SiS_P3cd = BaseAddr + 0x1d;
   SiS_Pr->SiS_P3da = BaseAddr + 0x2a;
   SiS_Pr->SiS_Part1Port = BaseAddr + SIS_CRT2_PORT_04;     /* Digital video interface registers (LCD) */
   SiS_Pr->SiS_Part2Port = BaseAddr + SIS_CRT2_PORT_10;     /* 301 TV Encoder registers */
   SiS_Pr->SiS_Part3Port = BaseAddr + SIS_CRT2_PORT_12;     /* 301 Macrovision registers */
   SiS_Pr->SiS_Part4Port = BaseAddr + SIS_CRT2_PORT_14;     /* 301 VGA2 (and LCD) registers */
   SiS_Pr->SiS_Part5Port = BaseAddr + SIS_CRT2_PORT_14 + 2; /* 301 palette address port registers */
   SiS_Pr->SiS_DDC_Port = BaseAddr + 0x14;                  /* DDC Port ( = P3C4, SR11/0A) */
   SiS_Pr->SiS_VidCapt = BaseAddr + SIS_VIDEO_CAPTURE;
   SiS_Pr->SiS_VidPlay = BaseAddr + SIS_VIDEO_PLAYBACK;
}

/*********************************************/
/*             HELPER: GetSysFlags           */
/*********************************************/
d1482 1
a1482 4
static void
SiS_GetSysFlags(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   unsigned char cr5f, temp1, temp2;
d1484 30
a1513 47
   /* 661 and newer: NEVER write non-zero to SR11[7:4] */
   /* (SR11 is used for DDC and in enable/disablebridge) */
   SiS_Pr->SiS_SensibleSR11 = FALSE;
   SiS_Pr->SiS_MyCR63 = 0x63;
   if(HwInfo->jChipType >= SIS_661) {
      SiS_Pr->SiS_SensibleSR11 = TRUE;
      SiS_Pr->SiS_MyCR63 = 0x53;
   }

   /* You should use the macros, not these flags directly */

   SiS_Pr->SiS_SysFlags = 0;
   if(HwInfo->jChipType == SIS_650) {
      cr5f = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f) & 0xf0;
      SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x5c,0x07);
      temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5c) & 0xf8;
      SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x5c,0xf8);
      temp2 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5c) & 0xf8;
      if((!temp1) || (temp2)) {
         switch(cr5f) {
	    case 0x80:
	    case 0x90:
	    case 0xc0:
	       SiS_Pr->SiS_SysFlags |= SF_IsM650;  break;
	    case 0xa0:
	    case 0xb0:
	    case 0xe0:
	       SiS_Pr->SiS_SysFlags |= SF_Is651;   break;
	 }
      } else {
         switch(cr5f) {
	    case 0x90:
	       temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5c) & 0xf8;
	       switch(temp1) {
	          case 0x00: SiS_Pr->SiS_SysFlags |= SF_IsM652; break;
		  case 0x40: SiS_Pr->SiS_SysFlags |= SF_IsM653; break;
		  default:   SiS_Pr->SiS_SysFlags |= SF_IsM650; break;
	       }
	       break;
	    case 0xb0:
	       SiS_Pr->SiS_SysFlags |= SF_Is652;  break;
	    default:
	       SiS_Pr->SiS_SysFlags |= SF_IsM650; break;
	 }
      }
   }
}
d1515 2
a1516 3
/*********************************************/
/*         HELPER: Init PCI & Engines        */
/*********************************************/
d1518 27
a1544 45
static void
SiSInitPCIetc(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   switch(HwInfo->jChipType) {
   case SIS_300:
   case SIS_540:
   case SIS_630:
   case SIS_730:
      /* Set - PCI LINEAR ADDRESSING ENABLE (0x80)
       *     - RELOCATED VGA IO  (0x20)
       *     - MMIO ENABLE (0x1)
       */
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x20,0xa1);
      /*  - Enable 2D (0x40)
       *  - Enable 3D (0x02)
       *  - Enable 3D Vertex command fetch (0x10) ?
       *  - Enable 3D command parser (0x08) ?
       */
      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x5A);
      break;
   case SIS_315H:
   case SIS_315:
   case SIS_315PRO:
   case SIS_650:
   case SIS_740:
   case SIS_330:
   case SIS_661:
   case SIS_741:
   case SIS_660:
   case SIS_760:
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x20,0xa1);
      /*  - Enable 2D (0x40)
       *  - Enable 3D (0x02)
       *  - Enable 3D vertex command fetch (0x10)
       *  - Enable 3D command parser (0x08)
       *  - Enable 3D G/L transformation engine (0x80)
       */
      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0xDA);
      break;
   case SIS_550:
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x20,0xa1);
      /* No 3D engine ! */
      /*  - Enable 2D (0x40)
       */
      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x1E,0x40);
d1548 2
a1549 6
/*********************************************/
/*             HELPER: SetLVDSetc            */
/*********************************************/

void
SiSSetLVDSetc(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d1551 2
a1552 1
   ULONG   temp;
d1554 2
a1555 6
   SiS_Pr->SiS_IF_DEF_LVDS = 0;
   SiS_Pr->SiS_IF_DEF_TRUMPION = 0;
   SiS_Pr->SiS_IF_DEF_CH70xx = 0;
   SiS_Pr->SiS_IF_DEF_DSTN = 0;
   SiS_Pr->SiS_IF_DEF_FSTN = 0;
   SiS_Pr->SiS_IF_DEF_CONEX = 0;
d1557 1
a1557 1
   SiS_Pr->SiS_ChrontelInit = 0;
d1559 14
a1572 43
   switch(HwInfo->jChipType) {
#ifdef SIS300
   case SIS_540:
   case SIS_630:
   case SIS_730:
        /* Check for SiS30x first */
        temp = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x00);
	if((temp == 1) || (temp == 2)) return;
      	temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
      	temp = (temp & 0x0E) >> 1;
      	if((temp >= 2) && (temp <= 5)) SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)   SiS_Pr->SiS_IF_DEF_TRUMPION = 1;
      	if((temp == 4) || (temp == 5)) {
		/* Save power status (and error check) - UNUSED */
		SiS_Pr->SiS_Backup70xx = SiS_GetCH700x(SiS_Pr, 0x0e);
		SiS_Pr->SiS_IF_DEF_CH70xx = 1;
        }
	break;
#endif
#ifdef SIS315H
   case SIS_550:
   case SIS_650:
   case SIS_740:
   case SIS_330:
        temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);
      	temp = (temp & 0x0E) >> 1;
      	if((temp >= 2) && (temp <= 3)) SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)  SiS_Pr->SiS_IF_DEF_CH70xx = 2;
        break;
   case SIS_661:
   case SIS_741:
   case SIS_660:
   case SIS_760:
        temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
      	temp = (temp & 0xe0) >> 5;
      	if((temp >= 2) && (temp <= 3)) SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)  SiS_Pr->SiS_IF_DEF_CH70xx = 2;
	if(temp == 4)  SiS_Pr->SiS_IF_DEF_CONEX = 1;  /* Not yet supported */
        break;
#endif
   default:
        break;
   }
d1575 6
a1580 3
/*********************************************/
/*          HELPER: Enable DSTN/FSTN         */
/*********************************************/
d1582 16
a1597 4
void
SiS_SetEnableDstn(SiS_Private *SiS_Pr, int enable)
{
   SiS_Pr->SiS_IF_DEF_DSTN = enable ? 1 : 0;
d1600 2
a1601 2
void
SiS_SetEnableFstn(SiS_Private *SiS_Pr, int enable)
d1603 18
a1620 1
   SiS_Pr->SiS_IF_DEF_FSTN = enable ? 1 : 0;
d1623 2
a1624 6
/*********************************************/
/*        HELPER: Determine ROM usage        */
/*********************************************/

static void
SiSDetermineROMUsage(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d1626 3
a1628 1
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
d1630 5
a1634 32
   if((ROMAddr) && (HwInfo->UseROM)) {
      if((ROMAddr[0x00] != 0x55) || (ROMAddr[0x01] != 0xAA)) {
         SiS_Pr->SiS_UseROM = FALSE;
      } else if(HwInfo->jChipType == SIS_300) {
        /* 300: We check if the code starts below 0x220 by
	 * checking the jmp instruction at the beginning
	 * of the BIOS image.
	 */
	 if((ROMAddr[3] == 0xe9) &&
	    ((ROMAddr[5] << 8) | ROMAddr[4]) > 0x21a)
	    SiS_Pr->SiS_UseROM = TRUE;
	 else
	    SiS_Pr->SiS_UseROM = FALSE;
      } else if(HwInfo->jChipType < SIS_315H) {
#if 0
        /* Rest of 300 series: We don't use the ROM image if
	 * the BIOS version < 2.0.0 as such old BIOSes don't
	 * have the needed data at the expected locations.
	 */
         if(ROMAddr[0x06] < '2')  SiS_Pr->SiS_UseROM = FALSE;
	 else                     SiS_Pr->SiS_UseROM = TRUE;
#else
	/* Sony's VAIO BIOS 1.09 follows the standard, so perhaps
	 * the others do as well
	 */
	 SiS_Pr->SiS_UseROM = TRUE;
#endif
      } else {
         /* 315/330 series stick to the standard */
	 SiS_Pr->SiS_UseROM = TRUE;
      }
   } else SiS_Pr->SiS_UseROM = FALSE;
d1636 7
d1645 24
a1668 3
/*********************************************/
/*        HELPER: SET SEGMENT REGISTERS      */
/*********************************************/
d1670 2
a1671 2
static void
SiS_SetSegRegLower(SiS_Private *SiS_Pr, USHORT value)
d1673 5
a1677 1
   USHORT temp;
d1679 25
a1703 7
   value &= 0x00ff;
   temp = SiS_GetRegByte(SiS_Pr->SiS_P3cb) & 0xf0;
   temp |= (value >> 4);
   SiS_SetRegByte(SiS_Pr->SiS_P3cb, temp);
   temp = SiS_GetRegByte(SiS_Pr->SiS_P3cd) & 0xf0;
   temp |= (value & 0x0f);
   SiS_SetRegByte(SiS_Pr->SiS_P3cd, temp);
d1706 2
a1707 2
static void
SiS_SetSegRegUpper(SiS_Private *SiS_Pr, USHORT value)
d1709 8
a1716 1
   USHORT temp;
d1718 4
a1721 7
   value &= 0x00ff;
   temp = SiS_GetRegByte(SiS_Pr->SiS_P3cb) & 0x0f;
   temp |= (value & 0xf0);
   SiS_SetRegByte(SiS_Pr->SiS_P3cb, temp);
   temp = SiS_GetRegByte(SiS_Pr->SiS_P3cd) & 0x0f;
   temp |= (value << 4);
   SiS_SetRegByte(SiS_Pr->SiS_P3cd, temp);
d1724 3
a1726 2
static void
SiS_SetSegmentReg(SiS_Private *SiS_Pr, USHORT value)
d1728 13
a1740 2
   SiS_SetSegRegLower(SiS_Pr, value);
   SiS_SetSegRegUpper(SiS_Pr, value);
d1743 2
a1744 2
static void
SiS_ResetSegmentReg(SiS_Private *SiS_Pr)
d1746 15
a1760 1
   SiS_SetSegmentReg(SiS_Pr, 0);
d1763 2
a1764 2
static void
SiS_SetSegmentRegOver(SiS_Private *SiS_Pr, USHORT value)
a1765 1
   USHORT temp = value >> 8;
d1767 2
a1768 5
   temp &= 0x07;
   temp |= (temp << 4);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x1d,temp);
   SiS_SetSegmentReg(SiS_Pr, value);
}
d1770 14
a1783 4
static void
SiS_ResetSegmentRegOver(SiS_Private *SiS_Pr)
{
   SiS_SetSegmentRegOver(SiS_Pr, 0);
d1786 5
a1790 2
static void
SiS_ResetSegmentRegisters(SiS_Private *SiS_Pr,PSIS_HW_INFO HwInfo)
d1792 27
a1818 3
   if((IS_SIS65x) || (HwInfo->jChipType >= SIS_661)) {
      SiS_ResetSegmentReg(SiS_Pr);
      SiS_ResetSegmentRegOver(SiS_Pr);
d1822 10
a1831 3
/*********************************************/
/*             HELPER: GetVBType             */
/*********************************************/
d1833 1
d1835 1
a1835 1
SiS_GetVBType(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d1837 3
a1839 1
  USHORT flag=0, rev=0, nolcd=0;
d1841 8
a1848 1
  SiS_Pr->SiS_VBType = 0;
d1850 1
a1850 1
  if(SiS_Pr->SiS_IF_DEF_LVDS == 1) return;
d1852 2
a1853 1
  flag = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x00);
d1855 1
a1855 1
  if(flag > 3) return;
d1857 1
a1857 1
  rev = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x01);
d1859 3
a1861 28
  if(flag >= 2) {
     SiS_Pr->SiS_VBType = VB_SIS302B;
  } else if(flag == 1) {
     SiS_Pr->SiS_VBType = VB_SIS301;
     if(rev >= 0xC0) {
       	SiS_Pr->SiS_VBType = VB_SIS301C;
     } else if(rev >= 0xB0) {
       	SiS_Pr->SiS_VBType = VB_SIS301B;
	/* Check if 30xB DH version (no LCD support, use Panel Link instead) */
    	nolcd = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x23);
        if(!(nolcd & 0x02)) SiS_Pr->SiS_VBType |= VB_NoLCD;
     }
  }
  if(SiS_Pr->SiS_VBType & (VB_SIS301B | VB_SIS301C | VB_SIS302B)) {
     if(rev >= 0xD0) {
	SiS_Pr->SiS_VBType &= ~(VB_SIS301B | VB_SIS301C | VB_SIS302B | VB_NoLCD);
	if(rev >= 0xE0) {
	   flag = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x39);
	   if(flag == 0xff)
	      SiS_Pr->SiS_VBType |= VB_SIS302LV;
	   else
	      SiS_Pr->SiS_VBType |= VB_SIS302ELV;
	} else {
	   SiS_Pr->SiS_VBType |= VB_SIS301LV;
	}
     }
  }
}
d1863 1
a1863 3
/*********************************************/
/*            HELPER: GetDRAMSize            */
/*********************************************/
d1865 2
a1866 8
#ifndef LINUX_XF86
static ULONG
GetDRAMSize(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  ULONG   AdapterMemorySize = 0;
#ifdef SIS315H
  USHORT  counter;
#endif
d1868 4
a1871 16
  switch(HwInfo->jChipType) {
#ifdef SIS315H
  case SIS_315H:
  case SIS_315:
  case SIS_315PRO:
    	counter = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
	AdapterMemorySize = 1 << ((counter & 0xF0) >> 4);
	counter >>= 2;
	counter &= 0x03;
	if(counter == 0x02) {
		AdapterMemorySize += (AdapterMemorySize / 2);      /* DDR asymetric */
	} else if(counter != 0) {
		AdapterMemorySize <<= 1;                           /* SINGLE_CHANNEL_2_RANK or DUAL_CHANNEL_1_RANK */
	}
	AdapterMemorySize *= (1024*1024);
        break;
d1873 12
a1884 28
  case SIS_330:
    	counter = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
	AdapterMemorySize = 1 << ((counter & 0xF0) >> 4);
	counter &= 0x0c;
	if(counter != 0) {
		AdapterMemorySize <<= 1;
	}
	AdapterMemorySize *= (1024*1024);
	break;

  case SIS_550:
  case SIS_650:
  case SIS_740:
  	counter = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14) & 0x3F;
      	counter++;
      	AdapterMemorySize = counter * 4;
      	AdapterMemorySize *= (1024*1024);
	break;

  case SIS_661:
  case SIS_741:
  case SIS_660:
  case SIS_760:
        counter = (SiS_GetReg(SiS_Pr->SiS_P3c4,0x79) & 0xf0) >> 4;
	AdapterMemorySize = 1 << counter;
      	AdapterMemorySize *= (1024*1024);
        break;
#endif
d1886 1
a1886 13
#ifdef SIS300
  case SIS_300:
  case SIS_540:
  case SIS_630:
  case SIS_730:
      	AdapterMemorySize = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14) & 0x3F;
      	AdapterMemorySize++;
      	AdapterMemorySize *= (1024*1024);
	break;
#endif
  default:
        break;
  }
d1888 2
a1889 1
  return AdapterMemorySize;
d1893 2
a1894 8
/*********************************************/
/*           HELPER: Check RAM size          */
/*********************************************/

#ifndef LINUX_XF86
static BOOLEAN
SiS_CheckMemorySize(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                    USHORT ModeNo, USHORT ModeIdIndex)
d1896 6
a1901 2
  USHORT memorysize,modeflag;
  ULONG  temp;
d1903 8
a1910 19
  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     if(ModeNo <= 0x13) {
        modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     } else {
        modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     }
  }

  memorysize = modeflag & MemoryInfoFlag;
  memorysize >>= MemorySizeShift;		/* Get required memory size */
  memorysize++;

  temp = GetDRAMSize(SiS_Pr, HwInfo);       	/* Get adapter memory size (in MB) */
  temp /= (1024*1024);

  if(temp < memorysize) return(FALSE);
  else return(TRUE);
a1911 1
#endif
d1913 1
a1913 3
/*********************************************/
/*           HELPER: Get DRAM type           */
/*********************************************/
d1916 2
a1917 2
static UCHAR
SiS_Get310DRAMType(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d1924 6
a1929 7
     if(HwInfo->jChipType >= SIS_661) {
        data = SiS_GetReg(SiS_Pr->SiS_P3d4,0x78) & 0x07;
     } else if(IS_SIS550650740) {
        data = SiS_GetReg(SiS_Pr->SiS_P3c4,0x13) & 0x07;
     } else {	/* 315, 330 */
        data = SiS_GetReg(SiS_Pr->SiS_P3c4,0x3a) & 0x03;
        if(HwInfo->jChipType == SIS_330) {
d1931 1
a1931 1
	      temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x5f) & 0x30;
d1947 3
d1951 3
a1953 2
USHORT
SiS_GetMCLK(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d1955 18
a1972 1
  USHORT index;
d1974 28
a2001 9
  index = SiS_Get310DRAMType(SiS_Pr, HwInfo);
  if(HwInfo->jChipType >= SIS_661) {
     return(SiS_Pr->SiS_MCLKData_0[index].CLOCK);
  } else if(index >= 4) {
     index -= 4;
     return(SiS_Pr->SiS_MCLKData_1[index].CLOCK);
  } else {
     return(SiS_Pr->SiS_MCLKData_0[index].CLOCK);
  }
d2003 38
d2042 9
d2052 12
a2063 3
/*********************************************/
/*           HELPER: ClearBuffer             */
/*********************************************/
d2065 2
a2066 3
#ifndef LINUX_XF86
static void
SiS_ClearBuffer(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo)
d2068 19
a2086 4
  UCHAR   *VideoMemoryAddress = HwInfo->pjVideoMemoryAddress;
  ULONG   AdapterMemorySize  = (ULONG)HwInfo->ulVideoMemorySize;
  USHORT  *pBuffer;
  int i;
d2088 22
a2109 4
  if(SiS_Pr->SiS_ModeType >= ModeEGA) {
     if(ModeNo > 0x13) {
        AdapterMemorySize = GetDRAMSize(SiS_Pr, HwInfo);
        SiS_SetMemory(VideoMemoryAddress,AdapterMemorySize,0);
d2111 2
a2112 3
        pBuffer = (USHORT *)VideoMemoryAddress;
        for(i=0; i<0x4000; i++)
           pBuffer[i] = 0x0000;
d2114 2
a2115 9
  } else {
     pBuffer = (USHORT *)VideoMemoryAddress;
     if(SiS_Pr->SiS_ModeType < ModeCGA) {
        for(i=0; i<0x4000; i++)
           pBuffer[i] = 0x0720;
     } else {
        SiS_SetMemory(VideoMemoryAddress,0x8000,0);
     }
  }
a2116 5
#endif

/*********************************************/
/*           HELPER: SearchModeID            */
/*********************************************/
d2118 7
d2126 2
a2127 1
SiS_SearchModeID(SiS_Private *SiS_Pr, USHORT *ModeNo, USHORT *ModeIdIndex)
d2129 4
a2132 1
   UCHAR VGAINFO = SiS_Pr->SiS_VGAINFO;
d2134 11
a2144 1
   if(*ModeNo <= 0x13) {
d2146 1
a2146 1
      if((*ModeNo) <= 0x05) (*ModeNo) |= 0x01;
d2148 2
a2149 4
      for(*ModeIdIndex = 0; ;(*ModeIdIndex)++) {
         if(SiS_Pr->SiS_SModeIDTable[*ModeIdIndex].St_ModeID == (*ModeNo)) break;
         if(SiS_Pr->SiS_SModeIDTable[*ModeIdIndex].St_ModeID == 0xFF)   return FALSE;
      }
d2151 14
a2164 10
      if(*ModeNo == 0x07) {
          if(VGAINFO & 0x10) (*ModeIdIndex)++;   /* 400 lines */
          /* else 350 lines */
      }
      if(*ModeNo <= 0x03) {
         if(!(VGAINFO & 0x80)) (*ModeIdIndex)++;
         if(VGAINFO & 0x10)    (*ModeIdIndex)++; /* 400 lines  */
         /* else 350 lines  */
      }
      /* else 200 lines  */
d2166 11
d2179 2
a2180 4
      for(*ModeIdIndex = 0; ;(*ModeIdIndex)++) {
         if(SiS_Pr->SiS_EModeIDTable[*ModeIdIndex].Ext_ModeID == (*ModeNo)) break;
         if(SiS_Pr->SiS_EModeIDTable[*ModeIdIndex].Ext_ModeID == 0xFF)      return FALSE;
      }
d2182 2
a2184 2
   return TRUE;
}
d2186 3
a2188 3
/*********************************************/
/*            HELPER: GetModePtr             */
/*********************************************/
d2190 1
a2190 4
UCHAR
SiS_GetModePtr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex)
{
   UCHAR index;
d2192 1
a2192 8
   if(ModeNo <= 0x13) {
     	index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_StTableIndex;
   } else {
     	if(SiS_Pr->SiS_ModeType <= 0x02) index = 0x1B;    /* 02 -> ModeEGA  */
     	else index = 0x0F;
   }
   return index;
}
d2194 1
a2194 30
/*********************************************/
/*           HELPER: LowModeTests            */
/*********************************************/

static BOOLEAN
SiS_DoLowModeTest(SiS_Private *SiS_Pr, USHORT ModeNo, PSIS_HW_INFO HwInfo)
{
    USHORT temp,temp1,temp2;

    if((ModeNo != 0x03) && (ModeNo != 0x10) && (ModeNo != 0x12))
       return(1);
    temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x11);
    SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x11,0x80);
    temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x00);
    SiS_SetReg(SiS_Pr->SiS_P3d4,0x00,0x55);
    temp2 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x00);
    SiS_SetReg(SiS_Pr->SiS_P3d4,0x00,temp1);
    SiS_SetReg(SiS_Pr->SiS_P3d4,0x11,temp);
    if((HwInfo->jChipType >= SIS_315H) ||
       (HwInfo->jChipType == SIS_300)) {
       if(temp2 == 0x55) return(0);
       else return(1);
    } else {
       if(temp2 != 0x55) return(1);
       else {
          SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x35,0x01);
          return(0);
       }
    }
}
d2196 1
a2196 7
static void
SiS_SetLowModeTest(SiS_Private *SiS_Pr, USHORT ModeNo, PSIS_HW_INFO HwInfo)
{
    if(SiS_DoLowModeTest(SiS_Pr, ModeNo, HwInfo)) {
       SiS_Pr->SiS_SetFlag |= LowModeTests;
    }
}
d2198 2
a2199 3
/*********************************************/
/*           HELPER: GetColorDepth           */
/*********************************************/
d2201 2
a2202 6
USHORT
SiS_GetColorDepth(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex)
{
  USHORT ColorDepth[6] = { 1, 2, 4, 4, 6, 8};
  SHORT  index;
  USHORT modeflag;
d2204 1
a2204 9
  /* Do NOT check UseCustomMode, will skrew up FIFO */
  if(ModeNo == 0xfe) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     if(ModeNo <= 0x13)
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     else
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }
d2206 7
a2212 4
  index = (modeflag & ModeInfoFlag) - ModeEGA;
  if(index < 0) index = 0;
  return(ColorDepth[index]);
}
d2214 2
a2215 3
/*********************************************/
/*             HELPER: GetOffset             */
/*********************************************/
d2217 7
a2223 5
USHORT
SiS_GetOffset(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex,
              USHORT RefreshRateTableIndex,PSIS_HW_INFO HwInfo)
{
  USHORT temp,colordepth,infoflag;
d2225 1
a2225 8
  if(SiS_Pr->UseCustomMode) {
     infoflag = SiS_Pr->CInfoFlag;
     temp = SiS_Pr->CHDisplay / 16;
  } else {
     infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
     temp = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeOffset;
     temp = SiS_Pr->SiS_ScreenOffset[temp];
  }
d2227 4
a2230 1
  colordepth = SiS_GetColorDepth(SiS_Pr,ModeNo,ModeIdIndex);
d2232 5
a2236 1
  if(infoflag & InterlaceMode) temp <<= 1;
d2238 8
a2245 1
  temp *= colordepth;
d2247 2
a2248 8
  if( ( ((ModeNo >= 0x26) && (ModeNo <= 0x28)) ||
        ModeNo == 0x3f ||
	ModeNo == 0x42 ||
	ModeNo == 0x45 ) ||
      (SiS_Pr->UseCustomMode && (SiS_Pr->CHDisplay % 16)) ) {
     colordepth >>= 1;
     temp += colordepth;
  }
d2250 2
a2251 2
  return(temp);
}
d2253 2
a2254 3
/*********************************************/
/*                   SEQ                     */
/*********************************************/
d2256 16
a2271 5
static void
SiS_SetSeqRegs(SiS_Private *SiS_Pr, USHORT StandTableIndex, PSIS_HW_INFO HwInfo)
{
   UCHAR SRdata;
   USHORT i;
d2273 3
a2275 1
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x00,0x03);           	/* Set SR0  */
d2277 2
a2278 1
   SRdata = SiS_Pr->SiS_StandTable[StandTableIndex].SR[0];
d2280 1
d2282 5
a2286 15
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
         SRdata |= 0x01;
      }
      if(HwInfo->jChipType >= SIS_661) {
         if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToTV)) {
	    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
               SRdata |= 0x01;          		/* 8 dot clock  */
            }
	 }
      } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
         if(SiS_Pr->SiS_VBType & VB_NoLCD) {
	    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
               SRdata |= 0x01;          		/* 8 dot clock  */
            }
	 }
d2290 26
a2315 14
   if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
      if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
         if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
            if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
               SRdata |= 0x01;        			/* 8 dot clock  */
            }
         }
      }
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
         if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
            SRdata |= 0x01;          			/* 8 dot clock  */
         }
      }
   }
d2317 1
a2317 1
   SRdata |= 0x20;                			/* screen off  */
d2319 1
a2319 1
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x01,SRdata);
d2321 1
a2321 5
   for(i = 2; i <= 4; i++) {
      SRdata = SiS_Pr->SiS_StandTable[StandTableIndex].SR[i-1];
      SiS_SetReg(SiS_Pr->SiS_P3c4,i,SRdata);
   }
}
d2323 1
a2323 3
/*********************************************/
/*                  MISC                     */
/*********************************************/
d2325 1
a2325 4
static void
SiS_SetMiscRegs(SiS_Private *SiS_Pr, USHORT StandTableIndex, PSIS_HW_INFO HwInfo)
{
   UCHAR Miscdata;
d2327 2
a2328 1
   Miscdata = SiS_Pr->SiS_StandTable[StandTableIndex].MISC;
d2330 9
a2338 6
   if(HwInfo->jChipType < SIS_661) {
      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
         if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
            Miscdata |= 0x0C;
         }
      }
d2341 2
a2342 2
   SiS_SetRegByte(SiS_Pr->SiS_P3c2,Miscdata);
}
d2344 2
a2345 3
/*********************************************/
/*                  CRTC                     */
/*********************************************/
d2347 1
a2347 6
static void
SiS_SetCRTCRegs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                USHORT StandTableIndex)
{
  UCHAR CRTCdata;
  USHORT i;
d2349 3
a2351 1
  SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);                       /* Unlock CRTC */
d2353 2
a2354 14
  for(i = 0; i <= 0x18; i++) {
     CRTCdata = SiS_Pr->SiS_StandTable[StandTableIndex].CRTC[i];
     SiS_SetReg(SiS_Pr->SiS_P3d4,i,CRTCdata);                     /* Set CRTC(3d4) */
  }
  if( ( (HwInfo->jChipType == SIS_630) ||
        (HwInfo->jChipType == SIS_730) )  &&
      (HwInfo->jChipRevision >= 0x30) ) {       	   /* for 630S0 */
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToTV)) {
           SiS_SetReg(SiS_Pr->SiS_P3d4,0x18,0xFE);
        }
     }
  }
}
d2356 11
a2366 3
/*********************************************/
/*                   ATT                     */
/*********************************************/
d2368 1
a2368 6
static void
SiS_SetATTRegs(SiS_Private *SiS_Pr, USHORT StandTableIndex,
               PSIS_HW_INFO HwInfo)
{
   UCHAR ARdata;
   USHORT i;
d2370 3
a2372 7
   for(i = 0; i <= 0x13; i++) {
      ARdata = SiS_Pr->SiS_StandTable[StandTableIndex].ATTR[i];
#if 0
      if((i <= 0x0f) || (i == 0x11)) {
         if(ds:489 & 0x08) {
	    continue;
         }
d2374 1
a2374 50
#endif
      if(i == 0x13) {
         /* Pixel shift. If screen on LCD or TV is shifted left or right,
          * this might be the cause.
          */
         if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
            if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)  ARdata=0;
         }
         if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
            if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
               if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
                  if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) ARdata=0;
               }
            }
         }
	 if(HwInfo->jChipType >= SIS_661) {
	    if(SiS_Pr->SiS_VBInfo & (SetCRT2ToTV | SetCRT2ToLCD)) {
	       if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) ARdata=0;
	    }
	 } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
            if(HwInfo->jChipType >= SIS_315H) {
	       if(IS_SIS550650740660) {
	          /* 315, 330 don't do this */
	          if(SiS_Pr->SiS_VBType & VB_SIS301B302B) {
	             if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) ARdata=0;
	          } else {
	             ARdata = 0;
	          }
	       }
	    } else {
               if(SiS_Pr->SiS_VBInfo & SetInSlaveMode)  ARdata=0;
	    }
         }
      }
      SiS_GetRegByte(SiS_Pr->SiS_P3da);                         /* reset 3da  */
      SiS_SetRegByte(SiS_Pr->SiS_P3c0,i);                       /* set index  */
      SiS_SetRegByte(SiS_Pr->SiS_P3c0,ARdata);                  /* set data   */
   }
   SiS_GetRegByte(SiS_Pr->SiS_P3da);                            /* reset 3da  */
   SiS_SetRegByte(SiS_Pr->SiS_P3c0,0x14);                       /* set index  */
   SiS_SetRegByte(SiS_Pr->SiS_P3c0,0x00);                       /* set data   */

   SiS_GetRegByte(SiS_Pr->SiS_P3da);
   SiS_SetRegByte(SiS_Pr->SiS_P3c0,0x20);			/* Enable Attribute  */
   SiS_GetRegByte(SiS_Pr->SiS_P3da);
}

/*********************************************/
/*                   GRC                     */
/*********************************************/
d2376 4
a2379 5
static void
SiS_SetGRCRegs(SiS_Private *SiS_Pr, USHORT StandTableIndex)
{
   UCHAR GRdata;
   USHORT i;
d2381 5
a2385 3
   for(i = 0; i <= 0x08; i++) {
      GRdata = SiS_Pr->SiS_StandTable[StandTableIndex].GRC[i];
      SiS_SetReg(SiS_Pr->SiS_P3ce,i,GRdata);
d2388 21
a2408 3
   if(SiS_Pr->SiS_ModeType > ModeVGA) {
      /* 256 color disable */
      SiS_SetRegAND(SiS_Pr->SiS_P3ce,0x05,0xBF);
a2409 1
}
d2411 2
a2412 3
/*********************************************/
/*          CLEAR EXTENDED REGISTERS         */
/*********************************************/
d2414 7
a2420 4
static void
SiS_ClearExt1Regs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  USHORT i;
d2422 8
a2429 3
  for(i = 0x0A; i <= 0x0E; i++) {
     SiS_SetReg(SiS_Pr->SiS_P3c4,i,0x00);
  }
d2431 1
a2431 4
  if(HwInfo->jChipType >= SIS_315H) {
     SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x37,0xFE);
  }
}
d2433 5
a2437 3
/*********************************************/
/*                 RESET VCLK                */
/*********************************************/
d2439 6
a2444 11
static void
SiS_ResetCRT1VCLK(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   if(HwInfo->jChipType >= SIS_315H) {
      if(HwInfo->jChipType < SIS_661) {
         if(SiS_Pr->SiS_IF_DEF_LVDS == 0) return;
      }
   } else {
      if((SiS_Pr->SiS_IF_DEF_LVDS == 0) &&
         (!(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV)) ) {
	 return;
d2448 4
a2451 16
   if(HwInfo->jChipType >= SIS_315H) {
      SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x31,0xCF,0x20);
   } else {
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x20);
   }
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2B,SiS_Pr->SiS_VCLKData[1].SR2B);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2C,SiS_Pr->SiS_VCLKData[1].SR2C);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2D,0x80);
   if(HwInfo->jChipType >= SIS_315H) {
      SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x31,0xcf,0x10);
   } else {
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x10);
   }
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2B,SiS_Pr->SiS_VCLKData[0].SR2B);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2C,SiS_Pr->SiS_VCLKData[0].SR2C);
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x2D,0x80);
d2453 2
d2456 8
a2463 6
/*********************************************/
/*                  SYNC                     */
/*********************************************/

static void
SiS_SetCRT1Sync(SiS_Private *SiS_Pr, USHORT RefreshRateTableIndex)
d2465 5
a2469 1
  USHORT sync;
d2471 10
a2480 5
  if(SiS_Pr->UseCustomMode) {
     sync = SiS_Pr->CInfoFlag >> 8;
  } else {
     sync = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag >> 8;
  }
d2482 1
a2482 4
  sync &= 0xC0;
  sync |= 0x2f;
  SiS_SetRegByte(SiS_Pr->SiS_P3c2,sync);
}
d2484 5
a2488 11
/*********************************************/
/*                  CRTC/2                   */
/*********************************************/

#ifdef SIS315H
static void
SiS_GetLCDACRT1Ptr(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
		   USHORT RefreshRateTableIndex, USHORT *ResIndex,
		   USHORT *DisplayType)
 {
  USHORT modeflag = 0;
d2490 1
a2490 7
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     *ResIndex = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     *ResIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT2CRTC;
  }
d2492 1
a2492 1
  *ResIndex &= 0x3F;
d2494 1
a2494 3
  *DisplayType = SiS_Pr->SiS_LCDResInfo;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) *DisplayType += 32;
  if(modeflag & HalfDCLK)                 *DisplayType += 16;
d2496 4
a2499 13
  if(SiS_Pr->SiS_CustomT == CUT_COMPAQ1280) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1280x1024) {
        *DisplayType = 100;
	if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) *DisplayType += 2;
        if(modeflag & HalfDCLK)                 *DisplayType += 1;
     }
  } else if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
     if(SiS_Pr->SiS_LCDResInfo == SiS_Pr->SiS_Panel1024x768) {
        *DisplayType = 104;
	if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) *DisplayType += 2;
        if(modeflag & HalfDCLK)                 *DisplayType += 1;
     }
  }
d2501 3
a2503 1
}
d2506 6
a2511 11
static void
SiS_SetCRT1CRTC(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                USHORT RefreshRateTableIndex,
		PSIS_HW_INFO HwInfo)
{
  UCHAR  index;
  USHORT temp,i,j,modeflag;
#ifdef SIS315H
  USHORT ResIndex,DisplayType;
  const SiS_LCDACRT1DataStruct *LCDACRT1Ptr = NULL;
#endif
d2513 3
a2515 1
  SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);		/* unlock cr0-7 */
d2517 1
a2517 1
  if(SiS_Pr->UseCustomMode) {
d2519 14
a2532 1
     modeflag = SiS_Pr->CModeFlag;
d2534 12
a2545 12
     for(i=0,j=0;i<=7;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
     }
     for(j=0x10;i<=10;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
     }
     for(j=0x15;i<=12;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
     }
     for(j=0x0A;i<=15;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3c4,j,SiS_Pr->CCRT1CRTC[i]);
     }
d2547 1
a2547 2
     temp = SiS_Pr->CCRT1CRTC[16] & 0xE0;
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x0E,temp);
d2549 10
a2558 3
     temp = (SiS_Pr->CCRT1CRTC[16] & 0x01) << 5;
     if(modeflag & DoubleScanMode) temp |= 0x80;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0x5F,temp);
d2560 3
a2562 1
  } else {
d2564 5
a2568 5
     if(ModeNo <= 0x13) {
        modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     } else {
        modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     }
d2570 8
a2577 1
     if((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
d2579 8
a2586 1
#ifdef SIS315H
d2588 23
a2610 1
        SiS_GetLCDACRT1Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, &ResIndex, &DisplayType);
d2612 3
a2614 27
        switch(DisplayType) {
        case Panel_1024x768      : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_1;     break;
        case Panel_1280x1024     : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_1;    break;
        case Panel_1400x1050     : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11400x1050_1;    break;
        case Panel_1600x1200     : LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11600x1200_1;    break;
        case Panel_1024x768  + 16: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_1_H;   break;
        case Panel_1280x1024 + 16: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_1_H;  break;
        case Panel_1400x1050 + 16: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11400x1050_1_H;  break;
        case Panel_1600x1200 + 16: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11600x1200_1_H;  break;
        case Panel_1024x768  + 32: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_2;     break;
        case Panel_1280x1024 + 32: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_2;    break;
        case Panel_1400x1050 + 32: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11400x1050_2;    break;
        case Panel_1600x1200 + 32: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11600x1200_2;    break;
        case Panel_1024x768  + 48: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_2_H;   break;
        case Panel_1280x1024 + 48: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_2_H;  break;
        case Panel_1400x1050 + 48: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11400x1050_2_H;  break;
        case Panel_1600x1200 + 48: LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11600x1200_2_H;  break;
        case 100:	  	   LCDACRT1Ptr = Compaq1280x1024_LCDACRT1_1;         break;
        case 101:		   LCDACRT1Ptr = Compaq1280x1024_LCDACRT1_1_H;       break;
        case 102:		   LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_2;    break;
        case 103:		   LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11280x1024_2_H;  break;
        case 104:		   LCDACRT1Ptr = Clevo1024x768_LCDACRT1_1;           break;
        case 105:		   LCDACRT1Ptr = Clevo1024x768_LCDACRT1_1_H;         break;
        case 106:		   LCDACRT1Ptr = Clevo1024x768_LCDACRT1_2;           break;
        case 107:		   LCDACRT1Ptr = Clevo1024x768_LCDACRT1_2_H;         break;
        default:                   LCDACRT1Ptr = SiS_Pr->SiS_LCDACRT11024x768_1;     break;
        }
d2616 2
a2617 19
        for(i=0, j=0; i<=0x07; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_P3d4,i,(LCDACRT1Ptr+ResIndex)->CR[j]);
        }
        for(i=0x10, j=8; i<=0x12; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_P3d4,i,(LCDACRT1Ptr+ResIndex)->CR[j]);
        }
        for(i=0x15, j=11; i<=0x16; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_P3d4,i,(LCDACRT1Ptr+ResIndex)->CR[j]);
        }
        for(i=0x0A, j=13; i<=0x0C; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_P3c4,i,(LCDACRT1Ptr+ResIndex)->CR[j]);
        }

        temp = (LCDACRT1Ptr+ResIndex)->CR[16] & 0xE0;
        SiS_SetReg(SiS_Pr->SiS_P3c4,0x0E,temp);

        temp = ((LCDACRT1Ptr+ResIndex)->CR[16] & 0x01) << 5;
        if(modeflag & DoubleScanMode) temp |= 0x80;
        SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0x5F,temp);
d2619 7
d2627 15
d2643 1
a2643 1
     } else {
d2645 12
a2656 1
        index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;
d2658 10
a2667 12
        for(i=0,j=0;i<=7;i++,j++) {
          SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
        }
        for(j=0x10;i<=10;i++,j++) {
          SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
        }
        for(j=0x15;i<=12;i++,j++) {
          SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
        }
        for(j=0x0A;i<=15;i++,j++) {
          SiS_SetReg(SiS_Pr->SiS_P3c4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
        }
d2669 6
a2674 2
        temp = SiS_Pr->SiS_CRT1Table[index].CR[16] & 0xE0;
        SiS_SetReg(SiS_Pr->SiS_P3c4,0x0E,temp);
d2676 4
a2679 3
        temp = ((SiS_Pr->SiS_CRT1Table[index].CR[16]) & 0x01) << 5;
        if(modeflag & DoubleScanMode)  temp |= 0x80;
        SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0x5F,temp);
d2681 4
a2684 2
     }
  }
d2686 1
a2686 1
  if(SiS_Pr->SiS_ModeType > ModeVGA) SiS_SetReg(SiS_Pr->SiS_P3d4,0x14,0x4F);
d2689 6
a2694 5
/*********************************************/
/*               OFFSET & PITCH              */
/*********************************************/
/*  (partly overruled by SetPitch() in XF86) */
/*********************************************/
d2696 2
a2697 4
static void
SiS_SetCRT1Offset(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                  USHORT RefreshRateTableIndex,
		  PSIS_HW_INFO HwInfo)
d2699 6
a2704 1
   USHORT temp, DisplayUnit, infoflag;
d2706 1
a2706 5
   if(SiS_Pr->UseCustomMode) {
      infoflag = SiS_Pr->CInfoFlag;
   } else {
      infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
   }
d2708 6
a2713 2
   DisplayUnit = SiS_GetOffset(SiS_Pr,ModeNo,ModeIdIndex,
                     	       RefreshRateTableIndex,HwInfo);
d2715 13
a2727 2
   temp = (DisplayUnit >> 8) & 0x0f;
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0xF0,temp);
d2729 5
a2733 2
   temp = DisplayUnit & 0xFF;
   SiS_SetReg(SiS_Pr->SiS_P3d4,0x13,temp);
d2735 7
a2741 1
   if(infoflag & InterlaceMode) DisplayUnit >>= 1;
d2743 7
a2749 6
   DisplayUnit <<= 5;
   temp = (DisplayUnit & 0xff00) >> 8;
   if (DisplayUnit & 0xff) temp++;
   temp++;
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x10,temp);
}
d2751 2
a2752 3
/*********************************************/
/*                  VCLK                     */
/*********************************************/
d2754 4
a2757 5
static void
SiS_SetCRT1VCLK(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                PSIS_HW_INFO HwInfo, USHORT RefreshRateTableIndex)
{
  USHORT  index=0, clka, clkb;
d2759 3
a2761 11
  if(SiS_Pr->UseCustomMode) {
     clka = SiS_Pr->CSR2B;
     clkb = SiS_Pr->CSR2C;
  } else {
     index = SiS_GetVCLK2Ptr(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
     if((SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
        clka = SiS_Pr->SiS_VBVCLKData[index].Part4_A;
	clkb = SiS_Pr->SiS_VBVCLKData[index].Part4_B;
     } else {
        clka = SiS_Pr->SiS_VCLKData[index].SR2B;
	clkb = SiS_Pr->SiS_VCLKData[index].SR2C;
d2765 2
a2766 4
  if(HwInfo->jChipType >= SIS_315H) {
     SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x31,0xCF);
  } else {
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x31,0x00);
d2769 1
a2769 2
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x2B,clka);
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x2C,clkb);
d2771 2
a2772 4
  if(HwInfo->jChipType >= SIS_315H) {
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x2D,0x01);
  } else {
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x2D,0x80);
a2773 1
}
d2775 6
a2780 3
/*********************************************/
/*                  FIFO                     */
/*********************************************/
d2783 14
a2796 6
static USHORT
SiS_DoCalcDelay(SiS_Private *SiS_Pr, USHORT MCLK, USHORT VCLK, USHORT colordepth, USHORT key)
{
  const UCHAR ThLowA[]   = { 61, 3,52, 5,68, 7,100,11,
                             43, 3,42, 5,54, 7, 78,11,
                             34, 3,37, 5,47, 7, 67,11 };
d2798 1
a2798 3
  const UCHAR ThLowB[]   = { 81, 4,72, 6,88, 8,120,12,
                             55, 4,54, 6,66, 8, 90,12,
                             42, 4,45, 6,55, 8, 75,12 };
d2800 1
a2800 1
  const UCHAR ThTiming[] = {  1, 2, 2, 3, 0, 1,  1, 2 };
d2802 5
a2806 2
  USHORT tempah, tempal, tempcl, tempbx, temp;
  ULONG  longtemp;
d2808 3
a2810 23
  tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x18);
  tempah &= 0x62;
  tempah >>= 1;
  tempal = tempah;
  tempah >>= 3;
  tempal |= tempah;
  tempal &= 0x07;
  tempcl = ThTiming[tempal];
  tempbx = SiS_GetReg(SiS_Pr->SiS_P3c4,0x16);
  tempbx >>= 6;
  tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
  tempah >>= 4;
  tempah &= 0x0c;
  tempbx |= tempah;
  tempbx <<= 1;
  if(key == 0) {
     tempal = ThLowA[tempbx + 1];
     tempal *= tempcl;
     tempal += ThLowA[tempbx];
  } else {
     tempal = ThLowB[tempbx + 1];
     tempal *= tempcl;
     tempal += ThLowB[tempbx];
a2811 5
  longtemp = tempal * VCLK * colordepth;
  temp = longtemp % (MCLK * 16);
  longtemp /= (MCLK * 16);
  if(temp) longtemp++;
  return((USHORT)longtemp);
d2814 3
a2816 2
static USHORT
SiS_CalcDelay(SiS_Private *SiS_Pr, USHORT VCLK, USHORT colordepth, USHORT MCLK)
d2818 1
a2818 1
  USHORT tempax, tempbx;
d2820 10
a2829 6
  tempbx = SiS_DoCalcDelay(SiS_Pr, MCLK, VCLK, colordepth, 0);
  tempax = SiS_DoCalcDelay(SiS_Pr, MCLK, VCLK, colordepth, 1);
  if(tempax < 4) tempax = 4;
  tempax -= 4;
  if(tempbx < tempax) tempbx = tempax;
  return(tempbx);
d2832 2
a2833 3
static void
SiS_SetCRT1FIFO_300(SiS_Private *SiS_Pr, USHORT ModeNo, PSIS_HW_INFO HwInfo,
                    USHORT RefreshRateTableIndex)
d2835 8
a2842 3
  USHORT  ThresholdLow = 0;
  USHORT  index, VCLK, MCLK, colorth=0;
  USHORT  tempah, temp;
d2844 5
a2848 1
  if(ModeNo > 0x13) {
d2850 1
a2850 7
     if(SiS_Pr->UseCustomMode) {
        VCLK = SiS_Pr->CSRClock;
     } else {
        index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
        index &= 0x3F;
        VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;             /* Get VCLK  */
     }
d2852 5
a2856 8
     switch (SiS_Pr->SiS_ModeType - ModeEGA) {     /* Get half colordepth */
        case 0 : colorth = 1; break;
        case 1 : colorth = 1; break;
        case 2 : colorth = 2; break;
        case 3 : colorth = 2; break;
        case 4 : colorth = 3; break;
        case 5 : colorth = 4; break;
     }
d2858 5
a2862 3
     index = SiS_GetReg(SiS_Pr->SiS_P3c4,0x3A);
     index &= 0x07;
     MCLK = SiS_Pr->SiS_MCLKData_0[index].CLOCK;           /* Get MCLK  */
d2864 6
a2869 3
     tempah = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
     tempah &= 0xc3;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x16,0x3c,tempah);
d2871 1
a2871 13
     do {
        ThresholdLow = SiS_CalcDelay(SiS_Pr, VCLK, colorth, MCLK);
        ThresholdLow++;
        if(ThresholdLow < 0x13) break;
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x16,0xfc);
        ThresholdLow = 0x13;
        tempah = SiS_GetReg(SiS_Pr->SiS_P3c4,0x16);
        tempah >>= 6;
        if(!(tempah)) break;
        tempah--;
        tempah <<= 6;
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x16,0x3f,tempah);
     } while(0);
d2873 1
a2873 1
  } else ThresholdLow = 2;
d2875 1
a2875 3
  /* Write CRT/CPU threshold low, CRT/Engine threshold high */
  temp = (ThresholdLow << 4) | 0x0f;
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,temp);
d2877 2
a2878 3
  temp = (ThresholdLow & 0x10) << 1;
  if(ModeNo > 0x13) temp |= 0x40;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0f,0x9f,temp);
d2880 1
a2880 2
  /* What is this? */
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x3B,0x09);
d2882 26
a2907 4
  /* Write CRT/CPU threshold high */
  temp = ThresholdLow + 3;
  if(temp > 0x0f) temp = 0x0f;
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x09,temp);
d2910 3
a2912 2
static USHORT
SiS_CalcDelay2(SiS_Private *SiS_Pr, UCHAR key, PSIS_HW_INFO HwInfo)
d2914 571
a3484 29
  USHORT data,index;
  const UCHAR  LatencyFactor[] = {
   	97, 88, 86, 79, 77, 00,       /*; 64  bit    BQ=2   */
        00, 87, 85, 78, 76, 54,       /*; 64  bit    BQ=1   */
        97, 88, 86, 79, 77, 00,       /*; 128 bit    BQ=2   */
        00, 79, 77, 70, 68, 48,       /*; 128 bit    BQ=1   */
        80, 72, 69, 63, 61, 00,       /*; 64  bit    BQ=2   */
        00, 70, 68, 61, 59, 37,       /*; 64  bit    BQ=1   */
        86, 77, 75, 68, 66, 00,       /*; 128 bit    BQ=2   */
        00, 68, 66, 59, 57, 37        /*; 128 bit    BQ=1   */
  };
  const UCHAR  LatencyFactor730[] = {
         69, 63, 61,
	 86, 79, 77,
	103, 96, 94,
	120,113,111,
	137,130,128,    /* --- Table ends with this entry, data below */
	137,130,128,	/* to avoid using illegal values              */
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
	137,130,128,
  };
a3485 3
  if(HwInfo->jChipType == SIS_730) {
     index = ((key & 0x0f) * 3) + ((key & 0xC0) >> 6);
     data = LatencyFactor730[index];
d3487 37
a3523 6
     index = (key & 0xE0) >> 5;
     if(key & 0x10) index +=6;
     if(!(key & 0x01)) index += 24;
     data = SiS_GetReg(SiS_Pr->SiS_P3c4,0x14);
     if(data & 0x0080) index += 12;
     data = LatencyFactor[index];
a3524 1
  return(data);
d3526 1
d3528 4
a3531 4
static void
SiS_SetCRT1FIFO_630(SiS_Private *SiS_Pr, USHORT ModeNo,
 		    PSIS_HW_INFO HwInfo,
                    USHORT RefreshRateTableIndex)
d3533 130
a3662 18
  USHORT  i,index,data,VCLK,MCLK,colorth=0;
  ULONG   B,eax,bl,data2;
  USHORT  ThresholdLow=0;
  UCHAR   FQBQData[]= {
  	0x01,0x21,0x41,0x61,0x81,
        0x31,0x51,0x71,0x91,0xb1,
        0x00,0x20,0x40,0x60,0x80,
        0x30,0x50,0x70,0x90,0xb0,
	0xFF
  };
  UCHAR   FQBQData730[]= {
        0x34,0x74,0xb4,
	0x23,0x63,0xa3,
	0x12,0x52,0x92,
	0x01,0x41,0x81,
	0x00,0x40,0x80,
	0xff
  };
d3664 2
a3665 9
  i=0;
  if(ModeNo > 0x13) {
    if(SiS_Pr->UseCustomMode) {
       VCLK = SiS_Pr->CSRClock;
    } else {
       index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
       index &= 0x3F;
       VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;          /* Get VCLK  */
    }       
d3667 1
a3667 3
    index = SiS_GetReg(SiS_Pr->SiS_P3c4,0x1A);
    index &= 0x07;
    MCLK = SiS_Pr->SiS_MCLKData_0[index].CLOCK;           /* Get MCLK  */
d3669 2
a3670 9
    data2 = SiS_Pr->SiS_ModeType - ModeEGA;	  /* Get half colordepth */
    switch (data2) {
        case 0 : colorth = 1; break;
        case 1 : colorth = 1; break;
        case 2 : colorth = 2; break;
        case 3 : colorth = 2; break;
        case 4 : colorth = 3; break;
        case 5 : colorth = 4; break;
    }
d3672 21
a3692 1
    if(HwInfo->jChipType == SIS_730) {
d3694 8
a3701 3
       do {
          B = SiS_CalcDelay2(SiS_Pr, FQBQData730[i], HwInfo) * VCLK * colorth;
	  bl = B / (MCLK * 16);
d3703 1
a3703 5
          if(B == bl * 16 * MCLK) {
             bl = bl + 1;
          } else {
             bl = bl + 2;
          }
d3705 4
a3708 12
          if(bl > 0x13) {
             if(FQBQData730[i+1] == 0xFF) {
                ThresholdLow = 0x13;
                break;
             }
             i++;
          } else {
             ThresholdLow = bl;
             break;
          }
       } while(FQBQData730[i] != 0xFF);
       
d3710 5
a3714 4
    
       do {
          B = SiS_CalcDelay2(SiS_Pr, FQBQData[i], HwInfo) * VCLK * colorth;
          bl = B / (MCLK * 16);
d3716 8
a3723 5
          if(B == bl * 16 * MCLK) {
             bl = bl + 1;
          } else {
             bl = bl + 2;
          }
d3725 1
a3725 13
          if(bl > 0x13) {
             if(FQBQData[i+1] == 0xFF) {
                ThresholdLow = 0x13;
                break;
             }
             i++;
          } else {
             ThresholdLow = bl;
             break;
          }
       } while(FQBQData[i] != 0xFF);
    }
  }
d3727 7
a3733 5
    if(HwInfo->jChipType == SIS_730) {
    } else {
      i = 9;
    }
    ThresholdLow = 0x02;
d3736 9
a3744 6
  /* Write foreground and background queue */
  if(HwInfo->jChipType == SIS_730) {
   
     data2 = FQBQData730[i];
     data2 = (data2 & 0xC0) >> 5;
     data2 <<= 8;
d3746 1
a3746 16
#ifndef LINUX_XF86
     SiS_SetRegLong(0xcf8,0x80000050);
     eax = SiS_GetRegLong(0xcfc);
     eax &= 0xfffff9ff;
     eax |= data2;
     SiS_SetRegLong(0xcfc,eax);
#else
     /* We use pci functions X offers. We use pcitag 0, because
      * we want to read/write to the host bridge (which is always
      * 00:00.0 on 630, 730 and 540), not the VGA device.
      */
     eax = pciReadLong(0x00000000, 0x50);
     eax &= 0xfffff9ff;
     eax |= data2;
     pciWriteLong(0x00000000, 0x50, eax);
#endif
d3748 3
a3750 4
     /* Write GUI grant timer (PCI config 0xA3) */
     data2 = FQBQData730[i] << 8;
     data2 = (data2 & 0x0f00) | ((data2 & 0x3000) >> 8);
     data2 <<= 20;
d3752 8
a3759 11
#ifndef LINUX_XF86
     SiS_SetRegLong(0xcf8,0x800000A0);
     eax = SiS_GetRegLong(0xcfc);
     eax &= 0x00ffffff;
     eax |= data2;
     SiS_SetRegLong(0xcfc,eax);
#else
     eax = pciReadLong(0x00000000, 0xA0);
     eax &= 0x00ffffff;
     eax |= data2;
     pciWriteLong(0x00000000, 0xA0, eax);
d3761 1
d3763 11
d3775 7
d3783 14
a3796 15
     data2 = FQBQData[i];
     data2 = (data2 & 0xf0) >> 4;
     data2 <<= 24;

#ifndef LINUX_XF86
     SiS_SetRegLong(0xcf8,0x80000050);
     eax = SiS_GetRegLong(0xcfc);
     eax &= 0xf0ffffff;
     eax |= data2;
     SiS_SetRegLong(0xcfc,eax);
#else
     eax = pciReadLong(0x00000000, 0x50);
     eax &= 0xf0ffffff;
     eax |= data2;
     pciWriteLong(0x00000000, 0x50, eax);
d3799 9
a3807 4
     /* Write GUI grant timer (PCI config 0xA3) */
     data2 = FQBQData[i];
     data2 &= 0x0f;
     data2 <<= 24;
d3809 2
a3810 11
#ifndef LINUX_XF86
     SiS_SetRegLong(0xcf8,0x800000A0);
     eax = SiS_GetRegLong(0xcfc);
     eax &= 0xf0ffffff;
     eax |= data2;
     SiS_SetRegLong(0xcfc,eax);
#else
     eax = pciReadLong(0x00000000, 0xA0);
     eax &= 0xf0ffffff;
     eax |= data2;
     pciWriteLong(0x00000000, 0xA0, eax);
d3813 26
a3838 1
  }
d3840 1
a3840 3
  /* Write CRT/CPU threshold low, CRT/Engine threshold high */
  data = ((ThresholdLow & 0x0f) << 4) | 0x0f;
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,data);
d3842 11
a3852 2
  data = (ThresholdLow & 0x10) << 1;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xDF,data);
d3854 35
a3888 2
  /* What is this? */
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x3B,0x09);
d3890 26
a3915 4
  /* Write CRT/CPU threshold high (gap = 3) */
  data = ThresholdLow + 3;
  if(data > 0x0f) data = 0x0f;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x09,0x80,data);
a3916 1
#endif
d3918 3
a3920 4
#ifdef SIS315H
static void
SiS_SetCRT1FIFO_310(SiS_Private *SiS_Pr, USHORT ModeNo, USHORT ModeIdIndex,
                    PSIS_HW_INFO HwInfo)
d3922 2
a3923 1
  USHORT modeflag;
d3925 15
a3939 6
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x3D,0xFE);  /* disable auto-threshold */

  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
d3941 4
a3944 26

  if(HwInfo->jChipType >= SIS_661) {
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0xAE);
     SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
     if(ModeNo > 0x13) {
        if(!(modeflag & HalfDCLK)) {
	   SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0x34);
	   if(ModeNo != 0x38) {
	      SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x3D,0x01);
	   }
	}
     }
  } else {
     if(ModeNo > 0x13) {
        if( (!(modeflag & DoubleScanMode)) || (!(modeflag & HalfDCLK))) {
           SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0x34);
           SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
           SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x3D,0x01);
        } else {
           SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0xAE);
           SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
        }
     } else {
        SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0xAE);
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
     }
d3946 3
d3950 7
d3959 15
a3973 3
/*********************************************/
/*              MODE REGISTERS               */
/*********************************************/
d3975 1
a3975 7
static void
SiS_SetVCLKState(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                 USHORT ModeNo, USHORT RefreshRateTableIndex,
                 USHORT ModeIdIndex)
{
  USHORT data, data2=0;
  USHORT VCLK, index=0;
d3977 7
a3983 10
  if(ModeNo <= 0x13) VCLK = 0;
  else {
     if(SiS_Pr->UseCustomMode) {
        VCLK = SiS_Pr->CSRClock;
     } else {
        index = SiS_GetVCLK2Ptr(SiS_Pr,ModeNo,ModeIdIndex,
	               RefreshRateTableIndex,HwInfo);
        VCLK = SiS_Pr->SiS_VCLKData[index].CLOCK;
     }
  }
d3985 3
a3987 1
  if(HwInfo->jChipType < SIS_315H) {		/* 300 series */
d3989 6
a3994 3
     data2 = 0x00;
     if(VCLK > 150) data2 |= 0x80;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0x7B,data2);
d3996 5
a4000 3
     data2 = 0x00;
     if(VCLK >= 150) data2 |= 0x08;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x32,0xF7,data2);
d4002 3
a4004 5
  } else { 					/* 315 series */

     data = 0;
     if(VCLK >= 166) data |= 0x0c;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x32,0xf3,data);
a4005 3
     if(VCLK >= 166) {
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1f,0xe7);
     }
d4007 1
d4009 2
a4010 4
  data2 = 0x03;
  if((VCLK >= 135) && (VCLK < 160))      data2 = 0x02;
  else if((VCLK >= 160) && (VCLK < 260)) data2 = 0x01;
  else if(VCLK >= 260)                   data2 = 0x00;
d4012 8
a4019 3
  if(HwInfo->jChipType == SIS_540) {
     if((VCLK == 203) || (VCLK < 234)) data2 = 0x02;
  }
d4021 9
a4029 2
  if(HwInfo->jChipType < SIS_315H) {
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xFC,data2);  	/* DAC speed */
d4031 7
a4037 5
     if(HwInfo->jChipType > SIS_315PRO) {
        /* This "if" is done in 330 and 650/LVDS/301LV BIOSes; Not in 315 BIOS */
        if(ModeNo > 0x13) data2 &= 0xfc;
     }
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xF8,data2);  	/* DAC speed */
d4040 1
d4042 2
a4043 3
static void
SiS_SetCRT1ModeRegs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                    USHORT ModeNo,USHORT ModeIdIndex,USHORT RefreshRateTableIndex)
d4045 2
a4046 10
  USHORT data,data2;
  USHORT infoflag=0,modeflag;
  USHORT resindex,xres;
#ifdef SIS315H
  USHORT data3;
  ULONG  longdata;
#if 0
  resinfo = 0;
#endif
#endif
d4048 5
a4052 16
  if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
     infoflag = SiS_Pr->CInfoFlag;
  } else {
     if(ModeNo > 0x13) {
    	modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
    	infoflag = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag;
#ifdef SIS315H
#if 0
	resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
#endif
#endif
     } else {
    	modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     }
  }
a4053 2
  /* Disable DPMS */
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x1F,0x3F);
d4055 8
a4062 2
  if(ModeNo > 0x13) data = infoflag;
  else data = 0;
d4064 10
a4073 7
  data2 = 0;
  if(ModeNo > 0x13) {
     if(SiS_Pr->SiS_ModeType > 0x02) {
        data2 |= 0x02;
        data2 |= ((SiS_Pr->SiS_ModeType - ModeVGA) << 2);
     }
  }
d4075 5
a4079 4
#ifdef TWDEBUG
  xf86DrvMsg(0, X_INFO, "Debug: Mode infoflag = %x, Chiptype %d\n",
  	data, HwInfo->jChipType);
#endif
d4081 5
a4085 2
  if(data & InterlaceMode) data2 |= 0x20;
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x06,0xC0,data2);
d4087 5
a4091 10
  if(SiS_Pr->UseCustomMode) {
     xres = SiS_Pr->CHDisplay;
  } else {
     resindex = SiS_GetResInfo(SiS_Pr,ModeNo,ModeIdIndex);
     if(ModeNo <= 0x13) {
      	xres = SiS_Pr->SiS_StResInfo[resindex].HTotal;
     } else {
      	xres = SiS_Pr->SiS_ModeResInfo[resindex].HTotal;
     }
  }
d4093 3
a4095 10
  if(HwInfo->jChipType != SIS_300) {
     data = 0x0000;
     if(infoflag & InterlaceMode) {
        if(xres <= 800) data = 0x0020;
        else if(xres <= 1024) data = 0x0035;
        else data = 0x0048;
     }
     SiS_SetReg(SiS_Pr->SiS_P3d4,0x19,(data & 0x00FF));
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x1a,0xFC,(data >> 8));
  }
d4097 2
a4098 3
  if(modeflag & HalfDCLK) {
     SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x01,0x08);
  }
d4100 2
a4101 18
  if(HwInfo->jChipType == SIS_300) {
     if(modeflag & LineCompareOff) {
        SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x0F,0x08);
     } else {
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x0F,0xF7);
     }
  } else {
     if(modeflag & LineCompareOff) {
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xB7,0x08);
     } else {
        SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x0F,0xB7);
     }
     if(SiS_Pr->SiS_ModeType == ModeEGA) {
        if(ModeNo > 0x13) {
  	   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x0F,0x40);
        }
     }
  }
d4103 4
a4106 37
#ifdef SIS315H
  /* 315 BIOS sets SR17 at this point */
  if(HwInfo->jChipType == SIS_315PRO) {
     data = SiS_Get310DRAMType(SiS_Pr, HwInfo);
     data = SiS_Pr->SiS_SR15[2][data];
     if(SiS_Pr->SiS_ModeType == ModeText) {
        data &= 0xc7;
     } else {
        data2 = SiS_GetOffset(SiS_Pr,ModeNo,ModeIdIndex,
                              RefreshRateTableIndex,HwInfo);
	data2 >>= 1;
	if(infoflag & InterlaceMode) data2 >>= 1;
	data3 = SiS_GetColorDepth(SiS_Pr,ModeNo,ModeIdIndex) >> 1;
	if(!data3) data3++;
	data2 /= data3;
	if(data2 >= 0x50) {
	   data &= 0x0f;
	   data |= 0x50;
	}
     }
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x17,data);
  }

  /* 330 BIOS sets SR17 at this point */
  if(HwInfo->jChipType == SIS_330) {
     data = SiS_Get310DRAMType(SiS_Pr, HwInfo);
     data = SiS_Pr->SiS_SR15[2][data];
     if(SiS_Pr->SiS_ModeType <= ModeEGA) {
        data &= 0xc7;
     } else {
        if(SiS_Pr->UseCustomMode) {
	   data2 = SiS_Pr->CSRClock;
	} else {
           data2 = SiS_GetVCLK2Ptr(SiS_Pr,ModeNo,ModeIdIndex,
                                   RefreshRateTableIndex,HwInfo);
           data2 = SiS_Pr->SiS_VCLKData[data2].CLOCK;
	}
d4108 1
a4108 2
	data3 = SiS_GetColorDepth(SiS_Pr,ModeNo,ModeIdIndex) >> 1;
	if(!data3) data3++;
d4110 2
a4111 1
	data2 *= data3;
d4113 4
a4116 1
	longdata = SiS_GetMCLK(SiS_Pr, HwInfo) * 1024;
d4118 1
a4118 1
	data2 = longdata / data2;
d4120 2
a4121 19
	if(SiS_Pr->SiS_ModeType != Mode16Bpp) {
           if(data2 >= 0x19c)      data = 0xba;
	   else if(data2 >= 0x140) data = 0x7a;
	   else if(data2 >= 0x101) data = 0x3a;
	   else if(data2 >= 0xf5)  data = 0x32;
	   else if(data2 >= 0xe2)  data = 0x2a;
	   else if(data2 >= 0xc4)  data = 0x22;
	   else if(data2 >= 0xac)  data = 0x1a;
	   else if(data2 >= 0x9e)  data = 0x12;
	   else if(data2 >= 0x8e)  data = 0x0a;
	   else                    data = 0x02;
	 } else {
	   if(data2 >= 0x127)      data = 0xba;
	   else                    data = 0x7a;
	 }
      }
      SiS_SetReg(SiS_Pr->SiS_P3c4,0x17,data);
  }
#endif
d4123 4
a4126 8
  data = 0x60;
  if(SiS_Pr->SiS_ModeType != ModeText) {
     data ^= 0x60;
     if(SiS_Pr->SiS_ModeType != ModeEGA) {
        data ^= 0xA0;
     }
  }
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x21,0x1F,data);
d4128 1
a4128 1
  SiS_SetVCLKState(SiS_Pr, HwInfo, ModeNo, RefreshRateTableIndex, ModeIdIndex);
d4130 1
a4130 43
#ifdef SIS315H
  if(HwInfo->jChipType >= SIS_315H) {
     if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x31) & 0x40) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,0x52,0x2c);
     } else {
        SiS_SetReg(SiS_Pr->SiS_P3d4,0x52,0x6c);
     }
#if 0   /* What is SR0E[D5:6]? */
        /* These are in the CRT1 table, and we set by CRT1CRTC */
     if(HwInfo->jChipType >= SIS_661) {
        data = 0;
        if((ModeNo == 6) || ((ModeNo >= 0x0e) && (ModeNo <= 0x13))) {
	   data |= 0x20;
	}
	if(SiS_Pr->SiS_ModeType != ModeVGA) {
	   if(ModeNo > 0x13) {
	      if(resinfo >= SIS_RI_640x480) {
	         if(resinfo <= SIS_RI_2048x1536) {
	            data |= 0x40;
		    if(resinfo > SIS_RI_1280x1024) {
		       data |= 0x60;
		       if(resinfo != SIS_RI_1600x1200) {
		          data = SiS_GetReg(SiS_Pr->SiS_P3c4,0x0e);
		          data += 0x60;
		          SiS_SetReg(SiS_Pr->SiS_P3c4,0x0e);
		          data = 0;
		       }
		    }
	         }
	         if(resinfo == SIS_RI_1152x864) {
		    data = 0x40;
	         }
	         if(resinfo == SIS_RI_1400x1050) { /* TW */
		    data = 0x60;
	         }
	      }
	   }
	}
	SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x0e,data);
     }
#endif
  }
#endif
d4133 1
a4133 6
/*********************************************/
/*                 LOAD DAC                  */
/*********************************************/

#if 0
static void
a4142 8
}
#endif

static void
SiS_WriteDAC(SiS_Private *SiS_Pr, SISIOADDRESS DACData, USHORT shiftflag,
             USHORT dl, USHORT ah, USHORT al, USHORT dh)
{
  USHORT temp,bh,bl;
a4143 24
  bh = ah;
  bl = al;
  if(dl != 0) {
     temp = bh;
     bh = dh;
     dh = temp;
     if(dl == 1) {
        temp = bl;
        bl = dh;
        dh = temp;
     } else {
        temp = bl;
        bl = bh;
        bh = temp;
     }
  }
  if(shiftflag) {
     dh <<= 2;
     bh <<= 2;
     bl <<= 2;
  }
  SiS_SetRegByte(DACData,(USHORT)dh);
  SiS_SetRegByte(DACData,(USHORT)bh);
  SiS_SetRegByte(DACData,(USHORT)bl);
d4146 1
d4148 1
a4148 2
SiS_LoadDAC(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
            USHORT ModeNo, USHORT ModeIdIndex)
d4150 2
a4151 90
   USHORT data,data2;
   USHORT time,i,j,k,m,n,o;
   USHORT si,di,bx,dl,al,ah,dh;
   USHORT shiftflag;
   SISIOADDRESS DACAddr, DACData;
   const USHORT *table = NULL;

   if(ModeNo <= 0x13) {
      data = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
   } else {
      if(SiS_Pr->UseCustomMode) {
	 data = SiS_Pr->CModeFlag;
      } else {
         data = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
      }
   }

   data &= DACInfoFlag;
   time = 64;
   if(data == 0x00) table = SiS_MDA_DAC;
   if(data == 0x08) table = SiS_CGA_DAC;
   if(data == 0x10) table = SiS_EGA_DAC;
   if(data == 0x18) {
      time = 256;
      table = SiS_VGA_DAC;
   }
   if(time == 256) j = 16;
   else            j = time;

   if( ( (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) &&        /* 301B-DH LCD */
         (SiS_Pr->SiS_VBType & VB_NoLCD) )        ||
       (SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)       ||   /* LCDA */
       (!(SiS_Pr->SiS_SetFlag & ProgrammingCRT2)) ) {  /* Programming CRT1 */
      DACAddr = SiS_Pr->SiS_P3c8;
      DACData = SiS_Pr->SiS_P3c9;
      shiftflag = 0;
      SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xFF);
   } else {
      shiftflag = 1;
      DACAddr = SiS_Pr->SiS_Part5Port;
      DACData = SiS_Pr->SiS_Part5Port + 1;
   }

   SiS_SetRegByte(DACAddr,0x00);

   for(i=0; i<j; i++) {
      data = table[i];
      for(k=0; k<3; k++) {
	data2 = 0;
	if(data & 0x01) data2 = 0x2A;
	if(data & 0x02) data2 += 0x15;
	if(shiftflag) data2 <<= 2;
	SiS_SetRegByte(DACData, data2);
	data >>= 2;
      }
   }

   if(time == 256) {
      for(i = 16; i < 32; i++) {
   	 data = table[i];
	 if(shiftflag) data <<= 2;
	 for(k = 0; k < 3; k++) SiS_SetRegByte(DACData, data);
      }
      si = 32;
      for(m = 0; m < 9; m++) {
         di = si;
         bx = si + 4;
         dl = 0;
         for(n = 0; n < 3; n++) {
  	    for(o = 0; o < 5; o++) {
	       dh = table[si];
	       ah = table[di];
	       al = table[bx];
	       si++;
	       SiS_WriteDAC(SiS_Pr, DACData, shiftflag, dl, ah, al, dh);
	    }
	    si -= 2;
	    for(o = 0; o < 3; o++) {
	       dh = table[bx];
	       ah = table[di];
	       al = table[si];
	       si--;
	       SiS_WriteDAC(SiS_Pr, DACData, shiftflag, dl, ah, al, dh);
	    }
	    dl++;
	 }            /* for n < 3 */
	 si += 5;
      }               /* for m < 9 */
   }
}
d4153 1
a4153 3
/*********************************************/
/*         SET CRT1 REGISTER GROUP           */
/*********************************************/
d4155 3
a4157 5
static void
SiS_SetCRT1Group(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
                 USHORT ModeNo, USHORT ModeIdIndex)
{
  USHORT  StandTableIndex,RefreshRateTableIndex;
d4159 3
a4161 7
  SiS_Pr->SiS_CRT1Mode = ModeNo;
  StandTableIndex = SiS_GetModePtr(SiS_Pr, ModeNo, ModeIdIndex);
  if(SiS_Pr->SiS_SetFlag & LowModeTests) {
     if(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SwitchCRT2)) {
        SiS_DisableBridge(SiS_Pr, HwInfo);
     }
  }
d4163 3
a4165 1
  SiS_ResetSegmentRegisters(SiS_Pr, HwInfo);
d4167 1
a4167 7
  SiS_SetSeqRegs(SiS_Pr, StandTableIndex, HwInfo);
  SiS_SetMiscRegs(SiS_Pr, StandTableIndex, HwInfo);
  SiS_SetCRTCRegs(SiS_Pr, HwInfo, StandTableIndex);
  SiS_SetATTRegs(SiS_Pr, StandTableIndex, HwInfo);
  SiS_SetGRCRegs(SiS_Pr, StandTableIndex);
  SiS_ClearExt1Regs(SiS_Pr,HwInfo);
  SiS_ResetCRT1VCLK(SiS_Pr, HwInfo);
d4169 3
a4171 2
  SiS_Pr->SiS_SelectCRT2Rate = 0;
  SiS_Pr->SiS_SetFlag &= (~ProgrammingCRT2);
d4173 5
a4177 3
#ifdef LINUX_XF86
  xf86DrvMsgVerb(0, X_PROBED, 4, "(init: VBType=0x%04x, VBInfo=0x%04x)\n",
                    SiS_Pr->SiS_VBType, SiS_Pr->SiS_VBInfo);
d4180 9
a4188 5
  if(SiS_Pr->SiS_VBInfo & SetSimuScanMode) {
     if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
        SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
     }
  }
d4190 17
a4206 2
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
     SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
d4208 2
d4211 8
a4218 1
  RefreshRateTableIndex = SiS_GetRatePtr(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
d4220 1
a4220 3
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA)) {
     SiS_Pr->SiS_SetFlag &= ~ProgrammingCRT2;
  }
d4222 7
a4228 6
  if(RefreshRateTableIndex != 0xFFFF) {
     SiS_SetCRT1Sync(SiS_Pr, RefreshRateTableIndex);
     SiS_SetCRT1CRTC(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
     SiS_SetCRT1Offset(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex, HwInfo);
     SiS_SetCRT1VCLK(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, RefreshRateTableIndex);
  }
d4230 8
a4237 14
#ifdef SIS300
  if(HwInfo->jChipType == SIS_300) {
     SiS_SetCRT1FIFO_300(SiS_Pr, ModeNo,HwInfo,RefreshRateTableIndex);
  } else if((HwInfo->jChipType == SIS_630) ||
            (HwInfo->jChipType == SIS_730) ||
            (HwInfo->jChipType == SIS_540)) {
     SiS_SetCRT1FIFO_630(SiS_Pr, ModeNo, HwInfo, RefreshRateTableIndex);
  }
#endif
#ifdef SIS315H
  if(HwInfo->jChipType >= SIS_315H) {
     SiS_SetCRT1FIFO_310(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
  }
#endif
d4239 3
a4241 1
  SiS_SetCRT1ModeRegs(SiS_Pr, HwInfo, ModeNo, ModeIdIndex, RefreshRateTableIndex);
d4243 3
a4245 1
  SiS_LoadDAC(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
d4247 13
a4259 5
#ifndef LINUX_XF86
  if(SiS_Pr->SiS_flag_clearbuffer) {
     SiS_ClearBuffer(SiS_Pr,HwInfo,ModeNo);
  }
#endif
d4261 1
a4261 5
  if(!(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SwitchCRT2 | SetCRT2ToLCDA))) {
     SiS_WaitRetrace1(SiS_Pr);
     SiS_DisplayOn(SiS_Pr);
  }
}
d4263 3
a4265 3
/*********************************************/
/*            HELPER: ENABLE CRT1            */
/*********************************************/
d4267 3
a4269 13
static void
SiS_HandleCRT1(SiS_Private *SiS_Pr)
{
  SiS_SetRegAND(SiS_Pr->SiS_P3d4,SiS_Pr->SiS_MyCR63,0xbf);
#if 0
  if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x15) & 0x01)) {
     if((SiS_GetReg(SiS_Pr->SiS_P3c4,0x15) & 0x0a) ||
        (SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x01)) {
        SiS_SetRegOR(SiS_Pr->SiS_P3d4,SiS_Pr->SiS_MyCR63,0x40);
     }
  }
#endif
}
d4271 2
a4272 3
/*********************************************/
/*         HELPER: SET VIDEO REGISTERS       */
/*********************************************/
d4274 4
a4277 11
static void
SiS_StrangeStuff(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   if((IS_SIS651) || (IS_SISM650)) {
      SiS_SetReg(SiS_Pr->SiS_VidCapt, 0x3f, 0x00);   /* Fiddle with capture regs */
      SiS_SetReg(SiS_Pr->SiS_VidCapt, 0x00, 0x00);
      SiS_SetReg(SiS_Pr->SiS_VidPlay, 0x00, 0x86);   /* (BIOS does NOT unlock) */
      SiS_SetRegAND(SiS_Pr->SiS_VidPlay, 0x30, 0xfe); /* Fiddle with video regs */
      SiS_SetRegAND(SiS_Pr->SiS_VidPlay, 0x3f, 0xef);
   }
   /* !!! This does not support modes < 0x13 !!! */
d4280 2
a4281 7
/*********************************************/
/*         XFree86: SET SCREEN PITCH         */
/*********************************************/

#ifdef LINUX_XF86
static void
SiS_SetPitchCRT1(SiS_Private *SiS_Pr, ScrnInfoPtr pScrn)
d4283 1
a4283 2
   SISPtr pSiS = SISPTR(pScrn);
   UShort HDisplay = pSiS->scrnPitch >> 3;
d4285 6
a4290 2
   SiS_SetReg(SiS_Pr->SiS_P3d4,0x13,(HDisplay & 0xFF));
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0xF0,(HDisplay>>8));
d4293 2
a4294 2
static void
SiS_SetPitchCRT2(SiS_Private *SiS_Pr, ScrnInfoPtr pScrn)
d4296 9
a4304 2
   SISPtr pSiS = SISPTR(pScrn);
   UShort HDisplay = pSiS->scrnPitch2 >> 3;
d4306 2
a4307 5
    /* Unlock CRT2 */
   if(pSiS->VGAEngine == SIS_315_VGA)
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x2F, 0x01);
   else
     SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x24, 0x01);
d4309 29
a4337 2
   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x07,(HDisplay & 0xFF));
   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x09,0xF0,(HDisplay >> 8));
d4340 3
a4342 2
static void
SiS_SetPitch(SiS_Private *SiS_Pr, ScrnInfoPtr pScrn)
d4344 24
a4367 2
   SISPtr pSiS = SISPTR(pScrn);
   BOOLEAN isslavemode = FALSE;
d4369 5
a4373 7
   if( (pSiS->VBFlags & VB_VIDEOBRIDGE) &&
       ( ((pSiS->VGAEngine == SIS_300_VGA) &&
          (SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0xa0) == 0x20) ||
         ((pSiS->VGAEngine == SIS_315_VGA) &&
	  (SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00) & 0x50) == 0x10) ) ) {
      isslavemode = TRUE;
   }
d4375 2
a4376 8
   /* We need to set pitch for CRT1 if bridge is in slave mode, too */
   if((pSiS->VBFlags & DISPTYPE_DISP1) || (isslavemode)) {
      SiS_SetPitchCRT1(SiS_Pr, pScrn);
   }
   /* We must not set the pitch for CRT2 if bridge is in slave mode */
   if((pSiS->VBFlags & DISPTYPE_DISP2) && (!isslavemode)) {
      SiS_SetPitchCRT2(SiS_Pr, pScrn);
   }
d4380 37
a4416 3
/*********************************************/
/*                 SiSSetMode()              */
/*********************************************/
d4418 9
a4426 16
#ifdef LINUX_XF86
/* We need pScrn for setting the pitch correctly */
BOOLEAN
SiSSetMode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,ScrnInfoPtr pScrn,USHORT ModeNo, BOOLEAN dosetpitch)
#else
BOOLEAN
SiSSetMode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,USHORT ModeNo)
#endif
{
   ULONG   temp;
   USHORT  ModeIdIndex;
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
   SISIOADDRESS BaseAddr = HwInfo->ulIOAddress;
   unsigned char backupreg=0;
#ifndef LINUX_XF86
   USHORT  KeepLockReg;
d4428 5
a4432 3
   SiS_Pr->UseCustomMode = FALSE;
   SiS_Pr->CRT1UsesCustomMode = FALSE;
#endif
d4434 5
a4438 3
   if(SiS_Pr->UseCustomMode) {
      ModeNo = 0xfe;
   }
d4440 17
a4456 3
   SiSInitPtr(SiS_Pr, HwInfo);
   SiSRegInit(SiS_Pr, BaseAddr);
   SiS_GetSysFlags(SiS_Pr, HwInfo);
d4458 5
a4462 5
#ifdef LINUX_XF86
   if(pScrn) SiS_Pr->SiS_VGAINFO = SiS_GetSetBIOSScratch(pScrn, 0x489, 0xff);
   else
#endif
         SiS_Pr->SiS_VGAINFO = 0x11;
d4464 20
a4483 3
   SiSInitPCIetc(SiS_Pr, HwInfo);
   SiSSetLVDSetc(SiS_Pr, HwInfo);
   SiSDetermineROMUsage(SiS_Pr, HwInfo);
d4485 6
a4490 1
   SiS_Pr->SiS_flag_clearbuffer = 0;
a4491 1
   if(!SiS_Pr->UseCustomMode) {
d4493 14
a4506 1
      if(!(ModeNo & 0x80)) SiS_Pr->SiS_flag_clearbuffer = 1;
d4508 24
a4531 2
      ModeNo &= 0x7f;
   }
d4534 10
a4543 1
   KeepLockReg = SiS_GetReg(SiS_Pr->SiS_P3c4,0x05);
a4544 1
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x86);
d4546 4
a4549 1
   SiS_UnLockCRT2(SiS_Pr, HwInfo);
d4551 14
a4564 5
   if(!SiS_Pr->UseCustomMode) {
      if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return FALSE;
   } else {
      ModeIdIndex = 0;
   }
d4566 3
a4568 1
   SiS_GetVBType(SiS_Pr, HwInfo);
d4570 2
a4571 1
   /* Init/restore some VB registers */
d4573 2
a4574 14
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
	 if(ROMAddr && SiS_Pr->SiS_UseROM) {
	    if(HwInfo->jChipType < SIS_330) {
               temp = ROMAddr[VB310Data_1_2_Offset];
	       temp |= 0x40;
	       SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
            } else if(HwInfo->jChipType >= SIS_661) {
	       temp = ROMAddr[0x7e];
	       if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x7b) >= 100) temp |= 0x40;
	       SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
	    }
	 }
	 SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x32,0x10);
d4576 5
a4580 1
	 SiS_SetRegOR(SiS_Pr->SiS_Part2Port,0x00,0x0c);
d4582 32
a4613 5
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
      } else {
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
      }
   }
d4615 13
a4627 11
   /* Get VB information (connectors, connected devices) */
   SiS_GetVBInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, (SiS_Pr->UseCustomMode) ? 0 : 1);
   SiS_SetYPbPr(SiS_Pr, HwInfo);
   SiS_SetTVMode(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_GetLCDResInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_SetLowModeTest(SiS_Pr, ModeNo, HwInfo);

#ifndef LINUX_XF86
   /* 3. Check memory size (Kernel framebuffer driver only) */
   temp = SiS_CheckMemorySize(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
   if(!temp) return(0);
d4630 2
a4631 10
   if(HwInfo->jChipType >= SIS_315H) {
#if 0
      if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x17) & 0x08)  {
         if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
            if(ModeNo != 0x10)  SiS_Pr->SiS_SetFlag |= SetDOSMode;
         } else if((IS_SIS651) && (SiS_Pr->SiS_VBType & VB_NoLCD)) {
            SiS_Pr->SiS_SetFlag |= SetDOSMode;
         }
      }
#endif
d4633 16
a4648 12
      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
         if(IS_SIS650) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	    if(IS_SIS651) SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x51,0x20);
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
	 } else if(IS_SIS661741660760) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x3a,0xef);
	 }
      }
   }
d4650 1
a4650 7
   if(SiS_Pr->UseCustomMode) {
      SiS_Pr->CRT1UsesCustomMode = TRUE;
      SiS_Pr->CSRClock_CRT1 = SiS_Pr->CSRClock;
      SiS_Pr->CModeFlag_CRT1 = SiS_Pr->CModeFlag;
   } else {
      SiS_Pr->CRT1UsesCustomMode = FALSE;
   }
d4652 13
a4664 13
   /* Set mode on CRT1 */
   if( (SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SetCRT2ToLCDA)) ||
       (!(SiS_Pr->SiS_VBInfo & SwitchCRT2)) ) {
      SiS_SetCRT1Group(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
   }

   /* Set mode on CRT2 */
   if(SiS_Pr->SiS_VBInfo & (SetSimuScanMode | SwitchCRT2 | SetCRT2ToLCDA)) {
      if( (SiS_Pr->SiS_VBType & VB_SISVB)    ||
          (SiS_Pr->SiS_IF_DEF_LVDS     == 1) ||
          (SiS_Pr->SiS_IF_DEF_CH70xx   != 0) ||
          (SiS_Pr->SiS_IF_DEF_TRUMPION != 0) ) {
         SiS_SetCRT2Group(SiS_Pr, HwInfo, ModeNo);
d4666 7
a4672 1
   }
d4674 1
a4674 1
   SiS_HandleCRT1(SiS_Pr);
d4676 25
a4700 1
   SiS_StrangeStuff(SiS_Pr, HwInfo);
d4702 3
a4704 10
   SiS_DisplayOn(SiS_Pr);
   SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xFF);

   if(HwInfo->jChipType >= SIS_315H) {
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
         if(!(SiS_IsDualEdge(SiS_Pr, HwInfo))) {
	    SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	 }
      }
   }
a4705 9
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
         if(HwInfo->jChipType < SIS_661) {
	    if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x35,0x01);
	    } else {
	       SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x35,0xFE);
	    }
	 }
d4707 1
a4707 1
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,backupreg);
d4709 15
a4723 6
	 if((IS_SIS650) && (SiS_GetReg(SiS_Pr->SiS_P3d4,0x30) & 0xfc)) {
	    if((ModeNo == 0x03) || (ModeNo == 0x10)) {
	       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x51,0x80);
	       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x56,0x08);
            }
	 }
d4725 17
a4741 25
	 if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x30) & SetCRT2ToLCD) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0xfc);
	 }
      } else if((HwInfo->jChipType == SIS_630) ||
                (HwInfo->jChipType == SIS_730)) {
         SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,backupreg);
      }
   }

#ifdef LINUX_XF86
   if(pScrn) {
      /* SetPitch: Adapt to virtual size & position */
      if((ModeNo > 0x13) && (dosetpitch)) {
         SiS_SetPitch(SiS_Pr, pScrn);
      }

      /* Backup/Set ModeNo in BIOS scratch area */
      SiS_GetSetModeID(pScrn, ModeNo);
   }
#endif

#ifndef LINUX_XF86  /* We never lock registers in XF86 */
   if(KeepLockReg == 0xA1) SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x86);
   else SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x00);
#endif
d4743 1
a4743 1
   return TRUE;
d4746 2
a4747 9
/*********************************************/
/*          XFree86: SiSBIOSSetMode()        */
/*           for non-Dual-Head mode          */
/*********************************************/

#ifdef LINUX_XF86
BOOLEAN
SiSBIOSSetMode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, ScrnInfoPtr pScrn,
               DisplayModePtr mode, BOOLEAN IsCustom)
d4749 1
a4749 12
   SISPtr  pSiS = SISPTR(pScrn);
   UShort  ModeNo=0;
   
   SiS_Pr->UseCustomMode = FALSE;

   if((IsCustom) && (SiS_CheckBuildCustomMode(pScrn, mode, pSiS->VBFlags))) {

         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3, "Setting custom mode %dx%d\n",
	 	SiS_Pr->CHDisplay,
		(mode->Flags & V_INTERLACE ? SiS_Pr->CVDisplay * 2 :
		   (mode->Flags & V_DBLSCAN ? SiS_Pr->CVDisplay / 2 :
		      SiS_Pr->CVDisplay)));
d4751 15
a4765 10
	 return(SiSSetMode(SiS_Pr, HwInfo, pScrn, ModeNo, TRUE));

   }

   ModeNo = SiS_CalcModeIndex(pScrn, mode, pSiS->VBFlags, pSiS->HaveCustomModes);
   if(!ModeNo) return FALSE;

   xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3, "Setting standard mode 0x%x\n", ModeNo);

   return(SiSSetMode(SiS_Pr, HwInfo, pScrn, ModeNo, TRUE));
d4768 2
a4769 7
/*********************************************/
/*       XFree86: SiSBIOSSetModeCRT2()       */
/*           for Dual-Head modes             */
/*********************************************/
BOOLEAN
SiSBIOSSetModeCRT2(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, ScrnInfoPtr pScrn,
               DisplayModePtr mode, BOOLEAN IsCustom)
d4771 54
a4824 10
   ULONG   temp;
   USHORT  ModeIdIndex;
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
   SISIOADDRESS BaseAddr = HwInfo->ulIOAddress;
   UShort  ModeNo   = 0;
   unsigned char backupreg=0;
   SISPtr  pSiS     = SISPTR(pScrn);
#ifdef SISDUALHEAD
   SISEntPtr pSiSEnt = pSiS->entityPrivate;
#endif
d4826 6
a4831 18
   SiS_Pr->UseCustomMode = FALSE;

   /* Remember: Custom modes for CRT2 are ONLY supported
    * 		-) on 315/330 series,
    *           -) on the 30x/B/C, and
    *           -) if CRT2 is LCD or VGA
    */

   if((IsCustom) && (SiS_CheckBuildCustomMode(pScrn, mode, pSiS->VBFlags))) {

	 ModeNo = 0xfe;

   } else {

         BOOLEAN havecustommodes = pSiS->HaveCustomModes;

#ifdef SISMERGED
	 if(pSiS->MergedFB) havecustommodes = pSiS->HaveCustomModes2;
d4833 7
a4839 34

         ModeNo = SiS_CalcModeIndex(pScrn, mode, pSiS->VBFlags, havecustommodes);
         if(!ModeNo) return FALSE;

   }

   SiSRegInit(SiS_Pr, BaseAddr);
   SiSInitPtr(SiS_Pr, HwInfo);
   SiS_GetSysFlags(SiS_Pr, HwInfo);
   SiS_Pr->SiS_VGAINFO = SiS_GetSetBIOSScratch(pScrn, 0x489, 0xff);
   SiSInitPCIetc(SiS_Pr, HwInfo);
   SiSSetLVDSetc(SiS_Pr, HwInfo);
   SiSDetermineROMUsage(SiS_Pr, HwInfo);

   /* Save mode info so we can set it from within SetMode for CRT1 */
#ifdef SISDUALHEAD
   if(pSiS->DualHeadMode) {
      pSiSEnt->CRT2ModeNo = ModeNo;
      pSiSEnt->CRT2DMode = mode;
      pSiSEnt->CRT2IsCustom = IsCustom;
      pSiSEnt->CRT2CR30 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
      pSiSEnt->CRT2CR31 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x31);
      pSiSEnt->CRT2CR35 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
      pSiSEnt->CRT2CR38 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
#if 0
      /* We can't set CRT2 mode before CRT1 mode is set */
      if(pSiSEnt->CRT1ModeNo == -1) {
    	 xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
		"Setting CRT2 mode delayed until after setting CRT1 mode\n");
   	 return TRUE;
      }
#endif      
      pSiSEnt->CRT2ModeSet = TRUE;
   }
d4841 23
a4863 42

   /* We don't clear the buffer under X */
   SiS_Pr->SiS_flag_clearbuffer=0;

   if(SiS_Pr->UseCustomMode) {

      USHORT temptemp = SiS_Pr->CVDisplay;

      if(SiS_Pr->CModeFlag & DoubleScanMode)     temptemp >>= 1;
      else if(SiS_Pr->CInfoFlag & InterlaceMode) temptemp <<= 1;

      xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
	  "Setting custom mode %dx%d on CRT2\n",
	  SiS_Pr->CHDisplay, temptemp);

   } else {

      xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
   	  "Setting standard mode 0x%x on CRT2\n", ModeNo);

   }

   SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x86);

   SiS_UnLockCRT2(SiS_Pr, HwInfo);

   if(!SiS_Pr->UseCustomMode) {
      if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return FALSE;
   } else {
      ModeIdIndex = 0;
   }

   SiS_GetVBType(SiS_Pr, HwInfo);

   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
         SiS_UnLockCRT2(SiS_Pr,HwInfo);
         if(ROMAddr && SiS_Pr->SiS_UseROM) {
	    if(HwInfo->jChipType < SIS_330) {
               temp = ROMAddr[VB310Data_1_2_Offset];
	       temp |= 0x40;
               SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
d4865 3
a4867 7
	    if(HwInfo->jChipType > SIS_330) {
	       temp = ROMAddr[0x7e];
	       if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x7b) >= 100) temp |= 0x40;
	       SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
	    }
	 }
	 SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x32,0x10);
d4869 2
a4870 5
	 SiS_SetRegOR(SiS_Pr->SiS_Part2Port,0x00,0x0c);

         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
      } else {
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
a4871 21
   }

   /* Get VB information (connectors, connected devices) */
   if(!SiS_Pr->UseCustomMode) {
      SiS_GetVBInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, 1);
   } else {
      /* If this is a custom mode, we don't check the modeflag for CRT2Mode */
      SiS_GetVBInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, 0);
   }
   SiS_SetYPbPr(SiS_Pr, HwInfo);
   SiS_SetTVMode(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_GetLCDResInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_SetLowModeTest(SiS_Pr, ModeNo, HwInfo);

   /* Set mode on CRT2 */
   if( (SiS_Pr->SiS_VBType & VB_SISVB)    ||
       (SiS_Pr->SiS_IF_DEF_LVDS     == 1) ||
       (SiS_Pr->SiS_IF_DEF_CH70xx   != 0) ||
       (SiS_Pr->SiS_IF_DEF_TRUMPION != 0) ) {
      SiS_SetCRT2Group(SiS_Pr, HwInfo, ModeNo);
   }
d4873 12
a4884 10
   SiS_StrangeStuff(SiS_Pr, HwInfo);

   SiS_DisplayOn(SiS_Pr);
   SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xFF);

   if(HwInfo->jChipType >= SIS_315H) {
      if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
         if(!(SiS_IsDualEdge(SiS_Pr, HwInfo))) {
	    SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xfb);
	 }
d4886 3
a4888 1
   }
d4890 4
a4893 9
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
         if(HwInfo->jChipType < SIS_661) {
	    if(SiS_IsVAMode(SiS_Pr,HwInfo)) {
	       SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x35,0x01);
	    } else {
	       SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x35,0xFE);
	    }
	 }
d4895 15
a4909 1
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,backupreg);
d4911 4
a4914 8
	 if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x30) & SetCRT2ToLCD) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x38,0xfc);
	 }
      } else if((HwInfo->jChipType == SIS_630) ||
                (HwInfo->jChipType == SIS_730)) {
         SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,backupreg);
      }
   }
d4916 3
a4918 4
   /* SetPitch: Adapt to virtual size & position */
   SiS_SetPitchCRT2(SiS_Pr, pScrn);

   return TRUE;
a4920 5
/*********************************************/
/*       XFree86: SiSBIOSSetModeCRT1()       */
/*           for Dual-Head modes             */
/*********************************************/

d4922 1
a4922 2
SiSBIOSSetModeCRT1(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, ScrnInfoPtr pScrn,
                   DisplayModePtr mode, BOOLEAN IsCustom)
d4924 10
a4933 9
   SISPtr  pSiS = SISPTR(pScrn);
   SISIOADDRESS BaseAddr = HwInfo->ulIOAddress;
   USHORT  ModeIdIndex, ModeNo=0;
   UCHAR backupreg=0;
#ifdef SISDUALHEAD
   SISEntPtr pSiSEnt = pSiS->entityPrivate;
   UCHAR backupcr30, backupcr31, backupcr38, backupcr35, backupp40d=0;
   BOOLEAN backupcustom;
#endif
d4935 4
a4938 1
   SiS_Pr->UseCustomMode = FALSE;
d4940 13
a4952 1
   if((IsCustom) && (SiS_CheckBuildCustomMode(pScrn, mode, pSiS->VBFlags))) {
d4954 1
a4954 1
         USHORT temptemp = SiS_Pr->CVDisplay;
d4956 1
a4956 2
         if(SiS_Pr->CModeFlag & DoubleScanMode)     temptemp >>= 1;
         else if(SiS_Pr->CInfoFlag & InterlaceMode) temptemp <<= 1;
d4958 28
a4985 4
         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
	 	"Setting custom mode %dx%d on CRT1\n",
	 	SiS_Pr->CHDisplay, temptemp);
	 ModeNo = 0xfe;
d4987 4
a4990 1
   } else {
d4992 24
a5015 2
         ModeNo = SiS_CalcModeIndex(pScrn, mode, pSiS->VBFlags, pSiS->HaveCustomModes);
         if(!ModeNo) return FALSE;
a5016 3
         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
	 	"Setting standard mode 0x%x on CRT1\n", ModeNo);
   }
d5018 6
a5023 7
   SiSInitPtr(SiS_Pr, HwInfo);
   SiSRegInit(SiS_Pr, BaseAddr);
   SiS_GetSysFlags(SiS_Pr, HwInfo);
   SiS_Pr->SiS_VGAINFO = SiS_GetSetBIOSScratch(pScrn, 0x489, 0xff);
   SiSInitPCIetc(SiS_Pr, HwInfo);
   SiSSetLVDSetc(SiS_Pr, HwInfo);
   SiSDetermineROMUsage(SiS_Pr, HwInfo);
d5025 2
a5026 2
   /* We don't clear the buffer under X */
   SiS_Pr->SiS_flag_clearbuffer = 0;
d5028 4
a5031 1
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x05,0x86);
d5033 6
a5038 1
   SiS_UnLockCRT2(SiS_Pr, HwInfo);
d5040 18
a5057 5
   if(!SiS_Pr->UseCustomMode) {
      if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return FALSE;
   } else {
      ModeIdIndex = 0;
   }
d5059 1
a5059 2
   /* Determine VBType */
   SiS_GetVBType(SiS_Pr, HwInfo);
d5061 1
a5061 7
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
      } else {
         backupreg = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
      }
   }
d5063 7
a5069 7
   /* Get VB information (connectors, connected devices) */
   /* (We don't care if the current mode is a CRT2 mode) */
   SiS_GetVBInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo, 0);
   SiS_SetYPbPr(SiS_Pr, HwInfo);
   SiS_SetTVMode(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_GetLCDResInfo(SiS_Pr, ModeNo, ModeIdIndex, HwInfo);
   SiS_SetLowModeTest(SiS_Pr, ModeNo, HwInfo);
d5071 114
a5184 22
   if(HwInfo->jChipType >= SIS_315H) {
#if 0
      if(SiS_GetReg(SiS_Pr->SiS_P3c4,0x17) & 0x08)  {
         if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
            if(ModeNo != 0x10)  SiS_Pr->SiS_SetFlag |= SetDOSMode;
         } else if((IS_SIS651) && (SiS_Pr->SiS_VBType & VB_NoLCD)) {
            SiS_Pr->SiS_SetFlag |= SetDOSMode;
         }
      }
#endif

      if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
         if(IS_SIS650) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	    if(IS_SIS651) SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x51,0x20);
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
	 } else if(IS_SIS661741660760) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x3a,0xef);
	 }
      }
d5187 2
a5188 5
   /* Set mode on CRT1 */
   SiS_SetCRT1Group(SiS_Pr, HwInfo, ModeNo, ModeIdIndex);
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      SiS_SetCRT2Group(SiS_Pr, HwInfo, ModeNo);
   }
d5190 6
a5195 2
   /* SetPitch: Adapt to virtual size & position */
   SiS_SetPitchCRT1(SiS_Pr, pScrn);
d5197 1
a5197 6
#ifdef SISDUALHEAD
   if(pSiS->DualHeadMode) {
      pSiSEnt->CRT1ModeNo = ModeNo;
      pSiSEnt->CRT1DMode = mode;
   }
#endif
d5199 2
a5200 7
   if(SiS_Pr->UseCustomMode) {
      SiS_Pr->CRT1UsesCustomMode = TRUE;
      SiS_Pr->CSRClock_CRT1 = SiS_Pr->CSRClock;
      SiS_Pr->CModeFlag_CRT1 = SiS_Pr->CModeFlag;
   } else {
      SiS_Pr->CRT1UsesCustomMode = FALSE;
   }
d5202 58
a5259 36
   /* Reset CRT2 if changing mode on CRT1 */
#ifdef SISDUALHEAD
   if(pSiS->DualHeadMode) {
      if(pSiSEnt->CRT2ModeNo != -1) {
         xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, 3,
				"(Re-)Setting mode for CRT2\n");
	 backupcustom = SiS_Pr->UseCustomMode;
	 backupcr30 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x30);
	 backupcr31 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x31);
	 backupcr35 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x35);
	 backupcr38 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x38);
	 if(SiS_Pr->SiS_VBType & VB_SISVB) {
	    /* Backup LUT-enable */
	    if(pSiSEnt->CRT2ModeSet) {
	       backupp40d = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x0d) & 0x08;
	    }
	 }
	 if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	    SiS_SetReg(SiS_Pr->SiS_P3d4,0x30,pSiSEnt->CRT2CR30);
	    SiS_SetReg(SiS_Pr->SiS_P3d4,0x31,pSiSEnt->CRT2CR31);
	    SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,pSiSEnt->CRT2CR35);
	    SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,pSiSEnt->CRT2CR38);
	 }
	 SiSBIOSSetModeCRT2(SiS_Pr, HwInfo, pSiSEnt->pScrn_1,
			    pSiSEnt->CRT2DMode, pSiSEnt->CRT2IsCustom);
         SiS_SetReg(SiS_Pr->SiS_P3d4,0x30,backupcr30);
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x31,backupcr31);
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,backupcr35);
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,backupcr38);
	 if(SiS_Pr->SiS_VBType & VB_SISVB) {
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0d, ~0x08, backupp40d);
	 }
	 SiS_Pr->UseCustomMode = backupcustom;
      }
   }
#endif
d5261 1
a5261 3
   /* Warning: From here, the custom mode entries in SiS_Pr are
    * possibly overwritten
    */
d5263 48
a5310 1
   SiS_HandleCRT1(SiS_Pr);
d5312 1
a5312 1
   SiS_StrangeStuff(SiS_Pr, HwInfo);
d5314 1
a5314 2
   SiS_DisplayOn(SiS_Pr);
   SiS_SetRegByte(SiS_Pr->SiS_P3c6,0xFF);
d5316 1
a5316 8
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(HwInfo->jChipType >= SIS_315H) {
	 SiS_SetReg(SiS_Pr->SiS_P3d4,0x38,backupreg);
      } else if((HwInfo->jChipType == SIS_630) ||
                (HwInfo->jChipType == SIS_730)) {
         SiS_SetReg(SiS_Pr->SiS_P3d4,0x35,backupreg);
      }
   }
d5318 1
a5318 2
   /* Backup/Set ModeNo in BIOS scratch area */
   SiS_GetSetModeID(pScrn,ModeNo);
d5320 29
a5348 3
   return TRUE;
}
#endif /* Linux_XF86 */
d5350 1
d5352 31
a5382 33
#ifdef LINUX_XF86
BOOLEAN
SiS_GetPanelID(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
  const USHORT PanelTypeTable300[16] = {
      0xc101, 0xc117, 0x0121, 0xc135, 0xc142, 0xc152, 0xc162, 0xc072,
      0xc181, 0xc192, 0xc1a1, 0xc1b6, 0xc1c2, 0xc0d2, 0xc1e2, 0xc1f2
  };
  const USHORT PanelTypeTable31030x[16] = {
      0xc102, 0xc112, 0x0122, 0xc132, 0xc142, 0xc152, 0xc169, 0xc179,
      0x0189, 0xc192, 0xc1a2, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  };
  const USHORT PanelTypeTable310LVDS[16] = {
      0xc111, 0xc122, 0xc133, 0xc144, 0xc155, 0xc166, 0xc177, 0xc188,
      0xc199, 0xc0aa, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  };
  USHORT tempax,tempbx,temp;

  if(HwInfo->jChipType < SIS_315H) {

     tempax = SiS_GetReg(SiS_Pr->SiS_P3c4,0x18);
     tempbx = tempax & 0x0F;
     if(!(tempax & 0x10)){
        if(SiS_Pr->SiS_IF_DEF_LVDS == 1){
           tempbx = 0;
           temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x38);
           if(temp & 0x40) tempbx |= 0x08;
           if(temp & 0x20) tempbx |= 0x02;
           if(temp & 0x01) tempbx |= 0x01;
           temp = SiS_GetReg(SiS_Pr->SiS_P3c4,0x39);
           if(temp & 0x80) tempbx |= 0x04;
        } else {
           return 0;
a5383 7
     }
     tempbx = PanelTypeTable300[tempbx];
     tempbx |= LCDSync;
     temp = tempbx & 0x00FF;
     SiS_SetReg(SiS_Pr->SiS_P3d4,0x36,temp);
     temp = (tempbx & 0xFF00) >> 8;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,~(LCDSyncBit|LCDRGB18Bit),temp);
d5385 1
a5385 1
  } else {
d5387 1
a5387 1
     if(HwInfo->jChipType >= SIS_661) return 0;
d5389 54
a5442 25
     tempax = SiS_GetReg(SiS_Pr->SiS_P3c4,0x1a);
     tempax &= 0x1e;
     tempax >>= 1;
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        if(tempax == 0) {
           /* TODO: Include HUGE detection routine
	            (Probably not worth bothering)
	    */
           return 0;
        }
        temp = tempax & 0xff;
        tempax--;
        tempbx = PanelTypeTable310LVDS[tempax];
     } else {
        tempbx = PanelTypeTable31030x[tempax];
        temp = tempbx & 0xff;
     }
     SiS_SetReg(SiS_Pr->SiS_P3d4,0x36,temp);
     tempbx = (tempbx & 0xff00) >> 8;
     temp = tempbx & 0xc1;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x37,~(LCDSyncBit|LCDRGB18Bit),temp);
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        temp = tempbx & 0x04;
        SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x39,0xfb,temp);
     }
d5444 1
a5444 4
  }
  return 1;
}
#endif
d5446 1
d5448 1
a5448 1
/* ================ XFREE86 ================= */
d5450 2
a5451 1
/* Helper functions */
a5452 1
#ifdef LINUX_XF86
d5459 7
a5465 9
   unsigned int vclk[5];

#define Midx         0
#define Nidx         1
#define VLDidx       2
#define Pidx         3
#define PSNidx       4

   pSiS->SiS_Pr->CModeFlag = 0;
d5468 1
a5468 1

d5473 3
a5475 1

a5479 19

   pSiS->SiS_Pr->CFlags = mode->Flags;

   if(pSiS->SiS_Pr->CFlags & V_INTERLACE) {
      pSiS->SiS_Pr->CVDisplay >>= 1;
      pSiS->SiS_Pr->CVSyncStart >>= 1;
      pSiS->SiS_Pr->CVSyncEnd >>= 1;
      pSiS->SiS_Pr->CVTotal >>= 1;
   }
   if(pSiS->SiS_Pr->CFlags & V_DBLSCAN) {
      /* pSiS->SiS_Pr->CDClock <<= 1; */
      pSiS->SiS_Pr->CVDisplay <<= 1;
      pSiS->SiS_Pr->CVSyncStart <<= 1;
      pSiS->SiS_Pr->CVSyncEnd <<= 1;
      pSiS->SiS_Pr->CVTotal <<= 1;
   }

   pSiS->SiS_Pr->CHBlankStart = pSiS->SiS_Pr->CHDisplay;
   pSiS->SiS_Pr->CHBlankEnd = pSiS->SiS_Pr->CHTotal;
d5482 2
d5485 2
a5486 23
   if(SiS_compute_vclk(pSiS->SiS_Pr->CDClock, &out_n, &out_dn, &out_div, &out_sbit, &out_scale)) {
      pSiS->SiS_Pr->CSR2B = (out_div == 2) ? 0x80 : 0x00;
      pSiS->SiS_Pr->CSR2B |= ((out_n - 1) & 0x7f);
      pSiS->SiS_Pr->CSR2C = (out_dn - 1) & 0x1f;
      pSiS->SiS_Pr->CSR2C |= (((out_scale - 1) & 3) << 5);
      pSiS->SiS_Pr->CSR2C |= ((out_sbit & 0x01) << 7);
#ifdef TWDEBUG
      xf86DrvMsg(pScrn->scrnIndex, X_INFO, "Clock %d: n %d dn %d div %d sb %d sc %d\n",
        	pSiS->SiS_Pr->CDClock, out_n, out_dn, out_div, out_sbit, out_scale);
#endif
   } else {
      SiSCalcClock(pScrn, pSiS->SiS_Pr->CDClock, 2, vclk);
      pSiS->SiS_Pr->CSR2B = (vclk[VLDidx] == 2) ? 0x80 : 0x00;
      pSiS->SiS_Pr->CSR2B |= (vclk[Midx] - 1) & 0x7f;
      pSiS->SiS_Pr->CSR2C = (vclk[Nidx] - 1) & 0x1f;
      if(vclk[Pidx] <= 4) {
         /* postscale 1,2,3,4 */
         pSiS->SiS_Pr->CSR2C |= ((vclk[Pidx] - 1) & 3) << 5;
      } else {
         /* postscale 6,8 */
         pSiS->SiS_Pr->CSR2C |= (((vclk[Pidx] / 2) - 1) & 3) << 5;
	 pSiS->SiS_Pr->CSR2C |= 0x80;
      }
d5488 9
a5496 5
      xf86DrvMsg(pScrn->scrnIndex, X_INFO, "Clock %d: n %d dn %d div %d sc %d\n",
        	pSiS->SiS_Pr->CDClock, vclk[Midx], vclk[Nidx], vclk[VLDidx], vclk[Pidx]);
#endif
   }

d5504 1
a5504 1
   pSiS->SiS_Pr->CCRT1CRTC[5]  =  ((((pSiS->SiS_Pr->CHBlankEnd >> 3) - 1) & 0x20) << 2) |
d5506 1
a5506 1

d5516 1
a5516 1

d5518 2
a5519 2

#if 0
d5524 1
a5524 1
#endif
d5526 7
a5532 7
   pSiS->SiS_Pr->CCRT1CRTC[8] =  (pSiS->SiS_Pr->CVSyncStart     ) & 0xFF;		/* cr10 */
   pSiS->SiS_Pr->CCRT1CRTC[9] =  ((pSiS->SiS_Pr->CVSyncEnd      ) & 0x0F) | 0x80;	/* cr11 */
   pSiS->SiS_Pr->CCRT1CRTC[10] = (pSiS->SiS_Pr->CVDisplay    - 1) & 0xFF;		/* cr12 */
   pSiS->SiS_Pr->CCRT1CRTC[11] = (pSiS->SiS_Pr->CVBlankStart - 1) & 0xFF;		/* cr15 */
   pSiS->SiS_Pr->CCRT1CRTC[12] = (pSiS->SiS_Pr->CVBlankEnd   - 1) & 0xFF;		/* cr16 */

   pSiS->SiS_Pr->CCRT1CRTC[13] =
d5538 1
a5538 1
                        GETBITSTR((pSiS->SiS_Pr->CVSyncEnd     ),   4:4, 5:5) ;
d5540 1
a5540 1
   pSiS->SiS_Pr->CCRT1CRTC[14] =
d5546 1
a5546 1

d5549 2
a5550 2
                        GETBITSTR((pSiS->SiS_Pr->CHSyncEnd  >> 3) + 3, 5:5, 2:2) ;

d5552 2
a5553 2
   case 8:
      	pSiS->SiS_Pr->CModeFlag |= 0x223b;
d5555 2
a5556 2
   case 16:
      	pSiS->SiS_Pr->CModeFlag |= 0x227d;
d5558 2
a5559 2
   case 32:
      	pSiS->SiS_Pr->CModeFlag |= 0x22ff;
d5566 3
a5568 4
      pSiS->SiS_Pr->CModeFlag |= DoubleScanMode;

   if((pSiS->SiS_Pr->CVDisplay >= 1024)	||
      (pSiS->SiS_Pr->CVTotal >= 1024)   ||
d5570 1
a5570 2
      pSiS->SiS_Pr->CModeFlag |= LineCompareOff;

d5572 2
a5573 2
      pSiS->SiS_Pr->CModeFlag |= HalfDCLK;

d5575 6
a5580 9

   if(pSiS->SiS_Pr->CFlags & V_NHSYNC)
      pSiS->SiS_Pr->CInfoFlag |= 0x4000;

   if(pSiS->SiS_Pr->CFlags & V_NVSYNC)
      pSiS->SiS_Pr->CInfoFlag |= 0x8000;

   if(pSiS->SiS_Pr->CFlags & V_INTERLACE)
      pSiS->SiS_Pr->CInfoFlag |= InterlaceMode;
d5611 1
a5611 1
#endif
d5615 1
a5615 1
/* Build a list of supported modes */
d5617 1
a5617 1
SiSBuildBuiltInModeList(ScrnInfoPtr pScrn, BOOLEAN includelcdmodes, BOOLEAN isfordvi)
d5625 2
a5626 6
   int            A, B, C, D, E, F, temp, i, j, k, l, index, vclkindex;
   DisplayModePtr new = NULL, current = NULL, first = NULL;
   BOOLEAN        done = FALSE;
#if 0
   DisplayModePtr backup = NULL;
#endif
d5629 1
a5629 2
   pSiS->AddedPlasmaModes = FALSE;

d5633 1
a5633 1
      InitTo300Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
d5635 1
a5635 1
      return NULL;
d5639 1
a5639 1
      InitTo310Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
d5641 1
a5641 1
      return NULL;
d5649 3
d5653 5
a5657 3
      /* 0x5a (320x240) is a pure FTSN mode, not DSTN! */
      if((!pSiS->FSTN) &&
	 (pSiS->SiS_Pr->SiS_RefIndex[i].ModeID == 0x5a))  {
d5661 1
a5661 8
      if((pSiS->FSTN) &&
         (pSiS->SiS_Pr->SiS_RefIndex[i].XRes == 320) &&
	 (pSiS->SiS_Pr->SiS_RefIndex[i].YRes == 240) &&
	 (pSiS->SiS_Pr->SiS_RefIndex[i].ModeID != 0x5a)) {
	   i++;
	   continue;
      }

d5675 1
a5675 1

d5681 1
a5681 1
      current->type = M_T_DEFAULT;
d5694 1
a5694 1

d5762 4
a5765 23
      if((pSiS->SiS_Pr->SiS_RefIndex[i].XRes == 320) &&
	 ((pSiS->SiS_Pr->SiS_RefIndex[i].YRes == 200) ||
	  (pSiS->SiS_Pr->SiS_RefIndex[i].YRes == 240))) {

	 /* Terrible hack, but correct CRTC data for
	  * these modes only produces a black screen...
	  * (HRE is 0, leading into a too large C and
	  * a negative D. The CRT controller does not
	  * seem to like correcting HRE to 50
	  */
	 current->HDisplay   = 320;
         current->HSyncStart = 328;
         current->HSyncEnd   = 376;
         current->HTotal     = 400;

      } else {

         current->HDisplay   = (E * 8);
         current->HSyncStart = (E * 8) + (F * 8);
         current->HSyncEnd   = (E * 8) + (F * 8) + (C * 8);
         current->HTotal     = (E * 8) + (F * 8) + (C * 8) + (D * 8);

      }
d5889 1
a5889 1
	 current->VTotal |= 1;
a5898 1
#if 0
a5916 1
#endif
a5923 2
#else
        (void)VBS;  (void)HBS;  (void)A;
a5928 183
   /* Add non-standard LCD modes for panel's detailed timings */

   if(!includelcdmodes) return first;

   if(pSiS->SiS_Pr->CP_Vendor) {
      xf86DrvMsg(0, X_INFO, "Checking database for vendor %x, product %x\n",
         pSiS->SiS_Pr->CP_Vendor, pSiS->SiS_Pr->CP_Product);
   }

   i = 0;
   while((!done) && (SiS_PlasmaTable[i].vendor) && (pSiS->SiS_Pr->CP_Vendor)) {

     if(SiS_PlasmaTable[i].vendor == pSiS->SiS_Pr->CP_Vendor) {

        for(j=0; j<SiS_PlasmaTable[i].productnum; j++) {

	    if(SiS_PlasmaTable[i].product[j] == pSiS->SiS_Pr->CP_Product) {

	       xf86DrvMsg(pScrn->scrnIndex, X_PROBED,
	       	  "Identified %s panel, adding specific modes\n",
		  SiS_PlasmaTable[i].plasmaname);

	       for(k=0; k<SiS_PlasmaTable[i].modenum; k++) {

	          if(isfordvi) {
		     if(!(SiS_PlasmaTable[i].plasmamodes[k] & 0x80)) continue;
		  } else {
		     if(!(SiS_PlasmaTable[i].plasmamodes[k] & 0x40)) continue;
		  }

	          if(!(new = xalloc(sizeof(DisplayModeRec)))) return first;

                  memset(new, 0, sizeof(DisplayModeRec));
                  if(!(new->name = xalloc(10))) {
      		     xfree(new);
		     return first;
                  }
                  if(!first) first = new;
                  if(current) {
                     current->next = new;
	             new->prev = current;
                  }

                  current = new;

		  pSiS->AddedPlasmaModes = TRUE;

		  l = SiS_PlasmaTable[i].plasmamodes[k] & 0x3f;

	          sprintf(current->name, "%dx%d", SiS_PlasmaMode[l].HDisplay,
                                                  SiS_PlasmaMode[l].VDisplay);

                  current->status = MODE_OK;

                  current->type = M_T_BUILTIN;

		  current->Clock = SiS_PlasmaMode[l].clock;
            	  current->SynthClock = current->Clock;

                  current->HDisplay   = SiS_PlasmaMode[l].HDisplay;
                  current->HSyncStart = current->HDisplay + SiS_PlasmaMode[l].HFrontPorch;
                  current->HSyncEnd   = current->HSyncStart + SiS_PlasmaMode[l].HSyncWidth;
                  current->HTotal     = SiS_PlasmaMode[l].HTotal;

		  current->VDisplay   = SiS_PlasmaMode[l].VDisplay;
                  current->VSyncStart = current->VDisplay + SiS_PlasmaMode[l].VFrontPorch;
                  current->VSyncEnd   = current->VSyncStart + SiS_PlasmaMode[l].VSyncWidth;
                  current->VTotal     = SiS_PlasmaMode[l].VTotal;

                  current->CrtcHDisplay = current->HDisplay;
                  current->CrtcHBlankStart = current->HSyncStart;
                  current->CrtcHSyncStart = current->HSyncStart;
                  current->CrtcHSyncEnd = current->HSyncEnd;
                  current->CrtcHBlankEnd = current->HSyncEnd;
                  current->CrtcHTotal = current->HTotal;

                  current->CrtcVDisplay = current->VDisplay;
                  current->CrtcVBlankStart = current->VSyncStart;
                  current->CrtcVSyncStart = current->VSyncStart;
                  current->CrtcVSyncEnd = current->VSyncEnd;
                  current->CrtcVBlankEnd = current->VSyncEnd;
                  current->CrtcVTotal = current->VTotal;

                  if(SiS_PlasmaMode[l].SyncFlags & SIS_PL_HSYNCP)
                     current->Flags |= V_PHSYNC;
                  else
                     current->Flags |= V_NHSYNC;

                  if(SiS_PlasmaMode[l].SyncFlags & SIS_PL_VSYNCP)
                     current->Flags |= V_PVSYNC;
                  else
                     current->Flags |= V_NVSYNC;

		  if(current->HDisplay > pSiS->LCDwidth)
		     pSiS->LCDwidth = pSiS->SiS_Pr->CP_MaxX = current->HDisplay;
	          if(current->VDisplay > pSiS->LCDheight)
		     pSiS->LCDheight = pSiS->SiS_Pr->CP_MaxY = current->VDisplay;

               }
	       done = TRUE;
	       break;
	    }
	}
     }

     i++;

   }

   if(pSiS->SiS_Pr->CP_HaveCustomData) {

      for(i=0; i<7; i++) {

         if(pSiS->SiS_Pr->CP_DataValid[i]) {

            if(!(new = xalloc(sizeof(DisplayModeRec)))) return first;

            memset(new, 0, sizeof(DisplayModeRec));
            if(!(new->name = xalloc(10))) {
      		xfree(new);
		return first;
            }
            if(!first) first = new;
            if(current) {
               current->next = new;
	       new->prev = current;
            }

            current = new;

            sprintf(current->name, "%dx%d", pSiS->SiS_Pr->CP_HDisplay[i],
                                            pSiS->SiS_Pr->CP_VDisplay[i]);

            current->status = MODE_OK;

            current->type = M_T_BUILTIN;

            current->Clock = pSiS->SiS_Pr->CP_Clock[i];
            current->SynthClock = current->Clock;

            current->HDisplay   = pSiS->SiS_Pr->CP_HDisplay[i];
            current->HSyncStart = pSiS->SiS_Pr->CP_HSyncStart[i];
            current->HSyncEnd   = pSiS->SiS_Pr->CP_HSyncEnd[i];
            current->HTotal     = pSiS->SiS_Pr->CP_HTotal[i];

            current->VDisplay   = pSiS->SiS_Pr->CP_VDisplay[i];
            current->VSyncStart = pSiS->SiS_Pr->CP_VSyncStart[i];
            current->VSyncEnd   = pSiS->SiS_Pr->CP_VSyncEnd[i];
            current->VTotal     = pSiS->SiS_Pr->CP_VTotal[i];

            current->CrtcHDisplay = current->HDisplay;
            current->CrtcHBlankStart = pSiS->SiS_Pr->CP_HBlankStart[i];
            current->CrtcHSyncStart = current->HSyncStart;
            current->CrtcHSyncEnd = current->HSyncEnd;
            current->CrtcHBlankEnd = pSiS->SiS_Pr->CP_HBlankEnd[i];
            current->CrtcHTotal = current->HTotal;

            current->CrtcVDisplay = current->VDisplay;
            current->CrtcVBlankStart = pSiS->SiS_Pr->CP_VBlankStart[i];
            current->CrtcVSyncStart = current->VSyncStart;
            current->CrtcVSyncEnd = current->VSyncEnd;
            current->CrtcVBlankEnd = pSiS->SiS_Pr->CP_VBlankEnd[i];
            current->CrtcVTotal = current->VTotal;

	    if(pSiS->SiS_Pr->CP_SyncValid[i]) {
               if(pSiS->SiS_Pr->CP_HSync_P[i])
                  current->Flags |= V_PHSYNC;
               else
                  current->Flags |= V_NHSYNC;

               if(pSiS->SiS_Pr->CP_VSync_P[i])
                  current->Flags |= V_PVSYNC;
               else
                  current->Flags |= V_NVSYNC;
	    } else {
	       /* No sync data? Use positive sync... */
	       current->Flags |= V_PHSYNC;
	       current->Flags |= V_PVSYNC;
	    }
         }
      }
   }

d5933 1
a5933 34
/* Build a list of supported modes */
int
SiSTranslateToVESA(ScrnInfoPtr pScrn, int modenumber)
{
   SISPtr         pSiS = SISPTR(pScrn);
   int i;

   /* Initialize our pointers */
   if(pSiS->VGAEngine == SIS_300_VGA) {
#ifdef SIS300
	InitTo300Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
#else
	return -1;
#endif
   } else if(pSiS->VGAEngine == SIS_315_VGA) {
#ifdef SIS315H
       	InitTo310Pointer(pSiS->SiS_Pr, &pSiS->sishw_ext);
#else
	return -1;
#endif
   } else return -1;

   if(modenumber <= 0x13) return modenumber;

   i = 0;
   while(pSiS->SiS_Pr->SiS_EModeIDTable[i].Ext_ModeID != 0xff) {
      if(pSiS->SiS_Pr->SiS_EModeIDTable[i].Ext_ModeID == modenumber) {
         return (int)pSiS->SiS_Pr->SiS_EModeIDTable[i].Ext_VESAID;
      }
      i++;
   }
   return -1;
}
#endif  /* Xfree86 */
d5935 2
a5936 4
#ifdef LINUX_KERNEL
int
sisfb_mode_rate_to_dclock(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
			  unsigned char modeno, unsigned char rateindex)
d5938 1
a5938 33
    USHORT ModeNo = modeno;
    USHORT ModeIdIndex = 0, ClockIndex = 0;
    USHORT RefreshRateTableIndex = 0;
    int    Clock;

    if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
       InitTo300Pointer(SiS_Pr, HwInfo);
#else
       return 65 * 1000;
#endif
    } else {
#ifdef SIS315H
       InitTo310Pointer(SiS_Pr, HwInfo);
#else
       return 65 * 1000;
#endif
    }

    if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) {;
    	printk(KERN_ERR "Could not find mode %x\n", ModeNo);
    	return 65 * 1000;
    }

    RefreshRateTableIndex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].REFindex;
    RefreshRateTableIndex += (rateindex - 1);
    ClockIndex = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRTVCLK;
    if(HwInfo->jChipType < SIS_315H) {
       ClockIndex &= 0x3F;
    }
    Clock = SiS_Pr->SiS_VCLKData[ClockIndex].CLOCK * 1000;
    
    return(Clock);
d5941 2
a5942 3
BOOLEAN
sisfb_gettotalfrommode(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
		       unsigned char modeno, int *htotal, int *vtotal, unsigned char rateindex)
d5944 2
a5945 4
    USHORT ModeNo = modeno;
    USHORT ModeIdIndex = 0, CRT1Index = 0;
    USHORT RefreshRateTableIndex = 0;
    unsigned char  sr_data, cr_data, cr_data2;
d5947 5
a5951 12
    if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
       InitTo300Pointer(SiS_Pr, HwInfo);
#else
       return FALSE;
#endif
    } else {
#ifdef SIS315H
       InitTo310Pointer(SiS_Pr, HwInfo);
#else
       return FALSE;
#endif
d5954 1
a5954 1
    if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return FALSE;
d5956 3
a5958 15
    RefreshRateTableIndex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].REFindex;
    RefreshRateTableIndex += (rateindex - 1);
    CRT1Index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;

    sr_data = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[14];
    cr_data = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[0];
    *htotal = (((cr_data & 0xff) | ((unsigned short) (sr_data & 0x03) << 8)) + 5) * 8;

    sr_data = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[13];
    cr_data = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[6];
    cr_data2 = SiS_Pr->SiS_CRT1Table[CRT1Index].CR[7];
    *vtotal = ((cr_data & 0xFF) |
               ((unsigned short)(cr_data2 & 0x01) <<  8) |
	       ((unsigned short)(cr_data2 & 0x20) <<  4) |
	       ((unsigned short)(sr_data  & 0x01) << 10)) + 2;
d5960 1
a5960 2
    if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag & InterlaceMode)
       *vtotal *= 2;
d5962 1
a5962 1
    return TRUE;
a5964 21
int
sisfb_mode_rate_to_ddata(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo,
			 unsigned char modeno, unsigned char rateindex,
			 ULONG *left_margin, ULONG *right_margin, 
			 ULONG *upper_margin, ULONG *lower_margin,
			 ULONG *hsync_len, ULONG *vsync_len,
			 ULONG *sync, ULONG *vmode)
{
    USHORT ModeNo = modeno;
    USHORT ModeIdIndex = 0, index = 0;
    USHORT RefreshRateTableIndex = 0;
    unsigned short VRE, VBE, VRS, VBS, VDE, VT;
    unsigned short HRE, HBE, HRS, HBS, HDE, HT;
    unsigned char  sr_data, cr_data, cr_data2, cr_data3;
    int            A, B, C, D, E, F, temp, j;
   
    if(HwInfo->jChipType < SIS_315H) {
#ifdef SIS300
       InitTo300Pointer(SiS_Pr, HwInfo);
#else
       return 0;
a5965 42
    } else {
#ifdef SIS315H
       InitTo310Pointer(SiS_Pr, HwInfo);
#else
       return 0;
#endif
    }
    
    if(!(SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex))) return 0;

    RefreshRateTableIndex = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].REFindex;
    RefreshRateTableIndex += (rateindex - 1);
    index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;

    sr_data = SiS_Pr->SiS_CRT1Table[index].CR[14];

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[0];

    /* Horizontal total */
    HT = (cr_data & 0xff) |
         ((unsigned short) (sr_data & 0x03) << 8);
    A = HT + 5;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[1];
	
    /* Horizontal display enable end */
    HDE = (cr_data & 0xff) |
          ((unsigned short) (sr_data & 0x0C) << 6);
    E = HDE + 1;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[4];
	
    /* Horizontal retrace (=sync) start */
    HRS = (cr_data & 0xff) |
          ((unsigned short) (sr_data & 0xC0) << 2);
    F = HRS - E - 3;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[2];
	
    /* Horizontal blank start */
    HBS = (cr_data & 0xff) |
          ((unsigned short) (sr_data & 0x30) << 4);
a5966 102
    sr_data = SiS_Pr->SiS_CRT1Table[index].CR[15];
	
    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[3];

    cr_data2 = SiS_Pr->SiS_CRT1Table[index].CR[5];
	
    /* Horizontal blank end */
    HBE = (cr_data & 0x1f) |
          ((unsigned short) (cr_data2 & 0x80) >> 2) |
	  ((unsigned short) (sr_data & 0x03) << 6);

    /* Horizontal retrace (=sync) end */
    HRE = (cr_data2 & 0x1f) | ((sr_data & 0x04) << 3);

    temp = HBE - ((E - 1) & 255);
    B = (temp > 0) ? temp : (temp + 256);

    temp = HRE - ((E + F + 3) & 63);
    C = (temp > 0) ? temp : (temp + 64);

    D = B - F - C;

    if((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes == 320) &&
       ((SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes == 200) ||
	(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].YRes == 240))) {

	 /* Terrible hack, but the correct CRTC data for
	  * these modes only produces a black screen...
	  */
       *left_margin = (400 - 376);
       *right_margin = (328 - 320);
       *hsync_len = (376 - 328);

    } else {

       *left_margin = D * 8;
       *right_margin = F * 8;
       *hsync_len = C * 8;

    }

    sr_data = SiS_Pr->SiS_CRT1Table[index].CR[13];

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[6];

    cr_data2 = SiS_Pr->SiS_CRT1Table[index].CR[7];

    /* Vertical total */
    VT = (cr_data & 0xFF) |
         ((unsigned short) (cr_data2 & 0x01) << 8) |
	 ((unsigned short)(cr_data2 & 0x20) << 4) |
	 ((unsigned short) (sr_data & 0x01) << 10);
    A = VT + 2;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[10];
	
    /* Vertical display enable end */
    VDE = (cr_data & 0xff) |
          ((unsigned short) (cr_data2 & 0x02) << 7) |
	  ((unsigned short) (cr_data2 & 0x40) << 3) |
	  ((unsigned short) (sr_data & 0x02) << 9);
    E = VDE + 1;

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[8];

    /* Vertical retrace (=sync) start */
    VRS = (cr_data & 0xff) |
          ((unsigned short) (cr_data2 & 0x04) << 6) |
	  ((unsigned short) (cr_data2 & 0x80) << 2) |
	  ((unsigned short) (sr_data & 0x08) << 7);
    F = VRS + 1 - E;

    cr_data =  SiS_Pr->SiS_CRT1Table[index].CR[11];

    cr_data3 = (SiS_Pr->SiS_CRT1Table[index].CR[16] & 0x01) << 5;

    /* Vertical blank start */
    VBS = (cr_data & 0xff) |
          ((unsigned short) (cr_data2 & 0x08) << 5) |
	  ((unsigned short) (cr_data3 & 0x20) << 4) |
	  ((unsigned short) (sr_data & 0x04) << 8);

    cr_data =  SiS_Pr->SiS_CRT1Table[index].CR[12];

    /* Vertical blank end */
    VBE = (cr_data & 0xff) |
          ((unsigned short) (sr_data & 0x10) << 4);
    temp = VBE - ((E - 1) & 511);
    B = (temp > 0) ? temp : (temp + 512);

    cr_data = SiS_Pr->SiS_CRT1Table[index].CR[9];

    /* Vertical retrace (=sync) end */
    VRE = (cr_data & 0x0f) | ((sr_data & 0x20) >> 1);
    temp = VRE - ((E + F - 1) & 31);
    C = (temp > 0) ? temp : (temp + 32);

    D = B - F - C;
      
    *upper_margin = D;
    *lower_margin = F;
    *vsync_len = C;
a5967 43
    if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag & 0x8000)
       *sync &= ~FB_SYNC_VERT_HIGH_ACT;
    else
       *sync |= FB_SYNC_VERT_HIGH_ACT;

    if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag & 0x4000)       
       *sync &= ~FB_SYNC_HOR_HIGH_ACT;
    else
       *sync |= FB_SYNC_HOR_HIGH_ACT;
		
    *vmode = FB_VMODE_NONINTERLACED;
    if(SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_InfoFlag & 0x0080)
       *vmode = FB_VMODE_INTERLACED;
    else {
      j = 0;
      while(SiS_Pr->SiS_EModeIDTable[j].Ext_ModeID != 0xff) {
          if(SiS_Pr->SiS_EModeIDTable[j].Ext_ModeID ==
	                  SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].ModeID) {
              if(SiS_Pr->SiS_EModeIDTable[j].Ext_ModeFlag & DoubleScanMode) {
	      	  *vmode = FB_VMODE_DOUBLE;
              }
	      break;
          }
	  j++;
      }
    }       

    if((*vmode & FB_VMODE_MASK) == FB_VMODE_INTERLACED) {
#if 0  /* Do this? */
       *upper_margin <<= 1;
       *lower_margin <<= 1;
       *vsync_len <<= 1;
#endif
    } else if((*vmode & FB_VMODE_MASK) == FB_VMODE_DOUBLE) {
       *upper_margin >>= 1;
       *lower_margin >>= 1;
       *vsync_len >>= 1;
    }

    return 1;       
}			  

#endif
@


1.1.1.3
log
@Import OpenBSD X-Window subsystem (based upon XFree86 4.4RC2)
into vendor branch
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/sis/init.c,v 1.53 2004/02/26 15:58:43 twini Exp $ */
d37 4
a40 1
 * * 3) The name of the author may not be used to endorse or promote products
d81 1
a136 5
   SiS_Pr->SiS_LCD1280x720Data      = SiS_LCD1280x720Data;
   SiS_Pr->SiS_StLCD1280x768_2Data  = SiS_StLCD1280x768_2Data;
   SiS_Pr->SiS_ExtLCD1280x768_2Data = SiS_ExtLCD1280x768_2Data;
   SiS_Pr->SiS_LCD1280x768_3Data    = SiS_LCD1280x768_3Data;
   SiS_Pr->SiS_LCD1280x800Data      = SiS_LCD1280x800Data;
d138 2
a140 2
   SiS_Pr->SiS_ExtLCD1400x1050Data  = SiS_ExtLCD1400x1050Data;
   SiS_Pr->SiS_LCD1680x1050Data     = SiS_LCD1680x1050Data;
d142 5
a146 1
   SiS_Pr->SiS_ExtLCD1600x1200Data  = SiS_ExtLCD1600x1200Data;
d175 4
d181 29
a209 4
   SiS_Pr->SiS_LVDSBARCO1024Data_1 = SiS_LVDSBARCO1024Data_1;
   SiS_Pr->SiS_LVDSBARCO1024Data_2 = SiS_LVDSBARCO1024Data_2;
   SiS_Pr->SiS_LVDSBARCO1366Data_1 = SiS_LVDSBARCO1366Data_1;
   SiS_Pr->SiS_LVDSBARCO1366Data_2 = SiS_LVDSBARCO1366Data_2;
d224 2
a231 11

   SiS_Pr->SiS_CHTVUNTSCData = SiS_CHTVUNTSCData;
   SiS_Pr->SiS_CHTVONTSCData = SiS_CHTVONTSCData;

   SiS_Pr->SiS_CHTVUNTSCDesData = SiS_CHTVUNTSCDesData;
   SiS_Pr->SiS_CHTVONTSCDesData = SiS_CHTVONTSCDesData;
   SiS_Pr->SiS_CHTVUPALDesData  = SiS_CHTVUPALDesData;
   SiS_Pr->SiS_CHTVOPALDesData  = SiS_CHTVOPALDesData;

   SiS_Pr->SiS_PanelMinLVDS   = Panel_800x600;    /* lowest value LVDS/LCDA */
   SiS_Pr->SiS_PanelMin301    = Panel_1024x768;   /* lowest value 301 */
d268 5
a272 5
   SiS_Pr->SiS_SModeIDTable  = SiS300_SModeIDTable;
   SiS_Pr->SiS_VBModeIDTable = SiS300_VBModeIDTable;
   SiS_Pr->SiS_EModeIDTable  = SiS300_EModeIDTable;
   SiS_Pr->SiS_RefIndex      = SiS300_RefIndex;
   SiS_Pr->SiS_CRT1Table     = SiS300_CRT1Table;
d274 1
a274 1
      SiS_Pr->SiS_MCLKData_0    = SiS300_MCLKData_300; /* 300 */
d276 1
a276 1
      SiS_Pr->SiS_MCLKData_0    = SiS300_MCLKData_630; /* 630, 730 */
d278 1
a278 1
   SiS_Pr->SiS_VCLKData      = SiS300_VCLKData;
d280 1
d309 14
a322 2
   SiS_Pr->SiS_PanelDelayTbl     = SiS300_PanelDelayTbl;
   SiS_Pr->SiS_PanelDelayTblLVDS = SiS300_PanelDelayTbl;
d324 40
a363 54
   SiS_Pr->SiS_ExtLCD1024x768Data   = SiS300_ExtLCD1024x768Data;
   SiS_Pr->SiS_St2LCD1024x768Data   = SiS300_St2LCD1024x768Data;
   SiS_Pr->SiS_ExtLCD1280x1024Data  = SiS300_ExtLCD1280x1024Data;
   SiS_Pr->SiS_St2LCD1280x1024Data  = SiS300_St2LCD1280x1024Data;

   SiS_Pr->SiS_CRT2Part2_1024x768_1  = SiS300_CRT2Part2_1024x768_1;
   SiS_Pr->SiS_CRT2Part2_1280x1024_1 = SiS300_CRT2Part2_1280x1024_1;
   SiS_Pr->SiS_CRT2Part2_1024x768_2  = SiS300_CRT2Part2_1024x768_2;
   SiS_Pr->SiS_CRT2Part2_1280x1024_2 = SiS300_CRT2Part2_1280x1024_2;
   SiS_Pr->SiS_CRT2Part2_1024x768_3  = SiS300_CRT2Part2_1024x768_3;
   SiS_Pr->SiS_CRT2Part2_1280x1024_3 = SiS300_CRT2Part2_1280x1024_3;

   SiS_Pr->SiS_CHTVUPALData  = SiS300_CHTVUPALData;
   SiS_Pr->SiS_CHTVOPALData  = SiS300_CHTVOPALData;
   SiS_Pr->SiS_CHTVUPALMData = SiS_CHTVUNTSCData;    /* not supported on 300 series */
   SiS_Pr->SiS_CHTVOPALMData = SiS_CHTVONTSCData;    /* not supported on 300 series */
   SiS_Pr->SiS_CHTVUPALNData = SiS300_CHTVUPALData;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVOPALNData = SiS300_CHTVOPALData;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVSOPALData = SiS300_CHTVSOPALData;

   SiS_Pr->SiS_PanelType00_1 = SiS300_PanelType00_1;
   SiS_Pr->SiS_PanelType01_1 = SiS300_PanelType01_1;
   SiS_Pr->SiS_PanelType02_1 = SiS300_PanelType02_1;
   SiS_Pr->SiS_PanelType03_1 = SiS300_PanelType03_1;
   SiS_Pr->SiS_PanelType04_1 = SiS300_PanelType04_1;
   SiS_Pr->SiS_PanelType05_1 = SiS300_PanelType05_1;
   SiS_Pr->SiS_PanelType06_1 = SiS300_PanelType06_1;
   SiS_Pr->SiS_PanelType07_1 = SiS300_PanelType07_1;
   SiS_Pr->SiS_PanelType08_1 = SiS300_PanelType08_1;
   SiS_Pr->SiS_PanelType09_1 = SiS300_PanelType09_1;
   SiS_Pr->SiS_PanelType0a_1 = SiS300_PanelType0a_1;
   SiS_Pr->SiS_PanelType0b_1 = SiS300_PanelType0b_1;
   SiS_Pr->SiS_PanelType0c_1 = SiS300_PanelType0c_1;
   SiS_Pr->SiS_PanelType0d_1 = SiS300_PanelType0d_1;
   SiS_Pr->SiS_PanelType0e_1 = SiS300_PanelType0e_1;
   SiS_Pr->SiS_PanelType0f_1 = SiS300_PanelType0f_1;
   SiS_Pr->SiS_PanelType00_2 = SiS300_PanelType00_2;
   SiS_Pr->SiS_PanelType01_2 = SiS300_PanelType01_2;
   SiS_Pr->SiS_PanelType02_2 = SiS300_PanelType02_2;
   SiS_Pr->SiS_PanelType03_2 = SiS300_PanelType03_2;
   SiS_Pr->SiS_PanelType04_2 = SiS300_PanelType04_2;
   SiS_Pr->SiS_PanelType05_2 = SiS300_PanelType05_2;
   SiS_Pr->SiS_PanelType06_2 = SiS300_PanelType06_2;
   SiS_Pr->SiS_PanelType07_2 = SiS300_PanelType07_2;
   SiS_Pr->SiS_PanelType08_2 = SiS300_PanelType08_2;
   SiS_Pr->SiS_PanelType09_2 = SiS300_PanelType09_2;
   SiS_Pr->SiS_PanelType0a_2 = SiS300_PanelType0a_2;
   SiS_Pr->SiS_PanelType0b_2 = SiS300_PanelType0b_2;
   SiS_Pr->SiS_PanelType0c_2 = SiS300_PanelType0c_2;
   SiS_Pr->SiS_PanelType0d_2 = SiS300_PanelType0d_2;
   SiS_Pr->SiS_PanelType0e_2 = SiS300_PanelType0e_2;
   SiS_Pr->SiS_PanelType0f_2 = SiS300_PanelType0f_2;
   SiS_Pr->SiS_PanelTypeNS_1 = SiS300_PanelTypeNS_1;
   SiS_Pr->SiS_PanelTypeNS_2 = SiS300_PanelTypeNS_2;
d366 2
a367 2
      SiS_Pr->SiS_PanelType04_1 = SiS300_PanelType04_1a;
      SiS_Pr->SiS_PanelType04_2 = SiS300_PanelType04_2a;
d370 2
a371 2
      SiS_Pr->SiS_PanelType04_1 = SiS300_PanelType04_1b;
      SiS_Pr->SiS_PanelType04_2 = SiS300_PanelType04_2b;
d374 26
a399 29
   SiS_Pr->SiS_LVDSCRT1800x600_1     = SiS300_LVDSCRT1800x600_1;
   SiS_Pr->SiS_LVDSCRT1800x600_1_H   = SiS300_LVDSCRT1800x600_1_H;
   SiS_Pr->SiS_LVDSCRT1800x600_2     = SiS300_LVDSCRT1800x600_2;
   SiS_Pr->SiS_LVDSCRT1800x600_2_H   = SiS300_LVDSCRT1800x600_2_H;
   SiS_Pr->SiS_LVDSCRT11024x768_1    = SiS300_LVDSCRT11024x768_1;
   SiS_Pr->SiS_LVDSCRT11024x768_1_H  = SiS300_LVDSCRT11024x768_1_H;
   SiS_Pr->SiS_LVDSCRT11024x768_2    = SiS300_LVDSCRT11024x768_2;
   SiS_Pr->SiS_LVDSCRT11024x768_2_H  = SiS300_LVDSCRT11024x768_2_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_1   = SiS300_LVDSCRT11280x1024_1;
   SiS_Pr->SiS_LVDSCRT11280x1024_1_H = SiS300_LVDSCRT11280x1024_1_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_2   = SiS300_LVDSCRT11280x1024_2;
   SiS_Pr->SiS_LVDSCRT11280x1024_2_H = SiS300_LVDSCRT11280x1024_2_H;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1     = SiS300_LVDSCRT1XXXxXXX_1;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1_H   = SiS300_LVDSCRT1XXXxXXX_1_H;

   SiS_Pr->SiS_CHTVCRT1UNTSC = SiS300_CHTVCRT1UNTSC;
   SiS_Pr->SiS_CHTVCRT1ONTSC = SiS300_CHTVCRT1ONTSC;
   SiS_Pr->SiS_CHTVCRT1UPAL  = SiS300_CHTVCRT1UPAL;
   SiS_Pr->SiS_CHTVCRT1OPAL  = SiS300_CHTVCRT1OPAL;
   SiS_Pr->SiS_CHTVCRT1SOPAL = SiS300_CHTVCRT1SOPAL;
   SiS_Pr->SiS_CHTVReg_UNTSC = SiS300_CHTVReg_UNTSC;
   SiS_Pr->SiS_CHTVReg_ONTSC = SiS300_CHTVReg_ONTSC;
   SiS_Pr->SiS_CHTVReg_UPAL  = SiS300_CHTVReg_UPAL;
   SiS_Pr->SiS_CHTVReg_OPAL  = SiS300_CHTVReg_OPAL;
   SiS_Pr->SiS_CHTVReg_UPALM = SiS300_CHTVReg_UNTSC;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_OPALM = SiS300_CHTVReg_ONTSC;  /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_UPALN = SiS300_CHTVReg_UPAL;   /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_OPALN = SiS300_CHTVReg_OPAL;   /* not supported on 300 series */
   SiS_Pr->SiS_CHTVReg_SOPAL = SiS300_CHTVReg_SOPAL;
d409 34
d480 2
a481 2
   SiS_Pr->SiS_SModeIDTable  = SiS310_SModeIDTable;
   SiS_Pr->SiS_EModeIDTable  = SiS310_EModeIDTable;
d483 3
a485 5
   SiS_Pr->SiS_CRT1Table     = SiS310_CRT1Table;
   if(HwInfo->jChipType >= SIS_760) {
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_760;  /* 760 */
   } else if(HwInfo->jChipType >= SIS_661) {
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_660;  /* 661/741 */
d487 1
a487 1
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_330;  /* 330 */
d489 1
a489 1
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_650;  /* 550, 650, 740 */
d491 1
a491 1
      SiS_Pr->SiS_MCLKData_0 = SiS310_MCLKData_0_315;  /* 315 */
d493 4
a496 3
   SiS_Pr->SiS_MCLKData_1    = SiS310_MCLKData_1;
   SiS_Pr->SiS_VCLKData      = SiS310_VCLKData;
   SiS_Pr->SiS_VBVCLKData    = SiS310_VBVCLKData;
d525 118
a642 90
   SiS_Pr->SiS_PanelDelayTbl     = SiS310_PanelDelayTbl;
   SiS_Pr->SiS_PanelDelayTblLVDS = SiS310_PanelDelayTblLVDS;

   SiS_Pr->SiS_St2LCD1024x768Data   = SiS310_St2LCD1024x768Data;
   SiS_Pr->SiS_ExtLCD1024x768Data   = SiS310_ExtLCD1024x768Data;
   SiS_Pr->SiS_St2LCD1280x1024Data  = SiS310_St2LCD1280x1024Data;
   SiS_Pr->SiS_ExtLCD1280x1024Data  = SiS310_ExtLCD1280x1024Data;

   SiS_Pr->SiS_CRT2Part2_1024x768_1  = SiS310_CRT2Part2_1024x768_1;

   SiS_Pr->SiS_PanelType00_1 = SiS310_PanelType00_1;
   SiS_Pr->SiS_PanelType01_1 = SiS310_PanelType01_1;
   SiS_Pr->SiS_PanelType02_1 = SiS310_PanelType02_1;
   SiS_Pr->SiS_PanelType03_1 = SiS310_PanelType03_1;
   SiS_Pr->SiS_PanelType04_1 = SiS310_PanelType04_1;
   SiS_Pr->SiS_PanelType05_1 = SiS310_PanelType05_1;
   SiS_Pr->SiS_PanelType06_1 = SiS310_PanelType06_1;
   SiS_Pr->SiS_PanelType07_1 = SiS310_PanelType07_1;
   SiS_Pr->SiS_PanelType08_1 = SiS310_PanelType08_1;
   SiS_Pr->SiS_PanelType09_1 = SiS310_PanelType09_1;
   SiS_Pr->SiS_PanelType0a_1 = SiS310_PanelType0a_1;
   SiS_Pr->SiS_PanelType0b_1 = SiS310_PanelType0b_1;
   SiS_Pr->SiS_PanelType0c_1 = SiS310_PanelType0c_1;
   SiS_Pr->SiS_PanelType0d_1 = SiS310_PanelType0d_1;
   SiS_Pr->SiS_PanelType0e_1 = SiS310_PanelType0e_1;
   SiS_Pr->SiS_PanelType0f_1 = SiS310_PanelType0f_1;
   SiS_Pr->SiS_PanelType00_2 = SiS310_PanelType00_2;
   SiS_Pr->SiS_PanelType01_2 = SiS310_PanelType01_2;
   SiS_Pr->SiS_PanelType02_2 = SiS310_PanelType02_2;
   SiS_Pr->SiS_PanelType03_2 = SiS310_PanelType03_2;
   SiS_Pr->SiS_PanelType04_2 = SiS310_PanelType04_2;
   SiS_Pr->SiS_PanelType05_2 = SiS310_PanelType05_2;
   SiS_Pr->SiS_PanelType06_2 = SiS310_PanelType06_2;
   SiS_Pr->SiS_PanelType07_2 = SiS310_PanelType07_2;
   SiS_Pr->SiS_PanelType08_2 = SiS310_PanelType08_2;
   SiS_Pr->SiS_PanelType09_2 = SiS310_PanelType09_2;
   SiS_Pr->SiS_PanelType0a_2 = SiS310_PanelType0a_2;
   SiS_Pr->SiS_PanelType0b_2 = SiS310_PanelType0b_2;
   SiS_Pr->SiS_PanelType0c_2 = SiS310_PanelType0c_2;
   SiS_Pr->SiS_PanelType0d_2 = SiS310_PanelType0d_2;
   SiS_Pr->SiS_PanelType0e_2 = SiS310_PanelType0e_2;
   SiS_Pr->SiS_PanelType0f_2 = SiS310_PanelType0f_2;
   SiS_Pr->SiS_PanelTypeNS_1 = SiS310_PanelTypeNS_1;
   SiS_Pr->SiS_PanelTypeNS_2 = SiS310_PanelTypeNS_2;

   SiS_Pr->SiS_CHTVUPALData  = SiS310_CHTVUPALData;
   SiS_Pr->SiS_CHTVOPALData  = SiS310_CHTVOPALData;
   SiS_Pr->SiS_CHTVUPALMData = SiS310_CHTVUPALMData;
   SiS_Pr->SiS_CHTVOPALMData = SiS310_CHTVOPALMData;
   SiS_Pr->SiS_CHTVUPALNData = SiS310_CHTVUPALNData;
   SiS_Pr->SiS_CHTVOPALNData = SiS310_CHTVOPALNData;
   SiS_Pr->SiS_CHTVSOPALData = SiS310_CHTVSOPALData;

   SiS_Pr->SiS_LVDSCRT1800x600_1     = SiS310_LVDSCRT1800x600_1;
   SiS_Pr->SiS_LVDSCRT11024x768_1    = SiS310_LVDSCRT11024x768_1;
   SiS_Pr->SiS_LVDSCRT11280x1024_1   = SiS310_LVDSCRT11280x1024_1;
   SiS_Pr->SiS_LVDSCRT11400x1050_1   = SiS310_LVDSCRT11400x1050_1;
   SiS_Pr->SiS_LVDSCRT11600x1200_1   = SiS310_LVDSCRT11600x1200_1;
   SiS_Pr->SiS_LVDSCRT1800x600_1_H   = SiS310_LVDSCRT1800x600_1_H;
   SiS_Pr->SiS_LVDSCRT11024x768_1_H  = SiS310_LVDSCRT11024x768_1_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_1_H = SiS310_LVDSCRT11280x1024_1_H;
   SiS_Pr->SiS_LVDSCRT11400x1050_1_H = SiS310_LVDSCRT11400x1050_1_H;
   SiS_Pr->SiS_LVDSCRT11600x1200_1_H = SiS310_LVDSCRT11600x1200_1_H;
   SiS_Pr->SiS_LVDSCRT1800x600_2     = SiS310_LVDSCRT1800x600_2;
   SiS_Pr->SiS_LVDSCRT11024x768_2    = SiS310_LVDSCRT11024x768_2;
   SiS_Pr->SiS_LVDSCRT11280x1024_2   = SiS310_LVDSCRT11280x1024_2;
   SiS_Pr->SiS_LVDSCRT11400x1050_2   = SiS310_LVDSCRT11400x1050_2;
   SiS_Pr->SiS_LVDSCRT11600x1200_2   = SiS310_LVDSCRT11600x1200_2;
   SiS_Pr->SiS_LVDSCRT1800x600_2_H   = SiS310_LVDSCRT1800x600_2_H;
   SiS_Pr->SiS_LVDSCRT11024x768_2_H  = SiS310_LVDSCRT11024x768_2_H;
   SiS_Pr->SiS_LVDSCRT11280x1024_2_H = SiS310_LVDSCRT11280x1024_2_H;
   SiS_Pr->SiS_LVDSCRT11400x1050_2_H = SiS310_LVDSCRT11400x1050_2_H;
   SiS_Pr->SiS_LVDSCRT11600x1200_2_H = SiS310_LVDSCRT11600x1200_2_H;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1     = SiS310_LVDSCRT1XXXxXXX_1;
   SiS_Pr->SiS_LVDSCRT1XXXxXXX_1_H   = SiS310_LVDSCRT1XXXxXXX_1_H;
   SiS_Pr->SiS_CHTVCRT1UNTSC         = SiS310_CHTVCRT1UNTSC;
   SiS_Pr->SiS_CHTVCRT1ONTSC         = SiS310_CHTVCRT1ONTSC;
   SiS_Pr->SiS_CHTVCRT1UPAL          = SiS310_CHTVCRT1UPAL;
   SiS_Pr->SiS_CHTVCRT1OPAL          = SiS310_CHTVCRT1OPAL;
   SiS_Pr->SiS_CHTVCRT1SOPAL         = SiS310_CHTVCRT1OPAL;

   SiS_Pr->SiS_CHTVReg_UNTSC = SiS310_CHTVReg_UNTSC;
   SiS_Pr->SiS_CHTVReg_ONTSC = SiS310_CHTVReg_ONTSC;
   SiS_Pr->SiS_CHTVReg_UPAL  = SiS310_CHTVReg_UPAL;
   SiS_Pr->SiS_CHTVReg_OPAL  = SiS310_CHTVReg_OPAL;
   SiS_Pr->SiS_CHTVReg_UPALM = SiS310_CHTVReg_UPALM;
   SiS_Pr->SiS_CHTVReg_OPALM = SiS310_CHTVReg_OPALM;
   SiS_Pr->SiS_CHTVReg_UPALN = SiS310_CHTVReg_UPALN;
   SiS_Pr->SiS_CHTVReg_OPALN = SiS310_CHTVReg_OPALN;
   SiS_Pr->SiS_CHTVReg_SOPAL = SiS310_CHTVReg_OPAL;
d651 1
a651 1
   SiS_Pr->SiS_CHTVVCLKOPALN = SiS310_CHTVVCLKOPALN;
d653 20
d713 1
a713 2
SiS_GetModeID(int VGAEngine, ULONG VBFlags, int HDisplay, int VDisplay,
              int Depth, BOOLEAN FSTN, int LCDwidth, int LCDheight)
d781 2
a782 16
          if(VDisplay == 1024) ModeIndex = ModeIndex_1280x1024[Depth];
	  else if(VDisplay == 800) {
	     if(VGAEngine == SIS_315_VGA) {
	        if((VBFlags & CRT1_LCDA) && (LCDwidth == 1280) && (LCDheight == 800)) {
	           ModeIndex = ModeIndex_1280x800[Depth];
	        } else if(!(VBFlags & CRT1_LCDA)) {
	           ModeIndex = ModeIndex_1280x800[Depth];
	        }
	     }
	  } else if(VDisplay == 720) {
	     if((VBFlags & CRT1_LCDA) && (LCDwidth == 1280) && (LCDheight == 720)) {
	        ModeIndex = ModeIndex_1280x720[Depth];
	     } else if(!(VBFlags & CRT1_LCDA)) {
	        ModeIndex = ModeIndex_1280x720[Depth];
	     }
	  } else if(!(VBFlags & CRT1_LCDA)) {
d784 1
d804 1
a804 9
	     if(VDisplay == 1050) {
	        if((VBFlags & CRT1_LCDA) &&
	           (((LCDwidth == 1400) && (LCDheight == 1050)) ||
		    ((LCDwidth == 1600) && (LCDheight == 1200)))) {
	           ModeIndex = ModeIndex_1400x1050[Depth];
	        } else if(!(VBFlags & CRT1_LCDA)) {
	           ModeIndex = ModeIndex_1400x1050[Depth];
	        }
	     }
a809 5
     case 1680:
          if(VGAEngine == SIS_315_VGA) {
             if(VDisplay == 1050) ModeIndex = ModeIndex_1680x1050[Depth];
	  }
          break;
d854 1
a854 3
	        if(!((VGAEngine == SIS_300_VGA) && (VBFlags & VB_TRUMPION))) {
          	   if(VDisplay == 300) ModeIndex = ModeIndex_400x300[Depth];
		}
d859 1
a859 1
	        if(!((VGAEngine == SIS_300_VGA) && (VBFlags & VB_TRUMPION))) {
d861 1
a861 3
		      if(VDisplay == 384) {
		         ModeIndex = ModeIndex_512x384[Depth];
		      }
a900 3
		if((VDisplay == 800) && (LCDheight == 800)) {
		   ModeIndex = ModeIndex_310_1280x768[Depth];
		}
d952 1
a952 1
		if((LCDheight == 768) || (LCDwidth == 1680) ||
a964 12
	     } else if(VGAEngine == SIS_315_VGA) {
	        if(VDisplay == 800) {
		   if((LCDheight == 800) || (LCDwidth == 1680) ||
		      ((LCDheight == 1024) && (VBFlags & (VB_301|VB_301B|VB_301C|VB_302B)))) {
		      ModeIndex = ModeIndex_1280x800[Depth];
		   }
		} else if(VDisplay == 720) {
		   if((LCDheight == 720) || (LCDwidth == 1680) ||
		      ((LCDheight == 1024) && (VBFlags & (VB_301|VB_301B|VB_301C|VB_302B)))) {
		      ModeIndex = ModeIndex_1280x720[Depth];
		   }
		}
d970 2
a971 2
		   if((LCDwidth == 1400) || (LCDwidth == 1600) || (LCDwidth == 1680)) {
		      ModeIndex = ModeIndex_1400x1050[Depth];
d977 2
a978 11
	     if(VGAEngine == SIS_315_VGA) {
	        if(VBFlags & (VB_301C | VB_302B | VB_302LV | VB_302ELV)) {
	           if(VDisplay == 1200) ModeIndex = ModeIndex_1600x1200[Depth];
		}
	     }
	     break;
	case 1680:
	     if(VGAEngine == SIS_315_VGA) {
	        if(VBFlags & (VB_301C | VB_302B | VB_302LV | VB_302ELV)) {
	           if(VDisplay == 1050) ModeIndex = ModeIndex_1680x1050[Depth];
		}
d1027 2
a1028 2
	     if( ((VBFlags & TV_YPBPR) && (VBFlags & (TV_YPBPR750P | TV_YPBPR1080I))) ||
	         (VBFlags & TV_HIVISION) 					      ||
d1075 3
a1077 10
	     if(VDisplay == 720) {
	        if((VBFlags & TV_HIVISION) ||
		   ((VBFlags & TV_YPBPR) && (VBFlags & (TV_YPBPR1080I | TV_YPBPR750P)))) {
	           ModeIndex = ModeIndex_1280x720[Depth];
		}
	     } else if(VDisplay == 1024) {
	        if((VBFlags & TV_HIVISION) ||
		   ((VBFlags & TV_YPBPR) && (VBFlags & TV_YPBPR1080I))) {
	           ModeIndex = ModeIndex_1280x1024[Depth];
		}
a1143 1
		else if(VDisplay == 800)    ModeIndex = ModeIndex_1280x800[Depth];
a1160 7
	case 1680:
		if(VGAEngine == SIS_315_VGA) {
		   if(VBFlags & (VB_301B|VB_301C|VB_302B)) {
	              if(VDisplay == 1050) ModeIndex = ModeIndex_1680x1050[Depth];
		   }
		}
		break;
d1258 1
a1258 1
   SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x01,0xDF);
d1264 1
a1264 1
   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x01,0x20);
a1352 4
   if(HwInfo->jChipType == SIS_760) {
      temp1 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x78);
      if(temp1 & 0x30) SiS_Pr->SiS_SysFlags |= SF_760UMA;
   }
a1424 4
   /* Check for SiS30x first */
   temp = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x00);
   if((temp == 1) || (temp == 2)) return;

d1430 3
d1435 2
a1436 2
      	if((temp >= 2) && (temp <= 5)) 	SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)   		SiS_Pr->SiS_IF_DEF_TRUMPION = 1;
d1451 2
a1452 2
      	if((temp >= 2) && (temp <= 3)) 	SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)  			SiS_Pr->SiS_IF_DEF_CH70xx = 2;
d1460 3
a1462 3
      	if((temp >= 2) && (temp <= 3)) 	SiS_Pr->SiS_IF_DEF_LVDS = 1;
      	if(temp == 3)  			SiS_Pr->SiS_IF_DEF_CH70xx = 2;
	if(temp == 4)  			SiS_Pr->SiS_IF_DEF_CONEX = 1;  /* Not yet supported */
a1489 28
BOOLEAN
SiSDetermineROMLayout661(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
   USHORT romversoffs, romvmaj = 1, romvmin = 0;

   if(HwInfo->jChipType >= SIS_661) {
      romversoffs = ROMAddr[0x16] | (ROMAddr[0x17] << 8);
      if(romversoffs) {
	 if((ROMAddr[romversoffs+1] == '.') || (ROMAddr[romversoffs+4] == '.')) {
	    romvmaj = ROMAddr[romversoffs] - '0';
	    romvmin = ((ROMAddr[romversoffs+2] -'0') * 10) + (ROMAddr[romversoffs+3] - '0');
	 }
      }
      if((romvmaj != 0) || (romvmin >= 92)) {
	 return TRUE;
      }
   } else if(IS_SIS650740) {
      if((ROMAddr[0x1a] == 'N') &&
         (ROMAddr[0x1b] == 'e') &&
         (ROMAddr[0x1c] == 'w') &&
         (ROMAddr[0x1d] == 'V')) {
	 return TRUE;
      }
   }
   return FALSE;
}

a1493 4
   USHORT romptr = 0;

   SiS_Pr->SiS_UseROM = FALSE;
   SiS_Pr->SiS_ROMNew = FALSE;
d1496 9
a1504 6
      if(HwInfo->jChipType == SIS_300) {
         /* 300: We check if the code starts below 0x220 by
	  * checking the jmp instruction at the beginning
	  * of the BIOS image.
	  */
	 if((ROMAddr[3] == 0xe9) && ((ROMAddr[5] << 8) | ROMAddr[4]) > 0x21a)
d1506 2
d1509 11
a1519 3
	 /* Sony's VAIO BIOS 1.09 follows the standard, so perhaps
	  * the others do as well
	  */
d1521 1
a1524 11
	 if((SiS_Pr->SiS_ROMNew = SiSDetermineROMLayout661(SiS_Pr, HwInfo))) {
	    /* Find out about LCD data table entry size */
	    if((romptr = SISGETROMW(0x0102))) {
	       if(ROMAddr[romptr + (32 * 16)] == 0xff)
	          SiS_Pr->SiS661LCD2TableSize = 32;
	       else if(ROMAddr[romptr + (34 * 16)] == 0xff)
	          SiS_Pr->SiS661LCD2TableSize = 34;
	       else if(ROMAddr[romptr + (36 * 16)] == 0xff)
	          SiS_Pr->SiS661LCD2TableSize = 36;
	    }
	 }
d1526 2
a1527 1
   }
d1612 1
a1612 2
  if((SiS_Pr->SiS_IF_DEF_LVDS) || (SiS_Pr->SiS_IF_DEF_CONEX))
     return;
d1623 1
a1630 2
     } else {
        SiS_Pr->SiS_VBType = VB_SIS301;
d1634 11
a1644 6
     if(rev >= 0xE0) {
	flag = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x39);
	if(flag == 0xff) SiS_Pr->SiS_VBType = VB_SIS302LV;
	else 	 	 SiS_Pr->SiS_VBType = VB_SIS302ELV;
     } else if(rev >= 0xD0) {
	SiS_Pr->SiS_VBType = VB_SIS301LV;
d1700 2
a1705 14

  case SIS_660:
  case SIS_760:
        counter = (SiS_GetReg(SiS_Pr->SiS_P3c4,0x79) & 0xf0) >> 4;
	if(counter) {
	   AdapterMemorySize = 1 << counter;
      	   AdapterMemorySize *= (1024*1024);
	}
	counter = SiS_GetReg(SiS_Pr->SiS_P3c4,0x78) & 0x30;
	if(counter) {
	   if(counter == 0x10) AdapterMemorySize += (32 * 1024 * 1024);
	   else		       AdapterMemorySize += (64 * 1024 * 1024);
	}
	break;
d1773 1
a1773 4
     if(HwInfo->jChipType >= SIS_660) {
        /* data = SiS_GetReg(SiS_Pr->SiS_P3d4,0x78) & 0x07; */
	data = ((SiS_GetReg(SiS_Pr->SiS_P3d4,0x78) & 0xc0) >> 6);
     } else if(HwInfo->jChipType >= SIS_661) {
a1946 37
/*            HELPER: ENABLE CRT1            */
/*********************************************/

static void
SiS_SetupCR5x(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
{
   if(SiS_Pr->SiS_VBType & VB_SIS301BLV302BLV) {
      if(IS_SIS650) {
	 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	 if(IS_SIS651) SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x51,0x20);
	 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
      } else if(IS_SIS661741660760) {
         SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x61,0xf7);
	 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x51,0x1f);
	 SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x56,0xe7);
	 if(!SiS_Pr->SiS_ROMNew) {
	    SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x3a,0xef);
	 }
      }
   }
}

static void
SiS_HandleCRT1(SiS_Private *SiS_Pr)
{
  SiS_SetRegAND(SiS_Pr->SiS_P3d4,SiS_Pr->SiS_MyCR63,0xbf);
#if 0
  if(!(SiS_GetReg(SiS_Pr->SiS_P3c4,0x15) & 0x01)) {
     if((SiS_GetReg(SiS_Pr->SiS_P3c4,0x15) & 0x0a) ||
        (SiS_GetReg(SiS_Pr->SiS_P3c4,0x16) & 0x01)) {
        SiS_SetRegOR(SiS_Pr->SiS_P3d4,SiS_Pr->SiS_MyCR63,0x40);
     }
  }
#endif
}

/*********************************************/
d1980 1
a1980 1
  USHORT xres, temp, colordepth, infoflag;
d1984 1
a1984 1
     xres = SiS_Pr->CHDisplay;
d1987 2
a1988 1
     xres = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].XRes;
a1992 1
  temp = xres / 16;
d1994 1
d1996 6
a2001 1
  if(xres % 16) {
d2106 3
a2108 9
  if(HwInfo->jChipType >= SIS_661) {
     SiS_SetupCR5x(SiS_Pr, HwInfo);
     for(i = 0x13; i <= 0x14; i++) {
        CRTCdata = SiS_Pr->SiS_StandTable[StandTableIndex].CRTC[i];
        SiS_SetReg(SiS_Pr->SiS_P3d4,i,CRTCdata);
     }
  } else if( ( (HwInfo->jChipType == SIS_630) ||
               (HwInfo->jChipType == SIS_730) )  &&
             (HwInfo->jChipRevision >= 0x30) ) {       	   /* for 630S0 */
d2209 1
a2209 1
SiS_ClearExt1Regs(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo, USHORT ModeNo)
a2218 5
     if(ModeNo <= 0x13) {
        if(ModeNo == 0x06 || ModeNo >= 0x0e) {
	   SiS_SetReg(SiS_Pr->SiS_P3c4,0x0e,0x20);
	}
     }
d2282 39
d2328 4
d2367 59
a2425 1
     index = SiS_Pr->SiS_RefIndex[RefreshRateTableIndex].Ext_CRT1CRTC;
d2427 12
a2438 12
     for(i=0,j=0;i<=7;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
     }
     for(j=0x10;i<=10;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
     }
     for(j=0x15;i<=12;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
     }
     for(j=0x0A;i<=15;i++,j++) {
        SiS_SetReg(SiS_Pr->SiS_P3c4,j,SiS_Pr->SiS_CRT1Table[index].CR[i]);
     }
d2440 2
a2441 2
     temp = SiS_Pr->SiS_CRT1Table[index].CR[16] & 0xE0;
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x0E,temp);
d2443 3
a2445 3
     temp = ((SiS_Pr->SiS_CRT1Table[index].CR[16]) & 0x01) << 5;
     if(modeflag & DoubleScanMode)  temp |= 0x80;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0x5F,temp);
d2447 1
d2485 1
a2485 1
   if(DisplayUnit & 0xff) temp++;
d2920 1
a2920 2
  /* disable auto-threshold */
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x3D,0xFE);
d2928 4
a2931 4
  SiS_SetReg(SiS_Pr->SiS_P3c4,0x08,0xAE);
  SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x09,0xF0);
  if(ModeNo > 0x13) {
     if(HwInfo->jChipType >= SIS_661) {
d2934 3
a2936 1
	   SiS_SetRegOR(SiS_Pr->SiS_P3c4,0x3D,0x01);
d2938 4
a2941 2
     } else {
        if((!(modeflag & DoubleScanMode)) || (!(modeflag & HalfDCLK))) {
d2943 1
d2945 7
a2951 1
	}
d2966 2
a2967 1
  USHORT data=0, VCLK=0, index=0;
d2969 2
a2970 1
  if(ModeNo > 0x13) {
d2975 1
a2975 1
	                      RefreshRateTableIndex,HwInfo);
d2980 1
a2980 1
  if(HwInfo->jChipType < SIS_315H) {
d2982 3
a2984 2
     if(VCLK > 150) data |= 0x80;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0x7B,data);
d2986 3
a2988 3
     data = 0x00;
     if(VCLK >= 150) data |= 0x08;
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x32,0xF7,data);
d2990 1
a2990 1
  } else {
d2992 1
d3001 4
a3004 2
  /* DAC speed */
  if(HwInfo->jChipType >= SIS_661) {
d3006 3
a3008 1
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xE8,0x10);
d3010 2
d3013 3
a3015 17

     data = 0x03;
     if((VCLK >= 135) && (VCLK < 160))      data = 0x02;
     else if((VCLK >= 160) && (VCLK < 260)) data = 0x01;
     else if(VCLK >= 260)                   data = 0x00;

     if(HwInfo->jChipType == SIS_540) {
        if((VCLK == 203) || (VCLK < 234))   data = 0x02;
     }

     if(HwInfo->jChipType < SIS_315H) {
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xFC,data);
     } else {
        if(HwInfo->jChipType > SIS_315PRO) {
           if(ModeNo > 0x13) data &= 0xfc;
        }
        SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x07,0xF8,data);
d3017 1
a3017 1

d3025 2
a3026 1
  USHORT data,infoflag=0,modeflag;
d3029 1
a3029 1
  USHORT data2,data3;
d3031 3
a3033 1
  UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
a3038 1
     xres = SiS_Pr->CHDisplay;
a3039 1
     resindex = SiS_GetResInfo(SiS_Pr,ModeNo,ModeIdIndex);
d3043 5
a3047 1
	xres = SiS_Pr->SiS_ModeResInfo[resindex].HTotal;
a3049 1
	xres = SiS_Pr->SiS_StResInfo[resindex].HTotal;
d3056 4
a3059 1
  data = 0;
d3062 21
a3082 2
        data |= 0x02;
        data |= ((SiS_Pr->SiS_ModeType - ModeVGA) << 2);
a3083 1
     if(infoflag & InterlaceMode) data |= 0x20;
a3084 1
  SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x06,0xC0,data);
d3087 1
a3087 1
     data = 0;
d3089 1
a3089 1
        if(xres <= 800)       data = 0x0020;
d3091 1
a3091 1
        else                  data = 0x0048;
d3093 1
a3093 1
     SiS_SetReg(SiS_Pr->SiS_P3d4,0x19,(data & 0xFF));
a3100 2
  data = 0;
  if(modeflag & LineCompareOff) data = 0x08;
d3102 5
a3106 1
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xF7,data);
d3108 5
a3112 1
     SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0F,0xB7,data);
a3119 4
  if(HwInfo->jChipType >= SIS_661) {
     SiS_SetRegAND(SiS_Pr->SiS_P3c4,0x31,0xfb);
  }

d3121 1
a3122 1

d3141 1
d3143 2
a3144 3
  } else if( (HwInfo->jChipType == SIS_330) ||
             ((HwInfo->jChipType == SIS_760) && (SiS_Pr->SiS_SysFlags & SF_760UMA))) {

d3146 1
a3146 7
     if(HwInfo->jChipType == SIS_330) {
        data = SiS_Pr->SiS_SR15[2][data];
     } else {
        if(SiS_Pr->SiS_ROMNew) 	    data = ROMAddr[0xf6];
        else if(SiS_Pr->SiS_UseROM) data = ROMAddr[0x100 + data];
	else                        data = 0xba;
     }
d3159 3
a3161 1
	if(data3) data2 *= data3;
d3167 10
a3176 22
	if(HwInfo->jChipType == SIS_330) {
	   if(SiS_Pr->SiS_ModeType != Mode16Bpp) {
              if     (data2 >= 0x19c) data = 0xba;
	      else if(data2 >= 0x140) data = 0x7a;
	      else if(data2 >= 0x101) data = 0x3a;
	      else if(data2 >= 0xf5)  data = 0x32;
	      else if(data2 >= 0xe2)  data = 0x2a;
	      else if(data2 >= 0xc4)  data = 0x22;
	      else if(data2 >= 0xac)  data = 0x1a;
	      else if(data2 >= 0x9e)  data = 0x12;
	      else if(data2 >= 0x8e)  data = 0x0a;
	      else                    data = 0x02;
	   } else {
	      if(data2 >= 0x127)      data = 0xba;
	      else                    data = 0x7a;
	   }
	} else {
	   if     (data2 >= 0x190) data = 0xba;
	   else if(data2 >= 0xff)  data = 0x7a;
	   else if(data2 >= 0xd3)  data = 0x3a;
	   else if(data2 >= 0xa9)  data = 0x1a;
	   else if(data2 >= 0x93)  data = 0x0a;
d3178 6
a3183 3
	}
     }
     SiS_SetReg(SiS_Pr->SiS_P3c4,0x17,data);
d3205 34
d3413 1
a3413 1
  SiS_ClearExt1Regs(SiS_Pr, HwInfo, ModeNo);
a3477 2


d3479 1
a3479 1
/*         HELPER: RESET VIDEO BRIDGE        */
d3483 1
a3483 1
SiS_ResetVB(SiS_Private *SiS_Pr, PSIS_HW_INFO HwInfo)
d3485 9
a3493 16
   UCHAR  *ROMAddr  = HwInfo->pjVirtualRomBase;
   USHORT temp;

   if(SiS_Pr->SiS_UseROM) {
      if(HwInfo->jChipType < SIS_330) {
         temp = ROMAddr[VB310Data_1_2_Offset] | 0x40;
	 if(SiS_Pr->SiS_ROMNew) temp = ROMAddr[0x80] | 0x40;
         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
      } else if(HwInfo->jChipType >= SIS_661) {
         temp = ROMAddr[0x7e];
         if(SiS_Pr->SiS_ROMNew) temp = ROMAddr[0x80];
         if(HwInfo->jChipType >= SIS_660)                  temp |= 0x40;
         else if(SiS_GetReg(SiS_Pr->SiS_P3d4,0x7b) >= 100) temp |= 0x40;
         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x02,temp);
      }
   }
d3582 1
d3584 1
a3588 1
   ULONG   temp;
d3602 1
a3602 1
#if defined(LINUX_XF86) && (defined(i386) || defined(__i386) || defined(__i386__) || defined(__AMD64__))
d3640 11
a3650 1
         SiS_ResetVB(SiS_Pr, HwInfo);
d3652 1
d3654 1
d3675 21
a3695 1
      SiS_SetupCR5x(SiS_Pr, HwInfo);
d3739 1
a3739 1
         if(!SiS_Pr->SiS_ROMNew) {
d3828 1
d3830 1
a3866 1
#if (defined(i386) || defined(__i386) || defined(__i386__) || defined(__AMD64__))
a3867 3
#else
   SiS_Pr->SiS_VGAINFO = 0x11;
#endif
d3929 13
a3941 1
	 SiS_ResetVB(SiS_Pr, HwInfo);
d3943 1
d3945 1
d3987 1
a3987 1
         if(!SiS_Pr->SiS_ROMNew) {
a4056 1
#if (defined(i386) || defined(__i386) || defined(__i386__) || defined(__AMD64__))
a4057 3
#else
   SiS_Pr->SiS_VGAINFO = 0x11;
#endif
d4095 21
a4115 1
      SiS_SetupCR5x(SiS_Pr, HwInfo);
a4283 175
#ifndef GETBITSTR
#define BITMASK(h,l)    	(((unsigned)(1U << ((h)-(l)+1))-1)<<(l))
#define GENMASK(mask)   	BITMASK(1?mask,0?mask)
#define GETBITS(var,mask)   	(((var) & GENMASK(mask)) >> (0?mask))
#define GETBITSTR(val,from,to)  ((GETBITS(val,from)) << (0?to))
#endif

static void
SiS_CalcCRRegisters(SiS_Private *SiS_Pr, int depth)
{
   SiS_Pr->CCRT1CRTC[0]  =  ((SiS_Pr->CHTotal >> 3) - 5) & 0xff;		/* CR0 */
   SiS_Pr->CCRT1CRTC[1]  =  (SiS_Pr->CHDisplay >> 3) - 1;			/* CR1 */
   SiS_Pr->CCRT1CRTC[2]  =  (SiS_Pr->CHBlankStart >> 3) - 1;			/* CR2 */
   SiS_Pr->CCRT1CRTC[3]  =  (((SiS_Pr->CHBlankEnd >> 3) - 1) & 0x1F) | 0x80;	/* CR3 */
   SiS_Pr->CCRT1CRTC[4]  =  (SiS_Pr->CHSyncStart >> 3) + 3;			/* CR4 */
   SiS_Pr->CCRT1CRTC[5]  =  ((((SiS_Pr->CHBlankEnd >> 3) - 1) & 0x20) << 2) |	/* CR5 */
       			    (((SiS_Pr->CHSyncEnd >> 3) + 3) & 0x1F);

   SiS_Pr->CCRT1CRTC[6]  =  (SiS_Pr->CVTotal - 2) & 0xFF;			/* CR6 */
   SiS_Pr->CCRT1CRTC[7]  =  (((SiS_Pr->CVTotal - 2) & 0x100) >> 8)		/* CR7 */
 	 		  | (((SiS_Pr->CVDisplay - 1) & 0x100) >> 7)
	 		  | ((SiS_Pr->CVSyncStart & 0x100) >> 6)
	 	  	  | (((SiS_Pr->CVBlankStart - 1) & 0x100) >> 5)
			  | 0x10
	 		  | (((SiS_Pr->CVTotal - 2) & 0x200)   >> 4)
	 		  | (((SiS_Pr->CVDisplay - 1) & 0x200) >> 3)
	 		  | ((SiS_Pr->CVSyncStart & 0x200) >> 2);

   SiS_Pr->CCRT1CRTC[16] = ((((SiS_Pr->CVBlankStart - 1) & 0x200) >> 4) >> 5); 	/* CR9 */

   if(depth != 8) {
      if(SiS_Pr->CHDisplay >= 1600)      SiS_Pr->CCRT1CRTC[16] |= 0x60;		/* SRE */
      else if(SiS_Pr->CHDisplay >= 640)  SiS_Pr->CCRT1CRTC[16] |= 0x40;
   }

#if 0
   if (mode->VScan >= 32)
	regp->CRTC[9] |= 0x1F;
   else if (mode->VScan > 1)
	regp->CRTC[9] |= mode->VScan - 1;
#endif

   SiS_Pr->CCRT1CRTC[8] =  (SiS_Pr->CVSyncStart     ) & 0xFF;			/* CR10 */
   SiS_Pr->CCRT1CRTC[9] =  ((SiS_Pr->CVSyncEnd      ) & 0x0F) | 0x80;		/* CR11 */
   SiS_Pr->CCRT1CRTC[10] = (SiS_Pr->CVDisplay    - 1) & 0xFF;			/* CR12 */
   SiS_Pr->CCRT1CRTC[11] = (SiS_Pr->CVBlankStart - 1) & 0xFF;			/* CR15 */
   SiS_Pr->CCRT1CRTC[12] = (SiS_Pr->CVBlankEnd   - 1) & 0xFF;			/* CR16 */

   SiS_Pr->CCRT1CRTC[13] =							/* SRA */
                        GETBITSTR((SiS_Pr->CVTotal     -2), 10:10, 0:0) |
                        GETBITSTR((SiS_Pr->CVDisplay   -1), 10:10, 1:1) |
                        GETBITSTR((SiS_Pr->CVBlankStart-1), 10:10, 2:2) |
                        GETBITSTR((SiS_Pr->CVSyncStart   ), 10:10, 3:3) |
                        GETBITSTR((SiS_Pr->CVBlankEnd  -1),   8:8, 4:4) |
                        GETBITSTR((SiS_Pr->CVSyncEnd     ),   4:4, 5:5) ;

   SiS_Pr->CCRT1CRTC[14] =							/* SRB */
                        GETBITSTR((SiS_Pr->CHTotal      >> 3) - 5, 9:8, 1:0) |
                        GETBITSTR((SiS_Pr->CHDisplay    >> 3) - 1, 9:8, 3:2) |
                        GETBITSTR((SiS_Pr->CHBlankStart >> 3) - 1, 9:8, 5:4) |
                        GETBITSTR((SiS_Pr->CHSyncStart  >> 3) + 3, 9:8, 7:6) ;


   SiS_Pr->CCRT1CRTC[15] =							/* SRC */
                        GETBITSTR((SiS_Pr->CHBlankEnd >> 3) - 1, 7:6, 1:0) |
                        GETBITSTR((SiS_Pr->CHSyncEnd  >> 3) + 3, 5:5, 2:2) ;
}

void
SiS_CalcLCDACRT1Timing(SiS_Private *SiS_Pr,USHORT ModeNo,USHORT ModeIdIndex)
{
   USHORT modeflag, tempax, tempbx, VGAHDE = SiS_Pr->SiS_VGAHDE;
   int i,j;

   /* 1:1 data: use data set by setcrt1crtc() */
   if(SiS_Pr->SiS_LCDInfo & LCDPass11) return;

   if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
   } else if(SiS_Pr->UseCustomMode) {
     modeflag = SiS_Pr->CModeFlag;
   } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
   }

   if(modeflag & HalfDCLK) VGAHDE >>= 1;

   SiS_Pr->CHDisplay = VGAHDE;
   SiS_Pr->CHBlankStart = VGAHDE;

   SiS_Pr->CVDisplay = SiS_Pr->SiS_VGAVDE;
   SiS_Pr->CVBlankStart = SiS_Pr->SiS_VGAVDE;

   tempbx = SiS_Pr->PanelHT - SiS_Pr->PanelXRes;
   tempax = SiS_Pr->SiS_VGAHDE;  /* not /2 ! */
   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
      tempax = SiS_Pr->PanelXRes;
   }
   tempbx += tempax;
   if(modeflag & HalfDCLK) tempbx -= VGAHDE;
   SiS_Pr->CHTotal = SiS_Pr->CHBlankEnd = tempbx;

   tempax = VGAHDE;
   tempbx = SiS_Pr->CHTotal;
   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
      tempbx = SiS_Pr->PanelXRes;
      if(modeflag & HalfDCLK) tempbx >>= 1;
      tempax += ((tempbx - tempax) >> 1);
   }

   tempax += SiS_Pr->PanelHRS;
   SiS_Pr->CHSyncStart = tempax;
   tempax += SiS_Pr->PanelHRE;
   SiS_Pr->CHSyncEnd = tempax;

   tempbx = SiS_Pr->PanelVT - SiS_Pr->PanelYRes;
   tempax = SiS_Pr->SiS_VGAVDE;
   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
      tempax = SiS_Pr->PanelYRes;
   }
   SiS_Pr->CVTotal = SiS_Pr->CVBlankEnd = tempbx + tempax;

   tempax = SiS_Pr->SiS_VGAVDE;
   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) {
      tempax += (SiS_Pr->PanelYRes - tempax) >> 1;
   }
   tempax += SiS_Pr->PanelVRS;
   SiS_Pr->CVSyncStart = tempax;
   tempax += SiS_Pr->PanelVRE;
   SiS_Pr->CVSyncEnd = tempax;

   SiS_CalcCRRegisters(SiS_Pr, 8);
   SiS_Pr->CCRT1CRTC[16] &= ~0xE0;

   SiS_SetRegAND(SiS_Pr->SiS_P3d4,0x11,0x7f);

   for(i=0,j=0;i<=7;i++,j++) {
      SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
   }
   for(j=0x10;i<=10;i++,j++) {
      SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
   }
   for(j=0x15;i<=12;i++,j++) {
      SiS_SetReg(SiS_Pr->SiS_P3d4,j,SiS_Pr->CCRT1CRTC[i]);
   }
   for(j=0x0A;i<=15;i++,j++) {
      SiS_SetReg(SiS_Pr->SiS_P3c4,j,SiS_Pr->CCRT1CRTC[i]);
   }

   tempax = SiS_Pr->CCRT1CRTC[16] & 0xE0;
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x0E,0x1F,tempax);

   tempax = (SiS_Pr->CCRT1CRTC[16] & 0x01) << 5;
   if(modeflag & DoubleScanMode) tempax |= 0x80;
   SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x09,0x5F,tempax);

#ifdef TWDEBUG
   xf86DrvMsg(0, X_INFO, "%d %d %d %d  %d %d %d %d  (%d %d %d %d)\n",
       	SiS_Pr->CHDisplay, SiS_Pr->CHSyncStart, SiS_Pr->CHSyncEnd, SiS_Pr->CHTotal,
	SiS_Pr->CVDisplay, SiS_Pr->CVSyncStart, SiS_Pr->CVSyncEnd, SiS_Pr->CVTotal,
	SiS_Pr->CHBlankStart, SiS_Pr->CHBlankEnd, SiS_Pr->CVBlankStart, SiS_Pr->CVBlankEnd);

   xf86DrvMsg(0, X_INFO, " {{0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,\n",
   	SiS_Pr->CCRT1CRTC[0], SiS_Pr->CCRT1CRTC[1],
	SiS_Pr->CCRT1CRTC[2], SiS_Pr->CCRT1CRTC[3],
	SiS_Pr->CCRT1CRTC[4], SiS_Pr->CCRT1CRTC[5],
	SiS_Pr->CCRT1CRTC[6], SiS_Pr->CCRT1CRTC[7]);
   xf86DrvMsg(0, X_INFO, "   0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,\n",
   	SiS_Pr->CCRT1CRTC[8], SiS_Pr->CCRT1CRTC[9],
	SiS_Pr->CCRT1CRTC[10], SiS_Pr->CCRT1CRTC[11],
	SiS_Pr->CCRT1CRTC[12], SiS_Pr->CCRT1CRTC[13],
	SiS_Pr->CCRT1CRTC[14], SiS_Pr->CCRT1CRTC[15]);
   xf86DrvMsg(0, X_INFO, "   0x%02x}},\n", SiS_Pr->CCRT1CRTC[16]);
#endif
}
a4289 1

d4370 51
a4420 1
   SiS_CalcCRRegisters(pSiS->SiS_Pr, depth);
d4423 14
a4436 7
   case 8:  pSiS->SiS_Pr->CModeFlag |= 0x223b; break;
   case 16: pSiS->SiS_Pr->CModeFlag |= 0x227d; break;
   case 32: pSiS->SiS_Pr->CModeFlag |= 0x22ff; break;
   default: return 0;
   }

   if(pSiS->SiS_Pr->CFlags & V_DBLSCAN)
d4460 1
a4460 1
   xf86DrvMsg(0, X_INFO, "Custom mode %dx%d:\n",
d4465 8
a4472 4
   	pSiS->SiS_Pr->CCRT1CRTC[0], pSiS->SiS_Pr->CCRT1CRTC[1],
	pSiS->SiS_Pr->CCRT1CRTC[2], pSiS->SiS_Pr->CCRT1CRTC[3],
	pSiS->SiS_Pr->CCRT1CRTC[4], pSiS->SiS_Pr->CCRT1CRTC[5],
	pSiS->SiS_Pr->CCRT1CRTC[6], pSiS->SiS_Pr->CCRT1CRTC[7]);
d4474 8
a4481 4
   	pSiS->SiS_Pr->CCRT1CRTC[8], pSiS->SiS_Pr->CCRT1CRTC[9],
	pSiS->SiS_Pr->CCRT1CRTC[10], pSiS->SiS_Pr->CCRT1CRTC[11],
	pSiS->SiS_Pr->CCRT1CRTC[12], pSiS->SiS_Pr->CCRT1CRTC[13],
	pSiS->SiS_Pr->CCRT1CRTC[14], pSiS->SiS_Pr->CCRT1CRTC[15]);
d4484 3
a4486 1
   	pSiS->SiS_Pr->CSR2B, pSiS->SiS_Pr->CSR2C, pSiS->SiS_Pr->CSRClock);
d4603 1
a4603 1
      E = HDE + 1;  /* 0x80 0x64 */
d4611 1
a4611 1
      F = HRS - E - 3;  /* 0x06 0x06 */
d4641 1
a4641 1
      C = (temp > 0) ? temp : (temp + 64); /* 0x0b 0x0b */
d5173 1
a5173 1

@


