head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407221130:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.06.53;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.06.53;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.18.15.47;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.22.46;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/apm/apm_cursor.c,v 1.14 2000/06/30 18:27:02 dawes Exp $ */


#include "X.h"
#include "Xproto.h"
#include "misc.h"
#include "input.h"
#include "cursorstr.h"
#include "regionstr.h"
#include "scrnintstr.h"
#include "servermd.h"
#include "windowstr.h"
#include "mfb.h"
#include "mipointer.h"

#include "apm.h"

#define CURSORWIDTH	64
#define CURSORHEIGHT	64
#define CURSORSIZE	(CURSORWIDTH * CURSORHEIGHT / 8)
#define CURSORALIGN	((CURSORSIZE + 1023) & ~1023l)

static void	ApmShowCursor(ScrnInfoPtr pScrn);
static void	ApmHideCursor(ScrnInfoPtr pScrn);
static void	ApmSetCursorPosition(ScrnInfoPtr pScrn, int x, int y);
static void	ApmSetCursorColors(ScrnInfoPtr pScrn, int bg, int fg);
static void	ApmLoadCursorImage(ScrnInfoPtr pScrn, u8* data);
static Bool	ApmUseHWCursor(ScreenPtr pScreen, CursorPtr pCurs);

static u8 ConvertTable[256];

/* Inline functions */
static __inline__ void
WaitForFifo(ApmPtr pApm, int slots)
{
  if (!pApm->UsePCIRetry) {
    volatile int i;
#define MAXLOOP 1000000

    for(i = 0; i < MAXLOOP; i++) {
      if ((STATUS() & STATUS_FIFO) >= slots)
	break;
    }
    if (i == MAXLOOP) {
      unsigned int status = STATUS();

      WRXB(0x1FF, 0);
      if (!xf86ServerIsExiting())
	FatalError("Hung in WaitForFifo() (Status = 0x%08X)\n", status);
    }
  }
}

void ApmHWCursorReserveSpace(ApmPtr pApm)
{
  pApm->OffscreenReserved	+= 2 * CURSORALIGN;
  pApm->DisplayedCursorAddress	= pApm->BaseCursorAddress =
  pApm->CursorAddress	= 1024 * xf86Screens[pApm->pScreen->myNum]->videoRam -
					pApm->OffscreenReserved;
}


int ApmHWCursorInit(ScreenPtr pScreen)
{
  ScrnInfoPtr		pScrn = xf86Screens[pScreen->myNum];
  APMDECL(pScrn);
  xf86CursorInfoPtr	infoPtr;
  u32			i;

  infoPtr = xf86CreateCursorInfoRec();
  if (!infoPtr)
      return FALSE;

  pApm->CursorInfoRec		= infoPtr;

  infoPtr->MaxWidth	= CURSORWIDTH;
  infoPtr->MaxHeight	= CURSORHEIGHT;

  infoPtr->Flags = HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_1;
  infoPtr->SetCursorColors	= ApmSetCursorColors;
  infoPtr->SetCursorPosition	= ApmSetCursorPosition;
  infoPtr->LoadCursorImage	= ApmLoadCursorImage;
  infoPtr->HideCursor		= ApmHideCursor;
  infoPtr->ShowCursor		= ApmShowCursor;
  infoPtr->UseHWCursor		= ApmUseHWCursor;
  
  /*ErrorF("%s %s: %s: Using hardware cursor (XAA).\n", 
         XCONFIG_PROBED, vga256InfoRec.name, vga256InfoRec.chipset);    

  if(XAACursorInfoRec.Flags & USE_HARDWARE_CURSOR) {
    vgaHWCursor.Init = XAACursorInit;
    vgaHWCursor.Initialized = TRUE;
    vgaHWCursor.Restore = XAARestoreCursor;
    vgaHWCursor.Warp = XAAWarpCursor;
    vgaHWCursor.QueryBestSize = XAAQueryBestSize;
  }*/

  /* Set up the convert table for the input cursor data */
  for (i = 0; i < 256; i++)
    ConvertTable[i] = ((~i) & 0xAA) | (i & (i >> 1) & 0x55);

  return xf86InitCursor(pScreen, infoPtr);
}

 
static void 
ApmShowCursor(ScrnInfoPtr pScrn)
{
  APMDECL(pScrn);

  WaitForFifo(pApm, 2);
  WRXW(0x144, pApm->CursorAddress >> 10);
  WRXB(0x140, 1);
  pApm->DisplayedCursorAddress = pApm->CursorAddress;
}


static void
ApmHideCursor(ScrnInfoPtr pScrn)
{
  APMDECL(pScrn);

  WaitForFifo(pApm, 1);
  WRXB(0x140, 0);
}

static Bool ApmUseHWCursor(ScreenPtr pScreen, CursorPtr pCurs)
{
    return APMPTR(xf86Screens[pScreen->myNum])->CurrentLayout.bitsPerPixel >= 8;
}

static void
ApmSetCursorPosition(ScrnInfoPtr pScrn, int x, int y)
{
  APMDECL(pScrn);
  int	xoff, yoff;

  if (x < -CURSORWIDTH || y < -CURSORHEIGHT) {
      WaitForFifo(pApm, 1);
      WRXB(0x140, 0);
      return;
  }

  if (x < 0) {
      xoff = -x;
      x = 0;
  }
  else
      xoff = 0;
  if (y < 0) {
      yoff = -y;
      y = 0;
  }
  else
      yoff = 0;

  WaitForFifo(pApm, 2);
  WRXW(0x14C, (yoff << 8) | (xoff & 0xFF));
  WRXL(0x148, (y << 16) | (x & 0xFFFF));
}


static void
ApmSetCursorColors(ScrnInfoPtr pScrn, int bg, int fg)
{	 
  APMDECL(pScrn);
  u16 packedcolfg, packedcolbg;

  if (pApm->CurrentLayout.bitsPerPixel == 8)
  {
    WaitForFifo(pApm, 2);
    WRXB(0x141, fg);
    WRXB(0x142, bg);
  }
  else
  {
    packedcolfg = 
      ((fg & 0xE00000) >> 16) |
      ((fg & 0x00E000) >> 11) |
      ((fg & 0x0000C0) >> 6);
    packedcolbg = 
      ((bg & 0xE00000) >> 16) |
      ((bg & 0x00E000) >> 11) |
      ((bg & 0x0000C0) >> 6);
    WaitForFifo(pApm, 2);
    WRXB(0x141, packedcolfg);
    WRXB(0x142, packedcolbg);
  }
}


static void 
ApmLoadCursorImage(ScrnInfoPtr pScrn, u8* data)
{
  APMDECL(pScrn);
  u32 i;
  u8 tmp[2 * CURSORSIZE];

  /* Correct input data */
  for (i = 0; i < sizeof tmp; i++)
    tmp[i] = ConvertTable[data[i]];
  /*
   * To avoid flicker.
   * Note: 2*pApm->BaseCursorAddress + CURSORALIGN (=1024) < 2^31 all the time.
   */
  pApm->CursorAddress = 2*pApm->BaseCursorAddress + CURSORALIGN - pApm->DisplayedCursorAddress;
  memcpy((u8*)pApm->FbBase + pApm->CursorAddress, tmp, sizeof tmp);
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/apm/apm_cursor.c,v 1.15 2003/10/30 18:37:20 tsi Exp $ */
d87 11
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d1 1
a1 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/apm/apm_cursor.c,v 1.15 2003/10/30 18:37:20 tsi Exp $ */
d87 11
@

