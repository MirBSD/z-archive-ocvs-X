head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407221130:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.07.03;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.07.03;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.36.08;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.23.04;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* (c) Itai Nahshon */
#undef DEBUG
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/cirrus/alp_xaam.c,v 1.7 2001/10/01 13:44:05 eich Exp $ */

#include "xf86.h"
#include "xf86_OSproc.h"
#include "xf86_ansic.h"
#include "compiler.h"

#include "xf86Pci.h"
#include "xf86PciInfo.h"

#include "vgaHW.h"

#include "cir.h"
#define _ALP_PRIVATE_
#include "alp.h"

#ifdef DEBUG
#define minb(p) \
        (ErrorF("minb(%X)\n", p),\
        MMIO_IN8(pCir->chip.alp->BLTBase, (p)))
#define moutb(p,v) \
        (ErrorF("moutb(%X, %X)\n", p,v),\
	MMIO_OUT8(pCir->chip.alp->BLTBase, (p),(v)))
#define vga_minb(p) \
        (ErrorF("minb(%X)\n", p),\
        MMIO_IN8(hwp->MMIOBase, (hwp->MMIOOffset + (p))))
#define vga_moutb(p,v) \
        { ErrorF("moutb(%X, %X)\n", p,v);\
	MMIO_OUT8(hwp->MMIOBase, (hwp->MMIOOffset + (p)),(v));}
#define minl(p) \
        (ErrorF("minl(%X)\n", p),\
        MMIO_IN32(pCir->chip.alp->BLTBase, (p)))
#define moutl(p,v) \
        (ErrorF("moutl(%X, %X)\n", p,v),\
	MMIO_OUT32(pCir->chip.alp->BLTBase, (p),(v)))
#else
#define minb(p) MMIO_IN8(pCir->chip.alp->BLTBase, (p))
#define moutb(p,v) MMIO_OUT8(pCir->chip.alp->BLTBase, (p),(v))
#define vga_minb(p) MMIO_IN8(hwp->MMIIOBase, (hwp->MMIOOffset + (p)))
#define vga_moutb(p,v) MMIO_OUT8(hwp->MMIOBase, (hwp->MMIOOffset + (p)),(v))
#define minl(p) MMIO_IN32(pCir->chip.alp->BLTBase, (p))
#define moutl(p,v) MMIO_OUT32(pCir->chip.alp->BLTBase, (p),(v))
#endif

static const CARD8 translated_rop[] =
{
  /* GXclear */        0x00U,
  /* GXand   */        0x05U,
  /* GXandreverse */   0x09U,
  /* GXcopy */         0x0DU,
  /* GXandinversted */ 0x50U,
  /* GXnoop */         0x06U,
  /* GXxor */          0x59U,
  /* GXor */           0x6DU,
  /* GXnor */          0x90U,
  /* GXequiv */        0x95U,
  /* GXinvert */       0x0BU,
  /* GXorReverse */    0xADU,
  /* GXcopyInverted */ 0xD0U,
  /* GXorInverted */   0xD6U,
  /* GXnand */         0xDAU,
  /* GXset */          0x0EU
};

#define WAIT while(minl(0x40) & pCir->chip.alp->waitMsk){};
#define WAIT_1 while((minl(0x40)) & 0x1){};

static void AlpSync(ScrnInfoPtr pScrn)
{
    CirPtr pCir = CIRPTR(pScrn);
#ifdef ALP_DEBUG
	ErrorF("AlpSync mm\n");
#endif
	WAIT_1;
	return;
}

static void
AlpSetupForScreenToScreenCopy(ScrnInfoPtr pScrn, int xdir, int ydir, int rop,
								unsigned int planemask, int trans_color)
{
	CirPtr pCir = CIRPTR(pScrn);
	int pitch = pCir->pitch;

	WAIT;

	pCir->chip.alp->transRop = translated_rop[rop] << 16;
	
#ifdef ALP_DEBUG
	ErrorF("AlpSetupForScreenToScreenCopy xdir=%d ydir=%d rop=%x planemask=%x trans_color=%x\n",
			xdir, ydir, rop, planemask, trans_color);
#endif
	moutl(0x0C, (pitch << 16) | pitch); 

}

static void
AlpSubsequentScreenToScreenCopy(ScrnInfoPtr pScrn, int x1, int y1, int x2,
								int y2, int w, int h)
{
    CirPtr pCir = CIRPTR(pScrn);
    int source, dest;
    int  hh, ww;
    int decrement = 0;
    int pitch = pCir->pitch;
    
    ww = ((w * pScrn->bitsPerPixel / 8) - 1) & 0x1fff;
    hh = (h - 1) & 0x1fff;
    dest = y2 * pitch + x2 * pScrn->bitsPerPixel / 8;
    source = y1 * pitch + x1 * pScrn->bitsPerPixel / 8;
    if (dest > source) {
        decrement = 1;
	dest += hh * pitch + ww;
	source += hh * pitch + ww;
    }

    WAIT;

    /* Width / Height */
    moutl(0x08, (hh << 16) | ww);
    /* source */
    moutl(0x14, source & 0x3fffff);
    moutl(0x18, pCir->chip.alp->transRop | decrement);
    
    /* dest */
    write_mem_barrier();
    moutl(0x10, dest & 0x3fffff);
    
#ifdef ALP_DEBUG
    ErrorF("AlpSubsequentScreenToScreenCopy x1=%d y1=%d x2=%d y2=%d w=%d h=%d\n",
	   x1, y1, x2, y2, w, h);
    ErrorF("AlpSubsequentScreenToScreenCopy s=%d d=%d ww=%d hh=%d\n",
	   source, dest, ww, hh);
#endif
    if (!pCir->chip.alp->autoStart) {
        CARD32 val = minl(0x40);
	moutl(0x40,val | 0x02);
    }
    write_mem_barrier();
}


static void
AlpSetupForSolidFill(ScrnInfoPtr pScrn, int color, int rop,
						unsigned int planemask)
{
    CirPtr pCir = CIRPTR(pScrn);
    int pitch = pCir->pitch;

    WAIT;

#ifdef ALP_DEBUG
    ErrorF("AlpSetupForSolidFill color=%x rop=%x planemask=%x\n",
	   color, rop, planemask);
#endif

    moutl(0x04, color & 0xffffff);

    /* Set dest pitch */
    moutl(0x0C, pitch & 0x1fff);
    moutl(0x18, (((pScrn->bitsPerPixel - 8) << 1))
	  | translated_rop[rop] << 16
	  | 0x040000C0);
}

static void
AlpSubsequentSolidFillRect(ScrnInfoPtr pScrn, int x, int y, int w, int h)
{
    int dest;
    int hh, ww;
    CirPtr pCir = CIRPTR(pScrn);
    int pitch = pCir->pitch;

    ww = ((w * pScrn->bitsPerPixel / 8) - 1) & 0x1fff;
    hh = (h - 1) & 0x7ff;
    dest = y * pitch + x * pScrn->bitsPerPixel / 8;

    WAIT;
    
    /* Width / Height */
    write_mem_barrier();
    moutl(0x08, (hh << 16) | ww);

#ifdef ALP_DEBUG
    ErrorF("AlpSubsequentSolidFillRect x=%d y=%d w=%d h=%d\n",
	   x, y, w, h);
#endif
    /* dest */
    moutl(0x10, (dest & 0x3fffff));
    
    if (!pCir->chip.alp->autoStart) {
        CARD32 val = minl(0x40);
	moutl(0x40, val | 0x02);
    }
    write_mem_barrier();
}

static void
AlpAccelEngineInit(ScrnInfoPtr pScrn)
{
  vgaHWPtr hwp = VGAHWPTR(pScrn);
    CirPtr pCir = CIRPTR(pScrn);

    if (pCir->Chipset != PCI_CHIP_GD7548)  {
        vga_moutb(0x3CE, 0x0E); /* enable writes to gr33 */
        vga_moutb(0x3CF, 0x20); /* enable writes to gr33 */
    }
    if (pCir->properties & ACCEL_AUTOSTART) {
        moutl(0x40, 0x80); /* enable autostart */
	pCir->chip.alp->waitMsk = 0x10;
	pCir->chip.alp->autoStart = TRUE;
    } else {
        pCir->chip.alp->waitMsk = 0x1;
	pCir->chip.alp->autoStart = FALSE;
    }
}

Bool
AlpXAAInitMMIO(ScreenPtr pScreen)
{
	ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
	CirPtr pCir = CIRPTR(pScrn);
	XAAInfoRecPtr XAAPtr;
	
	pCir->InitAccel =  AlpAccelEngineInit;
#ifdef ALP_DEBUG
	ErrorF("AlpXAAInitMM\n");
#endif

	XAAPtr = XAACreateInfoRec();
	if (!XAAPtr) return FALSE;
	
	XAAPtr->Flags |= LINEAR_FRAMEBUFFER;
	XAAPtr->Sync = AlpSync;

	XAAPtr->SetupForScreenToScreenCopy = AlpSetupForScreenToScreenCopy;
	XAAPtr->SubsequentScreenToScreenCopy = AlpSubsequentScreenToScreenCopy;
	XAAPtr->ScreenToScreenCopyFlags = 
	  (NO_TRANSPARENCY | NO_PLANEMASK);

	XAAPtr->SetupForSolidFill = AlpSetupForSolidFill;
	XAAPtr->SubsequentSolidFillRect = AlpSubsequentSolidFillRect;
	XAAPtr->SubsequentSolidFillTrap = NULL;
	XAAPtr->SolidFillFlags =  NO_PLANEMASK;

	switch (pCir->Chipset) {
	  case PCI_CHIP_GD5480:
	  case PCI_CHIP_GD5446:
	      pCir->chip.alp->BLTBase = pCir->IOBase + 0x100;
	      break;
	  default:
	      pCir->chip.alp->BLTBase = pCir->IOBase;
	      break;
	}

	AlpAccelEngineInit(pScrn);
	
	pCir->AccelInfoRec = XAAPtr;

	if (!XAAInit(pScreen, XAAPtr))
	    return FALSE;

	return TRUE;
}





@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d2 2
a3 2
/* #define DEBUG */
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/cirrus/alp_xaam.c,v 1.8 2002/07/10 02:36:50 tsi Exp $ */
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d2 2
a3 2
/* #define DEBUG */
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/cirrus/alp_xaam.c,v 1.8 2002/07/10 02:36:50 tsi Exp $ */
@

