head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407221130:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.09.13;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.09.13;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.37.55;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.18.28.01;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.25.56;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 2000 by Conectiva S.A. (http://www.conectiva.com)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *  
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * CONECTIVA LINUX BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * Except as contained in this notice, the name of Conectiva Linux shall
 * not be used in advertising or otherwise to promote the sale, use or other
 * dealings in this Software without prior written authorization from
 * Conectiva Linux.
 *
 * Author: Paulo César Pereira de Andrade <pcpa@@conectiva.com.br>
 *
 * $XFree86: xc/programs/Xserver/hw/xfree86/xf86cfg/mouse-cfg.c,v 1.7 2001/04/22 08:36:31 herrb Exp $
 */

#include "xf86config.h"
#include "mouse-cfg.h"
#include <X11/Xaw/AsciiText.h>
#include <X11/Xaw/Label.h>
#include <X11/Xaw/List.h>
#include <X11/Xaw/Form.h>
#include <X11/Xaw/Toggle.h>
#include <X11/Xaw/Viewport.h>
#include <X11/extensions/xf86misc.h>

/*
 * Prototypes
 */
static void MouseDeviceCallback(Widget, XtPointer, XtPointer);
static void MouseProtocolCallback(Widget, XtPointer, XtPointer);
static void MouseEmulateCallback(Widget, XtPointer, XtPointer);
static void MouseApplyCallback(Widget, XtPointer, XtPointer);
static Bool MouseConfigCheck(void);

/*
 * Initialization
 */
static char *protocols[] = {
#ifdef WSCONS_SUPPORT
    "wsmouse",
#endif
    "Auto",
    "BusMouse",
    "GlidePoint",
    "IntelliMouse",
    "Logitech",
    "Microsoft",
    "MMHitTab",
    "MMSeries",
    "MouseMan",
    "MouseSystems",
    "PS/2",
    "SysMouse",
    "ThinkingMouse",
};

static Widget text;
static char *device, *protocol;
static Bool emulate;
static XF86ConfInputPtr current_input;

/*
 * Implementation
 */
/*ARGSUSED*/
XtPointer
MouseConfig(XtPointer config)
{
    XF86ConfInputPtr mouse = (XF86ConfInputPtr)config;
    XF86OptionPtr option;
    char mouse_name[32];
    Arg args[1];

    static char *Device = "Device", *Protocol = "Protocol",
		*Emulate3Buttons = "Emulate3Buttons",
		*Emulate3Timeout = "Emulate3Timeout";

    current_input = mouse;

    if (mouse != NULL) {
	emulate = xf86findOption(mouse->inp_option_lst,
				 Emulate3Buttons) != NULL;
	if ((option = xf86findOption(mouse->inp_option_lst, Device)) != NULL)
	    device = option->opt_val;
	else
	    device = NULL;
	if ((option = xf86findOption(mouse->inp_option_lst, Protocol)) != NULL)
	    protocol = option->opt_val;
	else
	    protocol = NULL;

	XtSetArg(args[0], XtNstring, mouse->inp_identifier);
	XtSetValues(ident_widget, args, 1);
    }
    else {
	XF86ConfInputPtr input = XF86Config->conf_input_lst;
	int nmouses = 0;

	while (input != NULL) {
	    if (strcasecmp(input->inp_driver, "mouse") == 0)
		++nmouses;
	    input = (XF86ConfInputPtr)(input->list.next);
	}
	do {
	    XmuSnprintf(mouse_name, sizeof(mouse_name), "Mouse%d", nmouses);
	    ++nmouses;
	} while (xf86findInput(mouse_name,
		 XF86Config->conf_input_lst));

	XtSetArg(args[0], XtNstring, mouse_name);
	XtSetValues(ident_widget, args, 1);

	emulate = True;
	device = NULL;
	protocol = NULL;
    }

    xf86info.cur_list = MOUSE;
    XtSetSensitive(back, xf86info.lists[MOUSE].cur_function > 0);
    XtSetSensitive(next, xf86info.lists[MOUSE].cur_function <
			 xf86info.lists[MOUSE].num_functions - 1);
    (xf86info.lists[MOUSE].functions[xf86info.lists[MOUSE].cur_function])
	(&xf86info);

    if (ConfigLoop(MouseConfigCheck) == True) {
	XtSetArg(args[0], XtNstring, &device);
	XtGetValues(text, args, 1);
	if (mouse == NULL) {
	    mouse = XtNew(XF86ConfInputRec);
	    mouse->list.next = NULL;
	    mouse->inp_identifier = XtNewString(ident_string);
	    mouse->inp_driver = XtNewString("mouse");
	    mouse->inp_option_lst = xf86newOption(XtNewString(Device),
						  XtNewString(device));
	    xf86addNewOption(mouse->inp_option_lst,
			     XtNewString(Protocol), XtNewString(protocol));
	    if (emulate) {
		xf86addNewOption(mouse->inp_option_lst,
			         XtNewString(Emulate3Buttons), NULL);
		xf86addNewOption(mouse->inp_option_lst,
			         XtNewString(Emulate3Timeout),
				 XtNewString("50"));
	    }
	    mouse->inp_comment = NULL;
	}
	else {
	    if ((option = xf86findOption(mouse->inp_option_lst, Device)) != NULL) {
		XtFree(option->opt_val);
		option->opt_val = XtNewString(device);
		XtFree(option->opt_comment);
	    }
	    else {
		if (mouse->inp_option_lst == NULL)
		    mouse->inp_option_lst = xf86newOption(XtNewString(Device),
							  XtNewString(device));
		else
		    xf86addNewOption(mouse->inp_option_lst,
				     XtNewString(Device), XtNewString(device));
	    }

	    if ((option = xf86findOption(mouse->inp_option_lst, Protocol)) != NULL) {
		XtFree(option->opt_val);
		option->opt_val = XtNewString(protocol);
		XtFree(option->opt_comment);
	    }
	    else
		xf86addNewOption(mouse->inp_option_lst,
				 XtNewString(Protocol), XtNewString(protocol));

	    if (emulate == False) {
		xf86removeOption(&(mouse->inp_option_lst), Emulate3Buttons);
		xf86removeOption(&(mouse->inp_option_lst), Emulate3Timeout);
	    }
	    else if (emulate) {
		xf86addNewOption(mouse->inp_option_lst,
				 XtNewString(Emulate3Buttons), NULL);
		xf86addNewOption(mouse->inp_option_lst,
				 XtNewString(Emulate3Timeout), XtNewString("50"));
	    }
	}
	if (strcasecmp(mouse->inp_identifier, ident_string))
	    xf86renameInput(XF86Config, mouse, ident_string);

	return ((XtPointer)mouse);
    }

    return (NULL);
}

static Bool
MouseConfigCheck(void)
{
    Arg args[1];
    XF86ConfInputPtr mouse = XF86Config->conf_input_lst;

    XtSetArg(args[0], XtNstring, &device);
    XtGetValues(text, args, 1);

    if (ident_string == NULL || strlen(ident_string) == 0 ||
	device == NULL || strlen(device) == 0 || protocol == NULL)
	return (False);
    while (mouse != NULL) {
	if (mouse != current_input &&
	    strcasecmp(ident_string, mouse->inp_identifier) == 0)
	    return (False);
	mouse = (XF86ConfInputPtr)(mouse->list.next);
    }

    return (True);
}

static void
MouseDeviceCallback(Widget w, XtPointer user_data, XtPointer call_data)
{
    XawListReturnStruct *info = (XawListReturnStruct *)call_data;
    Arg args[1];

    XtSetArg(args[0], XtNstring, info->string);
    XtSetValues((Widget)user_data, args, 1);
    XawTextSetInsertionPoint((Widget)user_data, strlen(info->string));
}

static void
MouseProtocolCallback(Widget w, XtPointer user_data, XtPointer call_data)
{
    XawListReturnStruct *info = (XawListReturnStruct *)call_data;

    protocol = info->string;
}

static void
MouseEmulateCallback(Widget w, XtPointer user_data, XtPointer call_data)
{
    emulate = (Bool)(long)call_data;
}

static void
MouseApplyCallback(Widget w, XtPointer user_data, XtPointer call_data)
{
    XF86MiscMouseSettings mouse;

    XF86MiscGetMouseSettings(XtDisplay(w), &mouse);
    XtFree(mouse.device);

    if (mouse.baudrate == 0 || mouse.baudrate < 0 || mouse.baudrate > 9600 ||
	mouse.baudrate % 1200)
	mouse.baudrate = 1200;

    if (strcmp(protocol, "BusMouse") == 0)
	mouse.type = MTYPE_BUSMOUSE;
    else if (strcmp(protocol, "GlidePoint") == 0)
	mouse.type = MTYPE_GLIDEPOINT;
    else if (strcmp(protocol, "IntelliMouse") == 0)
	mouse.type = MTYPE_IMSERIAL;
    else if (strcmp(protocol, "Logitech") == 0)
	mouse.type = MTYPE_LOGITECH;
    else if (strcmp(protocol, "Microsoft") == 0)
	mouse.type = MTYPE_MICROSOFT;
    else if (strcmp(protocol, "MMHitTab") == 0)
	mouse.type = MTYPE_MMHIT;
    else if (strcmp(protocol, "MMSeries") == 0)
	mouse.type = MTYPE_MMSERIES;
    else if (strcmp(protocol, "MouseMan") == 0)
	mouse.type = MTYPE_LOGIMAN;
    else if (strcmp(protocol, "MouseSystems") == 0)
	mouse.type = MTYPE_MOUSESYS;
    else if (strcmp(protocol, "PS/2") == 0)
	mouse.type = MTYPE_PS_2;
    else if (strcmp(protocol, "SysMouse") == 0)
	mouse.type = MTYPE_SYSMOUSE;
    else if (strcmp(protocol, "ThinkingMouse") == 0)
	mouse.type = MTYPE_THINKING;
    else
	mouse.type = MTYPE_AUTOMOUSE;

    mouse.emulate3buttons = emulate;
    mouse.flags |= MF_REOPEN;

    mouse.device = device;

    XFlush(XtDisplay(w));
    XF86MiscSetMouseSettings(XtDisplay(w), &mouse);
}

void
MouseDeviceAndProtocol(XF86SetupInfo *info)
{
    static int first = 1, ndevices;
    static Widget mouse_dp, listD, listP, emul3, apply;
    static char **devices;
    static char *patterns[] = {
#ifdef WSCONS_SUPPORT
	"wsmouse",
#endif
	"cua",
	"mouse",
	"ps",
	"sysmouse",
	"ttyS",
    };
    Arg args[2];
    int i;

    if (first) {
	Widget label, viewport;
	struct dirent *ent;
	DIR *dir;

	first = 0;

	mouse_dp = XtCreateWidget("mouseDP", formWidgetClass,
				  configp, NULL, 0);

	/* DEVICE */
	if ((dir = opendir("/dev")) != NULL) {
	    int i, len;

	    (void)readdir(dir);
	    (void)readdir(dir);
	    while ((ent = readdir(dir)) != NULL) {
		for (i = 0; i < sizeof(patterns) / sizeof(patterns[0]); i++) {
		    len = strlen(patterns[i]);

		    if (strncmp(patterns[i], ent->d_name, len) == 0) {
			len = strlen(ent->d_name) + 6;

			devices = (char**)XtRealloc((XtPointer)devices,
						    sizeof(char*) * ++ndevices);
			devices[ndevices - 1] = XtMalloc(len);
			XmuSnprintf(devices[ndevices - 1], len, "/dev/%s",
				    ent->d_name);
		    }
		}
	    }
	    closedir(dir);
	}

	label = XtCreateManagedWidget("labelD", labelWidgetClass,
				      mouse_dp, NULL, 0);
	text = XtVaCreateManagedWidget("device", asciiTextWidgetClass,
				       mouse_dp,
				       XtNeditType, XawtextEdit,
				       NULL, 0);
	viewport = XtCreateManagedWidget("viewportD", viewportWidgetClass,
					 mouse_dp, NULL, 0);

	listD = XtVaCreateManagedWidget("listD", listWidgetClass,
					viewport,
					XtNlist, devices,
					XtNnumberStrings, ndevices,
					NULL, 0);
	XtAddCallback(listD, XtNcallback, MouseDeviceCallback, (XtPointer)text);

	/* PROTOCOL */
	label = XtCreateManagedWidget("labelP", labelWidgetClass,
				      mouse_dp, NULL, 0);
	viewport = XtCreateManagedWidget("viewportP", viewportWidgetClass,
					 mouse_dp, NULL, 0);

	listP = XtVaCreateManagedWidget("listP", listWidgetClass,
					viewport,
					XtNlist, protocols,
					XtNnumberStrings,
					sizeof(protocols) / sizeof(protocols[0]),
					NULL, 0);
	XtAddCallback(listP, XtNcallback, MouseProtocolCallback, NULL);

	emul3 = XtVaCreateManagedWidget("emulate3", toggleWidgetClass,
					mouse_dp, XtNstate, True, NULL, 0);
	XtAddCallback(emul3, XtNcallback, MouseEmulateCallback, NULL);
	apply = XtCreateManagedWidget("apply", commandWidgetClass,
				      mouse_dp, NULL, 0);
	XtAddCallback(apply, XtNcallback, MouseApplyCallback, NULL);

	XtRealizeWidget(mouse_dp);
    }

    if (device != NULL) {
	for (i = 0; i < ndevices; i++)
	    if (strcmp(device, devices[i]) == 0) {
		XtSetArg(args[0], XtNstring, device);
		XtSetValues(text, args, 1);
		XawListHighlight(listD, i);
		break;
	    }

	if (i >= ndevices) {
	    devices = (char**)XtRealloc((XtPointer)devices,
					sizeof(char*) * ++ndevices);
	    devices[ndevices - 1] = XtNewString(device);
	    XawListHighlight(listD, ndevices - 1);
	    XtSetArg(args[0], XtNlist, devices);
	    XtSetArg(args[1], XtNnumberStrings, ndevices);
	    XtSetValues(listD, args, 2);
	}
	device = devices[i];
    }
    else {
	XtSetArg(args[0], XtNstring, "");
	XtSetValues(text, args, 1);
	XawListUnhighlight(listD);
    }

    if (protocol != NULL) {
	for (i = 0; i < sizeof(protocols) / sizeof(protocols[0]); i++)
	    if (strcasecmp(protocol, protocols[i]) == 0) {
		protocol = protocols[i];
		XawListHighlight(listP, i);
		break;
	    }
    }
    else {
	/* "Auto" is the default */
	protocol = protocols[0];
	XawListHighlight(listP, 0);
    }

    XtSetArg(args[0], XtNstate, emulate);
    XtSetValues(emul3, args, 1);

    XtChangeManagedSet(&current, 1, NULL, NULL, &mouse_dp, 1);
    current = mouse_dp;
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d29 1
a29 1
 * $XFree86: xc/programs/Xserver/hw/xfree86/xf86cfg/mouse-cfg.c,v 1.12 2003/11/03 05:11:58 tsi Exp $
d54 1
a54 10
static struct MouseProtocol {
    char *name;
    int type;
} protocols[] = {
#ifdef __UNIXOS2__
    {"OS2Mouse",		MTYPE_AUTOMOUSE},
#endif
#ifdef SCO
    {"OsMouse",			MTYPE_AUTOMOUSE},
#endif
d56 1
a56 1
    {"wsmouse",			MTYPE_AUTOMOUSE},
d58 13
a70 23
    {"Auto",			MTYPE_AUTOMOUSE},
    {"SysMouse",		MTYPE_SYSMOUSE},
    {"MouseSystems",		MTYPE_MOUSESYS},
    {"BusMouse",		MTYPE_BUSMOUSE},
    {"PS/2",			MTYPE_PS_2},
    {"Microsoft",		MTYPE_MICROSOFT},
#ifndef __FreeBSD__
    {"ImPS/2",			MTYPE_IMPS2},
    {"ExplorerPS/2",		MTYPE_EXPPS2},
    {"GlidePointPS/2",		MTYPE_GLIDEPOINTPS2},
    {"MouseManPlusPS/2",	MTYPE_MMANPLUSPS2},
    {"NetMousePS/2",		MTYPE_NETPS2},
    {"NetScrollPS/2",		MTYPE_NETSCROLLPS2},
    {"ThinkingMousePS/2",	MTYPE_THINKINGPS2},
#endif
    {"AceCad",			MTYPE_ACECAD},
    {"GlidePoint",		MTYPE_GLIDEPOINT},
    {"IntelliMouse",		MTYPE_IMSERIAL},
    {"Logitech",		MTYPE_LOGITECH},
    {"MMHitTab",		MTYPE_MMHIT},
    {"MMSeries",		MTYPE_MMSERIES},
    {"MouseMan",		MTYPE_LOGIMAN},
    {"ThinkingMouse",		MTYPE_THINKING},
a255 1
    int i;
d265 26
a290 6
    mouse.type = MTYPE_AUTOMOUSE;
    for (i = 0; i < sizeof(protocols) / sizeof(protocols[0]); i++)
	if (strcmp(protocols[i].name, protocol) == 0) {
	    mouse.type = protocols[i].type;
	    break;
	}
a306 6
    static char *dirs[] = {
	"/dev",
#ifdef __linux__
	"/dev/input"
#endif
    };
d311 1
a311 2
	"cuaa",
	"mice",
d321 1
a321 1
	Widget viewport;
a323 2
	char **list;
	int count;
d331 17
a347 19
	for (count = 0; count < sizeof(dirs) / sizeof(dirs[0]); count++) {
	    if ((dir = opendir(dirs[count])) != NULL) {
		int i, len, xlen = strlen(dirs[count]) + 2;

		(void)readdir(dir);
		(void)readdir(dir);
		while ((ent = readdir(dir)) != NULL) {
		    for (i = 0; i < sizeof(patterns) / sizeof(patterns[0]); i++) {
			len = strlen(patterns[i]);

			if (strncmp(patterns[i], ent->d_name, len) == 0) {
			    len = strlen(ent->d_name) + xlen;

			    devices = (char**)XtRealloc((XtPointer)devices,
							sizeof(char*) * ++ndevices);
			    devices[ndevices - 1] = XtMalloc(len);
			    XmuSnprintf(devices[ndevices - 1], len, "%s/%s",
					dirs[count], ent->d_name);
			}
a349 1
		closedir(dir);
d351 1
d354 1
a354 1
	(void) XtCreateManagedWidget("labelD", labelWidgetClass,
d371 1
a371 1
	(void) XtCreateManagedWidget("labelP", labelWidgetClass,
a375 4
	list = (char**)XtMalloc(sizeof(char*) *
				sizeof(protocols)/sizeof(protocols[0]));
	for (count = 0; count < sizeof(protocols)/sizeof(protocols[0]); count++)
	    list[count] = XtNewString(protocols[count].name);
d378 3
a380 2
					XtNlist, list,
					XtNnumberStrings, count,
d422 2
a423 2
	    if (strcasecmp(protocol, protocols[i].name) == 0) {
		protocol = protocols[i].name;
d430 1
a430 1
	protocol = protocols[0].name;
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d29 1
a29 1
 * $XFree86: xc/programs/Xserver/hw/xfree86/xf86cfg/mouse-cfg.c,v 1.10 2003/02/15 05:37:58 paulo Exp $
d54 1
a54 7
static struct MouseProtocol {
    char *name;
    int type;
} protocols[] = {
#ifdef SCO
    {"OsMouse",			MTYPE_AUTOMOUSE},
#endif
d56 1
a56 16
    {"wsmouse",			MTYPE_AUTOMOUSE},
#endif
    {"Auto",			MTYPE_AUTOMOUSE},
    {"SysMouse",		MTYPE_SYSMOUSE},
    {"MouseSystems",		MTYPE_MOUSESYS},
    {"BusMouse",		MTYPE_BUSMOUSE},
    {"PS/2",			MTYPE_PS_2},
    {"Microsoft",		MTYPE_MICROSOFT},
#ifndef __FreeBSD__
    {"ImPS/2",			MTYPE_IMPS2},
    {"ExplorerPS/2",		MTYPE_EXPPS2},
    {"GlidePointPS/2",		MTYPE_GLIDEPOINTPS2},
    {"MouseManPlusPS/2",	MTYPE_MMANPLUSPS2},
    {"NetMousePS/2",		MTYPE_NETPS2},
    {"NetScrollPS/2",		MTYPE_NETSCROLLPS2},
    {"ThinkingMousePS/2",	MTYPE_THINKINGPS2},
d58 13
a70 8
    {"AceCad",			MTYPE_ACECAD},
    {"GlidePoint",		MTYPE_GLIDEPOINT},
    {"IntelliMouse",		MTYPE_IMSERIAL},
    {"Logitech",		MTYPE_LOGITECH},
    {"MMHitTab",		MTYPE_MMHIT},
    {"MMSeries",		MTYPE_MMSERIES},
    {"MouseMan",		MTYPE_LOGIMAN},
    {"ThinkingMouse",		MTYPE_THINKING},
a255 1
    int i;
d265 26
a290 6
    mouse.type = MTYPE_AUTOMOUSE;
    for (i = 0; i < sizeof(protocols) / sizeof(protocols[0]); i++)
	if (strcmp(protocols[i].name, protocol) == 0) {
	    mouse.type = protocols[i].type;
	    break;
	}
a306 6
    static char *dirs[] = {
	"/dev",
#ifdef __linux__
	"/dev/input"
#endif
    };
d311 1
a311 2
	"cuaa",
	"mice",
a323 2
	char **list;
	int count;
d331 17
a347 19
	for (count = 0; count < sizeof(dirs) / sizeof(dirs[0]); count++) {
	    if ((dir = opendir(dirs[count])) != NULL) {
		int i, len, xlen = strlen(dirs[count]) + 2;

		(void)readdir(dir);
		(void)readdir(dir);
		while ((ent = readdir(dir)) != NULL) {
		    for (i = 0; i < sizeof(patterns) / sizeof(patterns[0]); i++) {
			len = strlen(patterns[i]);

			if (strncmp(patterns[i], ent->d_name, len) == 0) {
			    len = strlen(ent->d_name) + xlen;

			    devices = (char**)XtRealloc((XtPointer)devices,
							sizeof(char*) * ++ndevices);
			    devices[ndevices - 1] = XtMalloc(len);
			    XmuSnprintf(devices[ndevices - 1], len, "%s/%s",
					dirs[count], ent->d_name);
			}
a349 1
		closedir(dir);
d351 1
a375 4
	list = (char**)XtMalloc(sizeof(char*) *
				sizeof(protocols)/sizeof(protocols[0]));
	for (count = 0; count < sizeof(protocols)/sizeof(protocols[0]); count++)
	    list[count] = XtNewString(protocols[count].name);
d378 3
a380 2
					XtNlist, list,
					XtNnumberStrings, count,
d422 2
a423 2
	    if (strcasecmp(protocol, protocols[i].name) == 0) {
		protocol = protocols[i].name;
d430 1
a430 1
	protocol = protocols[0].name;
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d29 1
a29 1
 * $XFree86: xc/programs/Xserver/hw/xfree86/xf86cfg/mouse-cfg.c,v 1.12 2003/11/03 05:11:58 tsi Exp $
a57 3
#ifdef __UNIXOS2__
    {"OS2Mouse",		MTYPE_AUTOMOUSE},
#endif
d325 1
a325 1
	Widget viewport;
d362 1
a362 1
	(void) XtCreateManagedWidget("labelD", labelWidgetClass,
d379 1
a379 1
	(void) XtCreateManagedWidget("labelP", labelWidgetClass,
@


