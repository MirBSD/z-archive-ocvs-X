head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.1
	cvs-200410241530:1.1.1.1
	cvs-200410012000:1.1.1.1
	cvs-200407141120:1.1.1.1
	cvs-200406231010:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.1
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.1
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.20.06.27;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.06.27;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.22.06;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Id: kcmap.c,v 1.1 1999/11/02 03:54:46 keithp Exp $
 *
 * Copyright © 1999 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */
/* $XFree86: xc/programs/Xserver/hw/kdrive/kcmap.c,v 1.5 2000/09/22 06:25:29 keithp Exp $ */

#include "kdrive.h"

/*
 * Put the entire colormap into the DAC
 */

void
KdSetColormap (ScreenPtr pScreen, int fb)
{
    KdScreenPriv(pScreen);
    ColormapPtr	pCmap = pScreenPriv->pInstalledmap[fb];
    Pixel	pixels[KD_MAX_PSEUDO_SIZE];
    xrgb	colors[KD_MAX_PSEUDO_SIZE];
    xColorItem	defs[KD_MAX_PSEUDO_SIZE];
    int		i;

    if (!pScreenPriv->card->cfuncs->putColors)
	return;
    if (pScreenPriv->screen->fb[fb].depth > KD_MAX_PSEUDO_DEPTH)
	return;
    
    if (!pScreenPriv->enabled)
	return;
    
    if (!pCmap)
	return;

    /*
     * Make DIX convert pixels into RGB values -- this handles
     * true/direct as well as pseudo/static visuals
     */
    
    for (i = 0; i < (1 << pScreenPriv->screen->fb[fb].depth); i++)
	pixels[i] = i;

    QueryColors (pCmap, (1 << pScreenPriv->screen->fb[fb].depth), pixels, colors);
    
    for (i = 0; i < (1 << pScreenPriv->screen->fb[fb].depth); i++)
    {
	defs[i].pixel = i;
	defs[i].red = colors[i].red;
	defs[i].green = colors[i].green;
	defs[i].blue = colors[i].blue;
	defs[i].flags = DoRed|DoGreen|DoBlue;
    }

    (*pScreenPriv->card->cfuncs->putColors) (pCmap->pScreen, fb,
					     (1 << pScreenPriv->screen->fb[fb].depth),
					     defs);

    /* recolor hardware cursor */
    if (pScreenPriv->card->cfuncs->recolorCursor)
	(*pScreenPriv->card->cfuncs->recolorCursor) (pCmap->pScreen, 0, 0);
}

/*
 * When the hardware is enabled, save the hardware colors and store
 * the current colormap
 */
void
KdEnableColormap (ScreenPtr pScreen)
{
    KdScreenPriv(pScreen);
    int	    i;
    int	    fb;
    Bool    done = FALSE;

    if (!pScreenPriv->card->cfuncs->putColors)
	return;
    for (fb = 0; fb < KD_MAX_FB && pScreenPriv->screen->fb[fb].depth; fb++)
    {
	if (pScreenPriv->screen->fb[fb].depth <= KD_MAX_PSEUDO_DEPTH && !done)
	{
	    for (i = 0; i < (1 << pScreenPriv->screen->fb[fb].depth); i++)
		pScreenPriv->systemPalette[i].pixel = i;
	    (*pScreenPriv->card->cfuncs->getColors) (pScreen, fb,
						   (1 << pScreenPriv->screen->fb[fb].depth),
						   pScreenPriv->systemPalette);
	    done = TRUE;
	}
	KdSetColormap (pScreen, fb);
    }
}

void
KdDisableColormap (ScreenPtr pScreen)
{
    KdScreenPriv(pScreen);
    int	    fb;

    if (!pScreenPriv->card->cfuncs->putColors)
	return;
    for (fb = 0; fb < KD_MAX_FB && pScreenPriv->screen->fb[fb].depth; fb++)
    {
	if (pScreenPriv->screen->fb[fb].depth <= KD_MAX_PSEUDO_DEPTH)
	{
	    (*pScreenPriv->card->cfuncs->putColors) (pScreen, fb,
						     (1 << pScreenPriv->screen->fb[fb].depth),
						     pScreenPriv->systemPalette);
	    break;
	}
    }
}

int
KdColormapFb (ColormapPtr   pCmap)
{
    ScreenPtr	pScreen = pCmap->pScreen;
    KdScreenPriv (pScreen);
    KdScreenInfo    *screen = pScreenPriv->screen;
    int		d;
    DepthPtr	depth;
    int		v, vi;
    VisualPtr	visual;
    VisualID	vid = pCmap->pVisual->vid;
    int		fb;

    if (screen->fb[1].depth)
    {
	for (d = 0; d < pScreen->numDepths; d++)
	{
	    depth = &pScreen->allowedDepths[d];
	    for (v = 0; v < depth->numVids; v++)
	    {
		if (depth->vids[v] == vid)
		{
		    for (fb = 0; fb < KD_MAX_FB && screen->fb[fb].depth; fb++)
		    {
			if (depth->depth == screen->fb[fb].depth)
			    return fb;
		    }
		}
	    }
	}
    }
    return 0;
}

/*
 * KdInstallColormap
 *
 * This function is called when the server receives a request to install a
 * colormap or when the server needs to install one on its own, like when
 * there's no window manager running and the user has moved the pointer over
 * an X client window.  It needs to build an identity Windows palette for the
 * colormap and realize it into the Windows system palette.
 */
void
KdInstallColormap (ColormapPtr pCmap)
{
    KdScreenPriv(pCmap->pScreen);
    int		fb = KdColormapFb (pCmap);

    if (pCmap == pScreenPriv->pInstalledmap[fb])
	return;

    /* Tell X clients that the installed colormap is going away. */
    if (pScreenPriv->pInstalledmap[fb])
	WalkTree(pScreenPriv->pInstalledmap[fb]->pScreen, TellLostMap,
		 (pointer) &(pScreenPriv->pInstalledmap[fb]->mid));

    /* Take note of the new installed colorscreen-> */
    pScreenPriv->pInstalledmap[fb] = pCmap;

    KdSetColormap (pCmap->pScreen, fb);
    
    /* Tell X clients of the new colormap */
    WalkTree(pCmap->pScreen, TellGainedMap, (pointer) &(pCmap->mid));
}

/*
 * KdUninstallColormap
 *
 * This function uninstalls a colormap by either installing 
 * the default X colormap or erasing the installed colormap pointer.
 * The default X colormap itself cannot be uninstalled.
 */
void
KdUninstallColormap (ColormapPtr pCmap)
{
    KdScreenPriv(pCmap->pScreen);
    int		fb = KdColormapFb (pCmap);
    Colormap	defMapID;
    ColormapPtr defMap;

    /* ignore if not installed */
    if (pCmap != pScreenPriv->pInstalledmap[fb])
	return;

    /* ignore attempts to uninstall default colormap */
    defMapID = pCmap->pScreen->defColormap;
    if ((Colormap) pCmap->mid == defMapID)
	return;

    /* install default if on same fb */
    defMap = (ColormapPtr) LookupIDByType(defMapID, RT_COLORMAP);
    if (defMap && KdColormapFb (defMap) == fb)
	(*pCmap->pScreen->InstallColormap)(defMap);
    else
    {
	/* uninstall and clear colormap pointer */
	WalkTree(pCmap->pScreen, TellLostMap,
		 (pointer) &(pCmap->mid));
	pScreenPriv->pInstalledmap[fb] = 0;
    }
}

int
KdListInstalledColormaps (ScreenPtr pScreen, Colormap *pCmaps)
{
    KdScreenPriv(pScreen);
    int		fb;
    int		n = 0;
    
    for (fb = 0; fb < KD_MAX_FB && pScreenPriv->screen->fb[fb].depth; fb++)
    {
	if (pScreenPriv->pInstalledmap[fb])
	{
	    *pCmaps++ = pScreenPriv->pInstalledmap[fb]->mid;
	    n++;
	}
    }
    return n;
}

/*
 * KdStoreColors
 *
 * This function is called whenever the server receives a request to store
 * color values into one or more entries in the currently installed X
 * colormap; it can be either the default colormap or a private colorscreen->
 */
void
KdStoreColors (ColormapPtr pCmap, int ndef, xColorItem *pdefs)
{
    KdScreenPriv(pCmap->pScreen);
    VisualPtr           pVisual;
    xColorItem          expanddefs[KD_MAX_PSEUDO_SIZE];
    int			fb = KdColormapFb (pCmap);

    if (pCmap != pScreenPriv->pInstalledmap[fb])
	return;
    
    if (!pScreenPriv->card->cfuncs->putColors)
	return;
    
    if (pScreenPriv->screen->fb[fb].depth > KD_MAX_PSEUDO_DEPTH)
	return;
    
    if (!pScreenPriv->enabled)
	return;
    
    /* Check for DirectColor or TrueColor being simulated on a PseudoColor device. */
    pVisual = pCmap->pVisual;
    if ((pVisual->class | DynamicClass) == DirectColor)
    {
	/*
	 * Expand DirectColor or TrueColor color values into a PseudoColor
	 * format.  Defer to the Color Framebuffer (CFB) code to do that.
	 */
	ndef = fbExpandDirectColors(pCmap, ndef, pdefs, expanddefs);
	pdefs = expanddefs;
    }

    (*pScreenPriv->card->cfuncs->putColors) (pCmap->pScreen, fb, ndef, pdefs);
    
    /* recolor hardware cursor */
    if (pScreenPriv->card->cfuncs->recolorCursor)
	(*pScreenPriv->card->cfuncs->recolorCursor) (pCmap->pScreen, ndef, pdefs);
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
