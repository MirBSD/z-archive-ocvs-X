head	1.2;
access;
symbols
	ctm-0349:1.1.1.1 openbsd-xf4:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.08.19.33.11;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.20.06.23;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.20.06.23;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge conflicts
@
text
@/**************************************************************
 * quartzPasteboard.c
 *
 * Aqua pasteboard <-> X cut buffer
 * Greg Parker     gparker@@cs.stanford.edu     March 8, 2001
 **************************************************************/
/* $XFree86: xc/programs/Xserver/hw/darwin/bundle/quartzPasteboard.c,v 1.3 2001/09/23 04:04:49 torrey Exp $ */

#include "quartzPasteboard.h"

#include "Xatom.h"
#include "windowstr.h"
#include "propertyst.h"
#include "scrnintstr.h"
#include "selection.h"
#include "globals.h"

extern Selection *CurrentSelections;
extern int NumCurrentSelections;


// Helper function to read the X11 cut buffer
// FIXME: What about multiple screens? Currently, this reads the first
// CUT_BUFFER0 from the first screen where the buffer content is a string.
// Returns a string on the heap that the caller must free.
// Returns NULL if there is no cut text or there is not enough memory.
static char * QuartzReadCutBuffer(void)
{
    int i;
    char *text = NULL;

    for (i = 0; i < screenInfo.numScreens; i++) {
        ScreenPtr pScreen = screenInfo.screens[i];
        PropertyPtr pProp;

        pProp = wUserProps (WindowTable[pScreen->myNum]);
        while (pProp && pProp->propertyName != XA_CUT_BUFFER0) {
	    pProp = pProp->next;
        }
        if (! pProp) continue;
        if (pProp->type != XA_STRING) continue;
        if (pProp->format != 8) continue;

        text = xalloc(1 + pProp->size);
        if (! text) continue;
        memcpy(text, pProp->data, pProp->size);
        text[pProp->size] = '\0';
        return text;
    }

    // didn't find any text
    return NULL;
}

// Write X cut buffer to Mac OS X pasteboard
// Called by ProcessInputEvents() in response to request from X server thread.
void QuartzWritePasteboard(void)
{
    char *text;
    text = QuartzReadCutBuffer();
    if (text) {
        QuartzWriteCocoaPasteboard(text);
        free(text);
    }
}

#define strequal(a, b) (0 == strcmp((a), (b)))

// Read Mac OS X pasteboard into X cut buffer
// Called by ProcessInputEvents() in response to request from X server thread.
void QuartzReadPasteboard(void)
{
    char *oldText = QuartzReadCutBuffer();
    char *text = QuartzReadCocoaPasteboard();

    // Compare text with current cut buffer contents.
    // Change the buffer if both exist and are different
    //   OR if there is new text but no old text.
    // Otherwise, don't clear the selection unnecessarily.

    if ((text && oldText && !strequal(text, oldText)) ||
        (text && !oldText)) {
        int scrn, sel;

        for (scrn = 0; scrn < screenInfo.numScreens; scrn++) {
	    ScreenPtr pScreen = screenInfo.screens[scrn];
	    // Set the cut buffers on each screen
	    // fixme really on each screen?
	    ChangeWindowProperty(WindowTable[pScreen->myNum], XA_CUT_BUFFER0,
				 XA_STRING, 8, PropModeReplace,
				 strlen(text), (pointer)text, TRUE);
        }

        // Undo any current X selection (similar to code in dispatch.c)
        // FIXME: what about secondary selection?
        // FIXME: only touch first XA_PRIMARY selection?
        sel = 0;
        while ((sel < NumCurrentSelections)  &&
	       CurrentSelections[sel].selection != XA_PRIMARY)
	    sel++;
        if (sel < NumCurrentSelections) {
	    // Notify client if necessary
	    if (CurrentSelections[sel].client) {
	        xEvent event;

	        event.u.u.type = SelectionClear;
		event.u.selectionClear.time = GetTimeInMillis();
		event.u.selectionClear.window = CurrentSelections[sel].window;
		event.u.selectionClear.atom = CurrentSelections[sel].selection;
		TryClientEvents(CurrentSelections[sel].client, &event, 1,
				NoEventMask, NoEventMask /*CantBeFiltered*/,
				NullGrab);
	    }

	    // Erase it
	    // FIXME: need to erase .selection too? dispatch.c doesn't
	    CurrentSelections[sel].pWin = NullWindow;
	    CurrentSelections[sel].window = None;
	    CurrentSelections[sel].client = NullClient;
        }
    }

    if (text) free(text);
    if (oldText) free(oldText);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
