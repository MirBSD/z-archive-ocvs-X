head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2003.04.08.18.35.11;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.04.08.18.35.11;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.18.13.10;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.22.02;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/**************************************************************
 *
 * Quartz-specific support for the Darwin X Server
 * that requires Cocoa and Objective-C.
 *
 * This file is separate from the parts of Quartz support
 * that use X include files to avoid symbol collisions.
 *
 **************************************************************/
/*
 * Copyright (c) 2001-2003 Torrey T. Lyons and Greg Parker.
 *                 All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the sale,
 * use or other dealings in this Software without prior written authorization.
 */
/* $XFree86: xc/programs/Xserver/hw/darwin/quartz/quartzCocoa.m,v 1.3 2003/01/19 06:52:54 torrey Exp $ */

#include <Cocoa/Cocoa.h>

#import "Preferences.h"
#include "quartzCommon.h"
#include "pseudoramiX.h"

extern void FatalError(const char *, ...);
extern char *display;
extern int noPanoramiXExtension;


/*
 * QuartzReadPreferences
 *  Read the user preferences from the Cocoa front end.
 */
void QuartzReadPreferences(void)
{
    char *fileString;

    darwinFakeButtons = [Preferences fakeButtons];
    darwinFakeMouse2Mask = [Preferences button2Mask];
    darwinFakeMouse3Mask = [Preferences button3Mask];
    quartzMouseAccelChange = [Preferences mouseAccelChange];
    quartzUseSysBeep = [Preferences systemBeep];

    // quartzRootless has already been set
    if (quartzRootless) {
        // Use PseudoramiX instead of Xinerama
        noPanoramiXExtension = TRUE;
        noPseudoramiXExtension = ![Preferences xinerama];

        quartzUseAGL = [Preferences useAGL];
    } else {
        noPanoramiXExtension = ![Preferences xinerama];
        noPseudoramiXExtension = TRUE;

        // Full screen can't use AGL for GLX
        quartzUseAGL = FALSE;
    }

    if ([Preferences useKeymapFile]) {
        fileString = (char *) [[Preferences keymapFile] lossyCString];
        darwinKeymapFile = (char *) malloc(strlen(fileString)+1);
        if (! darwinKeymapFile)
            FatalError("malloc failed in QuartzReadPreferences()!\n");
        strcpy(darwinKeymapFile, fileString);
    }

    display = (char *) malloc(8);
    if (! display)
        FatalError("malloc failed in QuartzReadPreferences()!\n");
    snprintf(display, 8, "%i", [Preferences display]);

    darwinDesiredDepth = [Preferences depth] - 1;
}


/*
 * QuartzWriteCocoaPasteboard
 *  Write text to the Mac OS X pasteboard.
 */
void QuartzWriteCocoaPasteboard(
    char *text)
{
    NSPasteboard *pasteboard;
    NSArray *pasteboardTypes;
    NSString *string;

    if (! text) return;
    pasteboard = [NSPasteboard generalPasteboard];
    if (! pasteboard) return;
    string = [NSString stringWithCString:text];
    if (! string) return;
    pasteboardTypes = [NSArray arrayWithObject:NSStringPboardType];

    // nil owner because we don't provide type translations
    [pasteboard declareTypes:pasteboardTypes owner:nil];
    [pasteboard setString:string forType:NSStringPboardType];
}


/*
 * QuartzReadCocoaPasteboard
 *  Read text from the Mac OS X pasteboard and return it as a heap string.
 *  The caller must free the string.
 */
char *QuartzReadCocoaPasteboard(void)
{
    NSPasteboard *pasteboard;
    NSArray *pasteboardTypes;
    NSString *existingType;
    char *text = NULL;

    pasteboardTypes = [NSArray arrayWithObject:NSStringPboardType];
    pasteboard = [NSPasteboard generalPasteboard];
    if (! pasteboard) return NULL;

    existingType = [pasteboard availableTypeFromArray:pasteboardTypes];
    if (existingType) {
        NSString *string = [pasteboard stringForType:existingType];
        char *buffer;

        if (! string) return NULL;
        buffer = (char *) [string lossyCString];
        text = (char *) malloc(strlen(buffer)+1);
        if (text)
            strcpy(text, buffer);
    }

    return text;
}


/*
 * QuartzFSUseQDCursor
 *  Return whether the screen should use a QuickDraw cursor.
 */
int QuartzFSUseQDCursor(
    int depth)  // screen depth
{
    switch ([Preferences useQDCursor]) {
        case qdCursor_Always:
            return TRUE;
        case qdCursor_Never:
            return FALSE;
        case qdCursor_Not8Bit:
            if (depth > 8)
                return TRUE;
            else
                return FALSE;
    }
    return TRUE;
}


/*
 * QuartzBlockHandler
 *  Clean out any autoreleased objects.
 */
void QuartzBlockHandler(
    void *blockData,
    void *pTimeout,
    void *pReadmask)
{
    static NSAutoreleasePool *aPool = nil;

    [aPool release];
    aPool = [[NSAutoreleasePool alloc] init];
}


/*
 * QuartzWakeupHandler
 */
void QuartzWakeupHandler(
    void *blockData,
    int result,
    void *pReadmask)
{
    // nothing here
}
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d36 1
a36 7
/* $XFree86: xc/programs/Xserver/hw/darwin/quartz/quartzCocoa.m,v 1.4 2003/05/14 05:27:56 torrey Exp $ */

#include "quartzCommon.h"

#define BOOL xBOOL
#include "darwin.h"
#undef BOOL
d41 1
d60 1
a60 1
    darwinMouseAccelChange = [Preferences mouseAccelChange];
@


1.1.1.1
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d36 1
a36 7
/* $XFree86: xc/programs/Xserver/hw/darwin/quartz/quartzCocoa.m,v 1.4 2003/05/14 05:27:56 torrey Exp $ */

#include "quartzCommon.h"

#define BOOL xBOOL
#include "darwin.h"
#undef BOOL
d41 1
d60 1
a60 1
    darwinMouseAccelChange = [Preferences mouseAccelChange];
@

