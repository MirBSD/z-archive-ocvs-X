head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.3
	cvs-200410241530:1.1.1.3
	cvs-200410012000:1.1.1.3
	cvs-200407141120:1.1.1.3
	cvs-200406231010:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	cvs-200405271510:1.1.1.3
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.3
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.4
	MIRBSD_7:1.1.1.2.0.2
	MIRBSD_7ter:1.1.1.2
	cvs-20011091815:1.1.1.2
	cvs-200309162130:1.1.1.2
	cvs-200308302005:1.1.1.2
	ctmx-0387:1.1.1.2
	ctmx-0384:1.1.1.2
	MIRBSD_5:1.1.1.2
	ctmx-0375:1.1.1.2
	ctmx-0373:1.1.1.2
	ctm-0371:1.1.1.2
	ctm-0370:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-0363:1.1.1.2
	ctm-0359:1.1.1.2
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.20.10.32;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.20.10.32;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.08.18.40.18;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.03.02.18.41.20;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.29.03;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@// $Xorg: group,v 1.3 2000/08/17 19:54:43 cpqbld Exp $
// using the group(switch) map, the right alt key temporarily chooses 
// the second keyboard group (until it is released).
//
// $XFree86: xc/programs/xkbcomp/symbols/group,v 3.6 2001/08/17 13:27:58 dawes Exp $
partial modifier_keys 
xkb_symbols "switch" {
    key <RALT>	{ 	
	symbols[Group1]= [	Mode_switch, Multi_key 	],
	virtualMods= AltGr
    };
};

// using the group(win_switch) map, both Windows'logo keys temporarily
// choose the second keyboard group (until release).  If you use this
// map, you would declare you keyboard as pc101 or pc102 instead of
// pc104 or pc105.
partial modifier_keys
xkb_symbols "win_switch" {
  key <LWIN> {
    symbols[Group1] = [ Mode_switch, Multi_key ],
    virtualMods= AltGr
    };
  key <RWIN> {
    symbols[Group1] = [ Mode_switch, Multi_key ],
    virtualMods= AltGr
    };
};

// using the group(lwin_switch) map, the left Windows' logo key
// temporarily chooses the second keyboard group (until it is
// released).  If you use this map, you would declare you keyboard as
// pc101 or pc102 instead of pc104 or pc105.
partial modifier_keys
xkb_symbols "lwin_switch" {
  key <LWIN> {
    symbols[Group1] = [ Mode_switch, Multi_key ],
    virtualMods= AltGr
    };
};

// using the group(rwin_switch) map, the right Windows' logo key
// temporarily chooses the second keyboard group (until it is
// released).  If you use this map, you would declare you keyboard as
// pc101 or pc102 instead of pc104 or pc105.
partial modifier_keys
xkb_symbols "rwin_switch" {
  key <RWIN> {
    symbols[Group1] = [ Mode_switch, Multi_key ],
    virtualMods= AltGr
    };
};

// using the group(toggle) map, pressing the right alt key switches to
// the next sequential group (until the next explicit group change).
partial modifier_keys 
xkb_symbols "toggle" {
    virtual_modifiers AltGr;
    key <RALT>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// using the group(shift_toggle) map, pressing both shift keys together
// locks the next sequential keyboard group.
partial modifier_keys 
xkb_symbols "shift_toggle" {
    key <LFSH>	{	[	Shift_L,	ISO_Prev_Group ]	};
    key <RTSH>	{	[	Shift_R,	ISO_Next_Group ]	};
};

// using the group(ctrl_shift_toggle) map, pressing:
//     Control_L+Shift_L locks the previous group
//     Control_R+Shift_R locks the next group
// If you have two groups and group wrap is enabled, the effect is
// indistinguishable.
partial modifier_keys 
xkb_symbols "ctrl_shift_toggle" {
    key <LFSH> {
	type="PC_BREAK",
	symbols[Group1]= [ Shift_L,	ISO_Prev_Group ]
    };
    key <RTSH> {
	type="PC_BREAK",
	symbols[Group1]= [ Shift_R,	ISO_Next_Group ]
    };
    key <LCTL>	{	[	Control_L,	ISO_Prev_Group ]	};
    key <RCTL>	{	[	Control_R,	ISO_Next_Group ]	};
};

// using the group(caps_toggle) map, pressing:
//     Caps Lock toggles groups
//     Shift+Caps Lock toggles caps lock
partial modifier_keys
xkb_symbols "caps_toggle" {
    key	<CAPS> {	[  ISO_Next_Group,	 Caps_Lock	]	};
};

// using the group(ctrl_alt_toggle) map, pressing:
//     Control_L+Alt_L locks the previous group
//     Control_R+Alt_R locks the next group
// If you have two groups and group wrap is enabled, the effect is
// indistinguishable.
partial modifier_keys 
xkb_symbols "ctrl_alt_toggle" {
    virtual_modifiers Alt;
    key <LALT> {
	type="PC_BREAK",
	symbols[Group1]= [ NoSymbol,	ISO_Prev_Group ],
	virtualMods= Alt
    };
    key <RALT> {
	type="PC_BREAK",
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ],
	virtualMods= Alt
    };
    key <LCTL> {
	type="PC_SYSRQ",
	symbols[Group1]= [ Control_L,	ISO_Prev_Group ]
    };
    key <RCTL> {
	type="PC_SYSRQ",
	symbols[Group1]= [ Control_R,	ISO_Next_Group ]
    };
};

// using the group(alt_shift_toggle) map, pressing:
//     Shift_L+Alt_L locks the previous group
//     Shift_R+Alt_R locks the next group
// If you have two groups and group wrap is enabled, the effect is
// indistinguishable.
partial modifier_keys 
xkb_symbols "alt_shift_toggle" {
    virtual_modifiers Alt;
    key <LALT> {
	symbols[Group1]= [ NoSymbol,	ISO_Prev_Group ],
	virtualMods= Alt
    };
    key <RALT> {
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ],
	virtualMods= Alt
    };
    key <LFSH> {
	type="PC_SYSRQ",
	symbols[Group1]= [ Shift_L,	ISO_Prev_Group ]
    };
    key <RTSH> {
	type="PC_SYSRQ",
	symbols[Group1]= [ Shift_R,	ISO_Next_Group ]
    };
};

// using the group(menu_toggle) map, pressing:
//     Menu key toggles groups
//     Shift+Menu acts as Menu
partial modifier_keys
xkb_symbols "menu_toggle" {
    key	<MENU> {	[  ISO_Next_Group,	 Menu	]	};
};

// using the group(lwin_toggle) map, pressing the left Windows' logo key
// toggles groups.  If you use this map, you would declare you keyboard
// as pc101 or pc102 instead of pc104 or pc105.
partial modifier_keys
xkb_symbols "lwin_toggle" {
  virtual_modifiers AltGr;
  key <LWIN> {
    virtualMods= AltGr,
    symbols[Group1] = [ ISO_Next_Group ]
    };
};

// using the group(rwin_toggle) map, pressing the right Windows' logo key
// toggles groups.  If you use this map, you would declare you keyboard
// as pc101 or pc102 instead of pc104 or pc105.
partial modifier_keys
xkb_symbols "rwin_toggle" {
  virtual_modifiers AltGr;
  key <RWIN> {
    virtualMods= AltGr,
    symbols[Group1] = [ ISO_Next_Group ]
    };
};
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d5 1
a5 1
// $XFree86: xc/programs/xkbcomp/symbols/group,v 3.9 2003/12/30 13:26:25 pascal Exp $
a13 12
// using the group(lswitch) map, the left alt key temporarily chooses
// the second keyboard group (until it is released).
//
partial modifier_keys 
xkb_symbols "lswitch" {
    key <LALT>	{ 	
	symbols[Group1]= [	Mode_switch, Multi_key 	],
	virtualMods= AltGr
    };
};


a99 7
// using the group(shift_caps_toggle) map, pressing:
//     Shift+Caps Lock toggles group
partial modifier_keys
xkb_symbols "shift_caps_toggle" {
    key	<CAPS> {	[  Caps_Lock,		ISO_Next_Group	]	};
};

a182 80
    };
};

// Both Ctrls pressed together toggle group
partial modifier_keys
xkb_symbols "ctrls_toggle" {
  virtual_modifiers AltGr;
    key <LCTL> {
	type="PC_BREAK",
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ]
    };
    key <RCTL> {
	type="PC_BREAK",
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ]
    };
};

// Both Alts pressed together toggle group
partial modifier_keys
xkb_symbols "alts_toggle" {
  virtual_modifiers AltGr;
    key <LALT> {
	type="PC_SYSRQ",
	symbols[Group1]= [ NoSymbol,	ISO_Prev_Group ],
	virtualMods= Alt
    };
    key <RALT> {
	type="PC_SYSRQ",
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ],
	virtualMods= Alt
    };
};

// Left Shift key toggles group
partial modifier_keys
xkb_symbols "lshift_toggle" {
  virtual_modifiers AltGr;
    key <LFSH>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// Right Shift key toggles group
partial modifier_keys
xkb_symbols "rshift_toggle" {
  virtual_modifiers AltGr;
    key <RTSH>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// Left Alt key toggles group
partial modifier_keys
xkb_symbols "lalt_toggle" {
  virtual_modifiers AltGr;
    key <LALT>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// Left Ctrl key toggles group
partial modifier_keys
xkb_symbols "lctrl_toggle" {
  virtual_modifiers AltGr;
    key <LCTL>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// Right Ctrl key toggles group
partial modifier_keys
xkb_symbols "rctrl_toggle" {
  virtual_modifiers AltGr;
    key <RCTL>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@The X-Windowing System

Import XFree86 4.3 from OpenBSD by CTM, in the hope it's stable
@
text
@d5 1
a5 1
// $XFree86: xc/programs/xkbcomp/symbols/group,v 3.8 2003/01/20 03:48:39 dawes Exp $
a13 12
// using the group(lswitch) map, the left alt key temporarily chooses
// the second keyboard group (until it is released).
//
partial modifier_keys 
xkb_symbols "lswitch" {
    key <LALT>	{ 	
	symbols[Group1]= [	Mode_switch, Multi_key 	],
	virtualMods= AltGr
    };
};


a182 80
    };
};

// Both Ctrls pressed together toggle group
partial modifier_keys
xkb_symbols "ctrls_toggle" {
  virtual_modifiers AltGr;
    key <LCTL> {
	type="PC_BREAK",
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ]
    };
    key <RCTL> {
	type="PC_BREAK",
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ]
    };
};

// Both Alts pressed together toggle group
partial modifier_keys
xkb_symbols "alts_toggle" {
  virtual_modifiers AltGr;
    key <LALT> {
	type="PC_SYSRQ",
	symbols[Group1]= [ NoSymbol,	ISO_Prev_Group ],
	virtualMods= Alt
    };
    key <RALT> {
	type="PC_SYSRQ",
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ],
	virtualMods= Alt
    };
};

// Left Shift key toggles group
partial modifier_keys
xkb_symbols "lshift_toggle" {
  virtual_modifiers AltGr;
    key <LFSH>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// Right Shift key toggles group
partial modifier_keys
xkb_symbols "rshift_toggle" {
  virtual_modifiers AltGr;
    key <RTSH>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// Left Alt key toggles group
partial modifier_keys
xkb_symbols "lalt_toggle" {
  virtual_modifiers AltGr;
    key <LALT>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// Left Ctrl key toggles group
partial modifier_keys
xkb_symbols "lctrl_toggle" {
  virtual_modifiers AltGr;
    key <LCTL>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// Right Ctrl key toggles group
partial modifier_keys
xkb_symbols "rctrl_toggle" {
  virtual_modifiers AltGr;
    key <RCTL>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
@


1.1.1.3
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d5 1
a5 1
// $XFree86: xc/programs/xkbcomp/symbols/group,v 3.9 2003/12/30 13:26:25 pascal Exp $
a109 7
};

// using the group(shift_caps_toggle) map, pressing:
//     Shift+Caps Lock toggles group
partial modifier_keys
xkb_symbols "shift_caps_toggle" {
    key	<CAPS> {	[  Caps_Lock,		ISO_Next_Group	]	};
@


