head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-2:1.1.1.2
	cvs-200410241530:1.1.1.2
	cvs-200410012000:1.1.1.2
	cvs-200407141120:1.1.1.2
	cvs-200406231010:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405271510:1.1.1.2
	XFree86_4_4_0:1.1.9.1
	cvs-200403021700:1.1.1.2
	XFREE86_20040213:1.1.9.1
	xc:1.1.9
	cvs-200401291925:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.4
	MIRBSD_7:1.1.1.1.0.2
	MIRBSD_7ter:1.1.1.1
	cvs-20011091815:1.1.1.1
	cvs-200309162130:1.1.1.1
	cvs-200308302005:1.1.1.1
	ctmx-0388:1.1.1.1
	cvs-200307072234:1.1.1.1
	ctmx-0387:1.1.1.1
	ctmx-0384:1.1.1.1
	MIRBSD_5:1.1.1.1
	ctmx-0375:1.1.1.1
	ctmx-0373:1.1.1.1
	ctm-0371:1.1.1.1
	ctm-0370:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-0363:1.1.1.1
	ctm-0359:1.1.1.1
	ctm-0349:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.19.59.29;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.9.1;
next	;

1.1.1.1
date	2003.03.22.19.59.29;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.03.02.17.20.56;	author tg;	state Stab;
branches;
next	;

1.1.9.1
date	2004.02.14.19.01.44;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@XCOMM $Xorg: xf86.rules,v 1.3 2000/08/17 19:41:48 cpqbld Exp $




XCOMM $XFree86: xc/config/cf/xf86.rules,v 3.34 2001/07/19 02:22:44 tsi Exp $

/*
 * These rules are needed to build the XFree86 X Servers
 */

#ifndef CPPOnlyAsm
#define CPPOnlyAsm(basename,options) RemoveFile(basename.i)		@@@@\
	$(CPP) AsmDefines $(DEFINES) $(INCLUDES) options basename.S | \	@@@@\
		grep -v '^\#' > basename.i
#endif

#ifndef AssembleObject
#define AssembleObject(flags) CPPOnlyAsm($*,flags)			@@@@\
	RemoveFile($*.o)						@@@@\
	$(AS) -o $*.o $*.i						@@@@\
	RemoveFile($*.i)
#endif

#ifndef NormalAsmObjectRule
#define NormalAsmObjectRule()						@@@@\
.S.o:									@@@@\
	AssembleObject($(_NOOP_))					@@@@\
									@@@@\
.S.i:									@@@@\
	CPPOnlyAsm($*,$(_NOOP_))
#endif

#ifndef ObjectFromSpecialAsmSource
#define ObjectFromSpecialAsmSource(dst,src,flags)			@@@@\
dst.S:  src.S								@@@@\
	RemoveFile($@@)							@@@@\
	$(LN) $? $@@							@@@@\
									@@@@\
dst.o:  dst.S								@@@@\
	AssembleObject(flags)						@@@@\
									@@@@\
dst.i:  dst.S								@@@@\
	CPPOnlyAsm(dst,flags)						@@@@\
									@@@@\
depend:: dst.S								@@@@\
									@@@@\
clean::									@@@@\
	RemoveFile(dst.S)
#endif

#ifndef ObjectFromAsmSource
#define ObjectFromAsmSource(src,flags)					@@@@\
									@@@@\
src.o:  src.S								@@@@\
	AssembleObject(flags)						@@@@\
									@@@@\
src.i:  src.S								@@@@\
	CPPOnlyAsm(src,flags)						@@@@\
									@@@@\
depend:: src.S
#endif

#ifndef ObjectMapIncludeFromSpecialSource
#define ObjectMapIncludeFromSpecialSource(dst,src,flags)		@@@@\
dst.c:	src.c								@@@@\
	RemoveFile($@@)							@@@@\
	echo "#include \"mfbmap.h\"" > $@@				@@@@\
	echo "#include \"$?\"" >> $@@					@@@@\
									@@@@\
SpecialCObjectRule(dst,NullParameter,flags)				@@@@\
									@@@@\
depend::	dst.c							@@@@\
									@@@@\
clean::									@@@@\
	RemoveFile(dst.c)
#endif


/*
 * Rules for building config files from scripts
 */

#ifndef Depend
# define Depend depend
#endif
 
#ifndef ConfigTargetLong
#define ConfigTargetLong(target,dep,script,args,extra)			@@@@\
all:: Configure								@@@@\
									@@@@\
Configure:: target.o							@@@@\
									@@@@\
target.c: script dep							@@@@\
	$(MAKE) $(MFLAGS) Makefile					@@@@\
	$(MAKE) $(MFLAGS) extra Concat(Build,target)			@@@@\
									@@@@\
Concat(Build,target):							@@@@\
	$(RM) target.c							@@@@\
	$(SHELL) script args						@@@@\
									@@@@\
clean::									@@@@\
	$(RM) target.c
#endif

#define ConfigTarget(target,dep,script,args) ConfigTargetLong(target,dep,script,args,Depend)

#define ConfigTargetNoDepend(target,dep,script,args) ConfigTargetLong(target,dep,script,args,)

#ifndef DriverObjectList
#define DriverObjectList(drivers,list)					@@@@\
list: $(ICONFIGFILES) drivers						@@@@\
	RemoveFile(list)						@@@@\
	@@echo Creating list for drivers; \				@@@@\
	DRIVERS="drivers"; \						@@@@\
	if [ x"$$DRIVERS" != x ]; then \				@@@@\
	  for i in $$DRIVERS; do \					@@@@\
	    DRIVER="$$i/*_drv.o"; \					@@@@\
	    for j in $$DRIVER; do \					@@@@\
	      echo $$j >> list; \					@@@@\
	    done; \							@@@@\
	  done; \							@@@@\
	else \								@@@@\
	  echo "" > list; \						@@@@\
	fi								@@@@\
									@@@@\
clean::									@@@@\
	RemoveFile(list)
#endif

/*
 * Rules for installing Driver SDK parts (target is install.sdk)
 */

#ifndef InstallDriverSDKNonExecFile
#if !DoLoadableServer
#define InstallDriverSDKNonExecFile(file,dest)				/**/
#else
#define InstallDriverSDKNonExecFile(file,dest)				@@@@\
install.sdk:: file							@@@@\
	MakeDir($(DESTDIR)dest)						@@@@\
	$(INSTALL) -c $(INSTDATFLAGS) file $(DESTDIR)dest
#endif
#endif

#ifndef InstallDriverSDKLibrary
#if !DoLoadableServer
#define InstallDriverSDKLibrary(libname,dest)				/**/
#else
#define InstallDriverSDKLibrary(libname,dest)				@@@@\
install.sdk:: Concat(lib,libname.a)					@@@@\
	MakeDir($(DESTDIR)dest)						@@@@\
	$(INSTALL) -c $(INSTLIBFLAGS) Concat(lib,libname.a) $(DESTDIR)dest @@@@\
	RanLibrary($(RANLIBINSTFLAGS) Concat($(DESTDIR)dest/lib,libname.a))
#endif
#endif

#ifndef InstallDriverSDKNamedLibrary
#if !DoLoadableServer
#define InstallDriverSDKNamedLibrary(libname,dlibname,dest)		/**/
#else
#define InstallDriverSDKNamedLibrary(libname,dlibname,dest)		@@@@\
install.sdk:: Concat(lib,libname.a)					@@@@\
	MakeDir($(DESTDIR)dest)						@@@@\
	$(INSTALL) -c $(INSTLIBFLAGS) Concat(lib,libname.a) \		@@@@\
	  Concat($(DESTDIR)dest/lib,dlibname.a)				@@@@\
	RanLibrary($(RANLIBINSTFLAGS) Concat($(DESTDIR)dest/lib,dlibname.a))
#endif
#endif

#ifndef InstallDriverSDKNamedNonExec
#if !DoLoadableServer
#define InstallDriverSDKNamedNonExec(srcname,dstname,dest)		/**/
#else
#define InstallDriverSDKNamedNonExec(srcname,dstname,dest)		@@@@\
install.sdk:: srcname							@@@@\
	MakeDir($(DESTDIR)dest)						@@@@\
	$(INSTALL) -c $(INSTDATFLAGS) srcname $(DESTDIR)dest/dstname
#endif
#endif

#ifndef InstallDriverSDKNamedProg
#if !DoLoadableServer
#define InstallDriverSDKNamedProg(srcname,dstname,dest)			/**/
#else
#define InstallDriverSDKNamedProg(srcname,dstname,dest)			@@@@\
install.sdk:: srcname							@@@@\
	MakeDir($(DESTDIR)dest)						@@@@\
	$(INSTALL) -c $(INSTBINFLAGS) srcname $(DESTDIR)dest/dstname
#endif
#endif

#ifndef InstallDriverSDKSubdirs
#if !DoLoadableServer
#define InstallDriverSDKSubdirs(dirs)					/**/
#else
#define InstallDriverSDKSubdirs(dirs) \
NamedTargetSubdirs(install.sdk,dirs,"installing driver SDK",DESTDIR='$(DESTDIR)',install.sdk)
#endif
#endif

#ifndef InstallDriverSDKMultipleDestFlags
#if !DoLoadableServer
#define InstallDriverSDKMultipleDestFlags(list,dest,flags)		/**/
#else
#define InstallDriverSDKMultipleDestFlags(list,dest,flags) \
InstallMultipleDestFlags(install.sdk,list,dest,flags)
#endif
#endif

#ifndef InstallDriverSDKDynamicModule
#if !DoLoadableServer
#define InstallDriverSDKDynamicModule(module,dest,subdir)		/**/
#else
#define InstallDriverSDKDynamicModule(module,dest,subdir)		@@@@\
install.sdk:: module							@@@@\
	MakeDir($(DESTDIR)dest/subdir)					@@@@\
	$(INSTALL) -c module $(DESTDIR)dest/subdir
#endif
#endif

#ifndef InstallDriverSDKObjectModule
#if !DoLoadableServer
#define InstallDriverSDKObjectModule(module,dest,subdir)		/**/
#else
#if MakeDllModules
#define InstallDriverSDKObjectModule(module,dest,subdir)		@@@@\
InstallDriverSDKDynamicModule(Concat(module,_drv.so),dest,subdir)
#else
#define InstallDriverSDKObjectModule(module,dest,subdir)		@@@@\
InstallDriverSDKDynamicModule(Concat(module,_drv.o),dest,subdir)
#endif
#endif
#endif


#ifndef InstallDriverSDKObjectSubModule
#if !DoLoadableServer
#define InstallDriverSDKObjectSubModule(module,dest,subdir)		/**/
#else
#if MakeDllModules
#define InstallDriverSDKObjectSubModule(module,dest,subdir)		@@@@\
InstallDriverSDKDynamicModule(Concat(module,.o),dest,subdir)
#else
#define InstallDriverSDKObjectSubModule(module,dest,subdir)		@@@@\
InstallDriverSDKDynamicModule(Concat(module,.o),dest,subdir)
#endif
#endif
#endif

#ifndef InstallDriverSDKLibraryModule
#if !DoLoadableServer
#define InstallDriverSDKLibraryModule(module,dest,subdir)		/**/
#else
#if MakeDllModules
#define InstallDriverSDKLibraryModule(module,dest,subdir)		@@@@\
InstallDriverSDKDynamicModule(Concat3(lib,module,.so),dest,subdir)
#else
#define InstallDriverSDKLibraryModule(module,dest,subdir)		@@@@\
InstallDriverSDKDynamicModule(ModuleLibraryTargetName(module),dest,subdir)
#endif
#endif
#endif

#ifndef ServerDriverSDKTarget
#if !DoLoadableServer
#define ServerDriverSDKTarget(program)					/**/
#else
#define ServerDriverSDKTarget(program)					@@@@\
InstallDriverSDKProgramWithFlags(program,$(DRIVERSDKDIR),$(_NOOP_))
#endif
#endif

#ifndef InstallDriverSDKProgramWithFlags
#if !DoLoadableServer
#define InstallDriverSDKProgramWithFlags(program,dest,flags)		/**/
#else
#define InstallDriverSDKProgramWithFlags(program,dest,flags)		@@@@\
InstallTarget(install.sdk,ProgramTargetName(program),$(INSTPGMFLAGS) flags,dest)
#endif
#endif
@


1.1.9.1
log
@OpenBSD just has imported exactly this tree into their vendor branch,
called the same tag, in XF4/xc
This is, apparently, the last XFree86 snapshot before the licence change
(ie, addition of the advertising clause)

Since the developers don't see any problems with that, and we would like
to integrate improvements done by the remaining one or two (or so) XFree86
developers (j/k), this prepares enabling us to update X-Window in the future.
@
text
@d6 1
a6 1
XCOMM $XFree86: xc/config/cf/xf86.rules,v 3.35 2003/09/01 21:20:01 tsi Exp $
d9 1
a9 1
 * Rules needed to build the XFree86 X Servers
d11 52
@


1.1.1.1
log
@Import OpenBSD 3.3 XF4 repository from CTM 3132 the first time
This finalizes starting an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@That's what OpenBSD will, probably, ship as XF4 in 3.5
their last sync against XFree86 4.3-current has been
imported into our vendor branch, too
@
text
@d6 1
a6 1
XCOMM $XFree86: xc/config/cf/xf86.rules,v 3.35 2003/09/01 21:20:01 tsi Exp $
d9 1
a9 1
 * Rules needed to build the XFree86 X Servers
d11 52
@

